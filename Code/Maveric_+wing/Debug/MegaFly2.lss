
MegaFly2.elf:     file format elf32-avr32

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .reset        00002008  80000000  80000000  00000400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rela.got     00000000  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         0002f0ee  80002008  80002008  00002408  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .exception    00000200  80031200  80031200  00031600  2**9
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .rodata       00000644  80031400  80031400  00031800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .dalign       00000004  80031a44  80031a44  00031e44  2**0
                  ALLOC
  6 .data.rel.ro  00000178  00000004  80031a48  00032004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .got          00000928  0000017c  80031bc0  0003217c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000163c  00000aa4  800324e8  00032aa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007630  000020e0  80033b24  000340e0  2**2
                  ALLOC
 10 .comment      00000030  00000000  00000000  000340e0  2**0
                  CONTENTS, READONLY
 11 .debug_aranges 00000c08  00000000  00000000  00034110  2**3
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubnames 00007b9a  00000000  00000000  00034d18  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_info   0005c485  00000000  00000000  0003c8b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_abbrev 00009111  00000000  00000000  00098d37  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0001136e  00000000  00000000  000a1e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  00008694  00000000  00000000  000b31b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    0000ecee  00000000  00000000  000bb84c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_loc    0000d752  00000000  00000000  000ca53a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .stack        00001000  0000f000  0000f000  00000400  2**0
                  ALLOC
 20 .debug_ranges 000005d8  00000000  00000000  000d7c90  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .reset:

80000000 <_trampoline>:

  .global _trampoline
  .type _trampoline, @function
_trampoline:
  // Jump to program start.
  rjmp    program_start
80000000:	e0 8f 10 00 	bral	80002000 <program_start>
	...

80002000 <program_start>:

  .org  PROGRAM_START_OFFSET
program_start:
  // Jump to the C runtime startup routine.
  lda.w   pc, _stext
80002000:	fe ff 00 04 	ld.w	pc,pc[4]
80002004:	80 02       	ld.sh	r2,r0[0x0]
80002006:	ba d0       	st.b	sp[0x5],r0

Disassembly of section .text:

80002008 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80002008:	eb cd 40 80 	pushm	r7,lr
8000200c:	1a 97       	mov	r7,sp
8000200e:	20 2d       	sub	sp,8
80002010:	ef 4c ff fc 	st.w	r7[-4],r12
80002014:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80002018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000201c:	2f f8       	sub	r8,-1
8000201e:	11 88       	ld.ub	r8,r8[0x0]
80002020:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002024:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80002026:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000202a:	f0 c9 ff ff 	sub	r9,r8,-1
8000202e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002032:	11 88       	ld.ub	r8,r8[0x0]
80002034:	b2 88       	st.b	r9[0x0],r8
}
80002036:	2f ed       	sub	sp,-8
80002038:	e3 cd 80 80 	ldm	sp++,r7,pc

8000203c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000203c:	eb cd 40 80 	pushm	r7,lr
80002040:	1a 97       	mov	r7,sp
80002042:	20 2d       	sub	sp,8
80002044:	ef 4c ff fc 	st.w	r7[-4],r12
80002048:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000204c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002050:	2f d8       	sub	r8,-3
80002052:	11 88       	ld.ub	r8,r8[0x0]
80002054:	ee f9 ff fc 	ld.w	r9,r7[-4]
80002058:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000205a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000205e:	f0 c9 ff ff 	sub	r9,r8,-1
80002062:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002066:	2f e8       	sub	r8,-2
80002068:	11 88       	ld.ub	r8,r8[0x0]
8000206a:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000206c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002070:	f0 c9 ff fe 	sub	r9,r8,-2
80002074:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002078:	2f f8       	sub	r8,-1
8000207a:	11 88       	ld.ub	r8,r8[0x0]
8000207c:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000207e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002082:	f0 c9 ff fd 	sub	r9,r8,-3
80002086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000208a:	11 88       	ld.ub	r8,r8[0x0]
8000208c:	b2 88       	st.b	r9[0x0],r8
}
8000208e:	2f ed       	sub	sp,-8
80002090:	e3 cd 80 80 	ldm	sp++,r7,pc

80002094 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80002094:	eb cd 40 c0 	pushm	r6-r7,lr
80002098:	1a 97       	mov	r7,sp
8000209a:	20 3d       	sub	sp,12
8000209c:	49 06       	lddpc	r6,800020dc <mav_array_memcpy+0x48>
8000209e:	1e 26       	rsub	r6,pc
800020a0:	ef 4c ff fc 	st.w	r7[-4],r12
800020a4:	ef 4b ff f8 	st.w	r7[-8],r11
800020a8:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800020ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020b0:	58 08       	cp.w	r8,0
800020b2:	c0 91       	brne	800020c4 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800020b4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020b8:	30 0b       	mov	r11,0
800020ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800020be:	f0 16 00 31 	mcall	r6[196]
800020c2:	c0 98       	rjmp	800020d4 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800020c4:	ee fa ff f4 	ld.w	r10,r7[-12]
800020c8:	ee fb ff f8 	ld.w	r11,r7[-8]
800020cc:	ee fc ff fc 	ld.w	r12,r7[-4]
800020d0:	f0 16 00 1b 	mcall	r6[108]
	}
}
800020d4:	2f dd       	sub	sp,-12
800020d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800020da:	00 00       	add	r0,r0
800020dc:	80 00       	ld.sh	r0,r0[0x0]
800020de:	1f 22       	ld.uh	r2,pc++

800020e0 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
800020e0:	eb cd 40 c0 	pushm	r6-r7,lr
800020e4:	1a 97       	mov	r7,sp
800020e6:	20 3d       	sub	sp,12
800020e8:	48 d6       	lddpc	r6,8000211c <_MAV_RETURN_uint16_t+0x3c>
800020ea:	1e 26       	rsub	r6,pc
800020ec:	ef 4c ff f8 	st.w	r7[-8],r12
800020f0:	16 98       	mov	r8,r11
800020f2:	ef 68 ff f4 	st.b	r7[-12],r8
800020f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800020fa:	2f 88       	sub	r8,-8
800020fc:	10 99       	mov	r9,r8
800020fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002102:	10 09       	add	r9,r8
80002104:	ee c8 00 02 	sub	r8,r7,2
80002108:	12 9b       	mov	r11,r9
8000210a:	10 9c       	mov	r12,r8
8000210c:	c7 ef       	rcall	80002008 <byte_swap_2>
8000210e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002112:	10 9c       	mov	r12,r8
80002114:	2f dd       	sub	sp,-12
80002116:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000211a:	00 00       	add	r0,r0
8000211c:	80 00       	ld.sh	r0,r0[0x0]
8000211e:	1f 6e       	ld.uh	lr,--pc

80002120 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80002120:	eb cd 40 c0 	pushm	r6-r7,lr
80002124:	1a 97       	mov	r7,sp
80002126:	20 3d       	sub	sp,12
80002128:	48 d6       	lddpc	r6,8000215c <_MAV_RETURN_int16_t+0x3c>
8000212a:	1e 26       	rsub	r6,pc
8000212c:	ef 4c ff f8 	st.w	r7[-8],r12
80002130:	16 98       	mov	r8,r11
80002132:	ef 68 ff f4 	st.b	r7[-12],r8
80002136:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000213a:	2f 88       	sub	r8,-8
8000213c:	10 99       	mov	r9,r8
8000213e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002142:	10 09       	add	r9,r8
80002144:	ee c8 00 02 	sub	r8,r7,2
80002148:	12 9b       	mov	r11,r9
8000214a:	10 9c       	mov	r12,r8
8000214c:	c5 ef       	rcall	80002008 <byte_swap_2>
8000214e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80002152:	10 9c       	mov	r12,r8
80002154:	2f dd       	sub	sp,-12
80002156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000215a:	00 00       	add	r0,r0
8000215c:	80 00       	ld.sh	r0,r0[0x0]
8000215e:	1f ae       	ld.ub	lr,pc[0x2]

80002160 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
80002160:	eb cd 40 c0 	pushm	r6-r7,lr
80002164:	1a 97       	mov	r7,sp
80002166:	20 3d       	sub	sp,12
80002168:	48 d6       	lddpc	r6,8000219c <_MAV_RETURN_uint32_t+0x3c>
8000216a:	1e 26       	rsub	r6,pc
8000216c:	ef 4c ff f8 	st.w	r7[-8],r12
80002170:	16 98       	mov	r8,r11
80002172:	ef 68 ff f4 	st.b	r7[-12],r8
80002176:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000217a:	2f 88       	sub	r8,-8
8000217c:	10 99       	mov	r9,r8
8000217e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80002182:	10 09       	add	r9,r8
80002184:	ee c8 00 04 	sub	r8,r7,4
80002188:	12 9b       	mov	r11,r9
8000218a:	10 9c       	mov	r12,r8
8000218c:	c5 8f       	rcall	8000203c <byte_swap_4>
8000218e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002192:	10 9c       	mov	r12,r8
80002194:	2f dd       	sub	sp,-12
80002196:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000219a:	00 00       	add	r0,r0
8000219c:	80 00       	ld.sh	r0,r0[0x0]
8000219e:	1f ee       	ld.ub	lr,pc[0x6]

800021a0 <_MAV_RETURN_int32_t>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
800021a0:	eb cd 40 c0 	pushm	r6-r7,lr
800021a4:	1a 97       	mov	r7,sp
800021a6:	20 3d       	sub	sp,12
800021a8:	48 d6       	lddpc	r6,800021dc <_MAV_RETURN_int32_t+0x3c>
800021aa:	1e 26       	rsub	r6,pc
800021ac:	ef 4c ff f8 	st.w	r7[-8],r12
800021b0:	16 98       	mov	r8,r11
800021b2:	ef 68 ff f4 	st.b	r7[-12],r8
800021b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800021ba:	2f 88       	sub	r8,-8
800021bc:	10 99       	mov	r9,r8
800021be:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800021c2:	10 09       	add	r9,r8
800021c4:	ee c8 00 04 	sub	r8,r7,4
800021c8:	12 9b       	mov	r11,r9
800021ca:	10 9c       	mov	r12,r8
800021cc:	c3 8f       	rcall	8000203c <byte_swap_4>
800021ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800021d2:	10 9c       	mov	r12,r8
800021d4:	2f dd       	sub	sp,-12
800021d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800021da:	00 00       	add	r0,r0
800021dc:	80 00       	ld.sh	r0,r0[0x0]
800021de:	20 2e       	sub	lr,2

800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>:
 * @brief Get field time_boot_ms from global_position_int message
 *
 * @return Timestamp (milliseconds since system boot)
 */
static inline uint32_t mavlink_msg_global_position_int_get_time_boot_ms(const mavlink_message_t* msg)
{
800021e0:	eb cd 40 c0 	pushm	r6-r7,lr
800021e4:	1a 97       	mov	r7,sp
800021e6:	20 1d       	sub	sp,4
800021e8:	48 76       	lddpc	r6,80002204 <mavlink_msg_global_position_int_get_time_boot_ms+0x24>
800021ea:	1e 26       	rsub	r6,pc
800021ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
800021f0:	30 0b       	mov	r11,0
800021f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800021f6:	cb 5f       	rcall	80002160 <_MAV_RETURN_uint32_t>
800021f8:	18 98       	mov	r8,r12
}
800021fa:	10 9c       	mov	r12,r8
800021fc:	2f fd       	sub	sp,-4
800021fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002202:	00 00       	add	r0,r0
80002204:	80 00       	ld.sh	r0,r0[0x0]
80002206:	20 6e       	sub	lr,6

80002208 <mavlink_msg_global_position_int_get_lat>:
 * @brief Get field lat from global_position_int message
 *
 * @return Latitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lat(const mavlink_message_t* msg)
{
80002208:	eb cd 40 c0 	pushm	r6-r7,lr
8000220c:	1a 97       	mov	r7,sp
8000220e:	20 1d       	sub	sp,4
80002210:	48 76       	lddpc	r6,8000222c <mavlink_msg_global_position_int_get_lat+0x24>
80002212:	1e 26       	rsub	r6,pc
80002214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  4);
80002218:	30 4b       	mov	r11,4
8000221a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000221e:	cc 1f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002220:	18 98       	mov	r8,r12
}
80002222:	10 9c       	mov	r12,r8
80002224:	2f fd       	sub	sp,-4
80002226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000222a:	00 00       	add	r0,r0
8000222c:	80 00       	ld.sh	r0,r0[0x0]
8000222e:	20 96       	sub	r6,9

80002230 <mavlink_msg_global_position_int_get_lon>:
 * @brief Get field lon from global_position_int message
 *
 * @return Longitude, expressed as * 1E7
 */
static inline int32_t mavlink_msg_global_position_int_get_lon(const mavlink_message_t* msg)
{
80002230:	eb cd 40 c0 	pushm	r6-r7,lr
80002234:	1a 97       	mov	r7,sp
80002236:	20 1d       	sub	sp,4
80002238:	48 76       	lddpc	r6,80002254 <mavlink_msg_global_position_int_get_lon+0x24>
8000223a:	1e 26       	rsub	r6,pc
8000223c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  8);
80002240:	30 8b       	mov	r11,8
80002242:	ee fc ff fc 	ld.w	r12,r7[-4]
80002246:	ca df       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002248:	18 98       	mov	r8,r12
}
8000224a:	10 9c       	mov	r12,r8
8000224c:	2f fd       	sub	sp,-4
8000224e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002252:	00 00       	add	r0,r0
80002254:	80 00       	ld.sh	r0,r0[0x0]
80002256:	20 be       	sub	lr,11

80002258 <mavlink_msg_global_position_int_get_alt>:
 * @brief Get field alt from global_position_int message
 *
 * @return Altitude in meters, expressed as * 1000 (millimeters), above MSL
 */
static inline int32_t mavlink_msg_global_position_int_get_alt(const mavlink_message_t* msg)
{
80002258:	eb cd 40 c0 	pushm	r6-r7,lr
8000225c:	1a 97       	mov	r7,sp
8000225e:	20 1d       	sub	sp,4
80002260:	48 76       	lddpc	r6,8000227c <mavlink_msg_global_position_int_get_alt+0x24>
80002262:	1e 26       	rsub	r6,pc
80002264:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  12);
80002268:	30 cb       	mov	r11,12
8000226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000226e:	c9 9f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002270:	18 98       	mov	r8,r12
}
80002272:	10 9c       	mov	r12,r8
80002274:	2f fd       	sub	sp,-4
80002276:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000227a:	00 00       	add	r0,r0
8000227c:	80 00       	ld.sh	r0,r0[0x0]
8000227e:	20 e6       	sub	r6,14

80002280 <mavlink_msg_global_position_int_get_relative_alt>:
 * @brief Get field relative_alt from global_position_int message
 *
 * @return Altitude above ground in meters, expressed as * 1000 (millimeters)
 */
static inline int32_t mavlink_msg_global_position_int_get_relative_alt(const mavlink_message_t* msg)
{
80002280:	eb cd 40 c0 	pushm	r6-r7,lr
80002284:	1a 97       	mov	r7,sp
80002286:	20 1d       	sub	sp,4
80002288:	48 76       	lddpc	r6,800022a4 <mavlink_msg_global_position_int_get_relative_alt+0x24>
8000228a:	1e 26       	rsub	r6,pc
8000228c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int32_t(msg,  16);
80002290:	31 0b       	mov	r11,16
80002292:	ee fc ff fc 	ld.w	r12,r7[-4]
80002296:	c8 5f       	rcall	800021a0 <_MAV_RETURN_int32_t>
80002298:	18 98       	mov	r8,r12
}
8000229a:	10 9c       	mov	r12,r8
8000229c:	2f fd       	sub	sp,-4
8000229e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022a2:	00 00       	add	r0,r0
800022a4:	80 00       	ld.sh	r0,r0[0x0]
800022a6:	21 0e       	sub	lr,16

800022a8 <mavlink_msg_global_position_int_get_vx>:
 * @brief Get field vx from global_position_int message
 *
 * @return Ground X Speed (Latitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vx(const mavlink_message_t* msg)
{
800022a8:	eb cd 40 c0 	pushm	r6-r7,lr
800022ac:	1a 97       	mov	r7,sp
800022ae:	20 1d       	sub	sp,4
800022b0:	48 76       	lddpc	r6,800022cc <mavlink_msg_global_position_int_get_vx+0x24>
800022b2:	1e 26       	rsub	r6,pc
800022b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  20);
800022b8:	31 4b       	mov	r11,20
800022ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800022be:	c3 1f       	rcall	80002120 <_MAV_RETURN_int16_t>
800022c0:	18 98       	mov	r8,r12
}
800022c2:	10 9c       	mov	r12,r8
800022c4:	2f fd       	sub	sp,-4
800022c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022ca:	00 00       	add	r0,r0
800022cc:	80 00       	ld.sh	r0,r0[0x0]
800022ce:	21 36       	sub	r6,19

800022d0 <mavlink_msg_global_position_int_get_vy>:
 * @brief Get field vy from global_position_int message
 *
 * @return Ground Y Speed (Longitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vy(const mavlink_message_t* msg)
{
800022d0:	eb cd 40 c0 	pushm	r6-r7,lr
800022d4:	1a 97       	mov	r7,sp
800022d6:	20 1d       	sub	sp,4
800022d8:	48 76       	lddpc	r6,800022f4 <mavlink_msg_global_position_int_get_vy+0x24>
800022da:	1e 26       	rsub	r6,pc
800022dc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  22);
800022e0:	31 6b       	mov	r11,22
800022e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800022e6:	c1 df       	rcall	80002120 <_MAV_RETURN_int16_t>
800022e8:	18 98       	mov	r8,r12
}
800022ea:	10 9c       	mov	r12,r8
800022ec:	2f fd       	sub	sp,-4
800022ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800022f2:	00 00       	add	r0,r0
800022f4:	80 00       	ld.sh	r0,r0[0x0]
800022f6:	21 5e       	sub	lr,21

800022f8 <mavlink_msg_global_position_int_get_vz>:
 * @brief Get field vz from global_position_int message
 *
 * @return Ground Z Speed (Altitude), expressed as m/s * 100
 */
static inline int16_t mavlink_msg_global_position_int_get_vz(const mavlink_message_t* msg)
{
800022f8:	eb cd 40 c0 	pushm	r6-r7,lr
800022fc:	1a 97       	mov	r7,sp
800022fe:	20 1d       	sub	sp,4
80002300:	48 76       	lddpc	r6,8000231c <mavlink_msg_global_position_int_get_vz+0x24>
80002302:	1e 26       	rsub	r6,pc
80002304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  24);
80002308:	31 8b       	mov	r11,24
8000230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000230e:	c0 9f       	rcall	80002120 <_MAV_RETURN_int16_t>
80002310:	18 98       	mov	r8,r12
}
80002312:	10 9c       	mov	r12,r8
80002314:	2f fd       	sub	sp,-4
80002316:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000231a:	00 00       	add	r0,r0
8000231c:	80 00       	ld.sh	r0,r0[0x0]
8000231e:	21 86       	sub	r6,24

80002320 <mavlink_msg_global_position_int_get_hdg>:
 * @brief Get field hdg from global_position_int message
 *
 * @return Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
static inline uint16_t mavlink_msg_global_position_int_get_hdg(const mavlink_message_t* msg)
{
80002320:	eb cd 40 c0 	pushm	r6-r7,lr
80002324:	1a 97       	mov	r7,sp
80002326:	20 1d       	sub	sp,4
80002328:	48 86       	lddpc	r6,80002348 <mavlink_msg_global_position_int_get_hdg+0x28>
8000232a:	1e 26       	rsub	r6,pc
8000232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  26);
80002330:	31 ab       	mov	r11,26
80002332:	ee fc ff fc 	ld.w	r12,r7[-4]
80002336:	cd 5e       	rcall	800020e0 <_MAV_RETURN_uint16_t>
80002338:	18 98       	mov	r8,r12
8000233a:	5c 88       	casts.h	r8
8000233c:	5c 88       	casts.h	r8
}
8000233e:	10 9c       	mov	r12,r8
80002340:	2f fd       	sub	sp,-4
80002342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002346:	00 00       	add	r0,r0
80002348:	80 00       	ld.sh	r0,r0[0x0]
8000234a:	21 ae       	sub	lr,26

8000234c <mavlink_msg_global_position_int_decode>:
 *
 * @param msg The message to decode
 * @param global_position_int C-struct to decode the message contents into
 */
static inline void mavlink_msg_global_position_int_decode(const mavlink_message_t* msg, mavlink_global_position_int_t* global_position_int)
{
8000234c:	eb cd 40 c0 	pushm	r6-r7,lr
80002350:	1a 97       	mov	r7,sp
80002352:	20 2d       	sub	sp,8
80002354:	4a 76       	lddpc	r6,800023f0 <mavlink_msg_global_position_int_decode+0xa4>
80002356:	1e 26       	rsub	r6,pc
80002358:	ef 4c ff fc 	st.w	r7[-4],r12
8000235c:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	global_position_int->time_boot_ms = mavlink_msg_global_position_int_get_time_boot_ms(msg);
80002360:	ee fc ff fc 	ld.w	r12,r7[-4]
80002364:	c3 ef       	rcall	800021e0 <mavlink_msg_global_position_int_get_time_boot_ms>
80002366:	18 99       	mov	r9,r12
80002368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000236c:	91 09       	st.w	r8[0x0],r9
	global_position_int->lat = mavlink_msg_global_position_int_get_lat(msg);
8000236e:	ee fc ff fc 	ld.w	r12,r7[-4]
80002372:	c4 bf       	rcall	80002208 <mavlink_msg_global_position_int_get_lat>
80002374:	18 99       	mov	r9,r12
80002376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000237a:	91 19       	st.w	r8[0x4],r9
	global_position_int->lon = mavlink_msg_global_position_int_get_lon(msg);
8000237c:	ee fc ff fc 	ld.w	r12,r7[-4]
80002380:	c5 8f       	rcall	80002230 <mavlink_msg_global_position_int_get_lon>
80002382:	18 99       	mov	r9,r12
80002384:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002388:	91 29       	st.w	r8[0x8],r9
	global_position_int->alt = mavlink_msg_global_position_int_get_alt(msg);
8000238a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000238e:	c6 5f       	rcall	80002258 <mavlink_msg_global_position_int_get_alt>
80002390:	18 99       	mov	r9,r12
80002392:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002396:	91 39       	st.w	r8[0xc],r9
	global_position_int->relative_alt = mavlink_msg_global_position_int_get_relative_alt(msg);
80002398:	ee fc ff fc 	ld.w	r12,r7[-4]
8000239c:	c7 2f       	rcall	80002280 <mavlink_msg_global_position_int_get_relative_alt>
8000239e:	18 99       	mov	r9,r12
800023a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800023a4:	91 49       	st.w	r8[0x10],r9
	global_position_int->vx = mavlink_msg_global_position_int_get_vx(msg);
800023a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023aa:	c7 ff       	rcall	800022a8 <mavlink_msg_global_position_int_get_vx>
800023ac:	18 98       	mov	r8,r12
800023ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023b2:	f3 58 00 14 	st.h	r9[20],r8
	global_position_int->vy = mavlink_msg_global_position_int_get_vy(msg);
800023b6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ba:	c8 bf       	rcall	800022d0 <mavlink_msg_global_position_int_get_vy>
800023bc:	18 98       	mov	r8,r12
800023be:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023c2:	f3 58 00 16 	st.h	r9[22],r8
	global_position_int->vz = mavlink_msg_global_position_int_get_vz(msg);
800023c6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023ca:	c9 7f       	rcall	800022f8 <mavlink_msg_global_position_int_get_vz>
800023cc:	18 98       	mov	r8,r12
800023ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023d2:	f3 58 00 18 	st.h	r9[24],r8
	global_position_int->hdg = mavlink_msg_global_position_int_get_hdg(msg);
800023d6:	ee fc ff fc 	ld.w	r12,r7[-4]
800023da:	ca 3f       	rcall	80002320 <mavlink_msg_global_position_int_get_hdg>
800023dc:	18 98       	mov	r8,r12
800023de:	5c 88       	casts.h	r8
800023e0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800023e4:	f3 58 00 1a 	st.h	r9[26],r8
#else
	memcpy(global_position_int, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
}
800023e8:	2f ed       	sub	sp,-8
800023ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800023ee:	00 00       	add	r0,r0
800023f0:	80 00       	ld.sh	r0,r0[0x0]
800023f2:	21 da       	sub	r10,29

800023f4 <init_neighbors>:
#include <stdbool.h>

central_data_t *centralData;

void init_neighbors()
{
800023f4:	eb cd 40 c0 	pushm	r6-r7,lr
800023f8:	1a 97       	mov	r7,sp
800023fa:	48 96       	lddpc	r6,8000241c <init_neighbors+0x28>
800023fc:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
800023fe:	f0 16 00 33 	mcall	r6[204]
80002402:	18 99       	mov	r9,r12
80002404:	ec f8 00 00 	ld.w	r8,r6[0]
80002408:	91 09       	st.w	r8[0x0],r9
	centralData->number_of_neighbors = 0;
8000240a:	ec f8 00 00 	ld.w	r8,r6[0]
8000240e:	70 09       	ld.w	r9,r8[0x0]
80002410:	30 08       	mov	r8,0
80002412:	f3 68 0d 44 	st.b	r9[3396],r8
}
80002416:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000241a:	00 00       	add	r0,r0
8000241c:	80 00       	ld.sh	r0,r0[0x0]
8000241e:	22 80       	sub	r0,40
80002420:	54 68       	stdsp	sp[0x118],r8
80002422:	65 72       	ld.w	r2,r2[0x5c]
80002424:	65 20       	ld.w	r0,r2[0x48]
80002426:	69 73       	ld.w	r3,r4[0x5c]
80002428:	20 6d       	sub	sp,24
8000242a:	6f 72       	ld.w	r2,r7[0x5c]
8000242c:	65 20       	ld.w	r0,r2[0x48]
8000242e:	6e 65       	ld.w	r5,r7[0x18]
80002430:	69 67       	ld.w	r7,r4[0x58]
80002432:	68 62       	ld.w	r2,r4[0x18]
80002434:	6f 72       	ld.w	r2,r7[0x5c]
80002436:	73 20       	ld.w	r0,r9[0x48]
80002438:	74 68       	ld.w	r8,r10[0x18]
8000243a:	61 6e       	ld.w	lr,r0[0x58]
8000243c:	20 70       	sub	r0,7
8000243e:	6c 61       	ld.w	r1,r6[0x18]
80002440:	6e 6e       	ld.w	lr,r7[0x18]
80002442:	65 64       	ld.w	r4,r2[0x58]
80002444:	21 0a       	sub	r10,16
	...

80002448 <read_msg_from_neighbors>:


void read_msg_from_neighbors(Mavlink_Received_t* rec)
{
80002448:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000244c:	1a 97       	mov	r7,sp
8000244e:	fa cd 00 a0 	sub	sp,sp,160
80002452:	fe f6 03 66 	ld.w	r6,pc[870]
80002456:	1e 26       	rsub	r6,pc
80002458:	ef 4c ff 90 	st.w	r7[-112],r12
	uint8_t i;
	
	mavlink_global_position_int_t packet;
	mavlink_msg_global_position_int_decode(&rec->msg,&packet);
8000245c:	ee f8 ff 90 	ld.w	r8,r7[-112]
80002460:	ee c9 00 20 	sub	r9,r7,32
80002464:	12 9b       	mov	r11,r9
80002466:	10 9c       	mov	r12,r8
80002468:	c7 2f       	rcall	8000234c <mavlink_msg_global_position_int_decode>
	//Check if coming from a neighbor
	
	if (rec->msg.sysid != mavlink_system.sysid)
8000246a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000246e:	11 d9       	ld.ub	r9,r8[0x5]
80002470:	ec f8 00 74 	ld.w	r8,r6[116]
80002474:	11 88       	ld.ub	r8,r8[0x0]
80002476:	f0 09 18 00 	cp.b	r9,r8
8000247a:	e0 80 01 9b 	breq	800027b0 <read_msg_from_neighbors+0x368>
	{
		global_position_t globalPosNeighbor;
		local_coordinates_t localPosNeighbor;
		uint8_t actualNeighbor;
		
		globalPosNeighbor.longitude = packet.lon / 10000000.0;
8000247e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80002482:	10 9c       	mov	r12,r8
80002484:	f0 16 00 1a 	mcall	r6[104]
80002488:	30 08       	mov	r8,0
8000248a:	e0 69 12 d0 	mov	r9,4816
8000248e:	ea 19 41 63 	orh	r9,0x4163
80002492:	f0 16 00 0c 	mcall	r6[48]
80002496:	14 98       	mov	r8,r10
80002498:	16 99       	mov	r9,r11
8000249a:	ee e9 ff c4 	st.d	r7[-60],r8
		globalPosNeighbor.latitude = packet.lat / 10000000.0;
8000249e:	ee f8 ff e4 	ld.w	r8,r7[-28]
800024a2:	10 9c       	mov	r12,r8
800024a4:	f0 16 00 1a 	mcall	r6[104]
800024a8:	30 08       	mov	r8,0
800024aa:	e0 69 12 d0 	mov	r9,4816
800024ae:	ea 19 41 63 	orh	r9,0x4163
800024b2:	f0 16 00 0c 	mcall	r6[48]
800024b6:	14 98       	mov	r8,r10
800024b8:	16 99       	mov	r9,r11
800024ba:	ee e9 ff cc 	st.d	r7[-52],r8
		globalPosNeighbor.altitude = packet.alt / 1000.0;
800024be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800024c2:	10 9c       	mov	r12,r8
800024c4:	f0 16 00 1a 	mcall	r6[104]
800024c8:	30 08       	mov	r8,0
800024ca:	e0 69 40 00 	mov	r9,16384
800024ce:	ea 19 40 8f 	orh	r9,0x408f
800024d2:	f0 16 00 0c 	mcall	r6[48]
800024d6:	14 98       	mov	r8,r10
800024d8:	16 99       	mov	r9,r11
800024da:	10 9a       	mov	r10,r8
800024dc:	12 9b       	mov	r11,r9
800024de:	f0 16 00 08 	mcall	r6[32]
800024e2:	18 98       	mov	r8,r12
800024e4:	ef 48 ff d4 	st.w	r7[-44],r8
		globalPosNeighbor.heading = packet.hdg;
800024e8:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800024ec:	5c 78       	castu.h	r8
800024ee:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
800024f2:	ef 48 ff d8 	st.w	r7[-40],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
800024f6:	ec f8 00 00 	ld.w	r8,r6[0]
800024fa:	70 08       	ld.w	r8,r8[0x0]
800024fc:	ee cc 00 a0 	sub	r12,r7,160
80002500:	20 7d       	sub	sp,28
80002502:	1a 99       	mov	r9,sp
80002504:	12 9a       	mov	r10,r9
80002506:	f0 cb f6 0c 	sub	r11,r8,-2548
8000250a:	f4 c8 00 00 	sub	r8,r10,0
8000250e:	f6 c9 00 00 	sub	r9,r11,0
80002512:	72 0e       	ld.w	lr,r9[0x0]
80002514:	91 0e       	st.w	r8[0x0],lr
80002516:	72 1e       	ld.w	lr,r9[0x4]
80002518:	91 1e       	st.w	r8[0x4],lr
8000251a:	72 2e       	ld.w	lr,r9[0x8]
8000251c:	91 2e       	st.w	r8[0x8],lr
8000251e:	72 39       	ld.w	r9,r9[0xc]
80002520:	91 39       	st.w	r8[0xc],r9
80002522:	f6 e8 00 10 	ld.d	r8,r11[16]
80002526:	f4 e9 00 10 	st.d	r10[16],r8
8000252a:	76 68       	ld.w	r8,r11[0x18]
8000252c:	95 68       	st.w	r10[0x18],r8
8000252e:	20 7d       	sub	sp,28
80002530:	1a 98       	mov	r8,sp
80002532:	10 9a       	mov	r10,r8
80002534:	ee cb 00 3c 	sub	r11,r7,60
80002538:	f4 c8 00 00 	sub	r8,r10,0
8000253c:	f6 c9 00 00 	sub	r9,r11,0
80002540:	72 0e       	ld.w	lr,r9[0x0]
80002542:	91 0e       	st.w	r8[0x0],lr
80002544:	72 1e       	ld.w	lr,r9[0x4]
80002546:	91 1e       	st.w	r8[0x4],lr
80002548:	72 2e       	ld.w	lr,r9[0x8]
8000254a:	91 2e       	st.w	r8[0x8],lr
8000254c:	72 39       	ld.w	r9,r9[0xc]
8000254e:	91 39       	st.w	r8[0xc],r9
80002550:	f6 e8 00 10 	ld.d	r8,r11[16]
80002554:	f4 e9 00 10 	st.d	r10[16],r8
80002558:	76 68       	ld.w	r8,r11[0x18]
8000255a:	95 68       	st.w	r10[0x18],r8
8000255c:	f0 16 00 7d 	mcall	r6[500]
80002560:	2f 2d       	sub	sp,-56
80002562:	ee cb 00 6c 	sub	r11,r7,108
80002566:	ee ca 00 a0 	sub	r10,r7,160
8000256a:	f6 c8 00 00 	sub	r8,r11,0
8000256e:	f4 c9 00 00 	sub	r9,r10,0
80002572:	72 0c       	ld.w	r12,r9[0x0]
80002574:	91 0c       	st.w	r8[0x0],r12
80002576:	72 1c       	ld.w	r12,r9[0x4]
80002578:	91 1c       	st.w	r8[0x4],r12
8000257a:	72 2c       	ld.w	r12,r9[0x8]
8000257c:	91 2c       	st.w	r8[0x8],r12
8000257e:	72 39       	ld.w	r9,r9[0xc]
80002580:	91 39       	st.w	r8[0xc],r9
80002582:	f6 c8 ff f0 	sub	r8,r11,-16
80002586:	f4 c9 ff f0 	sub	r9,r10,-16
8000258a:	72 0c       	ld.w	r12,r9[0x0]
8000258c:	91 0c       	st.w	r8[0x0],r12
8000258e:	72 1c       	ld.w	r12,r9[0x4]
80002590:	91 1c       	st.w	r8[0x4],r12
80002592:	72 2c       	ld.w	r12,r9[0x8]
80002594:	91 2c       	st.w	r8[0x8],r12
80002596:	72 39       	ld.w	r9,r9[0xc]
80002598:	91 39       	st.w	r8[0xc],r9
8000259a:	f6 c8 ff e0 	sub	r8,r11,-32
8000259e:	f4 c9 ff e0 	sub	r9,r10,-32
800025a2:	72 0a       	ld.w	r10,r9[0x0]
800025a4:	91 0a       	st.w	r8[0x0],r10
800025a6:	72 1a       	ld.w	r10,r9[0x4]
800025a8:	91 1a       	st.w	r8[0x4],r10
800025aa:	72 2a       	ld.w	r10,r9[0x8]
800025ac:	91 2a       	st.w	r8[0x8],r10
800025ae:	72 39       	ld.w	r9,r9[0xc]
800025b0:	91 39       	st.w	r8[0xc],r9
		
		bool ID_found = false;
800025b2:	30 08       	mov	r8,0
800025b4:	ef 68 ff ff 	st.b	r7[-1],r8
		i = 0;
800025b8:	30 08       	mov	r8,0
800025ba:	ef 68 ff fd 	st.b	r7[-3],r8
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025be:	c1 b8       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
		{
			if (rec->msg.sysid == centralData->listNeighbors[i].neighborID)
800025c0:	ee f8 ff 90 	ld.w	r8,r7[-112]
800025c4:	11 d9       	ld.ub	r9,r8[0x5]
800025c6:	ec f8 00 00 	ld.w	r8,r6[0]
800025ca:	70 0a       	ld.w	r10,r8[0x0]
800025cc:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025d0:	a5 78       	lsl	r8,0x5
800025d2:	f4 08 00 08 	add	r8,r10,r8
800025d6:	f0 c8 f2 b4 	sub	r8,r8,-3404
800025da:	11 88       	ld.ub	r8,r8[0x0]
800025dc:	f0 09 18 00 	cp.b	r9,r8
800025e0:	c0 51       	brne	800025ea <read_msg_from_neighbors+0x1a2>
			{
				ID_found = true;
800025e2:	30 18       	mov	r8,1
800025e4:	ef 68 ff ff 	st.b	r7[-1],r8
800025e8:	c0 68       	rjmp	800025f4 <read_msg_from_neighbors+0x1ac>
			}else{
				i++;
800025ea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800025ee:	2f f8       	sub	r8,-1
800025f0:	ef 68 ff fd 	st.b	r7[-3],r8
		
		localPosNeighbor = global_to_local_position(globalPosNeighbor,centralData->position_estimator.localPosition.origin);
		
		bool ID_found = false;
		i = 0;
		while ((!ID_found)&&(i<centralData->number_of_neighbors))
800025f4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800025f8:	ec 18 00 01 	eorl	r8,0x1
800025fc:	5c 58       	castu.b	r8
800025fe:	c0 b0       	breq	80002614 <read_msg_from_neighbors+0x1cc>
80002600:	ec f8 00 00 	ld.w	r8,r6[0]
80002604:	70 08       	ld.w	r8,r8[0x0]
80002606:	f1 38 0d 44 	ld.ub	r8,r8[3396]
8000260a:	ef 39 ff fd 	ld.ub	r9,r7[-3]
8000260e:	f0 09 18 00 	cp.b	r9,r8
80002612:	cd 73       	brcs	800025c0 <read_msg_from_neighbors+0x178>
			//{
				//ID_found = true;
			//}
		}
		
		if (i>=centralData->number_of_neighbors)
80002614:	ec f8 00 00 	ld.w	r8,r6[0]
80002618:	70 08       	ld.w	r8,r8[0x0]
8000261a:	f1 38 0d 44 	ld.ub	r8,r8[3396]
8000261e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80002622:	f0 09 18 00 	cp.b	r9,r8
80002626:	c2 93       	brcs	80002678 <read_msg_from_neighbors+0x230>
		{
			if (centralData->number_of_neighbors < MAX_NUM_NEIGHBORS)
80002628:	ec f8 00 00 	ld.w	r8,r6[0]
8000262c:	70 08       	ld.w	r8,r8[0x0]
8000262e:	f1 39 0d 44 	ld.ub	r9,r8[3396]
80002632:	30 e8       	mov	r8,14
80002634:	f0 09 18 00 	cp.b	r9,r8
80002638:	e0 8b 00 13 	brhi	8000265e <read_msg_from_neighbors+0x216>
			{
				actualNeighbor = centralData->number_of_neighbors;
8000263c:	ec f8 00 00 	ld.w	r8,r6[0]
80002640:	70 08       	ld.w	r8,r8[0x0]
80002642:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80002646:	ef 68 ff fe 	st.b	r7[-2],r8
				centralData->number_of_neighbors++;
8000264a:	ec f8 00 00 	ld.w	r8,r6[0]
8000264e:	70 08       	ld.w	r8,r8[0x0]
80002650:	f1 39 0d 44 	ld.ub	r9,r8[3396]
80002654:	2f f9       	sub	r9,-1
80002656:	5c 59       	castu.b	r9
80002658:	f1 69 0d 44 	st.b	r8[3396],r9
8000265c:	c1 28       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}else{
				// This case shouldn't happen
				dbg_print("There is more neighbors than planned!\n");
8000265e:	fe cc 02 3e 	sub	r12,pc,574
80002662:	f0 16 00 01 	mcall	r6[4]
				actualNeighbor = centralData->number_of_neighbors-1;
80002666:	ec f8 00 00 	ld.w	r8,r6[0]
8000266a:	70 08       	ld.w	r8,r8[0x0]
8000266c:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80002670:	20 18       	sub	r8,1
80002672:	ef 68 ff fe 	st.b	r7[-2],r8
80002676:	c0 58       	rjmp	80002680 <read_msg_from_neighbors+0x238>
			}
		}else{
			actualNeighbor = i;
80002678:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8000267c:	ef 68 ff fe 	st.b	r7[-2],r8
		}
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
80002680:	ec f8 00 00 	ld.w	r8,r6[0]
80002684:	70 0a       	ld.w	r10,r8[0x0]
80002686:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8000268a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000268e:	11 d8       	ld.ub	r8,r8[0x5]
80002690:	a5 79       	lsl	r9,0x5
80002692:	f4 09 00 09 	add	r9,r10,r9
80002696:	f2 c9 f2 b4 	sub	r9,r9,-3404
8000269a:	b2 88       	st.b	r9[0x0],r8
		
		for (i=0;i<3;i++)
8000269c:	30 08       	mov	r8,0
8000269e:	ef 68 ff fd 	st.b	r7[-3],r8
800026a2:	c1 b8       	rjmp	800026d8 <read_msg_from_neighbors+0x290>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
800026a4:	ec f8 00 00 	ld.w	r8,r6[0]
800026a8:	70 09       	ld.w	r9,r8[0x0]
800026aa:	ef 3c ff fe 	ld.ub	r12,r7[-2]
800026ae:	ef 3b ff fd 	ld.ub	r11,r7[-3]
800026b2:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026b6:	a3 68       	lsl	r8,0x2
800026b8:	ee 08 00 08 	add	r8,r7,r8
800026bc:	f0 fa ff 94 	ld.w	r10,r8[-108]
800026c0:	f8 08 15 03 	lsl	r8,r12,0x3
800026c4:	16 08       	add	r8,r11
800026c6:	f0 c8 fc ac 	sub	r8,r8,-852
800026ca:	f2 08 09 2a 	st.w	r9[r8<<0x2],r10
		
		
		
		centralData->listNeighbors[actualNeighbor].neighborID = rec->msg.sysid;
		
		for (i=0;i<3;i++)
800026ce:	ef 38 ff fd 	ld.ub	r8,r7[-3]
800026d2:	2f f8       	sub	r8,-1
800026d4:	ef 68 ff fd 	st.b	r7[-3],r8
800026d8:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800026dc:	30 28       	mov	r8,2
800026de:	f0 09 18 00 	cp.b	r9,r8
800026e2:	fe 98 ff e1 	brls	800026a4 <read_msg_from_neighbors+0x25c>
		{
			centralData->listNeighbors[actualNeighbor].position[i] = localPosNeighbor.pos[i];
		}
		centralData->listNeighbors[actualNeighbor].velocity[X] = packet.vx / 100.0;
800026e6:	ec f8 00 00 	ld.w	r8,r6[0]
800026ea:	70 05       	ld.w	r5,r8[0x0]
800026ec:	ef 33 ff fe 	ld.ub	r3,r7[-2]
800026f0:	ef 08 ff f4 	ld.sh	r8,r7[-12]
800026f4:	10 9c       	mov	r12,r8
800026f6:	f0 16 00 1a 	mcall	r6[104]
800026fa:	30 08       	mov	r8,0
800026fc:	fc 19 40 59 	movh	r9,0x4059
80002700:	f0 16 00 0c 	mcall	r6[48]
80002704:	14 98       	mov	r8,r10
80002706:	16 99       	mov	r9,r11
80002708:	10 9a       	mov	r10,r8
8000270a:	12 9b       	mov	r11,r9
8000270c:	f0 16 00 08 	mcall	r6[32]
80002710:	18 99       	mov	r9,r12
80002712:	e6 08 15 01 	lsl	r8,r3,0x1
80002716:	2f f8       	sub	r8,-1
80002718:	a5 68       	lsl	r8,0x4
8000271a:	ea 08 00 08 	add	r8,r5,r8
8000271e:	f0 c8 f2 b4 	sub	r8,r8,-3404
80002722:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Y] = packet.vy / 100.0;
80002724:	ec f8 00 00 	ld.w	r8,r6[0]
80002728:	70 05       	ld.w	r5,r8[0x0]
8000272a:	ef 33 ff fe 	ld.ub	r3,r7[-2]
8000272e:	ef 08 ff f6 	ld.sh	r8,r7[-10]
80002732:	10 9c       	mov	r12,r8
80002734:	f0 16 00 1a 	mcall	r6[104]
80002738:	30 08       	mov	r8,0
8000273a:	fc 19 40 59 	movh	r9,0x4059
8000273e:	f0 16 00 0c 	mcall	r6[48]
80002742:	14 98       	mov	r8,r10
80002744:	16 99       	mov	r9,r11
80002746:	10 9a       	mov	r10,r8
80002748:	12 9b       	mov	r11,r9
8000274a:	f0 16 00 08 	mcall	r6[32]
8000274e:	18 99       	mov	r9,r12
80002750:	e6 c8 ff 95 	sub	r8,r3,-107
80002754:	a5 78       	lsl	r8,0x5
80002756:	ea 08 00 08 	add	r8,r5,r8
8000275a:	91 09       	st.w	r8[0x0],r9
		centralData->listNeighbors[actualNeighbor].velocity[Z] = packet.vz / 100.0;
8000275c:	ec f8 00 00 	ld.w	r8,r6[0]
80002760:	70 05       	ld.w	r5,r8[0x0]
80002762:	ef 33 ff fe 	ld.ub	r3,r7[-2]
80002766:	ef 08 ff f8 	ld.sh	r8,r7[-8]
8000276a:	10 9c       	mov	r12,r8
8000276c:	f0 16 00 1a 	mcall	r6[104]
80002770:	30 08       	mov	r8,0
80002772:	fc 19 40 59 	movh	r9,0x4059
80002776:	f0 16 00 0c 	mcall	r6[48]
8000277a:	14 98       	mov	r8,r10
8000277c:	16 99       	mov	r9,r11
8000277e:	10 9a       	mov	r10,r8
80002780:	12 9b       	mov	r11,r9
80002782:	f0 16 00 08 	mcall	r6[32]
80002786:	18 99       	mov	r9,r12
80002788:	e6 08 15 05 	lsl	r8,r3,0x5
8000278c:	ea 08 00 08 	add	r8,r5,r8
80002790:	f0 c8 f2 9c 	sub	r8,r8,-3428
80002794:	91 09       	st.w	r8[0x0],r9
		
		centralData->listNeighbors[actualNeighbor].size = SIZE_VHC_ORCA;
80002796:	ec f8 00 00 	ld.w	r8,r6[0]
8000279a:	70 09       	ld.w	r9,r8[0x0]
8000279c:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800027a0:	a5 78       	lsl	r8,0x5
800027a2:	f2 08 00 08 	add	r8,r9,r8
800027a6:	f0 c8 f2 98 	sub	r8,r8,-3432
800027aa:	fc 19 40 a0 	movh	r9,0x40a0
800027ae:	91 09       	st.w	r8[0x0],r9
		//dbg_print(" with velocity ");
		//dbg_print_vector(centralData->listNeighbors[actualNeighbor].velocity,2);
		//dbg_print("\n");
		
	}
800027b0:	2d 8d       	sub	sp,-160
800027b2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800027b6:	00 00       	add	r0,r0
800027b8:	80 00       	ld.sh	r0,r0[0x0]
800027ba:	22 da       	sub	r10,45

800027bc <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800027bc:	eb cd 40 c0 	pushm	r6-r7,lr
800027c0:	1a 97       	mov	r7,sp
800027c2:	20 3d       	sub	sp,12
800027c4:	49 06       	lddpc	r6,80002804 <mav_array_memcpy+0x48>
800027c6:	1e 26       	rsub	r6,pc
800027c8:	ef 4c ff fc 	st.w	r7[-4],r12
800027cc:	ef 4b ff f8 	st.w	r7[-8],r11
800027d0:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800027d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800027d8:	58 08       	cp.w	r8,0
800027da:	c0 91       	brne	800027ec <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800027dc:	ee fa ff f4 	ld.w	r10,r7[-12]
800027e0:	30 0b       	mov	r11,0
800027e2:	ee fc ff fc 	ld.w	r12,r7[-4]
800027e6:	f0 16 00 31 	mcall	r6[196]
800027ea:	c0 98       	rjmp	800027fc <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800027ec:	ee fa ff f4 	ld.w	r10,r7[-12]
800027f0:	ee fb ff f8 	ld.w	r11,r7[-8]
800027f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800027f8:	f0 16 00 1b 	mcall	r6[108]
	}
}
800027fc:	2f dd       	sub	sp,-12
800027fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002802:	00 00       	add	r0,r0
80002804:	80 00       	ld.sh	r0,r0[0x0]
80002806:	26 4a       	sub	r10,100

80002808 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80002808:	eb cd 40 80 	pushm	r7,lr
8000280c:	1a 97       	mov	r7,sp
8000280e:	20 3d       	sub	sp,12
80002810:	ef 4c ff f8 	st.w	r7[-8],r12
80002814:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80002818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000281c:	70 09       	ld.w	r9,r8[0x0]
8000281e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002822:	70 08       	ld.w	r8,r8[0x0]
80002824:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80002828:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000282c:	2f c8       	sub	r8,-4
8000282e:	70 0a       	ld.w	r10,r8[0x0]
80002830:	ee f8 ff f4 	ld.w	r8,r7[-12]
80002834:	2f c8       	sub	r8,-4
80002836:	70 08       	ld.w	r8,r8[0x0]
80002838:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000283c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80002844:	2f 88       	sub	r8,-8
80002846:	70 0a       	ld.w	r10,r8[0x0]
80002848:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000284c:	2f 88       	sub	r8,-8
8000284e:	70 08       	ld.w	r8,r8[0x0]
80002850:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80002854:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002858:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000285c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002860:	10 9c       	mov	r12,r8
80002862:	2f dd       	sub	sp,-12
80002864:	e3 cd 80 80 	ldm	sp++,r7,pc

80002868 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80002868:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000286c:	1a 97       	mov	r7,sp
8000286e:	20 7d       	sub	sp,28
80002870:	4b d6       	lddpc	r6,80002964 <quat_multi+0xfc>
80002872:	1e 26       	rsub	r6,pc
80002874:	ee c8 ff ec 	sub	r8,r7,-20
80002878:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000287a:	70 2a       	ld.w	r10,r8[0x8]
8000287c:	70 79       	ld.w	r9,r8[0x1c]
8000287e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80002882:	70 3b       	ld.w	r11,r8[0xc]
80002884:	70 69       	ld.w	r9,r8[0x18]
80002886:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000288a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000288e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80002892:	70 3a       	ld.w	r10,r8[0xc]
80002894:	70 59       	ld.w	r9,r8[0x14]
80002896:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000289a:	70 1b       	ld.w	r11,r8[0x4]
8000289c:	70 79       	ld.w	r9,r8[0x1c]
8000289e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028a6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800028aa:	70 1a       	ld.w	r10,r8[0x4]
800028ac:	70 69       	ld.w	r9,r8[0x18]
800028ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028b2:	70 2b       	ld.w	r11,r8[0x8]
800028b4:	70 59       	ld.w	r9,r8[0x14]
800028b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028ba:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800028be:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800028c2:	70 4a       	ld.w	r10,r8[0x10]
800028c4:	70 19       	ld.w	r9,r8[0x4]
800028c6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ca:	70 0b       	ld.w	r11,r8[0x0]
800028cc:	70 59       	ld.w	r9,r8[0x14]
800028ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028d2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800028da:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028de:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800028e2:	70 4a       	ld.w	r10,r8[0x10]
800028e4:	70 29       	ld.w	r9,r8[0x8]
800028e6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800028ea:	70 0b       	ld.w	r11,r8[0x0]
800028ec:	70 69       	ld.w	r9,r8[0x18]
800028ee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800028f2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800028f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800028fa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800028fe:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80002902:	70 4a       	ld.w	r10,r8[0x10]
80002904:	70 39       	ld.w	r9,r8[0xc]
80002906:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000290a:	70 0b       	ld.w	r11,r8[0x0]
8000290c:	70 79       	ld.w	r9,r8[0x1c]
8000290e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80002912:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80002916:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000291a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000291e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80002922:	70 0a       	ld.w	r10,r8[0x0]
80002924:	70 49       	ld.w	r9,r8[0x10]
80002926:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000292a:	f0 c9 ff f0 	sub	r9,r8,-16
8000292e:	2f c9       	sub	r9,-4
80002930:	2f c8       	sub	r8,-4
80002932:	12 9b       	mov	r11,r9
80002934:	10 9c       	mov	r12,r8
80002936:	c6 9f       	rcall	80002808 <scalar_product>
80002938:	18 98       	mov	r8,r12
8000293a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000293e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80002942:	0a 98       	mov	r8,r5
80002944:	ee c9 00 1c 	sub	r9,r7,28
80002948:	20 08       	sub	r8,0
8000294a:	20 09       	sub	r9,0
8000294c:	72 0a       	ld.w	r10,r9[0x0]
8000294e:	91 0a       	st.w	r8[0x0],r10
80002950:	72 1a       	ld.w	r10,r9[0x4]
80002952:	91 1a       	st.w	r8[0x4],r10
80002954:	72 2a       	ld.w	r10,r9[0x8]
80002956:	91 2a       	st.w	r8[0x8],r10
80002958:	72 39       	ld.w	r9,r9[0xc]
8000295a:	91 39       	st.w	r8[0xc],r9
}
8000295c:	0a 9c       	mov	r12,r5
8000295e:	2f 9d       	sub	sp,-28
80002960:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002964:	80 00       	ld.sh	r0,r0[0x0]
80002966:	26 f6       	sub	r6,111

80002968 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80002968:	eb cd 40 80 	pushm	r7,lr
8000296c:	1a 97       	mov	r7,sp
8000296e:	20 5d       	sub	sp,20
80002970:	ee c9 ff f8 	sub	r9,r7,-8
80002974:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80002976:	72 08       	ld.w	r8,r9[0x0]
80002978:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000297c:	30 08       	mov	r8,0
8000297e:	ef 48 ff fc 	st.w	r7[-4],r8
80002982:	c1 58       	rjmp	800029ac <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80002984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002988:	ee fb ff fc 	ld.w	r11,r7[-4]
8000298c:	2f fb       	sub	r11,-1
8000298e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80002992:	ee 1b 80 00 	eorh	r11,0x8000
80002996:	2f f8       	sub	r8,-1
80002998:	a3 68       	lsl	r8,0x2
8000299a:	ee 08 00 08 	add	r8,r7,r8
8000299e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800029a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029a6:	2f f8       	sub	r8,-1
800029a8:	ef 48 ff fc 	st.w	r7[-4],r8
800029ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800029b0:	58 28       	cp.w	r8,2
800029b2:	fe 9a ff e9 	brle	80002984 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800029b6:	14 98       	mov	r8,r10
800029b8:	ee c9 00 14 	sub	r9,r7,20
800029bc:	20 08       	sub	r8,0
800029be:	20 09       	sub	r9,0
800029c0:	72 0b       	ld.w	r11,r9[0x0]
800029c2:	91 0b       	st.w	r8[0x0],r11
800029c4:	72 1b       	ld.w	r11,r9[0x4]
800029c6:	91 1b       	st.w	r8[0x4],r11
800029c8:	72 2b       	ld.w	r11,r9[0x8]
800029ca:	91 2b       	st.w	r8[0x8],r11
800029cc:	72 39       	ld.w	r9,r9[0xc]
800029ce:	91 39       	st.w	r8[0xc],r9
}
800029d0:	14 9c       	mov	r12,r10
800029d2:	2f bd       	sub	sp,-20
800029d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800029d8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800029d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800029dc:	1a 97       	mov	r7,sp
800029de:	20 cd       	sub	sp,48
800029e0:	4b c6       	lddpc	r6,80002ad0 <quat_global_to_local+0xf8>
800029e2:	1e 26       	rsub	r6,pc
800029e4:	ee c5 ff ec 	sub	r5,r7,-20
800029e8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800029ea:	ee ca 00 10 	sub	r10,r7,16
800029ee:	20 4d       	sub	sp,16
800029f0:	1a 98       	mov	r8,sp
800029f2:	0a 99       	mov	r9,r5
800029f4:	20 08       	sub	r8,0
800029f6:	20 09       	sub	r9,0
800029f8:	72 0b       	ld.w	r11,r9[0x0]
800029fa:	91 0b       	st.w	r8[0x0],r11
800029fc:	72 1b       	ld.w	r11,r9[0x4]
800029fe:	91 1b       	st.w	r8[0x4],r11
80002a00:	72 2b       	ld.w	r11,r9[0x8]
80002a02:	91 2b       	st.w	r8[0x8],r11
80002a04:	72 39       	ld.w	r9,r9[0xc]
80002a06:	91 39       	st.w	r8[0xc],r9
80002a08:	14 9c       	mov	r12,r10
80002a0a:	ca ff       	rcall	80002968 <quat_inv>
80002a0c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
80002a0e:	ee ca 00 20 	sub	r10,r7,32
80002a12:	20 4d       	sub	sp,16
80002a14:	1a 98       	mov	r8,sp
80002a16:	ea c9 ff f0 	sub	r9,r5,-16
80002a1a:	20 08       	sub	r8,0
80002a1c:	20 09       	sub	r9,0
80002a1e:	72 0b       	ld.w	r11,r9[0x0]
80002a20:	91 0b       	st.w	r8[0x0],r11
80002a22:	72 1b       	ld.w	r11,r9[0x4]
80002a24:	91 1b       	st.w	r8[0x4],r11
80002a26:	72 2b       	ld.w	r11,r9[0x8]
80002a28:	91 2b       	st.w	r8[0x8],r11
80002a2a:	72 39       	ld.w	r9,r9[0xc]
80002a2c:	91 39       	st.w	r8[0xc],r9
80002a2e:	20 4d       	sub	sp,16
80002a30:	1a 98       	mov	r8,sp
80002a32:	ee c9 00 10 	sub	r9,r7,16
80002a36:	20 08       	sub	r8,0
80002a38:	20 09       	sub	r9,0
80002a3a:	72 0b       	ld.w	r11,r9[0x0]
80002a3c:	91 0b       	st.w	r8[0x0],r11
80002a3e:	72 1b       	ld.w	r11,r9[0x4]
80002a40:	91 1b       	st.w	r8[0x4],r11
80002a42:	72 2b       	ld.w	r11,r9[0x8]
80002a44:	91 2b       	st.w	r8[0x8],r11
80002a46:	72 39       	ld.w	r9,r9[0xc]
80002a48:	91 39       	st.w	r8[0xc],r9
80002a4a:	14 9c       	mov	r12,r10
80002a4c:	c0 ef       	rcall	80002868 <quat_multi>
80002a4e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80002a50:	ee ca 00 30 	sub	r10,r7,48
80002a54:	20 4d       	sub	sp,16
80002a56:	1a 98       	mov	r8,sp
80002a58:	0a 99       	mov	r9,r5
80002a5a:	20 08       	sub	r8,0
80002a5c:	20 09       	sub	r9,0
80002a5e:	72 0b       	ld.w	r11,r9[0x0]
80002a60:	91 0b       	st.w	r8[0x0],r11
80002a62:	72 1b       	ld.w	r11,r9[0x4]
80002a64:	91 1b       	st.w	r8[0x4],r11
80002a66:	72 2b       	ld.w	r11,r9[0x8]
80002a68:	91 2b       	st.w	r8[0x8],r11
80002a6a:	72 39       	ld.w	r9,r9[0xc]
80002a6c:	91 39       	st.w	r8[0xc],r9
80002a6e:	20 4d       	sub	sp,16
80002a70:	1a 98       	mov	r8,sp
80002a72:	ee c9 00 20 	sub	r9,r7,32
80002a76:	20 08       	sub	r8,0
80002a78:	20 09       	sub	r9,0
80002a7a:	72 0b       	ld.w	r11,r9[0x0]
80002a7c:	91 0b       	st.w	r8[0x0],r11
80002a7e:	72 1b       	ld.w	r11,r9[0x4]
80002a80:	91 1b       	st.w	r8[0x4],r11
80002a82:	72 2b       	ld.w	r11,r9[0x8]
80002a84:	91 2b       	st.w	r8[0x8],r11
80002a86:	72 39       	ld.w	r9,r9[0xc]
80002a88:	91 39       	st.w	r8[0xc],r9
80002a8a:	14 9c       	mov	r12,r10
80002a8c:	ce ee       	rcall	80002868 <quat_multi>
80002a8e:	2f 8d       	sub	sp,-32
80002a90:	ee c8 00 20 	sub	r8,r7,32
80002a94:	ee c9 00 30 	sub	r9,r7,48
80002a98:	20 08       	sub	r8,0
80002a9a:	20 09       	sub	r9,0
80002a9c:	72 0a       	ld.w	r10,r9[0x0]
80002a9e:	91 0a       	st.w	r8[0x0],r10
80002aa0:	72 1a       	ld.w	r10,r9[0x4]
80002aa2:	91 1a       	st.w	r8[0x4],r10
80002aa4:	72 2a       	ld.w	r10,r9[0x8]
80002aa6:	91 2a       	st.w	r8[0x8],r10
80002aa8:	72 39       	ld.w	r9,r9[0xc]
80002aaa:	91 39       	st.w	r8[0xc],r9

	return qtmp;
80002aac:	06 98       	mov	r8,r3
80002aae:	ee c9 00 20 	sub	r9,r7,32
80002ab2:	20 08       	sub	r8,0
80002ab4:	20 09       	sub	r9,0
80002ab6:	72 0a       	ld.w	r10,r9[0x0]
80002ab8:	91 0a       	st.w	r8[0x0],r10
80002aba:	72 1a       	ld.w	r10,r9[0x4]
80002abc:	91 1a       	st.w	r8[0x4],r10
80002abe:	72 2a       	ld.w	r10,r9[0x8]
80002ac0:	91 2a       	st.w	r8[0x8],r10
80002ac2:	72 39       	ld.w	r9,r9[0xc]
80002ac4:	91 39       	st.w	r8[0xc],r9
}
80002ac6:	06 9c       	mov	r12,r3
80002ac8:	2f 4d       	sub	sp,-48
80002aca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80002ace:	00 00       	add	r0,r0
80002ad0:	80 00       	ld.sh	r0,r0[0x0]
80002ad2:	28 66       	sub	r6,-122

80002ad4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
80002ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80002ad8:	1a 97       	mov	r7,sp
80002ada:	20 2d       	sub	sp,8
80002adc:	4b 26       	lddpc	r6,80002ba4 <fast_sqrt+0xd0>
80002ade:	1e 26       	rsub	r6,pc
80002ae0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
80002ae4:	30 18       	mov	r8,1
80002ae6:	ee fa ff f8 	ld.w	r10,r7[-8]
80002aea:	30 09       	mov	r9,0
80002aec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002af0:	e0 8c 00 03 	brvs	80002af6 <fast_sqrt+0x22>
80002af4:	c0 25       	brlt	80002af8 <fast_sqrt+0x24>
80002af6:	30 08       	mov	r8,0
80002af8:	5c 58       	castu.b	r8
80002afa:	c0 30       	breq	80002b00 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
80002afc:	30 08       	mov	r8,0
80002afe:	c4 f8       	rjmp	80002b9c <fast_sqrt+0xc8>
	}
	float result=1.0;
80002b00:	fc 18 3f 80 	movh	r8,0x3f80
80002b04:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b08:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b0c:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b10:	f0 16 00 0a 	mcall	r6[40]
80002b14:	18 98       	mov	r8,r12
80002b16:	10 99       	mov	r9,r8
80002b18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b1c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b20:	fc 18 3f 00 	movh	r8,0x3f00
80002b24:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b28:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b2c:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b30:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b34:	f0 16 00 0a 	mcall	r6[40]
80002b38:	18 98       	mov	r8,r12
80002b3a:	10 99       	mov	r9,r8
80002b3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b40:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b44:	fc 18 3f 00 	movh	r8,0x3f00
80002b48:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b4c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b50:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b54:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b58:	f0 16 00 0a 	mcall	r6[40]
80002b5c:	18 98       	mov	r8,r12
80002b5e:	10 99       	mov	r9,r8
80002b60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b64:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b68:	fc 18 3f 00 	movh	r8,0x3f00
80002b6c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b70:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80002b74:	ee fb ff fc 	ld.w	r11,r7[-4]
80002b78:	ee fc ff f8 	ld.w	r12,r7[-8]
80002b7c:	f0 16 00 0a 	mcall	r6[40]
80002b80:	18 98       	mov	r8,r12
80002b82:	10 99       	mov	r9,r8
80002b84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002b88:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80002b8c:	fc 18 3f 00 	movh	r8,0x3f00
80002b90:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002b94:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80002b98:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002b9c:	10 9c       	mov	r12,r8
80002b9e:	2f ed       	sub	sp,-8
80002ba0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002ba4:	80 00       	ld.sh	r0,r0[0x0]
80002ba6:	29 62       	sub	r2,-106

80002ba8 <vector_norm_sqr>:

float static inline vector_norm_sqr(float u[])
{
80002ba8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bac:	1a 97       	mov	r7,sp
80002bae:	20 2d       	sub	sp,8
80002bb0:	48 96       	lddpc	r6,80002bd4 <vector_norm_sqr+0x2c>
80002bb2:	1e 26       	rsub	r6,pc
80002bb4:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
80002bb8:	ee fb ff f8 	ld.w	r11,r7[-8]
80002bbc:	ee fc ff f8 	ld.w	r12,r7[-8]
80002bc0:	c2 4e       	rcall	80002808 <scalar_product>
80002bc2:	18 98       	mov	r8,r12
80002bc4:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
80002bc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80002bcc:	10 9c       	mov	r12,r8
80002bce:	2f ed       	sub	sp,-8
80002bd0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bd4:	80 00       	ld.sh	r0,r0[0x0]
80002bd6:	2a 36       	sub	r6,-93

80002bd8 <vector_norm>:

float static inline vector_norm(float u[])
{
80002bd8:	eb cd 40 c0 	pushm	r6-r7,lr
80002bdc:	1a 97       	mov	r7,sp
80002bde:	20 1d       	sub	sp,4
80002be0:	48 86       	lddpc	r6,80002c00 <vector_norm+0x28>
80002be2:	1e 26       	rsub	r6,pc
80002be4:	ef 4c ff fc 	st.w	r7[-4],r12
	return fast_sqrt(vector_norm_sqr(u));
80002be8:	ee fc ff fc 	ld.w	r12,r7[-4]
80002bec:	cd ef       	rcall	80002ba8 <vector_norm_sqr>
80002bee:	18 98       	mov	r8,r12
80002bf0:	10 9c       	mov	r12,r8
80002bf2:	c7 1f       	rcall	80002ad4 <fast_sqrt>
80002bf4:	18 98       	mov	r8,r12
}
80002bf6:	10 9c       	mov	r12,r8
80002bf8:	2f fd       	sub	sp,-4
80002bfa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002bfe:	00 00       	add	r0,r0
80002c00:	80 00       	ld.sh	r0,r0[0x0]
80002c02:	2a 66       	sub	r6,-90

80002c04 <f_min>:
	}else{
		return -a;
	}
}

static inline float f_min(const float a, const float b){
80002c04:	eb cd 40 80 	pushm	r7,lr
80002c08:	1a 97       	mov	r7,sp
80002c0a:	20 2d       	sub	sp,8
80002c0c:	ef 4c ff fc 	st.w	r7[-4],r12
80002c10:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
80002c14:	30 18       	mov	r8,1
80002c16:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c1e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c22:	e0 8c 00 04 	brvs	80002c2a <f_min+0x26>
80002c26:	e0 8a 00 03 	brle	80002c2c <f_min+0x28>
80002c2a:	30 08       	mov	r8,0
80002c2c:	5c 58       	castu.b	r8
80002c2e:	c0 40       	breq	80002c36 <f_min+0x32>
	{
		return a;
80002c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c34:	c0 38       	rjmp	80002c3a <f_min+0x36>
	}else{
		return b;
80002c36:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c3a:	10 9c       	mov	r12,r8
80002c3c:	2f ed       	sub	sp,-8
80002c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c42 <f_max>:

static inline float f_max(const float a, const float b){
80002c42:	eb cd 40 80 	pushm	r7,lr
80002c46:	1a 97       	mov	r7,sp
80002c48:	20 2d       	sub	sp,8
80002c4a:	ef 4c ff fc 	st.w	r7[-4],r12
80002c4e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a >= b)
80002c52:	30 18       	mov	r8,1
80002c54:	ee fa ff fc 	ld.w	r10,r7[-4]
80002c58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80002c5c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80002c60:	e0 8c 00 03 	brvs	80002c66 <f_max+0x24>
80002c64:	c0 24       	brge	80002c68 <f_max+0x26>
80002c66:	30 08       	mov	r8,0
80002c68:	5c 58       	castu.b	r8
80002c6a:	c0 40       	breq	80002c72 <f_max+0x30>
	{
		return a;
80002c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80002c70:	c0 38       	rjmp	80002c76 <f_max+0x34>
	}else{
		return b;
80002c72:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80002c76:	10 9c       	mov	r12,r8
80002c78:	2f ed       	sub	sp,-8
80002c7a:	e3 cd 80 80 	ldm	sp++,r7,pc

80002c7e <init_orca>:
float timeHorizon, invTimeHorizon;

int8_t loop_count_orca = 0;

void init_orca()
{
80002c7e:	eb cd 40 c0 	pushm	r6-r7,lr
80002c82:	1a 97       	mov	r7,sp
80002c84:	49 26       	lddpc	r6,80002ccc <init_orca+0x4e>
80002c86:	1e 26       	rsub	r6,pc
	centralData = get_central_data();
80002c88:	f0 16 00 33 	mcall	r6[204]
80002c8c:	18 99       	mov	r9,r12
80002c8e:	ec f8 00 00 	ld.w	r8,r6[0]
80002c92:	91 09       	st.w	r8[0x0],r9
	centralData->safe_size = SIZE_VHC_ORCA;
80002c94:	ec f8 00 00 	ld.w	r8,r6[0]
80002c98:	70 08       	ld.w	r8,r8[0x0]
80002c9a:	fc 19 40 a0 	movh	r9,0x40a0
80002c9e:	f1 49 0d 48 	st.w	r8[3400],r9
		
	timeHorizon = 8.0;
80002ca2:	ec f8 04 4c 	ld.w	r8,r6[1100]
80002ca6:	fc 19 41 00 	movh	r9,0x4100
80002caa:	91 09       	st.w	r8[0x0],r9
	invTimeHorizon = 1.0/timeHorizon;
80002cac:	ec f8 04 4c 	ld.w	r8,r6[1100]
80002cb0:	70 08       	ld.w	r8,r8[0x0]
80002cb2:	10 9b       	mov	r11,r8
80002cb4:	fc 1c 3f 80 	movh	r12,0x3f80
80002cb8:	f0 16 00 0a 	mcall	r6[40]
80002cbc:	18 98       	mov	r8,r12
80002cbe:	10 99       	mov	r9,r8
80002cc0:	ec f8 02 cc 	ld.w	r8,r6[716]
80002cc4:	91 09       	st.w	r8[0x0],r9
}
80002cc6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80002cca:	00 00       	add	r0,r0
80002ccc:	80 00       	ld.sh	r0,r0[0x0]
80002cce:	2b 0a       	sub	r10,-80
80002cd0:	43 6f       	lddsp	pc,sp[0xd8]
80002cd2:	6c 6c       	ld.w	r12,r6[0x18]
80002cd4:	69 73       	ld.w	r3,r4[0x5c]
80002cd6:	69 6f       	ld.w	pc,r4[0x58]
80002cd8:	6e 21       	ld.w	r1,r7[0x8]
80002cda:	20 00       	sub	r0,0
80002cdc:	44 69       	lddsp	r9,sp[0x118]
80002cde:	73 74       	ld.w	r4,r9[0x5c]
80002ce0:	61 6e       	ld.w	lr,r0[0x58]
80002ce2:	63 65       	ld.w	r5,r1[0x58]
80002ce4:	20 77       	sub	r7,7
80002ce6:	69 74       	ld.w	r4,r4[0x5c]
80002ce8:	68 20       	ld.w	r0,r4[0x8]
80002cea:	6e 65       	ld.w	r5,r7[0x18]
80002cec:	69 67       	ld.w	r7,r4[0x58]
80002cee:	68 62       	ld.w	r2,r4[0x18]
80002cf0:	6f 72       	ld.w	r2,r7[0x5c]
80002cf2:	20 00       	sub	r0,0
80002cf4:	28 78       	sub	r8,-121
80002cf6:	31 30       	mov	r0,19
80002cf8:	30 29       	mov	r9,2
80002cfa:	3a 00       	mov	r0,-96
80002cfc:	0a 00       	add	r0,r5
80002cfe:	00 00       	add	r0,r0
80002d00:	4f 72       	lddpc	r2,80002edc <computeNewVelocity+0x1b8>
80002d02:	63 61       	ld.w	r1,r1[0x58]
80002d04:	20 64       	sub	r4,6
80002d06:	69 66       	ld.w	r6,r4[0x58]
80002d08:	66 76       	ld.w	r6,r3[0x1c]
80002d0a:	65 6c       	ld.w	r12,r2[0x58]
80002d0c:	3a 00       	mov	r0,-96
80002d0e:	00 00       	add	r0,r0
80002d10:	2c 20       	sub	r0,-62
80002d12:	4f 70       	lddpc	r0,80002eec <computeNewVelocity+0x1c8>
80002d14:	74 69       	ld.w	r9,r10[0x18]
80002d16:	6d 61       	ld.w	r1,r6[0x58]
80002d18:	6c 3a       	ld.w	r10,r6[0xc]
80002d1a:	00 00       	add	r0,r0
80002d1c:	2c 20       	sub	r0,-62
80002d1e:	4e 65       	lddpc	r5,80002eb4 <computeNewVelocity+0x190>
80002d20:	77 3a       	ld.w	r10,r11[0x4c]
	...

80002d24 <computeNewVelocity>:

void computeNewVelocity(float OptimalVelocity[], float NewVelocity[])
{
80002d24:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80002d28:	1a 97       	mov	r7,sp
80002d2a:	fa cd 02 34 	sub	sp,sp,564
80002d2e:	fe f6 09 ee 	ld.w	r6,pc[2542]
80002d32:	1e 26       	rsub	r6,pc
80002d34:	ef 4c fd e0 	st.w	r7[-544],r12
80002d38:	ef 4b fd dc 	st.w	r7[-548],r11
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d3c:	30 08       	mov	r8,0
80002d3e:	ef 68 ff cf 	st.b	r7[-49],r8
80002d42:	c1 68       	rjmp	80002d6e <computeNewVelocity+0x4a>
	{
		NewVelocity[i] = OptimalVelocity[i];
80002d44:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d48:	a3 68       	lsl	r8,0x2
80002d4a:	ee f9 fd dc 	ld.w	r9,r7[-548]
80002d4e:	f2 08 00 08 	add	r8,r9,r8
80002d52:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80002d56:	a3 69       	lsl	r9,0x2
80002d58:	ee fa fd e0 	ld.w	r10,r7[-544]
80002d5c:	f4 09 00 09 	add	r9,r10,r9
80002d60:	72 09       	ld.w	r9,r9[0x0]
80002d62:	91 09       	st.w	r8[0x0],r9
	float relativePosition[3], relativeVelocity[3];
	float combinedRadius, distSq, combinedRadiusSq, dotProduct, wLength, wLenghtSq;
	
	float w[3], unitW[3], u[3], neighor_bf[3];
	
	for (i=0;i<3;i++)
80002d64:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002d68:	2f f8       	sub	r8,-1
80002d6a:	ef 68 ff cf 	st.b	r7[-49],r8
80002d6e:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002d72:	30 28       	mov	r8,2
80002d74:	f0 09 18 00 	cp.b	r9,r8
80002d78:	fe 9a ff e6 	brle	80002d44 <computeNewVelocity+0x20>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
80002d7c:	30 08       	mov	r8,0
80002d7e:	ef 68 ff ce 	st.b	r7[-50],r8
80002d82:	e0 8f 04 22 	bral	800035c6 <computeNewVelocity+0x8a2>
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002d86:	30 08       	mov	r8,0
80002d88:	ef 68 ff cf 	st.b	r7[-49],r8
80002d8c:	c4 68       	rjmp	80002e18 <computeNewVelocity+0xf4>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
80002d8e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002d92:	ec f9 00 00 	ld.w	r9,r6[0]
80002d96:	72 09       	ld.w	r9,r9[0x0]
80002d98:	ef 2b ff ce 	ld.sb	r11,r7[-50]
80002d9c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002da0:	a3 7b       	lsl	r11,0x3
80002da2:	f6 0a 00 0a 	add	r10,r11,r10
80002da6:	f4 ca fc ac 	sub	r10,r10,-852
80002daa:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002dae:	ec f9 00 00 	ld.w	r9,r6[0]
80002db2:	72 09       	ld.w	r9,r9[0x0]
80002db4:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002db8:	f6 cb fd 87 	sub	r11,r11,-633
80002dbc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002dc0:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002dc4:	a3 68       	lsl	r8,0x2
80002dc6:	ee 08 00 08 	add	r8,r7,r8
80002dca:	f1 49 fe 38 	st.w	r8[-456],r9
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
80002dce:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002dd2:	ec f9 00 00 	ld.w	r9,r6[0]
80002dd6:	72 09       	ld.w	r9,r9[0x0]
80002dd8:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002ddc:	f4 ca fd 91 	sub	r10,r10,-623
80002de0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80002de4:	ec f9 00 00 	ld.w	r9,r6[0]
80002de8:	72 09       	ld.w	r9,r9[0x0]
80002dea:	ef 2c ff ce 	ld.sb	r12,r7[-50]
80002dee:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80002df2:	a3 7c       	lsl	r12,0x3
80002df4:	f8 0b 00 0b 	add	r11,r12,r11
80002df8:	f6 cb fc a9 	sub	r11,r11,-855
80002dfc:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80002e00:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80002e04:	a3 68       	lsl	r8,0x2
80002e06:	ee 08 00 08 	add	r8,r7,r8
80002e0a:	f1 49 fe 2c 	st.w	r8[-468],r9
		//{
			//relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			//relativeVelocity[i] = centralData->position_estimator.vel_bf[i] - neighor_bf[i];
		//}
		
		for (i=0;i<3;i++)
80002e0e:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002e12:	2f f8       	sub	r8,-1
80002e14:	ef 68 ff cf 	st.b	r7[-49],r8
80002e18:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002e1c:	30 28       	mov	r8,2
80002e1e:	f0 09 18 00 	cp.b	r9,r8
80002e22:	fe 9a ff b6 	brle	80002d8e <computeNewVelocity+0x6a>
		{
			relativePosition[i] = centralData->listNeighbors[ind].position[i] - centralData->position_estimator.localPosition.pos[i];
			relativeVelocity[i] = centralData->position_estimator.vel[i] - centralData->listNeighbors[ind].velocity[i];
		}
		
		q_neighbor.s = 0.0;
80002e26:	30 08       	mov	r8,0
80002e28:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativeVelocity[0];
80002e2c:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80002e30:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativeVelocity[1];
80002e34:	ee f8 fe 30 	ld.w	r8,r7[-464]
80002e38:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativeVelocity[2];
80002e3c:	ee f8 fe 34 	ld.w	r8,r7[-460]
80002e40:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002e44:	ec f8 00 00 	ld.w	r8,r6[0]
80002e48:	70 0b       	ld.w	r11,r8[0x0]
80002e4a:	ee ca 01 bc 	sub	r10,r7,444
80002e4e:	20 4d       	sub	sp,16
80002e50:	1a 98       	mov	r8,sp
80002e52:	ee c9 01 ac 	sub	r9,r7,428
80002e56:	20 08       	sub	r8,0
80002e58:	20 09       	sub	r9,0
80002e5a:	72 0c       	ld.w	r12,r9[0x0]
80002e5c:	91 0c       	st.w	r8[0x0],r12
80002e5e:	72 1c       	ld.w	r12,r9[0x4]
80002e60:	91 1c       	st.w	r8[0x4],r12
80002e62:	72 2c       	ld.w	r12,r9[0x8]
80002e64:	91 2c       	st.w	r8[0x8],r12
80002e66:	72 39       	ld.w	r9,r9[0xc]
80002e68:	91 39       	st.w	r8[0xc],r9
80002e6a:	20 4d       	sub	sp,16
80002e6c:	1a 98       	mov	r8,sp
80002e6e:	16 99       	mov	r9,r11
80002e70:	20 08       	sub	r8,0
80002e72:	20 09       	sub	r9,0
80002e74:	72 0b       	ld.w	r11,r9[0x0]
80002e76:	91 0b       	st.w	r8[0x0],r11
80002e78:	72 1b       	ld.w	r11,r9[0x4]
80002e7a:	91 1b       	st.w	r8[0x4],r11
80002e7c:	72 2b       	ld.w	r11,r9[0x8]
80002e7e:	91 2b       	st.w	r8[0x8],r11
80002e80:	72 39       	ld.w	r9,r9[0xc]
80002e82:	91 39       	st.w	r8[0xc],r9
80002e84:	14 9c       	mov	r12,r10
80002e86:	fe b0 fd a9 	rcall	800029d8 <quat_global_to_local>
80002e8a:	2f 8d       	sub	sp,-32
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002e8c:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002e90:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002e94:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002e98:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002e9c:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002ea0:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002ea4:	30 08       	mov	r8,0
80002ea6:	ef 68 ff cf 	st.b	r7[-49],r8
80002eaa:	c1 58       	rjmp	80002ed4 <computeNewVelocity+0x1b0>
		{
			relativeVelocity[i] = neighor_bf[i];
80002eac:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002eb0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002eb4:	a3 68       	lsl	r8,0x2
80002eb6:	ee 08 00 08 	add	r8,r7,r8
80002eba:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002ebe:	f4 08 15 02 	lsl	r8,r10,0x2
80002ec2:	ee 08 00 08 	add	r8,r7,r8
80002ec6:	f1 49 fe 2c 	st.w	r8[-468],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002eca:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002ece:	2f f8       	sub	r8,-1
80002ed0:	ef 68 ff cf 	st.b	r7[-49],r8
80002ed4:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002ed8:	30 28       	mov	r8,2
80002eda:	f0 09 18 00 	cp.b	r9,r8
80002ede:	fe 9a ff e7 	brle	80002eac <computeNewVelocity+0x188>
		{
			relativeVelocity[i] = neighor_bf[i];
		}
		
		q_neighbor.s = 0.0;
80002ee2:	30 08       	mov	r8,0
80002ee4:	ef 48 fe 54 	st.w	r7[-428],r8
		q_neighbor.v[0] = relativePosition[0];
80002ee8:	ee f8 fe 38 	ld.w	r8,r7[-456]
80002eec:	ef 48 fe 58 	st.w	r7[-424],r8
		q_neighbor.v[1] = relativePosition[1];
80002ef0:	ee f8 fe 3c 	ld.w	r8,r7[-452]
80002ef4:	ef 48 fe 5c 	st.w	r7[-420],r8
		q_neighbor.v[2] = relativePosition[2];
80002ef8:	ee f8 fe 40 	ld.w	r8,r7[-448]
80002efc:	ef 48 fe 60 	st.w	r7[-416],r8
		q_neighbor_bf = quat_global_to_local(centralData->imu1.attitude.qe,q_neighbor);
80002f00:	ec f8 00 00 	ld.w	r8,r6[0]
80002f04:	70 0b       	ld.w	r11,r8[0x0]
80002f06:	ee ca 02 34 	sub	r10,r7,564
80002f0a:	20 4d       	sub	sp,16
80002f0c:	1a 98       	mov	r8,sp
80002f0e:	ee c9 01 ac 	sub	r9,r7,428
80002f12:	20 08       	sub	r8,0
80002f14:	20 09       	sub	r9,0
80002f16:	72 0c       	ld.w	r12,r9[0x0]
80002f18:	91 0c       	st.w	r8[0x0],r12
80002f1a:	72 1c       	ld.w	r12,r9[0x4]
80002f1c:	91 1c       	st.w	r8[0x4],r12
80002f1e:	72 2c       	ld.w	r12,r9[0x8]
80002f20:	91 2c       	st.w	r8[0x8],r12
80002f22:	72 39       	ld.w	r9,r9[0xc]
80002f24:	91 39       	st.w	r8[0xc],r9
80002f26:	20 4d       	sub	sp,16
80002f28:	1a 98       	mov	r8,sp
80002f2a:	16 99       	mov	r9,r11
80002f2c:	20 08       	sub	r8,0
80002f2e:	20 09       	sub	r9,0
80002f30:	72 0b       	ld.w	r11,r9[0x0]
80002f32:	91 0b       	st.w	r8[0x0],r11
80002f34:	72 1b       	ld.w	r11,r9[0x4]
80002f36:	91 1b       	st.w	r8[0x4],r11
80002f38:	72 2b       	ld.w	r11,r9[0x8]
80002f3a:	91 2b       	st.w	r8[0x8],r11
80002f3c:	72 39       	ld.w	r9,r9[0xc]
80002f3e:	91 39       	st.w	r8[0xc],r9
80002f40:	14 9c       	mov	r12,r10
80002f42:	fe b0 fd 4b 	rcall	800029d8 <quat_global_to_local>
80002f46:	2f 8d       	sub	sp,-32
80002f48:	ee c8 01 bc 	sub	r8,r7,444
80002f4c:	ee c9 02 34 	sub	r9,r7,564
80002f50:	20 08       	sub	r8,0
80002f52:	20 09       	sub	r9,0
80002f54:	72 0a       	ld.w	r10,r9[0x0]
80002f56:	91 0a       	st.w	r8[0x0],r10
80002f58:	72 1a       	ld.w	r10,r9[0x4]
80002f5a:	91 1a       	st.w	r8[0x4],r10
80002f5c:	72 2a       	ld.w	r10,r9[0x8]
80002f5e:	91 2a       	st.w	r8[0x8],r10
80002f60:	72 39       	ld.w	r9,r9[0xc]
80002f62:	91 39       	st.w	r8[0xc],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
80002f64:	ee f8 fe 48 	ld.w	r8,r7[-440]
80002f68:	ef 48 fd fc 	st.w	r7[-516],r8
		neighor_bf[1] = q_neighbor_bf.v[1];
80002f6c:	ee f8 fe 4c 	ld.w	r8,r7[-436]
80002f70:	ef 48 fe 00 	st.w	r7[-512],r8
		neighor_bf[2] = q_neighbor_bf.v[2];
80002f74:	ee f8 fe 50 	ld.w	r8,r7[-432]
80002f78:	ef 48 fe 04 	st.w	r7[-508],r8
		
		for (i=0;i<3;i++)
80002f7c:	30 08       	mov	r8,0
80002f7e:	ef 68 ff cf 	st.b	r7[-49],r8
80002f82:	c1 58       	rjmp	80002fac <computeNewVelocity+0x288>
		{
			relativePosition[i] = neighor_bf[i];
80002f84:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80002f88:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80002f8c:	a3 68       	lsl	r8,0x2
80002f8e:	ee 08 00 08 	add	r8,r7,r8
80002f92:	f0 f9 fd fc 	ld.w	r9,r8[-516]
80002f96:	f4 08 15 02 	lsl	r8,r10,0x2
80002f9a:	ee 08 00 08 	add	r8,r7,r8
80002f9e:	f1 49 fe 38 	st.w	r8[-456],r9
		
		neighor_bf[0] = q_neighbor_bf.v[0];
		neighor_bf[1] = q_neighbor_bf.v[1];
		neighor_bf[2] = q_neighbor_bf.v[2];
		
		for (i=0;i<3;i++)
80002fa2:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80002fa6:	2f f8       	sub	r8,-1
80002fa8:	ef 68 ff cf 	st.b	r7[-49],r8
80002fac:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80002fb0:	30 28       	mov	r8,2
80002fb2:	f0 09 18 00 	cp.b	r9,r8
80002fb6:	fe 9a ff e7 	brle	80002f84 <computeNewVelocity+0x260>
		{
			relativePosition[i] = neighor_bf[i];
		}
		
		distSq = vector_norm_sqr(relativePosition);
80002fba:	ee c8 01 c8 	sub	r8,r7,456
80002fbe:	10 9c       	mov	r12,r8
80002fc0:	fe b0 fd f4 	rcall	80002ba8 <vector_norm_sqr>
80002fc4:	18 98       	mov	r8,r12
80002fc6:	ef 48 ff d4 	st.w	r7[-44],r8
		combinedRadius = centralData->safe_size + centralData->listNeighbors[ind].size;
80002fca:	ec f8 00 00 	ld.w	r8,r6[0]
80002fce:	70 08       	ld.w	r8,r8[0x0]
80002fd0:	f0 f9 0d 48 	ld.w	r9,r8[3400]
80002fd4:	ec f8 00 00 	ld.w	r8,r6[0]
80002fd8:	70 0a       	ld.w	r10,r8[0x0]
80002fda:	ef 28 ff ce 	ld.sb	r8,r7[-50]
80002fde:	a5 78       	lsl	r8,0x5
80002fe0:	f4 08 00 08 	add	r8,r10,r8
80002fe4:	f0 c8 f2 98 	sub	r8,r8,-3432
80002fe8:	70 08       	ld.w	r8,r8[0x0]
80002fea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80002fee:	ef 48 ff d0 	st.w	r7[-48],r8
		combinedRadiusSq = SQR(combinedRadius);
80002ff2:	ee f9 ff d0 	ld.w	r9,r7[-48]
80002ff6:	ee f8 ff d0 	ld.w	r8,r7[-48]
80002ffa:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80002ffe:	ef 48 ff d8 	st.w	r7[-40],r8
		
		
		if (distSq > combinedRadiusSq)
80003002:	30 18       	mov	r8,1
80003004:	ee fa ff d4 	ld.w	r10,r7[-44]
80003008:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000300c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003010:	e0 8c 00 04 	brvs	80003018 <computeNewVelocity+0x2f4>
80003014:	e0 89 00 03 	brgt	8000301a <computeNewVelocity+0x2f6>
80003018:	30 08       	mov	r8,0
8000301a:	5c 58       	castu.b	r8
8000301c:	e0 80 01 c7 	breq	800033aa <computeNewVelocity+0x686>
		{
			for (i=0;i<3;i++)
80003020:	30 08       	mov	r8,0
80003022:	ef 68 ff cf 	st.b	r7[-49],r8
80003026:	c2 38       	rjmp	8000306c <computeNewVelocity+0x348>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
80003028:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000302c:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003030:	a3 68       	lsl	r8,0x2
80003032:	ee 08 00 08 	add	r8,r7,r8
80003036:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
8000303a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000303e:	a3 68       	lsl	r8,0x2
80003040:	ee 08 00 08 	add	r8,r7,r8
80003044:	f0 fb fe 38 	ld.w	r11,r8[-456]
80003048:	ec f8 02 cc 	ld.w	r8,r6[716]
8000304c:	70 08       	ld.w	r8,r8[0x0]
8000304e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003052:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003056:	f4 08 15 02 	lsl	r8,r10,0x2
8000305a:	ee 08 00 08 	add	r8,r7,r8
8000305e:	f1 49 fe 20 	st.w	r8[-480],r9
		combinedRadiusSq = SQR(combinedRadius);
		
		
		if (distSq > combinedRadiusSq)
		{
			for (i=0;i<3;i++)
80003062:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003066:	2f f8       	sub	r8,-1
80003068:	ef 68 ff cf 	st.b	r7[-49],r8
8000306c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003070:	30 28       	mov	r8,2
80003072:	f0 09 18 00 	cp.b	r9,r8
80003076:	fe 9a ff d9 	brle	80003028 <computeNewVelocity+0x304>
			{
				w[i] = relativeVelocity[i] - invTimeHorizon * relativePosition[i];
			}
			wLenghtSq = vector_norm_sqr(w);
8000307a:	ee c8 01 e0 	sub	r8,r7,480
8000307e:	10 9c       	mov	r12,r8
80003080:	fe b0 fd 94 	rcall	80002ba8 <vector_norm_sqr>
80003084:	18 98       	mov	r8,r12
80003086:	ef 48 ff e4 	st.w	r7[-28],r8
			
			dotProduct = scalar_product(w,relativePosition);
8000308a:	ee c9 01 c8 	sub	r9,r7,456
8000308e:	ee c8 01 e0 	sub	r8,r7,480
80003092:	12 9b       	mov	r11,r9
80003094:	10 9c       	mov	r12,r8
80003096:	fe b0 fb b9 	rcall	80002808 <scalar_product>
8000309a:	18 98       	mov	r8,r12
8000309c:	ef 48 ff dc 	st.w	r7[-36],r8
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800030a0:	30 18       	mov	r8,1
800030a2:	ee fa ff dc 	ld.w	r10,r7[-36]
800030a6:	30 09       	mov	r9,0
800030a8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030ac:	e0 8c 00 03 	brvs	800030b2 <computeNewVelocity+0x38e>
800030b0:	c0 25       	brlt	800030b4 <computeNewVelocity+0x390>
800030b2:	30 08       	mov	r8,0
800030b4:	5c 58       	castu.b	r8
800030b6:	c7 70       	breq	800031a4 <computeNewVelocity+0x480>
800030b8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800030bc:	ee f8 ff dc 	ld.w	r8,r7[-36]
800030c0:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
800030c4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800030c8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800030cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800030d0:	30 18       	mov	r8,1
800030d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800030d6:	e0 8c 00 04 	brvs	800030de <computeNewVelocity+0x3ba>
800030da:	e0 89 00 03 	brgt	800030e0 <computeNewVelocity+0x3bc>
800030de:	30 08       	mov	r8,0
800030e0:	5c 58       	castu.b	r8
800030e2:	c6 10       	breq	800031a4 <computeNewVelocity+0x480>
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
800030e4:	ee fc ff e4 	ld.w	r12,r7[-28]
800030e8:	fe b0 fc f6 	rcall	80002ad4 <fast_sqrt>
800030ec:	18 98       	mov	r8,r12
800030ee:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800030f2:	30 08       	mov	r8,0
800030f4:	ef 68 ff cf 	st.b	r7[-49],r8
800030f8:	c4 d8       	rjmp	80003192 <computeNewVelocity+0x46e>
				{
					unitW[i] = w[i] / wLength;
800030fa:	ef 25 ff cf 	ld.sb	r5,r7[-49]
800030fe:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003102:	a3 68       	lsl	r8,0x2
80003104:	ee 08 00 08 	add	r8,r7,r8
80003108:	f0 f8 fe 20 	ld.w	r8,r8[-480]
8000310c:	ee fb ff e0 	ld.w	r11,r7[-32]
80003110:	10 9c       	mov	r12,r8
80003112:	f0 16 00 0a 	mcall	r6[40]
80003116:	18 98       	mov	r8,r12
80003118:	10 99       	mov	r9,r8
8000311a:	ea 08 15 02 	lsl	r8,r5,0x2
8000311e:	ee 08 00 08 	add	r8,r7,r8
80003122:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003126:	ef 29 ff ce 	ld.sb	r9,r7[-50]
8000312a:	ef 2b ff cf 	ld.sb	r11,r7[-49]
8000312e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003132:	a3 68       	lsl	r8,0x2
80003134:	ee 08 00 08 	add	r8,r7,r8
80003138:	f0 fa fe 14 	ld.w	r10,r8[-492]
8000313c:	12 98       	mov	r8,r9
8000313e:	a1 78       	lsl	r8,0x1
80003140:	12 08       	add	r8,r9
80003142:	a1 78       	lsl	r8,0x1
80003144:	16 08       	add	r8,r11
80003146:	a3 68       	lsl	r8,0x2
80003148:	ee 08 00 08 	add	r8,r7,r8
8000314c:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
80003150:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003154:	ec f8 02 cc 	ld.w	r8,r6[716]
80003158:	70 09       	ld.w	r9,r8[0x0]
8000315a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000315e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003162:	ee f8 ff e0 	ld.w	r8,r7[-32]
80003166:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000316a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000316e:	a3 68       	lsl	r8,0x2
80003170:	ee 08 00 08 	add	r8,r7,r8
80003174:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003178:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000317c:	f4 08 15 02 	lsl	r8,r10,0x2
80003180:	ee 08 00 08 	add	r8,r7,r8
80003184:	f1 49 fe 08 	st.w	r8[-504],r9
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
			{
				/* Project on cut-off circle. */
				wLength = fast_sqrt(wLenghtSq);
				for (i=0;i<3;i++)
80003188:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000318c:	2f f8       	sub	r8,-1
8000318e:	ef 68 ff cf 	st.b	r7[-49],r8
80003192:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003196:	30 28       	mov	r8,2
80003198:	f0 09 18 00 	cp.b	r9,r8
8000319c:	fe 9a ff af 	brle	800030fa <computeNewVelocity+0x3d6>
			}
			wLenghtSq = vector_norm_sqr(w);
			
			dotProduct = scalar_product(w,relativePosition);
			
			if ((dotProduct < 0.0)&&(SQR(dotProduct) > (combinedRadiusSq * wLenghtSq)))
800031a0:	e0 8f 01 c5 	bral	8000352a <computeNewVelocity+0x806>
					planes[ind].normal[i] = unitW[i];
					u[i] = (combinedRadius * invTimeHorizon - wLength) * unitW[i];
				}
			}else{
				/* Project on cone. */
				float a = distSq;
800031a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800031a8:	ef 48 ff ec 	st.w	r7[-20],r8
				float b = scalar_product(relativePosition,relativeVelocity);
800031ac:	ee c9 01 d4 	sub	r9,r7,468
800031b0:	ee c8 01 c8 	sub	r8,r7,456
800031b4:	12 9b       	mov	r11,r9
800031b6:	10 9c       	mov	r12,r8
800031b8:	fe b0 fb 28 	rcall	80002808 <scalar_product>
800031bc:	18 98       	mov	r8,r12
800031be:	ef 48 ff f0 	st.w	r7[-16],r8
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
800031c2:	ee f9 fe 3c 	ld.w	r9,r7[-452]
800031c6:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031ca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ce:	ee fa fe 40 	ld.w	r10,r7[-448]
800031d2:	ee f8 fe 30 	ld.w	r8,r7[-464]
800031d6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031de:	ef 48 fd e4 	st.w	r7[-540],r8
800031e2:	ee f9 fe 40 	ld.w	r9,r7[-448]
800031e6:	ee f8 fe 2c 	ld.w	r8,r7[-468]
800031ea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800031ee:	ee fa fe 38 	ld.w	r10,r7[-456]
800031f2:	ee f8 fe 34 	ld.w	r8,r7[-460]
800031f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800031fa:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800031fe:	ef 48 fd e8 	st.w	r7[-536],r8
80003202:	ee f9 fe 38 	ld.w	r9,r7[-456]
80003206:	ee f8 fe 30 	ld.w	r8,r7[-464]
8000320a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000320e:	ee fa fe 3c 	ld.w	r10,r7[-452]
80003212:	ee f8 fe 2c 	ld.w	r8,r7[-468]
80003216:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000321a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000321e:	ef 48 fd ec 	st.w	r7[-532],r8
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
80003222:	ee c8 01 d4 	sub	r8,r7,468
80003226:	10 9c       	mov	r12,r8
80003228:	fe b0 fc c0 	rcall	80002ba8 <vector_norm_sqr>
8000322c:	18 95       	mov	r5,r12
8000322e:	ee c8 02 1c 	sub	r8,r7,540
80003232:	10 9c       	mov	r12,r8
80003234:	fe b0 fc ba 	rcall	80002ba8 <vector_norm_sqr>
80003238:	18 98       	mov	r8,r12
8000323a:	ee fa ff d4 	ld.w	r10,r7[-44]
8000323e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003242:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003246:	12 9b       	mov	r11,r9
80003248:	10 9c       	mov	r12,r8
8000324a:	f0 16 00 0a 	mcall	r6[40]
8000324e:	18 98       	mov	r8,r12
80003250:	e5 a1 08 58 	cop	cp0,cr8,cr5,cr8,0x42
80003254:	ef 48 ff f4 	st.w	r7[-12],r8
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
80003258:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000325c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003260:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003264:	ee fa ff ec 	ld.w	r10,r7[-20]
80003268:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000326c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003270:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003274:	10 9c       	mov	r12,r8
80003276:	fe b0 fc 2f 	rcall	80002ad4 <fast_sqrt>
8000327a:	18 99       	mov	r9,r12
8000327c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80003280:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80003284:	ee fb ff ec 	ld.w	r11,r7[-20]
80003288:	10 9c       	mov	r12,r8
8000328a:	f0 16 00 0a 	mcall	r6[40]
8000328e:	18 98       	mov	r8,r12
80003290:	ef 48 ff f8 	st.w	r7[-8],r8
				for (i=0;i<3;i++)
80003294:	30 08       	mov	r8,0
80003296:	ef 68 ff cf 	st.b	r7[-49],r8
8000329a:	c2 28       	rjmp	800032de <computeNewVelocity+0x5ba>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
8000329c:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800032a0:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032a4:	a3 68       	lsl	r8,0x2
800032a6:	ee 08 00 08 	add	r8,r7,r8
800032aa:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
800032ae:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800032b2:	a3 68       	lsl	r8,0x2
800032b4:	ee 08 00 08 	add	r8,r7,r8
800032b8:	f0 fb fe 38 	ld.w	r11,r8[-456]
800032bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800032c0:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800032c4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800032c8:	f4 08 15 02 	lsl	r8,r10,0x2
800032cc:	ee 08 00 08 	add	r8,r7,r8
800032d0:	f1 49 fe 20 	st.w	r8[-480],r9
				float b = scalar_product(relativePosition,relativeVelocity);
				float crossProduct[3];
				CROSS(relativePosition,relativeVelocity,crossProduct);
				float c = vector_norm_sqr(relativeVelocity) - vector_norm_sqr(crossProduct) / (distSq - combinedRadiusSq);
				float t = (b + fast_sqrt(SQR(b) - a*c)) / a;
				for (i=0;i<3;i++)
800032d4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800032d8:	2f f8       	sub	r8,-1
800032da:	ef 68 ff cf 	st.b	r7[-49],r8
800032de:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800032e2:	30 28       	mov	r8,2
800032e4:	f0 09 18 00 	cp.b	r9,r8
800032e8:	fe 9a ff da 	brle	8000329c <computeNewVelocity+0x578>
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
800032ec:	ee c8 01 e0 	sub	r8,r7,480
800032f0:	10 9c       	mov	r12,r8
800032f2:	fe b0 fc 73 	rcall	80002bd8 <vector_norm>
800032f6:	18 98       	mov	r8,r12
800032f8:	ef 48 ff e0 	st.w	r7[-32],r8
				for (i=0;i<3;i++)
800032fc:	30 08       	mov	r8,0
800032fe:	ef 68 ff cf 	st.b	r7[-49],r8
80003302:	c4 c8       	rjmp	8000339a <computeNewVelocity+0x676>
				{
					unitW[i] = w[i] / wLength;
80003304:	ef 25 ff cf 	ld.sb	r5,r7[-49]
80003308:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000330c:	a3 68       	lsl	r8,0x2
8000330e:	ee 08 00 08 	add	r8,r7,r8
80003312:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003316:	ee fb ff e0 	ld.w	r11,r7[-32]
8000331a:	10 9c       	mov	r12,r8
8000331c:	f0 16 00 0a 	mcall	r6[40]
80003320:	18 98       	mov	r8,r12
80003322:	10 99       	mov	r9,r8
80003324:	ea 08 15 02 	lsl	r8,r5,0x2
80003328:	ee 08 00 08 	add	r8,r7,r8
8000332c:	f1 49 fe 14 	st.w	r8[-492],r9
					planes[ind].normal[i] = unitW[i];
80003330:	ef 29 ff ce 	ld.sb	r9,r7[-50]
80003334:	ef 2b ff cf 	ld.sb	r11,r7[-49]
80003338:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000333c:	a3 68       	lsl	r8,0x2
8000333e:	ee 08 00 08 	add	r8,r7,r8
80003342:	f0 fa fe 14 	ld.w	r10,r8[-492]
80003346:	12 98       	mov	r8,r9
80003348:	a1 78       	lsl	r8,0x1
8000334a:	12 08       	add	r8,r9
8000334c:	a1 78       	lsl	r8,0x1
8000334e:	16 08       	add	r8,r11
80003350:	a3 68       	lsl	r8,0x2
80003352:	ee 08 00 08 	add	r8,r7,r8
80003356:	f1 4a fe 64 	st.w	r8[-412],r10
					u[i] = (combinedRadius * t - wLength) * unitW[i];
8000335a:	ef 2a ff cf 	ld.sb	r10,r7[-49]
8000335e:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003362:	ee f8 ff f8 	ld.w	r8,r7[-8]
80003366:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000336a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000336e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003372:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003376:	a3 68       	lsl	r8,0x2
80003378:	ee 08 00 08 	add	r8,r7,r8
8000337c:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003380:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003384:	f4 08 15 02 	lsl	r8,r10,0x2
80003388:	ee 08 00 08 	add	r8,r7,r8
8000338c:	f1 49 fe 08 	st.w	r8[-504],r9
				for (i=0;i<3;i++)
				{
					w[i] = relativeVelocity[i] - t * relativePosition[i];
				}
				wLength = vector_norm(w);
				for (i=0;i<3;i++)
80003390:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003394:	2f f8       	sub	r8,-1
80003396:	ef 68 ff cf 	st.b	r7[-49],r8
8000339a:	ef 39 ff cf 	ld.ub	r9,r7[-49]
8000339e:	30 28       	mov	r8,2
800033a0:	f0 09 18 00 	cp.b	r9,r8
800033a4:	fe 9a ff b0 	brle	80003304 <computeNewVelocity+0x5e0>
800033a8:	cc 18       	rjmp	8000352a <computeNewVelocity+0x806>
					u[i] = (combinedRadius * t - wLength) * unitW[i];
				}
			}
		}else{
			/* Collisions */
			dbg_print("Collision! ");
800033aa:	fe cc 06 da 	sub	r12,pc,1754
800033ae:	f0 16 00 01 	mcall	r6[4]
			dbg_print("Distance with neighbor ");
800033b2:	fe cc 06 d6 	sub	r12,pc,1750
800033b6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ind,10);
800033ba:	ef 28 ff ce 	ld.sb	r8,r7[-50]
800033be:	30 ab       	mov	r11,10
800033c0:	10 9c       	mov	r12,r8
800033c2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("(x100):");
800033c6:	fe cc 06 d2 	sub	r12,pc,1746
800033ca:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(distSq)*100.0,10);
800033ce:	ee fc ff d4 	ld.w	r12,r7[-44]
800033d2:	f0 16 00 02 	mcall	r6[8]
800033d6:	14 98       	mov	r8,r10
800033d8:	16 99       	mov	r9,r11
800033da:	10 9a       	mov	r10,r8
800033dc:	12 9b       	mov	r11,r9
800033de:	f0 16 00 6e 	mcall	r6[440]
800033e2:	30 08       	mov	r8,0
800033e4:	fc 19 40 59 	movh	r9,0x4059
800033e8:	f0 16 00 03 	mcall	r6[12]
800033ec:	14 98       	mov	r8,r10
800033ee:	16 99       	mov	r9,r11
800033f0:	10 9a       	mov	r10,r8
800033f2:	12 9b       	mov	r11,r9
800033f4:	f0 16 00 14 	mcall	r6[80]
800033f8:	18 98       	mov	r8,r12
800033fa:	30 ab       	mov	r11,10
800033fc:	10 9c       	mov	r12,r8
800033fe:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80003402:	fe cc 07 06 	sub	r12,pc,1798
80003406:	f0 16 00 01 	mcall	r6[4]
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
8000340a:	e0 68 cc cd 	mov	r8,52429
8000340e:	ea 18 3d cc 	orh	r8,0x3dcc
80003412:	ef 48 ff fc 	st.w	r7[-4],r8
			for (i=0;i<3;i++)
80003416:	30 08       	mov	r8,0
80003418:	ef 68 ff cf 	st.b	r7[-49],r8
8000341c:	c2 28       	rjmp	80003460 <computeNewVelocity+0x73c>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
8000341e:	ef 2a ff cf 	ld.sb	r10,r7[-49]
80003422:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003426:	a3 68       	lsl	r8,0x2
80003428:	ee 08 00 08 	add	r8,r7,r8
8000342c:	f0 f9 fe 2c 	ld.w	r9,r8[-468]
80003430:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003434:	a3 68       	lsl	r8,0x2
80003436:	ee 08 00 08 	add	r8,r7,r8
8000343a:	f0 fb fe 38 	ld.w	r11,r8[-456]
8000343e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80003442:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003446:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000344a:	f4 08 15 02 	lsl	r8,r10,0x2
8000344e:	ee 08 00 08 	add	r8,r7,r8
80003452:	f1 49 fe 20 	st.w	r8[-480],r9
			dbg_print("(x100):");
			dbg_print_num(sqrt(distSq)*100.0,10);
			dbg_print("\n");
			
			float invTimeStep = 1.0 / ORCA_TIME_STEP_MILLIS; //PROBLEM wrong time step
			for (i=0;i<3;i++)
80003456:	ef 38 ff cf 	ld.ub	r8,r7[-49]
8000345a:	2f f8       	sub	r8,-1
8000345c:	ef 68 ff cf 	st.b	r7[-49],r8
80003460:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003464:	30 28       	mov	r8,2
80003466:	f0 09 18 00 	cp.b	r9,r8
8000346a:	fe 9a ff da 	brle	8000341e <computeNewVelocity+0x6fa>
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
8000346e:	ee c8 01 e0 	sub	r8,r7,480
80003472:	10 9c       	mov	r12,r8
80003474:	fe b0 fb b2 	rcall	80002bd8 <vector_norm>
80003478:	18 98       	mov	r8,r12
8000347a:	ef 48 ff e0 	st.w	r7[-32],r8
			for (i=0;i<3;i++)
8000347e:	30 08       	mov	r8,0
80003480:	ef 68 ff cf 	st.b	r7[-49],r8
80003484:	c4 c8       	rjmp	8000351c <computeNewVelocity+0x7f8>
			{
				unitW[i] = w[i] / wLength;
80003486:	ef 25 ff cf 	ld.sb	r5,r7[-49]
8000348a:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000348e:	a3 68       	lsl	r8,0x2
80003490:	ee 08 00 08 	add	r8,r7,r8
80003494:	f0 f8 fe 20 	ld.w	r8,r8[-480]
80003498:	ee fb ff e0 	ld.w	r11,r7[-32]
8000349c:	10 9c       	mov	r12,r8
8000349e:	f0 16 00 0a 	mcall	r6[40]
800034a2:	18 98       	mov	r8,r12
800034a4:	10 99       	mov	r9,r8
800034a6:	ea 08 15 02 	lsl	r8,r5,0x2
800034aa:	ee 08 00 08 	add	r8,r7,r8
800034ae:	f1 49 fe 14 	st.w	r8[-492],r9
				planes[ind].normal[i] = unitW[i];
800034b2:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800034b6:	ef 2b ff cf 	ld.sb	r11,r7[-49]
800034ba:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034be:	a3 68       	lsl	r8,0x2
800034c0:	ee 08 00 08 	add	r8,r7,r8
800034c4:	f0 fa fe 14 	ld.w	r10,r8[-492]
800034c8:	12 98       	mov	r8,r9
800034ca:	a1 78       	lsl	r8,0x1
800034cc:	12 08       	add	r8,r9
800034ce:	a1 78       	lsl	r8,0x1
800034d0:	16 08       	add	r8,r11
800034d2:	a3 68       	lsl	r8,0x2
800034d4:	ee 08 00 08 	add	r8,r7,r8
800034d8:	f1 4a fe 64 	st.w	r8[-412],r10
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
800034dc:	ef 2a ff cf 	ld.sb	r10,r7[-49]
800034e0:	ee f9 ff d0 	ld.w	r9,r7[-48]
800034e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800034e8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800034ec:	ee f8 ff e0 	ld.w	r8,r7[-32]
800034f0:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800034f4:	ef 28 ff cf 	ld.sb	r8,r7[-49]
800034f8:	a3 68       	lsl	r8,0x2
800034fa:	ee 08 00 08 	add	r8,r7,r8
800034fe:	f0 f8 fe 14 	ld.w	r8,r8[-492]
80003502:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003506:	f4 08 15 02 	lsl	r8,r10,0x2
8000350a:	ee 08 00 08 	add	r8,r7,r8
8000350e:	f1 49 fe 08 	st.w	r8[-504],r9
			for (i=0;i<3;i++)
			{
				w[i] = relativeVelocity[i] - invTimeStep * relativePosition[i];
			}
			wLength = vector_norm(w);
			for (i=0;i<3;i++)
80003512:	ef 38 ff cf 	ld.ub	r8,r7[-49]
80003516:	2f f8       	sub	r8,-1
80003518:	ef 68 ff cf 	st.b	r7[-49],r8
8000351c:	ef 39 ff cf 	ld.ub	r9,r7[-49]
80003520:	30 28       	mov	r8,2
80003522:	f0 09 18 00 	cp.b	r9,r8
80003526:	fe 9a ff b0 	brle	80003486 <computeNewVelocity+0x762>
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
8000352a:	30 08       	mov	r8,0
8000352c:	ef 68 ff cf 	st.b	r7[-49],r8
80003530:	c3 f8       	rjmp	800035ae <computeNewVelocity+0x88a>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
80003532:	ef 25 ff ce 	ld.sb	r5,r7[-50]
80003536:	ef 21 ff cf 	ld.sb	r1,r7[-49]
8000353a:	ec f8 00 00 	ld.w	r8,r6[0]
8000353e:	70 08       	ld.w	r8,r8[0x0]
80003540:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003544:	f2 c9 fd 94 	sub	r9,r9,-620
80003548:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000354c:	10 9c       	mov	r12,r8
8000354e:	f0 16 00 02 	mcall	r6[8]
80003552:	14 92       	mov	r2,r10
80003554:	16 93       	mov	r3,r11
80003556:	ef 28 ff cf 	ld.sb	r8,r7[-49]
8000355a:	a3 68       	lsl	r8,0x2
8000355c:	ee 08 00 08 	add	r8,r7,r8
80003560:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80003564:	10 9c       	mov	r12,r8
80003566:	f0 16 00 02 	mcall	r6[8]
8000356a:	30 08       	mov	r8,0
8000356c:	fc 19 3f e0 	movh	r9,0x3fe0
80003570:	f0 16 00 03 	mcall	r6[12]
80003574:	14 98       	mov	r8,r10
80003576:	16 99       	mov	r9,r11
80003578:	04 9a       	mov	r10,r2
8000357a:	06 9b       	mov	r11,r3
8000357c:	f0 16 00 05 	mcall	r6[20]
80003580:	14 98       	mov	r8,r10
80003582:	16 99       	mov	r9,r11
80003584:	10 9a       	mov	r10,r8
80003586:	12 9b       	mov	r11,r9
80003588:	f0 16 00 08 	mcall	r6[32]
8000358c:	18 99       	mov	r9,r12
8000358e:	0a 98       	mov	r8,r5
80003590:	a1 78       	lsl	r8,0x1
80003592:	0a 08       	add	r8,r5
80003594:	a1 78       	lsl	r8,0x1
80003596:	02 08       	add	r8,r1
80003598:	2f d8       	sub	r8,-3
8000359a:	a3 68       	lsl	r8,0x2
8000359c:	ee 08 00 08 	add	r8,r7,r8
800035a0:	f1 49 fe 64 	st.w	r8[-412],r9
				planes[ind].normal[i] = unitW[i];
				u[i] = (combinedRadius * invTimeStep - wLength) * unitW[i];
			}
		}
		
		for (i=0;i<3;i++)
800035a4:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800035a8:	2f f8       	sub	r8,-1
800035aa:	ef 68 ff cf 	st.b	r7[-49],r8
800035ae:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800035b2:	30 28       	mov	r8,2
800035b4:	f0 09 18 00 	cp.b	r9,r8
800035b8:	fe 9a ff bd 	brle	80003532 <computeNewVelocity+0x80e>
	{
		NewVelocity[i] = OptimalVelocity[i];
	}
	
	/* Create agent ORCA planes. */
	for (ind=0; ind<centralData->number_of_neighbors; ind++)
800035bc:	ef 38 ff ce 	ld.ub	r8,r7[-50]
800035c0:	2f f8       	sub	r8,-1
800035c2:	ef 68 ff ce 	st.b	r7[-50],r8
800035c6:	ef 29 ff ce 	ld.sb	r9,r7[-50]
800035ca:	ec f8 00 00 	ld.w	r8,r6[0]
800035ce:	70 08       	ld.w	r8,r8[0x0]
800035d0:	f1 38 0d 44 	ld.ub	r8,r8[3396]
800035d4:	10 39       	cp.w	r9,r8
800035d6:	fe 95 fb d8 	brlt	80002d86 <computeNewVelocity+0x62>
		{
			planes[ind].point[i] = centralData->position_estimator.vel_bf[i] + 0.5 * u[i];
		}
		
	}
	float planeFail = linearProgram3(planes, OptimalVelocity, MAXSPEED, NewVelocity, false);
800035da:	ee cc 01 9c 	sub	r12,r7,412
800035de:	30 08       	mov	r8,0
800035e0:	ee f9 fd dc 	ld.w	r9,r7[-548]
800035e4:	fc 1a 40 90 	movh	r10,0x4090
800035e8:	ee fb fd e0 	ld.w	r11,r7[-544]
800035ec:	f0 16 01 15 	mcall	r6[1108]
800035f0:	18 98       	mov	r8,r12
800035f2:	ef 48 ff e8 	st.w	r7[-24],r8
	if (planeFail < centralData->number_of_neighbors)
800035f6:	ec f8 00 00 	ld.w	r8,r6[0]
800035fa:	70 08       	ld.w	r8,r8[0x0]
800035fc:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80003600:	e5 a6 0a 08 	cop	cp0,cr10,cr0,cr8,0x4c
80003604:	30 18       	mov	r8,1
80003606:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000360a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000360e:	e0 8c 00 04 	brvs	80003616 <computeNewVelocity+0x8f2>
80003612:	e0 89 00 03 	brgt	80003618 <computeNewVelocity+0x8f4>
80003616:	30 08       	mov	r8,0
80003618:	5c 58       	castu.b	r8
8000361a:	c1 10       	breq	8000363c <computeNewVelocity+0x918>
	{
		linearProgram4(planes,planeFail,MAXSPEED,NewVelocity);
8000361c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003620:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80003624:	5c 58       	castu.b	r8
80003626:	f7 d8 b0 08 	bfexts	r11,r8,0x0,0x8
8000362a:	ee c8 01 9c 	sub	r8,r7,412
8000362e:	ee f9 fd dc 	ld.w	r9,r7[-548]
80003632:	fc 1a 40 90 	movh	r10,0x4090
80003636:	10 9c       	mov	r12,r8
80003638:	f0 16 02 19 	mcall	r6[2148]
	}
	
	loop_count_orca = loop_count_orca++ % 100;
8000363c:	ec f8 02 48 	ld.w	r8,r6[584]
80003640:	11 89       	ld.ub	r9,r8[0x0]
80003642:	f1 d9 b0 08 	bfexts	r8,r9,0x0,0x8
80003646:	e0 6a 85 1f 	mov	r10,34079
8000364a:	ea 1a 51 eb 	orh	r10,0x51eb
8000364e:	f0 0a 04 4a 	muls.d	r10,r8,r10
80003652:	a5 5b       	asr	r11,0x5
80003654:	f0 0a 14 1f 	asr	r10,r8,0x1f
80003658:	f6 0a 01 0a 	sub	r10,r11,r10
8000365c:	f4 0a 10 64 	mul	r10,r10,100
80003660:	14 18       	sub	r8,r10
80003662:	5c 58       	castu.b	r8
80003664:	ec fa 02 48 	ld.w	r10,r6[584]
80003668:	b4 88       	st.b	r10[0x0],r8
8000366a:	f2 c8 ff ff 	sub	r8,r9,-1
8000366e:	5c 58       	castu.b	r8
80003670:	ec f9 02 48 	ld.w	r9,r6[584]
80003674:	b2 88       	st.b	r9[0x0],r8
	
	float orca_diff[3];
	for (i=0;i<3;i++)
80003676:	30 08       	mov	r8,0
80003678:	ef 68 ff cf 	st.b	r7[-49],r8
8000367c:	c1 f8       	rjmp	800036ba <computeNewVelocity+0x996>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
8000367e:	ef 28 ff cf 	ld.sb	r8,r7[-49]
80003682:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003686:	a3 69       	lsl	r9,0x2
80003688:	ee fa fd e0 	ld.w	r10,r7[-544]
8000368c:	f4 09 00 09 	add	r9,r10,r9
80003690:	72 0a       	ld.w	r10,r9[0x0]
80003692:	ef 29 ff cf 	ld.sb	r9,r7[-49]
80003696:	a3 69       	lsl	r9,0x2
80003698:	ee fb fd dc 	ld.w	r11,r7[-548]
8000369c:	f6 09 00 09 	add	r9,r11,r9
800036a0:	72 09       	ld.w	r9,r9[0x0]
800036a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800036a6:	a3 68       	lsl	r8,0x2
800036a8:	ee 08 00 08 	add	r8,r7,r8
800036ac:	f1 49 fd f0 	st.w	r8[-528],r9
	}
	
	loop_count_orca = loop_count_orca++ % 100;
	
	float orca_diff[3];
	for (i=0;i<3;i++)
800036b0:	ef 38 ff cf 	ld.ub	r8,r7[-49]
800036b4:	2f f8       	sub	r8,-1
800036b6:	ef 68 ff cf 	st.b	r7[-49],r8
800036ba:	ef 39 ff cf 	ld.ub	r9,r7[-49]
800036be:	30 28       	mov	r8,2
800036c0:	f0 09 18 00 	cp.b	r9,r8
800036c4:	fe 9a ff dd 	brle	8000367e <computeNewVelocity+0x95a>
	{
		orca_diff[i] = OptimalVelocity[i] - NewVelocity[i];
	}
	
	if (loop_count_orca == 0)
800036c8:	ec f8 02 48 	ld.w	r8,r6[584]
800036cc:	11 88       	ld.ub	r8,r8[0x0]
800036ce:	58 08       	cp.w	r8,0
800036d0:	c2 11       	brne	80003712 <computeNewVelocity+0x9ee>
	{
		dbg_print("Orca diffvel:");
800036d2:	fe cc 09 d2 	sub	r12,pc,2514
800036d6:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(orca_diff,2);
800036da:	ee c8 02 10 	sub	r8,r7,528
800036de:	30 2b       	mov	r11,2
800036e0:	10 9c       	mov	r12,r8
800036e2:	f0 16 00 d4 	mcall	r6[848]
		dbg_print(", Optimal:");
800036e6:	fe cc 09 d6 	sub	r12,pc,2518
800036ea:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(OptimalVelocity,2);
800036ee:	30 2b       	mov	r11,2
800036f0:	ee fc fd e0 	ld.w	r12,r7[-544]
800036f4:	f0 16 00 d4 	mcall	r6[848]
		dbg_print(", New:");
800036f8:	fe cc 09 dc 	sub	r12,pc,2524
800036fc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_vector(NewVelocity,2);
80003700:	30 2b       	mov	r11,2
80003702:	ee fc fd dc 	ld.w	r12,r7[-548]
80003706:	f0 16 00 d4 	mcall	r6[848]
		dbg_print("\n");
8000370a:	fe cc 0a 0e 	sub	r12,pc,2574
8000370e:	f0 16 00 01 	mcall	r6[4]
			//dbg_print_vector(NewVelocity,2);
			//dbg_print("\n");
		//}
	}

}
80003712:	fe 3d fd cc 	sub	sp,-564
80003716:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000371a:	00 00       	add	r0,r0
8000371c:	80 00       	ld.sh	r0,r0[0x0]
8000371e:	2b b6       	sub	r6,-69

80003720 <linearProgram1>:

bool linearProgram1(plane_t planes[], int8_t index, line_t line, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003720:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003724:	1a 97       	mov	r7,sp
80003726:	21 7d       	sub	sp,92
80003728:	fe f6 04 a8 	ld.w	r6,pc[1192]
8000372c:	1e 26       	rsub	r6,pc
8000372e:	ee c5 ff ec 	sub	r5,r7,-20
80003732:	ef 4c ff b8 	st.w	r7[-72],r12
80003736:	ef 4a ff b0 	st.w	r7[-80],r10
8000373a:	ef 49 ff ac 	st.w	r7[-84],r9
8000373e:	ef 48 ff a8 	st.w	r7[-88],r8
80003742:	6a 68       	ld.w	r8,r5[0x18]
80003744:	16 99       	mov	r9,r11
80003746:	ef 69 ff b4 	st.b	r7[-76],r9
8000374a:	ef 68 ff a4 	st.b	r7[-92],r8
	int8_t i;
	
	float dotProduct = scalar_product(line.point,line.direction);
8000374e:	ea c8 ff f4 	sub	r8,r5,-12
80003752:	0a 9b       	mov	r11,r5
80003754:	10 9c       	mov	r12,r8
80003756:	fe b0 f8 59 	rcall	80002808 <scalar_product>
8000375a:	18 98       	mov	r8,r12
8000375c:	ef 48 ff d8 	st.w	r7[-40],r8
	float discriminant = SQR(dotProduct) + SQR(maxSpeed) - vector_norm_sqr(line.point);
80003760:	ee f9 ff d8 	ld.w	r9,r7[-40]
80003764:	ee f8 ff d8 	ld.w	r8,r7[-40]
80003768:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000376c:	ee fa ff b0 	ld.w	r10,r7[-80]
80003770:	ee f8 ff b0 	ld.w	r8,r7[-80]
80003774:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80003778:	e5 a0 03 98 	cop	cp0,cr3,cr9,cr8,0x40
8000377c:	ea c8 ff f4 	sub	r8,r5,-12
80003780:	10 9c       	mov	r12,r8
80003782:	fe b0 fa 13 	rcall	80002ba8 <vector_norm_sqr>
80003786:	18 98       	mov	r8,r12
80003788:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000378c:	ef 48 ff dc 	st.w	r7[-36],r8
	
	if (discriminant < 0.0)
80003790:	30 18       	mov	r8,1
80003792:	ee fa ff dc 	ld.w	r10,r7[-36]
80003796:	30 09       	mov	r9,0
80003798:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000379c:	e0 8c 00 03 	brvs	800037a2 <linearProgram1+0x82>
800037a0:	c0 25       	brlt	800037a4 <linearProgram1+0x84>
800037a2:	30 08       	mov	r8,0
800037a4:	5c 58       	castu.b	r8
800037a6:	c0 40       	breq	800037ae <linearProgram1+0x8e>
	{
		/* Max speed sphere fully invalidates line. */
		return false;
800037a8:	30 08       	mov	r8,0
800037aa:	e0 8f 02 0e 	bral	80003bc6 <linearProgram1+0x4a6>
	}
	
	float sqrtDiscriminant = fast_sqrt(discriminant);
800037ae:	ee fc ff dc 	ld.w	r12,r7[-36]
800037b2:	fe b0 f9 91 	rcall	80002ad4 <fast_sqrt>
800037b6:	18 98       	mov	r8,r12
800037b8:	ef 48 ff e0 	st.w	r7[-32],r8
	float tLeft = -dotProduct - sqrtDiscriminant;
800037bc:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037c0:	10 99       	mov	r9,r8
800037c2:	ee 19 80 00 	eorh	r9,0x8000
800037c6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800037ca:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037ce:	ef 48 ff e4 	st.w	r7[-28],r8
	float tRight = -dotProduct + sqrtDiscriminant;
800037d2:	ee f9 ff e0 	ld.w	r9,r7[-32]
800037d6:	ee f8 ff d8 	ld.w	r8,r7[-40]
800037da:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800037de:	ef 48 ff e8 	st.w	r7[-24],r8
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
800037e2:	30 08       	mov	r8,0
800037e4:	ef 68 ff ef 	st.b	r7[-17],r8
800037e8:	cb e8       	rjmp	80003964 <linearProgram1+0x244>
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
800037ea:	30 08       	mov	r8,0
800037ec:	ef 68 ff d7 	st.b	r7[-41],r8
800037f0:	c2 48       	rjmp	80003838 <linearProgram1+0x118>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
800037f2:	ef 2a ff d7 	ld.sb	r10,r7[-41]
800037f6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800037fa:	12 98       	mov	r8,r9
800037fc:	a1 78       	lsl	r8,0x1
800037fe:	12 08       	add	r8,r9
80003800:	a3 78       	lsl	r8,0x3
80003802:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003806:	f2 08 00 08 	add	r8,r9,r8
8000380a:	ef 29 ff d7 	ld.sb	r9,r7[-41]
8000380e:	2f d9       	sub	r9,-3
80003810:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003814:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003818:	2f d8       	sub	r8,-3
8000381a:	ea 08 03 28 	ld.w	r8,r5[r8<<0x2]
8000381e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003822:	f4 08 15 02 	lsl	r8,r10,0x2
80003826:	ee 08 00 08 	add	r8,r7,r8
8000382a:	f1 49 ff c8 	st.w	r8[-56],r9
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
	{
		float diffPoints[3];
		for (i=0;i<3;i++)
8000382e:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003832:	2f f8       	sub	r8,-1
80003834:	ef 68 ff d7 	st.b	r7[-41],r8
80003838:	ef 39 ff d7 	ld.ub	r9,r7[-41]
8000383c:	30 28       	mov	r8,2
8000383e:	f0 09 18 00 	cp.b	r9,r8
80003842:	fe 9a ff d8 	brle	800037f2 <linearProgram1+0xd2>
		{
			diffPoints[i] = planes[index2].point[i] - line.point[i];
		}
		float numerator = scalar_product(diffPoints, planes[index2].normal);
80003846:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000384a:	12 98       	mov	r8,r9
8000384c:	a1 78       	lsl	r8,0x1
8000384e:	12 08       	add	r8,r9
80003850:	a3 78       	lsl	r8,0x3
80003852:	ee f9 ff b8 	ld.w	r9,r7[-72]
80003856:	f2 08 00 08 	add	r8,r9,r8
8000385a:	10 99       	mov	r9,r8
8000385c:	ee c8 00 38 	sub	r8,r7,56
80003860:	12 9b       	mov	r11,r9
80003862:	10 9c       	mov	r12,r8
80003864:	fe b0 f7 d2 	rcall	80002808 <scalar_product>
80003868:	18 98       	mov	r8,r12
8000386a:	ef 48 ff f0 	st.w	r7[-16],r8
		float denominator = scalar_product(line.direction, planes[index2].normal);
8000386e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80003872:	12 98       	mov	r8,r9
80003874:	a1 78       	lsl	r8,0x1
80003876:	12 08       	add	r8,r9
80003878:	a3 78       	lsl	r8,0x3
8000387a:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000387e:	f2 08 00 08 	add	r8,r9,r8
80003882:	10 9b       	mov	r11,r8
80003884:	0a 9c       	mov	r12,r5
80003886:	fe b0 f7 c1 	rcall	80002808 <scalar_product>
8000388a:	18 98       	mov	r8,r12
8000388c:	ef 48 ff f4 	st.w	r7[-12],r8
		
		if (SQR(denominator) <= RVO_EPSILON)
80003890:	ee f9 ff f4 	ld.w	r9,r7[-12]
80003894:	ee f8 ff f4 	ld.w	r8,r7[-12]
80003898:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000389c:	10 9c       	mov	r12,r8
8000389e:	f0 16 00 02 	mcall	r6[8]
800038a2:	14 98       	mov	r8,r10
800038a4:	16 99       	mov	r9,r11
800038a6:	30 03       	mov	r3,0
800038a8:	e0 6a 43 2d 	mov	r10,17197
800038ac:	ea 1a eb 1c 	orh	r10,0xeb1c
800038b0:	e0 6b 36 e2 	mov	r11,14050
800038b4:	ea 1b 3f 1a 	orh	r11,0x3f1a
800038b8:	f0 16 00 80 	mcall	r6[512]
800038bc:	18 98       	mov	r8,r12
800038be:	58 08       	cp.w	r8,0
800038c0:	c0 20       	breq	800038c4 <linearProgram1+0x1a4>
800038c2:	30 13       	mov	r3,1
800038c4:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
800038c8:	c1 00       	breq	800038e8 <linearProgram1+0x1c8>
		{
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
800038ca:	30 18       	mov	r8,1
800038cc:	ee fa ff f0 	ld.w	r10,r7[-16]
800038d0:	30 09       	mov	r9,0
800038d2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800038d6:	e0 8c 00 04 	brvs	800038de <linearProgram1+0x1be>
800038da:	e0 89 00 03 	brgt	800038e0 <linearProgram1+0x1c0>
800038de:	30 08       	mov	r8,0
800038e0:	5c 58       	castu.b	r8
800038e2:	c3 b0       	breq	80003958 <linearProgram1+0x238>
			{
				return false;
800038e4:	30 08       	mov	r8,0
800038e6:	c7 09       	rjmp	80003bc6 <linearProgram1+0x4a6>
			}else{
				continue;
			}
		}
		
		float t = numerator / denominator;
800038e8:	ee fb ff f4 	ld.w	r11,r7[-12]
800038ec:	ee fc ff f0 	ld.w	r12,r7[-16]
800038f0:	f0 16 00 0a 	mcall	r6[40]
800038f4:	18 98       	mov	r8,r12
800038f6:	ef 48 ff f8 	st.w	r7[-8],r8
		
		if (denominator >= 0.0)
800038fa:	30 18       	mov	r8,1
800038fc:	ee fa ff f4 	ld.w	r10,r7[-12]
80003900:	30 09       	mov	r9,0
80003902:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003906:	e0 8c 00 03 	brvs	8000390c <linearProgram1+0x1ec>
8000390a:	c0 24       	brge	8000390e <linearProgram1+0x1ee>
8000390c:	30 08       	mov	r8,0
8000390e:	5c 58       	castu.b	r8
80003910:	c0 b0       	breq	80003926 <linearProgram1+0x206>
		{
			/* Plane i bounds line on the left. */
			tLeft = f_max(tLeft, t);
80003912:	ee fb ff f8 	ld.w	r11,r7[-8]
80003916:	ee fc ff e4 	ld.w	r12,r7[-28]
8000391a:	fe b0 f9 94 	rcall	80002c42 <f_max>
8000391e:	18 98       	mov	r8,r12
80003920:	ef 48 ff e4 	st.w	r7[-28],r8
80003924:	c0 a8       	rjmp	80003938 <linearProgram1+0x218>
		}else{
			/* Plane i bounds line on the right. */
			tRight = f_min(tRight, t);
80003926:	ee fb ff f8 	ld.w	r11,r7[-8]
8000392a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000392e:	fe b0 f9 6b 	rcall	80002c04 <f_min>
80003932:	18 98       	mov	r8,r12
80003934:	ef 48 ff e8 	st.w	r7[-24],r8
		}
		
		if (tLeft > tRight)
80003938:	30 18       	mov	r8,1
8000393a:	ee fa ff e4 	ld.w	r10,r7[-28]
8000393e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003942:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003946:	e0 8c 00 04 	brvs	8000394e <linearProgram1+0x22e>
8000394a:	e0 89 00 03 	brgt	80003950 <linearProgram1+0x230>
8000394e:	30 08       	mov	r8,0
80003950:	5c 58       	castu.b	r8
80003952:	c0 40       	breq	8000395a <linearProgram1+0x23a>
		{
			return false;
80003954:	30 08       	mov	r8,0
80003956:	c3 89       	rjmp	80003bc6 <linearProgram1+0x4a6>
			/* Lines line is (almost) parallel to plane i. */
			if (numerator > 0.0)
			{
				return false;
			}else{
				continue;
80003958:	d7 03       	nop
	float sqrtDiscriminant = fast_sqrt(discriminant);
	float tLeft = -dotProduct - sqrtDiscriminant;
	float tRight = -dotProduct + sqrtDiscriminant;
	
	int8_t index2;
	for (index2=0;index2<index;index2++)
8000395a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
8000395e:	2f f8       	sub	r8,-1
80003960:	ef 68 ff ef 	st.b	r7[-17],r8
80003964:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80003968:	ef 38 ff b4 	ld.ub	r8,r7[-76]
8000396c:	f0 09 18 00 	cp.b	r9,r8
80003970:	fe 95 ff 3d 	brlt	800037ea <linearProgram1+0xca>
		{
			return false;
		}
	}
	
	if (directionOpt)
80003974:	ef 39 ff a4 	ld.ub	r9,r7[-92]
80003978:	30 08       	mov	r8,0
8000397a:	f0 09 18 00 	cp.b	r9,r8
8000397e:	c6 20       	breq	80003a42 <linearProgram1+0x322>
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
80003980:	0a 9b       	mov	r11,r5
80003982:	ee fc ff ac 	ld.w	r12,r7[-84]
80003986:	fe b0 f7 41 	rcall	80002808 <scalar_product>
8000398a:	18 9a       	mov	r10,r12
8000398c:	30 18       	mov	r8,1
8000398e:	30 09       	mov	r9,0
80003990:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003994:	e0 8c 00 04 	brvs	8000399c <linearProgram1+0x27c>
80003998:	e0 89 00 03 	brgt	8000399e <linearProgram1+0x27e>
8000399c:	30 08       	mov	r8,0
8000399e:	5c 58       	castu.b	r8
800039a0:	c2 90       	breq	800039f2 <linearProgram1+0x2d2>
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039a2:	30 08       	mov	r8,0
800039a4:	ef 68 ff d7 	st.b	r7[-41],r8
800039a8:	c1 d8       	rjmp	800039e2 <linearProgram1+0x2c2>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
800039aa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039ae:	a3 68       	lsl	r8,0x2
800039b0:	ee f9 ff a8 	ld.w	r9,r7[-88]
800039b4:	f2 08 00 08 	add	r8,r9,r8
800039b8:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039bc:	2f d9       	sub	r9,-3
800039be:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
800039c2:	ef 29 ff d7 	ld.sb	r9,r7[-41]
800039c6:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
800039ca:	ee f9 ff e8 	ld.w	r9,r7[-24]
800039ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800039d2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800039d6:	91 09       	st.w	r8[0x0],r9
	if (directionOpt)
	{
		/* Optimize direction. */
		if (scalar_product(OptimalVelocity, line.direction) > 0.0f) {
			/* Take right extreme. */
			for (i=0;i<3;i++)
800039d8:	ef 38 ff d7 	ld.ub	r8,r7[-41]
800039dc:	2f f8       	sub	r8,-1
800039de:	ef 68 ff d7 	st.b	r7[-41],r8
800039e2:	ef 39 ff d7 	ld.ub	r9,r7[-41]
800039e6:	30 28       	mov	r8,2
800039e8:	f0 09 18 00 	cp.b	r9,r8
800039ec:	fe 9a ff df 	brle	800039aa <linearProgram1+0x28a>
800039f0:	ce a8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
800039f2:	30 08       	mov	r8,0
800039f4:	ef 68 ff d7 	st.b	r7[-41],r8
800039f8:	c1 d8       	rjmp	80003a32 <linearProgram1+0x312>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
800039fa:	ef 28 ff d7 	ld.sb	r8,r7[-41]
800039fe:	a3 68       	lsl	r8,0x2
80003a00:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003a04:	f2 08 00 08 	add	r8,r9,r8
80003a08:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a0c:	2f d9       	sub	r9,-3
80003a0e:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003a12:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a16:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003a1a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003a1e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003a22:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003a26:	91 09       	st.w	r8[0x0],r9
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else {
			/* Take left extreme. */
			for (i=0;i<3;i++)
80003a28:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a2c:	2f f8       	sub	r8,-1
80003a2e:	ef 68 ff d7 	st.b	r7[-41],r8
80003a32:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a36:	30 28       	mov	r8,2
80003a38:	f0 09 18 00 	cp.b	r9,r8
80003a3c:	fe 9a ff df 	brle	800039fa <linearProgram1+0x2da>
80003a40:	cc 28       	rjmp	80003bc4 <linearProgram1+0x4a4>
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a42:	30 08       	mov	r8,0
80003a44:	ef 68 ff d7 	st.b	r7[-41],r8
80003a48:	c1 c8       	rjmp	80003a80 <linearProgram1+0x360>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
80003a4a:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003a4e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a52:	a3 69       	lsl	r9,0x2
80003a54:	ee fa ff ac 	ld.w	r10,r7[-84]
80003a58:	f4 09 00 09 	add	r9,r10,r9
80003a5c:	72 0a       	ld.w	r10,r9[0x0]
80003a5e:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003a62:	2f d9       	sub	r9,-3
80003a64:	ea 09 03 29 	ld.w	r9,r5[r9<<0x2]
80003a68:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80003a6c:	a3 68       	lsl	r8,0x2
80003a6e:	ee 08 00 08 	add	r8,r7,r8
80003a72:	f1 49 ff bc 	st.w	r8[-68],r9
			}
		}
	}else{
		/* Optimize closest point. */
		float diffVelPoint[3];
		for (i=0;i<3;i++)
80003a76:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003a7a:	2f f8       	sub	r8,-1
80003a7c:	ef 68 ff d7 	st.b	r7[-41],r8
80003a80:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003a84:	30 28       	mov	r8,2
80003a86:	f0 09 18 00 	cp.b	r9,r8
80003a8a:	fe 9a ff e0 	brle	80003a4a <linearProgram1+0x32a>
		{
			diffVelPoint[i] = OptimalVelocity[i] - line.point[i];
		}
		
		float t = scalar_product(line.direction, diffVelPoint);
80003a8e:	ee c8 00 44 	sub	r8,r7,68
80003a92:	10 9b       	mov	r11,r8
80003a94:	0a 9c       	mov	r12,r5
80003a96:	fe b0 f6 b9 	rcall	80002808 <scalar_product>
80003a9a:	18 98       	mov	r8,r12
80003a9c:	ef 48 ff fc 	st.w	r7[-4],r8

		if (t < tLeft)
80003aa0:	30 18       	mov	r8,1
80003aa2:	ee fa ff fc 	ld.w	r10,r7[-4]
80003aa6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003aaa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003aae:	e0 8c 00 03 	brvs	80003ab4 <linearProgram1+0x394>
80003ab2:	c0 25       	brlt	80003ab6 <linearProgram1+0x396>
80003ab4:	30 08       	mov	r8,0
80003ab6:	5c 58       	castu.b	r8
80003ab8:	c2 90       	breq	80003b0a <linearProgram1+0x3ea>
		{
			for (i=0;i<3;i++)
80003aba:	30 08       	mov	r8,0
80003abc:	ef 68 ff d7 	st.b	r7[-41],r8
80003ac0:	c1 d8       	rjmp	80003afa <linearProgram1+0x3da>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
80003ac2:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003ac6:	a3 68       	lsl	r8,0x2
80003ac8:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003acc:	f2 08 00 08 	add	r8,r9,r8
80003ad0:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ad4:	2f d9       	sub	r9,-3
80003ad6:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003ada:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003ade:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003ae2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80003ae6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003aea:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003aee:	91 09       	st.w	r8[0x0],r9
		
		float t = scalar_product(line.direction, diffVelPoint);

		if (t < tLeft)
		{
			for (i=0;i<3;i++)
80003af0:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003af4:	2f f8       	sub	r8,-1
80003af6:	ef 68 ff d7 	st.b	r7[-41],r8
80003afa:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003afe:	30 28       	mov	r8,2
80003b00:	f0 09 18 00 	cp.b	r9,r8
80003b04:	fe 9a ff df 	brle	80003ac2 <linearProgram1+0x3a2>
80003b08:	c5 e8       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
80003b0a:	30 18       	mov	r8,1
80003b0c:	ee fa ff fc 	ld.w	r10,r7[-4]
80003b10:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b14:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003b18:	e0 8c 00 04 	brvs	80003b20 <linearProgram1+0x400>
80003b1c:	e0 89 00 03 	brgt	80003b22 <linearProgram1+0x402>
80003b20:	30 08       	mov	r8,0
80003b22:	5c 58       	castu.b	r8
80003b24:	c2 90       	breq	80003b76 <linearProgram1+0x456>
			for (i=0;i<3;i++)
80003b26:	30 08       	mov	r8,0
80003b28:	ef 68 ff d7 	st.b	r7[-41],r8
80003b2c:	c1 d8       	rjmp	80003b66 <linearProgram1+0x446>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
80003b2e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b32:	a3 68       	lsl	r8,0x2
80003b34:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b38:	f2 08 00 08 	add	r8,r9,r8
80003b3c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b40:	2f d9       	sub	r9,-3
80003b42:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b46:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b4a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b4e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80003b52:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003b56:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003b5a:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tLeft * line.direction[i];
			}
		}else if (t > tRight){
			for (i=0;i<3;i++)
80003b5c:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003b60:	2f f8       	sub	r8,-1
80003b62:	ef 68 ff d7 	st.b	r7[-41],r8
80003b66:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003b6a:	30 28       	mov	r8,2
80003b6c:	f0 09 18 00 	cp.b	r9,r8
80003b70:	fe 9a ff df 	brle	80003b2e <linearProgram1+0x40e>
80003b74:	c2 88       	rjmp	80003bc4 <linearProgram1+0x4a4>
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003b76:	30 08       	mov	r8,0
80003b78:	ef 68 ff d7 	st.b	r7[-41],r8
80003b7c:	c1 d8       	rjmp	80003bb6 <linearProgram1+0x496>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
80003b7e:	ef 28 ff d7 	ld.sb	r8,r7[-41]
80003b82:	a3 68       	lsl	r8,0x2
80003b84:	ee f9 ff a8 	ld.w	r9,r7[-88]
80003b88:	f2 08 00 08 	add	r8,r9,r8
80003b8c:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b90:	2f d9       	sub	r9,-3
80003b92:	ea 09 03 2a 	ld.w	r10,r5[r9<<0x2]
80003b96:	ef 29 ff d7 	ld.sb	r9,r7[-41]
80003b9a:	ea 09 03 2b 	ld.w	r11,r5[r9<<0x2]
80003b9e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80003ba2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80003ba6:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
80003baa:	91 09       	st.w	r8[0x0],r9
			for (i=0;i<3;i++)
			{
				NewVelocity[i] = line.point[i] + tRight * line.direction[i];
			}
		}else{
			for (i=0;i<3;i++)
80003bac:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80003bb0:	2f f8       	sub	r8,-1
80003bb2:	ef 68 ff d7 	st.b	r7[-41],r8
80003bb6:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80003bba:	30 28       	mov	r8,2
80003bbc:	f0 09 18 00 	cp.b	r9,r8
80003bc0:	fe 9a ff df 	brle	80003b7e <linearProgram1+0x45e>
			{
				NewVelocity[i] = line.point[i] + t * line.direction[i];
			}
		}
	}
	return true;
80003bc4:	30 18       	mov	r8,1
}
80003bc6:	10 9c       	mov	r12,r8
80003bc8:	2e 9d       	sub	sp,-92
80003bca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80003bce:	00 00       	add	r0,r0
80003bd0:	80 00       	ld.sh	r0,r0[0x0]
80003bd2:	35 b0       	mov	r0,91

80003bd4 <linearProgram2>:

bool linearProgram2(plane_t planes[], int8_t ind, float maxSpeed, float OptimalVelocity[], float NewVelocity[], bool directionOpt)
{
80003bd4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80003bd8:	1a 97       	mov	r7,sp
80003bda:	fa cd 00 cc 	sub	sp,sp,204
80003bde:	fe f6 09 6e 	ld.w	r6,pc[2414]
80003be2:	1e 26       	rsub	r6,pc
80003be4:	ee ce ff ec 	sub	lr,r7,-20
80003be8:	ef 4c ff 48 	st.w	r7[-184],r12
80003bec:	ef 4a ff 40 	st.w	r7[-192],r10
80003bf0:	ef 49 ff 3c 	st.w	r7[-196],r9
80003bf4:	ef 48 ff 38 	st.w	r7[-200],r8
80003bf8:	7c 08       	ld.w	r8,lr[0x0]
80003bfa:	16 99       	mov	r9,r11
80003bfc:	ef 69 ff 44 	st.b	r7[-188],r9
80003c00:	ef 68 ff 34 	st.b	r7[-204],r8
	int8_t i;
	
	float planeDist = scalar_product(planes[ind].point,planes[ind].normal);
80003c04:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c08:	12 98       	mov	r8,r9
80003c0a:	a1 78       	lsl	r8,0x1
80003c0c:	12 08       	add	r8,r9
80003c0e:	a3 78       	lsl	r8,0x3
80003c10:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c14:	f2 08 00 08 	add	r8,r9,r8
80003c18:	10 9a       	mov	r10,r8
80003c1a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003c1e:	12 98       	mov	r8,r9
80003c20:	a1 78       	lsl	r8,0x1
80003c22:	12 08       	add	r8,r9
80003c24:	a3 78       	lsl	r8,0x3
80003c26:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003c2a:	f2 08 00 08 	add	r8,r9,r8
80003c2e:	2f 48       	sub	r8,-12
80003c30:	14 9b       	mov	r11,r10
80003c32:	10 9c       	mov	r12,r8
80003c34:	fe b0 f5 ea 	rcall	80002808 <scalar_product>
80003c38:	18 98       	mov	r8,r12
80003c3a:	ef 48 ff c8 	st.w	r7[-56],r8
	float planeDistSq = SQR(planeDist);
80003c3e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80003c42:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003c46:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c4a:	ef 48 ff cc 	st.w	r7[-52],r8
	float radiusSq = SQR(maxSpeed);
80003c4e:	ee f9 ff 40 	ld.w	r9,r7[-192]
80003c52:	ee f8 ff 40 	ld.w	r8,r7[-192]
80003c56:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003c5a:	ef 48 ff d0 	st.w	r7[-48],r8
	
	if (planeDistSq > radiusSq)
80003c5e:	30 18       	mov	r8,1
80003c60:	ee fa ff cc 	ld.w	r10,r7[-52]
80003c64:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c68:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003c6c:	e0 8c 00 04 	brvs	80003c74 <linearProgram2+0xa0>
80003c70:	e0 89 00 03 	brgt	80003c76 <linearProgram2+0xa2>
80003c74:	30 08       	mov	r8,0
80003c76:	5c 58       	castu.b	r8
80003c78:	c0 40       	breq	80003c80 <linearProgram2+0xac>
	{
		/* Max speed sphere fully invalidates plane planeNo. */
		return false;
80003c7a:	30 08       	mov	r8,0
80003c7c:	e0 8f 04 64 	bral	80004544 <linearProgram2+0x970>
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
80003c80:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003c84:	ee f8 ff cc 	ld.w	r8,r7[-52]
80003c88:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80003c8c:	ef 48 ff d4 	st.w	r7[-44],r8
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003c90:	30 08       	mov	r8,0
80003c92:	ef 68 ff c7 	st.b	r7[-57],r8
80003c96:	c2 08       	rjmp	80003cd6 <linearProgram2+0x102>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
80003c98:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003c9c:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ca0:	12 98       	mov	r8,r9
80003ca2:	a1 78       	lsl	r8,0x1
80003ca4:	12 08       	add	r8,r9
80003ca6:	a3 78       	lsl	r8,0x3
80003ca8:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003cac:	f2 08 00 08 	add	r8,r9,r8
80003cb0:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003cb4:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003cb8:	ee f8 ff c8 	ld.w	r8,r7[-56]
80003cbc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80003cc0:	f4 08 15 02 	lsl	r8,r10,0x2
80003cc4:	ee 08 00 08 	add	r8,r7,r8
80003cc8:	f1 49 ff b8 	st.w	r8[-72],r9
	}
	
	float planeRadiusSq = radiusSq - planeDistSq;
	
	float planeCenter[3];
	for(i=0;i<3;i++)
80003ccc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003cd0:	2f f8       	sub	r8,-1
80003cd2:	ef 68 ff c7 	st.b	r7[-57],r8
80003cd6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003cda:	30 28       	mov	r8,2
80003cdc:	f0 09 18 00 	cp.b	r9,r8
80003ce0:	fe 9a ff dc 	brle	80003c98 <linearProgram2+0xc4>
	{
		planeCenter[i] = planeDist * planes[ind].normal[i];
	}
	
	if (directionOpt)
80003ce4:	ef 39 ff 34 	ld.ub	r9,r7[-204]
80003ce8:	30 08       	mov	r8,0
80003cea:	f0 09 18 00 	cp.b	r9,r8
80003cee:	e0 80 00 c0 	breq	80003e6e <linearProgram2+0x29a>
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
80003cf2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003cf6:	12 98       	mov	r8,r9
80003cf8:	a1 78       	lsl	r8,0x1
80003cfa:	12 08       	add	r8,r9
80003cfc:	a3 78       	lsl	r8,0x3
80003cfe:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d02:	f2 08 00 08 	add	r8,r9,r8
80003d06:	10 9b       	mov	r11,r8
80003d08:	ee fc ff 3c 	ld.w	r12,r7[-196]
80003d0c:	fe b0 f5 7e 	rcall	80002808 <scalar_product>
80003d10:	18 98       	mov	r8,r12
80003d12:	ef 48 ff dc 	st.w	r7[-36],r8
		for(i=0;i<3;i++)
80003d16:	30 08       	mov	r8,0
80003d18:	ef 68 ff c7 	st.b	r7[-57],r8
80003d1c:	c2 a8       	rjmp	80003d70 <linearProgram2+0x19c>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
80003d1e:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003d22:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003d26:	a3 68       	lsl	r8,0x2
80003d28:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003d2c:	f2 08 00 08 	add	r8,r9,r8
80003d30:	70 0b       	ld.w	r11,r8[0x0]
80003d32:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003d36:	12 98       	mov	r8,r9
80003d38:	a1 78       	lsl	r8,0x1
80003d3a:	12 08       	add	r8,r9
80003d3c:	a3 78       	lsl	r8,0x3
80003d3e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003d42:	f2 08 00 08 	add	r8,r9,r8
80003d46:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003d4a:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003d4e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80003d52:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003d56:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80003d5a:	f4 08 15 02 	lsl	r8,r10,0x2
80003d5e:	ee 08 00 08 	add	r8,r7,r8
80003d62:	f1 49 ff ac 	st.w	r8[-84],r9
	if (directionOpt)
	{
		/* Project direction optVelocity on plane ind. */
		float planeOptVelocity[3];
		float scalarProduct = scalar_product(OptimalVelocity,planes[ind].normal);
		for(i=0;i<3;i++)
80003d66:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003d6a:	2f f8       	sub	r8,-1
80003d6c:	ef 68 ff c7 	st.b	r7[-57],r8
80003d70:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003d74:	30 28       	mov	r8,2
80003d76:	f0 09 18 00 	cp.b	r9,r8
80003d7a:	fe 9a ff d2 	brle	80003d1e <linearProgram2+0x14a>
		{
			planeOptVelocity[i] = OptimalVelocity[i] - scalarProduct * planes[ind].normal[i];
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
80003d7e:	ee c8 00 54 	sub	r8,r7,84
80003d82:	10 9c       	mov	r12,r8
80003d84:	fe b0 f7 12 	rcall	80002ba8 <vector_norm_sqr>
80003d88:	18 98       	mov	r8,r12
80003d8a:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
80003d8e:	ee fc ff e0 	ld.w	r12,r7[-32]
80003d92:	f0 16 00 02 	mcall	r6[8]
80003d96:	14 98       	mov	r8,r10
80003d98:	16 99       	mov	r9,r11
80003d9a:	30 05       	mov	r5,0
80003d9c:	e0 6a 43 2d 	mov	r10,17197
80003da0:	ea 1a eb 1c 	orh	r10,0xeb1c
80003da4:	e0 6b 36 e2 	mov	r11,14050
80003da8:	ea 1b 3f 1a 	orh	r11,0x3f1a
80003dac:	f0 16 00 80 	mcall	r6[512]
80003db0:	18 98       	mov	r8,r12
80003db2:	58 08       	cp.w	r8,0
80003db4:	c0 20       	breq	80003db8 <linearProgram2+0x1e4>
80003db6:	30 15       	mov	r5,1
80003db8:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80003dbc:	c2 00       	breq	80003dfc <linearProgram2+0x228>
		{
			for(i=0;i<3;i++)
80003dbe:	30 08       	mov	r8,0
80003dc0:	ef 68 ff c7 	st.b	r7[-57],r8
80003dc4:	c1 48       	rjmp	80003dec <linearProgram2+0x218>
			{
				NewVelocity[i] = planeCenter[i];
80003dc6:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dca:	a3 68       	lsl	r8,0x2
80003dcc:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003dd0:	10 09       	add	r9,r8
80003dd2:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003dd6:	a3 68       	lsl	r8,0x2
80003dd8:	ee 08 00 08 	add	r8,r7,r8
80003ddc:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003de0:	93 08       	st.w	r9[0x0],r8
		}
		float planeOptVelocityLengthSq = vector_norm_sqr(planeOptVelocity);
		
		if (planeOptVelocityLengthSq <= RVO_EPSILON)
		{
			for(i=0;i<3;i++)
80003de2:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003de6:	2f f8       	sub	r8,-1
80003de8:	ef 68 ff c7 	st.b	r7[-57],r8
80003dec:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003df0:	30 28       	mov	r8,2
80003df2:	f0 09 18 00 	cp.b	r9,r8
80003df6:	fe 9a ff e8 	brle	80003dc6 <linearProgram2+0x1f2>
80003dfa:	c2 d9       	rjmp	80004054 <linearProgram2+0x480>
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
80003dfc:	ee fb ff e0 	ld.w	r11,r7[-32]
80003e00:	ee fc ff d4 	ld.w	r12,r7[-44]
80003e04:	f0 16 00 0a 	mcall	r6[40]
80003e08:	18 98       	mov	r8,r12
80003e0a:	10 9c       	mov	r12,r8
80003e0c:	fe b0 f6 64 	rcall	80002ad4 <fast_sqrt>
80003e10:	18 98       	mov	r8,r12
80003e12:	ef 48 ff e4 	st.w	r7[-28],r8
			for(i=0;i<3;i++)
80003e16:	30 08       	mov	r8,0
80003e18:	ef 68 ff c7 	st.b	r7[-57],r8
80003e1c:	c2 18       	rjmp	80003e5e <linearProgram2+0x28a>
			{
				NewVelocity[i] = planeCenter[i] + sqrtPlane * planeOptVelocity[i];
80003e1e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e22:	a3 68       	lsl	r8,0x2
80003e24:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003e28:	10 09       	add	r9,r8
80003e2a:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e2e:	a3 68       	lsl	r8,0x2
80003e30:	ee 08 00 08 	add	r8,r7,r8
80003e34:	f0 fa ff b8 	ld.w	r10,r8[-72]
80003e38:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e3c:	a3 68       	lsl	r8,0x2
80003e3e:	ee 08 00 08 	add	r8,r7,r8
80003e42:	f0 fb ff ac 	ld.w	r11,r8[-84]
80003e46:	ee f8 ff e4 	ld.w	r8,r7[-28]
80003e4a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80003e4e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80003e52:	93 08       	st.w	r9[0x0],r8
			{
				NewVelocity[i] = planeCenter[i];
			}
		}else{
			float sqrtPlane = fast_sqrt(planeRadiusSq / planeOptVelocityLengthSq);
			for(i=0;i<3;i++)
80003e54:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003e58:	2f f8       	sub	r8,-1
80003e5a:	ef 68 ff c7 	st.b	r7[-57],r8
80003e5e:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003e62:	30 28       	mov	r8,2
80003e64:	f0 09 18 00 	cp.b	r9,r8
80003e68:	fe 9a ff db 	brle	80003e1e <linearProgram2+0x24a>
80003e6c:	cf 48       	rjmp	80004054 <linearProgram2+0x480>
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003e6e:	30 08       	mov	r8,0
80003e70:	ef 68 ff c7 	st.b	r7[-57],r8
80003e74:	c2 78       	rjmp	80003ec2 <linearProgram2+0x2ee>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
80003e76:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003e7a:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003e7e:	12 98       	mov	r8,r9
80003e80:	a1 78       	lsl	r8,0x1
80003e82:	12 08       	add	r8,r9
80003e84:	a3 78       	lsl	r8,0x3
80003e86:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003e8a:	f2 08 00 08 	add	r8,r9,r8
80003e8e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003e92:	2f d9       	sub	r9,-3
80003e94:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003e98:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003e9c:	a3 68       	lsl	r8,0x2
80003e9e:	ee fb ff 3c 	ld.w	r11,r7[-196]
80003ea2:	f6 08 00 08 	add	r8,r11,r8
80003ea6:	70 08       	ld.w	r8,r8[0x0]
80003ea8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003eac:	f4 08 15 02 	lsl	r8,r10,0x2
80003eb0:	ee 08 00 08 	add	r8,r7,r8
80003eb4:	f1 49 ff a0 	st.w	r8[-96],r9
			}
		}
	}else{
		/* Project point optVelocity on plane ind. */
		float diffPtsVel[3];
		for(i=0;i<3;i++)
80003eb8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003ebc:	2f f8       	sub	r8,-1
80003ebe:	ef 68 ff c7 	st.b	r7[-57],r8
80003ec2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003ec6:	30 28       	mov	r8,2
80003ec8:	f0 09 18 00 	cp.b	r9,r8
80003ecc:	fe 9a ff d5 	brle	80003e76 <linearProgram2+0x2a2>
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
80003ed0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003ed4:	12 98       	mov	r8,r9
80003ed6:	a1 78       	lsl	r8,0x1
80003ed8:	12 08       	add	r8,r9
80003eda:	a3 78       	lsl	r8,0x3
80003edc:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003ee0:	f2 08 00 08 	add	r8,r9,r8
80003ee4:	10 99       	mov	r9,r8
80003ee6:	ee c8 00 60 	sub	r8,r7,96
80003eea:	12 9b       	mov	r11,r9
80003eec:	10 9c       	mov	r12,r8
80003eee:	fe b0 f4 8d 	rcall	80002808 <scalar_product>
80003ef2:	18 98       	mov	r8,r12
80003ef4:	ef 48 ff e8 	st.w	r7[-24],r8
		for(i=0;i<3;i++)
80003ef8:	30 08       	mov	r8,0
80003efa:	ef 68 ff c7 	st.b	r7[-57],r8
80003efe:	c2 a8       	rjmp	80003f52 <linearProgram2+0x37e>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
80003f00:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f04:	a3 68       	lsl	r8,0x2
80003f06:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f0a:	f2 08 00 0a 	add	r10,r9,r8
80003f0e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f12:	a3 68       	lsl	r8,0x2
80003f14:	ee f9 ff 3c 	ld.w	r9,r7[-196]
80003f18:	f2 08 00 08 	add	r8,r9,r8
80003f1c:	70 0b       	ld.w	r11,r8[0x0]
80003f1e:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80003f22:	12 98       	mov	r8,r9
80003f24:	a1 78       	lsl	r8,0x1
80003f26:	12 08       	add	r8,r9
80003f28:	a3 78       	lsl	r8,0x3
80003f2a:	ee f9 ff 48 	ld.w	r9,r7[-184]
80003f2e:	f2 08 00 08 	add	r8,r9,r8
80003f32:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80003f36:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80003f3a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80003f3e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80003f42:	e5 a0 08 b8 	cop	cp0,cr8,cr11,cr8,0x40
80003f46:	95 08       	st.w	r10[0x0],r8
		for(i=0;i<3;i++)
		{
			diffPtsVel[i] = planes[ind].point[i]-OptimalVelocity[i];
		}
		float scalarProduct = scalar_product(diffPtsVel,planes[ind].normal);
		for(i=0;i<3;i++)
80003f48:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003f4c:	2f f8       	sub	r8,-1
80003f4e:	ef 68 ff c7 	st.b	r7[-57],r8
80003f52:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003f56:	30 28       	mov	r8,2
80003f58:	f0 09 18 00 	cp.b	r9,r8
80003f5c:	fe 9a ff d2 	brle	80003f00 <linearProgram2+0x32c>
		{
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
80003f60:	ee fc ff 38 	ld.w	r12,r7[-200]
80003f64:	fe b0 f6 22 	rcall	80002ba8 <vector_norm_sqr>
80003f68:	18 9a       	mov	r10,r12
80003f6a:	30 18       	mov	r8,1
80003f6c:	ee f9 ff d0 	ld.w	r9,r7[-48]
80003f70:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80003f74:	e0 8c 00 04 	brvs	80003f7c <linearProgram2+0x3a8>
80003f78:	e0 89 00 03 	brgt	80003f7e <linearProgram2+0x3aa>
80003f7c:	30 08       	mov	r8,0
80003f7e:	5c 58       	castu.b	r8
80003f80:	c6 a0       	breq	80004054 <linearProgram2+0x480>
			float planeResult[3];
			for(i=0;i<3;i++)
80003f82:	30 08       	mov	r8,0
80003f84:	ef 68 ff c7 	st.b	r7[-57],r8
80003f88:	c1 f8       	rjmp	80003fc6 <linearProgram2+0x3f2>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
80003f8a:	ef 2a ff c7 	ld.sb	r10,r7[-57]
80003f8e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003f92:	a3 68       	lsl	r8,0x2
80003f94:	ee f9 ff 38 	ld.w	r9,r7[-200]
80003f98:	f2 08 00 08 	add	r8,r9,r8
80003f9c:	70 09       	ld.w	r9,r8[0x0]
80003f9e:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80003fa2:	a3 68       	lsl	r8,0x2
80003fa4:	ee 08 00 08 	add	r8,r7,r8
80003fa8:	f0 f8 ff b8 	ld.w	r8,r8[-72]
80003fac:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80003fb0:	f4 08 15 02 	lsl	r8,r10,0x2
80003fb4:	ee 08 00 08 	add	r8,r7,r8
80003fb8:	f1 49 ff 94 	st.w	r8[-108],r9
			NewVelocity[i] = OptimalVelocity[i] + scalarProduct * planes[ind].normal[i];
		}
		/* If outside planeCircle, project on planeCircle. */
		if (vector_norm_sqr(NewVelocity) > radiusSq) {
			float planeResult[3];
			for(i=0;i<3;i++)
80003fbc:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80003fc0:	2f f8       	sub	r8,-1
80003fc2:	ef 68 ff c7 	st.b	r7[-57],r8
80003fc6:	ef 39 ff c7 	ld.ub	r9,r7[-57]
80003fca:	30 28       	mov	r8,2
80003fcc:	f0 09 18 00 	cp.b	r9,r8
80003fd0:	fe 9a ff dd 	brle	80003f8a <linearProgram2+0x3b6>
			{
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
80003fd4:	ee c8 00 6c 	sub	r8,r7,108
80003fd8:	10 9c       	mov	r12,r8
80003fda:	fe b0 f5 e7 	rcall	80002ba8 <vector_norm_sqr>
80003fde:	18 98       	mov	r8,r12
80003fe0:	ef 48 ff ec 	st.w	r7[-20],r8
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
80003fe4:	ee fb ff ec 	ld.w	r11,r7[-20]
80003fe8:	ee fc ff d4 	ld.w	r12,r7[-44]
80003fec:	f0 16 00 0a 	mcall	r6[40]
80003ff0:	18 98       	mov	r8,r12
80003ff2:	10 9c       	mov	r12,r8
80003ff4:	fe b0 f5 70 	rcall	80002ad4 <fast_sqrt>
80003ff8:	18 98       	mov	r8,r12
80003ffa:	ef 48 ff f0 	st.w	r7[-16],r8
			for(i=0;i<3;i++)
80003ffe:	30 08       	mov	r8,0
80004000:	ef 68 ff c7 	st.b	r7[-57],r8
80004004:	c2 18       	rjmp	80004046 <linearProgram2+0x472>
			{
				NewVelocity[i] = planeCenter[i] + planeSqrt * planeResult[i];
80004006:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000400a:	a3 68       	lsl	r8,0x2
8000400c:	ee f9 ff 38 	ld.w	r9,r7[-200]
80004010:	10 09       	add	r9,r8
80004012:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004016:	a3 68       	lsl	r8,0x2
80004018:	ee 08 00 08 	add	r8,r7,r8
8000401c:	f0 fa ff b8 	ld.w	r10,r8[-72]
80004020:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004024:	a3 68       	lsl	r8,0x2
80004026:	ee 08 00 08 	add	r8,r7,r8
8000402a:	f0 fb ff 94 	ld.w	r11,r8[-108]
8000402e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80004032:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004036:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000403a:	93 08       	st.w	r9[0x0],r8
				planeResult[i] = NewVelocity[i] - planeCenter[i];
			}
			float planeResultLengthSq = vector_norm_sqr(planeResult);
			
			float planeSqrt = fast_sqrt(planeRadiusSq / planeResultLengthSq);
			for(i=0;i<3;i++)
8000403c:	ef 38 ff c7 	ld.ub	r8,r7[-57]
80004040:	2f f8       	sub	r8,-1
80004042:	ef 68 ff c7 	st.b	r7[-57],r8
80004046:	ef 39 ff c7 	ld.ub	r9,r7[-57]
8000404a:	30 28       	mov	r8,2
8000404c:	f0 09 18 00 	cp.b	r9,r8
80004050:	fe 9a ff db 	brle	80004006 <linearProgram2+0x432>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004054:	30 08       	mov	r8,0
80004056:	ef 68 ff db 	st.b	r7[-37],r8
8000405a:	e0 8f 02 6c 	bral	80004532 <linearProgram2+0x95e>
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
8000405e:	30 08       	mov	r8,0
80004060:	ef 68 ff c7 	st.b	r7[-57],r8
80004064:	c2 78       	rjmp	800040b2 <linearProgram2+0x4de>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
80004066:	ef 2a ff c7 	ld.sb	r10,r7[-57]
8000406a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000406e:	12 98       	mov	r8,r9
80004070:	a1 78       	lsl	r8,0x1
80004072:	12 08       	add	r8,r9
80004074:	a3 78       	lsl	r8,0x3
80004076:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000407a:	f2 08 00 08 	add	r8,r9,r8
8000407e:	ef 29 ff c7 	ld.sb	r9,r7[-57]
80004082:	2f d9       	sub	r9,-3
80004084:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004088:	ef 28 ff c7 	ld.sb	r8,r7[-57]
8000408c:	a3 68       	lsl	r8,0x2
8000408e:	ee fb ff 38 	ld.w	r11,r7[-200]
80004092:	f6 08 00 08 	add	r8,r11,r8
80004096:	70 08       	ld.w	r8,r8[0x0]
80004098:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000409c:	f4 08 15 02 	lsl	r8,r10,0x2
800040a0:	ee 08 00 08 	add	r8,r7,r8
800040a4:	f1 49 ff 88 	st.w	r8[-120],r9
	
	int8_t index;
	for (index=0;index<ind;index++)
	{
		float diffPtsNewVel[3];
		for (i=0;i<3;i++)
800040a8:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800040ac:	2f f8       	sub	r8,-1
800040ae:	ef 68 ff c7 	st.b	r7[-57],r8
800040b2:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800040b6:	30 28       	mov	r8,2
800040b8:	f0 09 18 00 	cp.b	r9,r8
800040bc:	fe 9a ff d5 	brle	80004066 <linearProgram2+0x492>
		{
			diffPtsNewVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPtsNewVel)>0.0)
800040c0:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040c4:	12 98       	mov	r8,r9
800040c6:	a1 78       	lsl	r8,0x1
800040c8:	12 08       	add	r8,r9
800040ca:	a3 78       	lsl	r8,0x3
800040cc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800040d0:	f2 08 00 08 	add	r8,r9,r8
800040d4:	ee c9 00 78 	sub	r9,r7,120
800040d8:	12 9b       	mov	r11,r9
800040da:	10 9c       	mov	r12,r8
800040dc:	fe b0 f3 96 	rcall	80002808 <scalar_product>
800040e0:	18 9a       	mov	r10,r12
800040e2:	30 18       	mov	r8,1
800040e4:	30 09       	mov	r9,0
800040e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800040ea:	e0 8c 00 04 	brvs	800040f2 <linearProgram2+0x51e>
800040ee:	e0 89 00 03 	brgt	800040f4 <linearProgram2+0x520>
800040f2:	30 08       	mov	r8,0
800040f4:	5c 58       	castu.b	r8
800040f6:	e0 80 02 19 	breq	80004528 <linearProgram2+0x954>
		{
			/* Result does not satisfy constraint index. Compute new optimal result. */
			/* Compute intersection line of plane index and plane ind. */
			float crossProduct[3];
			CROSS(planes[index].normal,planes[ind].normal,crossProduct);
800040fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800040fe:	12 98       	mov	r8,r9
80004100:	a1 78       	lsl	r8,0x1
80004102:	12 08       	add	r8,r9
80004104:	a3 78       	lsl	r8,0x3
80004106:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000410a:	f2 08 00 08 	add	r8,r9,r8
8000410e:	70 1a       	ld.w	r10,r8[0x4]
80004110:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004114:	12 98       	mov	r8,r9
80004116:	a1 78       	lsl	r8,0x1
80004118:	12 08       	add	r8,r9
8000411a:	a3 78       	lsl	r8,0x3
8000411c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004120:	f2 08 00 08 	add	r8,r9,r8
80004124:	70 28       	ld.w	r8,r8[0x8]
80004126:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000412a:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000412e:	12 98       	mov	r8,r9
80004130:	a1 78       	lsl	r8,0x1
80004132:	12 08       	add	r8,r9
80004134:	a3 78       	lsl	r8,0x3
80004136:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000413a:	f2 08 00 08 	add	r8,r9,r8
8000413e:	70 2b       	ld.w	r11,r8[0x8]
80004140:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004144:	12 98       	mov	r8,r9
80004146:	a1 78       	lsl	r8,0x1
80004148:	12 08       	add	r8,r9
8000414a:	a3 78       	lsl	r8,0x3
8000414c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004150:	f2 08 00 08 	add	r8,r9,r8
80004154:	70 18       	ld.w	r8,r8[0x4]
80004156:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000415a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000415e:	ef 48 ff 7c 	st.w	r7[-132],r8
80004162:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004166:	12 98       	mov	r8,r9
80004168:	a1 78       	lsl	r8,0x1
8000416a:	12 08       	add	r8,r9
8000416c:	a3 78       	lsl	r8,0x3
8000416e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004172:	f2 08 00 08 	add	r8,r9,r8
80004176:	70 2a       	ld.w	r10,r8[0x8]
80004178:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000417c:	12 98       	mov	r8,r9
8000417e:	a1 78       	lsl	r8,0x1
80004180:	12 08       	add	r8,r9
80004182:	a3 78       	lsl	r8,0x3
80004184:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004188:	f2 08 00 08 	add	r8,r9,r8
8000418c:	70 08       	ld.w	r8,r8[0x0]
8000418e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004192:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004196:	12 98       	mov	r8,r9
80004198:	a1 78       	lsl	r8,0x1
8000419a:	12 08       	add	r8,r9
8000419c:	a3 78       	lsl	r8,0x3
8000419e:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041a2:	f2 08 00 08 	add	r8,r9,r8
800041a6:	70 0b       	ld.w	r11,r8[0x0]
800041a8:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041ac:	12 98       	mov	r8,r9
800041ae:	a1 78       	lsl	r8,0x1
800041b0:	12 08       	add	r8,r9
800041b2:	a3 78       	lsl	r8,0x3
800041b4:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041b8:	f2 08 00 08 	add	r8,r9,r8
800041bc:	70 28       	ld.w	r8,r8[0x8]
800041be:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800041c2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800041c6:	ef 48 ff 80 	st.w	r7[-128],r8
800041ca:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041ce:	12 98       	mov	r8,r9
800041d0:	a1 78       	lsl	r8,0x1
800041d2:	12 08       	add	r8,r9
800041d4:	a3 78       	lsl	r8,0x3
800041d6:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041da:	f2 08 00 08 	add	r8,r9,r8
800041de:	70 0a       	ld.w	r10,r8[0x0]
800041e0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800041e4:	12 98       	mov	r8,r9
800041e6:	a1 78       	lsl	r8,0x1
800041e8:	12 08       	add	r8,r9
800041ea:	a3 78       	lsl	r8,0x3
800041ec:	ee f9 ff 48 	ld.w	r9,r7[-184]
800041f0:	f2 08 00 08 	add	r8,r9,r8
800041f4:	70 18       	ld.w	r8,r8[0x4]
800041f6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800041fa:	ef 29 ff db 	ld.sb	r9,r7[-37]
800041fe:	12 98       	mov	r8,r9
80004200:	a1 78       	lsl	r8,0x1
80004202:	12 08       	add	r8,r9
80004204:	a3 78       	lsl	r8,0x3
80004206:	ee f9 ff 48 	ld.w	r9,r7[-184]
8000420a:	f2 08 00 08 	add	r8,r9,r8
8000420e:	70 1b       	ld.w	r11,r8[0x4]
80004210:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004214:	12 98       	mov	r8,r9
80004216:	a1 78       	lsl	r8,0x1
80004218:	12 08       	add	r8,r9
8000421a:	a3 78       	lsl	r8,0x3
8000421c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004220:	f2 08 00 08 	add	r8,r9,r8
80004224:	70 08       	ld.w	r8,r8[0x0]
80004226:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000422a:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000422e:	ef 48 ff 84 	st.w	r7[-124],r8
			
			if (vector_norm_sqr(crossProduct) <= RVO_EPSILON)
80004232:	ee c8 00 84 	sub	r8,r7,132
80004236:	10 9c       	mov	r12,r8
80004238:	fe b0 f4 b8 	rcall	80002ba8 <vector_norm_sqr>
8000423c:	18 98       	mov	r8,r12
8000423e:	10 9c       	mov	r12,r8
80004240:	f0 16 00 02 	mcall	r6[8]
80004244:	14 98       	mov	r8,r10
80004246:	16 99       	mov	r9,r11
80004248:	30 05       	mov	r5,0
8000424a:	e0 6a 43 2d 	mov	r10,17197
8000424e:	ea 1a eb 1c 	orh	r10,0xeb1c
80004252:	e0 6b 36 e2 	mov	r11,14050
80004256:	ea 1b 3f 1a 	orh	r11,0x3f1a
8000425a:	f0 16 00 80 	mcall	r6[512]
8000425e:	18 98       	mov	r8,r12
80004260:	58 08       	cp.w	r8,0
80004262:	c0 20       	breq	80004266 <linearProgram2+0x692>
80004264:	30 15       	mov	r5,1
80004266:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000426a:	c0 30       	breq	80004270 <linearProgram2+0x69c>
			{
				/* Planes ind and index are (almost) parallel, and plane index fully invalidates plane ind. */
				return false;
8000426c:	30 08       	mov	r8,0
8000426e:	c6 b9       	rjmp	80004544 <linearProgram2+0x970>
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
80004270:	ee c8 00 84 	sub	r8,r7,132
80004274:	10 9c       	mov	r12,r8
80004276:	fe b0 f4 b1 	rcall	80002bd8 <vector_norm>
8000427a:	18 98       	mov	r8,r12
8000427c:	ef 48 ff f4 	st.w	r7[-12],r8
			for (i=0;i<3;i++)
80004280:	30 08       	mov	r8,0
80004282:	ef 68 ff c7 	st.b	r7[-57],r8
80004286:	c1 c8       	rjmp	800042be <linearProgram2+0x6ea>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
80004288:	ef 25 ff c7 	ld.sb	r5,r7[-57]
8000428c:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004290:	a3 68       	lsl	r8,0x2
80004292:	ee 08 00 08 	add	r8,r7,r8
80004296:	f0 f8 ff 7c 	ld.w	r8,r8[-132]
8000429a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000429e:	10 9c       	mov	r12,r8
800042a0:	f0 16 00 0a 	mcall	r6[40]
800042a4:	18 98       	mov	r8,r12
800042a6:	10 99       	mov	r9,r8
800042a8:	ea 08 15 02 	lsl	r8,r5,0x2
800042ac:	ee 08 00 08 	add	r8,r7,r8
800042b0:	f1 49 ff 64 	st.w	r8[-156],r9
				return false;
			}
			
			line_t line;
			float normCrossProduct = vector_norm(crossProduct);
			for (i=0;i<3;i++)
800042b4:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800042b8:	2f f8       	sub	r8,-1
800042ba:	ef 68 ff c7 	st.b	r7[-57],r8
800042be:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800042c2:	30 28       	mov	r8,2
800042c4:	f0 09 18 00 	cp.b	r9,r8
800042c8:	fe 9a ff e0 	brle	80004288 <linearProgram2+0x6b4>
			{
				line.direction[i] = crossProduct[i] / normCrossProduct;
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
800042cc:	ee fa ff 68 	ld.w	r10,r7[-152]
800042d0:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042d4:	12 98       	mov	r8,r9
800042d6:	a1 78       	lsl	r8,0x1
800042d8:	12 08       	add	r8,r9
800042da:	a3 78       	lsl	r8,0x3
800042dc:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042e0:	f2 08 00 08 	add	r8,r9,r8
800042e4:	70 28       	ld.w	r8,r8[0x8]
800042e6:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800042ea:	ee fb ff 6c 	ld.w	r11,r7[-148]
800042ee:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800042f2:	12 98       	mov	r8,r9
800042f4:	a1 78       	lsl	r8,0x1
800042f6:	12 08       	add	r8,r9
800042f8:	a3 78       	lsl	r8,0x3
800042fa:	ee f9 ff 48 	ld.w	r9,r7[-184]
800042fe:	f2 08 00 08 	add	r8,r9,r8
80004302:	70 18       	ld.w	r8,r8[0x4]
80004304:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004308:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000430c:	ef 48 ff 58 	st.w	r7[-168],r8
80004310:	ee fa ff 6c 	ld.w	r10,r7[-148]
80004314:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004318:	12 98       	mov	r8,r9
8000431a:	a1 78       	lsl	r8,0x1
8000431c:	12 08       	add	r8,r9
8000431e:	a3 78       	lsl	r8,0x3
80004320:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004324:	f2 08 00 08 	add	r8,r9,r8
80004328:	70 08       	ld.w	r8,r8[0x0]
8000432a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000432e:	ee fb ff 64 	ld.w	r11,r7[-156]
80004332:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004336:	12 98       	mov	r8,r9
80004338:	a1 78       	lsl	r8,0x1
8000433a:	12 08       	add	r8,r9
8000433c:	a3 78       	lsl	r8,0x3
8000433e:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004342:	f2 08 00 08 	add	r8,r9,r8
80004346:	70 28       	ld.w	r8,r8[0x8]
80004348:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000434c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004350:	ef 48 ff 5c 	st.w	r7[-164],r8
80004354:	ee fa ff 64 	ld.w	r10,r7[-156]
80004358:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000435c:	12 98       	mov	r8,r9
8000435e:	a1 78       	lsl	r8,0x1
80004360:	12 08       	add	r8,r9
80004362:	a3 78       	lsl	r8,0x3
80004364:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004368:	f2 08 00 08 	add	r8,r9,r8
8000436c:	70 18       	ld.w	r8,r8[0x4]
8000436e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004372:	ee fb ff 68 	ld.w	r11,r7[-152]
80004376:	ef 29 ff 44 	ld.sb	r9,r7[-188]
8000437a:	12 98       	mov	r8,r9
8000437c:	a1 78       	lsl	r8,0x1
8000437e:	12 08       	add	r8,r9
80004380:	a3 78       	lsl	r8,0x3
80004382:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004386:	f2 08 00 08 	add	r8,r9,r8
8000438a:	70 08       	ld.w	r8,r8[0x0]
8000438c:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004390:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004394:	ef 48 ff 60 	st.w	r7[-160],r8
			
			float diffPoints[3];
			for (i=0;i<3;i++)
80004398:	30 08       	mov	r8,0
8000439a:	ef 68 ff c7 	st.b	r7[-57],r8
8000439e:	c2 e8       	rjmp	800043fa <linearProgram2+0x826>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
800043a0:	ef 2a ff c7 	ld.sb	r10,r7[-57]
800043a4:	ef 29 ff db 	ld.sb	r9,r7[-37]
800043a8:	12 98       	mov	r8,r9
800043aa:	a1 78       	lsl	r8,0x1
800043ac:	12 08       	add	r8,r9
800043ae:	a3 78       	lsl	r8,0x3
800043b0:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043b4:	f2 08 00 08 	add	r8,r9,r8
800043b8:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043bc:	2f d9       	sub	r9,-3
800043be:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
800043c2:	ef 29 ff 44 	ld.sb	r9,r7[-188]
800043c6:	12 98       	mov	r8,r9
800043c8:	a1 78       	lsl	r8,0x1
800043ca:	12 08       	add	r8,r9
800043cc:	a3 78       	lsl	r8,0x3
800043ce:	ee f9 ff 48 	ld.w	r9,r7[-184]
800043d2:	f2 08 00 08 	add	r8,r9,r8
800043d6:	ef 29 ff c7 	ld.sb	r9,r7[-57]
800043da:	2f d9       	sub	r9,-3
800043dc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800043e0:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
800043e4:	f4 08 15 02 	lsl	r8,r10,0x2
800043e8:	ee 08 00 08 	add	r8,r7,r8
800043ec:	f1 49 ff 4c 	st.w	r8[-180],r9
			}
			float lineNormal[3];
			CROSS(line.direction,planes[ind].normal,lineNormal);
			
			float diffPoints[3];
			for (i=0;i<3;i++)
800043f0:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800043f4:	2f f8       	sub	r8,-1
800043f6:	ef 68 ff c7 	st.b	r7[-57],r8
800043fa:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800043fe:	30 28       	mov	r8,2
80004400:	f0 09 18 00 	cp.b	r9,r8
80004404:	fe 9a ff ce 	brle	800043a0 <linearProgram2+0x7cc>
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
80004408:	ef 29 ff db 	ld.sb	r9,r7[-37]
8000440c:	12 98       	mov	r8,r9
8000440e:	a1 78       	lsl	r8,0x1
80004410:	12 08       	add	r8,r9
80004412:	a3 78       	lsl	r8,0x3
80004414:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004418:	f2 08 00 08 	add	r8,r9,r8
8000441c:	10 99       	mov	r9,r8
8000441e:	ee c8 00 b4 	sub	r8,r7,180
80004422:	12 9b       	mov	r11,r9
80004424:	10 9c       	mov	r12,r8
80004426:	fe b0 f1 f1 	rcall	80002808 <scalar_product>
8000442a:	18 98       	mov	r8,r12
8000442c:	ef 48 ff f8 	st.w	r7[-8],r8
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
80004430:	ef 29 ff db 	ld.sb	r9,r7[-37]
80004434:	12 98       	mov	r8,r9
80004436:	a1 78       	lsl	r8,0x1
80004438:	12 08       	add	r8,r9
8000443a:	a3 78       	lsl	r8,0x3
8000443c:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004440:	f2 08 00 08 	add	r8,r9,r8
80004444:	10 99       	mov	r9,r8
80004446:	ee c8 00 a8 	sub	r8,r7,168
8000444a:	12 9b       	mov	r11,r9
8000444c:	10 9c       	mov	r12,r8
8000444e:	fe b0 f1 dd 	rcall	80002808 <scalar_product>
80004452:	18 98       	mov	r8,r12
80004454:	ef 48 ff fc 	st.w	r7[-4],r8
			for(i=0;i<3;i++)
80004458:	30 08       	mov	r8,0
8000445a:	ef 68 ff c7 	st.b	r7[-57],r8
8000445e:	c3 18       	rjmp	800044c0 <linearProgram2+0x8ec>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
80004460:	ef 25 ff c7 	ld.sb	r5,r7[-57]
80004464:	ef 29 ff 44 	ld.sb	r9,r7[-188]
80004468:	12 98       	mov	r8,r9
8000446a:	a1 78       	lsl	r8,0x1
8000446c:	12 08       	add	r8,r9
8000446e:	a3 78       	lsl	r8,0x3
80004470:	ee f9 ff 48 	ld.w	r9,r7[-184]
80004474:	f2 08 00 08 	add	r8,r9,r8
80004478:	ef 29 ff c7 	ld.sb	r9,r7[-57]
8000447c:	2f d9       	sub	r9,-3
8000447e:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004482:	ee fb ff fc 	ld.w	r11,r7[-4]
80004486:	ee fc ff f8 	ld.w	r12,r7[-8]
8000448a:	f0 16 00 0a 	mcall	r6[40]
8000448e:	18 98       	mov	r8,r12
80004490:	10 99       	mov	r9,r8
80004492:	ef 28 ff c7 	ld.sb	r8,r7[-57]
80004496:	a3 68       	lsl	r8,0x2
80004498:	ee 08 00 08 	add	r8,r7,r8
8000449c:	f0 f8 ff 58 	ld.w	r8,r8[-168]
800044a0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800044a4:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
800044a8:	ea c8 ff fd 	sub	r8,r5,-3
800044ac:	a3 68       	lsl	r8,0x2
800044ae:	ee 08 00 08 	add	r8,r7,r8
800044b2:	f1 49 ff 64 	st.w	r8[-156],r9
			{
				diffPoints[i] = planes[index].point[i] - planes[ind].point[i];
			}
			float scalarProductPointsNormal = scalar_product(diffPoints,planes[index].normal);
			float scalarProductNormals = scalar_product(lineNormal,planes[index].normal);
			for(i=0;i<3;i++)
800044b6:	ef 38 ff c7 	ld.ub	r8,r7[-57]
800044ba:	2f f8       	sub	r8,-1
800044bc:	ef 68 ff c7 	st.b	r7[-57],r8
800044c0:	ef 39 ff c7 	ld.ub	r9,r7[-57]
800044c4:	30 28       	mov	r8,2
800044c6:	f0 09 18 00 	cp.b	r9,r8
800044ca:	fe 9a ff cb 	brle	80004460 <linearProgram2+0x88c>
			{
				line.point[i] = planes[ind].point[i] + (scalarProductPointsNormal / scalarProductNormals) * lineNormal[i];
			}
			
			if (!(linearProgram1(planes,index,line,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
800044ce:	ef 38 ff 34 	ld.ub	r8,r7[-204]
800044d2:	ef 2c ff db 	ld.sb	r12,r7[-37]
800044d6:	1a d8       	st.w	--sp,r8
800044d8:	20 6d       	sub	sp,24
800044da:	1a 98       	mov	r8,sp
800044dc:	10 9a       	mov	r10,r8
800044de:	ee cb 00 9c 	sub	r11,r7,156
800044e2:	f4 c8 00 00 	sub	r8,r10,0
800044e6:	f6 c9 00 00 	sub	r9,r11,0
800044ea:	72 0e       	ld.w	lr,r9[0x0]
800044ec:	91 0e       	st.w	r8[0x0],lr
800044ee:	72 1e       	ld.w	lr,r9[0x4]
800044f0:	91 1e       	st.w	r8[0x4],lr
800044f2:	72 2e       	ld.w	lr,r9[0x8]
800044f4:	91 2e       	st.w	r8[0x8],lr
800044f6:	72 39       	ld.w	r9,r9[0xc]
800044f8:	91 39       	st.w	r8[0xc],r9
800044fa:	f6 e8 00 10 	ld.d	r8,r11[16]
800044fe:	f4 e9 00 10 	st.d	r10[16],r8
80004502:	ee f8 ff 38 	ld.w	r8,r7[-200]
80004506:	ee f9 ff 3c 	ld.w	r9,r7[-196]
8000450a:	ee fa ff 40 	ld.w	r10,r7[-192]
8000450e:	18 9b       	mov	r11,r12
80004510:	ee fc ff 48 	ld.w	r12,r7[-184]
80004514:	f0 16 01 d9 	mcall	r6[1892]
80004518:	2f 9d       	sub	sp,-28
8000451a:	18 98       	mov	r8,r12
8000451c:	ec 18 00 01 	eorl	r8,0x1
80004520:	5c 58       	castu.b	r8
80004522:	c0 30       	breq	80004528 <linearProgram2+0x954>
			{
				return false;
80004524:	30 08       	mov	r8,0
80004526:	c0 f8       	rjmp	80004544 <linearProgram2+0x970>
			}
		}
	}
	
	int8_t index;
	for (index=0;index<ind;index++)
80004528:	ef 38 ff db 	ld.ub	r8,r7[-37]
8000452c:	2f f8       	sub	r8,-1
8000452e:	ef 68 ff db 	st.b	r7[-37],r8
80004532:	ef 39 ff db 	ld.ub	r9,r7[-37]
80004536:	ef 38 ff 44 	ld.ub	r8,r7[-188]
8000453a:	f0 09 18 00 	cp.b	r9,r8
8000453e:	fe 95 fd 90 	brlt	8000405e <linearProgram2+0x48a>
			{
				return false;
			}
		}
	}
	return true;
80004542:	30 18       	mov	r8,1
}
80004544:	10 9c       	mov	r12,r8
80004546:	2c dd       	sub	sp,-204
80004548:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000454c:	80 00       	ld.sh	r0,r0[0x0]
8000454e:	3a 66       	mov	r6,-90

80004550 <linearProgram3>:

float linearProgram3(plane_t planes[], float OptimalVelocity[], float maxSpeed, float NewVelocity[], bool directionOpt)
{
80004550:	eb cd 40 e0 	pushm	r5-r7,lr
80004554:	1a 97       	mov	r7,sp
80004556:	20 ed       	sub	sp,56
80004558:	fe f6 02 e0 	ld.w	r6,pc[736]
8000455c:	1e 26       	rsub	r6,pc
8000455e:	ef 4c ff d8 	st.w	r7[-40],r12
80004562:	ef 4b ff d4 	st.w	r7[-44],r11
80004566:	ef 4a ff d0 	st.w	r7[-48],r10
8000456a:	ef 49 ff cc 	st.w	r7[-52],r9
8000456e:	ef 68 ff c8 	st.b	r7[-56],r8
	int8_t i;
	
	if (directionOpt)
80004572:	ef 39 ff c8 	ld.ub	r9,r7[-56]
80004576:	30 08       	mov	r8,0
80004578:	f0 09 18 00 	cp.b	r9,r8
8000457c:	c3 40       	breq	800045e4 <linearProgram3+0x94>
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000457e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004582:	fe b0 f3 2b 	rcall	80002bd8 <vector_norm>
80004586:	18 98       	mov	r8,r12
80004588:	ef 48 ff f8 	st.w	r7[-8],r8
		for(i=0;i<3;i++)
8000458c:	30 08       	mov	r8,0
8000458e:	ef 68 ff f6 	st.b	r7[-10],r8
80004592:	c2 18       	rjmp	800045d4 <linearProgram3+0x84>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004594:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004598:	a3 68       	lsl	r8,0x2
8000459a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000459e:	f2 08 00 05 	add	r5,r9,r8
800045a2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800045a6:	a3 68       	lsl	r8,0x2
800045a8:	ee f9 ff d4 	ld.w	r9,r7[-44]
800045ac:	f2 08 00 08 	add	r8,r9,r8
800045b0:	70 08       	ld.w	r8,r8[0x0]
800045b2:	ee fb ff f8 	ld.w	r11,r7[-8]
800045b6:	10 9c       	mov	r12,r8
800045b8:	f0 16 00 0a 	mcall	r6[40]
800045bc:	18 98       	mov	r8,r12
800045be:	10 99       	mov	r9,r8
800045c0:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045c4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800045c8:	8b 08       	st.w	r5[0x0],r8
	
	if (directionOpt)
	{
		/* Optimize direction. Note that the optimization velocity is of unit length in this case. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
800045ca:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800045ce:	2f f8       	sub	r8,-1
800045d0:	ef 68 ff f6 	st.b	r7[-10],r8
800045d4:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800045d8:	30 28       	mov	r8,2
800045da:	f0 09 18 00 	cp.b	r9,r8
800045de:	fe 9a ff db 	brle	80004594 <linearProgram3+0x44>
800045e2:	c6 98       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
800045e4:	ee fc ff d4 	ld.w	r12,r7[-44]
800045e8:	fe b0 f2 e0 	rcall	80002ba8 <vector_norm_sqr>
800045ec:	18 9a       	mov	r10,r12
800045ee:	ee f9 ff d0 	ld.w	r9,r7[-48]
800045f2:	ee f8 ff d0 	ld.w	r8,r7[-48]
800045f6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800045fa:	30 18       	mov	r8,1
800045fc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004600:	e0 8c 00 04 	brvs	80004608 <linearProgram3+0xb8>
80004604:	e0 89 00 03 	brgt	8000460a <linearProgram3+0xba>
80004608:	30 08       	mov	r8,0
8000460a:	5c 58       	castu.b	r8
8000460c:	c3 40       	breq	80004674 <linearProgram3+0x124>
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
8000460e:	ee fc ff d4 	ld.w	r12,r7[-44]
80004612:	fe b0 f2 e3 	rcall	80002bd8 <vector_norm>
80004616:	18 98       	mov	r8,r12
80004618:	ef 48 ff fc 	st.w	r7[-4],r8
		for(i=0;i<3;i++)
8000461c:	30 08       	mov	r8,0
8000461e:	ef 68 ff f6 	st.b	r7[-10],r8
80004622:	c2 18       	rjmp	80004664 <linearProgram3+0x114>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
80004624:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004628:	a3 68       	lsl	r8,0x2
8000462a:	ee f9 ff cc 	ld.w	r9,r7[-52]
8000462e:	f2 08 00 05 	add	r5,r9,r8
80004632:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004636:	a3 68       	lsl	r8,0x2
80004638:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000463c:	f2 08 00 08 	add	r8,r9,r8
80004640:	70 08       	ld.w	r8,r8[0x0]
80004642:	ee fb ff fc 	ld.w	r11,r7[-4]
80004646:	10 9c       	mov	r12,r8
80004648:	f0 16 00 0a 	mcall	r6[40]
8000464c:	18 98       	mov	r8,r12
8000464e:	10 99       	mov	r9,r8
80004650:	ee f8 ff d0 	ld.w	r8,r7[-48]
80004654:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004658:	8b 08       	st.w	r5[0x0],r8
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else if (vector_norm_sqr(OptimalVelocity) > SQR(maxSpeed)){
		/* Optimize closest point and outside circle. */
		float normOptimalVelocity = vector_norm(OptimalVelocity);
		for(i=0;i<3;i++)
8000465a:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000465e:	2f f8       	sub	r8,-1
80004660:	ef 68 ff f6 	st.b	r7[-10],r8
80004664:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004668:	30 28       	mov	r8,2
8000466a:	f0 09 18 00 	cp.b	r9,r8
8000466e:	fe 9a ff db 	brle	80004624 <linearProgram3+0xd4>
80004672:	c2 18       	rjmp	800046b4 <linearProgram3+0x164>
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
80004674:	30 08       	mov	r8,0
80004676:	ef 68 ff f6 	st.b	r7[-10],r8
8000467a:	c1 68       	rjmp	800046a6 <linearProgram3+0x156>
		{
			NewVelocity[i] = OptimalVelocity[i];
8000467c:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004680:	a3 68       	lsl	r8,0x2
80004682:	ee f9 ff cc 	ld.w	r9,r7[-52]
80004686:	f2 08 00 08 	add	r8,r9,r8
8000468a:	ef 29 ff f6 	ld.sb	r9,r7[-10]
8000468e:	a3 69       	lsl	r9,0x2
80004690:	ee fa ff d4 	ld.w	r10,r7[-44]
80004694:	f4 09 00 09 	add	r9,r10,r9
80004698:	72 09       	ld.w	r9,r9[0x0]
8000469a:	91 09       	st.w	r8[0x0],r9
		for(i=0;i<3;i++)
		{
			NewVelocity[i] = OptimalVelocity[i]/normOptimalVelocity * maxSpeed;
		}
	}else{
		for(i=0;i<3;i++)
8000469c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800046a0:	2f f8       	sub	r8,-1
800046a2:	ef 68 ff f6 	st.b	r7[-10],r8
800046a6:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800046aa:	30 28       	mov	r8,2
800046ac:	f0 09 18 00 	cp.b	r9,r8
800046b0:	fe 9a ff e6 	brle	8000467c <linearProgram3+0x12c>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
800046b4:	30 08       	mov	r8,0
800046b6:	ef 68 ff f7 	st.b	r7[-9],r8
800046ba:	ca a8       	rjmp	8000480e <linearProgram3+0x2be>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800046bc:	30 08       	mov	r8,0
800046be:	ef 68 ff f6 	st.b	r7[-10],r8
800046c2:	c2 78       	rjmp	80004710 <linearProgram3+0x1c0>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
800046c4:	ef 2a ff f6 	ld.sb	r10,r7[-10]
800046c8:	ef 29 ff f7 	ld.sb	r9,r7[-9]
800046cc:	12 98       	mov	r8,r9
800046ce:	a1 78       	lsl	r8,0x1
800046d0:	12 08       	add	r8,r9
800046d2:	a3 78       	lsl	r8,0x3
800046d4:	ee f9 ff d8 	ld.w	r9,r7[-40]
800046d8:	f2 08 00 08 	add	r8,r9,r8
800046dc:	ef 29 ff f6 	ld.sb	r9,r7[-10]
800046e0:	2f d9       	sub	r9,-3
800046e2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800046e6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800046ea:	a3 68       	lsl	r8,0x2
800046ec:	ee fb ff cc 	ld.w	r11,r7[-52]
800046f0:	f6 08 00 08 	add	r8,r11,r8
800046f4:	70 08       	ld.w	r8,r8[0x0]
800046f6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800046fa:	f4 08 15 02 	lsl	r8,r10,0x2
800046fe:	ee 08 00 08 	add	r8,r7,r8
80004702:	f1 49 ff e8 	st.w	r8[-24],r9
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004706:	ef 38 ff f6 	ld.ub	r8,r7[-10]
8000470a:	2f f8       	sub	r8,-1
8000470c:	ef 68 ff f6 	st.b	r7[-10],r8
80004710:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80004714:	30 28       	mov	r8,2
80004716:	f0 09 18 00 	cp.b	r9,r8
8000471a:	fe 9a ff d5 	brle	800046c4 <linearProgram3+0x174>
		{
			diffPointVel[i] = planes[ind].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
8000471e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004722:	12 98       	mov	r8,r9
80004724:	a1 78       	lsl	r8,0x1
80004726:	12 08       	add	r8,r9
80004728:	a3 78       	lsl	r8,0x3
8000472a:	ee f9 ff d8 	ld.w	r9,r7[-40]
8000472e:	f2 08 00 08 	add	r8,r9,r8
80004732:	ee c9 00 18 	sub	r9,r7,24
80004736:	12 9b       	mov	r11,r9
80004738:	10 9c       	mov	r12,r8
8000473a:	fe b0 f0 67 	rcall	80002808 <scalar_product>
8000473e:	18 9a       	mov	r10,r12
80004740:	30 18       	mov	r8,1
80004742:	30 09       	mov	r9,0
80004744:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004748:	e0 8c 00 04 	brvs	80004750 <linearProgram3+0x200>
8000474c:	e0 89 00 03 	brgt	80004752 <linearProgram3+0x202>
80004750:	30 08       	mov	r8,0
80004752:	5c 58       	castu.b	r8
80004754:	c5 80       	breq	80004804 <linearProgram3+0x2b4>
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
80004756:	30 08       	mov	r8,0
80004758:	ef 68 ff f6 	st.b	r7[-10],r8
8000475c:	c1 58       	rjmp	80004786 <linearProgram3+0x236>
			{
				tempResult[i] = NewVelocity[i];
8000475e:	ef 28 ff f6 	ld.sb	r8,r7[-10]
80004762:	ef 29 ff f6 	ld.sb	r9,r7[-10]
80004766:	a3 69       	lsl	r9,0x2
80004768:	ee fa ff cc 	ld.w	r10,r7[-52]
8000476c:	f4 09 00 09 	add	r9,r10,r9
80004770:	72 09       	ld.w	r9,r9[0x0]
80004772:	a3 68       	lsl	r8,0x2
80004774:	ee 08 00 08 	add	r8,r7,r8
80004778:	f1 49 ff dc 	st.w	r8[-36],r9
		}
		if (scalar_product(planes[ind].normal, diffPointVel ) > 0.0)
		{
			/* Result does not satisfy constraint ind. Compute new optimal result. */
			float tempResult[3];
			for (i=0;i<3;i++)
8000477c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80004780:	2f f8       	sub	r8,-1
80004782:	ef 68 ff f6 	st.b	r7[-10],r8
80004786:	ef 39 ff f6 	ld.ub	r9,r7[-10]
8000478a:	30 28       	mov	r8,2
8000478c:	f0 09 18 00 	cp.b	r9,r8
80004790:	fe 9a ff e7 	brle	8000475e <linearProgram3+0x20e>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
80004794:	ef 38 ff c8 	ld.ub	r8,r7[-56]
80004798:	ef 2b ff f7 	ld.sb	r11,r7[-9]
8000479c:	1a d8       	st.w	--sp,r8
8000479e:	ee f8 ff cc 	ld.w	r8,r7[-52]
800047a2:	ee f9 ff d4 	ld.w	r9,r7[-44]
800047a6:	ee fa ff d0 	ld.w	r10,r7[-48]
800047aa:	ee fc ff d8 	ld.w	r12,r7[-40]
800047ae:	f0 16 01 8a 	mcall	r6[1576]
800047b2:	2f fd       	sub	sp,-4
800047b4:	18 98       	mov	r8,r12
800047b6:	ec 18 00 01 	eorl	r8,0x1
800047ba:	5c 58       	castu.b	r8
800047bc:	c2 40       	breq	80004804 <linearProgram3+0x2b4>
			{
				for (i=0;i<3;i++)
800047be:	30 08       	mov	r8,0
800047c0:	ef 68 ff f6 	st.b	r7[-10],r8
800047c4:	c1 48       	rjmp	800047ec <linearProgram3+0x29c>
				{
					NewVelocity[i] = tempResult[i];
800047c6:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047ca:	a3 68       	lsl	r8,0x2
800047cc:	ee f9 ff cc 	ld.w	r9,r7[-52]
800047d0:	10 09       	add	r9,r8
800047d2:	ef 28 ff f6 	ld.sb	r8,r7[-10]
800047d6:	a3 68       	lsl	r8,0x2
800047d8:	ee 08 00 08 	add	r8,r7,r8
800047dc:	f0 f8 ff dc 	ld.w	r8,r8[-36]
800047e0:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (!(linearProgram2(planes,ind,maxSpeed,OptimalVelocity,NewVelocity,directionOpt)))
			{
				for (i=0;i<3;i++)
800047e2:	ef 38 ff f6 	ld.ub	r8,r7[-10]
800047e6:	2f f8       	sub	r8,-1
800047e8:	ef 68 ff f6 	st.b	r7[-10],r8
800047ec:	ef 39 ff f6 	ld.ub	r9,r7[-10]
800047f0:	30 28       	mov	r8,2
800047f2:	f0 09 18 00 	cp.b	r9,r8
800047f6:	fe 9a ff e8 	brle	800047c6 <linearProgram3+0x276>
				{
					NewVelocity[i] = tempResult[i];
				}
				
				return ind;
800047fa:	ef 28 ff f7 	ld.sb	r8,r7[-9]
800047fe:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80004802:	c1 78       	rjmp	80004830 <linearProgram3+0x2e0>
		}
	}
	
	int8_t ind;
	
	for (ind=0;ind<centralData->number_of_neighbors;ind++)
80004804:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80004808:	2f f8       	sub	r8,-1
8000480a:	ef 68 ff f7 	st.b	r7[-9],r8
8000480e:	ef 29 ff f7 	ld.sb	r9,r7[-9]
80004812:	ec f8 00 00 	ld.w	r8,r6[0]
80004816:	70 08       	ld.w	r8,r8[0x0]
80004818:	f1 38 0d 44 	ld.ub	r8,r8[3396]
8000481c:	10 39       	cp.w	r9,r8
8000481e:	fe 95 ff 4f 	brlt	800046bc <linearProgram3+0x16c>
				
				return ind;
			}
		}
	}
	return centralData->number_of_neighbors;
80004822:	ec f8 00 00 	ld.w	r8,r6[0]
80004826:	70 08       	ld.w	r8,r8[0x0]
80004828:	f1 38 0d 44 	ld.ub	r8,r8[3396]
8000482c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
}
80004830:	10 9c       	mov	r12,r8
80004832:	2f 2d       	sub	sp,-56
80004834:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80004838:	80 00       	ld.sh	r0,r0[0x0]
8000483a:	43 e0       	lddsp	r0,sp[0xf8]

8000483c <linearProgram4>:

void linearProgram4(plane_t planes[], int8_t ind, float maxSpeed, float NewVelocity[])
{
8000483c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80004840:	1a 97       	mov	r7,sp
80004842:	fa cd 01 ec 	sub	sp,sp,492
80004846:	fe f6 07 7a 	ld.w	r6,pc[1914]
8000484a:	1e 26       	rsub	r6,pc
8000484c:	ef 4c fe 20 	st.w	r7[-480],r12
80004850:	16 98       	mov	r8,r11
80004852:	ef 4a fe 18 	st.w	r7[-488],r10
80004856:	ef 49 fe 14 	st.w	r7[-492],r9
8000485a:	ef 68 fe 1c 	st.b	r7[-484],r8
	
	int8_t index,index2;
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
8000485e:	30 08       	mov	r8,0
80004860:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004864:	ef 38 fe 1c 	ld.ub	r8,r7[-484]
80004868:	ef 68 ff ee 	st.b	r7[-18],r8
8000486c:	e0 8f 03 9c 	bral	80004fa4 <linearProgram4+0x768>
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
80004870:	30 08       	mov	r8,0
80004872:	ef 68 ff ed 	st.b	r7[-19],r8
80004876:	c2 78       	rjmp	800048c4 <linearProgram4+0x88>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004878:	ef 2a ff ed 	ld.sb	r10,r7[-19]
8000487c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004880:	12 98       	mov	r8,r9
80004882:	a1 78       	lsl	r8,0x1
80004884:	12 08       	add	r8,r9
80004886:	a3 78       	lsl	r8,0x3
80004888:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000488c:	f2 08 00 08 	add	r8,r9,r8
80004890:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004894:	2f d9       	sub	r9,-3
80004896:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000489a:	ef 28 ff ed 	ld.sb	r8,r7[-19]
8000489e:	a3 68       	lsl	r8,0x2
800048a0:	ee fb fe 14 	ld.w	r11,r7[-492]
800048a4:	f6 08 00 08 	add	r8,r11,r8
800048a8:	70 08       	ld.w	r8,r8[0x0]
800048aa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800048ae:	f4 08 15 02 	lsl	r8,r10,0x2
800048b2:	ee 08 00 08 	add	r8,r7,r8
800048b6:	f1 49 fe 78 	st.w	r8[-392],r9
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
	{
		float diffPointVel[3];
		for (i=0;i<3;i++)
800048ba:	ef 38 ff ed 	ld.ub	r8,r7[-19]
800048be:	2f f8       	sub	r8,-1
800048c0:	ef 68 ff ed 	st.b	r7[-19],r8
800048c4:	ef 39 ff ed 	ld.ub	r9,r7[-19]
800048c8:	30 28       	mov	r8,2
800048ca:	f0 09 18 00 	cp.b	r9,r8
800048ce:	fe 9a ff d5 	brle	80004878 <linearProgram4+0x3c>
		{
			diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
800048d2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800048d6:	12 98       	mov	r8,r9
800048d8:	a1 78       	lsl	r8,0x1
800048da:	12 08       	add	r8,r9
800048dc:	a3 78       	lsl	r8,0x3
800048de:	ee f9 fe 20 	ld.w	r9,r7[-480]
800048e2:	f2 08 00 08 	add	r8,r9,r8
800048e6:	ee c9 01 88 	sub	r9,r7,392
800048ea:	12 9b       	mov	r11,r9
800048ec:	10 9c       	mov	r12,r8
800048ee:	fe b0 ef 8d 	rcall	80002808 <scalar_product>
800048f2:	18 9a       	mov	r10,r12
800048f4:	30 18       	mov	r8,1
800048f6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800048fa:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800048fe:	e0 8c 00 04 	brvs	80004906 <linearProgram4+0xca>
80004902:	e0 89 00 03 	brgt	80004908 <linearProgram4+0xcc>
80004906:	30 08       	mov	r8,0
80004908:	5c 58       	castu.b	r8
8000490a:	e0 80 03 48 	breq	80004f9a <linearProgram4+0x75e>
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
8000490e:	30 08       	mov	r8,0
80004910:	ef 68 ff ef 	st.b	r7[-17],r8
80004914:	e0 8f 02 98 	bral	80004e44 <linearProgram4+0x608>
			{
				plane_t plane;
				float crossProduct[3];
				CROSS(planes[index2].normal, planes[index].normal, crossProduct);
80004918:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000491c:	12 98       	mov	r8,r9
8000491e:	a1 78       	lsl	r8,0x1
80004920:	12 08       	add	r8,r9
80004922:	a3 78       	lsl	r8,0x3
80004924:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004928:	f2 08 00 08 	add	r8,r9,r8
8000492c:	70 1a       	ld.w	r10,r8[0x4]
8000492e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004932:	12 98       	mov	r8,r9
80004934:	a1 78       	lsl	r8,0x1
80004936:	12 08       	add	r8,r9
80004938:	a3 78       	lsl	r8,0x3
8000493a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000493e:	f2 08 00 08 	add	r8,r9,r8
80004942:	70 28       	ld.w	r8,r8[0x8]
80004944:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004948:	ef 29 ff ef 	ld.sb	r9,r7[-17]
8000494c:	12 98       	mov	r8,r9
8000494e:	a1 78       	lsl	r8,0x1
80004950:	12 08       	add	r8,r9
80004952:	a3 78       	lsl	r8,0x3
80004954:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004958:	f2 08 00 08 	add	r8,r9,r8
8000495c:	70 2b       	ld.w	r11,r8[0x8]
8000495e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004962:	12 98       	mov	r8,r9
80004964:	a1 78       	lsl	r8,0x1
80004966:	12 08       	add	r8,r9
80004968:	a3 78       	lsl	r8,0x3
8000496a:	ee f9 fe 20 	ld.w	r9,r7[-480]
8000496e:	f2 08 00 08 	add	r8,r9,r8
80004972:	70 18       	ld.w	r8,r8[0x4]
80004974:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004978:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000497c:	ef 48 fe 3c 	st.w	r7[-452],r8
80004980:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004984:	12 98       	mov	r8,r9
80004986:	a1 78       	lsl	r8,0x1
80004988:	12 08       	add	r8,r9
8000498a:	a3 78       	lsl	r8,0x3
8000498c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004990:	f2 08 00 08 	add	r8,r9,r8
80004994:	70 2a       	ld.w	r10,r8[0x8]
80004996:	ef 29 ff ee 	ld.sb	r9,r7[-18]
8000499a:	12 98       	mov	r8,r9
8000499c:	a1 78       	lsl	r8,0x1
8000499e:	12 08       	add	r8,r9
800049a0:	a3 78       	lsl	r8,0x3
800049a2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049a6:	f2 08 00 08 	add	r8,r9,r8
800049aa:	70 08       	ld.w	r8,r8[0x0]
800049ac:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
800049b0:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049b4:	12 98       	mov	r8,r9
800049b6:	a1 78       	lsl	r8,0x1
800049b8:	12 08       	add	r8,r9
800049ba:	a3 78       	lsl	r8,0x3
800049bc:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049c0:	f2 08 00 08 	add	r8,r9,r8
800049c4:	70 0b       	ld.w	r11,r8[0x0]
800049c6:	ef 29 ff ee 	ld.sb	r9,r7[-18]
800049ca:	12 98       	mov	r8,r9
800049cc:	a1 78       	lsl	r8,0x1
800049ce:	12 08       	add	r8,r9
800049d0:	a3 78       	lsl	r8,0x3
800049d2:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049d6:	f2 08 00 08 	add	r8,r9,r8
800049da:	70 28       	ld.w	r8,r8[0x8]
800049dc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
800049e0:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800049e4:	ef 48 fe 40 	st.w	r7[-448],r8
800049e8:	ef 29 ff ef 	ld.sb	r9,r7[-17]
800049ec:	12 98       	mov	r8,r9
800049ee:	a1 78       	lsl	r8,0x1
800049f0:	12 08       	add	r8,r9
800049f2:	a3 78       	lsl	r8,0x3
800049f4:	ee f9 fe 20 	ld.w	r9,r7[-480]
800049f8:	f2 08 00 08 	add	r8,r9,r8
800049fc:	70 0a       	ld.w	r10,r8[0x0]
800049fe:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a02:	12 98       	mov	r8,r9
80004a04:	a1 78       	lsl	r8,0x1
80004a06:	12 08       	add	r8,r9
80004a08:	a3 78       	lsl	r8,0x3
80004a0a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a0e:	f2 08 00 08 	add	r8,r9,r8
80004a12:	70 18       	ld.w	r8,r8[0x4]
80004a14:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004a18:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a1c:	12 98       	mov	r8,r9
80004a1e:	a1 78       	lsl	r8,0x1
80004a20:	12 08       	add	r8,r9
80004a22:	a3 78       	lsl	r8,0x3
80004a24:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a28:	f2 08 00 08 	add	r8,r9,r8
80004a2c:	70 1b       	ld.w	r11,r8[0x4]
80004a2e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004a32:	12 98       	mov	r8,r9
80004a34:	a1 78       	lsl	r8,0x1
80004a36:	12 08       	add	r8,r9
80004a38:	a3 78       	lsl	r8,0x3
80004a3a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a3e:	f2 08 00 08 	add	r8,r9,r8
80004a42:	70 08       	ld.w	r8,r8[0x0]
80004a44:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004a48:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004a4c:	ef 48 fe 44 	st.w	r7[-444],r8
				
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
80004a50:	ee c8 01 c4 	sub	r8,r7,452
80004a54:	10 9c       	mov	r12,r8
80004a56:	fe b0 f0 a9 	rcall	80002ba8 <vector_norm_sqr>
80004a5a:	18 98       	mov	r8,r12
80004a5c:	10 9c       	mov	r12,r8
80004a5e:	f0 16 00 02 	mcall	r6[8]
80004a62:	14 98       	mov	r8,r10
80004a64:	16 99       	mov	r9,r11
80004a66:	30 05       	mov	r5,0
80004a68:	e0 6a 43 2d 	mov	r10,17197
80004a6c:	ea 1a eb 1c 	orh	r10,0xeb1c
80004a70:	e0 6b 36 e2 	mov	r11,14050
80004a74:	ea 1b 3f 1a 	orh	r11,0x3f1a
80004a78:	f0 16 00 80 	mcall	r6[512]
80004a7c:	18 98       	mov	r8,r12
80004a7e:	58 08       	cp.w	r8,0
80004a80:	c0 20       	breq	80004a84 <linearProgram4+0x248>
80004a82:	30 15       	mov	r5,1
80004a84:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80004a88:	c6 50       	breq	80004b52 <linearProgram4+0x316>
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
80004a8a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004a8e:	12 98       	mov	r8,r9
80004a90:	a1 78       	lsl	r8,0x1
80004a92:	12 08       	add	r8,r9
80004a94:	a3 78       	lsl	r8,0x3
80004a96:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004a9a:	f2 08 00 08 	add	r8,r9,r8
80004a9e:	10 9a       	mov	r10,r8
80004aa0:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004aa4:	12 98       	mov	r8,r9
80004aa6:	a1 78       	lsl	r8,0x1
80004aa8:	12 08       	add	r8,r9
80004aaa:	a3 78       	lsl	r8,0x3
80004aac:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ab0:	f2 08 00 08 	add	r8,r9,r8
80004ab4:	14 9b       	mov	r11,r10
80004ab6:	10 9c       	mov	r12,r8
80004ab8:	fe b0 ee a8 	rcall	80002808 <scalar_product>
80004abc:	18 9a       	mov	r10,r12
80004abe:	30 18       	mov	r8,1
80004ac0:	30 09       	mov	r9,0
80004ac2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004ac6:	e0 8c 00 04 	brvs	80004ace <linearProgram4+0x292>
80004aca:	e0 89 00 03 	brgt	80004ad0 <linearProgram4+0x294>
80004ace:	30 08       	mov	r8,0
80004ad0:	5c 58       	castu.b	r8
80004ad2:	e0 81 01 b3 	brne	80004e38 <linearProgram4+0x5fc>
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004ad6:	30 08       	mov	r8,0
80004ad8:	ef 68 ff ed 	st.b	r7[-19],r8
80004adc:	c3 38       	rjmp	80004b42 <linearProgram4+0x306>
						{
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
80004ade:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004ae2:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004ae6:	12 98       	mov	r8,r9
80004ae8:	a1 78       	lsl	r8,0x1
80004aea:	12 08       	add	r8,r9
80004aec:	a3 78       	lsl	r8,0x3
80004aee:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004af2:	f2 08 00 08 	add	r8,r9,r8
80004af6:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004afa:	2f d9       	sub	r9,-3
80004afc:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004b00:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004b04:	12 98       	mov	r8,r9
80004b06:	a1 78       	lsl	r8,0x1
80004b08:	12 08       	add	r8,r9
80004b0a:	a3 78       	lsl	r8,0x3
80004b0c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b10:	f2 08 00 08 	add	r8,r9,r8
80004b14:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004b18:	2f d9       	sub	r9,-3
80004b1a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004b1e:	e5 a0 09 b8 	cop	cp0,cr9,cr11,cr8,0x40
80004b22:	fc 18 3f 00 	movh	r8,0x3f00
80004b26:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80004b2a:	f4 c8 ff fd 	sub	r8,r10,-3
80004b2e:	a3 68       	lsl	r8,0x2
80004b30:	ee 08 00 08 	add	r8,r7,r8
80004b34:	f1 49 fe 48 	st.w	r8[-440],r9
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
					}else{
						/* Plane index and plane index2 point in opposite direction. */
						for (i=0;i<3;i++)
80004b38:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004b3c:	2f f8       	sub	r8,-1
80004b3e:	ef 68 ff ed 	st.b	r7[-19],r8
80004b42:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004b46:	30 28       	mov	r8,2
80004b48:	f0 09 18 00 	cp.b	r9,r8
80004b4c:	fe 9a ff c9 	brle	80004ade <linearProgram4+0x2a2>
80004b50:	c5 69       	rjmp	80004dfc <linearProgram4+0x5c0>
							plane.point[i] = 0.5 * (planes[index].point[i] + planes[index2].point[i]);
						}
					}
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
80004b52:	ee fa fe 40 	ld.w	r10,r7[-448]
80004b56:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b5a:	12 98       	mov	r8,r9
80004b5c:	a1 78       	lsl	r8,0x1
80004b5e:	12 08       	add	r8,r9
80004b60:	a3 78       	lsl	r8,0x3
80004b62:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b66:	f2 08 00 08 	add	r8,r9,r8
80004b6a:	70 28       	ld.w	r8,r8[0x8]
80004b6c:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004b70:	ee fb fe 44 	ld.w	r11,r7[-444]
80004b74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b78:	12 98       	mov	r8,r9
80004b7a:	a1 78       	lsl	r8,0x1
80004b7c:	12 08       	add	r8,r9
80004b7e:	a3 78       	lsl	r8,0x3
80004b80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004b84:	f2 08 00 08 	add	r8,r9,r8
80004b88:	70 18       	ld.w	r8,r8[0x4]
80004b8a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004b8e:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004b92:	ef 48 fe 30 	st.w	r7[-464],r8
80004b96:	ee fa fe 44 	ld.w	r10,r7[-444]
80004b9a:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004b9e:	12 98       	mov	r8,r9
80004ba0:	a1 78       	lsl	r8,0x1
80004ba2:	12 08       	add	r8,r9
80004ba4:	a3 78       	lsl	r8,0x3
80004ba6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004baa:	f2 08 00 08 	add	r8,r9,r8
80004bae:	70 08       	ld.w	r8,r8[0x0]
80004bb0:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bb4:	ee fb fe 3c 	ld.w	r11,r7[-452]
80004bb8:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004bbc:	12 98       	mov	r8,r9
80004bbe:	a1 78       	lsl	r8,0x1
80004bc0:	12 08       	add	r8,r9
80004bc2:	a3 78       	lsl	r8,0x3
80004bc4:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bc8:	f2 08 00 08 	add	r8,r9,r8
80004bcc:	70 28       	ld.w	r8,r8[0x8]
80004bce:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004bd2:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004bd6:	ef 48 fe 34 	st.w	r7[-460],r8
80004bda:	ee fa fe 3c 	ld.w	r10,r7[-452]
80004bde:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004be2:	12 98       	mov	r8,r9
80004be4:	a1 78       	lsl	r8,0x1
80004be6:	12 08       	add	r8,r9
80004be8:	a3 78       	lsl	r8,0x3
80004bea:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004bee:	f2 08 00 08 	add	r8,r9,r8
80004bf2:	70 18       	ld.w	r8,r8[0x4]
80004bf4:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80004bf8:	ee fb fe 40 	ld.w	r11,r7[-448]
80004bfc:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c00:	12 98       	mov	r8,r9
80004c02:	a1 78       	lsl	r8,0x1
80004c04:	12 08       	add	r8,r9
80004c06:	a3 78       	lsl	r8,0x3
80004c08:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c0c:	f2 08 00 08 	add	r8,r9,r8
80004c10:	70 08       	ld.w	r8,r8[0x0]
80004c12:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80004c16:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80004c1a:	ef 48 fe 38 	st.w	r7[-456],r8
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c1e:	30 08       	mov	r8,0
80004c20:	ef 68 ff ed 	st.b	r7[-19],r8
80004c24:	c2 e8       	rjmp	80004c80 <linearProgram4+0x444>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
80004c26:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004c2a:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c2e:	12 98       	mov	r8,r9
80004c30:	a1 78       	lsl	r8,0x1
80004c32:	12 08       	add	r8,r9
80004c34:	a3 78       	lsl	r8,0x3
80004c36:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c3a:	f2 08 00 08 	add	r8,r9,r8
80004c3e:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c42:	2f d9       	sub	r9,-3
80004c44:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004c48:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004c4c:	12 98       	mov	r8,r9
80004c4e:	a1 78       	lsl	r8,0x1
80004c50:	12 08       	add	r8,r9
80004c52:	a3 78       	lsl	r8,0x3
80004c54:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c58:	f2 08 00 08 	add	r8,r9,r8
80004c5c:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004c60:	2f d9       	sub	r9,-3
80004c62:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004c66:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004c6a:	f4 08 15 02 	lsl	r8,r10,0x2
80004c6e:	ee 08 00 08 	add	r8,r7,r8
80004c72:	f1 49 fe 24 	st.w	r8[-476],r9
				}else{
					float lineNormal[3];
					CROSS(crossProduct,planes[index].normal,lineNormal);
					
					float diffPoints[3];
					for (i=0;i<3;i++)
80004c76:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004c7a:	2f f8       	sub	r8,-1
80004c7c:	ef 68 ff ed 	st.b	r7[-19],r8
80004c80:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004c84:	30 28       	mov	r8,2
80004c86:	f0 09 18 00 	cp.b	r9,r8
80004c8a:	fe 9a ff ce 	brle	80004c26 <linearProgram4+0x3ea>
					{
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
80004c8e:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004c92:	12 98       	mov	r8,r9
80004c94:	a1 78       	lsl	r8,0x1
80004c96:	12 08       	add	r8,r9
80004c98:	a3 78       	lsl	r8,0x3
80004c9a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004c9e:	f2 08 00 08 	add	r8,r9,r8
80004ca2:	10 99       	mov	r9,r8
80004ca4:	ee c8 01 dc 	sub	r8,r7,476
80004ca8:	12 9b       	mov	r11,r9
80004caa:	10 9c       	mov	r12,r8
80004cac:	fe b0 ed ae 	rcall	80002808 <scalar_product>
80004cb0:	18 98       	mov	r8,r12
80004cb2:	ef 48 ff f4 	st.w	r7[-12],r8
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
80004cb6:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004cba:	12 98       	mov	r8,r9
80004cbc:	a1 78       	lsl	r8,0x1
80004cbe:	12 08       	add	r8,r9
80004cc0:	a3 78       	lsl	r8,0x3
80004cc2:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cc6:	f2 08 00 08 	add	r8,r9,r8
80004cca:	10 99       	mov	r9,r8
80004ccc:	ee c8 01 d0 	sub	r8,r7,464
80004cd0:	12 9b       	mov	r11,r9
80004cd2:	10 9c       	mov	r12,r8
80004cd4:	fe b0 ed 9a 	rcall	80002808 <scalar_product>
80004cd8:	18 98       	mov	r8,r12
80004cda:	ef 48 ff f8 	st.w	r7[-8],r8
					for (i=0;i<3;i++)
80004cde:	30 08       	mov	r8,0
80004ce0:	ef 68 ff ed 	st.b	r7[-19],r8
80004ce4:	c5 78       	rjmp	80004d92 <linearProgram4+0x556>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
80004ce6:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004cea:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004cee:	12 98       	mov	r8,r9
80004cf0:	a1 78       	lsl	r8,0x1
80004cf2:	12 08       	add	r8,r9
80004cf4:	a3 78       	lsl	r8,0x3
80004cf6:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004cfa:	f2 08 00 08 	add	r8,r9,r8
80004cfe:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d02:	2f d9       	sub	r9,-3
80004d04:	f0 09 03 23 	ld.w	r3,r8[r9<<0x2]
80004d08:	ee fb ff f8 	ld.w	r11,r7[-8]
80004d0c:	ee fc ff f4 	ld.w	r12,r7[-12]
80004d10:	f0 16 00 0a 	mcall	r6[40]
80004d14:	18 98       	mov	r8,r12
80004d16:	10 99       	mov	r9,r8
80004d18:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004d1c:	a3 68       	lsl	r8,0x2
80004d1e:	ee 08 00 08 	add	r8,r7,r8
80004d22:	f0 f8 fe 30 	ld.w	r8,r8[-464]
80004d26:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80004d2a:	e5 a0 09 38 	cop	cp0,cr9,cr3,cr8,0x40
80004d2e:	ea c8 ff fd 	sub	r8,r5,-3
80004d32:	a3 68       	lsl	r8,0x2
80004d34:	ee 08 00 08 	add	r8,r7,r8
80004d38:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
80004d3c:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004d40:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004d44:	12 98       	mov	r8,r9
80004d46:	a1 78       	lsl	r8,0x1
80004d48:	12 08       	add	r8,r9
80004d4a:	a3 78       	lsl	r8,0x3
80004d4c:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d50:	f2 08 00 08 	add	r8,r9,r8
80004d54:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d58:	f0 09 03 2b 	ld.w	r11,r8[r9<<0x2]
80004d5c:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004d60:	12 98       	mov	r8,r9
80004d62:	a1 78       	lsl	r8,0x1
80004d64:	12 08       	add	r8,r9
80004d66:	a3 78       	lsl	r8,0x3
80004d68:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004d6c:	f2 08 00 08 	add	r8,r9,r8
80004d70:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004d74:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80004d78:	e5 a1 09 b8 	cop	cp0,cr9,cr11,cr8,0x42
80004d7c:	f4 08 15 02 	lsl	r8,r10,0x2
80004d80:	ee 08 00 08 	add	r8,r7,r8
80004d84:	f1 49 fe 48 	st.w	r8[-440],r9
						diffPoints[i] = planes[index2].point[i] - planes[index].point[i];
					}
					
					float scalarProdPtsNormal = scalar_product(diffPoints, planes[index2].normal);
					float scalarProdNormals = scalar_product(lineNormal, planes[index2].normal);
					for (i=0;i<3;i++)
80004d88:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004d8c:	2f f8       	sub	r8,-1
80004d8e:	ef 68 ff ed 	st.b	r7[-19],r8
80004d92:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004d96:	30 28       	mov	r8,2
80004d98:	f0 09 18 00 	cp.b	r9,r8
80004d9c:	fe 9a ff a5 	brle	80004ce6 <linearProgram4+0x4aa>
					{
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
80004da0:	ee c8 01 b8 	sub	r8,r7,440
80004da4:	10 9c       	mov	r12,r8
80004da6:	fe b0 ef 19 	rcall	80002bd8 <vector_norm>
80004daa:	18 98       	mov	r8,r12
80004dac:	ef 48 ff fc 	st.w	r7[-4],r8
					for(i=0;i<3;i++)
80004db0:	30 08       	mov	r8,0
80004db2:	ef 68 ff ed 	st.b	r7[-19],r8
80004db6:	c1 c8       	rjmp	80004dee <linearProgram4+0x5b2>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
80004db8:	ef 25 ff ed 	ld.sb	r5,r7[-19]
80004dbc:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004dc0:	a3 68       	lsl	r8,0x2
80004dc2:	ee 08 00 08 	add	r8,r7,r8
80004dc6:	f0 f8 fe 48 	ld.w	r8,r8[-440]
80004dca:	ee fb ff fc 	ld.w	r11,r7[-4]
80004dce:	10 9c       	mov	r12,r8
80004dd0:	f0 16 00 0a 	mcall	r6[40]
80004dd4:	18 98       	mov	r8,r12
80004dd6:	10 99       	mov	r9,r8
80004dd8:	ea 08 15 02 	lsl	r8,r5,0x2
80004ddc:	ee 08 00 08 	add	r8,r7,r8
80004de0:	f1 49 fe 48 	st.w	r8[-440],r9
						plane.point[i] = planes[index].point[i] + (scalarProdPtsNormal / scalarProdNormals) * lineNormal[i];
						plane.normal[i] = planes[index2].normal[i] - planes[index].normal[i];
					}
					
					float normNormal = vector_norm(plane.normal);
					for(i=0;i<3;i++)
80004de4:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004de8:	2f f8       	sub	r8,-1
80004dea:	ef 68 ff ed 	st.b	r7[-19],r8
80004dee:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004df2:	30 28       	mov	r8,2
80004df4:	f0 09 18 00 	cp.b	r9,r8
80004df8:	fe 9a ff e0 	brle	80004db8 <linearProgram4+0x57c>
					{
						plane.normal[i] = plane.normal[i] / normNormal;
					}
				}
				projPlanes[index2] = plane;
80004dfc:	ef 29 ff ef 	ld.sb	r9,r7[-17]
80004e00:	12 98       	mov	r8,r9
80004e02:	a1 78       	lsl	r8,0x1
80004e04:	12 08       	add	r8,r9
80004e06:	a3 78       	lsl	r8,0x3
80004e08:	ee 08 00 08 	add	r8,r7,r8
80004e0c:	f0 c8 01 7c 	sub	r8,r8,380
80004e10:	10 9a       	mov	r10,r8
80004e12:	ee cb 01 b8 	sub	r11,r7,440
80004e16:	f4 c8 00 00 	sub	r8,r10,0
80004e1a:	f6 c9 00 00 	sub	r9,r11,0
80004e1e:	72 0c       	ld.w	r12,r9[0x0]
80004e20:	91 0c       	st.w	r8[0x0],r12
80004e22:	72 1c       	ld.w	r12,r9[0x4]
80004e24:	91 1c       	st.w	r8[0x4],r12
80004e26:	72 2c       	ld.w	r12,r9[0x8]
80004e28:	91 2c       	st.w	r8[0x8],r12
80004e2a:	72 39       	ld.w	r9,r9[0xc]
80004e2c:	91 39       	st.w	r8[0xc],r9
80004e2e:	f6 e8 00 10 	ld.d	r8,r11[16]
80004e32:	f4 e9 00 10 	st.d	r10[16],r8
80004e36:	c0 28       	rjmp	80004e3a <linearProgram4+0x5fe>
				if (vector_norm_sqr(crossProduct)<=RVO_EPSILON)
				{
					/* Plane index and plane index2 are (almost) parallel. */
					if (scalar_product(planes[index].normal, planes[index2].normal) > 0.0f) {
						/* Plane index and plane index2 point in the same direction. */
						continue;
80004e38:	d7 03       	nop
		}
		if (scalar_product(planes[index].normal,diffPointVel)>distance)
		{
			/* Result does not satisfy constraint of plane i. */
			
			for (index2 = 0;index2<index;index2++)
80004e3a:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80004e3e:	2f f8       	sub	r8,-1
80004e40:	ef 68 ff ef 	st.b	r7[-17],r8
80004e44:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80004e48:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004e4c:	f0 09 18 00 	cp.b	r9,r8
80004e50:	fe 95 fd 64 	brlt	80004918 <linearProgram4+0xdc>
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e54:	30 08       	mov	r8,0
80004e56:	ef 68 ff ed 	st.b	r7[-19],r8
80004e5a:	c1 58       	rjmp	80004e84 <linearProgram4+0x648>
			{
				tempResult[i] = NewVelocity[i];
80004e5c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004e60:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004e64:	a3 69       	lsl	r9,0x2
80004e66:	ee fa fe 14 	ld.w	r10,r7[-492]
80004e6a:	f4 09 00 09 	add	r9,r10,r9
80004e6e:	72 09       	ld.w	r9,r9[0x0]
80004e70:	a3 68       	lsl	r8,0x2
80004e72:	ee 08 00 08 	add	r8,r7,r8
80004e76:	f1 49 fe 6c 	st.w	r8[-404],r9
				}
				projPlanes[index2] = plane;
			}
			
			float tempResult[3];
			for (i=0;i<3;i++)
80004e7a:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004e7e:	2f f8       	sub	r8,-1
80004e80:	ef 68 ff ed 	st.b	r7[-19],r8
80004e84:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004e88:	30 28       	mov	r8,2
80004e8a:	f0 09 18 00 	cp.b	r9,r8
80004e8e:	fe 9a ff e7 	brle	80004e5c <linearProgram4+0x620>
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
80004e92:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004e96:	12 98       	mov	r8,r9
80004e98:	a1 78       	lsl	r8,0x1
80004e9a:	12 08       	add	r8,r9
80004e9c:	a3 78       	lsl	r8,0x3
80004e9e:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004ea2:	f2 08 00 08 	add	r8,r9,r8
80004ea6:	10 9b       	mov	r11,r8
80004ea8:	ee cc 01 7c 	sub	r12,r7,380
80004eac:	30 18       	mov	r8,1
80004eae:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004eb2:	ee fa fe 18 	ld.w	r10,r7[-488]
80004eb6:	f0 16 01 15 	mcall	r6[1108]
80004eba:	18 9a       	mov	r10,r12
80004ebc:	ef 28 ff ee 	ld.sb	r8,r7[-18]
80004ec0:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80004ec4:	30 18       	mov	r8,1
80004ec6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004eca:	e0 8c 00 03 	brvs	80004ed0 <linearProgram4+0x694>
80004ece:	c0 25       	brlt	80004ed2 <linearProgram4+0x696>
80004ed0:	30 08       	mov	r8,0
80004ed2:	5c 58       	castu.b	r8
80004ed4:	c1 f0       	breq	80004f12 <linearProgram4+0x6d6>
			{
				for (i=0;i<3;i++)
80004ed6:	30 08       	mov	r8,0
80004ed8:	ef 68 ff ed 	st.b	r7[-19],r8
80004edc:	c1 48       	rjmp	80004f04 <linearProgram4+0x6c8>
				{
					NewVelocity[i] = tempResult[i];
80004ede:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004ee2:	a3 68       	lsl	r8,0x2
80004ee4:	ee f9 fe 14 	ld.w	r9,r7[-492]
80004ee8:	10 09       	add	r9,r8
80004eea:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004eee:	a3 68       	lsl	r8,0x2
80004ef0:	ee 08 00 08 	add	r8,r7,r8
80004ef4:	f0 f8 fe 6c 	ld.w	r8,r8[-404]
80004ef8:	93 08       	st.w	r9[0x0],r8
			{
				tempResult[i] = NewVelocity[i];
			}
			if (linearProgram3(projPlanes,planes[index].normal,maxSpeed,NewVelocity,true)<index)
			{
				for (i=0;i<3;i++)
80004efa:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004efe:	2f f8       	sub	r8,-1
80004f00:	ef 68 ff ed 	st.b	r7[-19],r8
80004f04:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f08:	30 28       	mov	r8,2
80004f0a:	f0 09 18 00 	cp.b	r9,r8
80004f0e:	fe 9a ff e8 	brle	80004ede <linearProgram4+0x6a2>
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f12:	30 08       	mov	r8,0
80004f14:	ef 68 ff ed 	st.b	r7[-19],r8
80004f18:	c2 78       	rjmp	80004f66 <linearProgram4+0x72a>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
80004f1a:	ef 2a ff ed 	ld.sb	r10,r7[-19]
80004f1e:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f22:	12 98       	mov	r8,r9
80004f24:	a1 78       	lsl	r8,0x1
80004f26:	12 08       	add	r8,r9
80004f28:	a3 78       	lsl	r8,0x3
80004f2a:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f2e:	f2 08 00 08 	add	r8,r9,r8
80004f32:	ef 29 ff ed 	ld.sb	r9,r7[-19]
80004f36:	2f d9       	sub	r9,-3
80004f38:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80004f3c:	ef 28 ff ed 	ld.sb	r8,r7[-19]
80004f40:	a3 68       	lsl	r8,0x2
80004f42:	ee fb fe 14 	ld.w	r11,r7[-492]
80004f46:	f6 08 00 08 	add	r8,r11,r8
80004f4a:	70 08       	ld.w	r8,r8[0x0]
80004f4c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80004f50:	f4 08 15 02 	lsl	r8,r10,0x2
80004f54:	ee 08 00 08 	add	r8,r7,r8
80004f58:	f1 49 fe 60 	st.w	r8[-416],r9
				{
					NewVelocity[i] = tempResult[i];
				}
			}
			float diffPointVel[3];
			for (i=0;i<3;i++)
80004f5c:	ef 38 ff ed 	ld.ub	r8,r7[-19]
80004f60:	2f f8       	sub	r8,-1
80004f62:	ef 68 ff ed 	st.b	r7[-19],r8
80004f66:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80004f6a:	30 28       	mov	r8,2
80004f6c:	f0 09 18 00 	cp.b	r9,r8
80004f70:	fe 9a ff d5 	brle	80004f1a <linearProgram4+0x6de>
			{
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
80004f74:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004f78:	12 98       	mov	r8,r9
80004f7a:	a1 78       	lsl	r8,0x1
80004f7c:	12 08       	add	r8,r9
80004f7e:	a3 78       	lsl	r8,0x3
80004f80:	ee f9 fe 20 	ld.w	r9,r7[-480]
80004f84:	f2 08 00 08 	add	r8,r9,r8
80004f88:	ee c9 01 a0 	sub	r9,r7,416
80004f8c:	12 9b       	mov	r11,r9
80004f8e:	10 9c       	mov	r12,r8
80004f90:	fe b0 ec 3c 	rcall	80002808 <scalar_product>
80004f94:	18 98       	mov	r8,r12
80004f96:	ef 48 ff f0 	st.w	r7[-16],r8
	
	plane_t projPlanes[MAX_NUM_NEIGHBORS];
	
	float distance = 0.0;
	
	for (index = ind;index<centralData->number_of_neighbors;index++)
80004f9a:	ef 38 ff ee 	ld.ub	r8,r7[-18]
80004f9e:	2f f8       	sub	r8,-1
80004fa0:	ef 68 ff ee 	st.b	r7[-18],r8
80004fa4:	ef 29 ff ee 	ld.sb	r9,r7[-18]
80004fa8:	ec f8 00 00 	ld.w	r8,r6[0]
80004fac:	70 08       	ld.w	r8,r8[0x0]
80004fae:	f1 38 0d 44 	ld.ub	r8,r8[3396]
80004fb2:	10 39       	cp.w	r9,r8
80004fb4:	fe 95 fc 5e 	brlt	80004870 <linearProgram4+0x34>
				diffPointVel[i] = planes[index].point[i] - NewVelocity[i];
			}
			distance = scalar_product(planes[index].normal,diffPointVel);
		}
	}
80004fb8:	28 5d       	sub	sp,-492
80004fba:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80004fbe:	00 00       	add	r0,r0
80004fc0:	80 00       	ld.sh	r0,r0[0x0]
80004fc2:	46 ce       	lddsp	lr,sp[0x1b0]

80004fc4 <clip>:


static float inline clip(float input_value, float clip_value) {
80004fc4:	eb cd 40 80 	pushm	r7,lr
80004fc8:	1a 97       	mov	r7,sp
80004fca:	20 2d       	sub	sp,8
80004fcc:	ef 4c ff fc 	st.w	r7[-4],r12
80004fd0:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
80004fd4:	30 18       	mov	r8,1
80004fd6:	ee fa ff fc 	ld.w	r10,r7[-4]
80004fda:	ee f9 ff f8 	ld.w	r9,r7[-8]
80004fde:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80004fe2:	e0 8c 00 04 	brvs	80004fea <clip+0x26>
80004fe6:	e0 89 00 03 	brgt	80004fec <clip+0x28>
80004fea:	30 08       	mov	r8,0
80004fec:	5c 58       	castu.b	r8
80004fee:	c0 40       	breq	80004ff6 <clip+0x32>
80004ff0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ff4:	c1 98       	rjmp	80005026 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
80004ff6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80004ffa:	10 9a       	mov	r10,r8
80004ffc:	ee 1a 80 00 	eorh	r10,0x8000
80005000:	30 18       	mov	r8,1
80005002:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005006:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000500a:	e0 8c 00 04 	brvs	80005012 <clip+0x4e>
8000500e:	e0 89 00 03 	brgt	80005014 <clip+0x50>
80005012:	30 08       	mov	r8,0
80005014:	5c 58       	castu.b	r8
80005016:	c0 60       	breq	80005022 <clip+0x5e>
80005018:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000501c:	ee 18 80 00 	eorh	r8,0x8000
80005020:	c0 38       	rjmp	80005026 <clip+0x62>
	return input_value;
80005022:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80005026:	10 9c       	mov	r12,r8
80005028:	2f ed       	sub	sp,-8
8000502a:	e3 cd 80 80 	ldm	sp++,r7,pc

8000502e <soft_zone>:


static float inline soft_zone(float x, float soft_zone_width) {
8000502e:	eb cd 40 e0 	pushm	r5-r7,lr
80005032:	1a 97       	mov	r7,sp
80005034:	20 2d       	sub	sp,8
80005036:	4a 16       	lddpc	r6,800050b8 <soft_zone+0x8a>
80005038:	1e 26       	rsub	r6,pc
8000503a:	ef 4c ff fc 	st.w	r7[-4],r12
8000503e:	ef 4b ff f8 	st.w	r7[-8],r11
	if (soft_zone_width<0.0000001) return x; 
80005042:	ee fc ff f8 	ld.w	r12,r7[-8]
80005046:	f0 16 00 02 	mcall	r6[8]
8000504a:	30 05       	mov	r5,0
8000504c:	e0 68 af 48 	mov	r8,44872
80005050:	ea 18 9a bc 	orh	r8,0x9abc
80005054:	e0 69 d7 f2 	mov	r9,55282
80005058:	ea 19 3e 7a 	orh	r9,0x3e7a
8000505c:	f0 16 00 1e 	mcall	r6[120]
80005060:	18 98       	mov	r8,r12
80005062:	58 08       	cp.w	r8,0
80005064:	c0 20       	breq	80005068 <soft_zone+0x3a>
80005066:	30 15       	mov	r5,1
80005068:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000506c:	c0 40       	breq	80005074 <soft_zone+0x46>
8000506e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005072:	c1 e8       	rjmp	800050ae <soft_zone+0x80>
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
80005074:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005078:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000507c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005080:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005084:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005088:	ee fa ff f8 	ld.w	r10,r7[-8]
8000508c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005090:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80005094:	ee fb ff fc 	ld.w	r11,r7[-4]
80005098:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000509c:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800050a0:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800050a4:	12 9b       	mov	r11,r9
800050a6:	10 9c       	mov	r12,r8
800050a8:	f0 16 00 0a 	mcall	r6[40]
800050ac:	18 98       	mov	r8,r12
	}
};
800050ae:	10 9c       	mov	r12,r8
800050b0:	2f ed       	sub	sp,-8
800050b2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800050b6:	00 00       	add	r0,r0
800050b8:	80 00       	ld.sh	r0,r0[0x0]
800050ba:	4e bc       	lddpc	r12,80005264 <differentiate+0x22>

800050bc <passthroughController>:
#include "time_keeper.h"

#include "pid_control.h"
#include "maths.h"

PID_Controller_t passthroughController() {
800050bc:	eb cd 40 e0 	pushm	r5-r7,lr
800050c0:	1a 97       	mov	r7,sp
800050c2:	21 1d       	sub	sp,68
800050c4:	49 e6       	lddpc	r6,8000513c <passthroughController+0x80>
800050c6:	1e 26       	rsub	r6,pc
800050c8:	18 95       	mov	r5,r12
	PID_Controller_t out;
	out.p_gain=1.0;
800050ca:	fc 18 3f 80 	movh	r8,0x3f80
800050ce:	ef 48 ff bc 	st.w	r7[-68],r8
	out.last_update=get_time_ticks();	
800050d2:	f0 16 00 2d 	mcall	r6[180]
800050d6:	18 98       	mov	r8,r12
800050d8:	ef 48 ff f4 	st.w	r7[-12],r8
	out.clip_min=-10000.0;
800050dc:	e0 68 40 00 	mov	r8,16384
800050e0:	ea 18 c6 1c 	orh	r8,0xc61c
800050e4:	ef 48 ff c0 	st.w	r7[-64],r8
	out.clip_max= 10000.0;
800050e8:	e0 68 40 00 	mov	r8,16384
800050ec:	ea 18 46 1c 	orh	r8,0x461c
800050f0:	ef 48 ff c4 	st.w	r7[-60],r8
	out.output=0.0;
800050f4:	30 08       	mov	r8,0
800050f6:	ef 48 ff ec 	st.w	r7[-20],r8
	out.soft_zone_width=0.0;
800050fa:	30 08       	mov	r8,0
800050fc:	ef 48 ff fc 	st.w	r7[-4],r8
	initDiff(&(out.differentiator), 0.0, 0.0, 0.0);
80005100:	ee c8 00 44 	sub	r8,r7,68
80005104:	2e 08       	sub	r8,-32
80005106:	30 09       	mov	r9,0
80005108:	30 0a       	mov	r10,0
8000510a:	30 0b       	mov	r11,0
8000510c:	10 9c       	mov	r12,r8
8000510e:	f0 16 00 51 	mcall	r6[324]
	initInt(&(out.integrator), 0.0, 0.0, 0.0);
80005112:	ee c8 00 44 	sub	r8,r7,68
80005116:	2f 48       	sub	r8,-12
80005118:	30 09       	mov	r9,0
8000511a:	30 0a       	mov	r10,0
8000511c:	30 0b       	mov	r11,0
8000511e:	10 9c       	mov	r12,r8
80005120:	f0 16 00 53 	mcall	r6[332]
	return out;
80005124:	0a 98       	mov	r8,r5
80005126:	ee c9 00 44 	sub	r9,r7,68
8000512a:	34 4a       	mov	r10,68
8000512c:	12 9b       	mov	r11,r9
8000512e:	10 9c       	mov	r12,r8
80005130:	f0 16 00 1b 	mcall	r6[108]
}
80005134:	0a 9c       	mov	r12,r5
80005136:	2e fd       	sub	sp,-68
80005138:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000513c:	80 00       	ld.sh	r0,r0[0x0]
8000513e:	4f 4a       	lddpc	r10,8000530c <pid_update+0x28>

80005140 <integrate>:




float integrate(Integrator_t *integrator, float input, float dt) {
80005140:	eb cd 40 c0 	pushm	r6-r7,lr
80005144:	1a 97       	mov	r7,sp
80005146:	20 3d       	sub	sp,12
80005148:	49 76       	lddpc	r6,800051a4 <integrate+0x64>
8000514a:	1e 26       	rsub	r6,pc
8000514c:	ef 4c ff fc 	st.w	r7[-4],r12
80005150:	ef 4b ff f8 	st.w	r7[-8],r11
80005154:	ef 4a ff f4 	st.w	r7[-12],r10

	integrator->accumulator=clip(integrator->accumulator+dt* integrator->pregain * input, integrator->clip);
80005158:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000515c:	70 39       	ld.w	r9,r8[0xc]
8000515e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005162:	70 2a       	ld.w	r10,r8[0x8]
80005164:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005168:	70 0b       	ld.w	r11,r8[0x0]
8000516a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000516e:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
80005172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005176:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000517a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
8000517e:	12 9b       	mov	r11,r9
80005180:	10 9c       	mov	r12,r8
80005182:	c2 1f       	rcall	80004fc4 <clip>
80005184:	18 99       	mov	r9,r12
80005186:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000518a:	91 29       	st.w	r8[0x8],r9
	return integrator->postgain* integrator->accumulator;
8000518c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005190:	70 19       	ld.w	r9,r8[0x4]
80005192:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005196:	70 28       	ld.w	r8,r8[0x8]
80005198:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44

}
8000519c:	10 9c       	mov	r12,r8
8000519e:	2f dd       	sub	sp,-12
800051a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800051a4:	80 00       	ld.sh	r0,r0[0x0]
800051a6:	4f ce       	lddpc	lr,80005394 <pid_update+0xb0>

800051a8 <initInt>:




void initInt(Integrator_t *integrator, float pregain, float postgain, float clip_val) {
800051a8:	eb cd 40 80 	pushm	r7,lr
800051ac:	1a 97       	mov	r7,sp
800051ae:	20 4d       	sub	sp,16
800051b0:	ef 4c ff fc 	st.w	r7[-4],r12
800051b4:	ef 4b ff f8 	st.w	r7[-8],r11
800051b8:	ef 4a ff f4 	st.w	r7[-12],r10
800051bc:	ef 49 ff f0 	st.w	r7[-16],r9
	integrator->pregain=pregain;
800051c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800051c8:	91 09       	st.w	r8[0x0],r9
	integrator->postgain=postgain;
800051ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800051d2:	91 19       	st.w	r8[0x4],r9
	integrator->clip=clip_val;
800051d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051d8:	ee f9 ff f0 	ld.w	r9,r7[-16]
800051dc:	91 39       	st.w	r8[0xc],r9
	integrator->accumulator=0.0;
800051de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051e2:	30 09       	mov	r9,0
800051e4:	91 29       	st.w	r8[0x8],r9

}
800051e6:	2f cd       	sub	sp,-16
800051e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800051ec <resetInt>:
void resetInt(Integrator_t *integrator) {
800051ec:	eb cd 40 80 	pushm	r7,lr
800051f0:	1a 97       	mov	r7,sp
800051f2:	20 1d       	sub	sp,4
800051f4:	ef 4c ff fc 	st.w	r7[-4],r12
	integrator->accumulator=0.0;
800051f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800051fc:	30 09       	mov	r9,0
800051fe:	91 29       	st.w	r8[0x8],r9
}
80005200:	2f fd       	sub	sp,-4
80005202:	e3 cd 80 80 	ldm	sp++,r7,pc

80005206 <initDiff>:

void initDiff(Differentiator_t *diff, float gain, float LPF, float clip_val) {
80005206:	eb cd 40 80 	pushm	r7,lr
8000520a:	1a 97       	mov	r7,sp
8000520c:	20 4d       	sub	sp,16
8000520e:	ef 4c ff fc 	st.w	r7[-4],r12
80005212:	ef 4b ff f8 	st.w	r7[-8],r11
80005216:	ef 4a ff f4 	st.w	r7[-12],r10
8000521a:	ef 49 ff f0 	st.w	r7[-16],r9
	diff->gain=gain;
8000521e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005222:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005226:	91 09       	st.w	r8[0x0],r9
	diff->LPF=LPF;
80005228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000522c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005230:	91 29       	st.w	r8[0x8],r9
	diff->clip=clip_val;
80005232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005236:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000523a:	91 39       	st.w	r8[0xc],r9
}
8000523c:	2f cd       	sub	sp,-16
8000523e:	e3 cd 80 80 	ldm	sp++,r7,pc

80005242 <differentiate>:

float differentiate(Differentiator_t *diff, float input, float dt) {
80005242:	eb cd 40 e0 	pushm	r5-r7,lr
80005246:	1a 97       	mov	r7,sp
80005248:	20 4d       	sub	sp,16
8000524a:	4a 66       	lddpc	r6,800052e0 <differentiate+0x9e>
8000524c:	1e 26       	rsub	r6,pc
8000524e:	ef 4c ff f8 	st.w	r7[-8],r12
80005252:	ef 4b ff f4 	st.w	r7[-12],r11
80005256:	ef 4a ff f0 	st.w	r7[-16],r10
	float output=0.0;
8000525a:	30 08       	mov	r8,0
8000525c:	ef 48 ff fc 	st.w	r7[-4],r8
	if (dt<0.000001) {
80005260:	ee fc ff f0 	ld.w	r12,r7[-16]
80005264:	f0 16 00 02 	mcall	r6[8]
80005268:	30 05       	mov	r5,0
8000526a:	e0 68 ed 8d 	mov	r8,60813
8000526e:	ea 18 a0 b5 	orh	r8,0xa0b5
80005272:	e0 69 c6 f7 	mov	r9,50935
80005276:	ea 19 3e b0 	orh	r9,0x3eb0
8000527a:	f0 16 00 1e 	mcall	r6[120]
8000527e:	18 98       	mov	r8,r12
80005280:	58 08       	cp.w	r8,0
80005282:	c0 20       	breq	80005286 <differentiate+0x44>
80005284:	30 15       	mov	r5,1
80005286:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000528a:	c0 50       	breq	80005294 <differentiate+0x52>
		output=0.0; 
8000528c:	30 08       	mov	r8,0
8000528e:	ef 48 ff fc 	st.w	r7[-4],r8
80005292:	c1 c8       	rjmp	800052ca <differentiate+0x88>
	} else {
		output=clip(diff->gain*(input - diff->previous)/dt, diff->clip);
80005294:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005298:	70 35       	ld.w	r5,r8[0xc]
8000529a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000529e:	70 09       	ld.w	r9,r8[0x0]
800052a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052a4:	70 18       	ld.w	r8,r8[0x4]
800052a6:	ee fa ff f4 	ld.w	r10,r7[-12]
800052aa:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800052ae:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800052b2:	ee fb ff f0 	ld.w	r11,r7[-16]
800052b6:	10 9c       	mov	r12,r8
800052b8:	f0 16 00 0a 	mcall	r6[40]
800052bc:	18 98       	mov	r8,r12
800052be:	0a 9b       	mov	r11,r5
800052c0:	10 9c       	mov	r12,r8
800052c2:	c8 1e       	rcall	80004fc4 <clip>
800052c4:	18 98       	mov	r8,r12
800052c6:	ef 48 ff fc 	st.w	r7[-4],r8
	}	
	//diff->previous=(1.0-(diff->LPF))*input + (diff->LPF) * (diff->previous);
	diff->previous=input;
800052ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800052ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800052d2:	91 19       	st.w	r8[0x4],r9
	return output;
800052d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800052d8:	10 9c       	mov	r12,r8
800052da:	2f cd       	sub	sp,-16
800052dc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800052e0:	80 00       	ld.sh	r0,r0[0x0]
800052e2:	50 d0       	stdsp	sp[0x34],r0

800052e4 <pid_update>:

float pid_update(PID_Controller_t* controller, float error) {
800052e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800052e8:	1a 97       	mov	r7,sp
800052ea:	20 3d       	sub	sp,12
800052ec:	4c 36       	lddpc	r6,800053f8 <pid_update+0x114>
800052ee:	1e 26       	rsub	r6,pc
800052f0:	ef 4c ff f8 	st.w	r7[-8],r12
800052f4:	ef 4b ff f4 	st.w	r7[-12],r11
	uint32_t t= get_time_ticks();
800052f8:	f0 16 00 2d 	mcall	r6[180]
800052fc:	18 98       	mov	r8,r12
800052fe:	ef 48 ff fc 	st.w	r7[-4],r8
	controller->error=soft_zone(error, controller->soft_zone_width);
80005302:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005306:	71 08       	ld.w	r8,r8[0x40]
80005308:	10 9b       	mov	r11,r8
8000530a:	ee fc ff f4 	ld.w	r12,r7[-12]
8000530e:	c9 0e       	rcall	8000502e <soft_zone>
80005310:	18 99       	mov	r9,r12
80005312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005316:	91 d9       	st.w	r8[0x34],r9
	controller->dt=ticks_to_seconds(t - controller->last_update);
80005318:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000531c:	70 e8       	ld.w	r8,r8[0x38]
8000531e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005322:	f2 08 01 08 	sub	r8,r9,r8
80005326:	10 9c       	mov	r12,r8
80005328:	f0 16 00 c0 	mcall	r6[768]
8000532c:	18 99       	mov	r9,r12
8000532e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005332:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=t;
80005334:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000533c:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
8000533e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005342:	70 05       	ld.w	r5,r8[0x0]
80005344:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005348:	70 d3       	ld.w	r3,r8[0x34]
8000534a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000534e:	70 fa       	ld.w	r10,r8[0x3c]
80005350:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005354:	70 d9       	ld.w	r9,r8[0x34]
80005356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000535a:	2f 48       	sub	r8,-12
8000535c:	12 9b       	mov	r11,r9
8000535e:	10 9c       	mov	r12,r8
80005360:	f0 16 00 e4 	mcall	r6[912]
80005364:	18 98       	mov	r8,r12
80005366:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
8000536a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000536e:	70 fa       	ld.w	r10,r8[0x3c]
80005370:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005374:	70 d9       	ld.w	r9,r8[0x34]
80005376:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000537a:	2e 08       	sub	r8,-32
8000537c:	12 9b       	mov	r11,r9
8000537e:	10 9c       	mov	r12,r8
80005380:	f0 16 01 12 	mcall	r6[1096]
80005384:	18 98       	mov	r8,r12
80005386:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
8000538a:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
8000538e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005392:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
80005394:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005398:	70 ca       	ld.w	r10,r8[0x30]
8000539a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000539e:	70 19       	ld.w	r9,r8[0x4]
800053a0:	30 18       	mov	r8,1
800053a2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053a6:	e0 8c 00 03 	brvs	800053ac <pid_update+0xc8>
800053aa:	c0 25       	brlt	800053ae <pid_update+0xca>
800053ac:	30 08       	mov	r8,0
800053ae:	5c 58       	castu.b	r8
800053b0:	c0 70       	breq	800053be <pid_update+0xda>
800053b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053b6:	70 19       	ld.w	r9,r8[0x4]
800053b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053bc:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800053be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c2:	70 ca       	ld.w	r10,r8[0x30]
800053c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053c8:	70 29       	ld.w	r9,r8[0x8]
800053ca:	30 18       	mov	r8,1
800053cc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800053d0:	e0 8c 00 04 	brvs	800053d8 <pid_update+0xf4>
800053d4:	e0 89 00 03 	brgt	800053da <pid_update+0xf6>
800053d8:	30 08       	mov	r8,0
800053da:	5c 58       	castu.b	r8
800053dc:	c0 70       	breq	800053ea <pid_update+0x106>
800053de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e2:	70 29       	ld.w	r9,r8[0x8]
800053e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053e8:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800053ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800053ee:	70 c8       	ld.w	r8,r8[0x30]
}
800053f0:	10 9c       	mov	r12,r8
800053f2:	2f dd       	sub	sp,-12
800053f4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800053f8:	80 00       	ld.sh	r0,r0[0x0]
800053fa:	51 72       	stdsp	sp[0x5c],r2

800053fc <pid_update_dt>:

float pid_update_dt(PID_Controller_t* controller, float error, float dt) {
800053fc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80005400:	1a 97       	mov	r7,sp
80005402:	20 3d       	sub	sp,12
80005404:	4b b6       	lddpc	r6,800054f0 <pid_update_dt+0xf4>
80005406:	1e 26       	rsub	r6,pc
80005408:	ef 4c ff fc 	st.w	r7[-4],r12
8000540c:	ef 4b ff f8 	st.w	r7[-8],r11
80005410:	ef 4a ff f4 	st.w	r7[-12],r10
	controller->error=error;
80005414:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005418:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000541c:	91 d9       	st.w	r8[0x34],r9
	controller->dt=dt;
8000541e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005422:	ee f9 ff f4 	ld.w	r9,r7[-12]
80005426:	91 f9       	st.w	r8[0x3c],r9
	controller->last_update=get_time_ticks();
80005428:	f0 16 00 2d 	mcall	r6[180]
8000542c:	18 99       	mov	r9,r12
8000542e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005432:	91 e9       	st.w	r8[0x38],r9
	
	controller->output = controller->p_gain* (controller->error +integrate(&controller->integrator, controller->error, controller->dt) + differentiate(&controller->differentiator, controller->error, controller->dt));
80005434:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005438:	70 05       	ld.w	r5,r8[0x0]
8000543a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000543e:	70 d3       	ld.w	r3,r8[0x34]
80005440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005444:	70 fa       	ld.w	r10,r8[0x3c]
80005446:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000544a:	70 d9       	ld.w	r9,r8[0x34]
8000544c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005450:	2f 48       	sub	r8,-12
80005452:	12 9b       	mov	r11,r9
80005454:	10 9c       	mov	r12,r8
80005456:	f0 16 00 e4 	mcall	r6[912]
8000545a:	18 98       	mov	r8,r12
8000545c:	e5 a0 03 38 	cop	cp0,cr3,cr3,cr8,0x40
80005460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005464:	70 fa       	ld.w	r10,r8[0x3c]
80005466:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000546a:	70 d9       	ld.w	r9,r8[0x34]
8000546c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005470:	2e 08       	sub	r8,-32
80005472:	12 9b       	mov	r11,r9
80005474:	10 9c       	mov	r12,r8
80005476:	f0 16 01 12 	mcall	r6[1096]
8000547a:	18 98       	mov	r8,r12
8000547c:	e5 a0 08 38 	cop	cp0,cr8,cr3,cr8,0x40
80005480:	e5 a2 09 58 	cop	cp0,cr9,cr5,cr8,0x44
80005484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005488:	91 c9       	st.w	r8[0x30],r9
	if (controller->output < controller->clip_min) controller->output=controller->clip_min;
8000548a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000548e:	70 ca       	ld.w	r10,r8[0x30]
80005490:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005494:	70 19       	ld.w	r9,r8[0x4]
80005496:	30 18       	mov	r8,1
80005498:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000549c:	e0 8c 00 03 	brvs	800054a2 <pid_update_dt+0xa6>
800054a0:	c0 25       	brlt	800054a4 <pid_update_dt+0xa8>
800054a2:	30 08       	mov	r8,0
800054a4:	5c 58       	castu.b	r8
800054a6:	c0 70       	breq	800054b4 <pid_update_dt+0xb8>
800054a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054ac:	70 19       	ld.w	r9,r8[0x4]
800054ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b2:	91 c9       	st.w	r8[0x30],r9
	if (controller->output > controller->clip_max) controller->output=controller->clip_max;
800054b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054b8:	70 ca       	ld.w	r10,r8[0x30]
800054ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054be:	70 29       	ld.w	r9,r8[0x8]
800054c0:	30 18       	mov	r8,1
800054c2:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800054c6:	e0 8c 00 04 	brvs	800054ce <pid_update_dt+0xd2>
800054ca:	e0 89 00 03 	brgt	800054d0 <pid_update_dt+0xd4>
800054ce:	30 08       	mov	r8,0
800054d0:	5c 58       	castu.b	r8
800054d2:	c0 70       	breq	800054e0 <pid_update_dt+0xe4>
800054d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054d8:	70 29       	ld.w	r9,r8[0x8]
800054da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054de:	91 c9       	st.w	r8[0x30],r9
	return controller->output;	
800054e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800054e4:	70 c8       	ld.w	r8,r8[0x30]
}
800054e6:	10 9c       	mov	r12,r8
800054e8:	2f dd       	sub	sp,-12
800054ea:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800054ee:	00 00       	add	r0,r0
800054f0:	80 00       	ld.sh	r0,r0[0x0]
800054f2:	52 8a       	stdsp	sp[0xa0],r10

800054f4 <calc_smaller_angle>:
#define SQR(in) \
		((in)*(in))



float static inline calc_smaller_angle(float angle) {
800054f4:	eb cd 40 e0 	pushm	r5-r7,lr
800054f8:	1a 97       	mov	r7,sp
800054fa:	20 2d       	sub	sp,8
800054fc:	4b 56       	lddpc	r6,800055d0 <calc_smaller_angle+0xdc>
800054fe:	1e 26       	rsub	r6,pc
80005500:	ef 4c ff f8 	st.w	r7[-8],r12
	float out=angle;
80005504:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005508:	ef 48 ff fc 	st.w	r7[-4],r8
	while (out<-PI) out+=2.0*PI;
8000550c:	c1 88       	rjmp	8000553c <calc_smaller_angle+0x48>
8000550e:	ee fc ff fc 	ld.w	r12,r7[-4]
80005512:	f0 16 00 02 	mcall	r6[8]
80005516:	e0 68 2d 18 	mov	r8,11544
8000551a:	ea 18 54 44 	orh	r8,0x5444
8000551e:	e0 69 21 fb 	mov	r9,8699
80005522:	ea 19 40 19 	orh	r9,0x4019
80005526:	f0 16 00 05 	mcall	r6[20]
8000552a:	14 98       	mov	r8,r10
8000552c:	16 99       	mov	r9,r11
8000552e:	10 9a       	mov	r10,r8
80005530:	12 9b       	mov	r11,r9
80005532:	f0 16 00 08 	mcall	r6[32]
80005536:	18 98       	mov	r8,r12
80005538:	ef 48 ff fc 	st.w	r7[-4],r8
8000553c:	ee fc ff fc 	ld.w	r12,r7[-4]
80005540:	f0 16 00 02 	mcall	r6[8]
80005544:	30 05       	mov	r5,0
80005546:	e0 68 2d 18 	mov	r8,11544
8000554a:	ea 18 54 44 	orh	r8,0x5444
8000554e:	e0 69 21 fb 	mov	r9,8699
80005552:	ea 19 c0 09 	orh	r9,0xc009
80005556:	f0 16 00 1e 	mcall	r6[120]
8000555a:	18 98       	mov	r8,r12
8000555c:	58 08       	cp.w	r8,0
8000555e:	c0 20       	breq	80005562 <calc_smaller_angle+0x6e>
80005560:	30 15       	mov	r5,1
80005562:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80005566:	cd 41       	brne	8000550e <calc_smaller_angle+0x1a>
	while (out>=PI) out-=2.0*PI;
80005568:	c1 88       	rjmp	80005598 <calc_smaller_angle+0xa4>
8000556a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000556e:	f0 16 00 02 	mcall	r6[8]
80005572:	e0 68 2d 18 	mov	r8,11544
80005576:	ea 18 54 44 	orh	r8,0x5444
8000557a:	e0 69 21 fb 	mov	r9,8699
8000557e:	ea 19 40 19 	orh	r9,0x4019
80005582:	f0 16 00 11 	mcall	r6[68]
80005586:	14 98       	mov	r8,r10
80005588:	16 99       	mov	r9,r11
8000558a:	10 9a       	mov	r10,r8
8000558c:	12 9b       	mov	r11,r9
8000558e:	f0 16 00 08 	mcall	r6[32]
80005592:	18 98       	mov	r8,r12
80005594:	ef 48 ff fc 	st.w	r7[-4],r8
80005598:	ee fc ff fc 	ld.w	r12,r7[-4]
8000559c:	f0 16 00 02 	mcall	r6[8]
800055a0:	30 05       	mov	r5,0
800055a2:	e0 68 2d 18 	mov	r8,11544
800055a6:	ea 18 54 44 	orh	r8,0x5444
800055aa:	e0 69 21 fb 	mov	r9,8699
800055ae:	ea 19 40 09 	orh	r9,0x4009
800055b2:	f0 16 00 80 	mcall	r6[512]
800055b6:	18 98       	mov	r8,r12
800055b8:	58 08       	cp.w	r8,0
800055ba:	c0 20       	breq	800055be <calc_smaller_angle+0xca>
800055bc:	30 15       	mov	r5,1
800055be:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
800055c2:	cd 41       	brne	8000556a <calc_smaller_angle+0x76>
	return out;
800055c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800055c8:	10 9c       	mov	r12,r8
800055ca:	2f ed       	sub	sp,-8
800055cc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800055d0:	80 00       	ld.sh	r0,r0[0x0]
800055d2:	53 82       	stdsp	sp[0xe0],r2

800055d4 <fast_sqrt>:
	
	return qtmp;
}

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
800055d4:	eb cd 40 c0 	pushm	r6-r7,lr
800055d8:	1a 97       	mov	r7,sp
800055da:	20 2d       	sub	sp,8
800055dc:	4b 26       	lddpc	r6,800056a4 <fast_sqrt+0xd0>
800055de:	1e 26       	rsub	r6,pc
800055e0:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
800055e4:	30 18       	mov	r8,1
800055e6:	ee fa ff f8 	ld.w	r10,r7[-8]
800055ea:	30 09       	mov	r9,0
800055ec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800055f0:	e0 8c 00 03 	brvs	800055f6 <fast_sqrt+0x22>
800055f4:	c0 25       	brlt	800055f8 <fast_sqrt+0x24>
800055f6:	30 08       	mov	r8,0
800055f8:	5c 58       	castu.b	r8
800055fa:	c0 30       	breq	80005600 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
800055fc:	30 08       	mov	r8,0
800055fe:	c4 f8       	rjmp	8000569c <fast_sqrt+0xc8>
	}
	float result=1.0;
80005600:	fc 18 3f 80 	movh	r8,0x3f80
80005604:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005608:	ee fb ff fc 	ld.w	r11,r7[-4]
8000560c:	ee fc ff f8 	ld.w	r12,r7[-8]
80005610:	f0 16 00 0a 	mcall	r6[40]
80005614:	18 98       	mov	r8,r12
80005616:	10 99       	mov	r9,r8
80005618:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000561c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005620:	fc 18 3f 00 	movh	r8,0x3f00
80005624:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005628:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000562c:	ee fb ff fc 	ld.w	r11,r7[-4]
80005630:	ee fc ff f8 	ld.w	r12,r7[-8]
80005634:	f0 16 00 0a 	mcall	r6[40]
80005638:	18 98       	mov	r8,r12
8000563a:	10 99       	mov	r9,r8
8000563c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005640:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005644:	fc 18 3f 00 	movh	r8,0x3f00
80005648:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000564c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005650:	ee fb ff fc 	ld.w	r11,r7[-4]
80005654:	ee fc ff f8 	ld.w	r12,r7[-8]
80005658:	f0 16 00 0a 	mcall	r6[40]
8000565c:	18 98       	mov	r8,r12
8000565e:	10 99       	mov	r9,r8
80005660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005664:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80005668:	fc 18 3f 00 	movh	r8,0x3f00
8000566c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005670:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
80005674:	ee fb ff fc 	ld.w	r11,r7[-4]
80005678:	ee fc ff f8 	ld.w	r12,r7[-8]
8000567c:	f0 16 00 0a 	mcall	r6[40]
80005680:	18 98       	mov	r8,r12
80005682:	10 99       	mov	r9,r8
80005684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005688:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000568c:	fc 18 3f 00 	movh	r8,0x3f00
80005690:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80005694:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
80005698:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000569c:	10 9c       	mov	r12,r8
8000569e:	2f ed       	sub	sp,-8
800056a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056a4:	80 00       	ld.sh	r0,r0[0x0]
800056a6:	54 62       	stdsp	sp[0x118],r2

800056a8 <sigmoid>:
	else {
		return (x*x*x/(SQR(soft_zone_width) + SQR(x)));
	}
};

static float inline sigmoid(float x) {
800056a8:	eb cd 40 c0 	pushm	r6-r7,lr
800056ac:	1a 97       	mov	r7,sp
800056ae:	20 1d       	sub	sp,4
800056b0:	48 e6       	lddpc	r6,800056e8 <sigmoid+0x40>
800056b2:	1e 26       	rsub	r6,pc
800056b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return (x/fast_sqrt(1+SQR(x)));
800056b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800056bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800056c0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800056c4:	fc 18 3f 80 	movh	r8,0x3f80
800056c8:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800056cc:	10 9c       	mov	r12,r8
800056ce:	c8 3f       	rcall	800055d4 <fast_sqrt>
800056d0:	18 98       	mov	r8,r12
800056d2:	10 9b       	mov	r11,r8
800056d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800056d8:	f0 16 00 0a 	mcall	r6[40]
800056dc:	18 98       	mov	r8,r12
};
800056de:	10 9c       	mov	r12,r8
800056e0:	2f fd       	sub	sp,-4
800056e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800056e6:	00 00       	add	r0,r0
800056e8:	80 00       	ld.sh	r0,r0[0x0]
800056ea:	55 36       	stdsp	sp[0x14c],r6

800056ec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800056ec:	eb cd 40 c0 	pushm	r6-r7,lr
800056f0:	1a 97       	mov	r7,sp
800056f2:	20 3d       	sub	sp,12
800056f4:	49 06       	lddpc	r6,80005734 <mav_array_memcpy+0x48>
800056f6:	1e 26       	rsub	r6,pc
800056f8:	ef 4c ff fc 	st.w	r7[-4],r12
800056fc:	ef 4b ff f8 	st.w	r7[-8],r11
80005700:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80005704:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005708:	58 08       	cp.w	r8,0
8000570a:	c0 91       	brne	8000571c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000570c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005710:	30 0b       	mov	r11,0
80005712:	ee fc ff fc 	ld.w	r12,r7[-4]
80005716:	f0 16 00 31 	mcall	r6[196]
8000571a:	c0 98       	rjmp	8000572c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000571c:	ee fa ff f4 	ld.w	r10,r7[-12]
80005720:	ee fb ff f8 	ld.w	r11,r7[-8]
80005724:	ee fc ff fc 	ld.w	r12,r7[-4]
80005728:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000572c:	2f dd       	sub	sp,-12
8000572e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005732:	00 00       	add	r0,r0
80005734:	80 00       	ld.sh	r0,r0[0x0]
80005736:	55 7a       	stdsp	sp[0x15c],r10

80005738 <get_rate_stabiliser>:
Stabiliser_t rate_stabiliser, attitude_stabiliser, velocity_stabiliser;
float yaw_coordination_velocity;

central_data_t *centralData;

Stabiliser_t* get_rate_stabiliser() { return &rate_stabiliser;}
80005738:	eb cd 40 c0 	pushm	r6-r7,lr
8000573c:	1a 97       	mov	r7,sp
8000573e:	48 46       	lddpc	r6,8000574c <get_rate_stabiliser+0x14>
80005740:	1e 26       	rsub	r6,pc
80005742:	ec f8 02 74 	ld.w	r8,r6[628]
80005746:	10 9c       	mov	r12,r8
80005748:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000574c:	80 00       	ld.sh	r0,r0[0x0]
8000574e:	55 c4       	stdsp	sp[0x170],r4

80005750 <get_attitude_stabiliser>:
Stabiliser_t* get_attitude_stabiliser() { return &attitude_stabiliser;}
80005750:	eb cd 40 c0 	pushm	r6-r7,lr
80005754:	1a 97       	mov	r7,sp
80005756:	48 46       	lddpc	r6,80005764 <get_attitude_stabiliser+0x14>
80005758:	1e 26       	rsub	r6,pc
8000575a:	ec f8 02 44 	ld.w	r8,r6[580]
8000575e:	10 9c       	mov	r12,r8
80005760:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005764:	80 00       	ld.sh	r0,r0[0x0]
80005766:	55 dc       	stdsp	sp[0x174],r12

80005768 <get_velocity_stabiliser>:
Stabiliser_t* get_velocity_stabiliser() { return &velocity_stabiliser;}
80005768:	eb cd 40 c0 	pushm	r6-r7,lr
8000576c:	1a 97       	mov	r7,sp
8000576e:	48 46       	lddpc	r6,8000577c <get_velocity_stabiliser+0x14>
80005770:	1e 26       	rsub	r6,pc
80005772:	ec f8 01 6c 	ld.w	r8,r6[364]
80005776:	10 9c       	mov	r12,r8
80005778:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000577c:	80 00       	ld.sh	r0,r0[0x0]
8000577e:	55 f4       	stdsp	sp[0x17c],r4

80005780 <init_rate_stabilisation>:

void init_rate_stabilisation(Stabiliser_t *stabiliser) {
80005780:	eb cd 40 e0 	pushm	r5-r7,lr
80005784:	1a 97       	mov	r7,sp
80005786:	21 3d       	sub	sp,76
80005788:	fe f6 02 34 	ld.w	r6,pc[564]
8000578c:	1e 26       	rsub	r6,pc
8000578e:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
80005792:	30 08       	mov	r8,0
80005794:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005798:	30 08       	mov	r8,0
8000579a:	ef 48 ff fc 	st.w	r7[-4],r8
8000579e:	c7 d8       	rjmp	80005898 <init_rate_stabilisation+0x118>
		(stabiliser->rpy_controller[i]).p_gain=0.15;
800057a0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057a4:	ee fa ff f8 	ld.w	r10,r7[-8]
800057a8:	12 98       	mov	r8,r9
800057aa:	a5 68       	lsl	r8,0x4
800057ac:	12 08       	add	r8,r9
800057ae:	a3 68       	lsl	r8,0x2
800057b0:	f4 08 00 08 	add	r8,r10,r8
800057b4:	e0 69 99 9a 	mov	r9,39322
800057b8:	ea 19 3e 19 	orh	r9,0x3e19
800057bc:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
800057be:	ee f5 ff fc 	ld.w	r5,r7[-4]
800057c2:	f0 16 00 2d 	mcall	r6[180]
800057c6:	18 99       	mov	r9,r12
800057c8:	ee fa ff f8 	ld.w	r10,r7[-8]
800057cc:	0a 98       	mov	r8,r5
800057ce:	a5 68       	lsl	r8,0x4
800057d0:	0a 08       	add	r8,r5
800057d2:	a3 68       	lsl	r8,0x2
800057d4:	f4 08 00 08 	add	r8,r10,r8
800057d8:	2c 88       	sub	r8,-56
800057da:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-0.9;
800057dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800057e4:	12 98       	mov	r8,r9
800057e6:	a5 68       	lsl	r8,0x4
800057e8:	12 08       	add	r8,r9
800057ea:	2f f8       	sub	r8,-1
800057ec:	e0 69 66 66 	mov	r9,26214
800057f0:	ea 19 bf 66 	orh	r9,0xbf66
800057f4:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 0.9;
800057f8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800057fc:	ee fa ff f8 	ld.w	r10,r7[-8]
80005800:	12 98       	mov	r8,r9
80005802:	a5 68       	lsl	r8,0x4
80005804:	12 08       	add	r8,r9
80005806:	a3 68       	lsl	r8,0x2
80005808:	f4 08 00 08 	add	r8,r10,r8
8000580c:	2f 88       	sub	r8,-8
8000580e:	e0 69 66 66 	mov	r9,26214
80005812:	ea 19 3f 66 	orh	r9,0x3f66
80005816:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005818:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000581c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005820:	12 98       	mov	r8,r9
80005822:	a5 68       	lsl	r8,0x4
80005824:	12 08       	add	r8,r9
80005826:	a3 68       	lsl	r8,0x2
80005828:	f4 08 00 08 	add	r8,r10,r8
8000582c:	2c 08       	sub	r8,-64
8000582e:	30 09       	mov	r9,0
80005830:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
80005832:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005836:	12 98       	mov	r8,r9
80005838:	a5 68       	lsl	r8,0x4
8000583a:	12 08       	add	r8,r9
8000583c:	a3 68       	lsl	r8,0x2
8000583e:	2e 08       	sub	r8,-32
80005840:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005844:	f2 08 00 08 	add	r8,r9,r8
80005848:	fc 19 3f 00 	movh	r9,0x3f00
8000584c:	e0 6a cc cd 	mov	r10,52429
80005850:	ea 1a 3e cc 	orh	r10,0x3ecc
80005854:	e0 6b cc cd 	mov	r11,52429
80005858:	ea 1b 3e 4c 	orh	r11,0x3e4c
8000585c:	10 9c       	mov	r12,r8
8000585e:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
80005862:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005866:	12 98       	mov	r8,r9
80005868:	a5 68       	lsl	r8,0x4
8000586a:	12 08       	add	r8,r9
8000586c:	a3 68       	lsl	r8,0x2
8000586e:	2f 48       	sub	r8,-12
80005870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005874:	f2 08 00 08 	add	r8,r9,r8
80005878:	e0 69 66 66 	mov	r9,26214
8000587c:	ea 19 3f 26 	orh	r9,0x3f26
80005880:	fc 1a 3f 80 	movh	r10,0x3f80
80005884:	fc 1b 3f 00 	movh	r11,0x3f00
80005888:	10 9c       	mov	r12,r8
8000588a:	f0 16 00 53 	mcall	r6[332]
Stabiliser_t* get_velocity_stabiliser() { return &velocity_stabiliser;}

void init_rate_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
8000588e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005892:	2f f8       	sub	r8,-1
80005894:	ef 48 ff fc 	st.w	r7[-4],r8
80005898:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000589c:	58 18       	cp.w	r8,1
8000589e:	fe 9a ff 81 	brle	800057a0 <init_rate_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.2, 0.4, 0.5);
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 1.0, 0.65);
	}	
	// initialise yaw controller
	i=2;
800058a2:	30 28       	mov	r8,2
800058a4:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=0.4;
800058a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058ac:	ee fa ff f8 	ld.w	r10,r7[-8]
800058b0:	12 98       	mov	r8,r9
800058b2:	a5 68       	lsl	r8,0x4
800058b4:	12 08       	add	r8,r9
800058b6:	a3 68       	lsl	r8,0x2
800058b8:	f4 08 00 08 	add	r8,r10,r8
800058bc:	e0 69 cc cd 	mov	r9,52429
800058c0:	ea 19 3e cc 	orh	r9,0x3ecc
800058c4:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
800058c6:	ee f5 ff fc 	ld.w	r5,r7[-4]
800058ca:	f0 16 00 2d 	mcall	r6[180]
800058ce:	18 99       	mov	r9,r12
800058d0:	ee fa ff f8 	ld.w	r10,r7[-8]
800058d4:	0a 98       	mov	r8,r5
800058d6:	a5 68       	lsl	r8,0x4
800058d8:	0a 08       	add	r8,r5
800058da:	a3 68       	lsl	r8,0x2
800058dc:	f4 08 00 08 	add	r8,r10,r8
800058e0:	2c 88       	sub	r8,-56
800058e2:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-0.9;
800058e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800058e8:	ee fa ff f8 	ld.w	r10,r7[-8]
800058ec:	12 98       	mov	r8,r9
800058ee:	a5 68       	lsl	r8,0x4
800058f0:	12 08       	add	r8,r9
800058f2:	2f f8       	sub	r8,-1
800058f4:	e0 69 66 66 	mov	r9,26214
800058f8:	ea 19 bf 66 	orh	r9,0xbf66
800058fc:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 0.9;
80005900:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005904:	ee fa ff f8 	ld.w	r10,r7[-8]
80005908:	12 98       	mov	r8,r9
8000590a:	a5 68       	lsl	r8,0x4
8000590c:	12 08       	add	r8,r9
8000590e:	a3 68       	lsl	r8,0x2
80005910:	f4 08 00 08 	add	r8,r10,r8
80005914:	2f 88       	sub	r8,-8
80005916:	e0 69 66 66 	mov	r9,26214
8000591a:	ea 19 3f 66 	orh	r9,0x3f66
8000591e:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005920:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005924:	ee fa ff f8 	ld.w	r10,r7[-8]
80005928:	12 98       	mov	r8,r9
8000592a:	a5 68       	lsl	r8,0x4
8000592c:	12 08       	add	r8,r9
8000592e:	a3 68       	lsl	r8,0x2
80005930:	f4 08 00 08 	add	r8,r10,r8
80005934:	2c 08       	sub	r8,-64
80005936:	30 09       	mov	r9,0
80005938:	91 09       	st.w	r8[0x0],r9
	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.4, 0.5);
8000593a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000593e:	12 98       	mov	r8,r9
80005940:	a5 68       	lsl	r8,0x4
80005942:	12 08       	add	r8,r9
80005944:	a3 68       	lsl	r8,0x2
80005946:	2e 08       	sub	r8,-32
80005948:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000594c:	f2 08 00 08 	add	r8,r9,r8
80005950:	fc 19 3f 00 	movh	r9,0x3f00
80005954:	e0 6a cc cd 	mov	r10,52429
80005958:	ea 1a 3e cc 	orh	r10,0x3ecc
8000595c:	30 0b       	mov	r11,0
8000595e:	10 9c       	mov	r12,r8
80005960:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.5, 0.2, 0.1);
80005964:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005968:	12 98       	mov	r8,r9
8000596a:	a5 68       	lsl	r8,0x4
8000596c:	12 08       	add	r8,r9
8000596e:	a3 68       	lsl	r8,0x2
80005970:	2f 48       	sub	r8,-12
80005972:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005976:	f2 08 00 08 	add	r8,r9,r8
8000597a:	e0 69 cc cd 	mov	r9,52429
8000597e:	ea 19 3d cc 	orh	r9,0x3dcc
80005982:	e0 6a cc cd 	mov	r10,52429
80005986:	ea 1a 3e 4c 	orh	r10,0x3e4c
8000598a:	fc 1b 3f 00 	movh	r11,0x3f00
8000598e:	10 9c       	mov	r12,r8
80005990:	f0 16 00 53 	mcall	r6[332]
	
	// initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
80005994:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005998:	ee c8 00 4c 	sub	r8,r7,76
8000599c:	10 9c       	mov	r12,r8
8000599e:	f0 16 00 d8 	mcall	r6[864]
800059a2:	ea c8 ff 34 	sub	r8,r5,-204
800059a6:	ee c9 00 4c 	sub	r9,r7,76
800059aa:	34 4a       	mov	r10,68
800059ac:	12 9b       	mov	r11,r9
800059ae:	10 9c       	mov	r12,r8
800059b0:	f0 16 00 1b 	mcall	r6[108]
}
800059b4:	2e dd       	sub	sp,-76
800059b6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800059ba:	00 00       	add	r0,r0
800059bc:	80 00       	ld.sh	r0,r0[0x0]
800059be:	56 10       	stdsp	sp[0x184],r0

800059c0 <init_angle_stabilisation>:

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
800059c0:	eb cd 40 e0 	pushm	r5-r7,lr
800059c4:	1a 97       	mov	r7,sp
800059c6:	21 3d       	sub	sp,76
800059c8:	fe f6 02 00 	ld.w	r6,pc[512]
800059cc:	1e 26       	rsub	r6,pc
800059ce:	ef 4c ff f8 	st.w	r7[-8],r12
	int i=0;
800059d2:	30 08       	mov	r8,0
800059d4:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
800059d8:	30 08       	mov	r8,0
800059da:	ef 48 ff fc 	st.w	r7[-4],r8
800059de:	c7 38       	rjmp	80005ac4 <init_angle_stabilisation+0x104>
		(stabiliser->rpy_controller[i]).p_gain=1.5;
800059e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800059e4:	ee fa ff f8 	ld.w	r10,r7[-8]
800059e8:	12 98       	mov	r8,r9
800059ea:	a5 68       	lsl	r8,0x4
800059ec:	12 08       	add	r8,r9
800059ee:	a3 68       	lsl	r8,0x2
800059f0:	f4 08 00 08 	add	r8,r10,r8
800059f4:	fc 19 3f c0 	movh	r9,0x3fc0
800059f8:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).last_update=get_time_ticks();	
800059fa:	ee f5 ff fc 	ld.w	r5,r7[-4]
800059fe:	f0 16 00 2d 	mcall	r6[180]
80005a02:	18 99       	mov	r9,r12
80005a04:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a08:	0a 98       	mov	r8,r5
80005a0a:	a5 68       	lsl	r8,0x4
80005a0c:	0a 08       	add	r8,r5
80005a0e:	a3 68       	lsl	r8,0x2
80005a10:	f4 08 00 08 	add	r8,r10,r8
80005a14:	2c 88       	sub	r8,-56
80005a16:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).clip_min=-1.2;
80005a18:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a1c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a20:	12 98       	mov	r8,r9
80005a22:	a5 68       	lsl	r8,0x4
80005a24:	12 08       	add	r8,r9
80005a26:	2f f8       	sub	r8,-1
80005a28:	e0 69 99 9a 	mov	r9,39322
80005a2c:	ea 19 bf 99 	orh	r9,0xbf99
80005a30:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
		(stabiliser->rpy_controller[i]).clip_max= 1.2;
80005a34:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a38:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a3c:	12 98       	mov	r8,r9
80005a3e:	a5 68       	lsl	r8,0x4
80005a40:	12 08       	add	r8,r9
80005a42:	a3 68       	lsl	r8,0x2
80005a44:	f4 08 00 08 	add	r8,r10,r8
80005a48:	2f 88       	sub	r8,-8
80005a4a:	e0 69 99 9a 	mov	r9,39322
80005a4e:	ea 19 3f 99 	orh	r9,0x3f99
80005a52:	91 09       	st.w	r8[0x0],r9
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005a54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a58:	ee fa ff f8 	ld.w	r10,r7[-8]
80005a5c:	12 98       	mov	r8,r9
80005a5e:	a5 68       	lsl	r8,0x4
80005a60:	12 08       	add	r8,r9
80005a62:	a3 68       	lsl	r8,0x2
80005a64:	f4 08 00 08 	add	r8,r10,r8
80005a68:	2c 08       	sub	r8,-64
80005a6a:	30 09       	mov	r9,0
80005a6c:	91 09       	st.w	r8[0x0],r9
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
80005a6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a72:	12 98       	mov	r8,r9
80005a74:	a5 68       	lsl	r8,0x4
80005a76:	12 08       	add	r8,r9
80005a78:	a3 68       	lsl	r8,0x2
80005a7a:	2e 08       	sub	r8,-32
80005a7c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005a80:	f2 08 00 08 	add	r8,r9,r8
80005a84:	e0 69 cc cd 	mov	r9,52429
80005a88:	ea 19 3d cc 	orh	r9,0x3dcc
80005a8c:	fc 1a 3f 00 	movh	r10,0x3f00
80005a90:	30 0b       	mov	r11,0
80005a92:	10 9c       	mov	r12,r8
80005a94:	f0 16 00 51 	mcall	r6[324]
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
80005a98:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005a9c:	12 98       	mov	r8,r9
80005a9e:	a5 68       	lsl	r8,0x4
80005aa0:	12 08       	add	r8,r9
80005aa2:	a3 68       	lsl	r8,0x2
80005aa4:	2f 48       	sub	r8,-12
80005aa6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005aaa:	f2 08 00 08 	add	r8,r9,r8
80005aae:	30 09       	mov	r9,0
80005ab0:	30 0a       	mov	r10,0
80005ab2:	30 0b       	mov	r11,0
80005ab4:	10 9c       	mov	r12,r8
80005ab6:	f0 16 00 53 	mcall	r6[332]
}

void init_angle_stabilisation(Stabiliser_t *stabiliser) {
	int i=0;
	// initialise roll and pitch controllers
	for (i=0; i<2; i++) {
80005aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005abe:	2f f8       	sub	r8,-1
80005ac0:	ef 48 ff fc 	st.w	r7[-4],r8
80005ac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80005ac8:	58 18       	cp.w	r8,1
80005aca:	fe 9a ff 8b 	brle	800059e0 <init_angle_stabilisation+0x20>
		(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
		initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.00, 0.5, 0.1); // 0.05, 0.5, 0.05
		initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
	}	
	// initialise yaw controller
	i=2;
80005ace:	30 28       	mov	r8,2
80005ad0:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller)[i].p_gain=1.5;
80005ad4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ad8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005adc:	12 98       	mov	r8,r9
80005ade:	a5 68       	lsl	r8,0x4
80005ae0:	12 08       	add	r8,r9
80005ae2:	a3 68       	lsl	r8,0x2
80005ae4:	f4 08 00 08 	add	r8,r10,r8
80005ae8:	fc 19 3f c0 	movh	r9,0x3fc0
80005aec:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].last_update=get_time_ticks();	
80005aee:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005af2:	f0 16 00 2d 	mcall	r6[180]
80005af6:	18 99       	mov	r9,r12
80005af8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005afc:	0a 98       	mov	r8,r5
80005afe:	a5 68       	lsl	r8,0x4
80005b00:	0a 08       	add	r8,r5
80005b02:	a3 68       	lsl	r8,0x2
80005b04:	f4 08 00 08 	add	r8,r10,r8
80005b08:	2c 88       	sub	r8,-56
80005b0a:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller)[i].clip_min=-1.0;
80005b0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b10:	ee fa ff f8 	ld.w	r10,r7[-8]
80005b14:	12 98       	mov	r8,r9
80005b16:	a5 68       	lsl	r8,0x4
80005b18:	12 08       	add	r8,r9
80005b1a:	2f f8       	sub	r8,-1
80005b1c:	fc 19 bf 80 	movh	r9,0xbf80
80005b20:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller)[i].clip_max= 1.0;
80005b24:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b28:	ee fa ff f8 	ld.w	r10,r7[-8]
80005b2c:	12 98       	mov	r8,r9
80005b2e:	a5 68       	lsl	r8,0x4
80005b30:	12 08       	add	r8,r9
80005b32:	a3 68       	lsl	r8,0x2
80005b34:	f4 08 00 08 	add	r8,r10,r8
80005b38:	2f 88       	sub	r8,-8
80005b3a:	fc 19 3f 80 	movh	r9,0x3f80
80005b3e:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.0;
80005b40:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b44:	ee fa ff f8 	ld.w	r10,r7[-8]
80005b48:	12 98       	mov	r8,r9
80005b4a:	a5 68       	lsl	r8,0x4
80005b4c:	12 08       	add	r8,r9
80005b4e:	a3 68       	lsl	r8,0x2
80005b50:	f4 08 00 08 	add	r8,r10,r8
80005b54:	2c 08       	sub	r8,-64
80005b56:	30 09       	mov	r9,0
80005b58:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5);
80005b5a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b5e:	12 98       	mov	r8,r9
80005b60:	a5 68       	lsl	r8,0x4
80005b62:	12 08       	add	r8,r9
80005b64:	a3 68       	lsl	r8,0x2
80005b66:	2e 08       	sub	r8,-32
80005b68:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b6c:	f2 08 00 08 	add	r8,r9,r8
80005b70:	fc 19 3f 00 	movh	r9,0x3f00
80005b74:	fc 1a 3f 00 	movh	r10,0x3f00
80005b78:	30 0b       	mov	r11,0
80005b7a:	10 9c       	mov	r12,r8
80005b7c:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.0);
80005b80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005b84:	12 98       	mov	r8,r9
80005b86:	a5 68       	lsl	r8,0x4
80005b88:	12 08       	add	r8,r9
80005b8a:	a3 68       	lsl	r8,0x2
80005b8c:	2f 48       	sub	r8,-12
80005b8e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005b92:	f2 08 00 08 	add	r8,r9,r8
80005b96:	30 09       	mov	r9,0
80005b98:	30 0a       	mov	r10,0
80005b9a:	30 0b       	mov	r11,0
80005b9c:	10 9c       	mov	r12,r8
80005b9e:	f0 16 00 53 	mcall	r6[332]

	//initialise thrust controller
	stabiliser->thrust_controller=passthroughController();
80005ba2:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005ba6:	ee c8 00 4c 	sub	r8,r7,76
80005baa:	10 9c       	mov	r12,r8
80005bac:	f0 16 00 d8 	mcall	r6[864]
80005bb0:	ea c8 ff 34 	sub	r8,r5,-204
80005bb4:	ee c9 00 4c 	sub	r9,r7,76
80005bb8:	34 4a       	mov	r10,68
80005bba:	12 9b       	mov	r11,r9
80005bbc:	10 9c       	mov	r12,r8
80005bbe:	f0 16 00 1b 	mcall	r6[108]
	
}
80005bc2:	2e dd       	sub	sp,-76
80005bc4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005bc8:	80 00       	ld.sh	r0,r0[0x0]
80005bca:	58 50       	cp.w	r0,5

80005bcc <init_velocity_stabilisation>:

void init_velocity_stabilisation(Stabiliser_t * stabiliser) {
80005bcc:	eb cd 40 e0 	pushm	r5-r7,lr
80005bd0:	1a 97       	mov	r7,sp
80005bd2:	21 3d       	sub	sp,76
80005bd4:	fe f6 02 80 	ld.w	r6,pc[640]
80005bd8:	1e 26       	rsub	r6,pc
80005bda:	ef 4c ff f8 	st.w	r7[-8],r12
	int i = 0;
80005bde:	30 08       	mov	r8,0
80005be0:	ef 48 ff fc 	st.w	r7[-4],r8
	// initialise roll velocity
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
80005be4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005be8:	ee fa ff f8 	ld.w	r10,r7[-8]
80005bec:	12 98       	mov	r8,r9
80005bee:	a5 68       	lsl	r8,0x4
80005bf0:	12 08       	add	r8,r9
80005bf2:	a3 68       	lsl	r8,0x2
80005bf4:	f4 08 00 08 	add	r8,r10,r8
80005bf8:	e0 69 cc cd 	mov	r9,52429
80005bfc:	ea 19 3e 4c 	orh	r9,0x3e4c
80005c00:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
80005c02:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005c06:	f0 16 00 2d 	mcall	r6[180]
80005c0a:	18 99       	mov	r9,r12
80005c0c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c10:	0a 98       	mov	r8,r5
80005c12:	a5 68       	lsl	r8,0x4
80005c14:	0a 08       	add	r8,r5
80005c16:	a3 68       	lsl	r8,0x2
80005c18:	f4 08 00 08 	add	r8,r10,r8
80005c1c:	2c 88       	sub	r8,-56
80005c1e:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
80005c20:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c24:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c28:	12 98       	mov	r8,r9
80005c2a:	a5 68       	lsl	r8,0x4
80005c2c:	12 08       	add	r8,r9
80005c2e:	2f f8       	sub	r8,-1
80005c30:	fc 19 bf 00 	movh	r9,0xbf00
80005c34:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
80005c38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c3c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c40:	12 98       	mov	r8,r9
80005c42:	a5 68       	lsl	r8,0x4
80005c44:	12 08       	add	r8,r9
80005c46:	a3 68       	lsl	r8,0x2
80005c48:	f4 08 00 08 	add	r8,r10,r8
80005c4c:	2f 88       	sub	r8,-8
80005c4e:	fc 19 3f 00 	movh	r9,0x3f00
80005c52:	91 09       	st.w	r8[0x0],r9
	
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
80005c54:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c58:	ee fa ff f8 	ld.w	r10,r7[-8]
80005c5c:	12 98       	mov	r8,r9
80005c5e:	a5 68       	lsl	r8,0x4
80005c60:	12 08       	add	r8,r9
80005c62:	a3 68       	lsl	r8,0x2
80005c64:	f4 08 00 08 	add	r8,r10,r8
80005c68:	2c 08       	sub	r8,-64
80005c6a:	e0 69 99 9a 	mov	r9,39322
80005c6e:	ea 19 3e 99 	orh	r9,0x3e99
80005c72:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
80005c74:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c78:	12 98       	mov	r8,r9
80005c7a:	a5 68       	lsl	r8,0x4
80005c7c:	12 08       	add	r8,r9
80005c7e:	a3 68       	lsl	r8,0x2
80005c80:	2e 08       	sub	r8,-32
80005c82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005c86:	f2 08 00 08 	add	r8,r9,r8
80005c8a:	fc 19 3f 00 	movh	r9,0x3f00
80005c8e:	fc 1a 3f 00 	movh	r10,0x3f00
80005c92:	30 0b       	mov	r11,0
80005c94:	10 9c       	mov	r12,r8
80005c96:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
80005c9a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005c9e:	12 98       	mov	r8,r9
80005ca0:	a5 68       	lsl	r8,0x4
80005ca2:	12 08       	add	r8,r9
80005ca4:	a3 68       	lsl	r8,0x2
80005ca6:	2f 48       	sub	r8,-12
80005ca8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005cac:	f2 08 00 08 	add	r8,r9,r8
80005cb0:	e0 69 99 9a 	mov	r9,39322
80005cb4:	ea 19 3e 99 	orh	r9,0x3e99
80005cb8:	30 0a       	mov	r10,0
80005cba:	30 0b       	mov	r11,0
80005cbc:	10 9c       	mov	r12,r8
80005cbe:	f0 16 00 53 	mcall	r6[332]
	
	// initialise pitch velocity
	i = 1;
80005cc2:	30 18       	mov	r8,1
80005cc4:	ef 48 ff fc 	st.w	r7[-4],r8
	(stabiliser->rpy_controller[i]).p_gain=0.2; //0.1
80005cc8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005ccc:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cd0:	12 98       	mov	r8,r9
80005cd2:	a5 68       	lsl	r8,0x4
80005cd4:	12 08       	add	r8,r9
80005cd6:	a3 68       	lsl	r8,0x2
80005cd8:	f4 08 00 08 	add	r8,r10,r8
80005cdc:	e0 69 cc cd 	mov	r9,52429
80005ce0:	ea 19 3e 4c 	orh	r9,0x3e4c
80005ce4:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).last_update=get_time_ticks();
80005ce6:	ee f5 ff fc 	ld.w	r5,r7[-4]
80005cea:	f0 16 00 2d 	mcall	r6[180]
80005cee:	18 99       	mov	r9,r12
80005cf0:	ee fa ff f8 	ld.w	r10,r7[-8]
80005cf4:	0a 98       	mov	r8,r5
80005cf6:	a5 68       	lsl	r8,0x4
80005cf8:	0a 08       	add	r8,r5
80005cfa:	a3 68       	lsl	r8,0x2
80005cfc:	f4 08 00 08 	add	r8,r10,r8
80005d00:	2c 88       	sub	r8,-56
80005d02:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).clip_min=-0.5; //-0.6
80005d04:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d08:	ee fa ff f8 	ld.w	r10,r7[-8]
80005d0c:	12 98       	mov	r8,r9
80005d0e:	a5 68       	lsl	r8,0x4
80005d10:	12 08       	add	r8,r9
80005d12:	2f f8       	sub	r8,-1
80005d14:	fc 19 bf 00 	movh	r9,0xbf00
80005d18:	f4 08 09 29 	st.w	r10[r8<<0x2],r9
	(stabiliser->rpy_controller[i]).clip_max= 0.5; //0.6
80005d1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d20:	ee fa ff f8 	ld.w	r10,r7[-8]
80005d24:	12 98       	mov	r8,r9
80005d26:	a5 68       	lsl	r8,0x4
80005d28:	12 08       	add	r8,r9
80005d2a:	a3 68       	lsl	r8,0x2
80005d2c:	f4 08 00 08 	add	r8,r10,r8
80005d30:	2f 88       	sub	r8,-8
80005d32:	fc 19 3f 00 	movh	r9,0x3f00
80005d36:	91 09       	st.w	r8[0x0],r9
	(stabiliser->rpy_controller[i]).soft_zone_width=0.3; //region of lowered error input gain to ignore noise close to target point
80005d38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d3c:	ee fa ff f8 	ld.w	r10,r7[-8]
80005d40:	12 98       	mov	r8,r9
80005d42:	a5 68       	lsl	r8,0x4
80005d44:	12 08       	add	r8,r9
80005d46:	a3 68       	lsl	r8,0x2
80005d48:	f4 08 00 08 	add	r8,r10,r8
80005d4c:	2c 08       	sub	r8,-64
80005d4e:	e0 69 99 9a 	mov	r9,39322
80005d52:	ea 19 3e 99 	orh	r9,0x3e99
80005d56:	91 09       	st.w	r8[0x0],r9

	initDiff(&((stabiliser->rpy_controller)[i].differentiator), 0.0, 0.5, 0.5); // 0.1 0.5 0.5
80005d58:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d5c:	12 98       	mov	r8,r9
80005d5e:	a5 68       	lsl	r8,0x4
80005d60:	12 08       	add	r8,r9
80005d62:	a3 68       	lsl	r8,0x2
80005d64:	2e 08       	sub	r8,-32
80005d66:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d6a:	f2 08 00 08 	add	r8,r9,r8
80005d6e:	fc 19 3f 00 	movh	r9,0x3f00
80005d72:	fc 1a 3f 00 	movh	r10,0x3f00
80005d76:	30 0b       	mov	r11,0
80005d78:	10 9c       	mov	r12,r8
80005d7a:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->rpy_controller)[i].integrator),0.0, 0.0, 0.3); // 1.0 0.3 0.3
80005d7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005d82:	12 98       	mov	r8,r9
80005d84:	a5 68       	lsl	r8,0x4
80005d86:	12 08       	add	r8,r9
80005d88:	a3 68       	lsl	r8,0x2
80005d8a:	2f 48       	sub	r8,-12
80005d8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80005d90:	f2 08 00 08 	add	r8,r9,r8
80005d94:	e0 69 99 9a 	mov	r9,39322
80005d98:	ea 19 3e 99 	orh	r9,0x3e99
80005d9c:	30 0a       	mov	r10,0
80005d9e:	30 0b       	mov	r11,0
80005da0:	10 9c       	mov	r12,r8
80005da2:	f0 16 00 53 	mcall	r6[332]
	
	// initialise yaw controller
	stabiliser->rpy_controller[2]=passthroughController();
80005da6:	ee f5 ff f8 	ld.w	r5,r7[-8]
80005daa:	ee c8 00 4c 	sub	r8,r7,76
80005dae:	10 9c       	mov	r12,r8
80005db0:	f0 16 00 d8 	mcall	r6[864]
80005db4:	ea c8 ff 78 	sub	r8,r5,-136
80005db8:	ee c9 00 4c 	sub	r9,r7,76
80005dbc:	34 4a       	mov	r10,68
80005dbe:	12 9b       	mov	r11,r9
80005dc0:	10 9c       	mov	r12,r8
80005dc2:	f0 16 00 1b 	mcall	r6[108]
	
	// initialise z velocity
	(stabiliser->thrust_controller).p_gain=0.4; //0.3
80005dc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005dca:	e0 69 cc cd 	mov	r9,52429
80005dce:	ea 19 3e cc 	orh	r9,0x3ecc
80005dd2:	f1 49 00 cc 	st.w	r8[204],r9
	(stabiliser->thrust_controller).last_update=get_time_ticks();
80005dd6:	f0 16 00 2d 	mcall	r6[180]
80005dda:	18 99       	mov	r9,r12
80005ddc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005de0:	f1 49 01 04 	st.w	r8[260],r9
	(stabiliser->thrust_controller).clip_min=-0.9; //-0.9
80005de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005de8:	e0 69 66 66 	mov	r9,26214
80005dec:	ea 19 bf 66 	orh	r9,0xbf66
80005df0:	f1 49 00 d0 	st.w	r8[208],r9
	(stabiliser->thrust_controller).clip_max= 0.65; // 0.9
80005df4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005df8:	e0 69 66 66 	mov	r9,26214
80005dfc:	ea 19 3f 26 	orh	r9,0x3f26
80005e00:	f1 49 00 d4 	st.w	r8[212],r9
	(stabiliser->thrust_controller).soft_zone_width= 0.2; // region of lowered error input gain to ignore noise close to target point
80005e04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e08:	e0 69 cc cd 	mov	r9,52429
80005e0c:	ea 19 3e 4c 	orh	r9,0x3e4c
80005e10:	f1 49 01 0c 	st.w	r8[268],r9
	initDiff(&((stabiliser->thrust_controller).differentiator), 0.5, 0.95, 1.0); // 0.1 0.5 0.2
80005e14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e18:	f0 c8 ff 14 	sub	r8,r8,-236
80005e1c:	fc 19 3f 80 	movh	r9,0x3f80
80005e20:	e0 6a 33 33 	mov	r10,13107
80005e24:	ea 1a 3f 73 	orh	r10,0x3f73
80005e28:	fc 1b 3f 00 	movh	r11,0x3f00
80005e2c:	10 9c       	mov	r12,r8
80005e2e:	f0 16 00 51 	mcall	r6[324]
	initInt(&((stabiliser->thrust_controller).integrator),1.5, 1.0, 1.0); // 1.0 1.0 0.5
80005e32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80005e36:	f0 c8 ff 28 	sub	r8,r8,-216
80005e3a:	fc 19 3f 80 	movh	r9,0x3f80
80005e3e:	fc 1a 3f 80 	movh	r10,0x3f80
80005e42:	fc 1b 3f c0 	movh	r11,0x3fc0
80005e46:	10 9c       	mov	r12,r8
80005e48:	f0 16 00 53 	mcall	r6[332]
	
	
}
80005e4c:	2e dd       	sub	sp,-76
80005e4e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80005e52:	00 00       	add	r0,r0
80005e54:	80 00       	ld.sh	r0,r0[0x0]
80005e56:	5a 5c       	cp.w	r12,-27

80005e58 <init_stabilisation>:

void init_stabilisation() {
80005e58:	eb cd 40 c0 	pushm	r6-r7,lr
80005e5c:	1a 97       	mov	r7,sp
80005e5e:	49 76       	lddpc	r6,80005eb8 <init_stabilisation+0x60>
80005e60:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData = get_central_data();
80005e62:	f0 16 00 33 	mcall	r6[204]
80005e66:	18 99       	mov	r9,r12
80005e68:	ec f8 00 00 	ld.w	r8,r6[0]
80005e6c:	91 09       	st.w	r8[0x0],r9
	centralData->controls.run_mode=MOTORS_OFF;
80005e6e:	ec f8 00 00 	ld.w	r8,r6[0]
80005e72:	70 08       	ld.w	r8,r8[0x0]
80005e74:	30 09       	mov	r9,0
80005e76:	f1 49 01 70 	st.w	r8[368],r9
	centralData->controls.control_mode=ATTITUDE_COMMAND_MODE;
80005e7a:	ec f8 00 00 	ld.w	r8,r6[0]
80005e7e:	70 08       	ld.w	r8,r8[0x0]
80005e80:	30 19       	mov	r9,1
80005e82:	f1 49 01 68 	st.w	r8[360],r9
	centralData->controls.yaw_mode=YAW_RELATIVE;
80005e86:	ec f8 00 00 	ld.w	r8,r6[0]
80005e8a:	70 08       	ld.w	r8,r8[0x0]
80005e8c:	30 09       	mov	r9,0
80005e8e:	f1 49 01 6c 	st.w	r8[364],r9

	yaw_coordination_velocity=1.5;
80005e92:	ec f8 02 d0 	ld.w	r8,r6[720]
80005e96:	fc 19 3f c0 	movh	r9,0x3fc0
80005e9a:	91 09       	st.w	r8[0x0],r9

	init_rate_stabilisation(&rate_stabiliser);
80005e9c:	ec fc 02 74 	ld.w	r12,r6[628]
80005ea0:	f0 16 01 5c 	mcall	r6[1392]
	init_angle_stabilisation(&attitude_stabiliser);
80005ea4:	ec fc 02 44 	ld.w	r12,r6[580]
80005ea8:	f0 16 01 76 	mcall	r6[1496]
	init_velocity_stabilisation(&velocity_stabiliser);
80005eac:	ec fc 01 6c 	ld.w	r12,r6[364]
80005eb0:	f0 16 02 08 	mcall	r6[2080]
}
80005eb4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80005eb8:	80 00       	ld.sh	r0,r0[0x0]
80005eba:	5c e4       	tnbz	r4

80005ebc <cascade_stabilise_copter>:


void cascade_stabilise_copter(Imu_Data_t *imu, position_estimator_t *pos_est, Control_Command_t *control_input) {
80005ebc:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80005ec0:	1a 97       	mov	r7,sp
80005ec2:	21 5d       	sub	sp,84
80005ec4:	fe f6 03 4c 	ld.w	r6,pc[844]
80005ec8:	1e 26       	rsub	r6,pc
80005eca:	ef 4c ff b4 	st.w	r7[-76],r12
80005ece:	ef 4b ff b0 	st.w	r7[-80],r11
80005ed2:	ef 4a ff ac 	st.w	r7[-84],r10
	float rpyt_errors[4];
	Control_Command_t input;
	int i;
	
	// set the controller input
	input=*control_input;
80005ed6:	ee f9 ff ac 	ld.w	r9,r7[-84]
80005eda:	ee c8 00 48 	sub	r8,r7,72
80005ede:	f0 ca 00 00 	sub	r10,r8,0
80005ee2:	f2 cb 00 00 	sub	r11,r9,0
80005ee6:	76 0c       	ld.w	r12,r11[0x0]
80005ee8:	95 0c       	st.w	r10[0x0],r12
80005eea:	76 1c       	ld.w	r12,r11[0x4]
80005eec:	95 1c       	st.w	r10[0x4],r12
80005eee:	76 2c       	ld.w	r12,r11[0x8]
80005ef0:	95 2c       	st.w	r10[0x8],r12
80005ef2:	76 3b       	ld.w	r11,r11[0xc]
80005ef4:	95 3b       	st.w	r10[0xc],r11
80005ef6:	f0 ca ff f0 	sub	r10,r8,-16
80005efa:	f2 cb ff f0 	sub	r11,r9,-16
80005efe:	76 0c       	ld.w	r12,r11[0x0]
80005f00:	95 0c       	st.w	r10[0x0],r12
80005f02:	76 1c       	ld.w	r12,r11[0x4]
80005f04:	95 1c       	st.w	r10[0x4],r12
80005f06:	76 2c       	ld.w	r12,r11[0x8]
80005f08:	95 2c       	st.w	r10[0x8],r12
80005f0a:	76 3b       	ld.w	r11,r11[0xc]
80005f0c:	95 3b       	st.w	r10[0xc],r11
80005f0e:	f2 ea 00 20 	ld.d	r10,r9[32]
80005f12:	f0 eb 00 20 	st.d	r8[32],r10
80005f16:	72 a9       	ld.w	r9,r9[0x28]
80005f18:	91 a9       	st.w	r8[0x28],r9

	switch (control_input->control_mode) {
80005f1a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005f1e:	70 88       	ld.w	r8,r8[0x20]
80005f20:	58 18       	cp.w	r8,1
80005f22:	e0 80 00 d4 	breq	800060ca <cascade_stabilise_copter+0x20e>
80005f26:	c0 53       	brcs	80005f30 <cascade_stabilise_copter+0x74>
80005f28:	58 28       	cp.w	r8,2
80005f2a:	e0 80 01 31 	breq	8000618c <cascade_stabilise_copter+0x2d0>
80005f2e:	c6 69       	rjmp	800061fa <cascade_stabilise_copter+0x33e>
	case VELOCITY_COMMAND_MODE:
		rpyt_errors[ROLL] = input.tvel[Y] - pos_est->vel_bf[Y];     // map y-axis error to roll axis
80005f30:	ee f9 ff cc 	ld.w	r9,r7[-52]
80005f34:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f38:	70 c8       	ld.w	r8,r8[0x30]
80005f3a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f3e:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[PITCH]=-(input.tvel[X] - pos_est->vel_bf[X]);   // map x axis error to pitch axis
80005f42:	ee f9 ff c8 	ld.w	r9,r7[-56]
80005f46:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f4a:	70 b8       	ld.w	r8,r8[0x2c]
80005f4c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f50:	ee 18 80 00 	eorh	r8,0x8000
80005f54:	ef 48 ff e8 	st.w	r7[-24],r8
		rpyt_errors[3]    =-(input.tvel[Z] - pos_est->vel[Z]);      // attention - input z-axis maps to thrust input!
80005f58:	ee f9 ff d0 	ld.w	r9,r7[-48]
80005f5c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f60:	71 08       	ld.w	r8,r8[0x40]
80005f62:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80005f66:	ee 18 80 00 	eorh	r8,0x8000
80005f6a:	ef 48 ff f0 	st.w	r7[-16],r8
		

		if (control_input->yaw_mode == YAW_COORDINATED)  {
80005f6e:	ee f8 ff ac 	ld.w	r8,r7[-84]
80005f72:	70 98       	ld.w	r8,r8[0x24]
80005f74:	58 28       	cp.w	r8,2
80005f76:	c5 31       	brne	8000601c <cascade_stabilise_copter+0x160>
			float rel_heading = atan2(pos_est->vel_bf[Y], pos_est->vel_bf[X]);
80005f78:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f7c:	70 b8       	ld.w	r8,r8[0x2c]
80005f7e:	10 9c       	mov	r12,r8
80005f80:	f0 16 00 02 	mcall	r6[8]
80005f84:	14 92       	mov	r2,r10
80005f86:	16 93       	mov	r3,r11
80005f88:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005f8c:	70 c8       	ld.w	r8,r8[0x30]
80005f8e:	10 9c       	mov	r12,r8
80005f90:	f0 16 00 02 	mcall	r6[8]
80005f94:	04 98       	mov	r8,r2
80005f96:	06 99       	mov	r9,r3
80005f98:	f0 16 00 54 	mcall	r6[336]
80005f9c:	14 98       	mov	r8,r10
80005f9e:	16 99       	mov	r9,r11
80005fa0:	10 9a       	mov	r10,r8
80005fa2:	12 9b       	mov	r11,r9
80005fa4:	f0 16 00 08 	mcall	r6[32]
80005fa8:	18 98       	mov	r8,r12
80005faa:	ef 48 ff f8 	st.w	r7[-8],r8
			float current_velocity_sqr=SQR(pos_est->vel_bf[X])+SQR(pos_est->vel_bf[Y]);
80005fae:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005fb2:	70 b9       	ld.w	r9,r8[0x2c]
80005fb4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005fb8:	70 b8       	ld.w	r8,r8[0x2c]
80005fba:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80005fbe:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005fc2:	70 ca       	ld.w	r10,r8[0x30]
80005fc4:	ee f8 ff b0 	ld.w	r8,r7[-80]
80005fc8:	70 c8       	ld.w	r8,r8[0x30]
80005fca:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80005fce:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80005fd2:	ef 48 ff fc 	st.w	r7[-4],r8
			//float blend_func=0.5*(sigmoid(4.0*(current_velocity_sqr - yaw_coordination_velocity))+1.0);
			//blend_func=1.0;
			if (current_velocity_sqr > SQR(yaw_coordination_velocity)) {
80005fd6:	ec f8 02 d0 	ld.w	r8,r6[720]
80005fda:	70 09       	ld.w	r9,r8[0x0]
80005fdc:	ec f8 02 d0 	ld.w	r8,r6[720]
80005fe0:	70 08       	ld.w	r8,r8[0x0]
80005fe2:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80005fe6:	30 18       	mov	r8,1
80005fe8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80005fec:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80005ff0:	e0 8c 00 03 	brvs	80005ff6 <cascade_stabilise_copter+0x13a>
80005ff4:	c0 25       	brlt	80005ff8 <cascade_stabilise_copter+0x13c>
80005ff6:	30 08       	mov	r8,0
80005ff8:	5c 58       	castu.b	r8
80005ffa:	c1 10       	breq	8000601c <cascade_stabilise_copter+0x160>
				input.rpy[YAW]+=sigmoid(3.0*rel_heading);
80005ffc:	ee f5 ff c0 	ld.w	r5,r7[-64]
80006000:	ee f9 ff f8 	ld.w	r9,r7[-8]
80006004:	fc 18 40 40 	movh	r8,0x4040
80006008:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000600c:	10 9c       	mov	r12,r8
8000600e:	fe b0 fb 4d 	rcall	800056a8 <sigmoid>
80006012:	18 98       	mov	r8,r12
80006014:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
80006018:	ef 48 ff c0 	st.w	r7[-64],r8
			} else {
				//input.rpy[YAW]=input.theading;
			}
		}

		rpyt_errors[YAW]= input.rpy[YAW];
8000601c:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006020:	ef 48 ff ec 	st.w	r7[-20],r8
		
		// run PID update on all velocity controllers
		stabilise(&velocity_stabiliser, centralData->imu1.dt, rpyt_errors);
80006024:	ec f8 00 00 	ld.w	r8,r6[0]
80006028:	70 08       	ld.w	r8,r8[0x0]
8000602a:	f0 f8 01 40 	ld.w	r8,r8[320]
8000602e:	ee c9 00 1c 	sub	r9,r7,28
80006032:	12 9a       	mov	r10,r9
80006034:	10 9b       	mov	r11,r8
80006036:	ec fc 01 6c 	ld.w	r12,r6[364]
8000603a:	f0 16 00 d1 	mcall	r6[836]
		
		//velocity_stabiliser.output.thrust = f_min(velocity_stabiliser.output.thrust,control_input->thrust);
		
		velocity_stabiliser.output.thrust += THRUST_HOVER_POINT;
8000603e:	ec f8 01 6c 	ld.w	r8,r6[364]
80006042:	f0 f8 01 1c 	ld.w	r8,r8[284]
80006046:	10 9c       	mov	r12,r8
80006048:	f0 16 00 02 	mcall	r6[8]
8000604c:	e0 68 33 33 	mov	r8,13107
80006050:	ea 18 33 33 	orh	r8,0x3333
80006054:	e0 69 33 33 	mov	r9,13107
80006058:	ea 19 3f d3 	orh	r9,0x3fd3
8000605c:	f0 16 00 11 	mcall	r6[68]
80006060:	14 98       	mov	r8,r10
80006062:	16 99       	mov	r9,r11
80006064:	10 9a       	mov	r10,r8
80006066:	12 9b       	mov	r11,r9
80006068:	f0 16 00 08 	mcall	r6[32]
8000606c:	18 99       	mov	r9,r12
8000606e:	ec f8 01 6c 	ld.w	r8,r6[364]
80006072:	f1 49 01 1c 	st.w	r8[284],r9
		velocity_stabiliser.output.theading=input.theading;
80006076:	ee f9 ff d4 	ld.w	r9,r7[-44]
8000607a:	ec f8 01 6c 	ld.w	r8,r6[364]
8000607e:	f1 49 01 2c 	st.w	r8[300],r9
		input=velocity_stabiliser.output;
80006082:	ec f9 01 6c 	ld.w	r9,r6[364]
80006086:	ee c8 00 48 	sub	r8,r7,72
8000608a:	f2 c9 fe f0 	sub	r9,r9,-272
8000608e:	f0 ca 00 00 	sub	r10,r8,0
80006092:	f2 cb 00 00 	sub	r11,r9,0
80006096:	76 0c       	ld.w	r12,r11[0x0]
80006098:	95 0c       	st.w	r10[0x0],r12
8000609a:	76 1c       	ld.w	r12,r11[0x4]
8000609c:	95 1c       	st.w	r10[0x4],r12
8000609e:	76 2c       	ld.w	r12,r11[0x8]
800060a0:	95 2c       	st.w	r10[0x8],r12
800060a2:	76 3b       	ld.w	r11,r11[0xc]
800060a4:	95 3b       	st.w	r10[0xc],r11
800060a6:	f0 ca ff f0 	sub	r10,r8,-16
800060aa:	f2 cb ff f0 	sub	r11,r9,-16
800060ae:	76 0c       	ld.w	r12,r11[0x0]
800060b0:	95 0c       	st.w	r10[0x0],r12
800060b2:	76 1c       	ld.w	r12,r11[0x4]
800060b4:	95 1c       	st.w	r10[0x4],r12
800060b6:	76 2c       	ld.w	r12,r11[0x8]
800060b8:	95 2c       	st.w	r10[0x8],r12
800060ba:	76 3b       	ld.w	r11,r11[0xc]
800060bc:	95 3b       	st.w	r10[0xc],r11
800060be:	f2 ea 00 20 	ld.d	r10,r9[32]
800060c2:	f0 eb 00 20 	st.d	r8[32],r10
800060c6:	72 a9       	ld.w	r9,r9[0x28]
800060c8:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case ATTITUDE_COMMAND_MODE:
		// run absolute attitude controller
		rpyt_errors[0]= input.rpy[0] - (-imu->attitude.up_vec.v[1] ); 
800060ca:	ee f9 ff b8 	ld.w	r9,r7[-72]
800060ce:	ee f8 ff b4 	ld.w	r8,r7[-76]
800060d2:	70 68       	ld.w	r8,r8[0x18]
800060d4:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800060d8:	ef 48 ff e4 	st.w	r7[-28],r8
		rpyt_errors[1]= input.rpy[1] - imu->attitude.up_vec.v[0];
800060dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
800060e0:	ee f8 ff b4 	ld.w	r8,r7[-76]
800060e4:	70 58       	ld.w	r8,r8[0x14]
800060e6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800060ea:	ef 48 ff e8 	st.w	r7[-24],r8
		
		rpyt_errors[2]= input.rpy[2];
800060ee:	ee f8 ff c0 	ld.w	r8,r7[-64]
800060f2:	ef 48 ff ec 	st.w	r7[-20],r8
		
		if ((control_input->yaw_mode == YAW_ABSOLUTE) ) {
800060f6:	ee f8 ff ac 	ld.w	r8,r7[-84]
800060fa:	70 98       	ld.w	r8,r8[0x24]
800060fc:	58 18       	cp.w	r8,1
800060fe:	c1 21       	brne	80006122 <cascade_stabilise_copter+0x266>
			rpyt_errors[2] +=calc_smaller_angle(input.theading- pos_est->localPosition.heading);
80006100:	ee f5 ff ec 	ld.w	r5,r7[-20]
80006104:	ee f9 ff d4 	ld.w	r9,r7[-44]
80006108:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000610c:	71 b8       	ld.w	r8,r8[0x6c]
8000610e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006112:	10 9c       	mov	r12,r8
80006114:	fe b0 f9 f0 	rcall	800054f4 <calc_smaller_angle>
80006118:	18 98       	mov	r8,r12
8000611a:	e5 a0 08 58 	cop	cp0,cr8,cr5,cr8,0x40
8000611e:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		rpyt_errors[3]= input.thrust;       // no feedback for thrust at this level
80006122:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006126:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all attitude controllers
		stabilise(&attitude_stabiliser, centralData->imu1.dt, &rpyt_errors);
8000612a:	ec f8 00 00 	ld.w	r8,r6[0]
8000612e:	70 08       	ld.w	r8,r8[0x0]
80006130:	f0 f8 01 40 	ld.w	r8,r8[320]
80006134:	ee c9 00 1c 	sub	r9,r7,28
80006138:	12 9a       	mov	r10,r9
8000613a:	10 9b       	mov	r11,r8
8000613c:	ec fc 02 44 	ld.w	r12,r6[580]
80006140:	f0 16 00 d1 	mcall	r6[836]
		
		// use output of attitude controller to set rate setpoints for rate controller 
		input=attitude_stabiliser.output;
80006144:	ec f9 02 44 	ld.w	r9,r6[580]
80006148:	ee c8 00 48 	sub	r8,r7,72
8000614c:	f2 c9 fe f0 	sub	r9,r9,-272
80006150:	f0 ca 00 00 	sub	r10,r8,0
80006154:	f2 cb 00 00 	sub	r11,r9,0
80006158:	76 0c       	ld.w	r12,r11[0x0]
8000615a:	95 0c       	st.w	r10[0x0],r12
8000615c:	76 1c       	ld.w	r12,r11[0x4]
8000615e:	95 1c       	st.w	r10[0x4],r12
80006160:	76 2c       	ld.w	r12,r11[0x8]
80006162:	95 2c       	st.w	r10[0x8],r12
80006164:	76 3b       	ld.w	r11,r11[0xc]
80006166:	95 3b       	st.w	r10[0xc],r11
80006168:	f0 ca ff f0 	sub	r10,r8,-16
8000616c:	f2 cb ff f0 	sub	r11,r9,-16
80006170:	76 0c       	ld.w	r12,r11[0x0]
80006172:	95 0c       	st.w	r10[0x0],r12
80006174:	76 1c       	ld.w	r12,r11[0x4]
80006176:	95 1c       	st.w	r10[0x4],r12
80006178:	76 2c       	ld.w	r12,r11[0x8]
8000617a:	95 2c       	st.w	r10[0x8],r12
8000617c:	76 3b       	ld.w	r11,r11[0xc]
8000617e:	95 3b       	st.w	r10[0xc],r11
80006180:	f2 ea 00 20 	ld.d	r10,r9[32]
80006184:	f0 eb 00 20 	st.d	r8[32],r10
80006188:	72 a9       	ld.w	r9,r9[0x28]
8000618a:	91 a9       	st.w	r8[0x28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
8000618c:	30 08       	mov	r8,0
8000618e:	ef 48 ff f4 	st.w	r7[-12],r8
80006192:	c1 e8       	rjmp	800061ce <cascade_stabilise_copter+0x312>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
80006194:	ee fa ff f4 	ld.w	r10,r7[-12]
80006198:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000619c:	a3 68       	lsl	r8,0x2
8000619e:	ee 08 00 08 	add	r8,r7,r8
800061a2:	f0 f9 ff b8 	ld.w	r9,r8[-72]
800061a6:	ee fb ff f4 	ld.w	r11,r7[-12]
800061aa:	ee f8 ff b4 	ld.w	r8,r7[-76]
800061ae:	2e 2b       	sub	r11,-30
800061b0:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800061b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800061b8:	f4 08 15 02 	lsl	r8,r10,0x2
800061bc:	ee 08 00 08 	add	r8,r7,r8
800061c0:	f1 49 ff e4 	st.w	r8[-28],r9
	
	// -- no break here  - we want to run the lower level modes as well! -- 
	
	case RATE_COMMAND_MODE: // this level is always run
		// get rate measurements from IMU (filtered angular rates)
		for (i=0; i<3; i++) {
800061c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061c8:	2f f8       	sub	r8,-1
800061ca:	ef 48 ff f4 	st.w	r7[-12],r8
800061ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
800061d2:	58 28       	cp.w	r8,2
800061d4:	fe 9a ff e0 	brle	80006194 <cascade_stabilise_copter+0x2d8>
			rpyt_errors[i]= input.rpy[i]- imu->attitude.om[i];
		}
		rpyt_errors[3] = input.thrust ;  // no feedback for thrust at this level
800061d8:	ee f8 ff c4 	ld.w	r8,r7[-60]
800061dc:	ef 48 ff f0 	st.w	r7[-16],r8
		
		// run PID update on all rate controllers
		stabilise(&rate_stabiliser, centralData->imu1.dt, &rpyt_errors );
800061e0:	ec f8 00 00 	ld.w	r8,r6[0]
800061e4:	70 08       	ld.w	r8,r8[0x0]
800061e6:	f0 f8 01 40 	ld.w	r8,r8[320]
800061ea:	ee c9 00 1c 	sub	r9,r7,28
800061ee:	12 9a       	mov	r10,r9
800061f0:	10 9b       	mov	r11,r8
800061f2:	ec fc 02 74 	ld.w	r12,r6[628]
800061f6:	f0 16 00 d1 	mcall	r6[836]
	}
	
	// mix to servo outputs depending on configuration
	#ifdef CONF_DIAG
	mix_to_servos_diag_quad(&rate_stabiliser.output);
800061fa:	ec f8 02 74 	ld.w	r8,r6[628]
800061fe:	f0 c8 fe f0 	sub	r8,r8,-272
80006202:	10 9c       	mov	r12,r8
80006204:	f0 16 01 ef 	mcall	r6[1980]
	#ifdef CONF_CROSS
	mix_to_servos_cross_quad(&rate_stabiliser.output);
	#endif
	#endif
	
}
80006208:	2e bd       	sub	sp,-84
8000620a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000620e:	00 00       	add	r0,r0
80006210:	80 00       	ld.sh	r0,r0[0x0]
80006212:	5d 4c       	*unknown*

80006214 <mix_to_servos_diag_quad>:

void mix_to_servos_diag_quad(Control_Command_t *control){
80006214:	eb cd 40 e0 	pushm	r5-r7,lr
80006218:	1a 97       	mov	r7,sp
8000621a:	20 6d       	sub	sp,24
8000621c:	4e 96       	lddpc	r6,800063c0 <mix_to_servos_diag_quad+0x1ac>
8000621e:	1e 26       	rsub	r6,pc
80006220:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
80006224:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006228:	70 39       	ld.w	r9,r8[0xc]
8000622a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000622e:	70 1a       	ld.w	r10,r8[0x4]
80006230:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006234:	70 08       	ld.w	r8,r8[0x0]
80006236:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
8000623a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000623e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006242:	70 28       	ld.w	r8,r8[0x8]
80006244:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006248:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
8000624c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006250:	70 39       	ld.w	r9,r8[0xc]
80006252:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006256:	70 0a       	ld.w	r10,r8[0x0]
80006258:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000625c:	70 18       	ld.w	r8,r8[0x4]
8000625e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006262:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006266:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000626a:	70 28       	ld.w	r8,r8[0x8]
8000626c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006270:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
80006274:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006278:	70 39       	ld.w	r9,r8[0xc]
8000627a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000627e:	70 08       	ld.w	r8,r8[0x0]
80006280:	10 9a       	mov	r10,r8
80006282:	ee 1a 80 00 	eorh	r10,0x8000
80006286:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000628a:	70 18       	ld.w	r8,r8[0x4]
8000628c:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
80006290:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006294:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006298:	70 28       	ld.w	r8,r8[0x8]
8000629a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000629e:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
800062a2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062a6:	70 39       	ld.w	r9,r8[0xc]
800062a8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062ac:	70 0a       	ld.w	r10,r8[0x0]
800062ae:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062b2:	70 18       	ld.w	r8,r8[0x4]
800062b4:	e5 a1 08 a8 	cop	cp0,cr8,cr10,cr8,0x42
800062b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800062bc:	ee f8 ff e8 	ld.w	r8,r7[-24]
800062c0:	70 28       	ld.w	r8,r8[0x8]
800062c2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800062c6:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
800062ca:	30 08       	mov	r8,0
800062cc:	ef 48 ff fc 	st.w	r7[-4],r8
800062d0:	c4 98       	rjmp	80006362 <mix_to_servos_diag_quad+0x14e>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
800062d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800062d6:	a3 68       	lsl	r8,0x2
800062d8:	ee 08 00 08 	add	r8,r7,r8
800062dc:	f0 f8 ff ec 	ld.w	r8,r8[-20]
800062e0:	10 9c       	mov	r12,r8
800062e2:	f0 16 00 02 	mcall	r6[8]
800062e6:	30 05       	mov	r5,0
800062e8:	e0 68 cc cd 	mov	r8,52429
800062ec:	ea 18 cc cc 	orh	r8,0xcccc
800062f0:	e0 69 cc cc 	mov	r9,52428
800062f4:	ea 19 bf ec 	orh	r9,0xbfec
800062f8:	f0 16 00 1e 	mcall	r6[120]
800062fc:	18 98       	mov	r8,r12
800062fe:	58 08       	cp.w	r8,0
80006300:	c0 20       	breq	80006304 <mix_to_servos_diag_quad+0xf0>
80006302:	30 15       	mov	r5,1
80006304:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80006308:	c0 c0       	breq	80006320 <mix_to_servos_diag_quad+0x10c>
8000630a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000630e:	a3 68       	lsl	r8,0x2
80006310:	ee 08 00 08 	add	r8,r7,r8
80006314:	e0 69 66 66 	mov	r9,26214
80006318:	ea 19 bf 66 	orh	r9,0xbf66
8000631c:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
80006320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006324:	a3 68       	lsl	r8,0x2
80006326:	ee 08 00 08 	add	r8,r7,r8
8000632a:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000632e:	30 18       	mov	r8,1
80006330:	fc 19 3f 80 	movh	r9,0x3f80
80006334:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80006338:	e0 8c 00 04 	brvs	80006340 <mix_to_servos_diag_quad+0x12c>
8000633c:	e0 89 00 03 	brgt	80006342 <mix_to_servos_diag_quad+0x12e>
80006340:	30 08       	mov	r8,0
80006342:	5c 58       	castu.b	r8
80006344:	c0 a0       	breq	80006358 <mix_to_servos_diag_quad+0x144>
80006346:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000634a:	a3 68       	lsl	r8,0x2
8000634c:	ee 08 00 08 	add	r8,r7,r8
80006350:	fc 19 3f 80 	movh	r9,0x3f80
80006354:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT_RIGHT]= control->thrust + (-control->rpy[ROLL] + control->rpy[PITCH]) + M_FR_DIR * control->rpy[YAW];
	motor_command[M_FRONT_LEFT] = control->thrust + ( control->rpy[ROLL] + control->rpy[PITCH]) + M_FL_DIR * control->rpy[YAW];
	motor_command[M_REAR_RIGHT] = control->thrust + (-control->rpy[ROLL] - control->rpy[PITCH]) + M_RR_DIR * control->rpy[YAW];
	motor_command[M_REAR_LEFT]  = control->thrust + ( control->rpy[ROLL] - control->rpy[PITCH]) + M_RL_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
80006358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000635c:	2f f8       	sub	r8,-1
8000635e:	ef 48 ff fc 	st.w	r7[-4],r8
80006362:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006366:	58 38       	cp.w	r8,3
80006368:	fe 9a ff b5 	brle	800062d2 <mix_to_servos_diag_quad+0xbe>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
8000636c:	30 08       	mov	r8,0
8000636e:	ef 48 ff fc 	st.w	r7[-4],r8
80006372:	c1 f8       	rjmp	800063b0 <mix_to_servos_diag_quad+0x19c>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
80006374:	ec f8 00 00 	ld.w	r8,r6[0]
80006378:	70 0a       	ld.w	r10,r8[0x0]
8000637a:	ee fb ff fc 	ld.w	r11,r7[-4]
8000637e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006382:	a3 68       	lsl	r8,0x2
80006384:	ee 08 00 08 	add	r8,r7,r8
80006388:	f0 f9 ff ec 	ld.w	r9,r8[-20]
8000638c:	fc 18 43 fa 	movh	r8,0x43fa
80006390:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006394:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
80006398:	f6 08 15 04 	lsl	r8,r11,0x4
8000639c:	f4 08 00 08 	add	r8,r10,r8
800063a0:	f0 c8 fc cc 	sub	r8,r8,-820
800063a4:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
800063a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063aa:	2f f8       	sub	r8,-1
800063ac:	ef 48 ff fc 	st.w	r7[-4],r8
800063b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800063b4:	58 38       	cp.w	r8,3
800063b6:	fe 9a ff df 	brle	80006374 <mix_to_servos_diag_quad+0x160>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
}
800063ba:	2f ad       	sub	sp,-24
800063bc:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800063c0:	80 00       	ld.sh	r0,r0[0x0]
800063c2:	60 a2       	ld.w	r2,r0[0x28]

800063c4 <mix_to_servos_cross_quad>:


void mix_to_servos_cross_quad(Control_Command_t *control){
800063c4:	eb cd 40 e0 	pushm	r5-r7,lr
800063c8:	1a 97       	mov	r7,sp
800063ca:	20 6d       	sub	sp,24
800063cc:	4d e6       	lddpc	r6,80006544 <mix_to_servos_cross_quad+0x180>
800063ce:	1e 26       	rsub	r6,pc
800063d0:	ef 4c ff e8 	st.w	r7[-24],r12
	int i;
	float motor_command[4];
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
800063d4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063d8:	70 39       	ld.w	r9,r8[0xc]
800063da:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063de:	70 18       	ld.w	r8,r8[0x4]
800063e0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800063e4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063e8:	70 28       	ld.w	r8,r8[0x8]
800063ea:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800063ee:	ef 48 ff ec 	st.w	r7[-20],r8
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
800063f2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063f6:	70 39       	ld.w	r9,r8[0xc]
800063f8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800063fc:	70 08       	ld.w	r8,r8[0x0]
800063fe:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006402:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006406:	70 28       	ld.w	r8,r8[0x8]
80006408:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000640c:	ef 48 ff f0 	st.w	r7[-16],r8
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
80006410:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006414:	70 39       	ld.w	r9,r8[0xc]
80006416:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000641a:	70 18       	ld.w	r8,r8[0x4]
8000641c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80006420:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006424:	70 28       	ld.w	r8,r8[0x8]
80006426:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000642a:	ef 48 ff f4 	st.w	r7[-12],r8
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
8000642e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006432:	70 39       	ld.w	r9,r8[0xc]
80006434:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006438:	70 08       	ld.w	r8,r8[0x0]
8000643a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000643e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006442:	70 28       	ld.w	r8,r8[0x8]
80006444:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006448:	ef 48 ff f8 	st.w	r7[-8],r8
	for (i=0; i<4; i++) {
8000644c:	30 08       	mov	r8,0
8000644e:	ef 48 ff fc 	st.w	r7[-4],r8
80006452:	c4 98       	rjmp	800064e4 <mix_to_servos_cross_quad+0x120>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
80006454:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006458:	a3 68       	lsl	r8,0x2
8000645a:	ee 08 00 08 	add	r8,r7,r8
8000645e:	f0 f8 ff ec 	ld.w	r8,r8[-20]
80006462:	10 9c       	mov	r12,r8
80006464:	f0 16 00 02 	mcall	r6[8]
80006468:	30 05       	mov	r5,0
8000646a:	e0 68 cc cd 	mov	r8,52429
8000646e:	ea 18 cc cc 	orh	r8,0xcccc
80006472:	e0 69 cc cc 	mov	r9,52428
80006476:	ea 19 bf ec 	orh	r9,0xbfec
8000647a:	f0 16 00 1e 	mcall	r6[120]
8000647e:	18 98       	mov	r8,r12
80006480:	58 08       	cp.w	r8,0
80006482:	c0 20       	breq	80006486 <mix_to_servos_cross_quad+0xc2>
80006484:	30 15       	mov	r5,1
80006486:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000648a:	c0 c0       	breq	800064a2 <mix_to_servos_cross_quad+0xde>
8000648c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006490:	a3 68       	lsl	r8,0x2
80006492:	ee 08 00 08 	add	r8,r7,r8
80006496:	e0 69 66 66 	mov	r9,26214
8000649a:	ea 19 bf 66 	orh	r9,0xbf66
8000649e:	f1 49 ff ec 	st.w	r8[-20],r9
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
800064a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064a6:	a3 68       	lsl	r8,0x2
800064a8:	ee 08 00 08 	add	r8,r7,r8
800064ac:	f0 fa ff ec 	ld.w	r10,r8[-20]
800064b0:	30 18       	mov	r8,1
800064b2:	fc 19 3f 80 	movh	r9,0x3f80
800064b6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800064ba:	e0 8c 00 04 	brvs	800064c2 <mix_to_servos_cross_quad+0xfe>
800064be:	e0 89 00 03 	brgt	800064c4 <mix_to_servos_cross_quad+0x100>
800064c2:	30 08       	mov	r8,0
800064c4:	5c 58       	castu.b	r8
800064c6:	c0 a0       	breq	800064da <mix_to_servos_cross_quad+0x116>
800064c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064cc:	a3 68       	lsl	r8,0x2
800064ce:	ee 08 00 08 	add	r8,r7,r8
800064d2:	fc 19 3f 80 	movh	r9,0x3f80
800064d6:	f1 49 ff ec 	st.w	r8[-20],r9
	
	motor_command[M_FRONT]= control->thrust + control->rpy[PITCH] + M_FRONT_DIR * control->rpy[YAW];
	motor_command[M_RIGHT] = control->thrust - control->rpy[ROLL] + M_RIGHT_DIR * control->rpy[YAW];
	motor_command[M_REAR] = control->thrust - control->rpy[PITCH] + M_REAR_DIR * control->rpy[YAW];
	motor_command[M_LEFT]  = control->thrust + control->rpy[ROLL] + M_LEFT_DIR * control->rpy[YAW];
	for (i=0; i<4; i++) {
800064da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064de:	2f f8       	sub	r8,-1
800064e0:	ef 48 ff fc 	st.w	r7[-4],r8
800064e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800064e8:	58 38       	cp.w	r8,3
800064ea:	fe 9a ff b5 	brle	80006454 <mix_to_servos_cross_quad+0x90>
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
800064ee:	30 08       	mov	r8,0
800064f0:	ef 48 ff fc 	st.w	r7[-4],r8
800064f4:	c1 f8       	rjmp	80006532 <mix_to_servos_cross_quad+0x16e>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
800064f6:	ec f8 00 00 	ld.w	r8,r6[0]
800064fa:	70 0a       	ld.w	r10,r8[0x0]
800064fc:	ee fb ff fc 	ld.w	r11,r7[-4]
80006500:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006504:	a3 68       	lsl	r8,0x2
80006506:	ee 08 00 08 	add	r8,r7,r8
8000650a:	f0 f9 ff ec 	ld.w	r9,r8[-20]
8000650e:	fc 18 43 fa 	movh	r8,0x43fa
80006512:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80006516:	e5 ab 09 08 	cop	cp0,cr9,cr0,cr8,0x56
8000651a:	f6 08 15 04 	lsl	r8,r11,0x4
8000651e:	f4 08 00 08 	add	r8,r10,r8
80006522:	f0 c8 fc cc 	sub	r8,r8,-820
80006526:	91 09       	st.w	r8[0x0],r9
	for (i=0; i<4; i++) {
		if (motor_command[i]<MIN_THRUST) motor_command[i]=MIN_THRUST;
		if (motor_command[i]>MAX_THRUST) motor_command[i]=MAX_THRUST;
	}

	for (i=0; i<4; i++) {
80006528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000652c:	2f f8       	sub	r8,-1
8000652e:	ef 48 ff fc 	st.w	r7[-4],r8
80006532:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006536:	58 38       	cp.w	r8,3
80006538:	fe 9a ff df 	brle	800064f6 <mix_to_servos_cross_quad+0x132>
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	
8000653c:	2f ad       	sub	sp,-24
8000653e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80006542:	00 00       	add	r0,r0
80006544:	80 00       	ld.sh	r0,r0[0x0]
80006546:	62 52       	ld.w	r2,r1[0x14]

80006548 <init_analog_monitor>:
#define MONITOR_CHANNELS 4
#define MONITOR_SAMPLES 10

int16_t monitor_buffer[MONITOR_CHANNELS *MONITOR_SAMPLES];

void init_analog_monitor() {
80006548:	eb cd 40 c0 	pushm	r6-r7,lr
8000654c:	1a 97       	mov	r7,sp
8000654e:	49 06       	lddpc	r6,8000658c <init_analog_monitor+0x44>
80006550:	1e 26       	rsub	r6,pc
	Init_ADCI(100000, ADCIFA_REF06VDD, 16, 4);
80006552:	30 49       	mov	r9,4
80006554:	31 0a       	mov	r10,16
80006556:	30 1b       	mov	r11,1
80006558:	e0 7c 86 a0 	mov	r12,100000
8000655c:	f0 16 02 18 	mcall	r6[2144]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN6, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 6V
80006560:	30 0a       	mov	r10,0
80006562:	30 9b       	mov	r11,9
80006564:	30 6c       	mov	r12,6
80006566:	f0 16 00 95 	mcall	r6[596]
	adc_sequencer_add(AVR32_ADCIFA_INP_ADCIN7, AVR32_ADCIFA_INN_GNDANA, ADCIFA_SHG_1);  // 5V_ANALOG
8000656a:	30 0a       	mov	r10,0
8000656c:	30 9b       	mov	r11,9
8000656e:	30 7c       	mov	r12,7
80006570:	f0 16 00 95 	mcall	r6[596]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN10,ADCIFA_SHG_1); // BAT_FILTERED
80006574:	30 0a       	mov	r10,0
80006576:	30 2b       	mov	r11,2
80006578:	30 ac       	mov	r12,10
8000657a:	f0 16 00 95 	mcall	r6[596]
	adc_sequencer_add(AVR32_ADCIFA_INP_GNDANA, AVR32_ADCIFA_INN_ADCIN11, ADCIFA_SHG_1); //INPUT
8000657e:	30 0a       	mov	r10,0
80006580:	30 3b       	mov	r11,3
80006582:	30 ac       	mov	r12,10
80006584:	f0 16 00 95 	mcall	r6[596]
	//ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
}
80006588:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000658c:	80 00       	ld.sh	r0,r0[0x0]
8000658e:	63 d4       	ld.w	r4,r1[0x74]

80006590 <trigger_analog_monitor>:

void trigger_analog_monitor() {
80006590:	eb cd 40 c0 	pushm	r6-r7,lr
80006594:	1a 97       	mov	r7,sp
80006596:	48 76       	lddpc	r6,800065b0 <trigger_analog_monitor+0x20>
80006598:	1e 26       	rsub	r6,pc
	ADCI_Start_Sampling(&monitor_buffer, MONITOR_CHANNELS, MONITOR_SAMPLES, 100, false);
8000659a:	30 08       	mov	r8,0
8000659c:	36 49       	mov	r9,100
8000659e:	30 aa       	mov	r10,10
800065a0:	30 4b       	mov	r11,4
800065a2:	ec fc 03 d8 	ld.w	r12,r6[984]
800065a6:	f0 16 01 97 	mcall	r6[1628]
}
800065aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800065ae:	00 00       	add	r0,r0
800065b0:	80 00       	ld.sh	r0,r0[0x0]
800065b2:	64 1c       	ld.w	r12,r2[0x4]

800065b4 <get_monitored_avg>:

float get_monitored_avg(int channel) {
800065b4:	eb cd 40 c0 	pushm	r6-r7,lr
800065b8:	1a 97       	mov	r7,sp
800065ba:	20 3d       	sub	sp,12
800065bc:	49 c6       	lddpc	r6,8000662c <get_monitored_avg+0x78>
800065be:	1e 26       	rsub	r6,pc
800065c0:	ef 4c ff f4 	st.w	r7[-12],r12
	float out=0.0;
800065c4:	30 08       	mov	r8,0
800065c6:	ef 48 ff f8 	st.w	r7[-8],r8
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
800065ca:	30 08       	mov	r8,0
800065cc:	ef 48 ff fc 	st.w	r7[-4],r8
800065d0:	c1 98       	rjmp	80006602 <get_monitored_avg+0x4e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
800065d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065d6:	f0 09 15 02 	lsl	r9,r8,0x2
800065da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800065de:	10 09       	add	r9,r8
800065e0:	ec f8 03 d8 	ld.w	r8,r6[984]
800065e4:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
800065e8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800065ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800065f0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800065f4:	ef 48 ff f8 	st.w	r7[-8],r8
}

float get_monitored_avg(int channel) {
	float out=0.0;
	int i;
	for (i=0; i<MONITOR_SAMPLES; i++) {
800065f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800065fc:	2f f8       	sub	r8,-1
800065fe:	ef 48 ff fc 	st.w	r7[-4],r8
80006602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006606:	58 98       	cp.w	r8,9
80006608:	fe 9a ff e5 	brle	800065d2 <get_monitored_avg+0x1e>
		out+=(float)monitor_buffer[channel + i*MONITOR_CHANNELS];
	}
	out=out / MONITOR_SAMPLES;
8000660c:	fc 1b 41 20 	movh	r11,0x4120
80006610:	ee fc ff f8 	ld.w	r12,r7[-8]
80006614:	f0 16 00 0a 	mcall	r6[40]
80006618:	18 98       	mov	r8,r12
8000661a:	ef 48 ff f8 	st.w	r7[-8],r8
	return out;
8000661e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
80006622:	10 9c       	mov	r12,r8
80006624:	2f dd       	sub	sp,-12
80006626:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000662a:	00 00       	add	r0,r0
8000662c:	80 00       	ld.sh	r0,r0[0x0]
8000662e:	64 42       	ld.w	r2,r2[0x10]

80006630 <get_battery_rail>:

float get_battery_rail(){
80006630:	eb cd 40 c0 	pushm	r6-r7,lr
80006634:	1a 97       	mov	r7,sp
80006636:	48 f6       	lddpc	r6,80006670 <get_battery_rail+0x40>
80006638:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_BAT * get_monitored_avg(3);
8000663a:	30 3c       	mov	r12,3
8000663c:	f0 16 00 8a 	mcall	r6[552]
80006640:	18 98       	mov	r8,r12
80006642:	10 9c       	mov	r12,r8
80006644:	f0 16 00 02 	mcall	r6[8]
80006648:	e0 68 67 a1 	mov	r8,26529
8000664c:	ea 18 ea b3 	orh	r8,0xeab3
80006650:	e0 69 b5 73 	mov	r9,46451
80006654:	ea 19 bf 65 	orh	r9,0xbf65
80006658:	f0 16 00 03 	mcall	r6[12]
8000665c:	14 98       	mov	r8,r10
8000665e:	16 99       	mov	r9,r11
80006660:	10 9a       	mov	r10,r8
80006662:	12 9b       	mov	r11,r9
80006664:	f0 16 00 08 	mcall	r6[32]
80006668:	18 98       	mov	r8,r12
}
8000666a:	10 9c       	mov	r12,r8
8000666c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006670:	80 00       	ld.sh	r0,r0[0x0]
80006672:	64 bc       	ld.w	r12,r2[0x2c]

80006674 <get_internal_rail>:

float get_internal_rail(){
80006674:	eb cd 40 c0 	pushm	r6-r7,lr
80006678:	1a 97       	mov	r7,sp
8000667a:	48 f6       	lddpc	r6,800066b4 <get_internal_rail+0x40>
8000667c:	1e 26       	rsub	r6,pc
	return -CONV_FACTOR_INT * get_monitored_avg(2);
8000667e:	30 2c       	mov	r12,2
80006680:	f0 16 00 8a 	mcall	r6[552]
80006684:	18 98       	mov	r8,r12
80006686:	10 9c       	mov	r12,r8
80006688:	f0 16 00 02 	mcall	r6[8]
8000668c:	e0 68 67 a1 	mov	r8,26529
80006690:	ea 18 ea b3 	orh	r8,0xeab3
80006694:	e0 69 b5 73 	mov	r9,46451
80006698:	ea 19 bf 65 	orh	r9,0xbf65
8000669c:	f0 16 00 03 	mcall	r6[12]
800066a0:	14 98       	mov	r8,r10
800066a2:	16 99       	mov	r9,r11
800066a4:	10 9a       	mov	r10,r8
800066a6:	12 9b       	mov	r11,r9
800066a8:	f0 16 00 08 	mcall	r6[32]
800066ac:	18 98       	mov	r8,r12
}
800066ae:	10 9c       	mov	r12,r8
800066b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066b4:	80 00       	ld.sh	r0,r0[0x0]
800066b6:	65 00       	ld.w	r0,r2[0x40]

800066b8 <get_6V_analog_rail>:


float get_6V_analog_rail(){
800066b8:	eb cd 40 c0 	pushm	r6-r7,lr
800066bc:	1a 97       	mov	r7,sp
800066be:	48 f6       	lddpc	r6,800066f8 <get_6V_analog_rail+0x40>
800066c0:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_6V * get_monitored_avg(0);
800066c2:	30 0c       	mov	r12,0
800066c4:	f0 16 00 8a 	mcall	r6[552]
800066c8:	18 98       	mov	r8,r12
800066ca:	10 9c       	mov	r12,r8
800066cc:	f0 16 00 02 	mcall	r6[8]
800066d0:	e0 68 61 13 	mov	r8,24851
800066d4:	ea 18 d3 c3 	orh	r8,0xd3c3
800066d8:	e0 69 65 2b 	mov	r9,25899
800066dc:	ea 19 3f 59 	orh	r9,0x3f59
800066e0:	f0 16 00 03 	mcall	r6[12]
800066e4:	14 98       	mov	r8,r10
800066e6:	16 99       	mov	r9,r11
800066e8:	10 9a       	mov	r10,r8
800066ea:	12 9b       	mov	r11,r9
800066ec:	f0 16 00 08 	mcall	r6[32]
800066f0:	18 98       	mov	r8,r12
}
800066f2:	10 9c       	mov	r12,r8
800066f4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800066f8:	80 00       	ld.sh	r0,r0[0x0]
800066fa:	65 44       	ld.w	r4,r2[0x50]

800066fc <get_5V_analog_rail>:


float get_5V_analog_rail(){
800066fc:	eb cd 40 c0 	pushm	r6-r7,lr
80006700:	1a 97       	mov	r7,sp
80006702:	48 f6       	lddpc	r6,8000673c <get_5V_analog_rail+0x40>
80006704:	1e 26       	rsub	r6,pc
	return CONV_FACTOR_5V * get_monitored_avg(1);
80006706:	30 1c       	mov	r12,1
80006708:	f0 16 00 8a 	mcall	r6[552]
8000670c:	18 98       	mov	r8,r12
8000670e:	10 9c       	mov	r12,r8
80006710:	f0 16 00 02 	mcall	r6[8]
80006714:	e0 68 61 13 	mov	r8,24851
80006718:	ea 18 d3 c3 	orh	r8,0xd3c3
8000671c:	e0 69 65 2b 	mov	r9,25899
80006720:	ea 19 3f 59 	orh	r9,0x3f59
80006724:	f0 16 00 03 	mcall	r6[12]
80006728:	14 98       	mov	r8,r10
8000672a:	16 99       	mov	r9,r11
8000672c:	10 9a       	mov	r10,r8
8000672e:	12 9b       	mov	r11,r9
80006730:	f0 16 00 08 	mcall	r6[32]
80006734:	18 98       	mov	r8,r12
}
80006736:	10 9c       	mov	r12,r8
80006738:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000673c:	80 00       	ld.sh	r0,r0[0x0]
8000673e:	65 88       	ld.w	r8,r2[0x60]

80006740 <init_time_keeper>:


#include "time_keeper.h"


void init_time_keeper() {
80006740:	eb cd 40 c0 	pushm	r6-r7,lr
80006744:	1a 97       	mov	r7,sp
80006746:	48 86       	lddpc	r6,80006764 <init_time_keeper+0x24>
80006748:	1e 26       	rsub	r6,pc
	ast_init_counter(&AVR32_AST, AST_OSC_PB, AST_PRESCALER_SETTING, 0);
8000674a:	30 09       	mov	r9,0
8000674c:	30 5a       	mov	r10,5
8000674e:	30 2b       	mov	r11,2
80006750:	fe 7c 0c 00 	mov	r12,-62464
80006754:	f0 16 01 83 	mcall	r6[1548]
	ast_enable(&AVR32_AST);
80006758:	fe 7c 0c 00 	mov	r12,-62464
8000675c:	f0 16 01 e6 	mcall	r6[1944]
}
80006760:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006764:	80 00       	ld.sh	r0,r0[0x0]
80006766:	65 cc       	ld.w	r12,r2[0x70]

80006768 <get_time>:


double get_time(){          // time in seconds since system start
80006768:	eb cd 40 c0 	pushm	r6-r7,lr
8000676c:	1a 97       	mov	r7,sp
8000676e:	48 a6       	lddpc	r6,80006794 <get_time+0x2c>
80006770:	1e 26       	rsub	r6,pc
	return ticks_to_seconds(get_time_ticks());
80006772:	f0 16 00 2d 	mcall	r6[180]
80006776:	18 98       	mov	r8,r12
80006778:	10 9c       	mov	r12,r8
8000677a:	f0 16 00 c0 	mcall	r6[768]
8000677e:	18 98       	mov	r8,r12
80006780:	10 9c       	mov	r12,r8
80006782:	f0 16 00 02 	mcall	r6[8]
80006786:	14 98       	mov	r8,r10
80006788:	16 99       	mov	r9,r11
}
8000678a:	10 9a       	mov	r10,r8
8000678c:	12 9b       	mov	r11,r9
8000678e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006792:	00 00       	add	r0,r0
80006794:	80 00       	ld.sh	r0,r0[0x0]
80006796:	65 f4       	ld.w	r4,r2[0x7c]

80006798 <get_millis>:
uint32_t get_millis() {     //milliseconds since system start
80006798:	eb cd 40 c0 	pushm	r6-r7,lr
8000679c:	1a 97       	mov	r7,sp
8000679e:	48 96       	lddpc	r6,800067c0 <get_millis+0x28>
800067a0:	1e 26       	rsub	r6,pc
	return get_time_ticks()/1000; /// (TK_AST_FREQUENCY/1000);
800067a2:	f0 16 00 2d 	mcall	r6[180]
800067a6:	18 99       	mov	r9,r12
800067a8:	e0 68 4d d3 	mov	r8,19923
800067ac:	ea 18 10 62 	orh	r8,0x1062
800067b0:	f2 08 06 48 	mulu.d	r8,r9,r8
800067b4:	f2 08 16 06 	lsr	r8,r9,0x6
}	
800067b8:	10 9c       	mov	r12,r8
800067ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067be:	00 00       	add	r0,r0
800067c0:	80 00       	ld.sh	r0,r0[0x0]
800067c2:	66 24       	ld.w	r4,r3[0x8]

800067c4 <get_micros>:
uint32_t get_micros() {     // microseconds since system start. Will run over after an hour.
800067c4:	eb cd 40 c0 	pushm	r6-r7,lr
800067c8:	1a 97       	mov	r7,sp
800067ca:	48 56       	lddpc	r6,800067dc <get_micros+0x18>
800067cc:	1e 26       	rsub	r6,pc
	return get_time_ticks()* (1000000/TK_AST_FREQUENCY);
800067ce:	f0 16 00 2d 	mcall	r6[180]
800067d2:	18 98       	mov	r8,r12
}	
800067d4:	10 9c       	mov	r12,r8
800067d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067da:	00 00       	add	r0,r0
800067dc:	80 00       	ld.sh	r0,r0[0x0]
800067de:	66 50       	ld.w	r0,r3[0x14]

800067e0 <get_time_ticks>:

uint32_t get_time_ticks(){ //raw timer ticks
800067e0:	eb cd 40 c0 	pushm	r6-r7,lr
800067e4:	1a 97       	mov	r7,sp
800067e6:	48 66       	lddpc	r6,800067fc <get_time_ticks+0x1c>
800067e8:	1e 26       	rsub	r6,pc
	return ast_get_counter_value(&AVR32_AST);
800067ea:	fe 7c 0c 00 	mov	r12,-62464
800067ee:	f0 16 02 1b 	mcall	r6[2156]
800067f2:	18 98       	mov	r8,r12
}
800067f4:	10 9c       	mov	r12,r8
800067f6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800067fa:	00 00       	add	r0,r0
800067fc:	80 00       	ld.sh	r0,r0[0x0]
800067fe:	66 6c       	ld.w	r12,r3[0x18]

80006800 <ticks_to_seconds>:

float ticks_to_seconds(uint32_t timer_ticks){
80006800:	eb cd 40 c0 	pushm	r6-r7,lr
80006804:	1a 97       	mov	r7,sp
80006806:	20 1d       	sub	sp,4
80006808:	48 d6       	lddpc	r6,8000683c <ticks_to_seconds+0x3c>
8000680a:	1e 26       	rsub	r6,pc
8000680c:	ef 4c ff fc 	st.w	r7[-4],r12
	return ((double)timer_ticks/(double)TK_AST_FREQUENCY);
80006810:	ee fc ff fc 	ld.w	r12,r7[-4]
80006814:	f0 16 00 52 	mcall	r6[328]
80006818:	30 08       	mov	r8,0
8000681a:	e0 69 84 80 	mov	r9,33920
8000681e:	ea 19 41 2e 	orh	r9,0x412e
80006822:	f0 16 00 0c 	mcall	r6[48]
80006826:	14 98       	mov	r8,r10
80006828:	16 99       	mov	r9,r11
8000682a:	10 9a       	mov	r10,r8
8000682c:	12 9b       	mov	r11,r9
8000682e:	f0 16 00 08 	mcall	r6[32]
80006832:	18 98       	mov	r8,r12
}
80006834:	10 9c       	mov	r12,r8
80006836:	2f fd       	sub	sp,-4
80006838:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000683c:	80 00       	ld.sh	r0,r0[0x0]
8000683e:	66 8e       	ld.w	lr,r3[0x20]

80006840 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80006840:	eb cd 40 c0 	pushm	r6-r7,lr
80006844:	1a 97       	mov	r7,sp
80006846:	20 3d       	sub	sp,12
80006848:	49 06       	lddpc	r6,80006888 <mav_array_memcpy+0x48>
8000684a:	1e 26       	rsub	r6,pc
8000684c:	ef 4c ff fc 	st.w	r7[-4],r12
80006850:	ef 4b ff f8 	st.w	r7[-8],r11
80006854:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80006858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000685c:	58 08       	cp.w	r8,0
8000685e:	c0 91       	brne	80006870 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80006860:	ee fa ff f4 	ld.w	r10,r7[-12]
80006864:	30 0b       	mov	r11,0
80006866:	ee fc ff fc 	ld.w	r12,r7[-4]
8000686a:	f0 16 00 31 	mcall	r6[196]
8000686e:	c0 98       	rjmp	80006880 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80006870:	ee fa ff f4 	ld.w	r10,r7[-12]
80006874:	ee fb ff f8 	ld.w	r11,r7[-8]
80006878:	ee fc ff fc 	ld.w	r12,r7[-4]
8000687c:	f0 16 00 1b 	mcall	r6[108]
	}
}
80006880:	2f dd       	sub	sp,-12
80006882:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006886:	00 00       	add	r0,r0
80006888:	80 00       	ld.sh	r0,r0[0x0]
8000688a:	66 ce       	ld.w	lr,r3[0x30]

8000688c <e_init>:

uint32_t timeLastGpsMsgEstimator;

//----------------------------INITIALISATION------------------------
void e_init()
{
8000688c:	eb cd 40 c0 	pushm	r6-r7,lr
80006890:	1a 97       	mov	r7,sp
80006892:	fe f6 02 06 	ld.w	r6,pc[518]
80006896:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
80006898:	f0 16 00 33 	mcall	r6[204]
8000689c:	18 99       	mov	r9,r12
8000689e:	ec f8 00 00 	ld.w	r8,r6[0]
800068a2:	91 09       	st.w	r8[0x0],r9
	e_kalman_init(X,INIT_X_P); //e stands for estimator not extended
800068a4:	fc 1b 41 20 	movh	r11,0x4120
800068a8:	30 0c       	mov	r12,0
800068aa:	f0 16 00 ca 	mcall	r6[808]
	e_kalman_init(Y,INIT_Y_P);
800068ae:	fc 1b 41 20 	movh	r11,0x4120
800068b2:	30 1c       	mov	r12,1
800068b4:	f0 16 00 ca 	mcall	r6[808]
	e_kalman_init(Z,INIT_Z_P);
800068b8:	fc 1b 41 20 	movh	r11,0x4120
800068bc:	30 2c       	mov	r12,2
800068be:	f0 16 00 ca 	mcall	r6[808]
	Q[0][0]=Q_X0;
800068c2:	ec fa 00 e0 	ld.w	r10,r6[224]
800068c6:	e0 68 a9 fc 	mov	r8,43516
800068ca:	ea 18 d2 f1 	orh	r8,0xd2f1
800068ce:	e0 69 62 4d 	mov	r9,25165
800068d2:	ea 19 3f 50 	orh	r9,0x3f50
800068d6:	f4 e9 00 00 	st.d	r10[0],r8
	Q[0][1]=Q_X1;
800068da:	ec fa 00 e0 	ld.w	r10,r6[224]
800068de:	30 08       	mov	r8,0
800068e0:	30 09       	mov	r9,0
800068e2:	f4 e9 00 08 	st.d	r10[8],r8
	Q[0][2]=Q_X2;
800068e6:	ec fa 00 e0 	ld.w	r10,r6[224]
800068ea:	30 08       	mov	r8,0
800068ec:	30 09       	mov	r9,0
800068ee:	f4 e9 00 10 	st.d	r10[16],r8
	Q[1][0]=Q_Y0;
800068f2:	ec fa 00 e0 	ld.w	r10,r6[224]
800068f6:	30 08       	mov	r8,0
800068f8:	30 09       	mov	r9,0
800068fa:	f4 e9 00 18 	st.d	r10[24],r8
	Q[1][1]=Q_Y1;
800068fe:	ec fa 00 e0 	ld.w	r10,r6[224]
80006902:	e0 68 a9 fc 	mov	r8,43516
80006906:	ea 18 d2 f1 	orh	r8,0xd2f1
8000690a:	e0 69 62 4d 	mov	r9,25165
8000690e:	ea 19 3f 50 	orh	r9,0x3f50
80006912:	f4 e9 00 20 	st.d	r10[32],r8
	Q[1][2]=Q_Y2;
80006916:	ec fa 00 e0 	ld.w	r10,r6[224]
8000691a:	30 08       	mov	r8,0
8000691c:	30 09       	mov	r9,0
8000691e:	f4 e9 00 28 	st.d	r10[40],r8
	Q[2][0]=Q_Z0;
80006922:	ec fa 00 e0 	ld.w	r10,r6[224]
80006926:	30 08       	mov	r8,0
80006928:	30 09       	mov	r9,0
8000692a:	f4 e9 00 30 	st.d	r10[48],r8
	Q[2][1]=Q_Z1;
8000692e:	ec fa 00 e0 	ld.w	r10,r6[224]
80006932:	30 08       	mov	r8,0
80006934:	30 09       	mov	r9,0
80006936:	f4 e9 00 38 	st.d	r10[56],r8
	Q[2][2]=Q_Z2;
8000693a:	ec fa 00 e0 	ld.w	r10,r6[224]
8000693e:	e0 68 a9 fc 	mov	r8,43516
80006942:	ea 18 d2 f1 	orh	r8,0xd2f1
80006946:	e0 69 62 4d 	mov	r9,25165
8000694a:	ea 19 3f 50 	orh	r9,0x3f50
8000694e:	f4 e9 00 40 	st.d	r10[64],r8
	R[0]=R_X_POS;
80006952:	ec fa 01 74 	ld.w	r10,r6[372]
80006956:	e0 68 b0 21 	mov	r8,45089
8000695a:	ea 18 68 72 	orh	r8,0x6872
8000695e:	e0 69 ed 91 	mov	r9,60817
80006962:	ea 19 3f d8 	orh	r9,0x3fd8
80006966:	f4 e9 00 00 	st.d	r10[0],r8
	R[1]=R_Y_POS;
8000696a:	ec fa 01 74 	ld.w	r10,r6[372]
8000696e:	e0 68 a1 62 	mov	r8,41314
80006972:	ea 18 34 d6 	orh	r8,0x34d6
80006976:	e0 69 38 ef 	mov	r9,14575
8000697a:	ea 19 3f e3 	orh	r9,0x3fe3
8000697e:	f4 e9 00 08 	st.d	r10[8],r8
	R[2]=R_Z_POS;
80006982:	ec fa 01 74 	ld.w	r10,r6[372]
80006986:	e0 68 6e 2f 	mov	r8,28207
8000698a:	ea 18 01 a3 	orh	r8,0x1a3
8000698e:	e0 69 05 bc 	mov	r9,1468
80006992:	ea 19 40 05 	orh	r9,0x4005
80006996:	f4 e9 00 10 	st.d	r10[16],r8
	
	Q2[0][0]=Q_X0;
8000699a:	ec fa 00 e4 	ld.w	r10,r6[228]
8000699e:	e0 68 a9 fc 	mov	r8,43516
800069a2:	ea 18 d2 f1 	orh	r8,0xd2f1
800069a6:	e0 69 62 4d 	mov	r9,25165
800069aa:	ea 19 3f 50 	orh	r9,0x3f50
800069ae:	f4 e9 00 00 	st.d	r10[0],r8
	Q2[0][1]=Q_X1;
800069b2:	ec fa 00 e4 	ld.w	r10,r6[228]
800069b6:	30 08       	mov	r8,0
800069b8:	30 09       	mov	r9,0
800069ba:	f4 e9 00 08 	st.d	r10[8],r8
	Q2[0][2]=Q_X2;
800069be:	ec fa 00 e4 	ld.w	r10,r6[228]
800069c2:	30 08       	mov	r8,0
800069c4:	30 09       	mov	r9,0
800069c6:	f4 e9 00 10 	st.d	r10[16],r8
	Q2[1][0]=Q_Y0;
800069ca:	ec fa 00 e4 	ld.w	r10,r6[228]
800069ce:	30 08       	mov	r8,0
800069d0:	30 09       	mov	r9,0
800069d2:	f4 e9 00 18 	st.d	r10[24],r8
	Q2[1][1]=Q_Y1;
800069d6:	ec fa 00 e4 	ld.w	r10,r6[228]
800069da:	e0 68 a9 fc 	mov	r8,43516
800069de:	ea 18 d2 f1 	orh	r8,0xd2f1
800069e2:	e0 69 62 4d 	mov	r9,25165
800069e6:	ea 19 3f 50 	orh	r9,0x3f50
800069ea:	f4 e9 00 20 	st.d	r10[32],r8
	Q2[1][2]=Q_Y2;
800069ee:	ec fa 00 e4 	ld.w	r10,r6[228]
800069f2:	30 08       	mov	r8,0
800069f4:	30 09       	mov	r9,0
800069f6:	f4 e9 00 28 	st.d	r10[40],r8
	Q2[2][0]=Q_Z0;
800069fa:	ec fa 00 e4 	ld.w	r10,r6[228]
800069fe:	30 08       	mov	r8,0
80006a00:	30 09       	mov	r9,0
80006a02:	f4 e9 00 30 	st.d	r10[48],r8
	Q2[2][1]=Q_Z1;
80006a06:	ec fa 00 e4 	ld.w	r10,r6[228]
80006a0a:	30 08       	mov	r8,0
80006a0c:	30 09       	mov	r9,0
80006a0e:	f4 e9 00 38 	st.d	r10[56],r8
	Q2[2][2]=Q_Z2;
80006a12:	ec fa 00 e4 	ld.w	r10,r6[228]
80006a16:	e0 68 a9 fc 	mov	r8,43516
80006a1a:	ea 18 d2 f1 	orh	r8,0xd2f1
80006a1e:	e0 69 62 4d 	mov	r9,25165
80006a22:	ea 19 3f 50 	orh	r9,0x3f50
80006a26:	f4 e9 00 40 	st.d	r10[64],r8
	R2[0]=R_X_POS;
80006a2a:	ec fa 01 70 	ld.w	r10,r6[368]
80006a2e:	e0 68 b0 21 	mov	r8,45089
80006a32:	ea 18 68 72 	orh	r8,0x6872
80006a36:	e0 69 ed 91 	mov	r9,60817
80006a3a:	ea 19 3f d8 	orh	r9,0x3fd8
80006a3e:	f4 e9 00 00 	st.d	r10[0],r8
	R2[1]=R_Y_POS;
80006a42:	ec fa 01 70 	ld.w	r10,r6[368]
80006a46:	e0 68 a1 62 	mov	r8,41314
80006a4a:	ea 18 34 d6 	orh	r8,0x34d6
80006a4e:	e0 69 38 ef 	mov	r9,14575
80006a52:	ea 19 3f e3 	orh	r9,0x3fe3
80006a56:	f4 e9 00 08 	st.d	r10[8],r8
	R2[2]=R_Z_POS;
80006a5a:	ec fa 01 70 	ld.w	r10,r6[368]
80006a5e:	e0 68 6e 2f 	mov	r8,28207
80006a62:	ea 18 01 a3 	orh	r8,0x1a3
80006a66:	e0 69 05 bc 	mov	r9,1468
80006a6a:	ea 19 40 05 	orh	r9,0x4005
80006a6e:	f4 e9 00 10 	st.d	r10[16],r8
	
	centralData->position_estimator.init_gps_position = false;
80006a72:	ec f8 00 00 	ld.w	r8,r6[0]
80006a76:	70 09       	ld.w	r9,r8[0x0]
80006a78:	30 08       	mov	r8,0
80006a7a:	f3 68 09 ac 	st.b	r9[2476],r8
	
	timeLastGpsMsgEstimator = 0;
80006a7e:	ec f8 02 a8 	ld.w	r8,r6[680]
80006a82:	30 09       	mov	r9,0
80006a84:	91 09       	st.w	r8[0x0],r9
	
	filter_init_delta_t = false;
80006a86:	ec f9 02 f0 	ld.w	r9,r6[752]
80006a8a:	30 08       	mov	r8,0
80006a8c:	b2 88       	st.b	r9[0x0],r8
	
	init_pos_gps_estimator();
80006a8e:	f0 16 01 1c 	mcall	r6[1136]
}
80006a92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006a96:	00 00       	add	r0,r0
80006a98:	80 00       	ld.sh	r0,r0[0x0]
80006a9a:	67 1a       	ld.w	r10,r3[0x44]
80006a9c:	47 50       	lddsp	r0,sp[0x1d4]
80006a9e:	53 20       	stdsp	sp[0xc8],r0
80006aa0:	70 6f       	ld.w	pc,r8[0x18]
80006aa2:	73 69       	ld.w	r9,r9[0x58]
80006aa4:	74 69       	ld.w	r9,r10[0x18]
80006aa6:	6f 6e       	ld.w	lr,r7[0x58]
80006aa8:	20 69       	sub	r9,6
80006aaa:	6e 69       	ld.w	r9,r7[0x18]
80006aac:	74 69       	ld.w	r9,r10[0x18]
80006aae:	61 6c       	ld.w	r12,r0[0x58]
80006ab0:	69 7a       	ld.w	r10,r4[0x5c]
80006ab2:	65 64       	ld.w	r4,r2[0x58]
80006ab4:	21 0a       	sub	r10,16
	...

80006ab8 <init_pos_gps_estimator>:

void init_pos_gps_estimator()
{
80006ab8:	eb cd 40 c0 	pushm	r6-r7,lr
80006abc:	1a 97       	mov	r7,sp
80006abe:	49 f6       	lddpc	r6,80006b38 <init_pos_gps_estimator+0x80>
80006ac0:	1e 26       	rsub	r6,pc
	if (newValidGpsMsg(&timeLastGpsMsgEstimator) && (!(centralData->position_estimator.init_gps_position)))
80006ac2:	ec fc 02 a8 	ld.w	r12,r6[680]
80006ac6:	f0 16 00 98 	mcall	r6[608]
80006aca:	18 98       	mov	r8,r12
80006acc:	58 08       	cp.w	r8,0
80006ace:	c3 20       	breq	80006b32 <init_pos_gps_estimator+0x7a>
80006ad0:	ec f8 00 00 	ld.w	r8,r6[0]
80006ad4:	70 08       	ld.w	r8,r8[0x0]
80006ad6:	f1 38 09 ac 	ld.ub	r8,r8[2476]
80006ada:	ec 18 00 01 	eorl	r8,0x1
80006ade:	5c 58       	castu.b	r8
80006ae0:	c2 90       	breq	80006b32 <init_pos_gps_estimator+0x7a>
	{
		centralData->position_estimator.init_gps_position = true;
80006ae2:	ec f8 00 00 	ld.w	r8,r6[0]
80006ae6:	70 09       	ld.w	r9,r8[0x0]
80006ae8:	30 18       	mov	r8,1
80006aea:	f3 68 09 ac 	st.b	r9[2476],r8
		
		centralData->position_estimator.localPosition.origin.longitude = centralData->GPS_data.longitude;
80006aee:	ec f8 00 00 	ld.w	r8,r6[0]
80006af2:	70 0a       	ld.w	r10,r8[0x0]
80006af4:	ec f8 00 00 	ld.w	r8,r6[0]
80006af8:	70 08       	ld.w	r8,r8[0x0]
80006afa:	f0 e8 07 58 	ld.d	r8,r8[1880]
80006afe:	f4 e9 09 f4 	st.d	r10[2548],r8
		centralData->position_estimator.localPosition.origin.latitude = centralData->GPS_data.latitude;
80006b02:	ec f8 00 00 	ld.w	r8,r6[0]
80006b06:	70 0a       	ld.w	r10,r8[0x0]
80006b08:	ec f8 00 00 	ld.w	r8,r6[0]
80006b0c:	70 08       	ld.w	r8,r8[0x0]
80006b0e:	f0 e8 07 50 	ld.d	r8,r8[1872]
80006b12:	f4 e9 09 fc 	st.d	r10[2556],r8
		centralData->position_estimator.localPosition.origin.altitude = centralData->GPS_data.altitude;
80006b16:	ec f8 00 00 	ld.w	r8,r6[0]
80006b1a:	70 08       	ld.w	r8,r8[0x0]
80006b1c:	ec f9 00 00 	ld.w	r9,r6[0]
80006b20:	72 09       	ld.w	r9,r9[0x0]
80006b22:	f2 f9 07 60 	ld.w	r9,r9[1888]
80006b26:	f1 49 0a 04 	st.w	r8[2564],r9
		
		dbg_print("GPS position initialized!\n");
80006b2a:	fe cc 00 8e 	sub	r12,pc,142
80006b2e:	f0 16 00 01 	mcall	r6[4]
	}
}
80006b32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006b36:	00 00       	add	r0,r0
80006b38:	80 00       	ld.sh	r0,r0[0x0]
80006b3a:	69 44       	ld.w	r4,r4[0x50]

80006b3c <e_kalman_init>:

void e_kalman_init (int axis,float init_p) // axis = Z, X or Y
{
80006b3c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80006b40:	1a 97       	mov	r7,sp
80006b42:	20 4d       	sub	sp,16
80006b44:	4d e6       	lddpc	r6,80006cbc <e_kalman_init+0x180>
80006b46:	1e 26       	rsub	r6,pc
80006b48:	ef 4c ff f4 	st.w	r7[-12],r12
80006b4c:	ef 4b ff f0 	st.w	r7[-16],r11
	int i, j;
	
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
80006b50:	ec f8 00 00 	ld.w	r8,r6[0]
80006b54:	70 0a       	ld.w	r10,r8[0x0]
80006b56:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b5a:	12 98       	mov	r8,r9
80006b5c:	a1 78       	lsl	r8,0x1
80006b5e:	12 08       	add	r8,r9
80006b60:	a3 78       	lsl	r8,0x3
80006b62:	f4 08 00 08 	add	r8,r10,r8
80006b66:	f0 ca f8 5c 	sub	r10,r8,-1956
80006b6a:	30 08       	mov	r8,0
80006b6c:	30 09       	mov	r9,0
80006b6e:	f4 e9 00 00 	st.d	r10[0],r8
	centralData->estimation.state[axis][SPEED] = 0;
80006b72:	ec f8 00 00 	ld.w	r8,r6[0]
80006b76:	70 0a       	ld.w	r10,r8[0x0]
80006b78:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006b7c:	12 98       	mov	r8,r9
80006b7e:	a1 78       	lsl	r8,0x1
80006b80:	12 08       	add	r8,r9
80006b82:	2f f8       	sub	r8,-1
80006b84:	a3 78       	lsl	r8,0x3
80006b86:	f4 08 00 08 	add	r8,r10,r8
80006b8a:	30 0a       	mov	r10,0
80006b8c:	30 0b       	mov	r11,0
80006b8e:	f0 eb 07 a4 	st.d	r8[1956],r10
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
80006b92:	ec f8 00 00 	ld.w	r8,r6[0]
80006b96:	70 03       	ld.w	r3,r8[0x0]
80006b98:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006b9c:	ec f8 00 00 	ld.w	r8,r6[0]
80006ba0:	70 08       	ld.w	r8,r8[0x0]
80006ba2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80006ba6:	2f d9       	sub	r9,-3
80006ba8:	2f 49       	sub	r9,-12
80006baa:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80006bae:	10 9c       	mov	r12,r8
80006bb0:	f0 16 00 02 	mcall	r6[8]
80006bb4:	0a 98       	mov	r8,r5
80006bb6:	a1 78       	lsl	r8,0x1
80006bb8:	0a 08       	add	r8,r5
80006bba:	a3 78       	lsl	r8,0x3
80006bbc:	e6 08 00 08 	add	r8,r3,r8
80006bc0:	f0 c8 f8 4c 	sub	r8,r8,-1972
80006bc4:	f0 eb 00 00 	st.d	r8[0],r10
	
	for (i=0; i<3; i++)
80006bc8:	30 08       	mov	r8,0
80006bca:	ef 48 ff f8 	st.w	r7[-8],r8
80006bce:	c6 e8       	rjmp	80006caa <e_kalman_init+0x16e>
	{
		for (j=0; j<3; j++)
80006bd0:	30 08       	mov	r8,0
80006bd2:	ef 48 ff fc 	st.w	r7[-4],r8
80006bd6:	c3 28       	rjmp	80006c3a <e_kalman_init+0xfe>
		{
			P[axis][i][j] = 0.0;
80006bd8:	ee fa ff f4 	ld.w	r10,r7[-12]
80006bdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006be0:	ee fc ff fc 	ld.w	r12,r7[-4]
80006be4:	ec fb 00 18 	ld.w	r11,r6[24]
80006be8:	10 99       	mov	r9,r8
80006bea:	a1 79       	lsl	r9,0x1
80006bec:	10 09       	add	r9,r8
80006bee:	14 98       	mov	r8,r10
80006bf0:	a3 78       	lsl	r8,0x3
80006bf2:	14 08       	add	r8,r10
80006bf4:	f2 08 00 08 	add	r8,r9,r8
80006bf8:	f0 0c 00 0a 	add	r10,r8,r12
80006bfc:	30 08       	mov	r8,0
80006bfe:	30 09       	mov	r9,0
80006c00:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
			P2[axis][i][j] = 0.0;
80006c04:	ee fa ff f4 	ld.w	r10,r7[-12]
80006c08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006c0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80006c10:	ec fb 00 1c 	ld.w	r11,r6[28]
80006c14:	10 99       	mov	r9,r8
80006c16:	a1 79       	lsl	r9,0x1
80006c18:	10 09       	add	r9,r8
80006c1a:	14 98       	mov	r8,r10
80006c1c:	a3 78       	lsl	r8,0x3
80006c1e:	14 08       	add	r8,r10
80006c20:	f2 08 00 08 	add	r8,r9,r8
80006c24:	f0 0c 00 0a 	add	r10,r8,r12
80006c28:	30 08       	mov	r8,0
80006c2a:	30 09       	mov	r9,0
80006c2c:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
	{
		for (j=0; j<3; j++)
80006c30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c34:	2f f8       	sub	r8,-1
80006c36:	ef 48 ff fc 	st.w	r7[-4],r8
80006c3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006c3e:	58 28       	cp.w	r8,2
80006c40:	fe 9a ff cc 	brle	80006bd8 <e_kalman_init+0x9c>
		{
			P[axis][i][j] = 0.0;
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
80006c44:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006c48:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006c4c:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006c50:	ee fc ff f0 	ld.w	r12,r7[-16]
80006c54:	f0 16 00 02 	mcall	r6[8]
80006c58:	ec fc 00 18 	ld.w	r12,r6[24]
80006c5c:	06 99       	mov	r9,r3
80006c5e:	a1 79       	lsl	r9,0x1
80006c60:	06 09       	add	r9,r3
80006c62:	0a 98       	mov	r8,r5
80006c64:	a3 78       	lsl	r8,0x3
80006c66:	0a 08       	add	r8,r5
80006c68:	f2 08 00 08 	add	r8,r9,r8
80006c6c:	04 08       	add	r8,r2
80006c6e:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
		P2[axis][i][i] = init_p;
80006c72:	ee f5 ff f4 	ld.w	r5,r7[-12]
80006c76:	ee f3 ff f8 	ld.w	r3,r7[-8]
80006c7a:	ee f2 ff f8 	ld.w	r2,r7[-8]
80006c7e:	ee fc ff f0 	ld.w	r12,r7[-16]
80006c82:	f0 16 00 02 	mcall	r6[8]
80006c86:	ec fc 00 1c 	ld.w	r12,r6[28]
80006c8a:	06 99       	mov	r9,r3
80006c8c:	a1 79       	lsl	r9,0x1
80006c8e:	06 09       	add	r9,r3
80006c90:	0a 98       	mov	r8,r5
80006c92:	a3 78       	lsl	r8,0x3
80006c94:	0a 08       	add	r8,r5
80006c96:	f2 08 00 08 	add	r8,r9,r8
80006c9a:	04 08       	add	r8,r2
80006c9c:	f8 08 08 3a 	st.d	r12[r8<<0x3],r10
	centralData->estimation.state[axis][POSITION] = 0; // Differential par rapport au point de depart
	centralData->estimation.state[axis][SPEED] = 0;
	
	centralData->estimation.state[axis][BIAIS] = centralData->imu1.attitude.be[axis + ACC_OFFSET];
	
	for (i=0; i<3; i++)
80006ca0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006ca4:	2f f8       	sub	r8,-1
80006ca6:	ef 48 ff f8 	st.w	r7[-8],r8
80006caa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006cae:	58 28       	cp.w	r8,2
80006cb0:	fe 9a ff 90 	brle	80006bd0 <e_kalman_init+0x94>
			P2[axis][i][j] = 0.0;
		}
		P[axis][i][i] = init_p;
		P2[axis][i][i] = init_p;
	}
}
80006cb4:	2f cd       	sub	sp,-16
80006cb6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80006cba:	00 00       	add	r0,r0
80006cbc:	80 00       	ld.sh	r0,r0[0x0]
80006cbe:	69 ca       	ld.w	r10,r4[0x70]

80006cc0 <e_predict>:

//------------------------------PREDICTION--------------------------
void e_predict (UQuat_t *qe, float a[], float dt)
{
80006cc0:	eb cd 40 c0 	pushm	r6-r7,lr
80006cc4:	1a 97       	mov	r7,sp
80006cc6:	21 9d       	sub	sp,100
80006cc8:	fe f6 03 00 	ld.w	r6,pc[768]
80006ccc:	1e 26       	rsub	r6,pc
80006cce:	ef 4c ff a4 	st.w	r7[-92],r12
80006cd2:	ef 4b ff a0 	st.w	r7[-96],r11
80006cd6:	ef 4a ff 9c 	st.w	r7[-100],r10
	//MUL_V_SCA(z,-a[2])
	//e_kalman_predict(X,(x[0]*x[0]+y[0]*y[0]+z[0]*z[0]),dt);//final x (in NED) acc
	//e_kalman_predict(Y,(x[1]*x[1]+y[1]*y[1]+z[1]*z[1]),dt);
	//e_kalman_predict(Z,(x[2]*x[2]+y[2]*y[2]+z[2]*z[2]),dt);
	
	qe_tmp = *qe;
80006cda:	ee f9 ff a4 	ld.w	r9,r7[-92]
80006cde:	ee c8 00 40 	sub	r8,r7,64
80006ce2:	20 08       	sub	r8,0
80006ce4:	20 09       	sub	r9,0
80006ce6:	72 0a       	ld.w	r10,r9[0x0]
80006ce8:	91 0a       	st.w	r8[0x0],r10
80006cea:	72 1a       	ld.w	r10,r9[0x4]
80006cec:	91 1a       	st.w	r8[0x4],r10
80006cee:	72 2a       	ld.w	r10,r9[0x8]
80006cf0:	91 2a       	st.w	r8[0x8],r10
80006cf2:	72 39       	ld.w	r9,r9[0xc]
80006cf4:	91 39       	st.w	r8[0xc],r9
	
	// compute acceleration in global frame
	// acc_glo = qe * acc_bf * qe-1
	qtmp1.s=0.0; qtmp1.v[0]=a[0]; qtmp1.v[1]=a[1];qtmp1.v[2]=a[2];
80006cf6:	30 08       	mov	r8,0
80006cf8:	ef 48 ff f0 	st.w	r7[-16],r8
80006cfc:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006d00:	70 08       	ld.w	r8,r8[0x0]
80006d02:	ef 48 ff f4 	st.w	r7[-12],r8
80006d06:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006d0a:	2f c8       	sub	r8,-4
80006d0c:	70 08       	ld.w	r8,r8[0x0]
80006d0e:	ef 48 ff f8 	st.w	r7[-8],r8
80006d12:	ee f8 ff a0 	ld.w	r8,r7[-96]
80006d16:	2f 88       	sub	r8,-8
80006d18:	70 08       	ld.w	r8,r8[0x0]
80006d1a:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qe_tmp,qtmp1,qtmp2);
80006d1e:	ee f9 ff c8 	ld.w	r9,r7[-56]
80006d22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d26:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d2a:	ee fa ff cc 	ld.w	r10,r7[-52]
80006d2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d32:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d36:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d3a:	ef 48 ff b4 	st.w	r7[-76],r8
80006d3e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80006d42:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d46:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d4a:	ee fa ff c4 	ld.w	r10,r7[-60]
80006d4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006d52:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d56:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d5a:	ef 48 ff b8 	st.w	r7[-72],r8
80006d5e:	ee f9 ff c4 	ld.w	r9,r7[-60]
80006d62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006d66:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d6a:	ee fa ff c8 	ld.w	r10,r7[-56]
80006d6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d72:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d76:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006d7a:	ef 48 ff bc 	st.w	r7[-68],r8
80006d7e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006d82:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006d86:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006d8a:	ee fa ff c0 	ld.w	r10,r7[-64]
80006d8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006d92:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006d96:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006d9a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006d9e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006da2:	ef 48 ff e4 	st.w	r7[-28],r8
80006da6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006daa:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006dae:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006db2:	ee fa ff c0 	ld.w	r10,r7[-64]
80006db6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006dba:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006dbe:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006dc2:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006dc6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006dca:	ef 48 ff e8 	st.w	r7[-24],r8
80006dce:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006dd2:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006dd6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006dda:	ee fa ff c0 	ld.w	r10,r7[-64]
80006dde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006de2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006de6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006dea:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006dee:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006df2:	ef 48 ff ec 	st.w	r7[-20],r8
80006df6:	ee f9 ff c0 	ld.w	r9,r7[-64]
80006dfa:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006dfe:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e02:	ee fa ff c4 	ld.w	r10,r7[-60]
80006e06:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e0a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006e0e:	ee fb ff c8 	ld.w	r11,r7[-56]
80006e12:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e16:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006e1a:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006e1e:	ee fb ff cc 	ld.w	r11,r7[-52]
80006e22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e26:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006e2a:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006e2e:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e32:	ef 48 ff e0 	st.w	r7[-32],r8
	QI(qe_tmp,qtmp1);
80006e36:	ee f8 ff c0 	ld.w	r8,r7[-64]
80006e3a:	ef 48 ff f0 	st.w	r7[-16],r8
80006e3e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80006e42:	ee 18 80 00 	eorh	r8,0x8000
80006e46:	ef 48 ff f4 	st.w	r7[-12],r8
80006e4a:	ee f8 ff c8 	ld.w	r8,r7[-56]
80006e4e:	ee 18 80 00 	eorh	r8,0x8000
80006e52:	ef 48 ff f8 	st.w	r7[-8],r8
80006e56:	ee f8 ff cc 	ld.w	r8,r7[-52]
80006e5a:	ee 18 80 00 	eorh	r8,0x8000
80006e5e:	ef 48 ff fc 	st.w	r7[-4],r8
	QMUL(qtmp2,qtmp1,qtmp3);
80006e62:	ee f9 ff e8 	ld.w	r9,r7[-24]
80006e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e6a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e6e:	ee fa ff ec 	ld.w	r10,r7[-20]
80006e72:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006e76:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e7a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e7e:	ef 48 ff b4 	st.w	r7[-76],r8
80006e82:	ee f9 ff ec 	ld.w	r9,r7[-20]
80006e86:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006e8a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006e8e:	ee fa ff e4 	ld.w	r10,r7[-28]
80006e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006e96:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006e9a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006e9e:	ef 48 ff b8 	st.w	r7[-72],r8
80006ea2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80006ea6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006eaa:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006eae:	ee fa ff e8 	ld.w	r10,r7[-24]
80006eb2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006eb6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006eba:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006ebe:	ef 48 ff bc 	st.w	r7[-68],r8
80006ec2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006ec6:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006eca:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ece:	ee fa ff e0 	ld.w	r10,r7[-32]
80006ed2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006ed6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006eda:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006ede:	ee f8 ff b4 	ld.w	r8,r7[-76]
80006ee2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006ee6:	ef 48 ff d4 	st.w	r7[-44],r8
80006eea:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006eee:	ee f8 ff e8 	ld.w	r8,r7[-24]
80006ef2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006ef6:	ee fa ff e0 	ld.w	r10,r7[-32]
80006efa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006efe:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006f02:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006f06:	ee f8 ff b8 	ld.w	r8,r7[-72]
80006f0a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006f0e:	ef 48 ff d8 	st.w	r7[-40],r8
80006f12:	ee f9 ff f0 	ld.w	r9,r7[-16]
80006f16:	ee f8 ff ec 	ld.w	r8,r7[-20]
80006f1a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f1e:	ee fa ff e0 	ld.w	r10,r7[-32]
80006f22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f26:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80006f2a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80006f2e:	ee f8 ff bc 	ld.w	r8,r7[-68]
80006f32:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80006f36:	ef 48 ff dc 	st.w	r7[-36],r8
80006f3a:	ee f9 ff e0 	ld.w	r9,r7[-32]
80006f3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80006f42:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006f46:	ee fa ff e4 	ld.w	r10,r7[-28]
80006f4a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80006f4e:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
80006f52:	ee fb ff e8 	ld.w	r11,r7[-24]
80006f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80006f5a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f5e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
80006f62:	ee fb ff ec 	ld.w	r11,r7[-20]
80006f66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80006f6a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
80006f6e:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
80006f72:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80006f76:	ef 48 ff d0 	st.w	r7[-48],r8
	acc_glo[0]=qtmp3.v[0];acc_glo[1]=qtmp3.v[1];acc_glo[2]=qtmp3.v[2];
80006f7a:	ee f8 ff d4 	ld.w	r8,r7[-44]
80006f7e:	ef 48 ff a8 	st.w	r7[-88],r8
80006f82:	ee f8 ff d8 	ld.w	r8,r7[-40]
80006f86:	ef 48 ff ac 	st.w	r7[-84],r8
80006f8a:	ee f8 ff dc 	ld.w	r8,r7[-36]
80006f8e:	ef 48 ff b0 	st.w	r7[-80],r8
	//dbg_print_num(centralData->imu1.attitude.a[X]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Y]*1000,10);
	//dbg_print_num(centralData->imu1.attitude.a[Z]*1000,10);
	//dbg_print("\n");

	e_kalman_predict(X,acc_glo[X],dt);//final x (in NED) acc
80006f92:	ee f8 ff a8 	ld.w	r8,r7[-88]
80006f96:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006f9a:	10 9b       	mov	r11,r8
80006f9c:	30 0c       	mov	r12,0
80006f9e:	f0 16 00 cf 	mcall	r6[828]
	e_kalman_predict(Y,acc_glo[Y],dt);
80006fa2:	ee f8 ff ac 	ld.w	r8,r7[-84]
80006fa6:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006faa:	10 9b       	mov	r11,r8
80006fac:	30 1c       	mov	r12,1
80006fae:	f0 16 00 cf 	mcall	r6[828]
	//e_kalman_predict_hf(X,acc_glo[X],dt);//final x (in NED) acc
	//e_kalman_predict_hf(Y,acc_glo[Y],dt);
	e_kalman_predict(Z,acc_glo[Z],dt);
80006fb2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80006fb6:	ee fa ff 9c 	ld.w	r10,r7[-100]
80006fba:	10 9b       	mov	r11,r8
80006fbc:	30 2c       	mov	r12,2
80006fbe:	f0 16 00 cf 	mcall	r6[828]
}
80006fc2:	2e 7d       	sub	sp,-100
80006fc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80006fc8:	80 00       	ld.sh	r0,r0[0x0]
80006fca:	6b 50       	ld.w	r0,r5[0x54]

80006fcc <quat_rot>:

//Rotation of vector vect with the quaternion quat
void quat_rot(UQuat_t *quat,float *vect)
{
80006fcc:	eb cd 40 80 	pushm	r7,lr
80006fd0:	1a 97       	mov	r7,sp
80006fd2:	20 8d       	sub	sp,32
80006fd4:	ef 4c ff e4 	st.w	r7[-28],r12
80006fd8:	ef 4b ff e0 	st.w	r7[-32],r11
	float temp1[3],temp2[3];
	CP((*quat).v,vect,temp1);
80006fdc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006fe0:	70 29       	ld.w	r9,r8[0x8]
80006fe2:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006fe6:	2f 88       	sub	r8,-8
80006fe8:	70 08       	ld.w	r8,r8[0x0]
80006fea:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80006fee:	ee f8 ff e4 	ld.w	r8,r7[-28]
80006ff2:	70 3a       	ld.w	r10,r8[0xc]
80006ff4:	ee f8 ff e0 	ld.w	r8,r7[-32]
80006ff8:	2f c8       	sub	r8,-4
80006ffa:	70 08       	ld.w	r8,r8[0x0]
80006ffc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007000:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007004:	ef 48 ff f4 	st.w	r7[-12],r8
80007008:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000700c:	70 39       	ld.w	r9,r8[0xc]
8000700e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007012:	70 08       	ld.w	r8,r8[0x0]
80007014:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007018:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000701c:	70 1a       	ld.w	r10,r8[0x4]
8000701e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007022:	2f 88       	sub	r8,-8
80007024:	70 08       	ld.w	r8,r8[0x0]
80007026:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000702a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000702e:	ef 48 ff f8 	st.w	r7[-8],r8
80007032:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007036:	70 19       	ld.w	r9,r8[0x4]
80007038:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000703c:	2f c8       	sub	r8,-4
8000703e:	70 08       	ld.w	r8,r8[0x0]
80007040:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007044:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007048:	70 2a       	ld.w	r10,r8[0x8]
8000704a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000704e:	70 08       	ld.w	r8,r8[0x0]
80007050:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007054:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80007058:	ef 48 ff fc 	st.w	r7[-4],r8
	temp1[0]=temp1[0]+(*quat).s*vect[0];
8000705c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80007060:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007064:	70 0a       	ld.w	r10,r8[0x0]
80007066:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000706a:	70 08       	ld.w	r8,r8[0x0]
8000706c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007070:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80007074:	ef 48 ff f4 	st.w	r7[-12],r8
	temp1[1]=temp1[1]+(*quat).s*vect[1];
80007078:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000707c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007080:	70 0a       	ld.w	r10,r8[0x0]
80007082:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007086:	2f c8       	sub	r8,-4
80007088:	70 08       	ld.w	r8,r8[0x0]
8000708a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000708e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80007092:	ef 48 ff f8 	st.w	r7[-8],r8
	temp1[2]=temp1[2]+(*quat).s*vect[2];
80007096:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000709a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000709e:	70 0a       	ld.w	r10,r8[0x0]
800070a0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800070a4:	2f 88       	sub	r8,-8
800070a6:	70 08       	ld.w	r8,r8[0x0]
800070a8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070ac:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800070b0:	ef 48 ff fc 	st.w	r7[-4],r8
	CP((*quat).v,temp1,temp2);
800070b4:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070b8:	70 29       	ld.w	r9,r8[0x8]
800070ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070be:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800070c2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070c6:	70 3a       	ld.w	r10,r8[0xc]
800070c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800070cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070d0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800070d4:	ef 48 ff e8 	st.w	r7[-24],r8
800070d8:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070dc:	70 39       	ld.w	r9,r8[0xc]
800070de:	ee f8 ff f4 	ld.w	r8,r7[-12]
800070e2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800070e6:	ee f8 ff e4 	ld.w	r8,r7[-28]
800070ea:	70 1a       	ld.w	r10,r8[0x4]
800070ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800070f0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800070f4:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800070f8:	ef 48 ff ec 	st.w	r7[-20],r8
800070fc:	ee f8 ff e4 	ld.w	r8,r7[-28]
80007100:	70 19       	ld.w	r9,r8[0x4]
80007102:	ee f8 ff f8 	ld.w	r8,r7[-8]
80007106:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000710a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000710e:	70 2a       	ld.w	r10,r8[0x8]
80007110:	ee f8 ff f4 	ld.w	r8,r7[-12]
80007114:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80007118:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000711c:	ef 48 ff f0 	st.w	r7[-16],r8
	vect[0]= vect[0]+temp2[0]+temp2[0];
80007120:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007124:	70 09       	ld.w	r9,r8[0x0]
80007126:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000712a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000712e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80007132:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80007136:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000713a:	91 09       	st.w	r8[0x0],r9
	vect[1]= vect[1]+temp2[1]+temp2[1];
8000713c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007140:	2f c8       	sub	r8,-4
80007142:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007146:	2f c9       	sub	r9,-4
80007148:	72 0a       	ld.w	r10,r9[0x0]
8000714a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8000714e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80007152:	ee f9 ff ec 	ld.w	r9,r7[-20]
80007156:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000715a:	91 09       	st.w	r8[0x0],r9
	vect[2]= vect[2]+temp2[2]+temp2[2];
8000715c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80007160:	2f 88       	sub	r8,-8
80007162:	ee f9 ff e0 	ld.w	r9,r7[-32]
80007166:	2f 89       	sub	r9,-8
80007168:	72 0a       	ld.w	r10,r9[0x0]
8000716a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000716e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80007172:	ee f9 ff f0 	ld.w	r9,r7[-16]
80007176:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000717a:	91 09       	st.w	r8[0x0],r9
}
8000717c:	2f 8d       	sub	sp,-32
8000717e:	e3 cd 80 80 	ldm	sp++,r7,pc

80007182 <e_kalman_predict>:

Pk1 = F * Pk0 * F' + Q;

*/
void e_kalman_predict (int axis, float accel_meas, float dt)
{
80007182:	d4 31       	pushm	r0-r7,lr
80007184:	1a 97       	mov	r7,sp
80007186:	fa cd 00 cc 	sub	sp,sp,204
8000718a:	fe f6 0d 02 	ld.w	r6,pc[3330]
8000718e:	1e 26       	rsub	r6,pc
80007190:	ef 4c ff ac 	st.w	r7[-84],r12
80007194:	ef 4b ff a8 	st.w	r7[-88],r11
80007198:	ef 4a ff a4 	st.w	r7[-92],r10
	/* update state */

	//centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED]*(1.0-(VEL_DECAY*dt)) + dt * accel_meas;
	//centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION]*(1.0-(POS_DECAY*dt)) + dt * centralData->estimation.state[axis][SPEED];
	
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + dt * accel_meas;
8000719c:	ec f8 00 00 	ld.w	r8,r6[0]
800071a0:	70 01       	ld.w	r1,r8[0x0]
800071a2:	ee f5 ff ac 	ld.w	r5,r7[-84]
800071a6:	ec f8 00 00 	ld.w	r8,r6[0]
800071aa:	70 0a       	ld.w	r10,r8[0x0]
800071ac:	ee f9 ff ac 	ld.w	r9,r7[-84]
800071b0:	12 98       	mov	r8,r9
800071b2:	a1 78       	lsl	r8,0x1
800071b4:	12 08       	add	r8,r9
800071b6:	2f f8       	sub	r8,-1
800071b8:	a3 78       	lsl	r8,0x3
800071ba:	f4 08 00 08 	add	r8,r10,r8
800071be:	f0 e2 07 a4 	ld.d	r2,r8[1956]
800071c2:	ee f9 ff a4 	ld.w	r9,r7[-92]
800071c6:	ee f8 ff a8 	ld.w	r8,r7[-88]
800071ca:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800071ce:	10 9c       	mov	r12,r8
800071d0:	f0 16 00 02 	mcall	r6[8]
800071d4:	14 98       	mov	r8,r10
800071d6:	16 99       	mov	r9,r11
800071d8:	04 9a       	mov	r10,r2
800071da:	06 9b       	mov	r11,r3
800071dc:	f0 16 00 05 	mcall	r6[20]
800071e0:	14 98       	mov	r8,r10
800071e2:	16 99       	mov	r9,r11
800071e4:	10 9a       	mov	r10,r8
800071e6:	12 9b       	mov	r11,r9
800071e8:	0a 98       	mov	r8,r5
800071ea:	a1 78       	lsl	r8,0x1
800071ec:	0a 08       	add	r8,r5
800071ee:	2f f8       	sub	r8,-1
800071f0:	a3 78       	lsl	r8,0x3
800071f2:	e2 08 00 08 	add	r8,r1,r8
800071f6:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
800071fa:	ec f8 00 00 	ld.w	r8,r6[0]
800071fe:	70 01       	ld.w	r1,r8[0x0]
80007200:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007204:	ec f8 00 00 	ld.w	r8,r6[0]
80007208:	70 0a       	ld.w	r10,r8[0x0]
8000720a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000720e:	12 98       	mov	r8,r9
80007210:	a1 78       	lsl	r8,0x1
80007212:	12 08       	add	r8,r9
80007214:	a3 78       	lsl	r8,0x3
80007216:	f4 08 00 08 	add	r8,r10,r8
8000721a:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000721e:	f0 e2 00 00 	ld.d	r2,r8[0]
80007222:	ee fc ff a4 	ld.w	r12,r7[-92]
80007226:	f0 16 00 02 	mcall	r6[8]
8000722a:	ec f8 00 00 	ld.w	r8,r6[0]
8000722e:	70 0c       	ld.w	r12,r8[0x0]
80007230:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007234:	12 98       	mov	r8,r9
80007236:	a1 78       	lsl	r8,0x1
80007238:	12 08       	add	r8,r9
8000723a:	2f f8       	sub	r8,-1
8000723c:	a3 78       	lsl	r8,0x3
8000723e:	f8 08 00 08 	add	r8,r12,r8
80007242:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80007246:	f0 16 00 03 	mcall	r6[12]
8000724a:	14 98       	mov	r8,r10
8000724c:	16 99       	mov	r9,r11
8000724e:	04 9a       	mov	r10,r2
80007250:	06 9b       	mov	r11,r3
80007252:	f0 16 00 05 	mcall	r6[20]
80007256:	14 98       	mov	r8,r10
80007258:	16 99       	mov	r9,r11
8000725a:	10 9a       	mov	r10,r8
8000725c:	12 9b       	mov	r11,r9
8000725e:	0a 98       	mov	r8,r5
80007260:	a1 78       	lsl	r8,0x1
80007262:	0a 08       	add	r8,r5
80007264:	a3 78       	lsl	r8,0x3
80007266:	e2 08 00 08 	add	r8,r1,r8
8000726a:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000726e:	f0 eb 00 00 	st.d	r8[0],r10
	//centralData->estimation.state[axis][SPEED] = centralData->position_estimator.vel[axis];
	
	
	/* update covariance */
	// F*P*F' calculation
	FPF00 = P[axis][0][0] + dt * ( P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1] );
80007272:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007276:	ec fa 00 18 	ld.w	r10,r6[24]
8000727a:	12 98       	mov	r8,r9
8000727c:	a3 78       	lsl	r8,0x3
8000727e:	12 08       	add	r8,r9
80007280:	a3 78       	lsl	r8,0x3
80007282:	f4 08 00 08 	add	r8,r10,r8
80007286:	f0 ea 00 00 	ld.d	r10,r8[0]
8000728a:	ee eb ff 34 	st.d	r7[-204],r10
8000728e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007292:	f0 16 00 02 	mcall	r6[8]
80007296:	14 90       	mov	r0,r10
80007298:	16 91       	mov	r1,r11
8000729a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000729e:	ec fa 00 18 	ld.w	r10,r6[24]
800072a2:	12 98       	mov	r8,r9
800072a4:	a3 78       	lsl	r8,0x3
800072a6:	12 08       	add	r8,r9
800072a8:	a3 78       	lsl	r8,0x3
800072aa:	f4 08 00 08 	add	r8,r10,r8
800072ae:	2e 88       	sub	r8,-24
800072b0:	f0 ea 00 00 	ld.d	r10,r8[0]
800072b4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072b8:	ec fc 00 18 	ld.w	r12,r6[24]
800072bc:	12 98       	mov	r8,r9
800072be:	a3 78       	lsl	r8,0x3
800072c0:	12 08       	add	r8,r9
800072c2:	2f f8       	sub	r8,-1
800072c4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800072c8:	f0 16 00 05 	mcall	r6[20]
800072cc:	14 98       	mov	r8,r10
800072ce:	16 99       	mov	r9,r11
800072d0:	10 92       	mov	r2,r8
800072d2:	12 93       	mov	r3,r9
800072d4:	ee fc ff a4 	ld.w	r12,r7[-92]
800072d8:	f0 16 00 02 	mcall	r6[8]
800072dc:	ee f9 ff ac 	ld.w	r9,r7[-84]
800072e0:	ec fc 00 18 	ld.w	r12,r6[24]
800072e4:	12 98       	mov	r8,r9
800072e6:	a3 78       	lsl	r8,0x3
800072e8:	12 08       	add	r8,r9
800072ea:	a3 78       	lsl	r8,0x3
800072ec:	f8 08 00 08 	add	r8,r12,r8
800072f0:	2e 08       	sub	r8,-32
800072f2:	f0 e8 00 00 	ld.d	r8,r8[0]
800072f6:	f0 16 00 03 	mcall	r6[12]
800072fa:	14 98       	mov	r8,r10
800072fc:	16 99       	mov	r9,r11
800072fe:	04 9a       	mov	r10,r2
80007300:	06 9b       	mov	r11,r3
80007302:	f0 16 00 05 	mcall	r6[20]
80007306:	14 98       	mov	r8,r10
80007308:	16 99       	mov	r9,r11
8000730a:	00 9a       	mov	r10,r0
8000730c:	02 9b       	mov	r11,r1
8000730e:	f0 16 00 03 	mcall	r6[12]
80007312:	14 98       	mov	r8,r10
80007314:	16 99       	mov	r9,r11
80007316:	ee ea ff 34 	ld.d	r10,r7[-204]
8000731a:	f0 16 00 05 	mcall	r6[20]
8000731e:	14 98       	mov	r8,r10
80007320:	16 99       	mov	r9,r11
80007322:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P[axis][0][1] + dt * ( P[axis][1][1] - P[axis][0][2] - dt * P[axis][1][2] );
80007326:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000732a:	ec fa 00 18 	ld.w	r10,r6[24]
8000732e:	12 98       	mov	r8,r9
80007330:	a3 78       	lsl	r8,0x3
80007332:	12 08       	add	r8,r9
80007334:	2f f8       	sub	r8,-1
80007336:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
8000733a:	ee e5 ff 3c 	st.d	r7[-196],r4
8000733e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007342:	f0 16 00 02 	mcall	r6[8]
80007346:	14 90       	mov	r0,r10
80007348:	16 91       	mov	r1,r11
8000734a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000734e:	ec fa 00 18 	ld.w	r10,r6[24]
80007352:	12 98       	mov	r8,r9
80007354:	a3 78       	lsl	r8,0x3
80007356:	12 08       	add	r8,r9
80007358:	a3 78       	lsl	r8,0x3
8000735a:	f4 08 00 08 	add	r8,r10,r8
8000735e:	2e 08       	sub	r8,-32
80007360:	f0 ea 00 00 	ld.d	r10,r8[0]
80007364:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007368:	ec fc 00 18 	ld.w	r12,r6[24]
8000736c:	12 98       	mov	r8,r9
8000736e:	a3 78       	lsl	r8,0x3
80007370:	12 08       	add	r8,r9
80007372:	a3 78       	lsl	r8,0x3
80007374:	f8 08 00 08 	add	r8,r12,r8
80007378:	2f 08       	sub	r8,-16
8000737a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000737e:	f0 16 00 11 	mcall	r6[68]
80007382:	14 98       	mov	r8,r10
80007384:	16 99       	mov	r9,r11
80007386:	10 92       	mov	r2,r8
80007388:	12 93       	mov	r3,r9
8000738a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000738e:	f0 16 00 02 	mcall	r6[8]
80007392:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007396:	ec fc 00 18 	ld.w	r12,r6[24]
8000739a:	12 98       	mov	r8,r9
8000739c:	a3 78       	lsl	r8,0x3
8000739e:	12 08       	add	r8,r9
800073a0:	a3 78       	lsl	r8,0x3
800073a2:	f8 08 00 08 	add	r8,r12,r8
800073a6:	2d 88       	sub	r8,-40
800073a8:	f0 e8 00 00 	ld.d	r8,r8[0]
800073ac:	f0 16 00 03 	mcall	r6[12]
800073b0:	14 98       	mov	r8,r10
800073b2:	16 99       	mov	r9,r11
800073b4:	04 9a       	mov	r10,r2
800073b6:	06 9b       	mov	r11,r3
800073b8:	f0 16 00 11 	mcall	r6[68]
800073bc:	14 98       	mov	r8,r10
800073be:	16 99       	mov	r9,r11
800073c0:	00 9a       	mov	r10,r0
800073c2:	02 9b       	mov	r11,r1
800073c4:	f0 16 00 03 	mcall	r6[12]
800073c8:	14 98       	mov	r8,r10
800073ca:	16 99       	mov	r9,r11
800073cc:	ee ea ff 3c 	ld.d	r10,r7[-196]
800073d0:	f0 16 00 05 	mcall	r6[20]
800073d4:	14 98       	mov	r8,r10
800073d6:	16 99       	mov	r9,r11
800073d8:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P[axis][0][2] + dt * ( P[axis][1][2] );
800073dc:	ee f9 ff ac 	ld.w	r9,r7[-84]
800073e0:	ec fa 00 18 	ld.w	r10,r6[24]
800073e4:	12 98       	mov	r8,r9
800073e6:	a3 78       	lsl	r8,0x3
800073e8:	12 08       	add	r8,r9
800073ea:	a3 78       	lsl	r8,0x3
800073ec:	f4 08 00 08 	add	r8,r10,r8
800073f0:	2f 08       	sub	r8,-16
800073f2:	f0 e2 00 00 	ld.d	r2,r8[0]
800073f6:	ee fc ff a4 	ld.w	r12,r7[-92]
800073fa:	f0 16 00 02 	mcall	r6[8]
800073fe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007402:	ec fc 00 18 	ld.w	r12,r6[24]
80007406:	12 98       	mov	r8,r9
80007408:	a3 78       	lsl	r8,0x3
8000740a:	12 08       	add	r8,r9
8000740c:	a3 78       	lsl	r8,0x3
8000740e:	f8 08 00 08 	add	r8,r12,r8
80007412:	2d 88       	sub	r8,-40
80007414:	f0 e8 00 00 	ld.d	r8,r8[0]
80007418:	f0 16 00 03 	mcall	r6[12]
8000741c:	14 98       	mov	r8,r10
8000741e:	16 99       	mov	r9,r11
80007420:	04 9a       	mov	r10,r2
80007422:	06 9b       	mov	r11,r3
80007424:	f0 16 00 05 	mcall	r6[20]
80007428:	14 98       	mov	r8,r10
8000742a:	16 99       	mov	r9,r11
8000742c:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P[axis][1][0] + dt * (-P[axis][2][0] + P[axis][1][1] - dt * P[axis][2][1] );
80007430:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007434:	ec fa 00 18 	ld.w	r10,r6[24]
80007438:	12 98       	mov	r8,r9
8000743a:	a3 78       	lsl	r8,0x3
8000743c:	12 08       	add	r8,r9
8000743e:	a3 78       	lsl	r8,0x3
80007440:	f4 08 00 08 	add	r8,r10,r8
80007444:	2e 88       	sub	r8,-24
80007446:	f0 ea 00 00 	ld.d	r10,r8[0]
8000744a:	ee eb ff 44 	st.d	r7[-188],r10
8000744e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007452:	f0 16 00 02 	mcall	r6[8]
80007456:	14 90       	mov	r0,r10
80007458:	16 91       	mov	r1,r11
8000745a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000745e:	ec fa 00 18 	ld.w	r10,r6[24]
80007462:	12 98       	mov	r8,r9
80007464:	a3 78       	lsl	r8,0x3
80007466:	12 08       	add	r8,r9
80007468:	a3 78       	lsl	r8,0x3
8000746a:	f4 08 00 08 	add	r8,r10,r8
8000746e:	2e 08       	sub	r8,-32
80007470:	f0 ea 00 00 	ld.d	r10,r8[0]
80007474:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007478:	ec fc 00 18 	ld.w	r12,r6[24]
8000747c:	12 98       	mov	r8,r9
8000747e:	a3 78       	lsl	r8,0x3
80007480:	12 08       	add	r8,r9
80007482:	a3 78       	lsl	r8,0x3
80007484:	f8 08 00 08 	add	r8,r12,r8
80007488:	2d 08       	sub	r8,-48
8000748a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000748e:	f0 16 00 11 	mcall	r6[68]
80007492:	14 98       	mov	r8,r10
80007494:	16 99       	mov	r9,r11
80007496:	10 92       	mov	r2,r8
80007498:	12 93       	mov	r3,r9
8000749a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000749e:	f0 16 00 02 	mcall	r6[8]
800074a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074a6:	ec fc 00 18 	ld.w	r12,r6[24]
800074aa:	12 98       	mov	r8,r9
800074ac:	a3 78       	lsl	r8,0x3
800074ae:	12 08       	add	r8,r9
800074b0:	a3 78       	lsl	r8,0x3
800074b2:	f8 08 00 08 	add	r8,r12,r8
800074b6:	2c 88       	sub	r8,-56
800074b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800074bc:	f0 16 00 03 	mcall	r6[12]
800074c0:	14 98       	mov	r8,r10
800074c2:	16 99       	mov	r9,r11
800074c4:	04 9a       	mov	r10,r2
800074c6:	06 9b       	mov	r11,r3
800074c8:	f0 16 00 11 	mcall	r6[68]
800074cc:	14 98       	mov	r8,r10
800074ce:	16 99       	mov	r9,r11
800074d0:	00 9a       	mov	r10,r0
800074d2:	02 9b       	mov	r11,r1
800074d4:	f0 16 00 03 	mcall	r6[12]
800074d8:	14 98       	mov	r8,r10
800074da:	16 99       	mov	r9,r11
800074dc:	ee ea ff 44 	ld.d	r10,r7[-188]
800074e0:	f0 16 00 05 	mcall	r6[20]
800074e4:	14 98       	mov	r8,r10
800074e6:	16 99       	mov	r9,r11
800074e8:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P[axis][1][1] + dt * (-P[axis][2][1] - P[axis][1][2] + dt * P[axis][2][2] );
800074ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800074f0:	ec fa 00 18 	ld.w	r10,r6[24]
800074f4:	12 98       	mov	r8,r9
800074f6:	a3 78       	lsl	r8,0x3
800074f8:	12 08       	add	r8,r9
800074fa:	a3 78       	lsl	r8,0x3
800074fc:	f4 08 00 08 	add	r8,r10,r8
80007500:	2e 08       	sub	r8,-32
80007502:	f0 e4 00 00 	ld.d	r4,r8[0]
80007506:	ee e5 ff 4c 	st.d	r7[-180],r4
8000750a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000750e:	f0 16 00 02 	mcall	r6[8]
80007512:	14 90       	mov	r0,r10
80007514:	16 91       	mov	r1,r11
80007516:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000751a:	ec fa 00 18 	ld.w	r10,r6[24]
8000751e:	12 98       	mov	r8,r9
80007520:	a3 78       	lsl	r8,0x3
80007522:	12 08       	add	r8,r9
80007524:	a3 78       	lsl	r8,0x3
80007526:	f4 08 00 08 	add	r8,r10,r8
8000752a:	2c 88       	sub	r8,-56
8000752c:	f0 e8 00 00 	ld.d	r8,r8[0]
80007530:	12 94       	mov	r4,r9
80007532:	ee 14 80 00 	eorh	r4,0x8000
80007536:	ef 44 ff 54 	st.w	r7[-172],r4
8000753a:	10 9c       	mov	r12,r8
8000753c:	ef 4c ff 58 	st.w	r7[-168],r12
80007540:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007544:	ec fa 00 18 	ld.w	r10,r6[24]
80007548:	12 98       	mov	r8,r9
8000754a:	a3 78       	lsl	r8,0x3
8000754c:	12 08       	add	r8,r9
8000754e:	a3 78       	lsl	r8,0x3
80007550:	f4 08 00 08 	add	r8,r10,r8
80007554:	2d 88       	sub	r8,-40
80007556:	f0 e8 00 00 	ld.d	r8,r8[0]
8000755a:	ee ea ff 54 	ld.d	r10,r7[-172]
8000755e:	f0 16 00 11 	mcall	r6[68]
80007562:	14 98       	mov	r8,r10
80007564:	16 99       	mov	r9,r11
80007566:	10 92       	mov	r2,r8
80007568:	12 93       	mov	r3,r9
8000756a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000756e:	f0 16 00 02 	mcall	r6[8]
80007572:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007576:	ec fc 00 18 	ld.w	r12,r6[24]
8000757a:	12 98       	mov	r8,r9
8000757c:	a3 78       	lsl	r8,0x3
8000757e:	12 08       	add	r8,r9
80007580:	a3 78       	lsl	r8,0x3
80007582:	f8 08 00 08 	add	r8,r12,r8
80007586:	2c 08       	sub	r8,-64
80007588:	f0 e8 00 00 	ld.d	r8,r8[0]
8000758c:	f0 16 00 03 	mcall	r6[12]
80007590:	14 98       	mov	r8,r10
80007592:	16 99       	mov	r9,r11
80007594:	04 9a       	mov	r10,r2
80007596:	06 9b       	mov	r11,r3
80007598:	f0 16 00 05 	mcall	r6[20]
8000759c:	14 98       	mov	r8,r10
8000759e:	16 99       	mov	r9,r11
800075a0:	00 9a       	mov	r10,r0
800075a2:	02 9b       	mov	r11,r1
800075a4:	f0 16 00 03 	mcall	r6[12]
800075a8:	14 98       	mov	r8,r10
800075aa:	16 99       	mov	r9,r11
800075ac:	ee ea ff 4c 	ld.d	r10,r7[-180]
800075b0:	f0 16 00 05 	mcall	r6[20]
800075b4:	14 98       	mov	r8,r10
800075b6:	16 99       	mov	r9,r11
800075b8:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P[axis][1][2] + dt * (-P[axis][2][2] );
800075bc:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075c0:	ec fa 00 18 	ld.w	r10,r6[24]
800075c4:	12 98       	mov	r8,r9
800075c6:	a3 78       	lsl	r8,0x3
800075c8:	12 08       	add	r8,r9
800075ca:	a3 78       	lsl	r8,0x3
800075cc:	f4 08 00 08 	add	r8,r10,r8
800075d0:	2d 88       	sub	r8,-40
800075d2:	f0 e0 00 00 	ld.d	r0,r8[0]
800075d6:	ee fc ff a4 	ld.w	r12,r7[-92]
800075da:	f0 16 00 02 	mcall	r6[8]
800075de:	14 92       	mov	r2,r10
800075e0:	16 93       	mov	r3,r11
800075e2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800075e6:	ec fa 00 18 	ld.w	r10,r6[24]
800075ea:	12 98       	mov	r8,r9
800075ec:	a3 78       	lsl	r8,0x3
800075ee:	12 08       	add	r8,r9
800075f0:	a3 78       	lsl	r8,0x3
800075f2:	f4 08 00 08 	add	r8,r10,r8
800075f6:	2c 08       	sub	r8,-64
800075f8:	f0 e8 00 00 	ld.d	r8,r8[0]
800075fc:	12 9b       	mov	r11,r9
800075fe:	ee 1b 80 00 	eorh	r11,0x8000
80007602:	ef 4b ff 5c 	st.w	r7[-164],r11
80007606:	10 9a       	mov	r10,r8
80007608:	ef 4a ff 60 	st.w	r7[-160],r10
8000760c:	ee e8 ff 5c 	ld.d	r8,r7[-164]
80007610:	04 9a       	mov	r10,r2
80007612:	06 9b       	mov	r11,r3
80007614:	f0 16 00 03 	mcall	r6[12]
80007618:	14 98       	mov	r8,r10
8000761a:	16 99       	mov	r9,r11
8000761c:	00 9a       	mov	r10,r0
8000761e:	02 9b       	mov	r11,r1
80007620:	f0 16 00 05 	mcall	r6[20]
80007624:	14 98       	mov	r8,r10
80007626:	16 99       	mov	r9,r11
80007628:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P[axis][2][0] + dt * ( P[axis][2][1] );
8000762c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007630:	ec fa 00 18 	ld.w	r10,r6[24]
80007634:	12 98       	mov	r8,r9
80007636:	a3 78       	lsl	r8,0x3
80007638:	12 08       	add	r8,r9
8000763a:	a3 78       	lsl	r8,0x3
8000763c:	f4 08 00 08 	add	r8,r10,r8
80007640:	2d 08       	sub	r8,-48
80007642:	f0 e2 00 00 	ld.d	r2,r8[0]
80007646:	ee fc ff a4 	ld.w	r12,r7[-92]
8000764a:	f0 16 00 02 	mcall	r6[8]
8000764e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007652:	ec fc 00 18 	ld.w	r12,r6[24]
80007656:	12 98       	mov	r8,r9
80007658:	a3 78       	lsl	r8,0x3
8000765a:	12 08       	add	r8,r9
8000765c:	a3 78       	lsl	r8,0x3
8000765e:	f8 08 00 08 	add	r8,r12,r8
80007662:	2c 88       	sub	r8,-56
80007664:	f0 e8 00 00 	ld.d	r8,r8[0]
80007668:	f0 16 00 03 	mcall	r6[12]
8000766c:	14 98       	mov	r8,r10
8000766e:	16 99       	mov	r9,r11
80007670:	04 9a       	mov	r10,r2
80007672:	06 9b       	mov	r11,r3
80007674:	f0 16 00 05 	mcall	r6[20]
80007678:	14 98       	mov	r8,r10
8000767a:	16 99       	mov	r9,r11
8000767c:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P[axis][2][1] + dt * (-P[axis][2][2] );
80007680:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007684:	ec fa 00 18 	ld.w	r10,r6[24]
80007688:	12 98       	mov	r8,r9
8000768a:	a3 78       	lsl	r8,0x3
8000768c:	12 08       	add	r8,r9
8000768e:	a3 78       	lsl	r8,0x3
80007690:	f4 08 00 08 	add	r8,r10,r8
80007694:	2c 88       	sub	r8,-56
80007696:	f0 e2 00 00 	ld.d	r2,r8[0]
8000769a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000769e:	f0 16 00 02 	mcall	r6[8]
800076a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076a6:	ec fc 00 18 	ld.w	r12,r6[24]
800076aa:	12 98       	mov	r8,r9
800076ac:	a3 78       	lsl	r8,0x3
800076ae:	12 08       	add	r8,r9
800076b0:	a3 78       	lsl	r8,0x3
800076b2:	f8 08 00 08 	add	r8,r12,r8
800076b6:	2c 08       	sub	r8,-64
800076b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800076bc:	12 95       	mov	r5,r9
800076be:	ee 15 80 00 	eorh	r5,0x8000
800076c2:	ef 45 ff 64 	st.w	r7[-156],r5
800076c6:	10 94       	mov	r4,r8
800076c8:	ef 44 ff 68 	st.w	r7[-152],r4
800076cc:	ee e8 ff 64 	ld.d	r8,r7[-156]
800076d0:	f0 16 00 03 	mcall	r6[12]
800076d4:	14 98       	mov	r8,r10
800076d6:	16 99       	mov	r9,r11
800076d8:	04 9a       	mov	r10,r2
800076da:	06 9b       	mov	r11,r3
800076dc:	f0 16 00 05 	mcall	r6[20]
800076e0:	14 98       	mov	r8,r10
800076e2:	16 99       	mov	r9,r11
800076e4:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P[axis][2][2];
800076e8:	ee f9 ff ac 	ld.w	r9,r7[-84]
800076ec:	ec fa 00 18 	ld.w	r10,r6[24]
800076f0:	12 98       	mov	r8,r9
800076f2:	a3 78       	lsl	r8,0x3
800076f4:	12 08       	add	r8,r9
800076f6:	a3 78       	lsl	r8,0x3
800076f8:	f4 08 00 08 	add	r8,r10,r8
800076fc:	2c 08       	sub	r8,-64
800076fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80007702:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80007706:	ee f5 ff ac 	ld.w	r5,r7[-84]
8000770a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000770e:	ec fa 00 e0 	ld.w	r10,r6[224]
80007712:	12 98       	mov	r8,r9
80007714:	a1 78       	lsl	r8,0x1
80007716:	12 08       	add	r8,r9
80007718:	a3 78       	lsl	r8,0x3
8000771a:	f4 08 00 08 	add	r8,r10,r8
8000771e:	f0 ea 00 00 	ld.d	r10,r8[0]
80007722:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007726:	f0 16 00 05 	mcall	r6[20]
8000772a:	14 98       	mov	r8,r10
8000772c:	16 99       	mov	r9,r11
8000772e:	10 9a       	mov	r10,r8
80007730:	12 9b       	mov	r11,r9
80007732:	ec f9 00 18 	ld.w	r9,r6[24]
80007736:	0a 98       	mov	r8,r5
80007738:	a3 78       	lsl	r8,0x3
8000773a:	0a 08       	add	r8,r5
8000773c:	a3 78       	lsl	r8,0x3
8000773e:	f2 08 00 08 	add	r8,r9,r8
80007742:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80007746:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000774a:	ec fa 00 18 	ld.w	r10,r6[24]
8000774e:	12 98       	mov	r8,r9
80007750:	a3 78       	lsl	r8,0x3
80007752:	12 08       	add	r8,r9
80007754:	f0 cb ff ff 	sub	r11,r8,-1
80007758:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000775c:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][0][2] = FPF02;
80007760:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007764:	ec fa 00 18 	ld.w	r10,r6[24]
80007768:	12 98       	mov	r8,r9
8000776a:	a3 78       	lsl	r8,0x3
8000776c:	12 08       	add	r8,r9
8000776e:	a3 78       	lsl	r8,0x3
80007770:	f4 08 00 08 	add	r8,r10,r8
80007774:	f0 ca ff f0 	sub	r10,r8,-16
80007778:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000777c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = FPF10;
80007780:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007784:	ec fa 00 18 	ld.w	r10,r6[24]
80007788:	12 98       	mov	r8,r9
8000778a:	a3 78       	lsl	r8,0x3
8000778c:	12 08       	add	r8,r9
8000778e:	a3 78       	lsl	r8,0x3
80007790:	f4 08 00 08 	add	r8,r10,r8
80007794:	f0 ca ff e8 	sub	r10,r8,-24
80007798:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000779c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800077a0:	ee f5 ff ac 	ld.w	r5,r7[-84]
800077a4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077a8:	ec fa 00 e0 	ld.w	r10,r6[224]
800077ac:	12 98       	mov	r8,r9
800077ae:	a1 78       	lsl	r8,0x1
800077b0:	12 08       	add	r8,r9
800077b2:	2f f8       	sub	r8,-1
800077b4:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800077b8:	ee e8 ff d8 	ld.d	r8,r7[-40]
800077bc:	f0 16 00 05 	mcall	r6[20]
800077c0:	14 98       	mov	r8,r10
800077c2:	16 99       	mov	r9,r11
800077c4:	10 9a       	mov	r10,r8
800077c6:	12 9b       	mov	r11,r9
800077c8:	ec f9 00 18 	ld.w	r9,r6[24]
800077cc:	0a 98       	mov	r8,r5
800077ce:	a3 78       	lsl	r8,0x3
800077d0:	0a 08       	add	r8,r5
800077d2:	a3 78       	lsl	r8,0x3
800077d4:	f2 08 00 08 	add	r8,r9,r8
800077d8:	2e 08       	sub	r8,-32
800077da:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][1][2] = FPF12;
800077de:	ee f9 ff ac 	ld.w	r9,r7[-84]
800077e2:	ec fa 00 18 	ld.w	r10,r6[24]
800077e6:	12 98       	mov	r8,r9
800077e8:	a3 78       	lsl	r8,0x3
800077ea:	12 08       	add	r8,r9
800077ec:	a3 78       	lsl	r8,0x3
800077ee:	f4 08 00 08 	add	r8,r10,r8
800077f2:	f0 ca ff d8 	sub	r10,r8,-40
800077f6:	ee e8 ff e0 	ld.d	r8,r7[-32]
800077fa:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = FPF20;
800077fe:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007802:	ec fa 00 18 	ld.w	r10,r6[24]
80007806:	12 98       	mov	r8,r9
80007808:	a3 78       	lsl	r8,0x3
8000780a:	12 08       	add	r8,r9
8000780c:	a3 78       	lsl	r8,0x3
8000780e:	f4 08 00 08 	add	r8,r10,r8
80007812:	f0 ca ff d0 	sub	r10,r8,-48
80007816:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000781a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = FPF21;
8000781e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007822:	ec fa 00 18 	ld.w	r10,r6[24]
80007826:	12 98       	mov	r8,r9
80007828:	a3 78       	lsl	r8,0x3
8000782a:	12 08       	add	r8,r9
8000782c:	a3 78       	lsl	r8,0x3
8000782e:	f4 08 00 08 	add	r8,r10,r8
80007832:	f0 ca ff c8 	sub	r10,r8,-56
80007836:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000783a:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = FPF22 + Q[axis][BIAIS];
8000783e:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007842:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007846:	ec fa 00 e0 	ld.w	r10,r6[224]
8000784a:	12 98       	mov	r8,r9
8000784c:	a1 78       	lsl	r8,0x1
8000784e:	12 08       	add	r8,r9
80007850:	a3 78       	lsl	r8,0x3
80007852:	f4 08 00 08 	add	r8,r10,r8
80007856:	2f 08       	sub	r8,-16
80007858:	f0 ea 00 00 	ld.d	r10,r8[0]
8000785c:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007860:	f0 16 00 05 	mcall	r6[20]
80007864:	14 98       	mov	r8,r10
80007866:	16 99       	mov	r9,r11
80007868:	10 9a       	mov	r10,r8
8000786a:	12 9b       	mov	r11,r9
8000786c:	ec f9 00 18 	ld.w	r9,r6[24]
80007870:	0a 98       	mov	r8,r5
80007872:	a3 78       	lsl	r8,0x3
80007874:	0a 08       	add	r8,r5
80007876:	a3 78       	lsl	r8,0x3
80007878:	f2 08 00 08 	add	r8,r9,r8
8000787c:	2c 08       	sub	r8,-64
8000787e:	f0 eb 00 00 	st.d	r8[0],r10
	
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * ( P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1] );
80007882:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007886:	ec fa 00 1c 	ld.w	r10,r6[28]
8000788a:	12 98       	mov	r8,r9
8000788c:	a3 78       	lsl	r8,0x3
8000788e:	12 08       	add	r8,r9
80007890:	a3 78       	lsl	r8,0x3
80007892:	f4 08 00 08 	add	r8,r10,r8
80007896:	f0 ea 00 00 	ld.d	r10,r8[0]
8000789a:	ee eb ff 6c 	st.d	r7[-148],r10
8000789e:	ee fc ff a4 	ld.w	r12,r7[-92]
800078a2:	f0 16 00 02 	mcall	r6[8]
800078a6:	14 90       	mov	r0,r10
800078a8:	16 91       	mov	r1,r11
800078aa:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078ae:	ec fa 00 1c 	ld.w	r10,r6[28]
800078b2:	12 98       	mov	r8,r9
800078b4:	a3 78       	lsl	r8,0x3
800078b6:	12 08       	add	r8,r9
800078b8:	a3 78       	lsl	r8,0x3
800078ba:	f4 08 00 08 	add	r8,r10,r8
800078be:	2e 88       	sub	r8,-24
800078c0:	f0 ea 00 00 	ld.d	r10,r8[0]
800078c4:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078c8:	ec fc 00 1c 	ld.w	r12,r6[28]
800078cc:	12 98       	mov	r8,r9
800078ce:	a3 78       	lsl	r8,0x3
800078d0:	12 08       	add	r8,r9
800078d2:	2f f8       	sub	r8,-1
800078d4:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800078d8:	f0 16 00 05 	mcall	r6[20]
800078dc:	14 98       	mov	r8,r10
800078de:	16 99       	mov	r9,r11
800078e0:	10 92       	mov	r2,r8
800078e2:	12 93       	mov	r3,r9
800078e4:	ee fc ff a4 	ld.w	r12,r7[-92]
800078e8:	f0 16 00 02 	mcall	r6[8]
800078ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800078f0:	ec fc 00 1c 	ld.w	r12,r6[28]
800078f4:	12 98       	mov	r8,r9
800078f6:	a3 78       	lsl	r8,0x3
800078f8:	12 08       	add	r8,r9
800078fa:	a3 78       	lsl	r8,0x3
800078fc:	f8 08 00 08 	add	r8,r12,r8
80007900:	2e 08       	sub	r8,-32
80007902:	f0 e8 00 00 	ld.d	r8,r8[0]
80007906:	f0 16 00 03 	mcall	r6[12]
8000790a:	14 98       	mov	r8,r10
8000790c:	16 99       	mov	r9,r11
8000790e:	04 9a       	mov	r10,r2
80007910:	06 9b       	mov	r11,r3
80007912:	f0 16 00 05 	mcall	r6[20]
80007916:	14 98       	mov	r8,r10
80007918:	16 99       	mov	r9,r11
8000791a:	00 9a       	mov	r10,r0
8000791c:	02 9b       	mov	r11,r1
8000791e:	f0 16 00 03 	mcall	r6[12]
80007922:	14 98       	mov	r8,r10
80007924:	16 99       	mov	r9,r11
80007926:	ee ea ff 6c 	ld.d	r10,r7[-148]
8000792a:	f0 16 00 05 	mcall	r6[20]
8000792e:	14 98       	mov	r8,r10
80007930:	16 99       	mov	r9,r11
80007932:	ee e9 ff b8 	st.d	r7[-72],r8
	FPF01 = P2[axis][0][1] + dt * ( P2[axis][1][1] - P2[axis][0][2] - dt * P2[axis][1][2] );
80007936:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000793a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000793e:	12 98       	mov	r8,r9
80007940:	a3 78       	lsl	r8,0x3
80007942:	12 08       	add	r8,r9
80007944:	2f f8       	sub	r8,-1
80007946:	f4 08 02 34 	ld.d	r4,r10[r8<<0x3]
8000794a:	ee e5 ff 74 	st.d	r7[-140],r4
8000794e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007952:	f0 16 00 02 	mcall	r6[8]
80007956:	14 90       	mov	r0,r10
80007958:	16 91       	mov	r1,r11
8000795a:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000795e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007962:	12 98       	mov	r8,r9
80007964:	a3 78       	lsl	r8,0x3
80007966:	12 08       	add	r8,r9
80007968:	a3 78       	lsl	r8,0x3
8000796a:	f4 08 00 08 	add	r8,r10,r8
8000796e:	2e 08       	sub	r8,-32
80007970:	f0 ea 00 00 	ld.d	r10,r8[0]
80007974:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007978:	ec fc 00 1c 	ld.w	r12,r6[28]
8000797c:	12 98       	mov	r8,r9
8000797e:	a3 78       	lsl	r8,0x3
80007980:	12 08       	add	r8,r9
80007982:	a3 78       	lsl	r8,0x3
80007984:	f8 08 00 08 	add	r8,r12,r8
80007988:	2f 08       	sub	r8,-16
8000798a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000798e:	f0 16 00 11 	mcall	r6[68]
80007992:	14 98       	mov	r8,r10
80007994:	16 99       	mov	r9,r11
80007996:	10 92       	mov	r2,r8
80007998:	12 93       	mov	r3,r9
8000799a:	ee fc ff a4 	ld.w	r12,r7[-92]
8000799e:	f0 16 00 02 	mcall	r6[8]
800079a2:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079a6:	ec fc 00 1c 	ld.w	r12,r6[28]
800079aa:	12 98       	mov	r8,r9
800079ac:	a3 78       	lsl	r8,0x3
800079ae:	12 08       	add	r8,r9
800079b0:	a3 78       	lsl	r8,0x3
800079b2:	f8 08 00 08 	add	r8,r12,r8
800079b6:	2d 88       	sub	r8,-40
800079b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800079bc:	f0 16 00 03 	mcall	r6[12]
800079c0:	14 98       	mov	r8,r10
800079c2:	16 99       	mov	r9,r11
800079c4:	04 9a       	mov	r10,r2
800079c6:	06 9b       	mov	r11,r3
800079c8:	f0 16 00 11 	mcall	r6[68]
800079cc:	14 98       	mov	r8,r10
800079ce:	16 99       	mov	r9,r11
800079d0:	00 9a       	mov	r10,r0
800079d2:	02 9b       	mov	r11,r1
800079d4:	f0 16 00 03 	mcall	r6[12]
800079d8:	14 98       	mov	r8,r10
800079da:	16 99       	mov	r9,r11
800079dc:	ee ea ff 74 	ld.d	r10,r7[-140]
800079e0:	f0 16 00 05 	mcall	r6[20]
800079e4:	14 98       	mov	r8,r10
800079e6:	16 99       	mov	r9,r11
800079e8:	ee e9 ff c0 	st.d	r7[-64],r8
	FPF02 = P2[axis][0][2] + dt * ( P2[axis][1][2] );
800079ec:	ee f9 ff ac 	ld.w	r9,r7[-84]
800079f0:	ec fa 00 1c 	ld.w	r10,r6[28]
800079f4:	12 98       	mov	r8,r9
800079f6:	a3 78       	lsl	r8,0x3
800079f8:	12 08       	add	r8,r9
800079fa:	a3 78       	lsl	r8,0x3
800079fc:	f4 08 00 08 	add	r8,r10,r8
80007a00:	2f 08       	sub	r8,-16
80007a02:	f0 e2 00 00 	ld.d	r2,r8[0]
80007a06:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a0a:	f0 16 00 02 	mcall	r6[8]
80007a0e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a12:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a16:	12 98       	mov	r8,r9
80007a18:	a3 78       	lsl	r8,0x3
80007a1a:	12 08       	add	r8,r9
80007a1c:	a3 78       	lsl	r8,0x3
80007a1e:	f8 08 00 08 	add	r8,r12,r8
80007a22:	2d 88       	sub	r8,-40
80007a24:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a28:	f0 16 00 03 	mcall	r6[12]
80007a2c:	14 98       	mov	r8,r10
80007a2e:	16 99       	mov	r9,r11
80007a30:	04 9a       	mov	r10,r2
80007a32:	06 9b       	mov	r11,r3
80007a34:	f0 16 00 05 	mcall	r6[20]
80007a38:	14 98       	mov	r8,r10
80007a3a:	16 99       	mov	r9,r11
80007a3c:	ee e9 ff c8 	st.d	r7[-56],r8
	FPF10 = P2[axis][1][0] + dt * (-P2[axis][2][0] + P2[axis][1][1] - dt * P2[axis][2][1] );
80007a40:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a44:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a48:	12 98       	mov	r8,r9
80007a4a:	a3 78       	lsl	r8,0x3
80007a4c:	12 08       	add	r8,r9
80007a4e:	a3 78       	lsl	r8,0x3
80007a50:	f4 08 00 08 	add	r8,r10,r8
80007a54:	2e 88       	sub	r8,-24
80007a56:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a5a:	ee eb ff 7c 	st.d	r7[-132],r10
80007a5e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007a62:	f0 16 00 02 	mcall	r6[8]
80007a66:	14 90       	mov	r0,r10
80007a68:	16 91       	mov	r1,r11
80007a6a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a6e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007a72:	12 98       	mov	r8,r9
80007a74:	a3 78       	lsl	r8,0x3
80007a76:	12 08       	add	r8,r9
80007a78:	a3 78       	lsl	r8,0x3
80007a7a:	f4 08 00 08 	add	r8,r10,r8
80007a7e:	2e 08       	sub	r8,-32
80007a80:	f0 ea 00 00 	ld.d	r10,r8[0]
80007a84:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007a88:	ec fc 00 1c 	ld.w	r12,r6[28]
80007a8c:	12 98       	mov	r8,r9
80007a8e:	a3 78       	lsl	r8,0x3
80007a90:	12 08       	add	r8,r9
80007a92:	a3 78       	lsl	r8,0x3
80007a94:	f8 08 00 08 	add	r8,r12,r8
80007a98:	2d 08       	sub	r8,-48
80007a9a:	f0 e8 00 00 	ld.d	r8,r8[0]
80007a9e:	f0 16 00 11 	mcall	r6[68]
80007aa2:	14 98       	mov	r8,r10
80007aa4:	16 99       	mov	r9,r11
80007aa6:	10 92       	mov	r2,r8
80007aa8:	12 93       	mov	r3,r9
80007aaa:	ee fc ff a4 	ld.w	r12,r7[-92]
80007aae:	f0 16 00 02 	mcall	r6[8]
80007ab2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007ab6:	ec fc 00 1c 	ld.w	r12,r6[28]
80007aba:	12 98       	mov	r8,r9
80007abc:	a3 78       	lsl	r8,0x3
80007abe:	12 08       	add	r8,r9
80007ac0:	a3 78       	lsl	r8,0x3
80007ac2:	f8 08 00 08 	add	r8,r12,r8
80007ac6:	2c 88       	sub	r8,-56
80007ac8:	f0 e8 00 00 	ld.d	r8,r8[0]
80007acc:	f0 16 00 03 	mcall	r6[12]
80007ad0:	14 98       	mov	r8,r10
80007ad2:	16 99       	mov	r9,r11
80007ad4:	04 9a       	mov	r10,r2
80007ad6:	06 9b       	mov	r11,r3
80007ad8:	f0 16 00 11 	mcall	r6[68]
80007adc:	14 98       	mov	r8,r10
80007ade:	16 99       	mov	r9,r11
80007ae0:	00 9a       	mov	r10,r0
80007ae2:	02 9b       	mov	r11,r1
80007ae4:	f0 16 00 03 	mcall	r6[12]
80007ae8:	14 98       	mov	r8,r10
80007aea:	16 99       	mov	r9,r11
80007aec:	ee ea ff 7c 	ld.d	r10,r7[-132]
80007af0:	f0 16 00 05 	mcall	r6[20]
80007af4:	14 98       	mov	r8,r10
80007af6:	16 99       	mov	r9,r11
80007af8:	ee e9 ff d0 	st.d	r7[-48],r8
	FPF11 = P2[axis][1][1] + dt * (-P2[axis][2][1] - P2[axis][1][2] + dt * P2[axis][2][2] );
80007afc:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b00:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b04:	12 98       	mov	r8,r9
80007b06:	a3 78       	lsl	r8,0x3
80007b08:	12 08       	add	r8,r9
80007b0a:	a3 78       	lsl	r8,0x3
80007b0c:	f4 08 00 08 	add	r8,r10,r8
80007b10:	2e 08       	sub	r8,-32
80007b12:	f0 e0 00 00 	ld.d	r0,r8[0]
80007b16:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b1a:	f0 16 00 02 	mcall	r6[8]
80007b1e:	ee eb ff 84 	st.d	r7[-124],r10
80007b22:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b26:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b2a:	12 98       	mov	r8,r9
80007b2c:	a3 78       	lsl	r8,0x3
80007b2e:	12 08       	add	r8,r9
80007b30:	a3 78       	lsl	r8,0x3
80007b32:	f4 08 00 08 	add	r8,r10,r8
80007b36:	2c 88       	sub	r8,-56
80007b38:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b3c:	12 9a       	mov	r10,r9
80007b3e:	ee 1a 80 00 	eorh	r10,0x8000
80007b42:	ef 4a ff 8c 	st.w	r7[-116],r10
80007b46:	10 95       	mov	r5,r8
80007b48:	ef 45 ff 90 	st.w	r7[-112],r5
80007b4c:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b50:	ec fa 00 1c 	ld.w	r10,r6[28]
80007b54:	12 98       	mov	r8,r9
80007b56:	a3 78       	lsl	r8,0x3
80007b58:	12 08       	add	r8,r9
80007b5a:	a3 78       	lsl	r8,0x3
80007b5c:	f4 08 00 08 	add	r8,r10,r8
80007b60:	2d 88       	sub	r8,-40
80007b62:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b66:	ee ea ff 8c 	ld.d	r10,r7[-116]
80007b6a:	f0 16 00 11 	mcall	r6[68]
80007b6e:	14 98       	mov	r8,r10
80007b70:	16 99       	mov	r9,r11
80007b72:	10 92       	mov	r2,r8
80007b74:	12 93       	mov	r3,r9
80007b76:	ee fc ff a4 	ld.w	r12,r7[-92]
80007b7a:	f0 16 00 02 	mcall	r6[8]
80007b7e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007b82:	ec fc 00 1c 	ld.w	r12,r6[28]
80007b86:	12 98       	mov	r8,r9
80007b88:	a3 78       	lsl	r8,0x3
80007b8a:	12 08       	add	r8,r9
80007b8c:	a3 78       	lsl	r8,0x3
80007b8e:	f8 08 00 08 	add	r8,r12,r8
80007b92:	2c 08       	sub	r8,-64
80007b94:	f0 e8 00 00 	ld.d	r8,r8[0]
80007b98:	f0 16 00 03 	mcall	r6[12]
80007b9c:	14 98       	mov	r8,r10
80007b9e:	16 99       	mov	r9,r11
80007ba0:	04 9a       	mov	r10,r2
80007ba2:	06 9b       	mov	r11,r3
80007ba4:	f0 16 00 05 	mcall	r6[20]
80007ba8:	14 98       	mov	r8,r10
80007baa:	16 99       	mov	r9,r11
80007bac:	ee ea ff 84 	ld.d	r10,r7[-124]
80007bb0:	f0 16 00 03 	mcall	r6[12]
80007bb4:	14 98       	mov	r8,r10
80007bb6:	16 99       	mov	r9,r11
80007bb8:	00 9a       	mov	r10,r0
80007bba:	02 9b       	mov	r11,r1
80007bbc:	f0 16 00 05 	mcall	r6[20]
80007bc0:	14 98       	mov	r8,r10
80007bc2:	16 99       	mov	r9,r11
80007bc4:	ee e9 ff d8 	st.d	r7[-40],r8
	FPF12 = P2[axis][1][2] + dt * (-P2[axis][2][2] );
80007bc8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007bcc:	ec fa 00 1c 	ld.w	r10,r6[28]
80007bd0:	12 98       	mov	r8,r9
80007bd2:	a3 78       	lsl	r8,0x3
80007bd4:	12 08       	add	r8,r9
80007bd6:	a3 78       	lsl	r8,0x3
80007bd8:	f4 08 00 08 	add	r8,r10,r8
80007bdc:	2d 88       	sub	r8,-40
80007bde:	f0 e2 00 00 	ld.d	r2,r8[0]
80007be2:	ee fc ff a4 	ld.w	r12,r7[-92]
80007be6:	f0 16 00 02 	mcall	r6[8]
80007bea:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007bee:	ec fc 00 1c 	ld.w	r12,r6[28]
80007bf2:	12 98       	mov	r8,r9
80007bf4:	a3 78       	lsl	r8,0x3
80007bf6:	12 08       	add	r8,r9
80007bf8:	a3 78       	lsl	r8,0x3
80007bfa:	f8 08 00 08 	add	r8,r12,r8
80007bfe:	2c 08       	sub	r8,-64
80007c00:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c04:	12 94       	mov	r4,r9
80007c06:	ee 14 80 00 	eorh	r4,0x8000
80007c0a:	ef 44 ff 94 	st.w	r7[-108],r4
80007c0e:	10 9c       	mov	r12,r8
80007c10:	ef 4c ff 98 	st.w	r7[-104],r12
80007c14:	ee e8 ff 94 	ld.d	r8,r7[-108]
80007c18:	f0 16 00 03 	mcall	r6[12]
80007c1c:	14 98       	mov	r8,r10
80007c1e:	16 99       	mov	r9,r11
80007c20:	04 9a       	mov	r10,r2
80007c22:	06 9b       	mov	r11,r3
80007c24:	f0 16 00 05 	mcall	r6[20]
80007c28:	14 98       	mov	r8,r10
80007c2a:	16 99       	mov	r9,r11
80007c2c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF20 = P2[axis][2][0] + dt * ( P2[axis][2][1] );
80007c30:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c34:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c38:	12 98       	mov	r8,r9
80007c3a:	a3 78       	lsl	r8,0x3
80007c3c:	12 08       	add	r8,r9
80007c3e:	a3 78       	lsl	r8,0x3
80007c40:	f4 08 00 08 	add	r8,r10,r8
80007c44:	2d 08       	sub	r8,-48
80007c46:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c4a:	ee fc ff a4 	ld.w	r12,r7[-92]
80007c4e:	f0 16 00 02 	mcall	r6[8]
80007c52:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c56:	ec fc 00 1c 	ld.w	r12,r6[28]
80007c5a:	12 98       	mov	r8,r9
80007c5c:	a3 78       	lsl	r8,0x3
80007c5e:	12 08       	add	r8,r9
80007c60:	a3 78       	lsl	r8,0x3
80007c62:	f8 08 00 08 	add	r8,r12,r8
80007c66:	2c 88       	sub	r8,-56
80007c68:	f0 e8 00 00 	ld.d	r8,r8[0]
80007c6c:	f0 16 00 03 	mcall	r6[12]
80007c70:	14 98       	mov	r8,r10
80007c72:	16 99       	mov	r9,r11
80007c74:	04 9a       	mov	r10,r2
80007c76:	06 9b       	mov	r11,r3
80007c78:	f0 16 00 05 	mcall	r6[20]
80007c7c:	14 98       	mov	r8,r10
80007c7e:	16 99       	mov	r9,r11
80007c80:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF21 = P2[axis][2][1] + dt * (-P2[axis][2][2] );
80007c84:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007c88:	ec fa 00 1c 	ld.w	r10,r6[28]
80007c8c:	12 98       	mov	r8,r9
80007c8e:	a3 78       	lsl	r8,0x3
80007c90:	12 08       	add	r8,r9
80007c92:	a3 78       	lsl	r8,0x3
80007c94:	f4 08 00 08 	add	r8,r10,r8
80007c98:	2c 88       	sub	r8,-56
80007c9a:	f0 e2 00 00 	ld.d	r2,r8[0]
80007c9e:	ee fc ff a4 	ld.w	r12,r7[-92]
80007ca2:	f0 16 00 02 	mcall	r6[8]
80007ca6:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007caa:	ec fc 00 1c 	ld.w	r12,r6[28]
80007cae:	12 98       	mov	r8,r9
80007cb0:	a3 78       	lsl	r8,0x3
80007cb2:	12 08       	add	r8,r9
80007cb4:	a3 78       	lsl	r8,0x3
80007cb6:	f8 08 00 08 	add	r8,r12,r8
80007cba:	2c 08       	sub	r8,-64
80007cbc:	f0 e8 00 00 	ld.d	r8,r8[0]
80007cc0:	12 95       	mov	r5,r9
80007cc2:	ee 15 80 00 	eorh	r5,0x8000
80007cc6:	ef 45 ff 9c 	st.w	r7[-100],r5
80007cca:	10 94       	mov	r4,r8
80007ccc:	ef 44 ff a0 	st.w	r7[-96],r4
80007cd0:	ee e8 ff 9c 	ld.d	r8,r7[-100]
80007cd4:	f0 16 00 03 	mcall	r6[12]
80007cd8:	14 98       	mov	r8,r10
80007cda:	16 99       	mov	r9,r11
80007cdc:	04 9a       	mov	r10,r2
80007cde:	06 9b       	mov	r11,r3
80007ce0:	f0 16 00 05 	mcall	r6[20]
80007ce4:	14 98       	mov	r8,r10
80007ce6:	16 99       	mov	r9,r11
80007ce8:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF22 = P2[axis][2][2];
80007cec:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007cf0:	ec fa 00 1c 	ld.w	r10,r6[28]
80007cf4:	12 98       	mov	r8,r9
80007cf6:	a3 78       	lsl	r8,0x3
80007cf8:	12 08       	add	r8,r9
80007cfa:	a3 78       	lsl	r8,0x3
80007cfc:	f4 08 00 08 	add	r8,r10,r8
80007d00:	2c 08       	sub	r8,-64
80007d02:	f0 e8 00 00 	ld.d	r8,r8[0]
80007d06:	ee e9 ff f8 	st.d	r7[-8],r8
	// P = F*P*F' + Q
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80007d0a:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007d0e:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d12:	ec fa 00 e4 	ld.w	r10,r6[228]
80007d16:	12 98       	mov	r8,r9
80007d18:	a1 78       	lsl	r8,0x1
80007d1a:	12 08       	add	r8,r9
80007d1c:	a3 78       	lsl	r8,0x3
80007d1e:	f4 08 00 08 	add	r8,r10,r8
80007d22:	f0 ea 00 00 	ld.d	r10,r8[0]
80007d26:	ee e8 ff b8 	ld.d	r8,r7[-72]
80007d2a:	f0 16 00 05 	mcall	r6[20]
80007d2e:	14 98       	mov	r8,r10
80007d30:	16 99       	mov	r9,r11
80007d32:	10 9a       	mov	r10,r8
80007d34:	12 9b       	mov	r11,r9
80007d36:	ec f9 00 1c 	ld.w	r9,r6[28]
80007d3a:	0a 98       	mov	r8,r5
80007d3c:	a3 78       	lsl	r8,0x3
80007d3e:	0a 08       	add	r8,r5
80007d40:	a3 78       	lsl	r8,0x3
80007d42:	f2 08 00 08 	add	r8,r9,r8
80007d46:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
80007d4a:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d4e:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d52:	12 98       	mov	r8,r9
80007d54:	a3 78       	lsl	r8,0x3
80007d56:	12 08       	add	r8,r9
80007d58:	f0 cb ff ff 	sub	r11,r8,-1
80007d5c:	ee e8 ff c0 	ld.d	r8,r7[-64]
80007d60:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = FPF02;
80007d64:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d68:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d6c:	12 98       	mov	r8,r9
80007d6e:	a3 78       	lsl	r8,0x3
80007d70:	12 08       	add	r8,r9
80007d72:	a3 78       	lsl	r8,0x3
80007d74:	f4 08 00 08 	add	r8,r10,r8
80007d78:	f0 ca ff f0 	sub	r10,r8,-16
80007d7c:	ee e8 ff c8 	ld.d	r8,r7[-56]
80007d80:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = FPF10;
80007d84:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007d88:	ec fa 00 1c 	ld.w	r10,r6[28]
80007d8c:	12 98       	mov	r8,r9
80007d8e:	a3 78       	lsl	r8,0x3
80007d90:	12 08       	add	r8,r9
80007d92:	a3 78       	lsl	r8,0x3
80007d94:	f4 08 00 08 	add	r8,r10,r8
80007d98:	f0 ca ff e8 	sub	r10,r8,-24
80007d9c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80007da0:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
80007da4:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007da8:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007dac:	ec fa 00 e4 	ld.w	r10,r6[228]
80007db0:	12 98       	mov	r8,r9
80007db2:	a1 78       	lsl	r8,0x1
80007db4:	12 08       	add	r8,r9
80007db6:	2f f8       	sub	r8,-1
80007db8:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
80007dbc:	ee e8 ff d8 	ld.d	r8,r7[-40]
80007dc0:	f0 16 00 05 	mcall	r6[20]
80007dc4:	14 98       	mov	r8,r10
80007dc6:	16 99       	mov	r9,r11
80007dc8:	10 9a       	mov	r10,r8
80007dca:	12 9b       	mov	r11,r9
80007dcc:	ec f9 00 1c 	ld.w	r9,r6[28]
80007dd0:	0a 98       	mov	r8,r5
80007dd2:	a3 78       	lsl	r8,0x3
80007dd4:	0a 08       	add	r8,r5
80007dd6:	a3 78       	lsl	r8,0x3
80007dd8:	f2 08 00 08 	add	r8,r9,r8
80007ddc:	2e 08       	sub	r8,-32
80007dde:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][1][2] = FPF12;
80007de2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007de6:	ec fa 00 1c 	ld.w	r10,r6[28]
80007dea:	12 98       	mov	r8,r9
80007dec:	a3 78       	lsl	r8,0x3
80007dee:	12 08       	add	r8,r9
80007df0:	a3 78       	lsl	r8,0x3
80007df2:	f4 08 00 08 	add	r8,r10,r8
80007df6:	f0 ca ff d8 	sub	r10,r8,-40
80007dfa:	ee e8 ff e0 	ld.d	r8,r7[-32]
80007dfe:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = FPF20;
80007e02:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e06:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e0a:	12 98       	mov	r8,r9
80007e0c:	a3 78       	lsl	r8,0x3
80007e0e:	12 08       	add	r8,r9
80007e10:	a3 78       	lsl	r8,0x3
80007e12:	f4 08 00 08 	add	r8,r10,r8
80007e16:	f0 ca ff d0 	sub	r10,r8,-48
80007e1a:	ee e8 ff e8 	ld.d	r8,r7[-24]
80007e1e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = FPF21;
80007e22:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e26:	ec fa 00 1c 	ld.w	r10,r6[28]
80007e2a:	12 98       	mov	r8,r9
80007e2c:	a3 78       	lsl	r8,0x3
80007e2e:	12 08       	add	r8,r9
80007e30:	a3 78       	lsl	r8,0x3
80007e32:	f4 08 00 08 	add	r8,r10,r8
80007e36:	f0 ca ff c8 	sub	r10,r8,-56
80007e3a:	ee e8 ff f0 	ld.d	r8,r7[-16]
80007e3e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = FPF22 + Q2[axis][BIAIS];
80007e42:	ee f5 ff ac 	ld.w	r5,r7[-84]
80007e46:	ee f9 ff ac 	ld.w	r9,r7[-84]
80007e4a:	ec fa 00 e4 	ld.w	r10,r6[228]
80007e4e:	12 98       	mov	r8,r9
80007e50:	a1 78       	lsl	r8,0x1
80007e52:	12 08       	add	r8,r9
80007e54:	a3 78       	lsl	r8,0x3
80007e56:	f4 08 00 08 	add	r8,r10,r8
80007e5a:	2f 08       	sub	r8,-16
80007e5c:	f0 ea 00 00 	ld.d	r10,r8[0]
80007e60:	ee e8 ff f8 	ld.d	r8,r7[-8]
80007e64:	f0 16 00 05 	mcall	r6[20]
80007e68:	14 98       	mov	r8,r10
80007e6a:	16 99       	mov	r9,r11
80007e6c:	10 9a       	mov	r10,r8
80007e6e:	12 9b       	mov	r11,r9
80007e70:	ec f9 00 1c 	ld.w	r9,r6[28]
80007e74:	0a 98       	mov	r8,r5
80007e76:	a3 78       	lsl	r8,0x3
80007e78:	0a 08       	add	r8,r5
80007e7a:	a3 78       	lsl	r8,0x3
80007e7c:	f2 08 00 08 	add	r8,r9,r8
80007e80:	2c 08       	sub	r8,-64
80007e82:	f0 eb 00 00 	st.d	r8[0],r10
}
80007e86:	2c dd       	sub	sp,-204
80007e88:	d8 32       	popm	r0-r7,pc
80007e8a:	00 00       	add	r0,r0
80007e8c:	80 00       	ld.sh	r0,r0[0x0]
80007e8e:	70 12       	ld.w	r2,r8[0x4]

80007e90 <e_kalman_predict_hf>:


void e_kalman_predict_hf(int axis, float accel_meas, float dt)
{
80007e90:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80007e94:	1a 97       	mov	r7,sp
80007e96:	20 fd       	sub	sp,60
80007e98:	fe f6 05 88 	ld.w	r6,pc[1416]
80007e9c:	1e 26       	rsub	r6,pc
80007e9e:	ef 4c ff dc 	st.w	r7[-36],r12
80007ea2:	ef 4b ff d8 	st.w	r7[-40],r11
80007ea6:	ef 4a ff d4 	st.w	r7[-44],r10
	double FPF00,FPF01,FPF10,FPF11;
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED] + dt*dt*accel_meas;
80007eaa:	ec f8 00 00 	ld.w	r8,r6[0]
80007eae:	70 01       	ld.w	r1,r8[0x0]
80007eb0:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007eb4:	ec f8 00 00 	ld.w	r8,r6[0]
80007eb8:	70 0a       	ld.w	r10,r8[0x0]
80007eba:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ebe:	12 98       	mov	r8,r9
80007ec0:	a1 78       	lsl	r8,0x1
80007ec2:	12 08       	add	r8,r9
80007ec4:	a3 78       	lsl	r8,0x3
80007ec6:	f4 08 00 08 	add	r8,r10,r8
80007eca:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007ece:	f0 e2 00 00 	ld.d	r2,r8[0]
80007ed2:	ee fc ff d4 	ld.w	r12,r7[-44]
80007ed6:	f0 16 00 02 	mcall	r6[8]
80007eda:	ec f8 00 00 	ld.w	r8,r6[0]
80007ede:	70 0c       	ld.w	r12,r8[0x0]
80007ee0:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ee4:	12 98       	mov	r8,r9
80007ee6:	a1 78       	lsl	r8,0x1
80007ee8:	12 08       	add	r8,r9
80007eea:	2f f8       	sub	r8,-1
80007eec:	a3 78       	lsl	r8,0x3
80007eee:	f8 08 00 08 	add	r8,r12,r8
80007ef2:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80007ef6:	f0 16 00 03 	mcall	r6[12]
80007efa:	14 98       	mov	r8,r10
80007efc:	16 99       	mov	r9,r11
80007efe:	04 9a       	mov	r10,r2
80007f00:	06 9b       	mov	r11,r3
80007f02:	f0 16 00 05 	mcall	r6[20]
80007f06:	14 98       	mov	r8,r10
80007f08:	16 99       	mov	r9,r11
80007f0a:	10 92       	mov	r2,r8
80007f0c:	12 93       	mov	r3,r9
80007f0e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80007f12:	ee f8 ff d4 	ld.w	r8,r7[-44]
80007f16:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80007f1a:	ee f8 ff d8 	ld.w	r8,r7[-40]
80007f1e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80007f22:	10 9c       	mov	r12,r8
80007f24:	f0 16 00 02 	mcall	r6[8]
80007f28:	14 98       	mov	r8,r10
80007f2a:	16 99       	mov	r9,r11
80007f2c:	04 9a       	mov	r10,r2
80007f2e:	06 9b       	mov	r11,r3
80007f30:	f0 16 00 05 	mcall	r6[20]
80007f34:	14 98       	mov	r8,r10
80007f36:	16 99       	mov	r9,r11
80007f38:	10 9a       	mov	r10,r8
80007f3a:	12 9b       	mov	r11,r9
80007f3c:	0a 98       	mov	r8,r5
80007f3e:	a1 78       	lsl	r8,0x1
80007f40:	0a 08       	add	r8,r5
80007f42:	a3 78       	lsl	r8,0x3
80007f44:	e2 08 00 08 	add	r8,r1,r8
80007f48:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007f4c:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + dt * centralData->estimation.state[axis][SPEED];
80007f50:	ec f8 00 00 	ld.w	r8,r6[0]
80007f54:	70 01       	ld.w	r1,r8[0x0]
80007f56:	ee f5 ff dc 	ld.w	r5,r7[-36]
80007f5a:	ec f8 00 00 	ld.w	r8,r6[0]
80007f5e:	70 0a       	ld.w	r10,r8[0x0]
80007f60:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f64:	12 98       	mov	r8,r9
80007f66:	a1 78       	lsl	r8,0x1
80007f68:	12 08       	add	r8,r9
80007f6a:	a3 78       	lsl	r8,0x3
80007f6c:	f4 08 00 08 	add	r8,r10,r8
80007f70:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007f74:	f0 e2 00 00 	ld.d	r2,r8[0]
80007f78:	ee fc ff d4 	ld.w	r12,r7[-44]
80007f7c:	f0 16 00 02 	mcall	r6[8]
80007f80:	ec f8 00 00 	ld.w	r8,r6[0]
80007f84:	70 0c       	ld.w	r12,r8[0x0]
80007f86:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007f8a:	12 98       	mov	r8,r9
80007f8c:	a1 78       	lsl	r8,0x1
80007f8e:	12 08       	add	r8,r9
80007f90:	2f f8       	sub	r8,-1
80007f92:	a3 78       	lsl	r8,0x3
80007f94:	f8 08 00 08 	add	r8,r12,r8
80007f98:	f0 e8 07 a4 	ld.d	r8,r8[1956]
80007f9c:	f0 16 00 03 	mcall	r6[12]
80007fa0:	14 98       	mov	r8,r10
80007fa2:	16 99       	mov	r9,r11
80007fa4:	04 9a       	mov	r10,r2
80007fa6:	06 9b       	mov	r11,r3
80007fa8:	f0 16 00 05 	mcall	r6[20]
80007fac:	14 98       	mov	r8,r10
80007fae:	16 99       	mov	r9,r11
80007fb0:	10 9a       	mov	r10,r8
80007fb2:	12 9b       	mov	r11,r9
80007fb4:	0a 98       	mov	r8,r5
80007fb6:	a1 78       	lsl	r8,0x1
80007fb8:	0a 08       	add	r8,r5
80007fba:	a3 78       	lsl	r8,0x3
80007fbc:	e2 08 00 08 	add	r8,r1,r8
80007fc0:	f0 c8 f8 5c 	sub	r8,r8,-1956
80007fc4:	f0 eb 00 00 	st.d	r8[0],r10
	
	FPF00 = P[axis][0][0] + dt * (P[axis][1][0] + P[axis][0][1] + dt * P[axis][1][1]);
80007fc8:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007fcc:	ec fa 00 18 	ld.w	r10,r6[24]
80007fd0:	12 98       	mov	r8,r9
80007fd2:	a3 78       	lsl	r8,0x3
80007fd4:	12 08       	add	r8,r9
80007fd6:	a3 78       	lsl	r8,0x3
80007fd8:	f4 08 00 08 	add	r8,r10,r8
80007fdc:	f0 e2 00 00 	ld.d	r2,r8[0]
80007fe0:	ee fc ff d4 	ld.w	r12,r7[-44]
80007fe4:	f0 16 00 02 	mcall	r6[8]
80007fe8:	14 90       	mov	r0,r10
80007fea:	16 91       	mov	r1,r11
80007fec:	ee f9 ff dc 	ld.w	r9,r7[-36]
80007ff0:	ec fa 00 18 	ld.w	r10,r6[24]
80007ff4:	12 98       	mov	r8,r9
80007ff6:	a3 78       	lsl	r8,0x3
80007ff8:	12 08       	add	r8,r9
80007ffa:	a3 78       	lsl	r8,0x3
80007ffc:	f4 08 00 08 	add	r8,r10,r8
80008000:	2e 88       	sub	r8,-24
80008002:	f0 ea 00 00 	ld.d	r10,r8[0]
80008006:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000800a:	ec fc 00 18 	ld.w	r12,r6[24]
8000800e:	12 98       	mov	r8,r9
80008010:	a3 78       	lsl	r8,0x3
80008012:	12 08       	add	r8,r9
80008014:	2f f8       	sub	r8,-1
80008016:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000801a:	f0 16 00 05 	mcall	r6[20]
8000801e:	14 98       	mov	r8,r10
80008020:	16 99       	mov	r9,r11
80008022:	ee e9 ff c4 	st.d	r7[-60],r8
80008026:	ee fc ff d4 	ld.w	r12,r7[-44]
8000802a:	f0 16 00 02 	mcall	r6[8]
8000802e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008032:	ec fc 00 18 	ld.w	r12,r6[24]
80008036:	12 98       	mov	r8,r9
80008038:	a3 78       	lsl	r8,0x3
8000803a:	12 08       	add	r8,r9
8000803c:	a3 78       	lsl	r8,0x3
8000803e:	f8 08 00 08 	add	r8,r12,r8
80008042:	2e 08       	sub	r8,-32
80008044:	f0 e8 00 00 	ld.d	r8,r8[0]
80008048:	f0 16 00 03 	mcall	r6[12]
8000804c:	14 98       	mov	r8,r10
8000804e:	16 99       	mov	r9,r11
80008050:	ee ea ff c4 	ld.d	r10,r7[-60]
80008054:	f0 16 00 05 	mcall	r6[20]
80008058:	14 98       	mov	r8,r10
8000805a:	16 99       	mov	r9,r11
8000805c:	00 9a       	mov	r10,r0
8000805e:	02 9b       	mov	r11,r1
80008060:	f0 16 00 03 	mcall	r6[12]
80008064:	14 98       	mov	r8,r10
80008066:	16 99       	mov	r9,r11
80008068:	04 9a       	mov	r10,r2
8000806a:	06 9b       	mov	r11,r3
8000806c:	f0 16 00 05 	mcall	r6[20]
80008070:	14 98       	mov	r8,r10
80008072:	16 99       	mov	r9,r11
80008074:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P[axis][0][1] + dt * P[axis][1][1];
80008078:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000807c:	ec fa 00 18 	ld.w	r10,r6[24]
80008080:	12 98       	mov	r8,r9
80008082:	a3 78       	lsl	r8,0x3
80008084:	12 08       	add	r8,r9
80008086:	2f f8       	sub	r8,-1
80008088:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
8000808c:	ee fc ff d4 	ld.w	r12,r7[-44]
80008090:	f0 16 00 02 	mcall	r6[8]
80008094:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008098:	ec fc 00 18 	ld.w	r12,r6[24]
8000809c:	12 98       	mov	r8,r9
8000809e:	a3 78       	lsl	r8,0x3
800080a0:	12 08       	add	r8,r9
800080a2:	a3 78       	lsl	r8,0x3
800080a4:	f8 08 00 08 	add	r8,r12,r8
800080a8:	2e 08       	sub	r8,-32
800080aa:	f0 e8 00 00 	ld.d	r8,r8[0]
800080ae:	f0 16 00 03 	mcall	r6[12]
800080b2:	14 98       	mov	r8,r10
800080b4:	16 99       	mov	r9,r11
800080b6:	04 9a       	mov	r10,r2
800080b8:	06 9b       	mov	r11,r3
800080ba:	f0 16 00 05 	mcall	r6[20]
800080be:	14 98       	mov	r8,r10
800080c0:	16 99       	mov	r9,r11
800080c2:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P[axis][1][0] + dt * P[axis][1][1];
800080c6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080ca:	ec fa 00 18 	ld.w	r10,r6[24]
800080ce:	12 98       	mov	r8,r9
800080d0:	a3 78       	lsl	r8,0x3
800080d2:	12 08       	add	r8,r9
800080d4:	a3 78       	lsl	r8,0x3
800080d6:	f4 08 00 08 	add	r8,r10,r8
800080da:	2e 88       	sub	r8,-24
800080dc:	f0 e2 00 00 	ld.d	r2,r8[0]
800080e0:	ee fc ff d4 	ld.w	r12,r7[-44]
800080e4:	f0 16 00 02 	mcall	r6[8]
800080e8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800080ec:	ec fc 00 18 	ld.w	r12,r6[24]
800080f0:	12 98       	mov	r8,r9
800080f2:	a3 78       	lsl	r8,0x3
800080f4:	12 08       	add	r8,r9
800080f6:	a3 78       	lsl	r8,0x3
800080f8:	f8 08 00 08 	add	r8,r12,r8
800080fc:	2e 08       	sub	r8,-32
800080fe:	f0 e8 00 00 	ld.d	r8,r8[0]
80008102:	f0 16 00 03 	mcall	r6[12]
80008106:	14 98       	mov	r8,r10
80008108:	16 99       	mov	r9,r11
8000810a:	04 9a       	mov	r10,r2
8000810c:	06 9b       	mov	r11,r3
8000810e:	f0 16 00 05 	mcall	r6[20]
80008112:	14 98       	mov	r8,r10
80008114:	16 99       	mov	r9,r11
80008116:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P[axis][1][1];
8000811a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000811e:	ec fa 00 18 	ld.w	r10,r6[24]
80008122:	12 98       	mov	r8,r9
80008124:	a3 78       	lsl	r8,0x3
80008126:	12 08       	add	r8,r9
80008128:	a3 78       	lsl	r8,0x3
8000812a:	f4 08 00 08 	add	r8,r10,r8
8000812e:	2e 08       	sub	r8,-32
80008130:	f0 e8 00 00 	ld.d	r8,r8[0]
80008134:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P[axis][0][0] = FPF00 + Q[axis][POSITION];
80008138:	ee f5 ff dc 	ld.w	r5,r7[-36]
8000813c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008140:	ec fa 00 e0 	ld.w	r10,r6[224]
80008144:	12 98       	mov	r8,r9
80008146:	a1 78       	lsl	r8,0x1
80008148:	12 08       	add	r8,r9
8000814a:	a3 78       	lsl	r8,0x3
8000814c:	f4 08 00 08 	add	r8,r10,r8
80008150:	f0 ea 00 00 	ld.d	r10,r8[0]
80008154:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008158:	f0 16 00 05 	mcall	r6[20]
8000815c:	14 98       	mov	r8,r10
8000815e:	16 99       	mov	r9,r11
80008160:	10 9a       	mov	r10,r8
80008162:	12 9b       	mov	r11,r9
80008164:	ec f9 00 18 	ld.w	r9,r6[24]
80008168:	0a 98       	mov	r8,r5
8000816a:	a3 78       	lsl	r8,0x3
8000816c:	0a 08       	add	r8,r5
8000816e:	a3 78       	lsl	r8,0x3
80008170:	f2 08 00 08 	add	r8,r9,r8
80008174:	f0 eb 00 00 	st.d	r8[0],r10
	P[axis][0][1] = FPF01;
80008178:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000817c:	ec fa 00 18 	ld.w	r10,r6[24]
80008180:	12 98       	mov	r8,r9
80008182:	a3 78       	lsl	r8,0x3
80008184:	12 08       	add	r8,r9
80008186:	f0 cb ff ff 	sub	r11,r8,-1
8000818a:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000818e:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = FPF10;
80008192:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008196:	ec fa 00 18 	ld.w	r10,r6[24]
8000819a:	12 98       	mov	r8,r9
8000819c:	a3 78       	lsl	r8,0x3
8000819e:	12 08       	add	r8,r9
800081a0:	a3 78       	lsl	r8,0x3
800081a2:	f4 08 00 08 	add	r8,r10,r8
800081a6:	f0 ca ff e8 	sub	r10,r8,-24
800081aa:	ee e8 ff f0 	ld.d	r8,r7[-16]
800081ae:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = FPF11 + Q[axis][SPEED];
800081b2:	ee f5 ff dc 	ld.w	r5,r7[-36]
800081b6:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081ba:	ec fa 00 e0 	ld.w	r10,r6[224]
800081be:	12 98       	mov	r8,r9
800081c0:	a1 78       	lsl	r8,0x1
800081c2:	12 08       	add	r8,r9
800081c4:	2f f8       	sub	r8,-1
800081c6:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800081ca:	ee e8 ff f8 	ld.d	r8,r7[-8]
800081ce:	f0 16 00 05 	mcall	r6[20]
800081d2:	14 98       	mov	r8,r10
800081d4:	16 99       	mov	r9,r11
800081d6:	10 9a       	mov	r10,r8
800081d8:	12 9b       	mov	r11,r9
800081da:	ec f9 00 18 	ld.w	r9,r6[24]
800081de:	0a 98       	mov	r8,r5
800081e0:	a3 78       	lsl	r8,0x3
800081e2:	0a 08       	add	r8,r5
800081e4:	a3 78       	lsl	r8,0x3
800081e6:	f2 08 00 08 	add	r8,r9,r8
800081ea:	2e 08       	sub	r8,-32
800081ec:	f0 eb 00 00 	st.d	r8[0],r10
	
	/*************************************************************************************/
	FPF00 = P2[axis][0][0] + dt * (P2[axis][1][0] + P2[axis][0][1] + dt * P2[axis][1][1]);
800081f0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800081f4:	ec fa 00 1c 	ld.w	r10,r6[28]
800081f8:	12 98       	mov	r8,r9
800081fa:	a3 78       	lsl	r8,0x3
800081fc:	12 08       	add	r8,r9
800081fe:	a3 78       	lsl	r8,0x3
80008200:	f4 08 00 08 	add	r8,r10,r8
80008204:	f0 e2 00 00 	ld.d	r2,r8[0]
80008208:	ee fc ff d4 	ld.w	r12,r7[-44]
8000820c:	f0 16 00 02 	mcall	r6[8]
80008210:	14 90       	mov	r0,r10
80008212:	16 91       	mov	r1,r11
80008214:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008218:	ec fa 00 1c 	ld.w	r10,r6[28]
8000821c:	12 98       	mov	r8,r9
8000821e:	a3 78       	lsl	r8,0x3
80008220:	12 08       	add	r8,r9
80008222:	a3 78       	lsl	r8,0x3
80008224:	f4 08 00 08 	add	r8,r10,r8
80008228:	2e 88       	sub	r8,-24
8000822a:	f0 ea 00 00 	ld.d	r10,r8[0]
8000822e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008232:	ec fc 00 1c 	ld.w	r12,r6[28]
80008236:	12 98       	mov	r8,r9
80008238:	a3 78       	lsl	r8,0x3
8000823a:	12 08       	add	r8,r9
8000823c:	2f f8       	sub	r8,-1
8000823e:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008242:	f0 16 00 05 	mcall	r6[20]
80008246:	14 98       	mov	r8,r10
80008248:	16 99       	mov	r9,r11
8000824a:	ee e9 ff cc 	st.d	r7[-52],r8
8000824e:	ee fc ff d4 	ld.w	r12,r7[-44]
80008252:	f0 16 00 02 	mcall	r6[8]
80008256:	ee f9 ff dc 	ld.w	r9,r7[-36]
8000825a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000825e:	12 98       	mov	r8,r9
80008260:	a3 78       	lsl	r8,0x3
80008262:	12 08       	add	r8,r9
80008264:	a3 78       	lsl	r8,0x3
80008266:	f8 08 00 08 	add	r8,r12,r8
8000826a:	2e 08       	sub	r8,-32
8000826c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008270:	f0 16 00 03 	mcall	r6[12]
80008274:	14 98       	mov	r8,r10
80008276:	16 99       	mov	r9,r11
80008278:	ee ea ff cc 	ld.d	r10,r7[-52]
8000827c:	f0 16 00 05 	mcall	r6[20]
80008280:	14 98       	mov	r8,r10
80008282:	16 99       	mov	r9,r11
80008284:	00 9a       	mov	r10,r0
80008286:	02 9b       	mov	r11,r1
80008288:	f0 16 00 03 	mcall	r6[12]
8000828c:	14 98       	mov	r8,r10
8000828e:	16 99       	mov	r9,r11
80008290:	04 9a       	mov	r10,r2
80008292:	06 9b       	mov	r11,r3
80008294:	f0 16 00 05 	mcall	r6[20]
80008298:	14 98       	mov	r8,r10
8000829a:	16 99       	mov	r9,r11
8000829c:	ee e9 ff e0 	st.d	r7[-32],r8
	FPF01 = P2[axis][0][1] + dt * P2[axis][1][1];
800082a0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082a4:	ec fa 00 1c 	ld.w	r10,r6[28]
800082a8:	12 98       	mov	r8,r9
800082aa:	a3 78       	lsl	r8,0x3
800082ac:	12 08       	add	r8,r9
800082ae:	2f f8       	sub	r8,-1
800082b0:	f4 08 02 32 	ld.d	r2,r10[r8<<0x3]
800082b4:	ee fc ff d4 	ld.w	r12,r7[-44]
800082b8:	f0 16 00 02 	mcall	r6[8]
800082bc:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082c0:	ec fc 00 1c 	ld.w	r12,r6[28]
800082c4:	12 98       	mov	r8,r9
800082c6:	a3 78       	lsl	r8,0x3
800082c8:	12 08       	add	r8,r9
800082ca:	a3 78       	lsl	r8,0x3
800082cc:	f8 08 00 08 	add	r8,r12,r8
800082d0:	2e 08       	sub	r8,-32
800082d2:	f0 e8 00 00 	ld.d	r8,r8[0]
800082d6:	f0 16 00 03 	mcall	r6[12]
800082da:	14 98       	mov	r8,r10
800082dc:	16 99       	mov	r9,r11
800082de:	04 9a       	mov	r10,r2
800082e0:	06 9b       	mov	r11,r3
800082e2:	f0 16 00 05 	mcall	r6[20]
800082e6:	14 98       	mov	r8,r10
800082e8:	16 99       	mov	r9,r11
800082ea:	ee e9 ff e8 	st.d	r7[-24],r8
	FPF10 = P2[axis][1][0] + dt * P2[axis][1][1];
800082ee:	ee f9 ff dc 	ld.w	r9,r7[-36]
800082f2:	ec fa 00 1c 	ld.w	r10,r6[28]
800082f6:	12 98       	mov	r8,r9
800082f8:	a3 78       	lsl	r8,0x3
800082fa:	12 08       	add	r8,r9
800082fc:	a3 78       	lsl	r8,0x3
800082fe:	f4 08 00 08 	add	r8,r10,r8
80008302:	2e 88       	sub	r8,-24
80008304:	f0 e2 00 00 	ld.d	r2,r8[0]
80008308:	ee fc ff d4 	ld.w	r12,r7[-44]
8000830c:	f0 16 00 02 	mcall	r6[8]
80008310:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008314:	ec fc 00 1c 	ld.w	r12,r6[28]
80008318:	12 98       	mov	r8,r9
8000831a:	a3 78       	lsl	r8,0x3
8000831c:	12 08       	add	r8,r9
8000831e:	a3 78       	lsl	r8,0x3
80008320:	f8 08 00 08 	add	r8,r12,r8
80008324:	2e 08       	sub	r8,-32
80008326:	f0 e8 00 00 	ld.d	r8,r8[0]
8000832a:	f0 16 00 03 	mcall	r6[12]
8000832e:	14 98       	mov	r8,r10
80008330:	16 99       	mov	r9,r11
80008332:	04 9a       	mov	r10,r2
80008334:	06 9b       	mov	r11,r3
80008336:	f0 16 00 05 	mcall	r6[20]
8000833a:	14 98       	mov	r8,r10
8000833c:	16 99       	mov	r9,r11
8000833e:	ee e9 ff f0 	st.d	r7[-16],r8
	FPF11 = P2[axis][1][1];
80008342:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008346:	ec fa 00 1c 	ld.w	r10,r6[28]
8000834a:	12 98       	mov	r8,r9
8000834c:	a3 78       	lsl	r8,0x3
8000834e:	12 08       	add	r8,r9
80008350:	a3 78       	lsl	r8,0x3
80008352:	f4 08 00 08 	add	r8,r10,r8
80008356:	2e 08       	sub	r8,-32
80008358:	f0 e8 00 00 	ld.d	r8,r8[0]
8000835c:	ee e9 ff f8 	st.d	r7[-8],r8
	
	P2[axis][0][0] = FPF00 + Q2[axis][POSITION];
80008360:	ee f5 ff dc 	ld.w	r5,r7[-36]
80008364:	ee f9 ff dc 	ld.w	r9,r7[-36]
80008368:	ec fa 00 e4 	ld.w	r10,r6[228]
8000836c:	12 98       	mov	r8,r9
8000836e:	a1 78       	lsl	r8,0x1
80008370:	12 08       	add	r8,r9
80008372:	a3 78       	lsl	r8,0x3
80008374:	f4 08 00 08 	add	r8,r10,r8
80008378:	f0 ea 00 00 	ld.d	r10,r8[0]
8000837c:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008380:	f0 16 00 05 	mcall	r6[20]
80008384:	14 98       	mov	r8,r10
80008386:	16 99       	mov	r9,r11
80008388:	10 9a       	mov	r10,r8
8000838a:	12 9b       	mov	r11,r9
8000838c:	ec f9 00 1c 	ld.w	r9,r6[28]
80008390:	0a 98       	mov	r8,r5
80008392:	a3 78       	lsl	r8,0x3
80008394:	0a 08       	add	r8,r5
80008396:	a3 78       	lsl	r8,0x3
80008398:	f2 08 00 08 	add	r8,r9,r8
8000839c:	f0 eb 00 00 	st.d	r8[0],r10
	P2[axis][0][1] = FPF01;
800083a0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083a4:	ec fa 00 1c 	ld.w	r10,r6[28]
800083a8:	12 98       	mov	r8,r9
800083aa:	a3 78       	lsl	r8,0x3
800083ac:	12 08       	add	r8,r9
800083ae:	f0 cb ff ff 	sub	r11,r8,-1
800083b2:	ee e8 ff e8 	ld.d	r8,r7[-24]
800083b6:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = FPF10;
800083ba:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083be:	ec fa 00 1c 	ld.w	r10,r6[28]
800083c2:	12 98       	mov	r8,r9
800083c4:	a3 78       	lsl	r8,0x3
800083c6:	12 08       	add	r8,r9
800083c8:	a3 78       	lsl	r8,0x3
800083ca:	f4 08 00 08 	add	r8,r10,r8
800083ce:	f0 ca ff e8 	sub	r10,r8,-24
800083d2:	ee e8 ff f0 	ld.d	r8,r7[-16]
800083d6:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = FPF11 + Q2[axis][SPEED];
800083da:	ee f5 ff dc 	ld.w	r5,r7[-36]
800083de:	ee f9 ff dc 	ld.w	r9,r7[-36]
800083e2:	ec fa 00 e4 	ld.w	r10,r6[228]
800083e6:	12 98       	mov	r8,r9
800083e8:	a1 78       	lsl	r8,0x1
800083ea:	12 08       	add	r8,r9
800083ec:	2f f8       	sub	r8,-1
800083ee:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800083f2:	ee e8 ff f8 	ld.d	r8,r7[-8]
800083f6:	f0 16 00 05 	mcall	r6[20]
800083fa:	14 98       	mov	r8,r10
800083fc:	16 99       	mov	r9,r11
800083fe:	10 9a       	mov	r10,r8
80008400:	12 9b       	mov	r11,r9
80008402:	ec f9 00 1c 	ld.w	r9,r6[28]
80008406:	0a 98       	mov	r8,r5
80008408:	a3 78       	lsl	r8,0x3
8000840a:	0a 08       	add	r8,r5
8000840c:	a3 78       	lsl	r8,0x3
8000840e:	f2 08 00 08 	add	r8,r9,r8
80008412:	2e 08       	sub	r8,-32
80008414:	f0 eb 00 00 	st.d	r8[0],r10
}
80008418:	2f 1d       	sub	sp,-60
8000841a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000841e:	00 00       	add	r0,r0
80008420:	80 00       	ld.sh	r0,r0[0x0]
80008422:	7d 20       	ld.w	r0,lr[0x48]

80008424 <e_kalman_update_position>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position (int axis, double position_meas)
{
80008424:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80008428:	1a 97       	mov	r7,sp
8000842a:	fa cd 00 e4 	sub	sp,sp,228
8000842e:	fe f6 0b fe 	ld.w	r6,pc[3070]
80008432:	1e 26       	rsub	r6,pc
80008434:	ef 4c ff 84 	st.w	r7[-124],r12
80008438:	ee eb ff 7c 	st.d	r7[-132],r10
	double y,y2,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;

	y = position_meas - centralData->estimation.state[axis][POSITION];
8000843c:	ec f8 00 00 	ld.w	r8,r6[0]
80008440:	70 0a       	ld.w	r10,r8[0x0]
80008442:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008446:	12 98       	mov	r8,r9
80008448:	a1 78       	lsl	r8,0x1
8000844a:	12 08       	add	r8,r9
8000844c:	a3 78       	lsl	r8,0x3
8000844e:	f4 08 00 08 	add	r8,r10,r8
80008452:	f0 c8 f8 5c 	sub	r8,r8,-1956
80008456:	f0 e8 00 00 	ld.d	r8,r8[0]
8000845a:	ee ea ff 7c 	ld.d	r10,r7[-132]
8000845e:	f0 16 00 11 	mcall	r6[68]
80008462:	14 98       	mov	r8,r10
80008464:	16 99       	mov	r9,r11
80008466:	ee e9 ff 88 	st.d	r7[-120],r8
	
	
	S = P[axis][0][0] + R[axis];
8000846a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000846e:	ec fa 00 18 	ld.w	r10,r6[24]
80008472:	12 98       	mov	r8,r9
80008474:	a3 78       	lsl	r8,0x3
80008476:	12 08       	add	r8,r9
80008478:	a3 78       	lsl	r8,0x3
8000847a:	f4 08 00 08 	add	r8,r10,r8
8000847e:	f0 ea 00 00 	ld.d	r10,r8[0]
80008482:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008486:	ec f8 01 74 	ld.w	r8,r6[372]
8000848a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000848e:	f0 16 00 05 	mcall	r6[20]
80008492:	14 98       	mov	r8,r10
80008494:	16 99       	mov	r9,r11
80008496:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][0] * 1/S;
8000849a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000849e:	ec fa 00 18 	ld.w	r10,r6[24]
800084a2:	12 98       	mov	r8,r9
800084a4:	a3 78       	lsl	r8,0x3
800084a6:	12 08       	add	r8,r9
800084a8:	a3 78       	lsl	r8,0x3
800084aa:	f4 08 00 08 	add	r8,r10,r8
800084ae:	f0 ea 00 00 	ld.d	r10,r8[0]
800084b2:	ee e8 ff 98 	ld.d	r8,r7[-104]
800084b6:	f0 16 00 0c 	mcall	r6[48]
800084ba:	14 98       	mov	r8,r10
800084bc:	16 99       	mov	r9,r11
800084be:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][0] * 1/S;
800084c2:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084c6:	ec fa 00 18 	ld.w	r10,r6[24]
800084ca:	12 98       	mov	r8,r9
800084cc:	a3 78       	lsl	r8,0x3
800084ce:	12 08       	add	r8,r9
800084d0:	a3 78       	lsl	r8,0x3
800084d2:	f4 08 00 08 	add	r8,r10,r8
800084d6:	2e 88       	sub	r8,-24
800084d8:	f0 ea 00 00 	ld.d	r10,r8[0]
800084dc:	ee e8 ff 98 	ld.d	r8,r7[-104]
800084e0:	f0 16 00 0c 	mcall	r6[48]
800084e4:	14 98       	mov	r8,r10
800084e6:	16 99       	mov	r9,r11
800084e8:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][0] * 1/S;
800084ec:	ee f9 ff 84 	ld.w	r9,r7[-124]
800084f0:	ec fa 00 18 	ld.w	r10,r6[24]
800084f4:	12 98       	mov	r8,r9
800084f6:	a3 78       	lsl	r8,0x3
800084f8:	12 08       	add	r8,r9
800084fa:	a3 78       	lsl	r8,0x3
800084fc:	f4 08 00 08 	add	r8,r10,r8
80008500:	2d 08       	sub	r8,-48
80008502:	f0 ea 00 00 	ld.d	r10,r8[0]
80008506:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000850a:	f0 16 00 0c 	mcall	r6[48]
8000850e:	14 98       	mov	r8,r10
80008510:	16 99       	mov	r9,r11
80008512:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * y;
80008516:	ec f8 00 00 	ld.w	r8,r6[0]
8000851a:	70 01       	ld.w	r1,r8[0x0]
8000851c:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008520:	ec f8 00 00 	ld.w	r8,r6[0]
80008524:	70 0a       	ld.w	r10,r8[0x0]
80008526:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000852a:	12 98       	mov	r8,r9
8000852c:	a1 78       	lsl	r8,0x1
8000852e:	12 08       	add	r8,r9
80008530:	a3 78       	lsl	r8,0x3
80008532:	f4 08 00 08 	add	r8,r10,r8
80008536:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000853a:	f0 e2 00 00 	ld.d	r2,r8[0]
8000853e:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008542:	ee ea ff a0 	ld.d	r10,r7[-96]
80008546:	f0 16 00 03 	mcall	r6[12]
8000854a:	14 98       	mov	r8,r10
8000854c:	16 99       	mov	r9,r11
8000854e:	04 9a       	mov	r10,r2
80008550:	06 9b       	mov	r11,r3
80008552:	f0 16 00 05 	mcall	r6[20]
80008556:	14 98       	mov	r8,r10
80008558:	16 99       	mov	r9,r11
8000855a:	10 9a       	mov	r10,r8
8000855c:	12 9b       	mov	r11,r9
8000855e:	0a 98       	mov	r8,r5
80008560:	a1 78       	lsl	r8,0x1
80008562:	0a 08       	add	r8,r5
80008564:	a3 78       	lsl	r8,0x3
80008566:	e2 08 00 08 	add	r8,r1,r8
8000856a:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000856e:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * y;
80008572:	ec f8 00 00 	ld.w	r8,r6[0]
80008576:	70 01       	ld.w	r1,r8[0x0]
80008578:	ee f5 ff 84 	ld.w	r5,r7[-124]
8000857c:	ec f8 00 00 	ld.w	r8,r6[0]
80008580:	70 0a       	ld.w	r10,r8[0x0]
80008582:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008586:	12 98       	mov	r8,r9
80008588:	a1 78       	lsl	r8,0x1
8000858a:	12 08       	add	r8,r9
8000858c:	2f f8       	sub	r8,-1
8000858e:	a3 78       	lsl	r8,0x3
80008590:	f4 08 00 08 	add	r8,r10,r8
80008594:	f0 e2 07 a4 	ld.d	r2,r8[1956]
80008598:	ee e8 ff 88 	ld.d	r8,r7[-120]
8000859c:	ee ea ff a8 	ld.d	r10,r7[-88]
800085a0:	f0 16 00 03 	mcall	r6[12]
800085a4:	14 98       	mov	r8,r10
800085a6:	16 99       	mov	r9,r11
800085a8:	04 9a       	mov	r10,r2
800085aa:	06 9b       	mov	r11,r3
800085ac:	f0 16 00 05 	mcall	r6[20]
800085b0:	14 98       	mov	r8,r10
800085b2:	16 99       	mov	r9,r11
800085b4:	10 9a       	mov	r10,r8
800085b6:	12 9b       	mov	r11,r9
800085b8:	0a 98       	mov	r8,r5
800085ba:	a1 78       	lsl	r8,0x1
800085bc:	0a 08       	add	r8,r5
800085be:	2f f8       	sub	r8,-1
800085c0:	a3 78       	lsl	r8,0x3
800085c2:	e2 08 00 08 	add	r8,r1,r8
800085c6:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * y;
800085ca:	ec f8 00 00 	ld.w	r8,r6[0]
800085ce:	70 01       	ld.w	r1,r8[0x0]
800085d0:	ee f5 ff 84 	ld.w	r5,r7[-124]
800085d4:	ec f8 00 00 	ld.w	r8,r6[0]
800085d8:	70 0a       	ld.w	r10,r8[0x0]
800085da:	ee f9 ff 84 	ld.w	r9,r7[-124]
800085de:	12 98       	mov	r8,r9
800085e0:	a1 78       	lsl	r8,0x1
800085e2:	12 08       	add	r8,r9
800085e4:	a3 78       	lsl	r8,0x3
800085e6:	f4 08 00 08 	add	r8,r10,r8
800085ea:	f0 c8 f8 4c 	sub	r8,r8,-1972
800085ee:	f0 e2 00 00 	ld.d	r2,r8[0]
800085f2:	ee e8 ff 88 	ld.d	r8,r7[-120]
800085f6:	ee ea ff b0 	ld.d	r10,r7[-80]
800085fa:	f0 16 00 03 	mcall	r6[12]
800085fe:	14 98       	mov	r8,r10
80008600:	16 99       	mov	r9,r11
80008602:	04 9a       	mov	r10,r2
80008604:	06 9b       	mov	r11,r3
80008606:	f0 16 00 05 	mcall	r6[20]
8000860a:	14 98       	mov	r8,r10
8000860c:	16 99       	mov	r9,r11
8000860e:	10 9a       	mov	r10,r8
80008610:	12 9b       	mov	r11,r9
80008612:	0a 98       	mov	r8,r5
80008614:	a1 78       	lsl	r8,0x1
80008616:	0a 08       	add	r8,r5
80008618:	a3 78       	lsl	r8,0x3
8000861a:	e2 08 00 08 	add	r8,r1,r8
8000861e:	f0 c8 f8 4c 	sub	r8,r8,-1972
80008622:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = (1. - K1) * P[axis][0][0];
80008626:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000862a:	30 0a       	mov	r10,0
8000862c:	fc 1b 3f f0 	movh	r11,0x3ff0
80008630:	f0 16 00 11 	mcall	r6[68]
80008634:	14 98       	mov	r8,r10
80008636:	16 99       	mov	r9,r11
80008638:	10 9a       	mov	r10,r8
8000863a:	12 9b       	mov	r11,r9
8000863c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008640:	ec fc 00 18 	ld.w	r12,r6[24]
80008644:	12 98       	mov	r8,r9
80008646:	a3 78       	lsl	r8,0x3
80008648:	12 08       	add	r8,r9
8000864a:	a3 78       	lsl	r8,0x3
8000864c:	f8 08 00 08 	add	r8,r12,r8
80008650:	f0 e8 00 00 	ld.d	r8,r8[0]
80008654:	f0 16 00 03 	mcall	r6[12]
80008658:	14 98       	mov	r8,r10
8000865a:	16 99       	mov	r9,r11
8000865c:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P[axis][0][1];
80008660:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008664:	30 0a       	mov	r10,0
80008666:	fc 1b 3f f0 	movh	r11,0x3ff0
8000866a:	f0 16 00 11 	mcall	r6[68]
8000866e:	14 98       	mov	r8,r10
80008670:	16 99       	mov	r9,r11
80008672:	10 9a       	mov	r10,r8
80008674:	12 9b       	mov	r11,r9
80008676:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000867a:	ec fc 00 18 	ld.w	r12,r6[24]
8000867e:	12 98       	mov	r8,r9
80008680:	a3 78       	lsl	r8,0x3
80008682:	12 08       	add	r8,r9
80008684:	2f f8       	sub	r8,-1
80008686:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000868a:	f0 16 00 03 	mcall	r6[12]
8000868e:	14 98       	mov	r8,r10
80008690:	16 99       	mov	r9,r11
80008692:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P[axis][0][2];
80008696:	ee e8 ff a0 	ld.d	r8,r7[-96]
8000869a:	30 0a       	mov	r10,0
8000869c:	fc 1b 3f f0 	movh	r11,0x3ff0
800086a0:	f0 16 00 11 	mcall	r6[68]
800086a4:	14 98       	mov	r8,r10
800086a6:	16 99       	mov	r9,r11
800086a8:	10 9a       	mov	r10,r8
800086aa:	12 9b       	mov	r11,r9
800086ac:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086b0:	ec fc 00 18 	ld.w	r12,r6[24]
800086b4:	12 98       	mov	r8,r9
800086b6:	a3 78       	lsl	r8,0x3
800086b8:	12 08       	add	r8,r9
800086ba:	a3 78       	lsl	r8,0x3
800086bc:	f8 08 00 08 	add	r8,r12,r8
800086c0:	2f 08       	sub	r8,-16
800086c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800086c6:	f0 16 00 03 	mcall	r6[12]
800086ca:	14 98       	mov	r8,r10
800086cc:	16 99       	mov	r9,r11
800086ce:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
800086d2:	ee f8 ff a8 	ld.w	r8,r7[-88]
800086d6:	10 99       	mov	r9,r8
800086d8:	ee 19 80 00 	eorh	r9,0x8000
800086dc:	ef 49 ff 1c 	st.w	r7[-228],r9
800086e0:	ee f8 ff ac 	ld.w	r8,r7[-84]
800086e4:	ef 48 ff 20 	st.w	r7[-224],r8
800086e8:	ee f9 ff 84 	ld.w	r9,r7[-124]
800086ec:	ec fa 00 18 	ld.w	r10,r6[24]
800086f0:	12 98       	mov	r8,r9
800086f2:	a3 78       	lsl	r8,0x3
800086f4:	12 08       	add	r8,r9
800086f6:	a3 78       	lsl	r8,0x3
800086f8:	f4 08 00 08 	add	r8,r10,r8
800086fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80008700:	ee ea ff 1c 	ld.d	r10,r7[-228]
80008704:	f0 16 00 03 	mcall	r6[12]
80008708:	14 98       	mov	r8,r10
8000870a:	16 99       	mov	r9,r11
8000870c:	10 9a       	mov	r10,r8
8000870e:	12 9b       	mov	r11,r9
80008710:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008714:	ec fc 00 18 	ld.w	r12,r6[24]
80008718:	12 98       	mov	r8,r9
8000871a:	a3 78       	lsl	r8,0x3
8000871c:	12 08       	add	r8,r9
8000871e:	a3 78       	lsl	r8,0x3
80008720:	f8 08 00 08 	add	r8,r12,r8
80008724:	2e 88       	sub	r8,-24
80008726:	f0 e8 00 00 	ld.d	r8,r8[0]
8000872a:	f0 16 00 05 	mcall	r6[20]
8000872e:	14 98       	mov	r8,r10
80008730:	16 99       	mov	r9,r11
80008732:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80008736:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000873a:	10 99       	mov	r9,r8
8000873c:	ee 19 80 00 	eorh	r9,0x8000
80008740:	ef 49 ff 24 	st.w	r7[-220],r9
80008744:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008748:	ef 48 ff 28 	st.w	r7[-216],r8
8000874c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008750:	ec fa 00 18 	ld.w	r10,r6[24]
80008754:	12 98       	mov	r8,r9
80008756:	a3 78       	lsl	r8,0x3
80008758:	12 08       	add	r8,r9
8000875a:	2f f8       	sub	r8,-1
8000875c:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008760:	ee ea ff 24 	ld.d	r10,r7[-220]
80008764:	f0 16 00 03 	mcall	r6[12]
80008768:	14 98       	mov	r8,r10
8000876a:	16 99       	mov	r9,r11
8000876c:	10 9a       	mov	r10,r8
8000876e:	12 9b       	mov	r11,r9
80008770:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008774:	ec fc 00 18 	ld.w	r12,r6[24]
80008778:	12 98       	mov	r8,r9
8000877a:	a3 78       	lsl	r8,0x3
8000877c:	12 08       	add	r8,r9
8000877e:	a3 78       	lsl	r8,0x3
80008780:	f8 08 00 08 	add	r8,r12,r8
80008784:	2e 08       	sub	r8,-32
80008786:	f0 e8 00 00 	ld.d	r8,r8[0]
8000878a:	f0 16 00 05 	mcall	r6[20]
8000878e:	14 98       	mov	r8,r10
80008790:	16 99       	mov	r9,r11
80008792:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P[axis][0][2] + P[axis][1][2];
80008796:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000879a:	10 99       	mov	r9,r8
8000879c:	ee 19 80 00 	eorh	r9,0x8000
800087a0:	ef 49 ff 2c 	st.w	r7[-212],r9
800087a4:	ee f8 ff ac 	ld.w	r8,r7[-84]
800087a8:	ef 48 ff 30 	st.w	r7[-208],r8
800087ac:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087b0:	ec fa 00 18 	ld.w	r10,r6[24]
800087b4:	12 98       	mov	r8,r9
800087b6:	a3 78       	lsl	r8,0x3
800087b8:	12 08       	add	r8,r9
800087ba:	a3 78       	lsl	r8,0x3
800087bc:	f4 08 00 08 	add	r8,r10,r8
800087c0:	2f 08       	sub	r8,-16
800087c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800087c6:	ee ea ff 2c 	ld.d	r10,r7[-212]
800087ca:	f0 16 00 03 	mcall	r6[12]
800087ce:	14 98       	mov	r8,r10
800087d0:	16 99       	mov	r9,r11
800087d2:	10 9a       	mov	r10,r8
800087d4:	12 9b       	mov	r11,r9
800087d6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800087da:	ec fc 00 18 	ld.w	r12,r6[24]
800087de:	12 98       	mov	r8,r9
800087e0:	a3 78       	lsl	r8,0x3
800087e2:	12 08       	add	r8,r9
800087e4:	a3 78       	lsl	r8,0x3
800087e6:	f8 08 00 08 	add	r8,r12,r8
800087ea:	2d 88       	sub	r8,-40
800087ec:	f0 e8 00 00 	ld.d	r8,r8[0]
800087f0:	f0 16 00 05 	mcall	r6[20]
800087f4:	14 98       	mov	r8,r10
800087f6:	16 99       	mov	r9,r11
800087f8:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][0][0] + P[axis][2][0];
800087fc:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008800:	10 99       	mov	r9,r8
80008802:	ee 19 80 00 	eorh	r9,0x8000
80008806:	ef 49 ff 34 	st.w	r7[-204],r9
8000880a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000880e:	ef 48 ff 38 	st.w	r7[-200],r8
80008812:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008816:	ec fa 00 18 	ld.w	r10,r6[24]
8000881a:	12 98       	mov	r8,r9
8000881c:	a3 78       	lsl	r8,0x3
8000881e:	12 08       	add	r8,r9
80008820:	a3 78       	lsl	r8,0x3
80008822:	f4 08 00 08 	add	r8,r10,r8
80008826:	f0 e8 00 00 	ld.d	r8,r8[0]
8000882a:	ee ea ff 34 	ld.d	r10,r7[-204]
8000882e:	f0 16 00 03 	mcall	r6[12]
80008832:	14 98       	mov	r8,r10
80008834:	16 99       	mov	r9,r11
80008836:	10 9a       	mov	r10,r8
80008838:	12 9b       	mov	r11,r9
8000883a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000883e:	ec fc 00 18 	ld.w	r12,r6[24]
80008842:	12 98       	mov	r8,r9
80008844:	a3 78       	lsl	r8,0x3
80008846:	12 08       	add	r8,r9
80008848:	a3 78       	lsl	r8,0x3
8000884a:	f8 08 00 08 	add	r8,r12,r8
8000884e:	2d 08       	sub	r8,-48
80008850:	f0 e8 00 00 	ld.d	r8,r8[0]
80008854:	f0 16 00 05 	mcall	r6[20]
80008858:	14 98       	mov	r8,r10
8000885a:	16 99       	mov	r9,r11
8000885c:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][0][1] + P[axis][2][1];
80008860:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008864:	10 99       	mov	r9,r8
80008866:	ee 19 80 00 	eorh	r9,0x8000
8000886a:	ef 49 ff 3c 	st.w	r7[-196],r9
8000886e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008872:	ef 48 ff 40 	st.w	r7[-192],r8
80008876:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000887a:	ec fa 00 18 	ld.w	r10,r6[24]
8000887e:	12 98       	mov	r8,r9
80008880:	a3 78       	lsl	r8,0x3
80008882:	12 08       	add	r8,r9
80008884:	2f f8       	sub	r8,-1
80008886:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000888a:	ee ea ff 3c 	ld.d	r10,r7[-196]
8000888e:	f0 16 00 03 	mcall	r6[12]
80008892:	14 98       	mov	r8,r10
80008894:	16 99       	mov	r9,r11
80008896:	10 9a       	mov	r10,r8
80008898:	12 9b       	mov	r11,r9
8000889a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000889e:	ec fc 00 18 	ld.w	r12,r6[24]
800088a2:	12 98       	mov	r8,r9
800088a4:	a3 78       	lsl	r8,0x3
800088a6:	12 08       	add	r8,r9
800088a8:	a3 78       	lsl	r8,0x3
800088aa:	f8 08 00 08 	add	r8,r12,r8
800088ae:	2c 88       	sub	r8,-56
800088b0:	f0 e8 00 00 	ld.d	r8,r8[0]
800088b4:	f0 16 00 05 	mcall	r6[20]
800088b8:	14 98       	mov	r8,r10
800088ba:	16 99       	mov	r9,r11
800088bc:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][0][2] + P[axis][2][2];
800088c0:	ee f8 ff b0 	ld.w	r8,r7[-80]
800088c4:	10 99       	mov	r9,r8
800088c6:	ee 19 80 00 	eorh	r9,0x8000
800088ca:	ef 49 ff 44 	st.w	r7[-188],r9
800088ce:	ee f8 ff b4 	ld.w	r8,r7[-76]
800088d2:	ef 48 ff 48 	st.w	r7[-184],r8
800088d6:	ee f9 ff 84 	ld.w	r9,r7[-124]
800088da:	ec fa 00 18 	ld.w	r10,r6[24]
800088de:	12 98       	mov	r8,r9
800088e0:	a3 78       	lsl	r8,0x3
800088e2:	12 08       	add	r8,r9
800088e4:	a3 78       	lsl	r8,0x3
800088e6:	f4 08 00 08 	add	r8,r10,r8
800088ea:	2f 08       	sub	r8,-16
800088ec:	f0 e8 00 00 	ld.d	r8,r8[0]
800088f0:	ee ea ff 44 	ld.d	r10,r7[-188]
800088f4:	f0 16 00 03 	mcall	r6[12]
800088f8:	14 98       	mov	r8,r10
800088fa:	16 99       	mov	r9,r11
800088fc:	10 9a       	mov	r10,r8
800088fe:	12 9b       	mov	r11,r9
80008900:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008904:	ec fc 00 18 	ld.w	r12,r6[24]
80008908:	12 98       	mov	r8,r9
8000890a:	a3 78       	lsl	r8,0x3
8000890c:	12 08       	add	r8,r9
8000890e:	a3 78       	lsl	r8,0x3
80008910:	f8 08 00 08 	add	r8,r12,r8
80008914:	2c 08       	sub	r8,-64
80008916:	f0 e8 00 00 	ld.d	r8,r8[0]
8000891a:	f0 16 00 05 	mcall	r6[20]
8000891e:	14 98       	mov	r8,r10
80008920:	16 99       	mov	r9,r11
80008922:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80008926:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000892a:	ec fa 00 18 	ld.w	r10,r6[24]
8000892e:	12 98       	mov	r8,r9
80008930:	a3 78       	lsl	r8,0x3
80008932:	12 08       	add	r8,r9
80008934:	a3 78       	lsl	r8,0x3
80008936:	10 0a       	add	r10,r8
80008938:	ee e8 ff b8 	ld.d	r8,r7[-72]
8000893c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80008940:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008944:	ec fb 00 18 	ld.w	r11,r6[24]
80008948:	12 98       	mov	r8,r9
8000894a:	a3 78       	lsl	r8,0x3
8000894c:	12 08       	add	r8,r9
8000894e:	f0 ca ff ff 	sub	r10,r8,-1
80008952:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008956:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
8000895a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000895e:	ec fa 00 18 	ld.w	r10,r6[24]
80008962:	12 98       	mov	r8,r9
80008964:	a3 78       	lsl	r8,0x3
80008966:	12 08       	add	r8,r9
80008968:	a3 78       	lsl	r8,0x3
8000896a:	f4 08 00 08 	add	r8,r10,r8
8000896e:	f0 ca ff f0 	sub	r10,r8,-16
80008972:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008976:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
8000897a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000897e:	ec fa 00 18 	ld.w	r10,r6[24]
80008982:	12 98       	mov	r8,r9
80008984:	a3 78       	lsl	r8,0x3
80008986:	12 08       	add	r8,r9
80008988:	a3 78       	lsl	r8,0x3
8000898a:	f4 08 00 08 	add	r8,r10,r8
8000898e:	f0 ca ff e8 	sub	r10,r8,-24
80008992:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008996:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
8000899a:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000899e:	ec fa 00 18 	ld.w	r10,r6[24]
800089a2:	12 98       	mov	r8,r9
800089a4:	a3 78       	lsl	r8,0x3
800089a6:	12 08       	add	r8,r9
800089a8:	a3 78       	lsl	r8,0x3
800089aa:	f4 08 00 08 	add	r8,r10,r8
800089ae:	f0 ca ff e0 	sub	r10,r8,-32
800089b2:	ee e8 ff d8 	ld.d	r8,r7[-40]
800089b6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800089ba:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089be:	ec fa 00 18 	ld.w	r10,r6[24]
800089c2:	12 98       	mov	r8,r9
800089c4:	a3 78       	lsl	r8,0x3
800089c6:	12 08       	add	r8,r9
800089c8:	a3 78       	lsl	r8,0x3
800089ca:	f4 08 00 08 	add	r8,r10,r8
800089ce:	f0 ca ff d8 	sub	r10,r8,-40
800089d2:	ee e8 ff e0 	ld.d	r8,r7[-32]
800089d6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800089da:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089de:	ec fa 00 18 	ld.w	r10,r6[24]
800089e2:	12 98       	mov	r8,r9
800089e4:	a3 78       	lsl	r8,0x3
800089e6:	12 08       	add	r8,r9
800089e8:	a3 78       	lsl	r8,0x3
800089ea:	f4 08 00 08 	add	r8,r10,r8
800089ee:	f0 ca ff d0 	sub	r10,r8,-48
800089f2:	ee e8 ff e8 	ld.d	r8,r7[-24]
800089f6:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
800089fa:	ee f9 ff 84 	ld.w	r9,r7[-124]
800089fe:	ec fa 00 18 	ld.w	r10,r6[24]
80008a02:	12 98       	mov	r8,r9
80008a04:	a3 78       	lsl	r8,0x3
80008a06:	12 08       	add	r8,r9
80008a08:	a3 78       	lsl	r8,0x3
80008a0a:	f4 08 00 08 	add	r8,r10,r8
80008a0e:	f0 ca ff c8 	sub	r10,r8,-56
80008a12:	ee e8 ff f0 	ld.d	r8,r7[-16]
80008a16:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80008a1a:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a1e:	ec fa 00 18 	ld.w	r10,r6[24]
80008a22:	12 98       	mov	r8,r9
80008a24:	a3 78       	lsl	r8,0x3
80008a26:	12 08       	add	r8,r9
80008a28:	a3 78       	lsl	r8,0x3
80008a2a:	f4 08 00 08 	add	r8,r10,r8
80008a2e:	f0 ca ff c0 	sub	r10,r8,-64
80008a32:	ee e8 ff f8 	ld.d	r8,r7[-8]
80008a36:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	y = position_meas - centralData->position_estimator.localPosition.pos[axis];
80008a3a:	ec f8 00 00 	ld.w	r8,r6[0]
80008a3e:	70 09       	ld.w	r9,r8[0x0]
80008a40:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008a44:	f0 c8 fd 87 	sub	r8,r8,-633
80008a48:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008a4c:	10 9c       	mov	r12,r8
80008a4e:	f0 16 00 02 	mcall	r6[8]
80008a52:	14 98       	mov	r8,r10
80008a54:	16 99       	mov	r9,r11
80008a56:	ee ea ff 7c 	ld.d	r10,r7[-132]
80008a5a:	f0 16 00 11 	mcall	r6[68]
80008a5e:	14 98       	mov	r8,r10
80008a60:	16 99       	mov	r9,r11
80008a62:	ee e9 ff 88 	st.d	r7[-120],r8
	
	S = P2[axis][0][0] + R2[axis];
80008a66:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a6a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a6e:	12 98       	mov	r8,r9
80008a70:	a3 78       	lsl	r8,0x3
80008a72:	12 08       	add	r8,r9
80008a74:	a3 78       	lsl	r8,0x3
80008a76:	f4 08 00 08 	add	r8,r10,r8
80008a7a:	f0 ea 00 00 	ld.d	r10,r8[0]
80008a7e:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a82:	ec f8 01 70 	ld.w	r8,r6[368]
80008a86:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80008a8a:	f0 16 00 05 	mcall	r6[20]
80008a8e:	14 98       	mov	r8,r10
80008a90:	16 99       	mov	r9,r11
80008a92:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][0] * 1/S;
80008a96:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008a9a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008a9e:	12 98       	mov	r8,r9
80008aa0:	a3 78       	lsl	r8,0x3
80008aa2:	12 08       	add	r8,r9
80008aa4:	a3 78       	lsl	r8,0x3
80008aa6:	f4 08 00 08 	add	r8,r10,r8
80008aaa:	f0 ea 00 00 	ld.d	r10,r8[0]
80008aae:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008ab2:	f0 16 00 0c 	mcall	r6[48]
80008ab6:	14 98       	mov	r8,r10
80008ab8:	16 99       	mov	r9,r11
80008aba:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][0] * 1/S;
80008abe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ac2:	ec fa 00 1c 	ld.w	r10,r6[28]
80008ac6:	12 98       	mov	r8,r9
80008ac8:	a3 78       	lsl	r8,0x3
80008aca:	12 08       	add	r8,r9
80008acc:	a3 78       	lsl	r8,0x3
80008ace:	f4 08 00 08 	add	r8,r10,r8
80008ad2:	2e 88       	sub	r8,-24
80008ad4:	f0 ea 00 00 	ld.d	r10,r8[0]
80008ad8:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008adc:	f0 16 00 0c 	mcall	r6[48]
80008ae0:	14 98       	mov	r8,r10
80008ae2:	16 99       	mov	r9,r11
80008ae4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][0] * 1/S;
80008ae8:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008aec:	ec fa 00 1c 	ld.w	r10,r6[28]
80008af0:	12 98       	mov	r8,r9
80008af2:	a3 78       	lsl	r8,0x3
80008af4:	12 08       	add	r8,r9
80008af6:	a3 78       	lsl	r8,0x3
80008af8:	f4 08 00 08 	add	r8,r10,r8
80008afc:	2d 08       	sub	r8,-48
80008afe:	f0 ea 00 00 	ld.d	r10,r8[0]
80008b02:	ee e8 ff 98 	ld.d	r8,r7[-104]
80008b06:	f0 16 00 0c 	mcall	r6[48]
80008b0a:	14 98       	mov	r8,r10
80008b0c:	16 99       	mov	r9,r11
80008b0e:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * y;
80008b12:	ec f8 00 00 	ld.w	r8,r6[0]
80008b16:	70 01       	ld.w	r1,r8[0x0]
80008b18:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008b1c:	ec f8 00 00 	ld.w	r8,r6[0]
80008b20:	70 09       	ld.w	r9,r8[0x0]
80008b22:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008b26:	f0 c8 fd 87 	sub	r8,r8,-633
80008b2a:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008b2e:	10 9c       	mov	r12,r8
80008b30:	f0 16 00 02 	mcall	r6[8]
80008b34:	14 92       	mov	r2,r10
80008b36:	16 93       	mov	r3,r11
80008b38:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008b3c:	ee ea ff a0 	ld.d	r10,r7[-96]
80008b40:	f0 16 00 03 	mcall	r6[12]
80008b44:	14 98       	mov	r8,r10
80008b46:	16 99       	mov	r9,r11
80008b48:	04 9a       	mov	r10,r2
80008b4a:	06 9b       	mov	r11,r3
80008b4c:	f0 16 00 05 	mcall	r6[20]
80008b50:	14 98       	mov	r8,r10
80008b52:	16 99       	mov	r9,r11
80008b54:	10 9a       	mov	r10,r8
80008b56:	12 9b       	mov	r11,r9
80008b58:	f0 16 00 08 	mcall	r6[32]
80008b5c:	18 99       	mov	r9,r12
80008b5e:	ea c8 fd 87 	sub	r8,r5,-633
80008b62:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * y;
80008b66:	ec f8 00 00 	ld.w	r8,r6[0]
80008b6a:	70 01       	ld.w	r1,r8[0x0]
80008b6c:	ee f5 ff 84 	ld.w	r5,r7[-124]
80008b70:	ec f8 00 00 	ld.w	r8,r6[0]
80008b74:	70 09       	ld.w	r9,r8[0x0]
80008b76:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008b7a:	f0 c8 fd 91 	sub	r8,r8,-623
80008b7e:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008b82:	10 9c       	mov	r12,r8
80008b84:	f0 16 00 02 	mcall	r6[8]
80008b88:	14 92       	mov	r2,r10
80008b8a:	16 93       	mov	r3,r11
80008b8c:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008b90:	ee ea ff a8 	ld.d	r10,r7[-88]
80008b94:	f0 16 00 03 	mcall	r6[12]
80008b98:	14 98       	mov	r8,r10
80008b9a:	16 99       	mov	r9,r11
80008b9c:	04 9a       	mov	r10,r2
80008b9e:	06 9b       	mov	r11,r3
80008ba0:	f0 16 00 05 	mcall	r6[20]
80008ba4:	14 98       	mov	r8,r10
80008ba6:	16 99       	mov	r9,r11
80008ba8:	10 9a       	mov	r10,r8
80008baa:	12 9b       	mov	r11,r9
80008bac:	f0 16 00 08 	mcall	r6[32]
80008bb0:	18 99       	mov	r9,r12
80008bb2:	ea c8 fd 91 	sub	r8,r5,-623
80008bb6:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * y;
80008bba:	ec f8 00 00 	ld.w	r8,r6[0]
80008bbe:	70 01       	ld.w	r1,r8[0x0]
80008bc0:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008bc4:	f0 c5 ff fd 	sub	r5,r8,-3
80008bc8:	ec f8 00 00 	ld.w	r8,r6[0]
80008bcc:	70 09       	ld.w	r9,r8[0x0]
80008bce:	ee f8 ff 84 	ld.w	r8,r7[-124]
80008bd2:	2f d8       	sub	r8,-3
80008bd4:	2f 48       	sub	r8,-12
80008bd6:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80008bda:	10 9c       	mov	r12,r8
80008bdc:	f0 16 00 02 	mcall	r6[8]
80008be0:	14 92       	mov	r2,r10
80008be2:	16 93       	mov	r3,r11
80008be4:	ee e8 ff 88 	ld.d	r8,r7[-120]
80008be8:	ee ea ff b0 	ld.d	r10,r7[-80]
80008bec:	f0 16 00 03 	mcall	r6[12]
80008bf0:	14 98       	mov	r8,r10
80008bf2:	16 99       	mov	r9,r11
80008bf4:	04 9a       	mov	r10,r2
80008bf6:	06 9b       	mov	r11,r3
80008bf8:	f0 16 00 05 	mcall	r6[20]
80008bfc:	14 98       	mov	r8,r10
80008bfe:	16 99       	mov	r9,r11
80008c00:	10 9a       	mov	r10,r8
80008c02:	12 9b       	mov	r11,r9
80008c04:	f0 16 00 08 	mcall	r6[32]
80008c08:	18 99       	mov	r9,r12
80008c0a:	ea c8 ff f4 	sub	r8,r5,-12
80008c0e:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = (1. - K1) * P2[axis][0][0];
80008c12:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c16:	30 0a       	mov	r10,0
80008c18:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c1c:	f0 16 00 11 	mcall	r6[68]
80008c20:	14 98       	mov	r8,r10
80008c22:	16 99       	mov	r9,r11
80008c24:	10 9a       	mov	r10,r8
80008c26:	12 9b       	mov	r11,r9
80008c28:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c2c:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c30:	12 98       	mov	r8,r9
80008c32:	a3 78       	lsl	r8,0x3
80008c34:	12 08       	add	r8,r9
80008c36:	a3 78       	lsl	r8,0x3
80008c38:	f8 08 00 08 	add	r8,r12,r8
80008c3c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008c40:	f0 16 00 03 	mcall	r6[12]
80008c44:	14 98       	mov	r8,r10
80008c46:	16 99       	mov	r9,r11
80008c48:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = (1. - K1) * P2[axis][0][1];
80008c4c:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c50:	30 0a       	mov	r10,0
80008c52:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c56:	f0 16 00 11 	mcall	r6[68]
80008c5a:	14 98       	mov	r8,r10
80008c5c:	16 99       	mov	r9,r11
80008c5e:	10 9a       	mov	r10,r8
80008c60:	12 9b       	mov	r11,r9
80008c62:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c66:	ec fc 00 1c 	ld.w	r12,r6[28]
80008c6a:	12 98       	mov	r8,r9
80008c6c:	a3 78       	lsl	r8,0x3
80008c6e:	12 08       	add	r8,r9
80008c70:	2f f8       	sub	r8,-1
80008c72:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80008c76:	f0 16 00 03 	mcall	r6[12]
80008c7a:	14 98       	mov	r8,r10
80008c7c:	16 99       	mov	r9,r11
80008c7e:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = (1. - K1) * P2[axis][0][2];
80008c82:	ee e8 ff a0 	ld.d	r8,r7[-96]
80008c86:	30 0a       	mov	r10,0
80008c88:	fc 1b 3f f0 	movh	r11,0x3ff0
80008c8c:	f0 16 00 11 	mcall	r6[68]
80008c90:	14 98       	mov	r8,r10
80008c92:	16 99       	mov	r9,r11
80008c94:	10 9a       	mov	r10,r8
80008c96:	12 9b       	mov	r11,r9
80008c98:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008c9c:	ec fc 00 1c 	ld.w	r12,r6[28]
80008ca0:	12 98       	mov	r8,r9
80008ca2:	a3 78       	lsl	r8,0x3
80008ca4:	12 08       	add	r8,r9
80008ca6:	a3 78       	lsl	r8,0x3
80008ca8:	f8 08 00 08 	add	r8,r12,r8
80008cac:	2f 08       	sub	r8,-16
80008cae:	f0 e8 00 00 	ld.d	r8,r8[0]
80008cb2:	f0 16 00 03 	mcall	r6[12]
80008cb6:	14 98       	mov	r8,r10
80008cb8:	16 99       	mov	r9,r11
80008cba:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
80008cbe:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008cc2:	10 99       	mov	r9,r8
80008cc4:	ee 19 80 00 	eorh	r9,0x8000
80008cc8:	ef 49 ff 4c 	st.w	r7[-180],r9
80008ccc:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008cd0:	ef 48 ff 50 	st.w	r7[-176],r8
80008cd4:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008cd8:	ec fa 00 1c 	ld.w	r10,r6[28]
80008cdc:	12 98       	mov	r8,r9
80008cde:	a3 78       	lsl	r8,0x3
80008ce0:	12 08       	add	r8,r9
80008ce2:	a3 78       	lsl	r8,0x3
80008ce4:	f4 08 00 08 	add	r8,r10,r8
80008ce8:	f0 e8 00 00 	ld.d	r8,r8[0]
80008cec:	ee ea ff 4c 	ld.d	r10,r7[-180]
80008cf0:	f0 16 00 03 	mcall	r6[12]
80008cf4:	14 98       	mov	r8,r10
80008cf6:	16 99       	mov	r9,r11
80008cf8:	10 9a       	mov	r10,r8
80008cfa:	12 9b       	mov	r11,r9
80008cfc:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d00:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d04:	12 98       	mov	r8,r9
80008d06:	a3 78       	lsl	r8,0x3
80008d08:	12 08       	add	r8,r9
80008d0a:	a3 78       	lsl	r8,0x3
80008d0c:	f8 08 00 08 	add	r8,r12,r8
80008d10:	2e 88       	sub	r8,-24
80008d12:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d16:	f0 16 00 05 	mcall	r6[20]
80008d1a:	14 98       	mov	r8,r10
80008d1c:	16 99       	mov	r9,r11
80008d1e:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
80008d22:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008d26:	10 99       	mov	r9,r8
80008d28:	ee 19 80 00 	eorh	r9,0x8000
80008d2c:	ef 49 ff 54 	st.w	r7[-172],r9
80008d30:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008d34:	ef 48 ff 58 	st.w	r7[-168],r8
80008d38:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d3c:	ec fa 00 1c 	ld.w	r10,r6[28]
80008d40:	12 98       	mov	r8,r9
80008d42:	a3 78       	lsl	r8,0x3
80008d44:	12 08       	add	r8,r9
80008d46:	2f f8       	sub	r8,-1
80008d48:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008d4c:	ee ea ff 54 	ld.d	r10,r7[-172]
80008d50:	f0 16 00 03 	mcall	r6[12]
80008d54:	14 98       	mov	r8,r10
80008d56:	16 99       	mov	r9,r11
80008d58:	10 9a       	mov	r10,r8
80008d5a:	12 9b       	mov	r11,r9
80008d5c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d60:	ec fc 00 1c 	ld.w	r12,r6[28]
80008d64:	12 98       	mov	r8,r9
80008d66:	a3 78       	lsl	r8,0x3
80008d68:	12 08       	add	r8,r9
80008d6a:	a3 78       	lsl	r8,0x3
80008d6c:	f8 08 00 08 	add	r8,r12,r8
80008d70:	2e 08       	sub	r8,-32
80008d72:	f0 e8 00 00 	ld.d	r8,r8[0]
80008d76:	f0 16 00 05 	mcall	r6[20]
80008d7a:	14 98       	mov	r8,r10
80008d7c:	16 99       	mov	r9,r11
80008d7e:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = -K2 * P2[axis][0][2] + P2[axis][1][2];
80008d82:	ee f8 ff a8 	ld.w	r8,r7[-88]
80008d86:	10 99       	mov	r9,r8
80008d88:	ee 19 80 00 	eorh	r9,0x8000
80008d8c:	ef 49 ff 5c 	st.w	r7[-164],r9
80008d90:	ee f8 ff ac 	ld.w	r8,r7[-84]
80008d94:	ef 48 ff 60 	st.w	r7[-160],r8
80008d98:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008d9c:	ec fa 00 1c 	ld.w	r10,r6[28]
80008da0:	12 98       	mov	r8,r9
80008da2:	a3 78       	lsl	r8,0x3
80008da4:	12 08       	add	r8,r9
80008da6:	a3 78       	lsl	r8,0x3
80008da8:	f4 08 00 08 	add	r8,r10,r8
80008dac:	2f 08       	sub	r8,-16
80008dae:	f0 e8 00 00 	ld.d	r8,r8[0]
80008db2:	ee ea ff 5c 	ld.d	r10,r7[-164]
80008db6:	f0 16 00 03 	mcall	r6[12]
80008dba:	14 98       	mov	r8,r10
80008dbc:	16 99       	mov	r9,r11
80008dbe:	10 9a       	mov	r10,r8
80008dc0:	12 9b       	mov	r11,r9
80008dc2:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008dc6:	ec fc 00 1c 	ld.w	r12,r6[28]
80008dca:	12 98       	mov	r8,r9
80008dcc:	a3 78       	lsl	r8,0x3
80008dce:	12 08       	add	r8,r9
80008dd0:	a3 78       	lsl	r8,0x3
80008dd2:	f8 08 00 08 	add	r8,r12,r8
80008dd6:	2d 88       	sub	r8,-40
80008dd8:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ddc:	f0 16 00 05 	mcall	r6[20]
80008de0:	14 98       	mov	r8,r10
80008de2:	16 99       	mov	r9,r11
80008de4:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][0][0] + P2[axis][2][0];
80008de8:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008dec:	10 99       	mov	r9,r8
80008dee:	ee 19 80 00 	eorh	r9,0x8000
80008df2:	ef 49 ff 64 	st.w	r7[-156],r9
80008df6:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008dfa:	ef 48 ff 68 	st.w	r7[-152],r8
80008dfe:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e02:	ec fa 00 1c 	ld.w	r10,r6[28]
80008e06:	12 98       	mov	r8,r9
80008e08:	a3 78       	lsl	r8,0x3
80008e0a:	12 08       	add	r8,r9
80008e0c:	a3 78       	lsl	r8,0x3
80008e0e:	f4 08 00 08 	add	r8,r10,r8
80008e12:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e16:	ee ea ff 64 	ld.d	r10,r7[-156]
80008e1a:	f0 16 00 03 	mcall	r6[12]
80008e1e:	14 98       	mov	r8,r10
80008e20:	16 99       	mov	r9,r11
80008e22:	10 9a       	mov	r10,r8
80008e24:	12 9b       	mov	r11,r9
80008e26:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e2a:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e2e:	12 98       	mov	r8,r9
80008e30:	a3 78       	lsl	r8,0x3
80008e32:	12 08       	add	r8,r9
80008e34:	a3 78       	lsl	r8,0x3
80008e36:	f8 08 00 08 	add	r8,r12,r8
80008e3a:	2d 08       	sub	r8,-48
80008e3c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008e40:	f0 16 00 05 	mcall	r6[20]
80008e44:	14 98       	mov	r8,r10
80008e46:	16 99       	mov	r9,r11
80008e48:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][0][1] + P2[axis][2][1];
80008e4c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008e50:	10 99       	mov	r9,r8
80008e52:	ee 19 80 00 	eorh	r9,0x8000
80008e56:	ef 49 ff 6c 	st.w	r7[-148],r9
80008e5a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008e5e:	ef 48 ff 70 	st.w	r7[-144],r8
80008e62:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e66:	ec fa 00 1c 	ld.w	r10,r6[28]
80008e6a:	12 98       	mov	r8,r9
80008e6c:	a3 78       	lsl	r8,0x3
80008e6e:	12 08       	add	r8,r9
80008e70:	2f f8       	sub	r8,-1
80008e72:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80008e76:	ee ea ff 6c 	ld.d	r10,r7[-148]
80008e7a:	f0 16 00 03 	mcall	r6[12]
80008e7e:	14 98       	mov	r8,r10
80008e80:	16 99       	mov	r9,r11
80008e82:	10 9a       	mov	r10,r8
80008e84:	12 9b       	mov	r11,r9
80008e86:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008e8a:	ec fc 00 1c 	ld.w	r12,r6[28]
80008e8e:	12 98       	mov	r8,r9
80008e90:	a3 78       	lsl	r8,0x3
80008e92:	12 08       	add	r8,r9
80008e94:	a3 78       	lsl	r8,0x3
80008e96:	f8 08 00 08 	add	r8,r12,r8
80008e9a:	2c 88       	sub	r8,-56
80008e9c:	f0 e8 00 00 	ld.d	r8,r8[0]
80008ea0:	f0 16 00 05 	mcall	r6[20]
80008ea4:	14 98       	mov	r8,r10
80008ea6:	16 99       	mov	r9,r11
80008ea8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][0][2] + P2[axis][2][2];
80008eac:	ee f8 ff b0 	ld.w	r8,r7[-80]
80008eb0:	10 99       	mov	r9,r8
80008eb2:	ee 19 80 00 	eorh	r9,0x8000
80008eb6:	ef 49 ff 74 	st.w	r7[-140],r9
80008eba:	ee f8 ff b4 	ld.w	r8,r7[-76]
80008ebe:	ef 48 ff 78 	st.w	r7[-136],r8
80008ec2:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ec6:	ec fa 00 1c 	ld.w	r10,r6[28]
80008eca:	12 98       	mov	r8,r9
80008ecc:	a3 78       	lsl	r8,0x3
80008ece:	12 08       	add	r8,r9
80008ed0:	a3 78       	lsl	r8,0x3
80008ed2:	f4 08 00 08 	add	r8,r10,r8
80008ed6:	2f 08       	sub	r8,-16
80008ed8:	f0 e8 00 00 	ld.d	r8,r8[0]
80008edc:	ee ea ff 74 	ld.d	r10,r7[-140]
80008ee0:	f0 16 00 03 	mcall	r6[12]
80008ee4:	14 98       	mov	r8,r10
80008ee6:	16 99       	mov	r9,r11
80008ee8:	10 9a       	mov	r10,r8
80008eea:	12 9b       	mov	r11,r9
80008eec:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008ef0:	ec fc 00 1c 	ld.w	r12,r6[28]
80008ef4:	12 98       	mov	r8,r9
80008ef6:	a3 78       	lsl	r8,0x3
80008ef8:	12 08       	add	r8,r9
80008efa:	a3 78       	lsl	r8,0x3
80008efc:	f8 08 00 08 	add	r8,r12,r8
80008f00:	2c 08       	sub	r8,-64
80008f02:	f0 e8 00 00 	ld.d	r8,r8[0]
80008f06:	f0 16 00 05 	mcall	r6[20]
80008f0a:	14 98       	mov	r8,r10
80008f0c:	16 99       	mov	r9,r11
80008f0e:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80008f12:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f16:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f1a:	12 98       	mov	r8,r9
80008f1c:	a3 78       	lsl	r8,0x3
80008f1e:	12 08       	add	r8,r9
80008f20:	a3 78       	lsl	r8,0x3
80008f22:	10 0a       	add	r10,r8
80008f24:	ee e8 ff b8 	ld.d	r8,r7[-72]
80008f28:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80008f2c:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f30:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f34:	12 98       	mov	r8,r9
80008f36:	a3 78       	lsl	r8,0x3
80008f38:	12 08       	add	r8,r9
80008f3a:	f0 cb ff ff 	sub	r11,r8,-1
80008f3e:	ee e8 ff c0 	ld.d	r8,r7[-64]
80008f42:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80008f46:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f4a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f4e:	12 98       	mov	r8,r9
80008f50:	a3 78       	lsl	r8,0x3
80008f52:	12 08       	add	r8,r9
80008f54:	a3 78       	lsl	r8,0x3
80008f56:	f4 08 00 08 	add	r8,r10,r8
80008f5a:	f0 ca ff f0 	sub	r10,r8,-16
80008f5e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80008f62:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80008f66:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f6a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f6e:	12 98       	mov	r8,r9
80008f70:	a3 78       	lsl	r8,0x3
80008f72:	12 08       	add	r8,r9
80008f74:	a3 78       	lsl	r8,0x3
80008f76:	f4 08 00 08 	add	r8,r10,r8
80008f7a:	f0 ca ff e8 	sub	r10,r8,-24
80008f7e:	ee e8 ff d0 	ld.d	r8,r7[-48]
80008f82:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80008f86:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008f8a:	ec fa 00 1c 	ld.w	r10,r6[28]
80008f8e:	12 98       	mov	r8,r9
80008f90:	a3 78       	lsl	r8,0x3
80008f92:	12 08       	add	r8,r9
80008f94:	a3 78       	lsl	r8,0x3
80008f96:	f4 08 00 08 	add	r8,r10,r8
80008f9a:	f0 ca ff e0 	sub	r10,r8,-32
80008f9e:	ee e8 ff d8 	ld.d	r8,r7[-40]
80008fa2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80008fa6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008faa:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fae:	12 98       	mov	r8,r9
80008fb0:	a3 78       	lsl	r8,0x3
80008fb2:	12 08       	add	r8,r9
80008fb4:	a3 78       	lsl	r8,0x3
80008fb6:	f4 08 00 08 	add	r8,r10,r8
80008fba:	f0 ca ff d8 	sub	r10,r8,-40
80008fbe:	ee e8 ff e0 	ld.d	r8,r7[-32]
80008fc2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80008fc6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fca:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fce:	12 98       	mov	r8,r9
80008fd0:	a3 78       	lsl	r8,0x3
80008fd2:	12 08       	add	r8,r9
80008fd4:	a3 78       	lsl	r8,0x3
80008fd6:	f4 08 00 08 	add	r8,r10,r8
80008fda:	f0 ca ff d0 	sub	r10,r8,-48
80008fde:	ee e8 ff e8 	ld.d	r8,r7[-24]
80008fe2:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80008fe6:	ee f9 ff 84 	ld.w	r9,r7[-124]
80008fea:	ec fa 00 1c 	ld.w	r10,r6[28]
80008fee:	12 98       	mov	r8,r9
80008ff0:	a3 78       	lsl	r8,0x3
80008ff2:	12 08       	add	r8,r9
80008ff4:	a3 78       	lsl	r8,0x3
80008ff6:	f4 08 00 08 	add	r8,r10,r8
80008ffa:	f0 ca ff c8 	sub	r10,r8,-56
80008ffe:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009002:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009006:	ee f9 ff 84 	ld.w	r9,r7[-124]
8000900a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000900e:	12 98       	mov	r8,r9
80009010:	a3 78       	lsl	r8,0x3
80009012:	12 08       	add	r8,r9
80009014:	a3 78       	lsl	r8,0x3
80009016:	f4 08 00 08 	add	r8,r10,r8
8000901a:	f0 ca ff c0 	sub	r10,r8,-64
8000901e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009022:	f4 e9 00 00 	st.d	r10[0],r8
}
80009026:	2c 7d       	sub	sp,-228
80009028:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000902c:	80 00       	ld.sh	r0,r0[0x0]
8000902e:	82 b6       	ld.uh	r6,r1[0x6]

80009030 <e_kalman_update_speed>:

// update covariance
Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed(int axis, float speed_meas)
{
80009030:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
80009034:	1a 97       	mov	r7,sp
80009036:	fa cd 00 d8 	sub	sp,sp,216
8000903a:	fe f6 0c 1a 	ld.w	r6,pc[3098]
8000903e:	1e 26       	rsub	r6,pc
80009040:	ef 4c ff 8c 	st.w	r7[-116],r12
80009044:	ef 4b ff 88 	st.w	r7[-120],r11
	
	double yd,S,K1,K2,K3;
	double P11,P12,P13,P21,P22,P23,P31,P32,P33;
	
	yd = speed_meas - centralData->estimation.state[axis][SPEED];
80009048:	ee fc ff 88 	ld.w	r12,r7[-120]
8000904c:	f0 16 00 02 	mcall	r6[8]
80009050:	ec f8 00 00 	ld.w	r8,r6[0]
80009054:	70 0c       	ld.w	r12,r8[0x0]
80009056:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000905a:	12 98       	mov	r8,r9
8000905c:	a1 78       	lsl	r8,0x1
8000905e:	12 08       	add	r8,r9
80009060:	2f f8       	sub	r8,-1
80009062:	a3 78       	lsl	r8,0x3
80009064:	f8 08 00 08 	add	r8,r12,r8
80009068:	f0 e8 07 a4 	ld.d	r8,r8[1956]
8000906c:	f0 16 00 11 	mcall	r6[68]
80009070:	14 98       	mov	r8,r10
80009072:	16 99       	mov	r9,r11
80009074:	ee e9 ff 90 	st.d	r7[-112],r8
	
	
	S = P[axis][1][1] + R[axis];
80009078:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000907c:	ec fa 00 18 	ld.w	r10,r6[24]
80009080:	12 98       	mov	r8,r9
80009082:	a3 78       	lsl	r8,0x3
80009084:	12 08       	add	r8,r9
80009086:	a3 78       	lsl	r8,0x3
80009088:	f4 08 00 08 	add	r8,r10,r8
8000908c:	2e 08       	sub	r8,-32
8000908e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009092:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009096:	ec f8 01 74 	ld.w	r8,r6[372]
8000909a:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000909e:	f0 16 00 05 	mcall	r6[20]
800090a2:	14 98       	mov	r8,r10
800090a4:	16 99       	mov	r9,r11
800090a6:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P[axis][0][1] * 1/S;
800090aa:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090ae:	ec fa 00 18 	ld.w	r10,r6[24]
800090b2:	12 98       	mov	r8,r9
800090b4:	a3 78       	lsl	r8,0x3
800090b6:	12 08       	add	r8,r9
800090b8:	2f f8       	sub	r8,-1
800090ba:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800090be:	ee e8 ff 98 	ld.d	r8,r7[-104]
800090c2:	f0 16 00 0c 	mcall	r6[48]
800090c6:	14 98       	mov	r8,r10
800090c8:	16 99       	mov	r9,r11
800090ca:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P[axis][1][1] * 1/S;
800090ce:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090d2:	ec fa 00 18 	ld.w	r10,r6[24]
800090d6:	12 98       	mov	r8,r9
800090d8:	a3 78       	lsl	r8,0x3
800090da:	12 08       	add	r8,r9
800090dc:	a3 78       	lsl	r8,0x3
800090de:	f4 08 00 08 	add	r8,r10,r8
800090e2:	2e 08       	sub	r8,-32
800090e4:	f0 ea 00 00 	ld.d	r10,r8[0]
800090e8:	ee e8 ff 98 	ld.d	r8,r7[-104]
800090ec:	f0 16 00 0c 	mcall	r6[48]
800090f0:	14 98       	mov	r8,r10
800090f2:	16 99       	mov	r9,r11
800090f4:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P[axis][2][1] * 1/S;
800090f8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800090fc:	ec fa 00 18 	ld.w	r10,r6[24]
80009100:	12 98       	mov	r8,r9
80009102:	a3 78       	lsl	r8,0x3
80009104:	12 08       	add	r8,r9
80009106:	a3 78       	lsl	r8,0x3
80009108:	f4 08 00 08 	add	r8,r10,r8
8000910c:	2c 88       	sub	r8,-56
8000910e:	f0 ea 00 00 	ld.d	r10,r8[0]
80009112:	ee e8 ff 98 	ld.d	r8,r7[-104]
80009116:	f0 16 00 0c 	mcall	r6[48]
8000911a:	14 98       	mov	r8,r10
8000911c:	16 99       	mov	r9,r11
8000911e:	ee e9 ff b0 	st.d	r7[-80],r8

	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * yd;
80009122:	ec f8 00 00 	ld.w	r8,r6[0]
80009126:	70 01       	ld.w	r1,r8[0x0]
80009128:	ee f5 ff 8c 	ld.w	r5,r7[-116]
8000912c:	ec f8 00 00 	ld.w	r8,r6[0]
80009130:	70 0a       	ld.w	r10,r8[0x0]
80009132:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009136:	12 98       	mov	r8,r9
80009138:	a1 78       	lsl	r8,0x1
8000913a:	12 08       	add	r8,r9
8000913c:	a3 78       	lsl	r8,0x3
8000913e:	f4 08 00 08 	add	r8,r10,r8
80009142:	f0 c8 f8 5c 	sub	r8,r8,-1956
80009146:	f0 e2 00 00 	ld.d	r2,r8[0]
8000914a:	ee e8 ff 90 	ld.d	r8,r7[-112]
8000914e:	ee ea ff a0 	ld.d	r10,r7[-96]
80009152:	f0 16 00 03 	mcall	r6[12]
80009156:	14 98       	mov	r8,r10
80009158:	16 99       	mov	r9,r11
8000915a:	04 9a       	mov	r10,r2
8000915c:	06 9b       	mov	r11,r3
8000915e:	f0 16 00 05 	mcall	r6[20]
80009162:	14 98       	mov	r8,r10
80009164:	16 99       	mov	r9,r11
80009166:	10 9a       	mov	r10,r8
80009168:	12 9b       	mov	r11,r9
8000916a:	0a 98       	mov	r8,r5
8000916c:	a1 78       	lsl	r8,0x1
8000916e:	0a 08       	add	r8,r5
80009170:	a3 78       	lsl	r8,0x3
80009172:	e2 08 00 08 	add	r8,r1,r8
80009176:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000917a:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * yd;
8000917e:	ec f8 00 00 	ld.w	r8,r6[0]
80009182:	70 01       	ld.w	r1,r8[0x0]
80009184:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009188:	ec f8 00 00 	ld.w	r8,r6[0]
8000918c:	70 0a       	ld.w	r10,r8[0x0]
8000918e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009192:	12 98       	mov	r8,r9
80009194:	a1 78       	lsl	r8,0x1
80009196:	12 08       	add	r8,r9
80009198:	2f f8       	sub	r8,-1
8000919a:	a3 78       	lsl	r8,0x3
8000919c:	f4 08 00 08 	add	r8,r10,r8
800091a0:	f0 e2 07 a4 	ld.d	r2,r8[1956]
800091a4:	ee e8 ff 90 	ld.d	r8,r7[-112]
800091a8:	ee ea ff a8 	ld.d	r10,r7[-88]
800091ac:	f0 16 00 03 	mcall	r6[12]
800091b0:	14 98       	mov	r8,r10
800091b2:	16 99       	mov	r9,r11
800091b4:	04 9a       	mov	r10,r2
800091b6:	06 9b       	mov	r11,r3
800091b8:	f0 16 00 05 	mcall	r6[20]
800091bc:	14 98       	mov	r8,r10
800091be:	16 99       	mov	r9,r11
800091c0:	10 9a       	mov	r10,r8
800091c2:	12 9b       	mov	r11,r9
800091c4:	0a 98       	mov	r8,r5
800091c6:	a1 78       	lsl	r8,0x1
800091c8:	0a 08       	add	r8,r5
800091ca:	2f f8       	sub	r8,-1
800091cc:	a3 78       	lsl	r8,0x3
800091ce:	e2 08 00 08 	add	r8,r1,r8
800091d2:	f0 eb 07 a4 	st.d	r8[1956],r10
	centralData->estimation.state[axis][BIAIS] = centralData->estimation.state[axis][BIAIS] + K3 * yd;
800091d6:	ec f8 00 00 	ld.w	r8,r6[0]
800091da:	70 01       	ld.w	r1,r8[0x0]
800091dc:	ee f5 ff 8c 	ld.w	r5,r7[-116]
800091e0:	ec f8 00 00 	ld.w	r8,r6[0]
800091e4:	70 0a       	ld.w	r10,r8[0x0]
800091e6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800091ea:	12 98       	mov	r8,r9
800091ec:	a1 78       	lsl	r8,0x1
800091ee:	12 08       	add	r8,r9
800091f0:	a3 78       	lsl	r8,0x3
800091f2:	f4 08 00 08 	add	r8,r10,r8
800091f6:	f0 c8 f8 4c 	sub	r8,r8,-1972
800091fa:	f0 e2 00 00 	ld.d	r2,r8[0]
800091fe:	ee e8 ff 90 	ld.d	r8,r7[-112]
80009202:	ee ea ff b0 	ld.d	r10,r7[-80]
80009206:	f0 16 00 03 	mcall	r6[12]
8000920a:	14 98       	mov	r8,r10
8000920c:	16 99       	mov	r9,r11
8000920e:	04 9a       	mov	r10,r2
80009210:	06 9b       	mov	r11,r3
80009212:	f0 16 00 05 	mcall	r6[20]
80009216:	14 98       	mov	r8,r10
80009218:	16 99       	mov	r9,r11
8000921a:	10 9a       	mov	r10,r8
8000921c:	12 9b       	mov	r11,r9
8000921e:	0a 98       	mov	r8,r5
80009220:	a1 78       	lsl	r8,0x1
80009222:	0a 08       	add	r8,r5
80009224:	a3 78       	lsl	r8,0x3
80009226:	e2 08 00 08 	add	r8,r1,r8
8000922a:	f0 c8 f8 4c 	sub	r8,r8,-1972
8000922e:	f0 eb 00 00 	st.d	r8[0],r10

	P11 = -K1 * P[axis][1][0] + P[axis][0][0];
80009232:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009236:	10 99       	mov	r9,r8
80009238:	ee 19 80 00 	eorh	r9,0x8000
8000923c:	ef 49 ff 28 	st.w	r7[-216],r9
80009240:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009244:	ef 48 ff 2c 	st.w	r7[-212],r8
80009248:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000924c:	ec fa 00 18 	ld.w	r10,r6[24]
80009250:	12 98       	mov	r8,r9
80009252:	a3 78       	lsl	r8,0x3
80009254:	12 08       	add	r8,r9
80009256:	a3 78       	lsl	r8,0x3
80009258:	f4 08 00 08 	add	r8,r10,r8
8000925c:	2e 88       	sub	r8,-24
8000925e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009262:	ee ea ff 28 	ld.d	r10,r7[-216]
80009266:	f0 16 00 03 	mcall	r6[12]
8000926a:	14 98       	mov	r8,r10
8000926c:	16 99       	mov	r9,r11
8000926e:	10 9a       	mov	r10,r8
80009270:	12 9b       	mov	r11,r9
80009272:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009276:	ec fc 00 18 	ld.w	r12,r6[24]
8000927a:	12 98       	mov	r8,r9
8000927c:	a3 78       	lsl	r8,0x3
8000927e:	12 08       	add	r8,r9
80009280:	a3 78       	lsl	r8,0x3
80009282:	f8 08 00 08 	add	r8,r12,r8
80009286:	f0 e8 00 00 	ld.d	r8,r8[0]
8000928a:	f0 16 00 05 	mcall	r6[20]
8000928e:	14 98       	mov	r8,r10
80009290:	16 99       	mov	r9,r11
80009292:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P[axis][1][1] + P[axis][0][1];
80009296:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000929a:	10 99       	mov	r9,r8
8000929c:	ee 19 80 00 	eorh	r9,0x8000
800092a0:	ef 49 ff 30 	st.w	r7[-208],r9
800092a4:	ee f8 ff a4 	ld.w	r8,r7[-92]
800092a8:	ef 48 ff 34 	st.w	r7[-204],r8
800092ac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092b0:	ec fa 00 18 	ld.w	r10,r6[24]
800092b4:	12 98       	mov	r8,r9
800092b6:	a3 78       	lsl	r8,0x3
800092b8:	12 08       	add	r8,r9
800092ba:	a3 78       	lsl	r8,0x3
800092bc:	f4 08 00 08 	add	r8,r10,r8
800092c0:	2e 08       	sub	r8,-32
800092c2:	f0 e8 00 00 	ld.d	r8,r8[0]
800092c6:	ee ea ff 30 	ld.d	r10,r7[-208]
800092ca:	f0 16 00 03 	mcall	r6[12]
800092ce:	14 98       	mov	r8,r10
800092d0:	16 99       	mov	r9,r11
800092d2:	10 9a       	mov	r10,r8
800092d4:	12 9b       	mov	r11,r9
800092d6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800092da:	ec fc 00 18 	ld.w	r12,r6[24]
800092de:	12 98       	mov	r8,r9
800092e0:	a3 78       	lsl	r8,0x3
800092e2:	12 08       	add	r8,r9
800092e4:	2f f8       	sub	r8,-1
800092e6:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800092ea:	f0 16 00 05 	mcall	r6[20]
800092ee:	14 98       	mov	r8,r10
800092f0:	16 99       	mov	r9,r11
800092f2:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P[axis][1][2] + P[axis][0][2];
800092f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800092fa:	10 99       	mov	r9,r8
800092fc:	ee 19 80 00 	eorh	r9,0x8000
80009300:	ef 49 ff 38 	st.w	r7[-200],r9
80009304:	ee f8 ff a4 	ld.w	r8,r7[-92]
80009308:	ef 48 ff 3c 	st.w	r7[-196],r8
8000930c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009310:	ec fa 00 18 	ld.w	r10,r6[24]
80009314:	12 98       	mov	r8,r9
80009316:	a3 78       	lsl	r8,0x3
80009318:	12 08       	add	r8,r9
8000931a:	a3 78       	lsl	r8,0x3
8000931c:	f4 08 00 08 	add	r8,r10,r8
80009320:	2d 88       	sub	r8,-40
80009322:	f0 e8 00 00 	ld.d	r8,r8[0]
80009326:	ee ea ff 38 	ld.d	r10,r7[-200]
8000932a:	f0 16 00 03 	mcall	r6[12]
8000932e:	14 98       	mov	r8,r10
80009330:	16 99       	mov	r9,r11
80009332:	10 9a       	mov	r10,r8
80009334:	12 9b       	mov	r11,r9
80009336:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000933a:	ec fc 00 18 	ld.w	r12,r6[24]
8000933e:	12 98       	mov	r8,r9
80009340:	a3 78       	lsl	r8,0x3
80009342:	12 08       	add	r8,r9
80009344:	a3 78       	lsl	r8,0x3
80009346:	f8 08 00 08 	add	r8,r12,r8
8000934a:	2f 08       	sub	r8,-16
8000934c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009350:	f0 16 00 05 	mcall	r6[20]
80009354:	14 98       	mov	r8,r10
80009356:	16 99       	mov	r9,r11
80009358:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P[axis][1][0];
8000935c:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009360:	30 0a       	mov	r10,0
80009362:	fc 1b 3f f0 	movh	r11,0x3ff0
80009366:	f0 16 00 11 	mcall	r6[68]
8000936a:	14 98       	mov	r8,r10
8000936c:	16 99       	mov	r9,r11
8000936e:	10 9a       	mov	r10,r8
80009370:	12 9b       	mov	r11,r9
80009372:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009376:	ec fc 00 18 	ld.w	r12,r6[24]
8000937a:	12 98       	mov	r8,r9
8000937c:	a3 78       	lsl	r8,0x3
8000937e:	12 08       	add	r8,r9
80009380:	a3 78       	lsl	r8,0x3
80009382:	f8 08 00 08 	add	r8,r12,r8
80009386:	2e 88       	sub	r8,-24
80009388:	f0 e8 00 00 	ld.d	r8,r8[0]
8000938c:	f0 16 00 03 	mcall	r6[12]
80009390:	14 98       	mov	r8,r10
80009392:	16 99       	mov	r9,r11
80009394:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P[axis][1][1];
80009398:	ee e8 ff a8 	ld.d	r8,r7[-88]
8000939c:	30 0a       	mov	r10,0
8000939e:	fc 1b 3f f0 	movh	r11,0x3ff0
800093a2:	f0 16 00 11 	mcall	r6[68]
800093a6:	14 98       	mov	r8,r10
800093a8:	16 99       	mov	r9,r11
800093aa:	10 9a       	mov	r10,r8
800093ac:	12 9b       	mov	r11,r9
800093ae:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093b2:	ec fc 00 18 	ld.w	r12,r6[24]
800093b6:	12 98       	mov	r8,r9
800093b8:	a3 78       	lsl	r8,0x3
800093ba:	12 08       	add	r8,r9
800093bc:	a3 78       	lsl	r8,0x3
800093be:	f8 08 00 08 	add	r8,r12,r8
800093c2:	2e 08       	sub	r8,-32
800093c4:	f0 e8 00 00 	ld.d	r8,r8[0]
800093c8:	f0 16 00 03 	mcall	r6[12]
800093cc:	14 98       	mov	r8,r10
800093ce:	16 99       	mov	r9,r11
800093d0:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P[axis][1][2];
800093d4:	ee e8 ff a8 	ld.d	r8,r7[-88]
800093d8:	30 0a       	mov	r10,0
800093da:	fc 1b 3f f0 	movh	r11,0x3ff0
800093de:	f0 16 00 11 	mcall	r6[68]
800093e2:	14 98       	mov	r8,r10
800093e4:	16 99       	mov	r9,r11
800093e6:	10 9a       	mov	r10,r8
800093e8:	12 9b       	mov	r11,r9
800093ea:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800093ee:	ec fc 00 18 	ld.w	r12,r6[24]
800093f2:	12 98       	mov	r8,r9
800093f4:	a3 78       	lsl	r8,0x3
800093f6:	12 08       	add	r8,r9
800093f8:	a3 78       	lsl	r8,0x3
800093fa:	f8 08 00 08 	add	r8,r12,r8
800093fe:	2d 88       	sub	r8,-40
80009400:	f0 e8 00 00 	ld.d	r8,r8[0]
80009404:	f0 16 00 03 	mcall	r6[12]
80009408:	14 98       	mov	r8,r10
8000940a:	16 99       	mov	r9,r11
8000940c:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P[axis][1][0] + P[axis][2][0];
80009410:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009414:	10 99       	mov	r9,r8
80009416:	ee 19 80 00 	eorh	r9,0x8000
8000941a:	ef 49 ff 40 	st.w	r7[-192],r9
8000941e:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009422:	ef 48 ff 44 	st.w	r7[-188],r8
80009426:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000942a:	ec fa 00 18 	ld.w	r10,r6[24]
8000942e:	12 98       	mov	r8,r9
80009430:	a3 78       	lsl	r8,0x3
80009432:	12 08       	add	r8,r9
80009434:	a3 78       	lsl	r8,0x3
80009436:	f4 08 00 08 	add	r8,r10,r8
8000943a:	2e 88       	sub	r8,-24
8000943c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009440:	ee ea ff 40 	ld.d	r10,r7[-192]
80009444:	f0 16 00 03 	mcall	r6[12]
80009448:	14 98       	mov	r8,r10
8000944a:	16 99       	mov	r9,r11
8000944c:	10 9a       	mov	r10,r8
8000944e:	12 9b       	mov	r11,r9
80009450:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009454:	ec fc 00 18 	ld.w	r12,r6[24]
80009458:	12 98       	mov	r8,r9
8000945a:	a3 78       	lsl	r8,0x3
8000945c:	12 08       	add	r8,r9
8000945e:	a3 78       	lsl	r8,0x3
80009460:	f8 08 00 08 	add	r8,r12,r8
80009464:	2d 08       	sub	r8,-48
80009466:	f0 e8 00 00 	ld.d	r8,r8[0]
8000946a:	f0 16 00 05 	mcall	r6[20]
8000946e:	14 98       	mov	r8,r10
80009470:	16 99       	mov	r9,r11
80009472:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P[axis][1][1] + P[axis][2][1];
80009476:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000947a:	10 99       	mov	r9,r8
8000947c:	ee 19 80 00 	eorh	r9,0x8000
80009480:	ef 49 ff 48 	st.w	r7[-184],r9
80009484:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009488:	ef 48 ff 4c 	st.w	r7[-180],r8
8000948c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009490:	ec fa 00 18 	ld.w	r10,r6[24]
80009494:	12 98       	mov	r8,r9
80009496:	a3 78       	lsl	r8,0x3
80009498:	12 08       	add	r8,r9
8000949a:	a3 78       	lsl	r8,0x3
8000949c:	f4 08 00 08 	add	r8,r10,r8
800094a0:	2e 08       	sub	r8,-32
800094a2:	f0 e8 00 00 	ld.d	r8,r8[0]
800094a6:	ee ea ff 48 	ld.d	r10,r7[-184]
800094aa:	f0 16 00 03 	mcall	r6[12]
800094ae:	14 98       	mov	r8,r10
800094b0:	16 99       	mov	r9,r11
800094b2:	10 9a       	mov	r10,r8
800094b4:	12 9b       	mov	r11,r9
800094b6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094ba:	ec fc 00 18 	ld.w	r12,r6[24]
800094be:	12 98       	mov	r8,r9
800094c0:	a3 78       	lsl	r8,0x3
800094c2:	12 08       	add	r8,r9
800094c4:	a3 78       	lsl	r8,0x3
800094c6:	f8 08 00 08 	add	r8,r12,r8
800094ca:	2c 88       	sub	r8,-56
800094cc:	f0 e8 00 00 	ld.d	r8,r8[0]
800094d0:	f0 16 00 05 	mcall	r6[20]
800094d4:	14 98       	mov	r8,r10
800094d6:	16 99       	mov	r9,r11
800094d8:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P[axis][1][2] + P[axis][2][2];
800094dc:	ee f8 ff b0 	ld.w	r8,r7[-80]
800094e0:	10 99       	mov	r9,r8
800094e2:	ee 19 80 00 	eorh	r9,0x8000
800094e6:	ef 49 ff 50 	st.w	r7[-176],r9
800094ea:	ee f8 ff b4 	ld.w	r8,r7[-76]
800094ee:	ef 48 ff 54 	st.w	r7[-172],r8
800094f2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800094f6:	ec fa 00 18 	ld.w	r10,r6[24]
800094fa:	12 98       	mov	r8,r9
800094fc:	a3 78       	lsl	r8,0x3
800094fe:	12 08       	add	r8,r9
80009500:	a3 78       	lsl	r8,0x3
80009502:	f4 08 00 08 	add	r8,r10,r8
80009506:	2d 88       	sub	r8,-40
80009508:	f0 e8 00 00 	ld.d	r8,r8[0]
8000950c:	ee ea ff 50 	ld.d	r10,r7[-176]
80009510:	f0 16 00 03 	mcall	r6[12]
80009514:	14 98       	mov	r8,r10
80009516:	16 99       	mov	r9,r11
80009518:	10 9a       	mov	r10,r8
8000951a:	12 9b       	mov	r11,r9
8000951c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009520:	ec fc 00 18 	ld.w	r12,r6[24]
80009524:	12 98       	mov	r8,r9
80009526:	a3 78       	lsl	r8,0x3
80009528:	12 08       	add	r8,r9
8000952a:	a3 78       	lsl	r8,0x3
8000952c:	f8 08 00 08 	add	r8,r12,r8
80009530:	2c 08       	sub	r8,-64
80009532:	f0 e8 00 00 	ld.d	r8,r8[0]
80009536:	f0 16 00 05 	mcall	r6[20]
8000953a:	14 98       	mov	r8,r10
8000953c:	16 99       	mov	r9,r11
8000953e:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009542:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009546:	ec fa 00 18 	ld.w	r10,r6[24]
8000954a:	12 98       	mov	r8,r9
8000954c:	a3 78       	lsl	r8,0x3
8000954e:	12 08       	add	r8,r9
80009550:	a3 78       	lsl	r8,0x3
80009552:	10 0a       	add	r10,r8
80009554:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009558:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
8000955c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009560:	ec fb 00 18 	ld.w	r11,r6[24]
80009564:	12 98       	mov	r8,r9
80009566:	a3 78       	lsl	r8,0x3
80009568:	12 08       	add	r8,r9
8000956a:	f0 ca ff ff 	sub	r10,r8,-1
8000956e:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009572:	f6 0a 08 38 	st.d	r11[r10<<0x3],r8
	P[axis][0][2] = P13;
80009576:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000957a:	ec fa 00 18 	ld.w	r10,r6[24]
8000957e:	12 98       	mov	r8,r9
80009580:	a3 78       	lsl	r8,0x3
80009582:	12 08       	add	r8,r9
80009584:	a3 78       	lsl	r8,0x3
80009586:	f4 08 00 08 	add	r8,r10,r8
8000958a:	f0 ca ff f0 	sub	r10,r8,-16
8000958e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009592:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][0] = P21;
80009596:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000959a:	ec fa 00 18 	ld.w	r10,r6[24]
8000959e:	12 98       	mov	r8,r9
800095a0:	a3 78       	lsl	r8,0x3
800095a2:	12 08       	add	r8,r9
800095a4:	a3 78       	lsl	r8,0x3
800095a6:	f4 08 00 08 	add	r8,r10,r8
800095aa:	f0 ca ff e8 	sub	r10,r8,-24
800095ae:	ee e8 ff d0 	ld.d	r8,r7[-48]
800095b2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
800095b6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095ba:	ec fa 00 18 	ld.w	r10,r6[24]
800095be:	12 98       	mov	r8,r9
800095c0:	a3 78       	lsl	r8,0x3
800095c2:	12 08       	add	r8,r9
800095c4:	a3 78       	lsl	r8,0x3
800095c6:	f4 08 00 08 	add	r8,r10,r8
800095ca:	f0 ca ff e0 	sub	r10,r8,-32
800095ce:	ee e8 ff d8 	ld.d	r8,r7[-40]
800095d2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][2] = P23;
800095d6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095da:	ec fa 00 18 	ld.w	r10,r6[24]
800095de:	12 98       	mov	r8,r9
800095e0:	a3 78       	lsl	r8,0x3
800095e2:	12 08       	add	r8,r9
800095e4:	a3 78       	lsl	r8,0x3
800095e6:	f4 08 00 08 	add	r8,r10,r8
800095ea:	f0 ca ff d8 	sub	r10,r8,-40
800095ee:	ee e8 ff e0 	ld.d	r8,r7[-32]
800095f2:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][0] = P31;
800095f6:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800095fa:	ec fa 00 18 	ld.w	r10,r6[24]
800095fe:	12 98       	mov	r8,r9
80009600:	a3 78       	lsl	r8,0x3
80009602:	12 08       	add	r8,r9
80009604:	a3 78       	lsl	r8,0x3
80009606:	f4 08 00 08 	add	r8,r10,r8
8000960a:	f0 ca ff d0 	sub	r10,r8,-48
8000960e:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009612:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][1] = P32;
80009616:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000961a:	ec fa 00 18 	ld.w	r10,r6[24]
8000961e:	12 98       	mov	r8,r9
80009620:	a3 78       	lsl	r8,0x3
80009622:	12 08       	add	r8,r9
80009624:	a3 78       	lsl	r8,0x3
80009626:	f4 08 00 08 	add	r8,r10,r8
8000962a:	f0 ca ff c8 	sub	r10,r8,-56
8000962e:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009632:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][2][2] = P33;
80009636:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000963a:	ec fa 00 18 	ld.w	r10,r6[24]
8000963e:	12 98       	mov	r8,r9
80009640:	a3 78       	lsl	r8,0x3
80009642:	12 08       	add	r8,r9
80009644:	a3 78       	lsl	r8,0x3
80009646:	f4 08 00 08 	add	r8,r10,r8
8000964a:	f0 ca ff c0 	sub	r10,r8,-64
8000964e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009652:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	yd = speed_meas - centralData->position_estimator.vel[axis];
80009656:	ec f8 00 00 	ld.w	r8,r6[0]
8000965a:	70 09       	ld.w	r9,r8[0x0]
8000965c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009660:	f0 c8 fd 91 	sub	r8,r8,-623
80009664:	f2 08 03 29 	ld.w	r9,r9[r8<<0x2]
80009668:	ee f8 ff 88 	ld.w	r8,r7[-120]
8000966c:	e5 a1 08 89 	cop	cp0,cr8,cr8,cr9,0x42
80009670:	10 9c       	mov	r12,r8
80009672:	f0 16 00 02 	mcall	r6[8]
80009676:	14 98       	mov	r8,r10
80009678:	16 99       	mov	r9,r11
8000967a:	ee e9 ff 90 	st.d	r7[-112],r8
	
	S = P2[axis][1][1] + R2[axis];
8000967e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009682:	ec fa 00 1c 	ld.w	r10,r6[28]
80009686:	12 98       	mov	r8,r9
80009688:	a3 78       	lsl	r8,0x3
8000968a:	12 08       	add	r8,r9
8000968c:	a3 78       	lsl	r8,0x3
8000968e:	f4 08 00 08 	add	r8,r10,r8
80009692:	2e 08       	sub	r8,-32
80009694:	f0 ea 00 00 	ld.d	r10,r8[0]
80009698:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000969c:	ec f8 01 70 	ld.w	r8,r6[368]
800096a0:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
800096a4:	f0 16 00 05 	mcall	r6[20]
800096a8:	14 98       	mov	r8,r10
800096aa:	16 99       	mov	r9,r11
800096ac:	ee e9 ff 98 	st.d	r7[-104],r8
	K1 = P2[axis][0][1] * 1/S;
800096b0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096b4:	ec fa 00 1c 	ld.w	r10,r6[28]
800096b8:	12 98       	mov	r8,r9
800096ba:	a3 78       	lsl	r8,0x3
800096bc:	12 08       	add	r8,r9
800096be:	2f f8       	sub	r8,-1
800096c0:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
800096c4:	ee e8 ff 98 	ld.d	r8,r7[-104]
800096c8:	f0 16 00 0c 	mcall	r6[48]
800096cc:	14 98       	mov	r8,r10
800096ce:	16 99       	mov	r9,r11
800096d0:	ee e9 ff a0 	st.d	r7[-96],r8
	K2 = P2[axis][1][1] * 1/S;
800096d4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800096d8:	ec fa 00 1c 	ld.w	r10,r6[28]
800096dc:	12 98       	mov	r8,r9
800096de:	a3 78       	lsl	r8,0x3
800096e0:	12 08       	add	r8,r9
800096e2:	a3 78       	lsl	r8,0x3
800096e4:	f4 08 00 08 	add	r8,r10,r8
800096e8:	2e 08       	sub	r8,-32
800096ea:	f0 ea 00 00 	ld.d	r10,r8[0]
800096ee:	ee e8 ff 98 	ld.d	r8,r7[-104]
800096f2:	f0 16 00 0c 	mcall	r6[48]
800096f6:	14 98       	mov	r8,r10
800096f8:	16 99       	mov	r9,r11
800096fa:	ee e9 ff a8 	st.d	r7[-88],r8
	K3 = P2[axis][2][1] * 1/S;
800096fe:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009702:	ec fa 00 1c 	ld.w	r10,r6[28]
80009706:	12 98       	mov	r8,r9
80009708:	a3 78       	lsl	r8,0x3
8000970a:	12 08       	add	r8,r9
8000970c:	a3 78       	lsl	r8,0x3
8000970e:	f4 08 00 08 	add	r8,r10,r8
80009712:	2c 88       	sub	r8,-56
80009714:	f0 ea 00 00 	ld.d	r10,r8[0]
80009718:	ee e8 ff 98 	ld.d	r8,r7[-104]
8000971c:	f0 16 00 0c 	mcall	r6[48]
80009720:	14 98       	mov	r8,r10
80009722:	16 99       	mov	r9,r11
80009724:	ee e9 ff b0 	st.d	r7[-80],r8
	
	centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * yd;
80009728:	ec f8 00 00 	ld.w	r8,r6[0]
8000972c:	70 01       	ld.w	r1,r8[0x0]
8000972e:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009732:	ec f8 00 00 	ld.w	r8,r6[0]
80009736:	70 09       	ld.w	r9,r8[0x0]
80009738:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000973c:	f0 c8 fd 87 	sub	r8,r8,-633
80009740:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009744:	10 9c       	mov	r12,r8
80009746:	f0 16 00 02 	mcall	r6[8]
8000974a:	14 92       	mov	r2,r10
8000974c:	16 93       	mov	r3,r11
8000974e:	ee e8 ff 90 	ld.d	r8,r7[-112]
80009752:	ee ea ff a0 	ld.d	r10,r7[-96]
80009756:	f0 16 00 03 	mcall	r6[12]
8000975a:	14 98       	mov	r8,r10
8000975c:	16 99       	mov	r9,r11
8000975e:	04 9a       	mov	r10,r2
80009760:	06 9b       	mov	r11,r3
80009762:	f0 16 00 05 	mcall	r6[20]
80009766:	14 98       	mov	r8,r10
80009768:	16 99       	mov	r9,r11
8000976a:	10 9a       	mov	r10,r8
8000976c:	12 9b       	mov	r11,r9
8000976e:	f0 16 00 08 	mcall	r6[32]
80009772:	18 99       	mov	r9,r12
80009774:	ea c8 fd 87 	sub	r8,r5,-633
80009778:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * yd;
8000977c:	ec f8 00 00 	ld.w	r8,r6[0]
80009780:	70 01       	ld.w	r1,r8[0x0]
80009782:	ee f5 ff 8c 	ld.w	r5,r7[-116]
80009786:	ec f8 00 00 	ld.w	r8,r6[0]
8000978a:	70 09       	ld.w	r9,r8[0x0]
8000978c:	ee f8 ff 8c 	ld.w	r8,r7[-116]
80009790:	f0 c8 fd 91 	sub	r8,r8,-623
80009794:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
80009798:	10 9c       	mov	r12,r8
8000979a:	f0 16 00 02 	mcall	r6[8]
8000979e:	14 92       	mov	r2,r10
800097a0:	16 93       	mov	r3,r11
800097a2:	ee e8 ff 90 	ld.d	r8,r7[-112]
800097a6:	ee ea ff a8 	ld.d	r10,r7[-88]
800097aa:	f0 16 00 03 	mcall	r6[12]
800097ae:	14 98       	mov	r8,r10
800097b0:	16 99       	mov	r9,r11
800097b2:	04 9a       	mov	r10,r2
800097b4:	06 9b       	mov	r11,r3
800097b6:	f0 16 00 05 	mcall	r6[20]
800097ba:	14 98       	mov	r8,r10
800097bc:	16 99       	mov	r9,r11
800097be:	10 9a       	mov	r10,r8
800097c0:	12 9b       	mov	r11,r9
800097c2:	f0 16 00 08 	mcall	r6[32]
800097c6:	18 99       	mov	r9,r12
800097c8:	ea c8 fd 91 	sub	r8,r5,-623
800097cc:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	centralData->imu1.attitude.be[axis+ACC_OFFSET] = centralData->imu1.attitude.be[axis+ACC_OFFSET] + K3 * yd;
800097d0:	ec f8 00 00 	ld.w	r8,r6[0]
800097d4:	70 01       	ld.w	r1,r8[0x0]
800097d6:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800097da:	f0 c5 ff fd 	sub	r5,r8,-3
800097de:	ec f8 00 00 	ld.w	r8,r6[0]
800097e2:	70 09       	ld.w	r9,r8[0x0]
800097e4:	ee f8 ff 8c 	ld.w	r8,r7[-116]
800097e8:	2f d8       	sub	r8,-3
800097ea:	2f 48       	sub	r8,-12
800097ec:	f2 08 03 28 	ld.w	r8,r9[r8<<0x2]
800097f0:	10 9c       	mov	r12,r8
800097f2:	f0 16 00 02 	mcall	r6[8]
800097f6:	14 92       	mov	r2,r10
800097f8:	16 93       	mov	r3,r11
800097fa:	ee e8 ff 90 	ld.d	r8,r7[-112]
800097fe:	ee ea ff b0 	ld.d	r10,r7[-80]
80009802:	f0 16 00 03 	mcall	r6[12]
80009806:	14 98       	mov	r8,r10
80009808:	16 99       	mov	r9,r11
8000980a:	04 9a       	mov	r10,r2
8000980c:	06 9b       	mov	r11,r3
8000980e:	f0 16 00 05 	mcall	r6[20]
80009812:	14 98       	mov	r8,r10
80009814:	16 99       	mov	r9,r11
80009816:	10 9a       	mov	r10,r8
80009818:	12 9b       	mov	r11,r9
8000981a:	f0 16 00 08 	mcall	r6[32]
8000981e:	18 99       	mov	r9,r12
80009820:	ea c8 ff f4 	sub	r8,r5,-12
80009824:	e2 08 09 29 	st.w	r1[r8<<0x2],r9
	
	P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
80009828:	ee f8 ff a0 	ld.w	r8,r7[-96]
8000982c:	10 99       	mov	r9,r8
8000982e:	ee 19 80 00 	eorh	r9,0x8000
80009832:	ef 49 ff 58 	st.w	r7[-168],r9
80009836:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000983a:	ef 48 ff 5c 	st.w	r7[-164],r8
8000983e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009842:	ec fa 00 1c 	ld.w	r10,r6[28]
80009846:	12 98       	mov	r8,r9
80009848:	a3 78       	lsl	r8,0x3
8000984a:	12 08       	add	r8,r9
8000984c:	a3 78       	lsl	r8,0x3
8000984e:	f4 08 00 08 	add	r8,r10,r8
80009852:	2e 88       	sub	r8,-24
80009854:	f0 e8 00 00 	ld.d	r8,r8[0]
80009858:	ee ea ff 58 	ld.d	r10,r7[-168]
8000985c:	f0 16 00 03 	mcall	r6[12]
80009860:	14 98       	mov	r8,r10
80009862:	16 99       	mov	r9,r11
80009864:	10 9a       	mov	r10,r8
80009866:	12 9b       	mov	r11,r9
80009868:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000986c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009870:	12 98       	mov	r8,r9
80009872:	a3 78       	lsl	r8,0x3
80009874:	12 08       	add	r8,r9
80009876:	a3 78       	lsl	r8,0x3
80009878:	f8 08 00 08 	add	r8,r12,r8
8000987c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009880:	f0 16 00 05 	mcall	r6[20]
80009884:	14 98       	mov	r8,r10
80009886:	16 99       	mov	r9,r11
80009888:	ee e9 ff b8 	st.d	r7[-72],r8
	P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000988c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80009890:	10 99       	mov	r9,r8
80009892:	ee 19 80 00 	eorh	r9,0x8000
80009896:	ef 49 ff 60 	st.w	r7[-160],r9
8000989a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8000989e:	ef 48 ff 64 	st.w	r7[-156],r8
800098a2:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098a6:	ec fa 00 1c 	ld.w	r10,r6[28]
800098aa:	12 98       	mov	r8,r9
800098ac:	a3 78       	lsl	r8,0x3
800098ae:	12 08       	add	r8,r9
800098b0:	a3 78       	lsl	r8,0x3
800098b2:	f4 08 00 08 	add	r8,r10,r8
800098b6:	2e 08       	sub	r8,-32
800098b8:	f0 e8 00 00 	ld.d	r8,r8[0]
800098bc:	ee ea ff 60 	ld.d	r10,r7[-160]
800098c0:	f0 16 00 03 	mcall	r6[12]
800098c4:	14 98       	mov	r8,r10
800098c6:	16 99       	mov	r9,r11
800098c8:	10 9a       	mov	r10,r8
800098ca:	12 9b       	mov	r11,r9
800098cc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800098d0:	ec fc 00 1c 	ld.w	r12,r6[28]
800098d4:	12 98       	mov	r8,r9
800098d6:	a3 78       	lsl	r8,0x3
800098d8:	12 08       	add	r8,r9
800098da:	2f f8       	sub	r8,-1
800098dc:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
800098e0:	f0 16 00 05 	mcall	r6[20]
800098e4:	14 98       	mov	r8,r10
800098e6:	16 99       	mov	r9,r11
800098e8:	ee e9 ff c0 	st.d	r7[-64],r8
	P13 = -K1 * P2[axis][1][2] + P2[axis][0][2];
800098ec:	ee f8 ff a0 	ld.w	r8,r7[-96]
800098f0:	10 99       	mov	r9,r8
800098f2:	ee 19 80 00 	eorh	r9,0x8000
800098f6:	ef 49 ff 68 	st.w	r7[-152],r9
800098fa:	ee f8 ff a4 	ld.w	r8,r7[-92]
800098fe:	ef 48 ff 6c 	st.w	r7[-148],r8
80009902:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009906:	ec fa 00 1c 	ld.w	r10,r6[28]
8000990a:	12 98       	mov	r8,r9
8000990c:	a3 78       	lsl	r8,0x3
8000990e:	12 08       	add	r8,r9
80009910:	a3 78       	lsl	r8,0x3
80009912:	f4 08 00 08 	add	r8,r10,r8
80009916:	2d 88       	sub	r8,-40
80009918:	f0 e8 00 00 	ld.d	r8,r8[0]
8000991c:	ee ea ff 68 	ld.d	r10,r7[-152]
80009920:	f0 16 00 03 	mcall	r6[12]
80009924:	14 98       	mov	r8,r10
80009926:	16 99       	mov	r9,r11
80009928:	10 9a       	mov	r10,r8
8000992a:	12 9b       	mov	r11,r9
8000992c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009930:	ec fc 00 1c 	ld.w	r12,r6[28]
80009934:	12 98       	mov	r8,r9
80009936:	a3 78       	lsl	r8,0x3
80009938:	12 08       	add	r8,r9
8000993a:	a3 78       	lsl	r8,0x3
8000993c:	f8 08 00 08 	add	r8,r12,r8
80009940:	2f 08       	sub	r8,-16
80009942:	f0 e8 00 00 	ld.d	r8,r8[0]
80009946:	f0 16 00 05 	mcall	r6[20]
8000994a:	14 98       	mov	r8,r10
8000994c:	16 99       	mov	r9,r11
8000994e:	ee e9 ff c8 	st.d	r7[-56],r8
	P21 = (1. - K2) * P2[axis][1][0];
80009952:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009956:	30 0a       	mov	r10,0
80009958:	fc 1b 3f f0 	movh	r11,0x3ff0
8000995c:	f0 16 00 11 	mcall	r6[68]
80009960:	14 98       	mov	r8,r10
80009962:	16 99       	mov	r9,r11
80009964:	10 9a       	mov	r10,r8
80009966:	12 9b       	mov	r11,r9
80009968:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8000996c:	ec fc 00 1c 	ld.w	r12,r6[28]
80009970:	12 98       	mov	r8,r9
80009972:	a3 78       	lsl	r8,0x3
80009974:	12 08       	add	r8,r9
80009976:	a3 78       	lsl	r8,0x3
80009978:	f8 08 00 08 	add	r8,r12,r8
8000997c:	2e 88       	sub	r8,-24
8000997e:	f0 e8 00 00 	ld.d	r8,r8[0]
80009982:	f0 16 00 03 	mcall	r6[12]
80009986:	14 98       	mov	r8,r10
80009988:	16 99       	mov	r9,r11
8000998a:	ee e9 ff d0 	st.d	r7[-48],r8
	P22 = (1. - K2) * P2[axis][1][1];
8000998e:	ee e8 ff a8 	ld.d	r8,r7[-88]
80009992:	30 0a       	mov	r10,0
80009994:	fc 1b 3f f0 	movh	r11,0x3ff0
80009998:	f0 16 00 11 	mcall	r6[68]
8000999c:	14 98       	mov	r8,r10
8000999e:	16 99       	mov	r9,r11
800099a0:	10 9a       	mov	r10,r8
800099a2:	12 9b       	mov	r11,r9
800099a4:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099a8:	ec fc 00 1c 	ld.w	r12,r6[28]
800099ac:	12 98       	mov	r8,r9
800099ae:	a3 78       	lsl	r8,0x3
800099b0:	12 08       	add	r8,r9
800099b2:	a3 78       	lsl	r8,0x3
800099b4:	f8 08 00 08 	add	r8,r12,r8
800099b8:	2e 08       	sub	r8,-32
800099ba:	f0 e8 00 00 	ld.d	r8,r8[0]
800099be:	f0 16 00 03 	mcall	r6[12]
800099c2:	14 98       	mov	r8,r10
800099c4:	16 99       	mov	r9,r11
800099c6:	ee e9 ff d8 	st.d	r7[-40],r8
	P23 = (1. - K2) * P2[axis][1][2];
800099ca:	ee e8 ff a8 	ld.d	r8,r7[-88]
800099ce:	30 0a       	mov	r10,0
800099d0:	fc 1b 3f f0 	movh	r11,0x3ff0
800099d4:	f0 16 00 11 	mcall	r6[68]
800099d8:	14 98       	mov	r8,r10
800099da:	16 99       	mov	r9,r11
800099dc:	10 9a       	mov	r10,r8
800099de:	12 9b       	mov	r11,r9
800099e0:	ee f9 ff 8c 	ld.w	r9,r7[-116]
800099e4:	ec fc 00 1c 	ld.w	r12,r6[28]
800099e8:	12 98       	mov	r8,r9
800099ea:	a3 78       	lsl	r8,0x3
800099ec:	12 08       	add	r8,r9
800099ee:	a3 78       	lsl	r8,0x3
800099f0:	f8 08 00 08 	add	r8,r12,r8
800099f4:	2d 88       	sub	r8,-40
800099f6:	f0 e8 00 00 	ld.d	r8,r8[0]
800099fa:	f0 16 00 03 	mcall	r6[12]
800099fe:	14 98       	mov	r8,r10
80009a00:	16 99       	mov	r9,r11
80009a02:	ee e9 ff e0 	st.d	r7[-32],r8
	P31 = -K3 * P2[axis][1][0] + P2[axis][2][0];
80009a06:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009a0a:	10 99       	mov	r9,r8
80009a0c:	ee 19 80 00 	eorh	r9,0x8000
80009a10:	ef 49 ff 70 	st.w	r7[-144],r9
80009a14:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009a18:	ef 48 ff 74 	st.w	r7[-140],r8
80009a1c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a20:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a24:	12 98       	mov	r8,r9
80009a26:	a3 78       	lsl	r8,0x3
80009a28:	12 08       	add	r8,r9
80009a2a:	a3 78       	lsl	r8,0x3
80009a2c:	f4 08 00 08 	add	r8,r10,r8
80009a30:	2e 88       	sub	r8,-24
80009a32:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a36:	ee ea ff 70 	ld.d	r10,r7[-144]
80009a3a:	f0 16 00 03 	mcall	r6[12]
80009a3e:	14 98       	mov	r8,r10
80009a40:	16 99       	mov	r9,r11
80009a42:	10 9a       	mov	r10,r8
80009a44:	12 9b       	mov	r11,r9
80009a46:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a4a:	ec fc 00 1c 	ld.w	r12,r6[28]
80009a4e:	12 98       	mov	r8,r9
80009a50:	a3 78       	lsl	r8,0x3
80009a52:	12 08       	add	r8,r9
80009a54:	a3 78       	lsl	r8,0x3
80009a56:	f8 08 00 08 	add	r8,r12,r8
80009a5a:	2d 08       	sub	r8,-48
80009a5c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a60:	f0 16 00 05 	mcall	r6[20]
80009a64:	14 98       	mov	r8,r10
80009a66:	16 99       	mov	r9,r11
80009a68:	ee e9 ff e8 	st.d	r7[-24],r8
	P32 = -K3 * P2[axis][1][1] + P2[axis][2][1];
80009a6c:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009a70:	10 99       	mov	r9,r8
80009a72:	ee 19 80 00 	eorh	r9,0x8000
80009a76:	ef 49 ff 78 	st.w	r7[-136],r9
80009a7a:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009a7e:	ef 48 ff 7c 	st.w	r7[-132],r8
80009a82:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009a86:	ec fa 00 1c 	ld.w	r10,r6[28]
80009a8a:	12 98       	mov	r8,r9
80009a8c:	a3 78       	lsl	r8,0x3
80009a8e:	12 08       	add	r8,r9
80009a90:	a3 78       	lsl	r8,0x3
80009a92:	f4 08 00 08 	add	r8,r10,r8
80009a96:	2e 08       	sub	r8,-32
80009a98:	f0 e8 00 00 	ld.d	r8,r8[0]
80009a9c:	ee ea ff 78 	ld.d	r10,r7[-136]
80009aa0:	f0 16 00 03 	mcall	r6[12]
80009aa4:	14 98       	mov	r8,r10
80009aa6:	16 99       	mov	r9,r11
80009aa8:	10 9a       	mov	r10,r8
80009aaa:	12 9b       	mov	r11,r9
80009aac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009ab0:	ec fc 00 1c 	ld.w	r12,r6[28]
80009ab4:	12 98       	mov	r8,r9
80009ab6:	a3 78       	lsl	r8,0x3
80009ab8:	12 08       	add	r8,r9
80009aba:	a3 78       	lsl	r8,0x3
80009abc:	f8 08 00 08 	add	r8,r12,r8
80009ac0:	2c 88       	sub	r8,-56
80009ac2:	f0 e8 00 00 	ld.d	r8,r8[0]
80009ac6:	f0 16 00 05 	mcall	r6[20]
80009aca:	14 98       	mov	r8,r10
80009acc:	16 99       	mov	r9,r11
80009ace:	ee e9 ff f0 	st.d	r7[-16],r8
	P33 = -K3 * P2[axis][1][2] + P2[axis][2][2];
80009ad2:	ee f8 ff b0 	ld.w	r8,r7[-80]
80009ad6:	10 99       	mov	r9,r8
80009ad8:	ee 19 80 00 	eorh	r9,0x8000
80009adc:	ef 49 ff 80 	st.w	r7[-128],r9
80009ae0:	ee f8 ff b4 	ld.w	r8,r7[-76]
80009ae4:	ef 48 ff 84 	st.w	r7[-124],r8
80009ae8:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009aec:	ec fa 00 1c 	ld.w	r10,r6[28]
80009af0:	12 98       	mov	r8,r9
80009af2:	a3 78       	lsl	r8,0x3
80009af4:	12 08       	add	r8,r9
80009af6:	a3 78       	lsl	r8,0x3
80009af8:	f4 08 00 08 	add	r8,r10,r8
80009afc:	2d 88       	sub	r8,-40
80009afe:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b02:	ee ea ff 80 	ld.d	r10,r7[-128]
80009b06:	f0 16 00 03 	mcall	r6[12]
80009b0a:	14 98       	mov	r8,r10
80009b0c:	16 99       	mov	r9,r11
80009b0e:	10 9a       	mov	r10,r8
80009b10:	12 9b       	mov	r11,r9
80009b12:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b16:	ec fc 00 1c 	ld.w	r12,r6[28]
80009b1a:	12 98       	mov	r8,r9
80009b1c:	a3 78       	lsl	r8,0x3
80009b1e:	12 08       	add	r8,r9
80009b20:	a3 78       	lsl	r8,0x3
80009b22:	f8 08 00 08 	add	r8,r12,r8
80009b26:	2c 08       	sub	r8,-64
80009b28:	f0 e8 00 00 	ld.d	r8,r8[0]
80009b2c:	f0 16 00 05 	mcall	r6[20]
80009b30:	14 98       	mov	r8,r10
80009b32:	16 99       	mov	r9,r11
80009b34:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
80009b38:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b3c:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b40:	12 98       	mov	r8,r9
80009b42:	a3 78       	lsl	r8,0x3
80009b44:	12 08       	add	r8,r9
80009b46:	a3 78       	lsl	r8,0x3
80009b48:	10 0a       	add	r10,r8
80009b4a:	ee e8 ff b8 	ld.d	r8,r7[-72]
80009b4e:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
80009b52:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b56:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b5a:	12 98       	mov	r8,r9
80009b5c:	a3 78       	lsl	r8,0x3
80009b5e:	12 08       	add	r8,r9
80009b60:	f0 cb ff ff 	sub	r11,r8,-1
80009b64:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009b68:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][0][2] = P13;
80009b6c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b70:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b74:	12 98       	mov	r8,r9
80009b76:	a3 78       	lsl	r8,0x3
80009b78:	12 08       	add	r8,r9
80009b7a:	a3 78       	lsl	r8,0x3
80009b7c:	f4 08 00 08 	add	r8,r10,r8
80009b80:	f0 ca ff f0 	sub	r10,r8,-16
80009b84:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009b88:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][0] = P21;
80009b8c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009b90:	ec fa 00 1c 	ld.w	r10,r6[28]
80009b94:	12 98       	mov	r8,r9
80009b96:	a3 78       	lsl	r8,0x3
80009b98:	12 08       	add	r8,r9
80009b9a:	a3 78       	lsl	r8,0x3
80009b9c:	f4 08 00 08 	add	r8,r10,r8
80009ba0:	f0 ca ff e8 	sub	r10,r8,-24
80009ba4:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009ba8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
80009bac:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009bb0:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bb4:	12 98       	mov	r8,r9
80009bb6:	a3 78       	lsl	r8,0x3
80009bb8:	12 08       	add	r8,r9
80009bba:	a3 78       	lsl	r8,0x3
80009bbc:	f4 08 00 08 	add	r8,r10,r8
80009bc0:	f0 ca ff e0 	sub	r10,r8,-32
80009bc4:	ee e8 ff d8 	ld.d	r8,r7[-40]
80009bc8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][2] = P23;
80009bcc:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009bd0:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bd4:	12 98       	mov	r8,r9
80009bd6:	a3 78       	lsl	r8,0x3
80009bd8:	12 08       	add	r8,r9
80009bda:	a3 78       	lsl	r8,0x3
80009bdc:	f4 08 00 08 	add	r8,r10,r8
80009be0:	f0 ca ff d8 	sub	r10,r8,-40
80009be4:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009be8:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][0] = P31;
80009bec:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009bf0:	ec fa 00 1c 	ld.w	r10,r6[28]
80009bf4:	12 98       	mov	r8,r9
80009bf6:	a3 78       	lsl	r8,0x3
80009bf8:	12 08       	add	r8,r9
80009bfa:	a3 78       	lsl	r8,0x3
80009bfc:	f4 08 00 08 	add	r8,r10,r8
80009c00:	f0 ca ff d0 	sub	r10,r8,-48
80009c04:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009c08:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][1] = P32;
80009c0c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c10:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c14:	12 98       	mov	r8,r9
80009c16:	a3 78       	lsl	r8,0x3
80009c18:	12 08       	add	r8,r9
80009c1a:	a3 78       	lsl	r8,0x3
80009c1c:	f4 08 00 08 	add	r8,r10,r8
80009c20:	f0 ca ff c8 	sub	r10,r8,-56
80009c24:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009c28:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][2][2] = P33;
80009c2c:	ee f9 ff 8c 	ld.w	r9,r7[-116]
80009c30:	ec fa 00 1c 	ld.w	r10,r6[28]
80009c34:	12 98       	mov	r8,r9
80009c36:	a3 78       	lsl	r8,0x3
80009c38:	12 08       	add	r8,r9
80009c3a:	a3 78       	lsl	r8,0x3
80009c3c:	f4 08 00 08 	add	r8,r10,r8
80009c40:	f0 ca ff c0 	sub	r10,r8,-64
80009c44:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009c48:	f4 e9 00 00 	st.d	r10[0],r8
}
80009c4c:	2c ad       	sub	sp,-216
80009c4e:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80009c52:	00 00       	add	r0,r0
80009c54:	80 00       	ld.sh	r0,r0[0x0]
80009c56:	8e c2       	ld.uh	r2,r7[0x8]

80009c58 <e_kalman_update_position_hf>:
  Xp = Xm + K*y;
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_position_hf(int axis, double position_meas)
{
80009c58:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80009c5c:	1a 97       	mov	r7,sp
80009c5e:	21 bd       	sub	sp,108
80009c60:	fe f6 05 80 	ld.w	r6,pc[1408]
80009c64:	1e 26       	rsub	r6,pc
80009c66:	ef 4c ff bc 	st.w	r7[-68],r12
80009c6a:	ee eb ff b4 	st.d	r7[-76],r10
	double posxy,S,K1,K2;
	double P11,P12,P21,P22;
	
	posxy = position_meas - centralData->estimation.state[axis][POSITION];
80009c6e:	ec f8 00 00 	ld.w	r8,r6[0]
80009c72:	70 0a       	ld.w	r10,r8[0x0]
80009c74:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009c78:	12 98       	mov	r8,r9
80009c7a:	a1 78       	lsl	r8,0x1
80009c7c:	12 08       	add	r8,r9
80009c7e:	a3 78       	lsl	r8,0x3
80009c80:	f4 08 00 08 	add	r8,r10,r8
80009c84:	f0 c8 f8 5c 	sub	r8,r8,-1956
80009c88:	f0 e8 00 00 	ld.d	r8,r8[0]
80009c8c:	ee ea ff b4 	ld.d	r10,r7[-76]
80009c90:	f0 16 00 11 	mcall	r6[68]
80009c94:	14 98       	mov	r8,r10
80009c96:	16 99       	mov	r9,r11
80009c98:	ee e9 ff c0 	st.d	r7[-64],r8
	
	
	S = P[axis][0][0] + R[axis];
80009c9c:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ca0:	ec fa 00 18 	ld.w	r10,r6[24]
80009ca4:	12 98       	mov	r8,r9
80009ca6:	a3 78       	lsl	r8,0x3
80009ca8:	12 08       	add	r8,r9
80009caa:	a3 78       	lsl	r8,0x3
80009cac:	f4 08 00 08 	add	r8,r10,r8
80009cb0:	f0 ea 00 00 	ld.d	r10,r8[0]
80009cb4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cb8:	ec f8 01 74 	ld.w	r8,r6[372]
80009cbc:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009cc0:	f0 16 00 05 	mcall	r6[20]
80009cc4:	14 98       	mov	r8,r10
80009cc6:	16 99       	mov	r9,r11
80009cc8:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P[axis][0][0] * 1/S;
80009ccc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cd0:	ec fa 00 18 	ld.w	r10,r6[24]
80009cd4:	12 98       	mov	r8,r9
80009cd6:	a3 78       	lsl	r8,0x3
80009cd8:	12 08       	add	r8,r9
80009cda:	a3 78       	lsl	r8,0x3
80009cdc:	f4 08 00 08 	add	r8,r10,r8
80009ce0:	f0 ea 00 00 	ld.d	r10,r8[0]
80009ce4:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009ce8:	f0 16 00 0c 	mcall	r6[48]
80009cec:	14 98       	mov	r8,r10
80009cee:	16 99       	mov	r9,r11
80009cf0:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P[axis][1][0] * 1/S;
80009cf4:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009cf8:	ec fa 00 18 	ld.w	r10,r6[24]
80009cfc:	12 98       	mov	r8,r9
80009cfe:	a3 78       	lsl	r8,0x3
80009d00:	12 08       	add	r8,r9
80009d02:	a3 78       	lsl	r8,0x3
80009d04:	f4 08 00 08 	add	r8,r10,r8
80009d08:	2e 88       	sub	r8,-24
80009d0a:	f0 ea 00 00 	ld.d	r10,r8[0]
80009d0e:	ee e8 ff c8 	ld.d	r8,r7[-56]
80009d12:	f0 16 00 0c 	mcall	r6[48]
80009d16:	14 98       	mov	r8,r10
80009d18:	16 99       	mov	r9,r11
80009d1a:	ee e9 ff d8 	st.d	r7[-40],r8
	
	centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * posxy;
80009d1e:	ec f8 00 00 	ld.w	r8,r6[0]
80009d22:	70 08       	ld.w	r8,r8[0x0]
80009d24:	ef 48 ff 94 	st.w	r7[-108],r8
80009d28:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009d2c:	ec f8 00 00 	ld.w	r8,r6[0]
80009d30:	70 0a       	ld.w	r10,r8[0x0]
80009d32:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d36:	12 98       	mov	r8,r9
80009d38:	a1 78       	lsl	r8,0x1
80009d3a:	12 08       	add	r8,r9
80009d3c:	a3 78       	lsl	r8,0x3
80009d3e:	f4 08 00 08 	add	r8,r10,r8
80009d42:	f0 c8 f8 5c 	sub	r8,r8,-1956
80009d46:	f0 e2 00 00 	ld.d	r2,r8[0]
80009d4a:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009d4e:	ee ea ff d0 	ld.d	r10,r7[-48]
80009d52:	f0 16 00 03 	mcall	r6[12]
80009d56:	14 98       	mov	r8,r10
80009d58:	16 99       	mov	r9,r11
80009d5a:	04 9a       	mov	r10,r2
80009d5c:	06 9b       	mov	r11,r3
80009d5e:	f0 16 00 05 	mcall	r6[20]
80009d62:	14 98       	mov	r8,r10
80009d64:	16 99       	mov	r9,r11
80009d66:	10 9a       	mov	r10,r8
80009d68:	12 9b       	mov	r11,r9
80009d6a:	0a 98       	mov	r8,r5
80009d6c:	a1 78       	lsl	r8,0x1
80009d6e:	0a 08       	add	r8,r5
80009d70:	a3 78       	lsl	r8,0x3
80009d72:	ee f9 ff 94 	ld.w	r9,r7[-108]
80009d76:	f2 08 00 08 	add	r8,r9,r8
80009d7a:	f0 c8 f8 5c 	sub	r8,r8,-1956
80009d7e:	f0 eb 00 00 	st.d	r8[0],r10
	centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * posxy;
80009d82:	ec f8 00 00 	ld.w	r8,r6[0]
80009d86:	70 08       	ld.w	r8,r8[0x0]
80009d88:	ef 48 ff 98 	st.w	r7[-104],r8
80009d8c:	ee f5 ff bc 	ld.w	r5,r7[-68]
80009d90:	ec f8 00 00 	ld.w	r8,r6[0]
80009d94:	70 0a       	ld.w	r10,r8[0x0]
80009d96:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009d9a:	12 98       	mov	r8,r9
80009d9c:	a1 78       	lsl	r8,0x1
80009d9e:	12 08       	add	r8,r9
80009da0:	2f f8       	sub	r8,-1
80009da2:	a3 78       	lsl	r8,0x3
80009da4:	f4 08 00 08 	add	r8,r10,r8
80009da8:	f0 e2 07 a4 	ld.d	r2,r8[1956]
80009dac:	ee e8 ff c0 	ld.d	r8,r7[-64]
80009db0:	ee ea ff d8 	ld.d	r10,r7[-40]
80009db4:	f0 16 00 03 	mcall	r6[12]
80009db8:	14 98       	mov	r8,r10
80009dba:	16 99       	mov	r9,r11
80009dbc:	04 9a       	mov	r10,r2
80009dbe:	06 9b       	mov	r11,r3
80009dc0:	f0 16 00 05 	mcall	r6[20]
80009dc4:	14 98       	mov	r8,r10
80009dc6:	16 99       	mov	r9,r11
80009dc8:	10 9a       	mov	r10,r8
80009dca:	12 9b       	mov	r11,r9
80009dcc:	0a 98       	mov	r8,r5
80009dce:	a1 78       	lsl	r8,0x1
80009dd0:	0a 08       	add	r8,r5
80009dd2:	2f f8       	sub	r8,-1
80009dd4:	a3 78       	lsl	r8,0x3
80009dd6:	ee f9 ff 98 	ld.w	r9,r7[-104]
80009dda:	f2 08 00 08 	add	r8,r9,r8
80009dde:	f0 eb 07 a4 	st.d	r8[1956],r10
	
	P11 = (1. - K1) * P[axis][0][0];
80009de2:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009de6:	30 0a       	mov	r10,0
80009de8:	fc 1b 3f f0 	movh	r11,0x3ff0
80009dec:	f0 16 00 11 	mcall	r6[68]
80009df0:	14 98       	mov	r8,r10
80009df2:	16 99       	mov	r9,r11
80009df4:	10 9a       	mov	r10,r8
80009df6:	12 9b       	mov	r11,r9
80009df8:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009dfc:	ec fc 00 18 	ld.w	r12,r6[24]
80009e00:	12 98       	mov	r8,r9
80009e02:	a3 78       	lsl	r8,0x3
80009e04:	12 08       	add	r8,r9
80009e06:	a3 78       	lsl	r8,0x3
80009e08:	f8 08 00 08 	add	r8,r12,r8
80009e0c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009e10:	f0 16 00 03 	mcall	r6[12]
80009e14:	14 98       	mov	r8,r10
80009e16:	16 99       	mov	r9,r11
80009e18:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P[axis][0][1];
80009e1c:	ee e8 ff d0 	ld.d	r8,r7[-48]
80009e20:	30 0a       	mov	r10,0
80009e22:	fc 1b 3f f0 	movh	r11,0x3ff0
80009e26:	f0 16 00 11 	mcall	r6[68]
80009e2a:	14 98       	mov	r8,r10
80009e2c:	16 99       	mov	r9,r11
80009e2e:	10 9a       	mov	r10,r8
80009e30:	12 9b       	mov	r11,r9
80009e32:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e36:	ec fc 00 18 	ld.w	r12,r6[24]
80009e3a:	12 98       	mov	r8,r9
80009e3c:	a3 78       	lsl	r8,0x3
80009e3e:	12 08       	add	r8,r9
80009e40:	2f f8       	sub	r8,-1
80009e42:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
80009e46:	f0 16 00 03 	mcall	r6[12]
80009e4a:	14 98       	mov	r8,r10
80009e4c:	16 99       	mov	r9,r11
80009e4e:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P[axis][0][0] + P[axis][1][0];
80009e52:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009e56:	10 99       	mov	r9,r8
80009e58:	ee 19 80 00 	eorh	r9,0x8000
80009e5c:	ef 49 ff 9c 	st.w	r7[-100],r9
80009e60:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009e64:	ef 48 ff a0 	st.w	r7[-96],r8
80009e68:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e6c:	ec fa 00 18 	ld.w	r10,r6[24]
80009e70:	12 98       	mov	r8,r9
80009e72:	a3 78       	lsl	r8,0x3
80009e74:	12 08       	add	r8,r9
80009e76:	a3 78       	lsl	r8,0x3
80009e78:	f4 08 00 08 	add	r8,r10,r8
80009e7c:	f0 e8 00 00 	ld.d	r8,r8[0]
80009e80:	ee ea ff 9c 	ld.d	r10,r7[-100]
80009e84:	f0 16 00 03 	mcall	r6[12]
80009e88:	14 98       	mov	r8,r10
80009e8a:	16 99       	mov	r9,r11
80009e8c:	10 9a       	mov	r10,r8
80009e8e:	12 9b       	mov	r11,r9
80009e90:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009e94:	ec fc 00 18 	ld.w	r12,r6[24]
80009e98:	12 98       	mov	r8,r9
80009e9a:	a3 78       	lsl	r8,0x3
80009e9c:	12 08       	add	r8,r9
80009e9e:	a3 78       	lsl	r8,0x3
80009ea0:	f8 08 00 08 	add	r8,r12,r8
80009ea4:	2e 88       	sub	r8,-24
80009ea6:	f0 e8 00 00 	ld.d	r8,r8[0]
80009eaa:	f0 16 00 05 	mcall	r6[20]
80009eae:	14 98       	mov	r8,r10
80009eb0:	16 99       	mov	r9,r11
80009eb2:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P[axis][0][1] + P[axis][1][1];
80009eb6:	ee f8 ff d8 	ld.w	r8,r7[-40]
80009eba:	10 99       	mov	r9,r8
80009ebc:	ee 19 80 00 	eorh	r9,0x8000
80009ec0:	ef 49 ff a4 	st.w	r7[-92],r9
80009ec4:	ee f8 ff dc 	ld.w	r8,r7[-36]
80009ec8:	ef 48 ff a8 	st.w	r7[-88],r8
80009ecc:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ed0:	ec fa 00 18 	ld.w	r10,r6[24]
80009ed4:	12 98       	mov	r8,r9
80009ed6:	a3 78       	lsl	r8,0x3
80009ed8:	12 08       	add	r8,r9
80009eda:	2f f8       	sub	r8,-1
80009edc:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
80009ee0:	ee ea ff a4 	ld.d	r10,r7[-92]
80009ee4:	f0 16 00 03 	mcall	r6[12]
80009ee8:	14 98       	mov	r8,r10
80009eea:	16 99       	mov	r9,r11
80009eec:	10 9a       	mov	r10,r8
80009eee:	12 9b       	mov	r11,r9
80009ef0:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009ef4:	ec fc 00 18 	ld.w	r12,r6[24]
80009ef8:	12 98       	mov	r8,r9
80009efa:	a3 78       	lsl	r8,0x3
80009efc:	12 08       	add	r8,r9
80009efe:	a3 78       	lsl	r8,0x3
80009f00:	f8 08 00 08 	add	r8,r12,r8
80009f04:	2e 08       	sub	r8,-32
80009f06:	f0 e8 00 00 	ld.d	r8,r8[0]
80009f0a:	f0 16 00 05 	mcall	r6[20]
80009f0e:	14 98       	mov	r8,r10
80009f10:	16 99       	mov	r9,r11
80009f12:	ee e9 ff f8 	st.d	r7[-8],r8

	P[axis][0][0] = P11;
80009f16:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f1a:	ec fa 00 18 	ld.w	r10,r6[24]
80009f1e:	12 98       	mov	r8,r9
80009f20:	a3 78       	lsl	r8,0x3
80009f22:	12 08       	add	r8,r9
80009f24:	a3 78       	lsl	r8,0x3
80009f26:	10 0a       	add	r10,r8
80009f28:	ee e8 ff e0 	ld.d	r8,r7[-32]
80009f2c:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][0][1] = P12;
80009f30:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f34:	ec fa 00 18 	ld.w	r10,r6[24]
80009f38:	12 98       	mov	r8,r9
80009f3a:	a3 78       	lsl	r8,0x3
80009f3c:	12 08       	add	r8,r9
80009f3e:	f0 cb ff ff 	sub	r11,r8,-1
80009f42:	ee e8 ff e8 	ld.d	r8,r7[-24]
80009f46:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P[axis][1][0] = P21;
80009f4a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f4e:	ec fa 00 18 	ld.w	r10,r6[24]
80009f52:	12 98       	mov	r8,r9
80009f54:	a3 78       	lsl	r8,0x3
80009f56:	12 08       	add	r8,r9
80009f58:	a3 78       	lsl	r8,0x3
80009f5a:	f4 08 00 08 	add	r8,r10,r8
80009f5e:	f0 ca ff e8 	sub	r10,r8,-24
80009f62:	ee e8 ff f0 	ld.d	r8,r7[-16]
80009f66:	f4 e9 00 00 	st.d	r10[0],r8
	P[axis][1][1] = P22;
80009f6a:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f6e:	ec fa 00 18 	ld.w	r10,r6[24]
80009f72:	12 98       	mov	r8,r9
80009f74:	a3 78       	lsl	r8,0x3
80009f76:	12 08       	add	r8,r9
80009f78:	a3 78       	lsl	r8,0x3
80009f7a:	f4 08 00 08 	add	r8,r10,r8
80009f7e:	f0 ca ff e0 	sub	r10,r8,-32
80009f82:	ee e8 ff f8 	ld.d	r8,r7[-8]
80009f86:	f4 e9 00 00 	st.d	r10[0],r8
	
	/*************************************************************************************/
	posxy = position_meas - centralData->position_estimator.localPosition.pos[axis];
80009f8a:	ec f8 00 00 	ld.w	r8,r6[0]
80009f8e:	70 08       	ld.w	r8,r8[0x0]
80009f90:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009f94:	f2 c9 fd 87 	sub	r9,r9,-633
80009f98:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80009f9c:	10 9c       	mov	r12,r8
80009f9e:	f0 16 00 02 	mcall	r6[8]
80009fa2:	14 98       	mov	r8,r10
80009fa4:	16 99       	mov	r9,r11
80009fa6:	ee ea ff b4 	ld.d	r10,r7[-76]
80009faa:	f0 16 00 11 	mcall	r6[68]
80009fae:	14 98       	mov	r8,r10
80009fb0:	16 99       	mov	r9,r11
80009fb2:	ee e9 ff c0 	st.d	r7[-64],r8
	
	S = P2[axis][0][0] + R2[axis];
80009fb6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fba:	ec fa 00 1c 	ld.w	r10,r6[28]
80009fbe:	12 98       	mov	r8,r9
80009fc0:	a3 78       	lsl	r8,0x3
80009fc2:	12 08       	add	r8,r9
80009fc4:	a3 78       	lsl	r8,0x3
80009fc6:	f4 08 00 08 	add	r8,r10,r8
80009fca:	f0 ea 00 00 	ld.d	r10,r8[0]
80009fce:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fd2:	ec f8 01 70 	ld.w	r8,r6[368]
80009fd6:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
80009fda:	f0 16 00 05 	mcall	r6[20]
80009fde:	14 98       	mov	r8,r10
80009fe0:	16 99       	mov	r9,r11
80009fe2:	ee e9 ff c8 	st.d	r7[-56],r8
	K1 = P2[axis][0][0] * 1/S;
80009fe6:	ee f9 ff bc 	ld.w	r9,r7[-68]
80009fea:	ec fa 00 1c 	ld.w	r10,r6[28]
80009fee:	12 98       	mov	r8,r9
80009ff0:	a3 78       	lsl	r8,0x3
80009ff2:	12 08       	add	r8,r9
80009ff4:	a3 78       	lsl	r8,0x3
80009ff6:	f4 08 00 08 	add	r8,r10,r8
80009ffa:	f0 ea 00 00 	ld.d	r10,r8[0]
80009ffe:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a002:	f0 16 00 0c 	mcall	r6[48]
8000a006:	14 98       	mov	r8,r10
8000a008:	16 99       	mov	r9,r11
8000a00a:	ee e9 ff d0 	st.d	r7[-48],r8
	K2 = P2[axis][1][0] * 1/S;
8000a00e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a012:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a016:	12 98       	mov	r8,r9
8000a018:	a3 78       	lsl	r8,0x3
8000a01a:	12 08       	add	r8,r9
8000a01c:	a3 78       	lsl	r8,0x3
8000a01e:	f4 08 00 08 	add	r8,r10,r8
8000a022:	2e 88       	sub	r8,-24
8000a024:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a028:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a02c:	f0 16 00 0c 	mcall	r6[48]
8000a030:	14 98       	mov	r8,r10
8000a032:	16 99       	mov	r9,r11
8000a034:	ee e9 ff d8 	st.d	r7[-40],r8
	
	//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * posxy;
	//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * posxy;
	
	P11 = (1. - K1) * P2[axis][0][0];
8000a038:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a03c:	30 0a       	mov	r10,0
8000a03e:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a042:	f0 16 00 11 	mcall	r6[68]
8000a046:	14 98       	mov	r8,r10
8000a048:	16 99       	mov	r9,r11
8000a04a:	10 9a       	mov	r10,r8
8000a04c:	12 9b       	mov	r11,r9
8000a04e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a052:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a056:	12 98       	mov	r8,r9
8000a058:	a3 78       	lsl	r8,0x3
8000a05a:	12 08       	add	r8,r9
8000a05c:	a3 78       	lsl	r8,0x3
8000a05e:	f8 08 00 08 	add	r8,r12,r8
8000a062:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a066:	f0 16 00 03 	mcall	r6[12]
8000a06a:	14 98       	mov	r8,r10
8000a06c:	16 99       	mov	r9,r11
8000a06e:	ee e9 ff e0 	st.d	r7[-32],r8
	P12 = (1. - K1) * P2[axis][0][1];
8000a072:	ee e8 ff d0 	ld.d	r8,r7[-48]
8000a076:	30 0a       	mov	r10,0
8000a078:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a07c:	f0 16 00 11 	mcall	r6[68]
8000a080:	14 98       	mov	r8,r10
8000a082:	16 99       	mov	r9,r11
8000a084:	10 9a       	mov	r10,r8
8000a086:	12 9b       	mov	r11,r9
8000a088:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a08c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a090:	12 98       	mov	r8,r9
8000a092:	a3 78       	lsl	r8,0x3
8000a094:	12 08       	add	r8,r9
8000a096:	2f f8       	sub	r8,-1
8000a098:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a09c:	f0 16 00 03 	mcall	r6[12]
8000a0a0:	14 98       	mov	r8,r10
8000a0a2:	16 99       	mov	r9,r11
8000a0a4:	ee e9 ff e8 	st.d	r7[-24],r8
	P21 = -K2 * P2[axis][0][0] + P2[axis][1][0];
8000a0a8:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a0ac:	10 99       	mov	r9,r8
8000a0ae:	ee 19 80 00 	eorh	r9,0x8000
8000a0b2:	ef 49 ff ac 	st.w	r7[-84],r9
8000a0b6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000a0ba:	ef 48 ff b0 	st.w	r7[-80],r8
8000a0be:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0c2:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a0c6:	12 98       	mov	r8,r9
8000a0c8:	a3 78       	lsl	r8,0x3
8000a0ca:	12 08       	add	r8,r9
8000a0cc:	a3 78       	lsl	r8,0x3
8000a0ce:	f4 08 00 08 	add	r8,r10,r8
8000a0d2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a0d6:	ee ea ff ac 	ld.d	r10,r7[-84]
8000a0da:	f0 16 00 03 	mcall	r6[12]
8000a0de:	14 98       	mov	r8,r10
8000a0e0:	16 99       	mov	r9,r11
8000a0e2:	10 9a       	mov	r10,r8
8000a0e4:	12 9b       	mov	r11,r9
8000a0e6:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a0ea:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a0ee:	12 98       	mov	r8,r9
8000a0f0:	a3 78       	lsl	r8,0x3
8000a0f2:	12 08       	add	r8,r9
8000a0f4:	a3 78       	lsl	r8,0x3
8000a0f6:	f8 08 00 08 	add	r8,r12,r8
8000a0fa:	2e 88       	sub	r8,-24
8000a0fc:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a100:	f0 16 00 05 	mcall	r6[20]
8000a104:	14 98       	mov	r8,r10
8000a106:	16 99       	mov	r9,r11
8000a108:	ee e9 ff f0 	st.d	r7[-16],r8
	P22 = -K2 * P2[axis][0][1] + P2[axis][1][1];
8000a10c:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000a110:	10 91       	mov	r1,r8
8000a112:	ee 11 80 00 	eorh	r1,0x8000
8000a116:	ee f0 ff dc 	ld.w	r0,r7[-36]
8000a11a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a11e:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a122:	12 98       	mov	r8,r9
8000a124:	a3 78       	lsl	r8,0x3
8000a126:	12 08       	add	r8,r9
8000a128:	2f f8       	sub	r8,-1
8000a12a:	f4 08 02 38 	ld.d	r8,r10[r8<<0x3]
8000a12e:	00 9a       	mov	r10,r0
8000a130:	02 9b       	mov	r11,r1
8000a132:	f0 16 00 03 	mcall	r6[12]
8000a136:	14 98       	mov	r8,r10
8000a138:	16 99       	mov	r9,r11
8000a13a:	10 9a       	mov	r10,r8
8000a13c:	12 9b       	mov	r11,r9
8000a13e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a142:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a146:	12 98       	mov	r8,r9
8000a148:	a3 78       	lsl	r8,0x3
8000a14a:	12 08       	add	r8,r9
8000a14c:	a3 78       	lsl	r8,0x3
8000a14e:	f8 08 00 08 	add	r8,r12,r8
8000a152:	2e 08       	sub	r8,-32
8000a154:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a158:	f0 16 00 05 	mcall	r6[20]
8000a15c:	14 98       	mov	r8,r10
8000a15e:	16 99       	mov	r9,r11
8000a160:	ee e9 ff f8 	st.d	r7[-8],r8

	P2[axis][0][0] = P11;
8000a164:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a168:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a16c:	12 98       	mov	r8,r9
8000a16e:	a3 78       	lsl	r8,0x3
8000a170:	12 08       	add	r8,r9
8000a172:	a3 78       	lsl	r8,0x3
8000a174:	10 0a       	add	r10,r8
8000a176:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a17a:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][0][1] = P12;
8000a17e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a182:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a186:	12 98       	mov	r8,r9
8000a188:	a3 78       	lsl	r8,0x3
8000a18a:	12 08       	add	r8,r9
8000a18c:	f0 cb ff ff 	sub	r11,r8,-1
8000a190:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a194:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
	P2[axis][1][0] = P21;
8000a198:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a19c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a1a0:	12 98       	mov	r8,r9
8000a1a2:	a3 78       	lsl	r8,0x3
8000a1a4:	12 08       	add	r8,r9
8000a1a6:	a3 78       	lsl	r8,0x3
8000a1a8:	f4 08 00 08 	add	r8,r10,r8
8000a1ac:	f0 ca ff e8 	sub	r10,r8,-24
8000a1b0:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a1b4:	f4 e9 00 00 	st.d	r10[0],r8
	P2[axis][1][1] = P22;
8000a1b8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a1bc:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a1c0:	12 98       	mov	r8,r9
8000a1c2:	a3 78       	lsl	r8,0x3
8000a1c4:	12 08       	add	r8,r9
8000a1c6:	a3 78       	lsl	r8,0x3
8000a1c8:	f4 08 00 08 	add	r8,r10,r8
8000a1cc:	f0 ca ff e0 	sub	r10,r8,-32
8000a1d0:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a1d4:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a1d8:	2e 5d       	sub	sp,-108
8000a1da:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a1de:	00 00       	add	r0,r0
8000a1e0:	80 00       	ld.sh	r0,r0[0x0]
8000a1e2:	9a e8       	ld.uh	r8,sp[0xc]

8000a1e4 <e_kalman_update_speed_hf>:
  
  // update covariance
  Pp = Pm - K*H*Pm;
*/
void e_kalman_update_speed_hf(int axis, float speed_meas)
{
8000a1e4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000a1e8:	1a 97       	mov	r7,sp
8000a1ea:	21 ad       	sub	sp,104
8000a1ec:	fe f6 05 88 	ld.w	r6,pc[1416]
8000a1f0:	1e 26       	rsub	r6,pc
8000a1f2:	ef 4c ff bc 	st.w	r7[-68],r12
8000a1f6:	ef 4b ff b8 	st.w	r7[-72],r11
		double velxy,S,K1,K2;
		double P11,P12,P21,P22;
		
		velxy = speed_meas - centralData->estimation.state[axis][SPEED];
8000a1fa:	ee fc ff b8 	ld.w	r12,r7[-72]
8000a1fe:	f0 16 00 02 	mcall	r6[8]
8000a202:	ec f8 00 00 	ld.w	r8,r6[0]
8000a206:	70 0c       	ld.w	r12,r8[0x0]
8000a208:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a20c:	12 98       	mov	r8,r9
8000a20e:	a1 78       	lsl	r8,0x1
8000a210:	12 08       	add	r8,r9
8000a212:	2f f8       	sub	r8,-1
8000a214:	a3 78       	lsl	r8,0x3
8000a216:	f8 08 00 08 	add	r8,r12,r8
8000a21a:	f0 e8 07 a4 	ld.d	r8,r8[1956]
8000a21e:	f0 16 00 11 	mcall	r6[68]
8000a222:	14 98       	mov	r8,r10
8000a224:	16 99       	mov	r9,r11
8000a226:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P[axis][1][1] + R[axis];
8000a22a:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a22e:	ec fa 00 18 	ld.w	r10,r6[24]
8000a232:	12 98       	mov	r8,r9
8000a234:	a3 78       	lsl	r8,0x3
8000a236:	12 08       	add	r8,r9
8000a238:	a3 78       	lsl	r8,0x3
8000a23a:	f4 08 00 08 	add	r8,r10,r8
8000a23e:	2e 08       	sub	r8,-32
8000a240:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a244:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a248:	ec f8 01 74 	ld.w	r8,r6[372]
8000a24c:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a250:	f0 16 00 05 	mcall	r6[20]
8000a254:	14 98       	mov	r8,r10
8000a256:	16 99       	mov	r9,r11
8000a258:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P[axis][0][1] * 1/S;
8000a25c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a260:	ec fa 00 18 	ld.w	r10,r6[24]
8000a264:	12 98       	mov	r8,r9
8000a266:	a3 78       	lsl	r8,0x3
8000a268:	12 08       	add	r8,r9
8000a26a:	2f f8       	sub	r8,-1
8000a26c:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a270:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a274:	f0 16 00 0c 	mcall	r6[48]
8000a278:	14 98       	mov	r8,r10
8000a27a:	16 99       	mov	r9,r11
8000a27c:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P[axis][1][1] * 1/S;
8000a280:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a284:	ec fa 00 18 	ld.w	r10,r6[24]
8000a288:	12 98       	mov	r8,r9
8000a28a:	a3 78       	lsl	r8,0x3
8000a28c:	12 08       	add	r8,r9
8000a28e:	a3 78       	lsl	r8,0x3
8000a290:	f4 08 00 08 	add	r8,r10,r8
8000a294:	2e 08       	sub	r8,-32
8000a296:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a29a:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a29e:	f0 16 00 0c 	mcall	r6[48]
8000a2a2:	14 98       	mov	r8,r10
8000a2a4:	16 99       	mov	r9,r11
8000a2a6:	ee e9 ff d8 	st.d	r7[-40],r8

		centralData->estimation.state[axis][POSITION] = centralData->estimation.state[axis][POSITION] + K1 * velxy;
8000a2aa:	ec f8 00 00 	ld.w	r8,r6[0]
8000a2ae:	70 08       	ld.w	r8,r8[0x0]
8000a2b0:	ef 48 ff 98 	st.w	r7[-104],r8
8000a2b4:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a2b8:	ec f8 00 00 	ld.w	r8,r6[0]
8000a2bc:	70 0a       	ld.w	r10,r8[0x0]
8000a2be:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a2c2:	12 98       	mov	r8,r9
8000a2c4:	a1 78       	lsl	r8,0x1
8000a2c6:	12 08       	add	r8,r9
8000a2c8:	a3 78       	lsl	r8,0x3
8000a2ca:	f4 08 00 08 	add	r8,r10,r8
8000a2ce:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000a2d2:	f0 e2 00 00 	ld.d	r2,r8[0]
8000a2d6:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a2da:	ee ea ff d0 	ld.d	r10,r7[-48]
8000a2de:	f0 16 00 03 	mcall	r6[12]
8000a2e2:	14 98       	mov	r8,r10
8000a2e4:	16 99       	mov	r9,r11
8000a2e6:	04 9a       	mov	r10,r2
8000a2e8:	06 9b       	mov	r11,r3
8000a2ea:	f0 16 00 05 	mcall	r6[20]
8000a2ee:	14 98       	mov	r8,r10
8000a2f0:	16 99       	mov	r9,r11
8000a2f2:	10 9a       	mov	r10,r8
8000a2f4:	12 9b       	mov	r11,r9
8000a2f6:	0a 98       	mov	r8,r5
8000a2f8:	a1 78       	lsl	r8,0x1
8000a2fa:	0a 08       	add	r8,r5
8000a2fc:	a3 78       	lsl	r8,0x3
8000a2fe:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000a302:	f2 08 00 08 	add	r8,r9,r8
8000a306:	f0 c8 f8 5c 	sub	r8,r8,-1956
8000a30a:	f0 eb 00 00 	st.d	r8[0],r10
		centralData->estimation.state[axis][SPEED] = centralData->estimation.state[axis][SPEED] + K2 * velxy;
8000a30e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a312:	70 08       	ld.w	r8,r8[0x0]
8000a314:	ef 48 ff 9c 	st.w	r7[-100],r8
8000a318:	ee f5 ff bc 	ld.w	r5,r7[-68]
8000a31c:	ec f8 00 00 	ld.w	r8,r6[0]
8000a320:	70 0a       	ld.w	r10,r8[0x0]
8000a322:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a326:	12 98       	mov	r8,r9
8000a328:	a1 78       	lsl	r8,0x1
8000a32a:	12 08       	add	r8,r9
8000a32c:	2f f8       	sub	r8,-1
8000a32e:	a3 78       	lsl	r8,0x3
8000a330:	f4 08 00 08 	add	r8,r10,r8
8000a334:	f0 e2 07 a4 	ld.d	r2,r8[1956]
8000a338:	ee e8 ff c0 	ld.d	r8,r7[-64]
8000a33c:	ee ea ff d8 	ld.d	r10,r7[-40]
8000a340:	f0 16 00 03 	mcall	r6[12]
8000a344:	14 98       	mov	r8,r10
8000a346:	16 99       	mov	r9,r11
8000a348:	04 9a       	mov	r10,r2
8000a34a:	06 9b       	mov	r11,r3
8000a34c:	f0 16 00 05 	mcall	r6[20]
8000a350:	14 98       	mov	r8,r10
8000a352:	16 99       	mov	r9,r11
8000a354:	10 9a       	mov	r10,r8
8000a356:	12 9b       	mov	r11,r9
8000a358:	0a 98       	mov	r8,r5
8000a35a:	a1 78       	lsl	r8,0x1
8000a35c:	0a 08       	add	r8,r5
8000a35e:	2f f8       	sub	r8,-1
8000a360:	a3 78       	lsl	r8,0x3
8000a362:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000a366:	f2 08 00 08 	add	r8,r9,r8
8000a36a:	f0 eb 07 a4 	st.d	r8[1956],r10

		P11 = -K1 * P[axis][1][0] + P[axis][0][0];
8000a36e:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a372:	10 99       	mov	r9,r8
8000a374:	ee 19 80 00 	eorh	r9,0x8000
8000a378:	ef 49 ff a0 	st.w	r7[-96],r9
8000a37c:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a380:	ef 48 ff a4 	st.w	r7[-92],r8
8000a384:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a388:	ec fa 00 18 	ld.w	r10,r6[24]
8000a38c:	12 98       	mov	r8,r9
8000a38e:	a3 78       	lsl	r8,0x3
8000a390:	12 08       	add	r8,r9
8000a392:	a3 78       	lsl	r8,0x3
8000a394:	f4 08 00 08 	add	r8,r10,r8
8000a398:	2e 88       	sub	r8,-24
8000a39a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a39e:	ee ea ff a0 	ld.d	r10,r7[-96]
8000a3a2:	f0 16 00 03 	mcall	r6[12]
8000a3a6:	14 98       	mov	r8,r10
8000a3a8:	16 99       	mov	r9,r11
8000a3aa:	10 9a       	mov	r10,r8
8000a3ac:	12 9b       	mov	r11,r9
8000a3ae:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3b2:	ec fc 00 18 	ld.w	r12,r6[24]
8000a3b6:	12 98       	mov	r8,r9
8000a3b8:	a3 78       	lsl	r8,0x3
8000a3ba:	12 08       	add	r8,r9
8000a3bc:	a3 78       	lsl	r8,0x3
8000a3be:	f8 08 00 08 	add	r8,r12,r8
8000a3c2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a3c6:	f0 16 00 05 	mcall	r6[20]
8000a3ca:	14 98       	mov	r8,r10
8000a3cc:	16 99       	mov	r9,r11
8000a3ce:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P[axis][1][1] + P[axis][0][1];
8000a3d2:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a3d6:	10 99       	mov	r9,r8
8000a3d8:	ee 19 80 00 	eorh	r9,0x8000
8000a3dc:	ef 49 ff a8 	st.w	r7[-88],r9
8000a3e0:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a3e4:	ef 48 ff ac 	st.w	r7[-84],r8
8000a3e8:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a3ec:	ec fa 00 18 	ld.w	r10,r6[24]
8000a3f0:	12 98       	mov	r8,r9
8000a3f2:	a3 78       	lsl	r8,0x3
8000a3f4:	12 08       	add	r8,r9
8000a3f6:	a3 78       	lsl	r8,0x3
8000a3f8:	f4 08 00 08 	add	r8,r10,r8
8000a3fc:	2e 08       	sub	r8,-32
8000a3fe:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a402:	ee ea ff a8 	ld.d	r10,r7[-88]
8000a406:	f0 16 00 03 	mcall	r6[12]
8000a40a:	14 98       	mov	r8,r10
8000a40c:	16 99       	mov	r9,r11
8000a40e:	10 9a       	mov	r10,r8
8000a410:	12 9b       	mov	r11,r9
8000a412:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a416:	ec fc 00 18 	ld.w	r12,r6[24]
8000a41a:	12 98       	mov	r8,r9
8000a41c:	a3 78       	lsl	r8,0x3
8000a41e:	12 08       	add	r8,r9
8000a420:	2f f8       	sub	r8,-1
8000a422:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a426:	f0 16 00 05 	mcall	r6[20]
8000a42a:	14 98       	mov	r8,r10
8000a42c:	16 99       	mov	r9,r11
8000a42e:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P[axis][1][0];
8000a432:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a436:	30 0a       	mov	r10,0
8000a438:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a43c:	f0 16 00 11 	mcall	r6[68]
8000a440:	14 98       	mov	r8,r10
8000a442:	16 99       	mov	r9,r11
8000a444:	10 9a       	mov	r10,r8
8000a446:	12 9b       	mov	r11,r9
8000a448:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a44c:	ec fc 00 18 	ld.w	r12,r6[24]
8000a450:	12 98       	mov	r8,r9
8000a452:	a3 78       	lsl	r8,0x3
8000a454:	12 08       	add	r8,r9
8000a456:	a3 78       	lsl	r8,0x3
8000a458:	f8 08 00 08 	add	r8,r12,r8
8000a45c:	2e 88       	sub	r8,-24
8000a45e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a462:	f0 16 00 03 	mcall	r6[12]
8000a466:	14 98       	mov	r8,r10
8000a468:	16 99       	mov	r9,r11
8000a46a:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P[axis][1][1];
8000a46e:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a472:	30 0a       	mov	r10,0
8000a474:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a478:	f0 16 00 11 	mcall	r6[68]
8000a47c:	14 98       	mov	r8,r10
8000a47e:	16 99       	mov	r9,r11
8000a480:	10 9a       	mov	r10,r8
8000a482:	12 9b       	mov	r11,r9
8000a484:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a488:	ec fc 00 18 	ld.w	r12,r6[24]
8000a48c:	12 98       	mov	r8,r9
8000a48e:	a3 78       	lsl	r8,0x3
8000a490:	12 08       	add	r8,r9
8000a492:	a3 78       	lsl	r8,0x3
8000a494:	f8 08 00 08 	add	r8,r12,r8
8000a498:	2e 08       	sub	r8,-32
8000a49a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a49e:	f0 16 00 03 	mcall	r6[12]
8000a4a2:	14 98       	mov	r8,r10
8000a4a4:	16 99       	mov	r9,r11
8000a4a6:	ee e9 ff f8 	st.d	r7[-8],r8

		P[axis][0][0] = P11;
8000a4aa:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4ae:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4b2:	12 98       	mov	r8,r9
8000a4b4:	a3 78       	lsl	r8,0x3
8000a4b6:	12 08       	add	r8,r9
8000a4b8:	a3 78       	lsl	r8,0x3
8000a4ba:	10 0a       	add	r10,r8
8000a4bc:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a4c0:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][0][1] = P12;
8000a4c4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4c8:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4cc:	12 98       	mov	r8,r9
8000a4ce:	a3 78       	lsl	r8,0x3
8000a4d0:	12 08       	add	r8,r9
8000a4d2:	f0 cb ff ff 	sub	r11,r8,-1
8000a4d6:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a4da:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P[axis][1][0] = P21;
8000a4de:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a4e2:	ec fa 00 18 	ld.w	r10,r6[24]
8000a4e6:	12 98       	mov	r8,r9
8000a4e8:	a3 78       	lsl	r8,0x3
8000a4ea:	12 08       	add	r8,r9
8000a4ec:	a3 78       	lsl	r8,0x3
8000a4ee:	f4 08 00 08 	add	r8,r10,r8
8000a4f2:	f0 ca ff e8 	sub	r10,r8,-24
8000a4f6:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a4fa:	f4 e9 00 00 	st.d	r10[0],r8
		P[axis][1][1] = P22;
8000a4fe:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a502:	ec fa 00 18 	ld.w	r10,r6[24]
8000a506:	12 98       	mov	r8,r9
8000a508:	a3 78       	lsl	r8,0x3
8000a50a:	12 08       	add	r8,r9
8000a50c:	a3 78       	lsl	r8,0x3
8000a50e:	f4 08 00 08 	add	r8,r10,r8
8000a512:	f0 ca ff e0 	sub	r10,r8,-32
8000a516:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a51a:	f4 e9 00 00 	st.d	r10[0],r8
		
		/*************************************************************************************/
		velxy = speed_meas - centralData->position_estimator.vel[axis];
8000a51e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a522:	70 08       	ld.w	r8,r8[0x0]
8000a524:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a528:	f2 c9 fd 91 	sub	r9,r9,-623
8000a52c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000a530:	ee f9 ff b8 	ld.w	r9,r7[-72]
8000a534:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000a538:	10 9c       	mov	r12,r8
8000a53a:	f0 16 00 02 	mcall	r6[8]
8000a53e:	14 98       	mov	r8,r10
8000a540:	16 99       	mov	r9,r11
8000a542:	ee e9 ff c0 	st.d	r7[-64],r8
		
		S = P2[axis][1][1] + R2[axis];
8000a546:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a54a:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a54e:	12 98       	mov	r8,r9
8000a550:	a3 78       	lsl	r8,0x3
8000a552:	12 08       	add	r8,r9
8000a554:	a3 78       	lsl	r8,0x3
8000a556:	f4 08 00 08 	add	r8,r10,r8
8000a55a:	2e 08       	sub	r8,-32
8000a55c:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a560:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a564:	ec f8 01 70 	ld.w	r8,r6[368]
8000a568:	f0 09 02 38 	ld.d	r8,r8[r9<<0x3]
8000a56c:	f0 16 00 05 	mcall	r6[20]
8000a570:	14 98       	mov	r8,r10
8000a572:	16 99       	mov	r9,r11
8000a574:	ee e9 ff c8 	st.d	r7[-56],r8
		K1 = P2[axis][0][1] * 1/S;
8000a578:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a57c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a580:	12 98       	mov	r8,r9
8000a582:	a3 78       	lsl	r8,0x3
8000a584:	12 08       	add	r8,r9
8000a586:	2f f8       	sub	r8,-1
8000a588:	f4 08 02 3a 	ld.d	r10,r10[r8<<0x3]
8000a58c:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a590:	f0 16 00 0c 	mcall	r6[48]
8000a594:	14 98       	mov	r8,r10
8000a596:	16 99       	mov	r9,r11
8000a598:	ee e9 ff d0 	st.d	r7[-48],r8
		K2 = P2[axis][1][1] * 1/S;
8000a59c:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5a0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a5a4:	12 98       	mov	r8,r9
8000a5a6:	a3 78       	lsl	r8,0x3
8000a5a8:	12 08       	add	r8,r9
8000a5aa:	a3 78       	lsl	r8,0x3
8000a5ac:	f4 08 00 08 	add	r8,r10,r8
8000a5b0:	2e 08       	sub	r8,-32
8000a5b2:	f0 ea 00 00 	ld.d	r10,r8[0]
8000a5b6:	ee e8 ff c8 	ld.d	r8,r7[-56]
8000a5ba:	f0 16 00 0c 	mcall	r6[48]
8000a5be:	14 98       	mov	r8,r10
8000a5c0:	16 99       	mov	r9,r11
8000a5c2:	ee e9 ff d8 	st.d	r7[-40],r8
		
		//centralData->position_estimator.localPosition.pos[axis] = centralData->position_estimator.localPosition.pos[axis] + K1 * velxy;
		//centralData->position_estimator.vel[axis] = centralData->position_estimator.vel[axis] + K2 * velxy;
		
		P11 = -K1 * P2[axis][1][0] + P2[axis][0][0];
8000a5c6:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a5ca:	10 99       	mov	r9,r8
8000a5cc:	ee 19 80 00 	eorh	r9,0x8000
8000a5d0:	ef 49 ff b0 	st.w	r7[-80],r9
8000a5d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000a5d8:	ef 48 ff b4 	st.w	r7[-76],r8
8000a5dc:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a5e0:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a5e4:	12 98       	mov	r8,r9
8000a5e6:	a3 78       	lsl	r8,0x3
8000a5e8:	12 08       	add	r8,r9
8000a5ea:	a3 78       	lsl	r8,0x3
8000a5ec:	f4 08 00 08 	add	r8,r10,r8
8000a5f0:	2e 88       	sub	r8,-24
8000a5f2:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a5f6:	ee ea ff b0 	ld.d	r10,r7[-80]
8000a5fa:	f0 16 00 03 	mcall	r6[12]
8000a5fe:	14 98       	mov	r8,r10
8000a600:	16 99       	mov	r9,r11
8000a602:	10 9a       	mov	r10,r8
8000a604:	12 9b       	mov	r11,r9
8000a606:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a60a:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a60e:	12 98       	mov	r8,r9
8000a610:	a3 78       	lsl	r8,0x3
8000a612:	12 08       	add	r8,r9
8000a614:	a3 78       	lsl	r8,0x3
8000a616:	f8 08 00 08 	add	r8,r12,r8
8000a61a:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a61e:	f0 16 00 05 	mcall	r6[20]
8000a622:	14 98       	mov	r8,r10
8000a624:	16 99       	mov	r9,r11
8000a626:	ee e9 ff e0 	st.d	r7[-32],r8
		P12 = -K1 * P2[axis][1][1] + P2[axis][0][1];
8000a62a:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000a62e:	10 91       	mov	r1,r8
8000a630:	ee 11 80 00 	eorh	r1,0x8000
8000a634:	ee f0 ff d4 	ld.w	r0,r7[-44]
8000a638:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a63c:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a640:	12 98       	mov	r8,r9
8000a642:	a3 78       	lsl	r8,0x3
8000a644:	12 08       	add	r8,r9
8000a646:	a3 78       	lsl	r8,0x3
8000a648:	f4 08 00 08 	add	r8,r10,r8
8000a64c:	2e 08       	sub	r8,-32
8000a64e:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a652:	00 9a       	mov	r10,r0
8000a654:	02 9b       	mov	r11,r1
8000a656:	f0 16 00 03 	mcall	r6[12]
8000a65a:	14 98       	mov	r8,r10
8000a65c:	16 99       	mov	r9,r11
8000a65e:	10 9a       	mov	r10,r8
8000a660:	12 9b       	mov	r11,r9
8000a662:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a666:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a66a:	12 98       	mov	r8,r9
8000a66c:	a3 78       	lsl	r8,0x3
8000a66e:	12 08       	add	r8,r9
8000a670:	2f f8       	sub	r8,-1
8000a672:	f8 08 02 38 	ld.d	r8,r12[r8<<0x3]
8000a676:	f0 16 00 05 	mcall	r6[20]
8000a67a:	14 98       	mov	r8,r10
8000a67c:	16 99       	mov	r9,r11
8000a67e:	ee e9 ff e8 	st.d	r7[-24],r8
		P21 = (1.0 - K2) * P2[axis][1][0];
8000a682:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a686:	30 0a       	mov	r10,0
8000a688:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a68c:	f0 16 00 11 	mcall	r6[68]
8000a690:	14 98       	mov	r8,r10
8000a692:	16 99       	mov	r9,r11
8000a694:	10 9a       	mov	r10,r8
8000a696:	12 9b       	mov	r11,r9
8000a698:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a69c:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a6a0:	12 98       	mov	r8,r9
8000a6a2:	a3 78       	lsl	r8,0x3
8000a6a4:	12 08       	add	r8,r9
8000a6a6:	a3 78       	lsl	r8,0x3
8000a6a8:	f8 08 00 08 	add	r8,r12,r8
8000a6ac:	2e 88       	sub	r8,-24
8000a6ae:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6b2:	f0 16 00 03 	mcall	r6[12]
8000a6b6:	14 98       	mov	r8,r10
8000a6b8:	16 99       	mov	r9,r11
8000a6ba:	ee e9 ff f0 	st.d	r7[-16],r8
		P22 = (1.0 - K2) * P2[axis][1][1];
8000a6be:	ee e8 ff d8 	ld.d	r8,r7[-40]
8000a6c2:	30 0a       	mov	r10,0
8000a6c4:	fc 1b 3f f0 	movh	r11,0x3ff0
8000a6c8:	f0 16 00 11 	mcall	r6[68]
8000a6cc:	14 98       	mov	r8,r10
8000a6ce:	16 99       	mov	r9,r11
8000a6d0:	10 9a       	mov	r10,r8
8000a6d2:	12 9b       	mov	r11,r9
8000a6d4:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a6d8:	ec fc 00 1c 	ld.w	r12,r6[28]
8000a6dc:	12 98       	mov	r8,r9
8000a6de:	a3 78       	lsl	r8,0x3
8000a6e0:	12 08       	add	r8,r9
8000a6e2:	a3 78       	lsl	r8,0x3
8000a6e4:	f8 08 00 08 	add	r8,r12,r8
8000a6e8:	2e 08       	sub	r8,-32
8000a6ea:	f0 e8 00 00 	ld.d	r8,r8[0]
8000a6ee:	f0 16 00 03 	mcall	r6[12]
8000a6f2:	14 98       	mov	r8,r10
8000a6f4:	16 99       	mov	r9,r11
8000a6f6:	ee e9 ff f8 	st.d	r7[-8],r8

		P2[axis][0][0] = P11;
8000a6fa:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a6fe:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a702:	12 98       	mov	r8,r9
8000a704:	a3 78       	lsl	r8,0x3
8000a706:	12 08       	add	r8,r9
8000a708:	a3 78       	lsl	r8,0x3
8000a70a:	10 0a       	add	r10,r8
8000a70c:	ee e8 ff e0 	ld.d	r8,r7[-32]
8000a710:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][0][1] = P12;
8000a714:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a718:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a71c:	12 98       	mov	r8,r9
8000a71e:	a3 78       	lsl	r8,0x3
8000a720:	12 08       	add	r8,r9
8000a722:	f0 cb ff ff 	sub	r11,r8,-1
8000a726:	ee e8 ff e8 	ld.d	r8,r7[-24]
8000a72a:	f4 0b 08 38 	st.d	r10[r11<<0x3],r8
		P2[axis][1][0] = P21;
8000a72e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a732:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a736:	12 98       	mov	r8,r9
8000a738:	a3 78       	lsl	r8,0x3
8000a73a:	12 08       	add	r8,r9
8000a73c:	a3 78       	lsl	r8,0x3
8000a73e:	f4 08 00 08 	add	r8,r10,r8
8000a742:	f0 ca ff e8 	sub	r10,r8,-24
8000a746:	ee e8 ff f0 	ld.d	r8,r7[-16]
8000a74a:	f4 e9 00 00 	st.d	r10[0],r8
		P2[axis][1][1] = P22;
8000a74e:	ee f9 ff bc 	ld.w	r9,r7[-68]
8000a752:	ec fa 00 1c 	ld.w	r10,r6[28]
8000a756:	12 98       	mov	r8,r9
8000a758:	a3 78       	lsl	r8,0x3
8000a75a:	12 08       	add	r8,r9
8000a75c:	a3 78       	lsl	r8,0x3
8000a75e:	f4 08 00 08 	add	r8,r10,r8
8000a762:	f0 ca ff e0 	sub	r10,r8,-32
8000a766:	ee e8 ff f8 	ld.d	r8,r7[-8]
8000a76a:	f4 e9 00 00 	st.d	r10[0],r8
}
8000a76e:	2e 6d       	sub	sp,-104
8000a770:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000a774:	80 00       	ld.sh	r0,r0[0x0]
8000a776:	a0 74       	st.h	r0[0xe],r4

8000a778 <estimator_loop>:

//--------------------------------GLOBAL--------------------------
void estimator_loop()
{
8000a778:	eb cd 40 e0 	pushm	r5-r7,lr
8000a77c:	1a 97       	mov	r7,sp
8000a77e:	21 dd       	sub	sp,116
8000a780:	fe f6 02 00 	ld.w	r6,pc[512]
8000a784:	1e 26       	rsub	r6,pc
	
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	//static uint32_t dt_baro,time_before_baro;
	
	if (!centralData->position_estimator.init_gps_position)
8000a786:	ec f8 00 00 	ld.w	r8,r6[0]
8000a78a:	70 08       	ld.w	r8,r8[0x0]
8000a78c:	f1 38 09 ac 	ld.ub	r8,r8[2476]
8000a790:	ec 18 00 01 	eorl	r8,0x1
8000a794:	5c 58       	castu.b	r8
8000a796:	c0 30       	breq	8000a79c <estimator_loop+0x24>
	{
		init_pos_gps_estimator();
8000a798:	f0 16 01 1c 	mcall	r6[1136]
	}

	if(!filter_init_delta_t)
8000a79c:	ec f8 02 f0 	ld.w	r8,r6[752]
8000a7a0:	11 88       	ld.ub	r8,r8[0x0]
8000a7a2:	ec 18 00 01 	eorl	r8,0x1
8000a7a6:	5c 58       	castu.b	r8
8000a7a8:	c0 c0       	breq	8000a7c0 <estimator_loop+0x48>
	{
		filter_init_delta_t = true;
8000a7aa:	ec f9 02 f0 	ld.w	r9,r6[752]
8000a7ae:	30 18       	mov	r8,1
8000a7b0:	b2 88       	st.b	r9[0x0],r8
		prev_time = get_micros();
8000a7b2:	f0 16 00 29 	mcall	r6[164]
8000a7b6:	18 99       	mov	r9,r12
8000a7b8:	ec f8 02 ec 	ld.w	r8,r6[748]
8000a7bc:	91 09       	st.w	r8[0x0],r9
8000a7be:	cd e8       	rjmp	8000a97a <estimator_loop+0x202>
	}else{
		actual_time = get_micros();
8000a7c0:	f0 16 00 29 	mcall	r6[164]
8000a7c4:	18 98       	mov	r8,r12
8000a7c6:	ef 48 ff fc 	st.w	r7[-4],r8
		centralData->estimation.delta_t_filter = (float)(actual_time-prev_time);
8000a7ca:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7ce:	70 08       	ld.w	r8,r8[0x0]
8000a7d0:	ec f9 02 ec 	ld.w	r9,r6[748]
8000a7d4:	72 09       	ld.w	r9,r9[0x0]
8000a7d6:	ee fa ff fc 	ld.w	r10,r7[-4]
8000a7da:	f4 09 01 09 	sub	r9,r10,r9
8000a7de:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8000a7e2:	f1 49 07 ec 	st.w	r8[2028],r9
		prev_time = actual_time;
8000a7e6:	ec f8 02 ec 	ld.w	r8,r6[748]
8000a7ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000a7ee:	91 09       	st.w	r8[0x0],r9
		centralData->estimation.delta_t_filter /= 1000000.0;
8000a7f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7f4:	70 05       	ld.w	r5,r8[0x0]
8000a7f6:	ec f8 00 00 	ld.w	r8,r6[0]
8000a7fa:	70 08       	ld.w	r8,r8[0x0]
8000a7fc:	f0 f8 07 ec 	ld.w	r8,r8[2028]
8000a800:	e0 6b 24 00 	mov	r11,9216
8000a804:	ea 1b 49 74 	orh	r11,0x4974
8000a808:	10 9c       	mov	r12,r8
8000a80a:	f0 16 00 0a 	mcall	r6[40]
8000a80e:	18 98       	mov	r8,r12
8000a810:	eb 48 07 ec 	st.w	r5[2028],r8
		
		e_predict(&(centralData->imu1.attitude.qe),centralData->imu1.attitude.acc_bf,centralData->estimation.delta_t_filter);
8000a814:	ec f8 00 00 	ld.w	r8,r6[0]
8000a818:	70 08       	ld.w	r8,r8[0x0]
8000a81a:	f0 fa 07 ec 	ld.w	r10,r8[2028]
8000a81e:	ec f8 00 00 	ld.w	r8,r6[0]
8000a822:	70 08       	ld.w	r8,r8[0x0]
8000a824:	f0 c9 ff 40 	sub	r9,r8,-192
8000a828:	ec f8 00 00 	ld.w	r8,r6[0]
8000a82c:	70 08       	ld.w	r8,r8[0x0]
8000a82e:	12 9b       	mov	r11,r9
8000a830:	10 9c       	mov	r12,r8
8000a832:	f0 16 01 e4 	mcall	r6[1936]
		
		//Check new values from GPS/Baro, if yes, update
		if (newValidGpsMsg(&timeLastGpsMsgEstimator) && centralData->position_estimator.init_gps_position && (centralData->simulation_mode == 0))
8000a836:	ec fc 02 a8 	ld.w	r12,r6[680]
8000a83a:	f0 16 00 98 	mcall	r6[608]
8000a83e:	18 98       	mov	r8,r12
8000a840:	58 08       	cp.w	r8,0
8000a842:	e0 80 00 9c 	breq	8000a97a <estimator_loop+0x202>
8000a846:	ec f8 00 00 	ld.w	r8,r6[0]
8000a84a:	70 08       	ld.w	r8,r8[0x0]
8000a84c:	f1 38 09 ac 	ld.ub	r8,r8[2476]
8000a850:	58 08       	cp.w	r8,0
8000a852:	e0 80 00 94 	breq	8000a97a <estimator_loop+0x202>
8000a856:	ec f8 00 00 	ld.w	r8,r6[0]
8000a85a:	70 08       	ld.w	r8,r8[0x0]
8000a85c:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8000a860:	58 08       	cp.w	r8,0
8000a862:	e0 81 00 8c 	brne	8000a97a <estimator_loop+0x202>
			//latitude_rad= ((double) (centralData->GPS_data.latitude-init_lat))*DEGREE_TO_RADIAN; //in rad E+7
			//pos_y= (float) (((double) (centralData->GPS_data.longitude-init_long)*EARTH_RADIUS)*DEGREE_TO_RADIAN*(COS_PI_4-COS_PI_4*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)-COS_PI_4*0.5*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)*(centralData->GPS_data.latitude*DEGREE_TO_RADIAN*0.0000001-PI_4)));//Taylor 2nd order cos() approx
			//pos_x= (float) (latitude_rad*EARTH_RADIUS);
			//pos_z= -centralData->GPS_data.altitude+init_alt;
			
			global_gps_position.longitude = centralData->GPS_data.longitude;
8000a866:	ec f8 00 00 	ld.w	r8,r6[0]
8000a86a:	70 08       	ld.w	r8,r8[0x0]
8000a86c:	f0 e8 07 58 	ld.d	r8,r8[1880]
8000a870:	ee e9 ff bc 	st.d	r7[-68],r8
			global_gps_position.latitude = centralData->GPS_data.latitude;
8000a874:	ec f8 00 00 	ld.w	r8,r6[0]
8000a878:	70 08       	ld.w	r8,r8[0x0]
8000a87a:	f0 e8 07 50 	ld.d	r8,r8[1872]
8000a87e:	ee e9 ff c4 	st.d	r7[-60],r8
			global_gps_position.altitude = centralData->GPS_data.altitude;
8000a882:	ec f8 00 00 	ld.w	r8,r6[0]
8000a886:	70 08       	ld.w	r8,r8[0x0]
8000a888:	f0 f8 07 60 	ld.w	r8,r8[1888]
8000a88c:	ef 48 ff cc 	st.w	r7[-52],r8
			
			local_coordinates = global_to_local_position(global_gps_position,centralData->position_estimator.localPosition.origin);
8000a890:	ec f8 00 00 	ld.w	r8,r6[0]
8000a894:	70 08       	ld.w	r8,r8[0x0]
8000a896:	ee cc 00 74 	sub	r12,r7,116
8000a89a:	20 7d       	sub	sp,28
8000a89c:	1a 99       	mov	r9,sp
8000a89e:	12 9a       	mov	r10,r9
8000a8a0:	f0 cb f6 0c 	sub	r11,r8,-2548
8000a8a4:	f4 c8 00 00 	sub	r8,r10,0
8000a8a8:	f6 c9 00 00 	sub	r9,r11,0
8000a8ac:	72 0e       	ld.w	lr,r9[0x0]
8000a8ae:	91 0e       	st.w	r8[0x0],lr
8000a8b0:	72 1e       	ld.w	lr,r9[0x4]
8000a8b2:	91 1e       	st.w	r8[0x4],lr
8000a8b4:	72 2e       	ld.w	lr,r9[0x8]
8000a8b6:	91 2e       	st.w	r8[0x8],lr
8000a8b8:	72 39       	ld.w	r9,r9[0xc]
8000a8ba:	91 39       	st.w	r8[0xc],r9
8000a8bc:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a8c0:	f4 e9 00 10 	st.d	r10[16],r8
8000a8c4:	76 68       	ld.w	r8,r11[0x18]
8000a8c6:	95 68       	st.w	r10[0x18],r8
8000a8c8:	20 7d       	sub	sp,28
8000a8ca:	1a 98       	mov	r8,sp
8000a8cc:	10 9a       	mov	r10,r8
8000a8ce:	ee cb 00 44 	sub	r11,r7,68
8000a8d2:	f4 c8 00 00 	sub	r8,r10,0
8000a8d6:	f6 c9 00 00 	sub	r9,r11,0
8000a8da:	72 0e       	ld.w	lr,r9[0x0]
8000a8dc:	91 0e       	st.w	r8[0x0],lr
8000a8de:	72 1e       	ld.w	lr,r9[0x4]
8000a8e0:	91 1e       	st.w	r8[0x4],lr
8000a8e2:	72 2e       	ld.w	lr,r9[0x8]
8000a8e4:	91 2e       	st.w	r8[0x8],lr
8000a8e6:	72 39       	ld.w	r9,r9[0xc]
8000a8e8:	91 39       	st.w	r8[0xc],r9
8000a8ea:	f6 e8 00 10 	ld.d	r8,r11[16]
8000a8ee:	f4 e9 00 10 	st.d	r10[16],r8
8000a8f2:	76 68       	ld.w	r8,r11[0x18]
8000a8f4:	95 68       	st.w	r10[0x18],r8
8000a8f6:	f0 16 00 7d 	mcall	r6[500]
8000a8fa:	2f 2d       	sub	sp,-56
			
			//get delay of GPS measure
			//do prediction up to the corresponding delay
			
			e_kalman_update_position(X,local_coordinates.pos[X]);
8000a8fc:	ee f8 ff 8c 	ld.w	r8,r7[-116]
8000a900:	10 9c       	mov	r12,r8
8000a902:	f0 16 00 02 	mcall	r6[8]
8000a906:	14 98       	mov	r8,r10
8000a908:	16 99       	mov	r9,r11
8000a90a:	10 9a       	mov	r10,r8
8000a90c:	12 9b       	mov	r11,r9
8000a90e:	30 0c       	mov	r12,0
8000a910:	f0 16 00 d3 	mcall	r6[844]
			e_kalman_update_position(Y,local_coordinates.pos[Y]);
8000a914:	ee f8 ff 90 	ld.w	r8,r7[-112]
8000a918:	10 9c       	mov	r12,r8
8000a91a:	f0 16 00 02 	mcall	r6[8]
8000a91e:	14 98       	mov	r8,r10
8000a920:	16 99       	mov	r9,r11
8000a922:	10 9a       	mov	r10,r8
8000a924:	12 9b       	mov	r11,r9
8000a926:	30 1c       	mov	r12,1
8000a928:	f0 16 00 d3 	mcall	r6[844]
			//e_kalman_update_position_hf(X,local_coordinates.pos[X]);
			//e_kalman_update_position_hf(Y,local_coordinates.pos[Y]);
			e_kalman_update_position(Z,local_coordinates.pos[Z]);
8000a92c:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000a930:	10 9c       	mov	r12,r8
8000a932:	f0 16 00 02 	mcall	r6[8]
8000a936:	14 98       	mov	r8,r10
8000a938:	16 99       	mov	r9,r11
8000a93a:	10 9a       	mov	r10,r8
8000a93c:	12 9b       	mov	r11,r9
8000a93e:	30 2c       	mov	r12,2
8000a940:	f0 16 00 d3 	mcall	r6[844]
			
			e_kalman_update_speed(X,centralData->GPS_data.northSpeed);
8000a944:	ec f8 00 00 	ld.w	r8,r6[0]
8000a948:	70 08       	ld.w	r8,r8[0x0]
8000a94a:	f0 f8 07 70 	ld.w	r8,r8[1904]
8000a94e:	10 9b       	mov	r11,r8
8000a950:	30 0c       	mov	r12,0
8000a952:	f0 16 00 ae 	mcall	r6[696]
			e_kalman_update_speed(Y,centralData->GPS_data.eastSpeed);
8000a956:	ec f8 00 00 	ld.w	r8,r6[0]
8000a95a:	70 08       	ld.w	r8,r8[0x0]
8000a95c:	f0 f8 07 74 	ld.w	r8,r8[1908]
8000a960:	10 9b       	mov	r11,r8
8000a962:	30 1c       	mov	r12,1
8000a964:	f0 16 00 ae 	mcall	r6[696]
			//e_kalman_update_speed_hf(X,centralData->GPS_data.northSpeed);
			//e_kalman_update_speed_hf(Y,centralData->GPS_data.eastSpeed);
			e_kalman_update_speed(Z,centralData->GPS_data.verticalSpeed);
8000a968:	ec f8 00 00 	ld.w	r8,r6[0]
8000a96c:	70 08       	ld.w	r8,r8[0x0]
8000a96e:	f0 f8 07 78 	ld.w	r8,r8[1912]
8000a972:	10 9b       	mov	r11,r8
8000a974:	30 2c       	mov	r12,2
8000a976:	f0 16 00 ae 	mcall	r6[696]
		e_kalman_update_position(Z,baro->altitude,dt_baro);
		time_before_baro=get_millis();
		}	*/
		//}
	}
8000a97a:	2e 3d       	sub	sp,-116
8000a97c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000a980:	80 00       	ld.sh	r0,r0[0x0]
8000a982:	a6 08       	st.h	r3[0x0],r8

8000a984 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000a984:	eb cd 40 80 	pushm	r7,lr
8000a988:	1a 97       	mov	r7,sp
8000a98a:	20 3d       	sub	sp,12
8000a98c:	ef 4c ff f8 	st.w	r7[-8],r12
8000a990:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000a994:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a998:	70 09       	ld.w	r9,r8[0x0]
8000a99a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a99e:	70 08       	ld.w	r8,r8[0x0]
8000a9a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000a9a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9a8:	2f c8       	sub	r8,-4
8000a9aa:	70 0a       	ld.w	r10,r8[0x0]
8000a9ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9b0:	2f c8       	sub	r8,-4
8000a9b2:	70 08       	ld.w	r8,r8[0x0]
8000a9b4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a9b8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000a9bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000a9c0:	2f 88       	sub	r8,-8
8000a9c2:	70 0a       	ld.w	r10,r8[0x0]
8000a9c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000a9c8:	2f 88       	sub	r8,-8
8000a9ca:	70 08       	ld.w	r8,r8[0x0]
8000a9cc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000a9d0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000a9d4:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000a9d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000a9dc:	10 9c       	mov	r12,r8
8000a9de:	2f dd       	sub	sp,-12
8000a9e0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000a9e4 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000a9e4:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000a9e8:	1a 97       	mov	r7,sp
8000a9ea:	20 7d       	sub	sp,28
8000a9ec:	4b d6       	lddpc	r6,8000aae0 <quat_multi+0xfc>
8000a9ee:	1e 26       	rsub	r6,pc
8000a9f0:	ee c8 ff ec 	sub	r8,r7,-20
8000a9f4:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000a9f6:	70 2a       	ld.w	r10,r8[0x8]
8000a9f8:	70 79       	ld.w	r9,r8[0x1c]
8000a9fa:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000a9fe:	70 3b       	ld.w	r11,r8[0xc]
8000aa00:	70 69       	ld.w	r9,r8[0x18]
8000aa02:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa06:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa0a:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000aa0e:	70 3a       	ld.w	r10,r8[0xc]
8000aa10:	70 59       	ld.w	r9,r8[0x14]
8000aa12:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa16:	70 1b       	ld.w	r11,r8[0x4]
8000aa18:	70 79       	ld.w	r9,r8[0x1c]
8000aa1a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa1e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa22:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000aa26:	70 1a       	ld.w	r10,r8[0x4]
8000aa28:	70 69       	ld.w	r9,r8[0x18]
8000aa2a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa2e:	70 2b       	ld.w	r11,r8[0x8]
8000aa30:	70 59       	ld.w	r9,r8[0x14]
8000aa32:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa36:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000aa3a:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000aa3e:	70 4a       	ld.w	r10,r8[0x10]
8000aa40:	70 19       	ld.w	r9,r8[0x4]
8000aa42:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa46:	70 0b       	ld.w	r11,r8[0x0]
8000aa48:	70 59       	ld.w	r9,r8[0x14]
8000aa4a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa4e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa52:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000aa56:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa5a:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000aa5e:	70 4a       	ld.w	r10,r8[0x10]
8000aa60:	70 29       	ld.w	r9,r8[0x8]
8000aa62:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa66:	70 0b       	ld.w	r11,r8[0x0]
8000aa68:	70 69       	ld.w	r9,r8[0x18]
8000aa6a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa6e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa72:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000aa76:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa7a:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000aa7e:	70 4a       	ld.w	r10,r8[0x10]
8000aa80:	70 39       	ld.w	r9,r8[0xc]
8000aa82:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000aa86:	70 0b       	ld.w	r11,r8[0x0]
8000aa88:	70 79       	ld.w	r9,r8[0x1c]
8000aa8a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000aa8e:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000aa92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aa96:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000aa9a:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000aa9e:	70 0a       	ld.w	r10,r8[0x0]
8000aaa0:	70 49       	ld.w	r9,r8[0x10]
8000aaa2:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000aaa6:	f0 c9 ff f0 	sub	r9,r8,-16
8000aaaa:	2f c9       	sub	r9,-4
8000aaac:	2f c8       	sub	r8,-4
8000aaae:	12 9b       	mov	r11,r9
8000aab0:	10 9c       	mov	r12,r8
8000aab2:	c6 9f       	rcall	8000a984 <scalar_product>
8000aab4:	18 98       	mov	r8,r12
8000aab6:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000aaba:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000aabe:	0a 98       	mov	r8,r5
8000aac0:	ee c9 00 1c 	sub	r9,r7,28
8000aac4:	20 08       	sub	r8,0
8000aac6:	20 09       	sub	r9,0
8000aac8:	72 0a       	ld.w	r10,r9[0x0]
8000aaca:	91 0a       	st.w	r8[0x0],r10
8000aacc:	72 1a       	ld.w	r10,r9[0x4]
8000aace:	91 1a       	st.w	r8[0x4],r10
8000aad0:	72 2a       	ld.w	r10,r9[0x8]
8000aad2:	91 2a       	st.w	r8[0x8],r10
8000aad4:	72 39       	ld.w	r9,r9[0xc]
8000aad6:	91 39       	st.w	r8[0xc],r9
}
8000aad8:	0a 9c       	mov	r12,r5
8000aada:	2f 9d       	sub	sp,-28
8000aadc:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000aae0:	80 00       	ld.sh	r0,r0[0x0]
8000aae2:	a8 72       	st.h	r4[0xe],r2

8000aae4 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000aae4:	eb cd 40 80 	pushm	r7,lr
8000aae8:	1a 97       	mov	r7,sp
8000aaea:	20 5d       	sub	sp,20
8000aaec:	ee c9 ff f8 	sub	r9,r7,-8
8000aaf0:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000aaf2:	72 08       	ld.w	r8,r9[0x0]
8000aaf4:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000aaf8:	30 08       	mov	r8,0
8000aafa:	ef 48 ff fc 	st.w	r7[-4],r8
8000aafe:	c1 58       	rjmp	8000ab28 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000ab00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab04:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ab08:	2f fb       	sub	r11,-1
8000ab0a:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000ab0e:	ee 1b 80 00 	eorh	r11,0x8000
8000ab12:	2f f8       	sub	r8,-1
8000ab14:	a3 68       	lsl	r8,0x2
8000ab16:	ee 08 00 08 	add	r8,r7,r8
8000ab1a:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000ab1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab22:	2f f8       	sub	r8,-1
8000ab24:	ef 48 ff fc 	st.w	r7[-4],r8
8000ab28:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ab2c:	58 28       	cp.w	r8,2
8000ab2e:	fe 9a ff e9 	brle	8000ab00 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000ab32:	14 98       	mov	r8,r10
8000ab34:	ee c9 00 14 	sub	r9,r7,20
8000ab38:	20 08       	sub	r8,0
8000ab3a:	20 09       	sub	r9,0
8000ab3c:	72 0b       	ld.w	r11,r9[0x0]
8000ab3e:	91 0b       	st.w	r8[0x0],r11
8000ab40:	72 1b       	ld.w	r11,r9[0x4]
8000ab42:	91 1b       	st.w	r8[0x4],r11
8000ab44:	72 2b       	ld.w	r11,r9[0x8]
8000ab46:	91 2b       	st.w	r8[0x8],r11
8000ab48:	72 39       	ld.w	r9,r9[0xc]
8000ab4a:	91 39       	st.w	r8[0xc],r9
}
8000ab4c:	14 9c       	mov	r12,r10
8000ab4e:	2f bd       	sub	sp,-20
8000ab50:	e3 cd 80 80 	ldm	sp++,r7,pc

8000ab54 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000ab54:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ab58:	1a 97       	mov	r7,sp
8000ab5a:	20 cd       	sub	sp,48
8000ab5c:	4b c6       	lddpc	r6,8000ac4c <quat_global_to_local+0xf8>
8000ab5e:	1e 26       	rsub	r6,pc
8000ab60:	ee c5 ff ec 	sub	r5,r7,-20
8000ab64:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ab66:	ee ca 00 10 	sub	r10,r7,16
8000ab6a:	20 4d       	sub	sp,16
8000ab6c:	1a 98       	mov	r8,sp
8000ab6e:	0a 99       	mov	r9,r5
8000ab70:	20 08       	sub	r8,0
8000ab72:	20 09       	sub	r9,0
8000ab74:	72 0b       	ld.w	r11,r9[0x0]
8000ab76:	91 0b       	st.w	r8[0x0],r11
8000ab78:	72 1b       	ld.w	r11,r9[0x4]
8000ab7a:	91 1b       	st.w	r8[0x4],r11
8000ab7c:	72 2b       	ld.w	r11,r9[0x8]
8000ab7e:	91 2b       	st.w	r8[0x8],r11
8000ab80:	72 39       	ld.w	r9,r9[0xc]
8000ab82:	91 39       	st.w	r8[0xc],r9
8000ab84:	14 9c       	mov	r12,r10
8000ab86:	ca ff       	rcall	8000aae4 <quat_inv>
8000ab88:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000ab8a:	ee ca 00 20 	sub	r10,r7,32
8000ab8e:	20 4d       	sub	sp,16
8000ab90:	1a 98       	mov	r8,sp
8000ab92:	ea c9 ff f0 	sub	r9,r5,-16
8000ab96:	20 08       	sub	r8,0
8000ab98:	20 09       	sub	r9,0
8000ab9a:	72 0b       	ld.w	r11,r9[0x0]
8000ab9c:	91 0b       	st.w	r8[0x0],r11
8000ab9e:	72 1b       	ld.w	r11,r9[0x4]
8000aba0:	91 1b       	st.w	r8[0x4],r11
8000aba2:	72 2b       	ld.w	r11,r9[0x8]
8000aba4:	91 2b       	st.w	r8[0x8],r11
8000aba6:	72 39       	ld.w	r9,r9[0xc]
8000aba8:	91 39       	st.w	r8[0xc],r9
8000abaa:	20 4d       	sub	sp,16
8000abac:	1a 98       	mov	r8,sp
8000abae:	ee c9 00 10 	sub	r9,r7,16
8000abb2:	20 08       	sub	r8,0
8000abb4:	20 09       	sub	r9,0
8000abb6:	72 0b       	ld.w	r11,r9[0x0]
8000abb8:	91 0b       	st.w	r8[0x0],r11
8000abba:	72 1b       	ld.w	r11,r9[0x4]
8000abbc:	91 1b       	st.w	r8[0x4],r11
8000abbe:	72 2b       	ld.w	r11,r9[0x8]
8000abc0:	91 2b       	st.w	r8[0x8],r11
8000abc2:	72 39       	ld.w	r9,r9[0xc]
8000abc4:	91 39       	st.w	r8[0xc],r9
8000abc6:	14 9c       	mov	r12,r10
8000abc8:	c0 ef       	rcall	8000a9e4 <quat_multi>
8000abca:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000abcc:	ee ca 00 30 	sub	r10,r7,48
8000abd0:	20 4d       	sub	sp,16
8000abd2:	1a 98       	mov	r8,sp
8000abd4:	0a 99       	mov	r9,r5
8000abd6:	20 08       	sub	r8,0
8000abd8:	20 09       	sub	r9,0
8000abda:	72 0b       	ld.w	r11,r9[0x0]
8000abdc:	91 0b       	st.w	r8[0x0],r11
8000abde:	72 1b       	ld.w	r11,r9[0x4]
8000abe0:	91 1b       	st.w	r8[0x4],r11
8000abe2:	72 2b       	ld.w	r11,r9[0x8]
8000abe4:	91 2b       	st.w	r8[0x8],r11
8000abe6:	72 39       	ld.w	r9,r9[0xc]
8000abe8:	91 39       	st.w	r8[0xc],r9
8000abea:	20 4d       	sub	sp,16
8000abec:	1a 98       	mov	r8,sp
8000abee:	ee c9 00 20 	sub	r9,r7,32
8000abf2:	20 08       	sub	r8,0
8000abf4:	20 09       	sub	r9,0
8000abf6:	72 0b       	ld.w	r11,r9[0x0]
8000abf8:	91 0b       	st.w	r8[0x0],r11
8000abfa:	72 1b       	ld.w	r11,r9[0x4]
8000abfc:	91 1b       	st.w	r8[0x4],r11
8000abfe:	72 2b       	ld.w	r11,r9[0x8]
8000ac00:	91 2b       	st.w	r8[0x8],r11
8000ac02:	72 39       	ld.w	r9,r9[0xc]
8000ac04:	91 39       	st.w	r8[0xc],r9
8000ac06:	14 9c       	mov	r12,r10
8000ac08:	ce ee       	rcall	8000a9e4 <quat_multi>
8000ac0a:	2f 8d       	sub	sp,-32
8000ac0c:	ee c8 00 20 	sub	r8,r7,32
8000ac10:	ee c9 00 30 	sub	r9,r7,48
8000ac14:	20 08       	sub	r8,0
8000ac16:	20 09       	sub	r9,0
8000ac18:	72 0a       	ld.w	r10,r9[0x0]
8000ac1a:	91 0a       	st.w	r8[0x0],r10
8000ac1c:	72 1a       	ld.w	r10,r9[0x4]
8000ac1e:	91 1a       	st.w	r8[0x4],r10
8000ac20:	72 2a       	ld.w	r10,r9[0x8]
8000ac22:	91 2a       	st.w	r8[0x8],r10
8000ac24:	72 39       	ld.w	r9,r9[0xc]
8000ac26:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000ac28:	06 98       	mov	r8,r3
8000ac2a:	ee c9 00 20 	sub	r9,r7,32
8000ac2e:	20 08       	sub	r8,0
8000ac30:	20 09       	sub	r9,0
8000ac32:	72 0a       	ld.w	r10,r9[0x0]
8000ac34:	91 0a       	st.w	r8[0x0],r10
8000ac36:	72 1a       	ld.w	r10,r9[0x4]
8000ac38:	91 1a       	st.w	r8[0x4],r10
8000ac3a:	72 2a       	ld.w	r10,r9[0x8]
8000ac3c:	91 2a       	st.w	r8[0x8],r10
8000ac3e:	72 39       	ld.w	r9,r9[0xc]
8000ac40:	91 39       	st.w	r8[0xc],r9
}
8000ac42:	06 9c       	mov	r12,r3
8000ac44:	2f 4d       	sub	sp,-48
8000ac46:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ac4a:	00 00       	add	r0,r0
8000ac4c:	80 00       	ld.sh	r0,r0[0x0]
8000ac4e:	a9 e2       	*unknown*

8000ac50 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000ac50:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000ac54:	1a 97       	mov	r7,sp
8000ac56:	20 cd       	sub	sp,48
8000ac58:	4b c6       	lddpc	r6,8000ad48 <quat_local_to_global+0xf8>
8000ac5a:	1e 26       	rsub	r6,pc
8000ac5c:	ee c5 ff ec 	sub	r5,r7,-20
8000ac60:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000ac62:	ee ca 00 10 	sub	r10,r7,16
8000ac66:	20 4d       	sub	sp,16
8000ac68:	1a 98       	mov	r8,sp
8000ac6a:	0a 99       	mov	r9,r5
8000ac6c:	20 08       	sub	r8,0
8000ac6e:	20 09       	sub	r9,0
8000ac70:	72 0b       	ld.w	r11,r9[0x0]
8000ac72:	91 0b       	st.w	r8[0x0],r11
8000ac74:	72 1b       	ld.w	r11,r9[0x4]
8000ac76:	91 1b       	st.w	r8[0x4],r11
8000ac78:	72 2b       	ld.w	r11,r9[0x8]
8000ac7a:	91 2b       	st.w	r8[0x8],r11
8000ac7c:	72 39       	ld.w	r9,r9[0xc]
8000ac7e:	91 39       	st.w	r8[0xc],r9
8000ac80:	14 9c       	mov	r12,r10
8000ac82:	c3 1f       	rcall	8000aae4 <quat_inv>
8000ac84:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000ac86:	ee ca 00 20 	sub	r10,r7,32
8000ac8a:	20 4d       	sub	sp,16
8000ac8c:	1a 98       	mov	r8,sp
8000ac8e:	ea c9 ff f0 	sub	r9,r5,-16
8000ac92:	20 08       	sub	r8,0
8000ac94:	20 09       	sub	r9,0
8000ac96:	72 0b       	ld.w	r11,r9[0x0]
8000ac98:	91 0b       	st.w	r8[0x0],r11
8000ac9a:	72 1b       	ld.w	r11,r9[0x4]
8000ac9c:	91 1b       	st.w	r8[0x4],r11
8000ac9e:	72 2b       	ld.w	r11,r9[0x8]
8000aca0:	91 2b       	st.w	r8[0x8],r11
8000aca2:	72 39       	ld.w	r9,r9[0xc]
8000aca4:	91 39       	st.w	r8[0xc],r9
8000aca6:	20 4d       	sub	sp,16
8000aca8:	1a 98       	mov	r8,sp
8000acaa:	0a 99       	mov	r9,r5
8000acac:	20 08       	sub	r8,0
8000acae:	20 09       	sub	r9,0
8000acb0:	72 0b       	ld.w	r11,r9[0x0]
8000acb2:	91 0b       	st.w	r8[0x0],r11
8000acb4:	72 1b       	ld.w	r11,r9[0x4]
8000acb6:	91 1b       	st.w	r8[0x4],r11
8000acb8:	72 2b       	ld.w	r11,r9[0x8]
8000acba:	91 2b       	st.w	r8[0x8],r11
8000acbc:	72 39       	ld.w	r9,r9[0xc]
8000acbe:	91 39       	st.w	r8[0xc],r9
8000acc0:	14 9c       	mov	r12,r10
8000acc2:	c9 1e       	rcall	8000a9e4 <quat_multi>
8000acc4:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000acc6:	ee ca 00 30 	sub	r10,r7,48
8000acca:	20 4d       	sub	sp,16
8000accc:	1a 98       	mov	r8,sp
8000acce:	ee c9 00 10 	sub	r9,r7,16
8000acd2:	20 08       	sub	r8,0
8000acd4:	20 09       	sub	r9,0
8000acd6:	72 0b       	ld.w	r11,r9[0x0]
8000acd8:	91 0b       	st.w	r8[0x0],r11
8000acda:	72 1b       	ld.w	r11,r9[0x4]
8000acdc:	91 1b       	st.w	r8[0x4],r11
8000acde:	72 2b       	ld.w	r11,r9[0x8]
8000ace0:	91 2b       	st.w	r8[0x8],r11
8000ace2:	72 39       	ld.w	r9,r9[0xc]
8000ace4:	91 39       	st.w	r8[0xc],r9
8000ace6:	20 4d       	sub	sp,16
8000ace8:	1a 98       	mov	r8,sp
8000acea:	ee c9 00 20 	sub	r9,r7,32
8000acee:	20 08       	sub	r8,0
8000acf0:	20 09       	sub	r9,0
8000acf2:	72 0b       	ld.w	r11,r9[0x0]
8000acf4:	91 0b       	st.w	r8[0x0],r11
8000acf6:	72 1b       	ld.w	r11,r9[0x4]
8000acf8:	91 1b       	st.w	r8[0x4],r11
8000acfa:	72 2b       	ld.w	r11,r9[0x8]
8000acfc:	91 2b       	st.w	r8[0x8],r11
8000acfe:	72 39       	ld.w	r9,r9[0xc]
8000ad00:	91 39       	st.w	r8[0xc],r9
8000ad02:	14 9c       	mov	r12,r10
8000ad04:	c7 0e       	rcall	8000a9e4 <quat_multi>
8000ad06:	2f 8d       	sub	sp,-32
8000ad08:	ee c8 00 20 	sub	r8,r7,32
8000ad0c:	ee c9 00 30 	sub	r9,r7,48
8000ad10:	20 08       	sub	r8,0
8000ad12:	20 09       	sub	r9,0
8000ad14:	72 0a       	ld.w	r10,r9[0x0]
8000ad16:	91 0a       	st.w	r8[0x0],r10
8000ad18:	72 1a       	ld.w	r10,r9[0x4]
8000ad1a:	91 1a       	st.w	r8[0x4],r10
8000ad1c:	72 2a       	ld.w	r10,r9[0x8]
8000ad1e:	91 2a       	st.w	r8[0x8],r10
8000ad20:	72 39       	ld.w	r9,r9[0xc]
8000ad22:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000ad24:	06 98       	mov	r8,r3
8000ad26:	ee c9 00 20 	sub	r9,r7,32
8000ad2a:	20 08       	sub	r8,0
8000ad2c:	20 09       	sub	r9,0
8000ad2e:	72 0a       	ld.w	r10,r9[0x0]
8000ad30:	91 0a       	st.w	r8[0x0],r10
8000ad32:	72 1a       	ld.w	r10,r9[0x4]
8000ad34:	91 1a       	st.w	r8[0x4],r10
8000ad36:	72 2a       	ld.w	r10,r9[0x8]
8000ad38:	91 2a       	st.w	r8[0x8],r10
8000ad3a:	72 39       	ld.w	r9,r9[0xc]
8000ad3c:	91 39       	st.w	r8[0xc],r9
}
8000ad3e:	06 9c       	mov	r12,r3
8000ad40:	2f 4d       	sub	sp,-48
8000ad42:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000ad46:	00 00       	add	r0,r0
8000ad48:	80 00       	ld.sh	r0,r0[0x0]
8000ad4a:	aa de       	st.b	r5[0x5],lr

8000ad4c <init_pos_integration>:
void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps);
void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer);


void init_pos_integration(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps)
{
8000ad4c:	eb cd 40 c0 	pushm	r6-r7,lr
8000ad50:	1a 97       	mov	r7,sp
8000ad52:	20 3d       	sub	sp,12
8000ad54:	4a 66       	lddpc	r6,8000adec <init_pos_integration+0xa0>
8000ad56:	1e 26       	rsub	r6,pc
8000ad58:	ef 4c ff fc 	st.w	r7[-4],r12
8000ad5c:	ef 4b ff f8 	st.w	r7[-8],r11
8000ad60:	ef 4a ff f4 	st.w	r7[-12],r10
	//centralData = get_central_data();
	pos_est->init_gps_position = false;
8000ad64:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad68:	30 08       	mov	r8,0
8000ad6a:	f3 68 00 28 	st.b	r9[40],r8
	pos_est->init_barometer=false;
8000ad6e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000ad72:	30 08       	mov	r8,0
8000ad74:	f3 68 00 29 	st.b	r9[41],r8
	pos_est->timeLastGpsMsg = 0;
8000ad78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad7c:	30 09       	mov	r9,0
8000ad7e:	91 89       	st.w	r8[0x20],r9
	pos_est->timeLastBarometerMsg=0;
8000ad80:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad84:	30 09       	mov	r9,0
8000ad86:	91 99       	st.w	r8[0x24],r9
	
	pos_est->kp_pos[0] = 2.0;
8000ad88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad8c:	fc 19 40 00 	movh	r9,0x4000
8000ad90:	91 39       	st.w	r8[0xc],r9
	pos_est->kp_pos[1] = 2.0;
8000ad92:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ad96:	fc 19 40 00 	movh	r9,0x4000
8000ad9a:	91 49       	st.w	r8[0x10],r9
	pos_est->kp_pos[2] = 1.0;
8000ad9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ada0:	fc 19 3f 80 	movh	r9,0x3f80
8000ada4:	91 59       	st.w	r8[0x14],r9
	
	pos_est->kp_vel[0] = 1.0;
8000ada6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adaa:	fc 19 3f 80 	movh	r9,0x3f80
8000adae:	91 09       	st.w	r8[0x0],r9
	pos_est->kp_vel[1] = 1.0;
8000adb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adb4:	fc 19 3f 80 	movh	r9,0x3f80
8000adb8:	91 19       	st.w	r8[0x4],r9
	pos_est->kp_vel[2] = 0.5;
8000adba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adbe:	fc 19 3f 00 	movh	r9,0x3f00
8000adc2:	91 29       	st.w	r8[0x8],r9
	
	pos_est->kp_alt=2.0;
8000adc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000adc8:	fc 19 40 00 	movh	r9,0x4000
8000adcc:	91 69       	st.w	r8[0x18],r9
	pos_est->kp_vel_baro=1.0;
8000adce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000add2:	fc 19 3f 80 	movh	r9,0x3f80
8000add6:	91 79       	st.w	r8[0x1c],r9
	
	init_pos_gps(pos_est, gps);
8000add8:	ee fb ff f4 	ld.w	r11,r7[-12]
8000addc:	ee fc ff fc 	ld.w	r12,r7[-4]
8000ade0:	f0 16 00 eb 	mcall	r6[940]
}
8000ade4:	2f dd       	sub	sp,-12
8000ade6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000adea:	00 00       	add	r0,r0
8000adec:	80 00       	ld.sh	r0,r0[0x0]
8000adee:	ab da       	cbr	r10,0xb
8000adf0:	47 50       	lddsp	r0,sp[0x1d4]
8000adf2:	53 20       	stdsp	sp[0xc8],r0
8000adf4:	70 6f       	ld.w	pc,r8[0x18]
8000adf6:	73 69       	ld.w	r9,r9[0x58]
8000adf8:	74 69       	ld.w	r9,r10[0x18]
8000adfa:	6f 6e       	ld.w	lr,r7[0x58]
8000adfc:	20 69       	sub	r9,6
8000adfe:	6e 69       	ld.w	r9,r7[0x18]
8000ae00:	74 69       	ld.w	r9,r10[0x18]
8000ae02:	61 6c       	ld.w	r12,r0[0x58]
8000ae04:	69 7a       	ld.w	r10,r4[0x5c]
8000ae06:	65 64       	ld.w	r4,r2[0x58]
8000ae08:	21 0a       	sub	r10,16
	...

8000ae0c <init_pos_gps>:

void init_pos_gps(position_estimator_t *pos_est, gps_Data_type *gps)
{
8000ae0c:	eb cd 40 c0 	pushm	r6-r7,lr
8000ae10:	1a 97       	mov	r7,sp
8000ae12:	20 3d       	sub	sp,12
8000ae14:	4d 16       	lddpc	r6,8000af58 <init_pos_gps+0x14c>
8000ae16:	1e 26       	rsub	r6,pc
8000ae18:	ef 4c ff f8 	st.w	r7[-8],r12
8000ae1c:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	
	if (newValidGpsMsg(&pos_est->timeLastGpsMsg) && (!(pos_est->init_gps_position)))
8000ae20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae24:	2e 08       	sub	r8,-32
8000ae26:	10 9c       	mov	r12,r8
8000ae28:	f0 16 00 98 	mcall	r6[608]
8000ae2c:	18 98       	mov	r8,r12
8000ae2e:	58 08       	cp.w	r8,0
8000ae30:	e0 80 00 91 	breq	8000af52 <init_pos_gps+0x146>
8000ae34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae38:	f1 38 00 28 	ld.ub	r8,r8[40]
8000ae3c:	ec 18 00 01 	eorl	r8,0x1
8000ae40:	5c 58       	castu.b	r8
8000ae42:	e0 80 00 88 	breq	8000af52 <init_pos_gps+0x146>
	{
		pos_est->init_gps_position = true;
8000ae46:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ae4a:	30 18       	mov	r8,1
8000ae4c:	f3 68 00 28 	st.b	r9[40],r8
		
		pos_est->localPosition.origin.longitude = gps->longitude;
8000ae50:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae54:	f0 e8 00 08 	ld.d	r8,r8[8]
8000ae58:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae5c:	f4 e9 00 70 	st.d	r10[112],r8
		pos_est->localPosition.origin.latitude = gps->latitude;
8000ae60:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae64:	f0 e8 00 00 	ld.d	r8,r8[0]
8000ae68:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ae6c:	f4 e9 00 78 	st.d	r10[120],r8
		pos_est->localPosition.origin.altitude = gps->altitude;
8000ae70:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae74:	70 49       	ld.w	r9,r8[0x10]
8000ae76:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae7a:	f1 49 00 80 	st.w	r8[128],r9
		pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000ae7e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ae82:	71 19       	ld.w	r9,r8[0x44]
8000ae84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae88:	f1 49 00 8c 	st.w	r8[140],r9

		pos_est->lastGpsPos=pos_est->localPosition;
8000ae8c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000ae90:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ae94:	f2 cb ff 70 	sub	r11,r9,-144
8000ae98:	f0 ca ff a0 	sub	r10,r8,-96
8000ae9c:	f6 c8 00 00 	sub	r8,r11,0
8000aea0:	f4 c9 00 00 	sub	r9,r10,0
8000aea4:	72 0c       	ld.w	r12,r9[0x0]
8000aea6:	91 0c       	st.w	r8[0x0],r12
8000aea8:	72 1c       	ld.w	r12,r9[0x4]
8000aeaa:	91 1c       	st.w	r8[0x4],r12
8000aeac:	72 2c       	ld.w	r12,r9[0x8]
8000aeae:	91 2c       	st.w	r8[0x8],r12
8000aeb0:	72 39       	ld.w	r9,r9[0xc]
8000aeb2:	91 39       	st.w	r8[0xc],r9
8000aeb4:	f6 c8 ff f0 	sub	r8,r11,-16
8000aeb8:	f4 c9 ff f0 	sub	r9,r10,-16
8000aebc:	72 0c       	ld.w	r12,r9[0x0]
8000aebe:	91 0c       	st.w	r8[0x0],r12
8000aec0:	72 1c       	ld.w	r12,r9[0x4]
8000aec2:	91 1c       	st.w	r8[0x4],r12
8000aec4:	72 2c       	ld.w	r12,r9[0x8]
8000aec6:	91 2c       	st.w	r8[0x8],r12
8000aec8:	72 39       	ld.w	r9,r9[0xc]
8000aeca:	91 39       	st.w	r8[0xc],r9
8000aecc:	f6 c8 ff e0 	sub	r8,r11,-32
8000aed0:	f4 c9 ff e0 	sub	r9,r10,-32
8000aed4:	72 0a       	ld.w	r10,r9[0x0]
8000aed6:	91 0a       	st.w	r8[0x0],r10
8000aed8:	72 1a       	ld.w	r10,r9[0x4]
8000aeda:	91 1a       	st.w	r8[0x4],r10
8000aedc:	72 2a       	ld.w	r10,r9[0x8]
8000aede:	91 2a       	st.w	r8[0x8],r10
8000aee0:	72 39       	ld.w	r9,r9[0xc]
8000aee2:	91 39       	st.w	r8[0xc],r9
		
		
		pos_est->last_alt=0;
8000aee4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aee8:	30 09       	mov	r9,0
8000aeea:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000aeee:	30 08       	mov	r8,0
8000aef0:	ef 48 ff fc 	st.w	r7[-4],r8
8000aef4:	c2 68       	rjmp	8000af40 <init_pos_gps+0x134>
		{
			pos_est->pos_correction[i]=0.0;
8000aef6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000aefa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000aefe:	2e f9       	sub	r9,-17
8000af00:	30 0a       	mov	r10,0
8000af02:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000af06:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af0e:	2e b9       	sub	r9,-21
8000af10:	30 0a       	mov	r10,0
8000af12:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000af16:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af1e:	2e 89       	sub	r9,-24
8000af20:	30 0a       	mov	r10,0
8000af22:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000af26:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000af2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000af2e:	2f 29       	sub	r9,-14
8000af30:	30 0a       	mov	r10,0
8000af32:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		pos_est->lastGpsPos=pos_est->localPosition;
		
		
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000af36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af3a:	2f f8       	sub	r8,-1
8000af3c:	ef 48 ff fc 	st.w	r7[-4],r8
8000af40:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000af44:	58 28       	cp.w	r8,2
8000af46:	fe 9a ff d8 	brle	8000aef6 <init_pos_gps+0xea>
			pos_est->last_vel[i]=0.0;
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}
		
		dbg_print("GPS position initialized!\n");
8000af4a:	fe cc 01 5a 	sub	r12,pc,346
8000af4e:	f0 16 00 01 	mcall	r6[4]
	}
}
8000af52:	2f dd       	sub	sp,-12
8000af54:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000af58:	80 00       	ld.sh	r0,r0[0x0]
8000af5a:	ac 9a       	st.b	r6[0x1],r10
8000af5c:	4f 66       	lddpc	r6,8000b134 <position_reset_home_altitude+0xac>
8000af5e:	66 73       	ld.w	r3,r3[0x1c]
8000af60:	65 74       	ld.w	r4,r2[0x5c]
8000af62:	20 6f       	sub	pc,6
8000af64:	66 20       	ld.w	r0,r3[0x8]
8000af66:	74 68       	ld.w	r8,r10[0x18]
8000af68:	65 20       	ld.w	r0,r2[0x48]
8000af6a:	62 61       	ld.w	r1,r1[0x18]
8000af6c:	72 6f       	ld.w	pc,r9[0x18]
8000af6e:	6d 65       	ld.w	r5,r6[0x58]
8000af70:	74 65       	ld.w	r5,r10[0x18]
8000af72:	72 20       	ld.w	r0,r9[0x8]
8000af74:	73 65       	ld.w	r5,r9[0x58]
8000af76:	74 20       	ld.w	r0,r10[0x8]
8000af78:	74 6f       	ld.w	pc,r10[0x18]
8000af7a:	20 74       	sub	r4,7
8000af7c:	68 65       	ld.w	r5,r4[0x18]
8000af7e:	20 47       	sub	r7,4
8000af80:	50 53       	stdsp	sp[0x14],r3
8000af82:	20 61       	sub	r1,6
8000af84:	6c 74       	ld.w	r4,r6[0x1c]
8000af86:	69 74       	ld.w	r4,r4[0x5c]
8000af88:	75 64       	ld.w	r4,r10[0x58]
8000af8a:	65 2c       	ld.w	r12,r2[0x48]
8000af8c:	20 6f       	sub	pc,6
8000af8e:	66 66       	ld.w	r6,r3[0x18]
8000af90:	73 65       	ld.w	r5,r9[0x58]
8000af92:	74 20       	ld.w	r0,r10[0x8]
8000af94:	76 61       	ld.w	r1,r11[0x18]
8000af96:	6c 75       	ld.w	r5,r6[0x1c]
8000af98:	65 20       	ld.w	r0,r2[0x48]
8000af9a:	6f 66       	ld.w	r6,r7[0x58]
8000af9c:	3a 00       	mov	r0,-96
8000af9e:	00 00       	add	r0,r0
8000afa0:	20 3d       	sub	sp,12
8000afa2:	20 2d       	sub	sp,8
8000afa4:	00 00       	add	r0,r0
8000afa6:	00 00       	add	r0,r0
8000afa8:	20 2d       	sub	sp,8
8000afaa:	20 00       	sub	r0,0
8000afac:	20 2b       	sub	r11,2
8000afae:	20 00       	sub	r0,0
8000afb0:	0a 00       	add	r0,r5

8000afb2 <init_barometer_offset>:

void init_barometer_offset(position_estimator_t *pos_est, pressure_data *barometer)
{
8000afb2:	eb cd 40 c0 	pushm	r6-r7,lr
8000afb6:	1a 97       	mov	r7,sp
8000afb8:	20 3d       	sub	sp,12
8000afba:	4b 36       	lddpc	r6,8000b084 <init_barometer_offset+0xd2>
8000afbc:	1e 26       	rsub	r6,pc
8000afbe:	ef 4c ff f8 	st.w	r7[-8],r12
8000afc2:	ef 4b ff f4 	st.w	r7[-12],r11
	bool boolNewBaro = newValidBarometer(&pos_est->timeLastBarometerMsg);
8000afc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afca:	2d c8       	sub	r8,-36
8000afcc:	10 9c       	mov	r12,r8
8000afce:	f0 16 00 ec 	mcall	r6[944]
8000afd2:	18 98       	mov	r8,r12
8000afd4:	ef 68 ff ff 	st.b	r7[-1],r8

		
	//if ((centralData->init_gps_position)&&(boolNewBaro))
	if ((boolNewBaro))
8000afd8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8000afdc:	30 08       	mov	r8,0
8000afde:	f0 09 18 00 	cp.b	r9,r8
8000afe2:	c4 e0       	breq	8000b07e <init_barometer_offset+0xcc>
	{
		
		barometer->altitude_offset = -(barometer->altitude - pos_est->localPosition.origin.altitude);
8000afe4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000afe8:	70 79       	ld.w	r9,r8[0x1c]
8000afea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000afee:	f0 f8 00 80 	ld.w	r8,r8[128]
8000aff2:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000aff6:	10 99       	mov	r9,r8
8000aff8:	ee 19 80 00 	eorh	r9,0x8000
8000affc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b000:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000b002:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b006:	30 18       	mov	r8,1
8000b008:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b00c:	fe cc 00 b0 	sub	r12,pc,176
8000b010:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b014:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b018:	70 88       	ld.w	r8,r8[0x20]
8000b01a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b01e:	30 ab       	mov	r11,10
8000b020:	10 9c       	mov	r12,r8
8000b022:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b026:	fe cc 00 86 	sub	r12,pc,134
8000b02a:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b02e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b032:	70 78       	ld.w	r8,r8[0x1c]
8000b034:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b038:	30 ab       	mov	r11,10
8000b03a:	10 9c       	mov	r12,r8
8000b03c:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b040:	fe cc 00 98 	sub	r12,pc,152
8000b044:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b04c:	71 a8       	ld.w	r8,r8[0x68]
8000b04e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b052:	30 ab       	mov	r11,10
8000b054:	10 9c       	mov	r12,r8
8000b056:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b05a:	fe cc 00 ae 	sub	r12,pc,174
8000b05e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b062:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b066:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b06a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b06e:	30 ab       	mov	r11,10
8000b070:	10 9c       	mov	r12,r8
8000b072:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b076:	fe cc 00 c6 	sub	r12,pc,198
8000b07a:	f0 16 00 01 	mcall	r6[4]
	}
}
8000b07e:	2f dd       	sub	sp,-12
8000b080:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b084:	80 00       	ld.sh	r0,r0[0x0]
8000b086:	ae 40       	st.h	r7[0x8],r0

8000b088 <position_reset_home_altitude>:

void position_reset_home_altitude(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps) {
8000b088:	eb cd 40 c0 	pushm	r6-r7,lr
8000b08c:	1a 97       	mov	r7,sp
8000b08e:	20 4d       	sub	sp,16
8000b090:	4f 06       	lddpc	r6,8000b250 <position_reset_home_altitude+0x1c8>
8000b092:	1e 26       	rsub	r6,pc
8000b094:	ef 4c ff f8 	st.w	r7[-8],r12
8000b098:	ef 4b ff f4 	st.w	r7[-12],r11
8000b09c:	ef 4a ff f0 	st.w	r7[-16],r10
		int i;
		// reset origin to position where quad is armed if we have GPS
		if (pos_est->init_gps_position) {
8000b0a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0a4:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b0a8:	58 08       	cp.w	r8,0
8000b0aa:	c4 b0       	breq	8000b140 <position_reset_home_altitude+0xb8>
			pos_est->localPosition.origin.longitude = gps->longitude;
8000b0ac:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0b0:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b0b4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b0b8:	f4 e9 00 70 	st.d	r10[112],r8
			pos_est->localPosition.origin.latitude = gps->latitude;
8000b0bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0c0:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b0c4:	ee fa ff f8 	ld.w	r10,r7[-8]
8000b0c8:	f4 e9 00 78 	st.d	r10[120],r8
			pos_est->localPosition.origin.altitude = gps->altitude;
8000b0cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0d0:	70 49       	ld.w	r9,r8[0x10]
8000b0d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0d6:	f1 49 00 80 	st.w	r8[128],r9
			pos_est->localPosition.timestamp_ms=gps->timeLastMsg;
8000b0da:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000b0de:	71 19       	ld.w	r9,r8[0x44]
8000b0e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0e4:	f1 49 00 8c 	st.w	r8[140],r9

			pos_est->lastGpsPos=pos_est->localPosition;
8000b0e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b0ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b0f0:	f2 cb ff 70 	sub	r11,r9,-144
8000b0f4:	f0 ca ff a0 	sub	r10,r8,-96
8000b0f8:	f6 c8 00 00 	sub	r8,r11,0
8000b0fc:	f4 c9 00 00 	sub	r9,r10,0
8000b100:	72 0c       	ld.w	r12,r9[0x0]
8000b102:	91 0c       	st.w	r8[0x0],r12
8000b104:	72 1c       	ld.w	r12,r9[0x4]
8000b106:	91 1c       	st.w	r8[0x4],r12
8000b108:	72 2c       	ld.w	r12,r9[0x8]
8000b10a:	91 2c       	st.w	r8[0x8],r12
8000b10c:	72 39       	ld.w	r9,r9[0xc]
8000b10e:	91 39       	st.w	r8[0xc],r9
8000b110:	f6 c8 ff f0 	sub	r8,r11,-16
8000b114:	f4 c9 ff f0 	sub	r9,r10,-16
8000b118:	72 0c       	ld.w	r12,r9[0x0]
8000b11a:	91 0c       	st.w	r8[0x0],r12
8000b11c:	72 1c       	ld.w	r12,r9[0x4]
8000b11e:	91 1c       	st.w	r8[0x4],r12
8000b120:	72 2c       	ld.w	r12,r9[0x8]
8000b122:	91 2c       	st.w	r8[0x8],r12
8000b124:	72 39       	ld.w	r9,r9[0xc]
8000b126:	91 39       	st.w	r8[0xc],r9
8000b128:	f6 c8 ff e0 	sub	r8,r11,-32
8000b12c:	f4 c9 ff e0 	sub	r9,r10,-32
8000b130:	72 0a       	ld.w	r10,r9[0x0]
8000b132:	91 0a       	st.w	r8[0x0],r10
8000b134:	72 1a       	ld.w	r10,r9[0x4]
8000b136:	91 1a       	st.w	r8[0x4],r10
8000b138:	72 2a       	ld.w	r10,r9[0x8]
8000b13a:	91 2a       	st.w	r8[0x8],r10
8000b13c:	72 39       	ld.w	r9,r9[0xc]
8000b13e:	91 39       	st.w	r8[0xc],r9
		}
		// reset barometer offset
		barometer->altitude_offset = -(barometer->altitude - barometer->altitude_offset - pos_est->localPosition.origin.altitude);
8000b140:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b144:	70 79       	ld.w	r9,r8[0x1c]
8000b146:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b14a:	70 88       	ld.w	r8,r8[0x20]
8000b14c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b150:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b154:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b158:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b15c:	10 99       	mov	r9,r8
8000b15e:	ee 19 80 00 	eorh	r9,0x8000
8000b162:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b166:	91 89       	st.w	r8[0x20],r9
		//barometer->altitude_offset = -barometer->altitude - pos_est->localPosition.pos[2] + pos_est->localPosition.origin.altitude;
		pos_est->init_barometer = true;
8000b168:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000b16c:	30 18       	mov	r8,1
8000b16e:	f3 68 00 29 	st.b	r9[41],r8
		
		dbg_print("Offset of the barometer set to the GPS altitude, offset value of:");
8000b172:	fe cc 02 16 	sub	r12,pc,534
8000b176:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude_offset,10);
8000b17a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b17e:	70 88       	ld.w	r8,r8[0x20]
8000b180:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b184:	30 ab       	mov	r11,10
8000b186:	10 9c       	mov	r12,r8
8000b188:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" = -");
8000b18c:	fe cc 01 ec 	sub	r12,pc,492
8000b190:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(barometer->altitude,10);
8000b194:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000b198:	70 78       	ld.w	r8,r8[0x1c]
8000b19a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b19e:	30 ab       	mov	r11,10
8000b1a0:	10 9c       	mov	r12,r8
8000b1a2:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" - ");
8000b1a6:	fe cc 01 fe 	sub	r12,pc,510
8000b1aa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.pos[2],10);
8000b1ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1b2:	71 a8       	ld.w	r8,r8[0x68]
8000b1b4:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1b8:	30 ab       	mov	r11,10
8000b1ba:	10 9c       	mov	r12,r8
8000b1bc:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" + ");
8000b1c0:	fe cc 02 14 	sub	r12,pc,532
8000b1c4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
8000b1c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1cc:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b1d0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000b1d4:	30 ab       	mov	r11,10
8000b1d6:	10 9c       	mov	r12,r8
8000b1d8:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8000b1dc:	fe cc 02 2c 	sub	r12,pc,556
8000b1e0:	f0 16 00 01 	mcall	r6[4]

		// reset position estimator
		pos_est->last_alt=0;
8000b1e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1e8:	30 09       	mov	r9,0
8000b1ea:	f1 49 00 50 	st.w	r8[80],r9
		for(i=0;i<3;i++)
8000b1ee:	30 08       	mov	r8,0
8000b1f0:	ef 48 ff fc 	st.w	r7[-4],r8
8000b1f4:	c2 68       	rjmp	8000b240 <position_reset_home_altitude+0x1b8>
		{
			pos_est->pos_correction[i]=0.0;
8000b1f6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b1fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b1fe:	2e f9       	sub	r9,-17
8000b200:	30 0a       	mov	r10,0
8000b202:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->last_vel[i]=0.0;
8000b206:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b20a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b20e:	2e b9       	sub	r9,-21
8000b210:	30 0a       	mov	r10,0
8000b212:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->localPosition.pos[i] = 0.0;
8000b216:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b21a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b21e:	2e 89       	sub	r9,-24
8000b220:	30 0a       	mov	r10,0
8000b222:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pos_est->vel[i]=0.0;
8000b226:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b22a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000b22e:	2f 29       	sub	r9,-14
8000b230:	30 0a       	mov	r10,0
8000b232:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		dbg_print_num(pos_est->localPosition.origin.altitude,10);
		dbg_print("\n");

		// reset position estimator
		pos_est->last_alt=0;
		for(i=0;i<3;i++)
8000b236:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b23a:	2f f8       	sub	r8,-1
8000b23c:	ef 48 ff fc 	st.w	r7[-4],r8
8000b240:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b244:	58 28       	cp.w	r8,2
8000b246:	fe 9a ff d8 	brle	8000b1f6 <position_reset_home_altitude+0x16e>
			pos_est->localPosition.pos[i] = 0.0;
			pos_est->vel[i]=0.0;
		}

	
}
8000b24a:	2f cd       	sub	sp,-16
8000b24c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000b250:	80 00       	ld.sh	r0,r0[0x0]
8000b252:	af 16       	ld.d	r6,--r7

8000b254 <position_integration>:

void position_integration(position_estimator_t *pos_est, Quat_Attitude_t *attitude, float dt)
{
8000b254:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000b258:	1a 97       	mov	r7,sp
8000b25a:	21 fd       	sub	sp,124
8000b25c:	fe f6 03 64 	ld.w	r6,pc[868]
8000b260:	1e 26       	rsub	r6,pc
8000b262:	ef 4c ff 9c 	st.w	r7[-100],r12
8000b266:	ef 4b ff 98 	st.w	r7[-104],r11
8000b26a:	ef 4a ff 94 	st.w	r7[-108],r10
	int i;
	
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
8000b26e:	30 08       	mov	r8,0
8000b270:	ef 48 ff dc 	st.w	r7[-36],r8
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
8000b274:	30 08       	mov	r8,0
8000b276:	ef 48 ff fc 	st.w	r7[-4],r8
8000b27a:	c1 58       	rjmp	8000b2a4 <position_integration+0x50>
8000b27c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b280:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b284:	ee f9 ff 9c 	ld.w	r9,r7[-100]
8000b288:	2f 2a       	sub	r10,-14
8000b28a:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8000b28e:	2f f8       	sub	r8,-1
8000b290:	a3 68       	lsl	r8,0x2
8000b292:	ee 08 00 08 	add	r8,r7,r8
8000b296:	f1 49 ff dc 	st.w	r8[-36],r9
8000b29a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b29e:	2f f8       	sub	r8,-1
8000b2a0:	ef 48 ff fc 	st.w	r7[-4],r8
8000b2a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b2a8:	58 28       	cp.w	r8,2
8000b2aa:	fe 9a ff e9 	brle	8000b27c <position_integration+0x28>
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
8000b2ae:	ee ca 00 7c 	sub	r10,r7,124
8000b2b2:	20 4d       	sub	sp,16
8000b2b4:	1a 98       	mov	r8,sp
8000b2b6:	ee c9 00 24 	sub	r9,r7,36
8000b2ba:	20 08       	sub	r8,0
8000b2bc:	20 09       	sub	r9,0
8000b2be:	72 0b       	ld.w	r11,r9[0x0]
8000b2c0:	91 0b       	st.w	r8[0x0],r11
8000b2c2:	72 1b       	ld.w	r11,r9[0x4]
8000b2c4:	91 1b       	st.w	r8[0x4],r11
8000b2c6:	72 2b       	ld.w	r11,r9[0x8]
8000b2c8:	91 2b       	st.w	r8[0x8],r11
8000b2ca:	72 39       	ld.w	r9,r9[0xc]
8000b2cc:	91 39       	st.w	r8[0xc],r9
8000b2ce:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b2d2:	20 4d       	sub	sp,16
8000b2d4:	1a 98       	mov	r8,sp
8000b2d6:	20 08       	sub	r8,0
8000b2d8:	20 09       	sub	r9,0
8000b2da:	72 0b       	ld.w	r11,r9[0x0]
8000b2dc:	91 0b       	st.w	r8[0x0],r11
8000b2de:	72 1b       	ld.w	r11,r9[0x4]
8000b2e0:	91 1b       	st.w	r8[0x4],r11
8000b2e2:	72 2b       	ld.w	r11,r9[0x8]
8000b2e4:	91 2b       	st.w	r8[0x8],r11
8000b2e6:	72 39       	ld.w	r9,r9[0xc]
8000b2e8:	91 39       	st.w	r8[0xc],r9
8000b2ea:	14 9c       	mov	r12,r10
8000b2ec:	fe b0 fc 34 	rcall	8000ab54 <quat_global_to_local>
8000b2f0:	2f 8d       	sub	sp,-32
8000b2f2:	ee c8 00 14 	sub	r8,r7,20
8000b2f6:	ee c9 00 7c 	sub	r9,r7,124
8000b2fa:	20 08       	sub	r8,0
8000b2fc:	20 09       	sub	r9,0
8000b2fe:	72 0a       	ld.w	r10,r9[0x0]
8000b300:	91 0a       	st.w	r8[0x0],r10
8000b302:	72 1a       	ld.w	r10,r9[0x4]
8000b304:	91 1a       	st.w	r8[0x4],r10
8000b306:	72 2a       	ld.w	r10,r9[0x8]
8000b308:	91 2a       	st.w	r8[0x8],r10
8000b30a:	72 39       	ld.w	r9,r9[0xc]
8000b30c:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8000b30e:	30 08       	mov	r8,0
8000b310:	ef 48 ff fc 	st.w	r7[-4],r8
8000b314:	c8 c8       	rjmp	8000b42c <position_integration+0x1d8>
		pos_est->vel_bf[i]=qvel_bf.v[i];
8000b316:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b31a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b31e:	2f f8       	sub	r8,-1
8000b320:	a3 68       	lsl	r8,0x2
8000b322:	ee 08 00 08 	add	r8,r7,r8
8000b326:	f0 fa ff ec 	ld.w	r10,r8[-20]
8000b32a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b32e:	2f 59       	sub	r9,-11
8000b330:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		// clean acceleration estimate without gravity:
		attitude->acc_bf[i]=GRAVITY * (attitude->a[i] - attitude->up_vec.v[i]) ;
8000b334:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b338:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b33c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b340:	2d f9       	sub	r9,-33
8000b342:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b346:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b34a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b34e:	2f ba       	sub	r10,-5
8000b350:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b354:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b358:	10 9c       	mov	r12,r8
8000b35a:	f0 16 00 02 	mcall	r6[8]
8000b35e:	e0 68 85 1f 	mov	r8,34079
8000b362:	ea 18 51 eb 	orh	r8,0x51eb
8000b366:	e0 69 9e b8 	mov	r9,40632
8000b36a:	ea 19 40 23 	orh	r9,0x4023
8000b36e:	f0 16 00 03 	mcall	r6[12]
8000b372:	14 98       	mov	r8,r10
8000b374:	16 99       	mov	r9,r11
8000b376:	10 9a       	mov	r10,r8
8000b378:	12 9b       	mov	r11,r9
8000b37a:	f0 16 00 08 	mcall	r6[32]
8000b37e:	18 9a       	mov	r10,r12
8000b380:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b384:	ea c9 ff d0 	sub	r9,r5,-48
8000b388:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
8000b38c:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b390:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b394:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b398:	2f 59       	sub	r9,-11
8000b39a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b39e:	10 9c       	mov	r12,r8
8000b3a0:	f0 16 00 02 	mcall	r6[8]
8000b3a4:	14 92       	mov	r2,r10
8000b3a6:	16 93       	mov	r3,r11
8000b3a8:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b3ac:	f0 16 00 02 	mcall	r6[8]
8000b3b0:	30 08       	mov	r8,0
8000b3b2:	fc 19 80 00 	movh	r9,0x8000
8000b3b6:	f0 16 00 03 	mcall	r6[12]
8000b3ba:	14 98       	mov	r8,r10
8000b3bc:	16 99       	mov	r9,r11
8000b3be:	10 9a       	mov	r10,r8
8000b3c0:	12 9b       	mov	r11,r9
8000b3c2:	30 08       	mov	r8,0
8000b3c4:	fc 19 3f f0 	movh	r9,0x3ff0
8000b3c8:	f0 16 00 05 	mcall	r6[20]
8000b3cc:	14 98       	mov	r8,r10
8000b3ce:	16 99       	mov	r9,r11
8000b3d0:	04 9a       	mov	r10,r2
8000b3d2:	06 9b       	mov	r11,r3
8000b3d4:	f0 16 00 03 	mcall	r6[12]
8000b3d8:	14 98       	mov	r8,r10
8000b3da:	16 99       	mov	r9,r11
8000b3dc:	10 92       	mov	r2,r8
8000b3de:	12 93       	mov	r3,r9
8000b3e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b3e4:	ee f8 ff 98 	ld.w	r8,r7[-104]
8000b3e8:	2d 09       	sub	r9,-48
8000b3ea:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b3ee:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b3f2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b3f6:	10 9c       	mov	r12,r8
8000b3f8:	f0 16 00 02 	mcall	r6[8]
8000b3fc:	14 98       	mov	r8,r10
8000b3fe:	16 99       	mov	r9,r11
8000b400:	04 9a       	mov	r10,r2
8000b402:	06 9b       	mov	r11,r3
8000b404:	f0 16 00 05 	mcall	r6[20]
8000b408:	14 98       	mov	r8,r10
8000b40a:	16 99       	mov	r9,r11
8000b40c:	10 9a       	mov	r10,r8
8000b40e:	12 9b       	mov	r11,r9
8000b410:	f0 16 00 08 	mcall	r6[32]
8000b414:	18 9a       	mov	r10,r12
8000b416:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b41a:	ea c9 ff f5 	sub	r9,r5,-11
8000b41e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t qvel_bf,qvel, qtmp1, qtmp2, qtmp3;
	float tmp[3];
	qvel.s=0;
	for (i=0; i<3; i++) qvel.v[i]=pos_est->vel[i];
	qvel_bf=quat_global_to_local(attitude->qe, qvel);
	for (i=0; i<3; i++) {
8000b422:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b426:	2f f8       	sub	r8,-1
8000b428:	ef 48 ff fc 	st.w	r7[-4],r8
8000b42c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b430:	58 28       	cp.w	r8,2
8000b432:	fe 9a ff 72 	brle	8000b316 <position_integration+0xc2>
		pos_est->vel_bf[i]=pos_est->vel_bf[i]*(1.0-(VEL_DECAY*dt)) + attitude->acc_bf[i]  * dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=pos_est->vel_bf[0]; qvel_bf.v[1]=pos_est->vel_bf[1]; qvel_bf.v[2]=pos_est->vel_bf[2];
8000b436:	30 08       	mov	r8,0
8000b438:	ef 48 ff ec 	st.w	r7[-20],r8
8000b43c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b440:	70 b8       	ld.w	r8,r8[0x2c]
8000b442:	ef 48 ff f0 	st.w	r7[-16],r8
8000b446:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b44a:	70 c8       	ld.w	r8,r8[0x30]
8000b44c:	ef 48 ff f4 	st.w	r7[-12],r8
8000b450:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b454:	70 d8       	ld.w	r8,r8[0x34]
8000b456:	ef 48 ff f8 	st.w	r7[-8],r8
	qvel = quat_local_to_global(attitude->qe, qvel_bf);
8000b45a:	ee ca 00 7c 	sub	r10,r7,124
8000b45e:	20 4d       	sub	sp,16
8000b460:	1a 98       	mov	r8,sp
8000b462:	ee c9 00 14 	sub	r9,r7,20
8000b466:	20 08       	sub	r8,0
8000b468:	20 09       	sub	r9,0
8000b46a:	72 0b       	ld.w	r11,r9[0x0]
8000b46c:	91 0b       	st.w	r8[0x0],r11
8000b46e:	72 1b       	ld.w	r11,r9[0x4]
8000b470:	91 1b       	st.w	r8[0x4],r11
8000b472:	72 2b       	ld.w	r11,r9[0x8]
8000b474:	91 2b       	st.w	r8[0x8],r11
8000b476:	72 39       	ld.w	r9,r9[0xc]
8000b478:	91 39       	st.w	r8[0xc],r9
8000b47a:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b47e:	20 4d       	sub	sp,16
8000b480:	1a 98       	mov	r8,sp
8000b482:	20 08       	sub	r8,0
8000b484:	20 09       	sub	r9,0
8000b486:	72 0b       	ld.w	r11,r9[0x0]
8000b488:	91 0b       	st.w	r8[0x0],r11
8000b48a:	72 1b       	ld.w	r11,r9[0x4]
8000b48c:	91 1b       	st.w	r8[0x4],r11
8000b48e:	72 2b       	ld.w	r11,r9[0x8]
8000b490:	91 2b       	st.w	r8[0x8],r11
8000b492:	72 39       	ld.w	r9,r9[0xc]
8000b494:	91 39       	st.w	r8[0xc],r9
8000b496:	14 9c       	mov	r12,r10
8000b498:	fe b0 fb dc 	rcall	8000ac50 <quat_local_to_global>
8000b49c:	2f 8d       	sub	sp,-32
8000b49e:	ee c8 00 24 	sub	r8,r7,36
8000b4a2:	ee c9 00 7c 	sub	r9,r7,124
8000b4a6:	20 08       	sub	r8,0
8000b4a8:	20 09       	sub	r9,0
8000b4aa:	72 0a       	ld.w	r10,r9[0x0]
8000b4ac:	91 0a       	st.w	r8[0x0],r10
8000b4ae:	72 1a       	ld.w	r10,r9[0x4]
8000b4b0:	91 1a       	st.w	r8[0x4],r10
8000b4b2:	72 2a       	ld.w	r10,r9[0x8]
8000b4b4:	91 2a       	st.w	r8[0x8],r10
8000b4b6:	72 39       	ld.w	r9,r9[0xc]
8000b4b8:	91 39       	st.w	r8[0xc],r9
	pos_est->vel[0]=qvel.v[0]; pos_est->vel[1]=qvel.v[1]; pos_est->vel[2]=qvel.v[2];
8000b4ba:	ee f9 ff e0 	ld.w	r9,r7[-32]
8000b4be:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4c2:	91 e9       	st.w	r8[0x38],r9
8000b4c4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8000b4c8:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4cc:	91 f9       	st.w	r8[0x3c],r9
8000b4ce:	ee f9 ff e8 	ld.w	r9,r7[-24]
8000b4d2:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4d6:	f1 49 00 40 	st.w	r8[64],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b4da:	30 08       	mov	r8,0
8000b4dc:	ef 48 ff fc 	st.w	r7[-4],r8
8000b4e0:	c6 78       	rjmp	8000b5ae <position_integration+0x35a>
		// clean position estimate without gravity:
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
8000b4e2:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b4e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b4ea:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b4ee:	2e 89       	sub	r9,-24
8000b4f0:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000b4f4:	10 9c       	mov	r12,r8
8000b4f6:	f0 16 00 02 	mcall	r6[8]
8000b4fa:	14 92       	mov	r2,r10
8000b4fc:	16 93       	mov	r3,r11
8000b4fe:	ee fc ff 94 	ld.w	r12,r7[-108]
8000b502:	f0 16 00 02 	mcall	r6[8]
8000b506:	30 08       	mov	r8,0
8000b508:	fc 19 80 00 	movh	r9,0x8000
8000b50c:	f0 16 00 03 	mcall	r6[12]
8000b510:	14 98       	mov	r8,r10
8000b512:	16 99       	mov	r9,r11
8000b514:	10 9a       	mov	r10,r8
8000b516:	12 9b       	mov	r11,r9
8000b518:	30 08       	mov	r8,0
8000b51a:	fc 19 3f f0 	movh	r9,0x3ff0
8000b51e:	f0 16 00 05 	mcall	r6[20]
8000b522:	14 98       	mov	r8,r10
8000b524:	16 99       	mov	r9,r11
8000b526:	04 9a       	mov	r10,r2
8000b528:	06 9b       	mov	r11,r3
8000b52a:	f0 16 00 03 	mcall	r6[12]
8000b52e:	14 98       	mov	r8,r10
8000b530:	16 99       	mov	r9,r11
8000b532:	10 92       	mov	r2,r8
8000b534:	12 93       	mov	r3,r9
8000b536:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000b53a:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b53e:	2f 29       	sub	r9,-14
8000b540:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000b544:	ee f8 ff 94 	ld.w	r8,r7[-108]
8000b548:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000b54c:	10 9c       	mov	r12,r8
8000b54e:	f0 16 00 02 	mcall	r6[8]
8000b552:	14 98       	mov	r8,r10
8000b554:	16 99       	mov	r9,r11
8000b556:	04 9a       	mov	r10,r2
8000b558:	06 9b       	mov	r11,r3
8000b55a:	f0 16 00 05 	mcall	r6[20]
8000b55e:	14 98       	mov	r8,r10
8000b560:	16 99       	mov	r9,r11
8000b562:	10 9a       	mov	r10,r8
8000b564:	12 9b       	mov	r11,r9
8000b566:	f0 16 00 08 	mcall	r6[32]
8000b56a:	18 9a       	mov	r10,r12
8000b56c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b570:	ea c9 ff e8 	sub	r9,r5,-24
8000b574:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		pos_est->localPosition.heading=get_yaw(attitude->qe);
8000b578:	ee f9 ff 98 	ld.w	r9,r7[-104]
8000b57c:	20 4d       	sub	sp,16
8000b57e:	1a 98       	mov	r8,sp
8000b580:	20 08       	sub	r8,0
8000b582:	20 09       	sub	r9,0
8000b584:	72 0a       	ld.w	r10,r9[0x0]
8000b586:	91 0a       	st.w	r8[0x0],r10
8000b588:	72 1a       	ld.w	r10,r9[0x4]
8000b58a:	91 1a       	st.w	r8[0x4],r10
8000b58c:	72 2a       	ld.w	r10,r9[0x8]
8000b58e:	91 2a       	st.w	r8[0x8],r10
8000b590:	72 39       	ld.w	r9,r9[0xc]
8000b592:	91 39       	st.w	r8[0xc],r9
8000b594:	f0 16 01 1a 	mcall	r6[1128]
8000b598:	2f cd       	sub	sp,-16
8000b59a:	18 99       	mov	r9,r12
8000b59c:	ee f8 ff 9c 	ld.w	r8,r7[-100]
8000b5a0:	f1 49 00 6c 	st.w	r8[108],r9
	//QMUL(attitude->qe, qtmp1, qtmp2);
	//QI(attitude->qe, qtmp1);
	//QMUL(qtmp2, qtmp1, qtmp3);
	//attitude->vel[0]=qtmp3.v[0]; attitude->vel[1]=qtmp3.v[1]; attitude->vel[2]=qtmp3.v[2];
	
	for (i=0; i<3; i++) {
8000b5a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5a8:	2f f8       	sub	r8,-1
8000b5aa:	ef 48 ff fc 	st.w	r7[-4],r8
8000b5ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b5b2:	58 28       	cp.w	r8,2
8000b5b4:	fe 9a ff 97 	brle	8000b4e2 <position_integration+0x28e>
		//prev_pos[i]=attitude->localPosition.pos[i];
		pos_est->localPosition.pos[i] =pos_est->localPosition.pos[i]*(1.0-(POS_DECAY*dt)) + pos_est->vel[i] *dt;
		pos_est->localPosition.heading=get_yaw(attitude->qe);
	}

}
8000b5b8:	2e 1d       	sub	sp,-124
8000b5ba:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000b5be:	00 00       	add	r0,r0
8000b5c0:	80 00       	ld.sh	r0,r0[0x0]
8000b5c2:	b0 e4       	st.b	r8[0x6],r4
8000b5c4:	47 50       	lddsp	r0,sp[0x1d4]
8000b5c6:	53 20       	stdsp	sp[0xc8],r0
8000b5c8:	64 74       	ld.w	r4,r2[0x1c]
8000b5ca:	20 69       	sub	r9,6
8000b5cc:	73 20       	ld.w	r0,r9[0x48]
8000b5ce:	74 6f       	ld.w	pc,r10[0x18]
8000b5d0:	6f 20       	ld.w	r0,r7[0x48]
8000b5d2:	73 6d       	ld.w	sp,r9[0x58]
8000b5d4:	61 6c       	ld.w	r12,r0[0x58]
8000b5d6:	6c 21       	ld.w	r1,r6[0x8]
	...

8000b5da <position_correction>:
	
void position_correction(position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps, float dt)
{
8000b5da:	eb cd 40 e0 	pushm	r5-r7,lr
8000b5de:	1a 97       	mov	r7,sp
8000b5e0:	fa cd 00 e4 	sub	sp,sp,228
8000b5e4:	fe f6 06 7c 	ld.w	r6,pc[1660]
8000b5e8:	1e 26       	rsub	r6,pc
8000b5ea:	ef 4c ff 58 	st.w	r7[-168],r12
8000b5ee:	ef 4b ff 54 	st.w	r7[-172],r11
8000b5f2:	ef 4a ff 50 	st.w	r7[-176],r10
8000b5f6:	ef 49 ff 4c 	st.w	r7[-180],r9
	global_position_t global_gps_position;
	local_coordinates_t local_coordinates;
	
	UQuat_t bias_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b5fa:	30 08       	mov	r8,0
8000b5fc:	ef 48 ff 84 	st.w	r7[-124],r8
8000b600:	30 08       	mov	r8,0
8000b602:	ef 48 ff 88 	st.w	r7[-120],r8
8000b606:	30 08       	mov	r8,0
8000b608:	ef 48 ff 8c 	st.w	r7[-116],r8
8000b60c:	fc 18 3f 80 	movh	r8,0x3f80
8000b610:	ef 48 ff 90 	st.w	r7[-112],r8
	UQuat_t vel_correction ={.s=0, .v={0.0, 0.0, 1.0}};
8000b614:	30 08       	mov	r8,0
8000b616:	ef 48 ff 74 	st.w	r7[-140],r8
8000b61a:	30 08       	mov	r8,0
8000b61c:	ef 48 ff 78 	st.w	r7[-136],r8
8000b620:	30 08       	mov	r8,0
8000b622:	ef 48 ff 7c 	st.w	r7[-132],r8
8000b626:	fc 18 3f 80 	movh	r8,0x3f80
8000b62a:	ef 48 ff 80 	st.w	r7[-128],r8
	float pos_error[3]= {0.0,0.0,0.0};
8000b62e:	30 08       	mov	r8,0
8000b630:	ef 48 ff 68 	st.w	r7[-152],r8
8000b634:	30 08       	mov	r8,0
8000b636:	ef 48 ff 6c 	st.w	r7[-148],r8
8000b63a:	30 08       	mov	r8,0
8000b63c:	ef 48 ff 70 	st.w	r7[-144],r8
	float baro_alt_error=0.0;
8000b640:	30 08       	mov	r8,0
8000b642:	ef 48 ff e0 	st.w	r7[-32],r8
	float baro_vel_error=0.0;
8000b646:	30 08       	mov	r8,0
8000b648:	ef 48 ff e4 	st.w	r7[-28],r8
	float baro_gain=0.0;
8000b64c:	30 08       	mov	r8,0
8000b64e:	ef 48 ff e8 	st.w	r7[-24],r8
	float gps_gain=0.0;
8000b652:	30 08       	mov	r8,0
8000b654:	ef 48 ff ec 	st.w	r7[-20],r8
	float gps_dt=0.0;
8000b658:	30 08       	mov	r8,0
8000b65a:	ef 48 ff f0 	st.w	r7[-16],r8
	float vel_error[3]={0.0,0.0,0.0};
8000b65e:	30 08       	mov	r8,0
8000b660:	ef 48 ff 5c 	st.w	r7[-164],r8
8000b664:	30 08       	mov	r8,0
8000b666:	ef 48 ff 60 	st.w	r7[-160],r8
8000b66a:	30 08       	mov	r8,0
8000b66c:	ef 48 ff 64 	st.w	r7[-156],r8
	uint32_t tinterGps, tinterBaro;
	int i;
	//if ((centralData->simulation_mode == 0))
	{
		if (pos_est->init_barometer)
8000b670:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b674:	f1 38 00 29 	ld.ub	r8,r8[41]
8000b678:	58 08       	cp.w	r8,0
8000b67a:	c6 40       	breq	8000b742 <position_correction+0x168>
		{
			// altimeter correction
			if (newValidBarometer(&pos_est->timeLastBarometerMsg))
8000b67c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b680:	2d c8       	sub	r8,-36
8000b682:	10 9c       	mov	r12,r8
8000b684:	f0 16 00 ec 	mcall	r6[944]
8000b688:	18 98       	mov	r8,r12
8000b68a:	58 08       	cp.w	r8,0
8000b68c:	c2 70       	breq	8000b6da <position_correction+0x100>
			{
				//alt_error = -(barometer->altitude + barometer->altitude_offset) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
				pos_est->last_alt= -(barometer->altitude ) + pos_est->localPosition.origin.altitude;
8000b68e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b692:	f0 f9 00 80 	ld.w	r9,r8[128]
8000b696:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b69a:	70 78       	ld.w	r8,r8[0x1c]
8000b69c:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b6a0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6a4:	f1 49 00 50 	st.w	r8[80],r9
				baro_alt_error = -(barometer->altitude ) - pos_est->localPosition.pos[2]+pos_est->localPosition.origin.altitude;
8000b6a8:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6ac:	70 78       	ld.w	r8,r8[0x1c]
8000b6ae:	10 99       	mov	r9,r8
8000b6b0:	ee 19 80 00 	eorh	r9,0x8000
8000b6b4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6b8:	71 a8       	ld.w	r8,r8[0x68]
8000b6ba:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000b6be:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6c2:	f0 f8 00 80 	ld.w	r8,r8[128]
8000b6c6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000b6ca:	ef 48 ff e0 	st.w	r7[-32],r8
				dbg_print(") - ");
				dbg_print_num(pos_est->localPosition.pos[2],10);
				dbg_print(" + ");
				dbg_print_num(pos_est->localPosition.origin.altitude,10);
				dbg_print("\n");*/
				pos_est->timeLastBarometerMsg=barometer->last_update;
8000b6ce:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6d2:	70 a9       	ld.w	r9,r8[0x28]
8000b6d4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b6d8:	91 99       	st.w	r8[0x24],r9
			}
			tinterBaro = (get_micros()-barometer->last_update)/1000.0;
8000b6da:	f0 16 00 29 	mcall	r6[164]
8000b6de:	18 99       	mov	r9,r12
8000b6e0:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b6e4:	70 a8       	ld.w	r8,r8[0x28]
8000b6e6:	f2 08 01 08 	sub	r8,r9,r8
8000b6ea:	10 9c       	mov	r12,r8
8000b6ec:	f0 16 00 52 	mcall	r6[328]
8000b6f0:	30 08       	mov	r8,0
8000b6f2:	e0 69 40 00 	mov	r9,16384
8000b6f6:	ea 19 40 8f 	orh	r9,0x408f
8000b6fa:	f0 16 00 0c 	mcall	r6[48]
8000b6fe:	14 98       	mov	r8,r10
8000b700:	16 99       	mov	r9,r11
8000b702:	10 9a       	mov	r10,r8
8000b704:	12 9b       	mov	r11,r9
8000b706:	f0 16 00 7e 	mcall	r6[504]
8000b70a:	18 98       	mov	r8,r12
8000b70c:	ef 48 ff f8 	st.w	r7[-8],r8
			baro_gain=1.0;//fmax(1.0-tinterBaro/1000.0, 0.0);
8000b710:	fc 18 3f 80 	movh	r8,0x3f80
8000b714:	ef 48 ff e8 	st.w	r7[-24],r8
			
			//pos_est->localPosition.pos[2] += kp_alt/((float)(tinterBaro/2.5 + 1.0)) * alt_error;
			baro_alt_error=pos_est->last_alt  - pos_est->localPosition.pos[2];
8000b718:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b71c:	71 49       	ld.w	r9,r8[0x50]
8000b71e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b722:	71 a8       	ld.w	r8,r8[0x68]
8000b724:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b728:	ef 48 ff e0 	st.w	r7[-32],r8
			baro_vel_error=barometer->vario_vz - pos_est->vel[2];
8000b72c:	ee f8 ff 54 	ld.w	r8,r7[-172]
8000b730:	70 99       	ld.w	r9,r8[0x24]
8000b732:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b736:	71 08       	ld.w	r8,r8[0x40]
8000b738:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b73c:	ef 48 ff e4 	st.w	r7[-28],r8
8000b740:	c0 78       	rjmp	8000b74e <position_correction+0x174>
			//vel_error[2]=0.1*pos_error[2];
			//pos_est->vel[2] += kp_alt_v * vel_error[2];
				
		}else{
			init_barometer_offset(pos_est, barometer);
8000b742:	ee fb ff 54 	ld.w	r11,r7[-172]
8000b746:	ee fc ff 58 	ld.w	r12,r7[-168]
8000b74a:	f0 16 02 13 	mcall	r6[2124]
		}
	
		if (pos_est->init_gps_position)
8000b74e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b752:	f1 38 00 28 	ld.ub	r8,r8[40]
8000b756:	58 08       	cp.w	r8,0
8000b758:	e0 80 01 9c 	breq	8000ba90 <position_correction+0x4b6>
		{
			if (newValidGpsMsg(&pos_est->timeLastGpsMsg))
8000b75c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b760:	2e 08       	sub	r8,-32
8000b762:	10 9c       	mov	r12,r8
8000b764:	f0 16 00 98 	mcall	r6[608]
8000b768:	18 98       	mov	r8,r12
8000b76a:	58 08       	cp.w	r8,0
8000b76c:	e0 80 01 07 	breq	8000b97a <position_correction+0x3a0>
			{
				//dbg_print("New valid message\n");
				global_gps_position.longitude = gps->longitude;
8000b770:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b774:	f0 e8 00 08 	ld.d	r8,r8[8]
8000b778:	ee e9 ff c4 	st.d	r7[-60],r8
				global_gps_position.latitude = gps->latitude;
8000b77c:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b780:	f0 e8 00 00 	ld.d	r8,r8[0]
8000b784:	ee e9 ff cc 	st.d	r7[-52],r8
				global_gps_position.altitude = gps->altitude;
8000b788:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b78c:	70 48       	ld.w	r8,r8[0x10]
8000b78e:	ef 48 ff d4 	st.w	r7[-44],r8
				global_gps_position.heading=0.0;
8000b792:	30 08       	mov	r8,0
8000b794:	ef 48 ff d8 	st.w	r7[-40],r8
				local_coordinates = global_to_local_position(global_gps_position,pos_est->localPosition.origin);
8000b798:	ee cc 00 e4 	sub	r12,r7,228
8000b79c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b7a0:	20 7d       	sub	sp,28
8000b7a2:	1a 99       	mov	r9,sp
8000b7a4:	12 9a       	mov	r10,r9
8000b7a6:	f0 cb ff 90 	sub	r11,r8,-112
8000b7aa:	f4 c8 00 00 	sub	r8,r10,0
8000b7ae:	f6 c9 00 00 	sub	r9,r11,0
8000b7b2:	72 0e       	ld.w	lr,r9[0x0]
8000b7b4:	91 0e       	st.w	r8[0x0],lr
8000b7b6:	72 1e       	ld.w	lr,r9[0x4]
8000b7b8:	91 1e       	st.w	r8[0x4],lr
8000b7ba:	72 2e       	ld.w	lr,r9[0x8]
8000b7bc:	91 2e       	st.w	r8[0x8],lr
8000b7be:	72 39       	ld.w	r9,r9[0xc]
8000b7c0:	91 39       	st.w	r8[0xc],r9
8000b7c2:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b7c6:	f4 e9 00 10 	st.d	r10[16],r8
8000b7ca:	76 68       	ld.w	r8,r11[0x18]
8000b7cc:	95 68       	st.w	r10[0x18],r8
8000b7ce:	20 7d       	sub	sp,28
8000b7d0:	1a 98       	mov	r8,sp
8000b7d2:	10 9a       	mov	r10,r8
8000b7d4:	ee cb 00 3c 	sub	r11,r7,60
8000b7d8:	f4 c8 00 00 	sub	r8,r10,0
8000b7dc:	f6 c9 00 00 	sub	r9,r11,0
8000b7e0:	72 0e       	ld.w	lr,r9[0x0]
8000b7e2:	91 0e       	st.w	r8[0x0],lr
8000b7e4:	72 1e       	ld.w	lr,r9[0x4]
8000b7e6:	91 1e       	st.w	r8[0x4],lr
8000b7e8:	72 2e       	ld.w	lr,r9[0x8]
8000b7ea:	91 2e       	st.w	r8[0x8],lr
8000b7ec:	72 39       	ld.w	r9,r9[0xc]
8000b7ee:	91 39       	st.w	r8[0xc],r9
8000b7f0:	f6 e8 00 10 	ld.d	r8,r11[16]
8000b7f4:	f4 e9 00 10 	st.d	r10[16],r8
8000b7f8:	76 68       	ld.w	r8,r11[0x18]
8000b7fa:	95 68       	st.w	r10[0x18],r8
8000b7fc:	f0 16 00 7d 	mcall	r6[500]
8000b800:	2f 2d       	sub	sp,-56
8000b802:	ee cb 00 6c 	sub	r11,r7,108
8000b806:	ee ca 00 e4 	sub	r10,r7,228
8000b80a:	f6 c8 00 00 	sub	r8,r11,0
8000b80e:	f4 c9 00 00 	sub	r9,r10,0
8000b812:	72 0c       	ld.w	r12,r9[0x0]
8000b814:	91 0c       	st.w	r8[0x0],r12
8000b816:	72 1c       	ld.w	r12,r9[0x4]
8000b818:	91 1c       	st.w	r8[0x4],r12
8000b81a:	72 2c       	ld.w	r12,r9[0x8]
8000b81c:	91 2c       	st.w	r8[0x8],r12
8000b81e:	72 39       	ld.w	r9,r9[0xc]
8000b820:	91 39       	st.w	r8[0xc],r9
8000b822:	f6 c8 ff f0 	sub	r8,r11,-16
8000b826:	f4 c9 ff f0 	sub	r9,r10,-16
8000b82a:	72 0c       	ld.w	r12,r9[0x0]
8000b82c:	91 0c       	st.w	r8[0x0],r12
8000b82e:	72 1c       	ld.w	r12,r9[0x4]
8000b830:	91 1c       	st.w	r8[0x4],r12
8000b832:	72 2c       	ld.w	r12,r9[0x8]
8000b834:	91 2c       	st.w	r8[0x8],r12
8000b836:	72 39       	ld.w	r9,r9[0xc]
8000b838:	91 39       	st.w	r8[0xc],r9
8000b83a:	f6 c8 ff e0 	sub	r8,r11,-32
8000b83e:	f4 c9 ff e0 	sub	r9,r10,-32
8000b842:	72 0a       	ld.w	r10,r9[0x0]
8000b844:	91 0a       	st.w	r8[0x0],r10
8000b846:	72 1a       	ld.w	r10,r9[0x4]
8000b848:	91 1a       	st.w	r8[0x4],r10
8000b84a:	72 2a       	ld.w	r10,r9[0x8]
8000b84c:	91 2a       	st.w	r8[0x8],r10
8000b84e:	72 39       	ld.w	r9,r9[0xc]
8000b850:	91 39       	st.w	r8[0xc],r9
				local_coordinates.timestamp_ms=gps->timeLastMsg;
8000b852:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b856:	71 18       	ld.w	r8,r8[0x44]
8000b858:	ef 48 ff c0 	st.w	r7[-64],r8
				// compute GPS velocity estimate
				gps_dt=(local_coordinates.timestamp_ms - pos_est->lastGpsPos.timestamp_ms)/1000.0;
8000b85c:	ee f9 ff c0 	ld.w	r9,r7[-64]
8000b860:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b864:	f0 f8 00 bc 	ld.w	r8,r8[188]
8000b868:	f2 08 01 08 	sub	r8,r9,r8
8000b86c:	10 9c       	mov	r12,r8
8000b86e:	f0 16 00 52 	mcall	r6[328]
8000b872:	30 08       	mov	r8,0
8000b874:	e0 69 40 00 	mov	r9,16384
8000b878:	ea 19 40 8f 	orh	r9,0x408f
8000b87c:	f0 16 00 0c 	mcall	r6[48]
8000b880:	14 98       	mov	r8,r10
8000b882:	16 99       	mov	r9,r11
8000b884:	10 9a       	mov	r10,r8
8000b886:	12 9b       	mov	r11,r9
8000b888:	f0 16 00 08 	mcall	r6[32]
8000b88c:	18 98       	mov	r8,r12
8000b88e:	ef 48 ff f0 	st.w	r7[-16],r8
				if (gps_dt>0.001) {
8000b892:	ee fc ff f0 	ld.w	r12,r7[-16]
8000b896:	f0 16 00 02 	mcall	r6[8]
8000b89a:	14 98       	mov	r8,r10
8000b89c:	16 99       	mov	r9,r11
8000b89e:	30 05       	mov	r5,0
8000b8a0:	e0 6a a9 fc 	mov	r10,43516
8000b8a4:	ea 1a d2 f1 	orh	r10,0xd2f1
8000b8a8:	e0 6b 62 4d 	mov	r11,25165
8000b8ac:	ea 1b 3f 50 	orh	r11,0x3f50
8000b8b0:	f0 16 00 1e 	mcall	r6[120]
8000b8b4:	18 98       	mov	r8,r12
8000b8b6:	58 08       	cp.w	r8,0
8000b8b8:	c0 20       	breq	8000b8bc <position_correction+0x2e2>
8000b8ba:	30 15       	mov	r5,1
8000b8bc:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b8c0:	c5 90       	breq	8000b972 <position_correction+0x398>
					for (i=0; i<3; i++) pos_est->last_vel[i] = (local_coordinates.pos[i]-pos_est->lastGpsPos.pos[i])/gps_dt;
8000b8c2:	30 08       	mov	r8,0
8000b8c4:	ef 48 ff fc 	st.w	r7[-4],r8
8000b8c8:	c2 58       	rjmp	8000b912 <position_correction+0x338>
8000b8ca:	ee f5 ff fc 	ld.w	r5,r7[-4]
8000b8ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b8d2:	a3 68       	lsl	r8,0x2
8000b8d4:	ee 08 00 08 	add	r8,r7,r8
8000b8d8:	f0 f9 ff 94 	ld.w	r9,r8[-108]
8000b8dc:	ee fa ff fc 	ld.w	r10,r7[-4]
8000b8e0:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b8e4:	2d ca       	sub	r10,-36
8000b8e6:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000b8ea:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000b8ee:	ee fb ff f0 	ld.w	r11,r7[-16]
8000b8f2:	10 9c       	mov	r12,r8
8000b8f4:	f0 16 00 0a 	mcall	r6[40]
8000b8f8:	18 98       	mov	r8,r12
8000b8fa:	10 9a       	mov	r10,r8
8000b8fc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b900:	ea c9 ff eb 	sub	r9,r5,-21
8000b904:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
8000b908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b90c:	2f f8       	sub	r8,-1
8000b90e:	ef 48 ff fc 	st.w	r7[-4],r8
8000b912:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000b916:	58 28       	cp.w	r8,2
8000b918:	fe 9a ff d9 	brle	8000b8ca <position_correction+0x2f0>
					pos_est->lastGpsPos=local_coordinates;
8000b91c:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000b920:	f0 cb ff 70 	sub	r11,r8,-144
8000b924:	ee ca 00 6c 	sub	r10,r7,108
8000b928:	f6 c8 00 00 	sub	r8,r11,0
8000b92c:	f4 c9 00 00 	sub	r9,r10,0
8000b930:	72 0c       	ld.w	r12,r9[0x0]
8000b932:	91 0c       	st.w	r8[0x0],r12
8000b934:	72 1c       	ld.w	r12,r9[0x4]
8000b936:	91 1c       	st.w	r8[0x4],r12
8000b938:	72 2c       	ld.w	r12,r9[0x8]
8000b93a:	91 2c       	st.w	r8[0x8],r12
8000b93c:	72 39       	ld.w	r9,r9[0xc]
8000b93e:	91 39       	st.w	r8[0xc],r9
8000b940:	f6 c8 ff f0 	sub	r8,r11,-16
8000b944:	f4 c9 ff f0 	sub	r9,r10,-16
8000b948:	72 0c       	ld.w	r12,r9[0x0]
8000b94a:	91 0c       	st.w	r8[0x0],r12
8000b94c:	72 1c       	ld.w	r12,r9[0x4]
8000b94e:	91 1c       	st.w	r8[0x4],r12
8000b950:	72 2c       	ld.w	r12,r9[0x8]
8000b952:	91 2c       	st.w	r8[0x8],r12
8000b954:	72 39       	ld.w	r9,r9[0xc]
8000b956:	91 39       	st.w	r8[0xc],r9
8000b958:	f6 c8 ff e0 	sub	r8,r11,-32
8000b95c:	f4 c9 ff e0 	sub	r9,r10,-32
8000b960:	72 0a       	ld.w	r10,r9[0x0]
8000b962:	91 0a       	st.w	r8[0x0],r10
8000b964:	72 1a       	ld.w	r10,r9[0x4]
8000b966:	91 1a       	st.w	r8[0x4],r10
8000b968:	72 2a       	ld.w	r10,r9[0x8]
8000b96a:	91 2a       	st.w	r8[0x8],r10
8000b96c:	72 39       	ld.w	r9,r9[0xc]
8000b96e:	91 39       	st.w	r8[0xc],r9
8000b970:	c0 58       	rjmp	8000b97a <position_correction+0x3a0>
				} else dbg_print("GPS dt is too small!");
8000b972:	fe cc 03 ae 	sub	r12,pc,942
8000b976:	f0 16 00 01 	mcall	r6[4]
			}
			tinterGps = get_millis() - gps->timeLastMsg;
8000b97a:	f0 16 00 0f 	mcall	r6[60]
8000b97e:	18 99       	mov	r9,r12
8000b980:	ee f8 ff 50 	ld.w	r8,r7[-176]
8000b984:	71 18       	ld.w	r8,r8[0x44]
8000b986:	10 19       	sub	r9,r8
8000b988:	ef 49 ff f4 	st.w	r7[-12],r9
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
8000b98c:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b990:	f0 16 00 52 	mcall	r6[328]
8000b994:	30 08       	mov	r8,0
8000b996:	e0 69 40 00 	mov	r9,16384
8000b99a:	ea 19 c0 8f 	orh	r9,0xc08f
8000b99e:	f0 16 00 0c 	mcall	r6[48]
8000b9a2:	14 98       	mov	r8,r10
8000b9a4:	16 99       	mov	r9,r11
8000b9a6:	10 9a       	mov	r10,r8
8000b9a8:	12 9b       	mov	r11,r9
8000b9aa:	30 08       	mov	r8,0
8000b9ac:	fc 19 3f f0 	movh	r9,0x3ff0
8000b9b0:	f0 16 00 05 	mcall	r6[20]
8000b9b4:	14 98       	mov	r8,r10
8000b9b6:	16 99       	mov	r9,r11
8000b9b8:	30 05       	mov	r5,0
8000b9ba:	30 0a       	mov	r10,0
8000b9bc:	30 0b       	mov	r11,0
8000b9be:	f0 16 00 1e 	mcall	r6[120]
8000b9c2:	18 98       	mov	r8,r12
8000b9c4:	58 08       	cp.w	r8,0
8000b9c6:	c0 20       	breq	8000b9ca <position_correction+0x3f0>
8000b9c8:	30 15       	mov	r5,1
8000b9ca:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000b9ce:	c1 d0       	breq	8000ba08 <position_correction+0x42e>
8000b9d0:	ee fc ff f4 	ld.w	r12,r7[-12]
8000b9d4:	f0 16 00 52 	mcall	r6[328]
8000b9d8:	30 08       	mov	r8,0
8000b9da:	e0 69 40 00 	mov	r9,16384
8000b9de:	ea 19 c0 8f 	orh	r9,0xc08f
8000b9e2:	f0 16 00 0c 	mcall	r6[48]
8000b9e6:	14 98       	mov	r8,r10
8000b9e8:	16 99       	mov	r9,r11
8000b9ea:	10 9a       	mov	r10,r8
8000b9ec:	12 9b       	mov	r11,r9
8000b9ee:	30 08       	mov	r8,0
8000b9f0:	fc 19 3f f0 	movh	r9,0x3ff0
8000b9f4:	f0 16 00 05 	mcall	r6[20]
8000b9f8:	14 98       	mov	r8,r10
8000b9fa:	16 99       	mov	r9,r11
8000b9fc:	10 9a       	mov	r10,r8
8000b9fe:	12 9b       	mov	r11,r9
8000ba00:	f0 16 00 08 	mcall	r6[32]
8000ba04:	18 98       	mov	r8,r12
8000ba06:	c0 28       	rjmp	8000ba0a <position_correction+0x430>
8000ba08:	30 08       	mov	r8,0
8000ba0a:	ef 48 ff ec 	st.w	r7[-20],r8
			gps_gain=1.0;
8000ba0e:	fc 18 3f 80 	movh	r8,0x3f80
8000ba12:	ef 48 ff ec 	st.w	r7[-20],r8
			
			for (i=0;i<3;i++){
8000ba16:	30 08       	mov	r8,0
8000ba18:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba1c:	c3 48       	rjmp	8000ba84 <position_correction+0x4aa>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
8000ba1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba22:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba26:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba2a:	2d ca       	sub	r10,-36
8000ba2c:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000ba30:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba34:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba38:	2e 8b       	sub	r11,-24
8000ba3a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000ba3e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ba42:	a3 68       	lsl	r8,0x2
8000ba44:	ee 08 00 08 	add	r8,r7,r8
8000ba48:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
8000ba4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba50:	ee fa ff fc 	ld.w	r10,r7[-4]
8000ba54:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba58:	2e ba       	sub	r10,-21
8000ba5a:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8000ba5e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ba62:	ee f9 ff 58 	ld.w	r9,r7[-168]
8000ba66:	2f 2b       	sub	r11,-14
8000ba68:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8000ba6c:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000ba70:	a3 68       	lsl	r8,0x2
8000ba72:	ee 08 00 08 	add	r8,r7,r8
8000ba76:	f1 49 ff 5c 	st.w	r8[-164],r9
			tinterGps = get_millis() - gps->timeLastMsg;
			
			gps_gain=fmax(1.0-tinterGps/1000.0, 0.0);
			gps_gain=1.0;
			
			for (i=0;i<3;i++){
8000ba7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba7e:	2f f8       	sub	r8,-1
8000ba80:	ef 48 ff fc 	st.w	r7[-4],r8
8000ba84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ba88:	58 28       	cp.w	r8,2
8000ba8a:	fe 9a ff ca 	brle	8000ba1e <position_correction+0x444>
8000ba8e:	c2 b8       	rjmp	8000bae4 <position_correction+0x50a>
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
8000ba90:	ee fb ff 50 	ld.w	r11,r7[-176]
8000ba94:	ee fc ff 58 	ld.w	r12,r7[-168]
8000ba98:	f0 16 00 eb 	mcall	r6[940]
			for (i=0;i<2;i++){
8000ba9c:	30 08       	mov	r8,0
8000ba9e:	ef 48 ff fc 	st.w	r7[-4],r8
8000baa2:	c1 68       	rjmp	8000bace <position_correction+0x4f4>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
8000baa4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000baa8:	a3 68       	lsl	r8,0x2
8000baaa:	ee 08 00 08 	add	r8,r7,r8
8000baae:	30 09       	mov	r9,0
8000bab0:	f1 49 ff 68 	st.w	r8[-152],r9
				vel_error[i] = 0.0;
8000bab4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bab8:	a3 68       	lsl	r8,0x2
8000baba:	ee 08 00 08 	add	r8,r7,r8
8000babe:	30 09       	mov	r9,0
8000bac0:	f1 49 ff 5c 	st.w	r8[-164],r9
				pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				vel_error[i] = pos_est->last_vel[i]       - pos_est->vel[i]; 
			}
		}else{
			init_pos_gps(pos_est, gps);
			for (i=0;i<2;i++){
8000bac4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bac8:	2f f8       	sub	r8,-1
8000baca:	ef 48 ff fc 	st.w	r7[-4],r8
8000bace:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bad2:	58 18       	cp.w	r8,1
8000bad4:	fe 9a ff e8 	brle	8000baa4 <position_correction+0x4ca>
				//pos_error[i] = pos_est->lastGpsPos.pos[i] - pos_est->localPosition.pos[i];
				pos_error[i] = 0.0;
				vel_error[i] = 0.0;
			}
			gps_gain=0.1;
8000bad8:	e0 68 cc cd 	mov	r8,52429
8000badc:	ea 18 3d cc 	orh	r8,0x3dcc
8000bae0:	ef 48 ff ec 	st.w	r7[-20],r8
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000bae4:	30 08       	mov	r8,0
8000bae6:	ef 48 ff fc 	st.w	r7[-4],r8
8000baea:	c2 e8       	rjmp	8000bb46 <position_correction+0x56c>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
8000baec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000baf0:	ee fa ff fc 	ld.w	r10,r7[-4]
8000baf4:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000baf8:	2e 8a       	sub	r10,-24
8000bafa:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bafe:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bb02:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb06:	2f db       	sub	r11,-3
8000bb08:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bb0c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bb10:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bb14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb18:	a3 68       	lsl	r8,0x2
8000bb1a:	ee 08 00 08 	add	r8,r7,r8
8000bb1e:	f0 f8 ff 68 	ld.w	r8,r8[-152]
8000bb22:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bb26:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bb2a:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bb2e:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bb32:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb36:	2e 89       	sub	r9,-24
8000bb38:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			}
			gps_gain=0.1;
		}
		
		// Apply error correction to velocity and position estimates
		for (i=0;i<3;i++) {
8000bb3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb40:	2f f8       	sub	r8,-1
8000bb42:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb4a:	58 28       	cp.w	r8,2
8000bb4c:	fe 9a ff d0 	brle	8000baec <position_correction+0x512>
			pos_est->localPosition.pos[i] += pos_est->kp_pos[i] * gps_gain * pos_error[i]* dt;
		}
		pos_est->localPosition.pos[2] += pos_est->kp_alt * baro_gain * baro_alt_error* dt;
8000bb50:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb54:	71 a9       	ld.w	r9,r8[0x68]
8000bb56:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb5a:	70 6a       	ld.w	r10,r8[0x18]
8000bb5c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bb60:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bb64:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000bb68:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bb6c:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bb70:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bb74:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bb78:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bb7c:	f1 49 00 68 	st.w	r8[104],r9


		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
8000bb80:	30 08       	mov	r8,0
8000bb82:	ef 48 ff fc 	st.w	r7[-4],r8
8000bb86:	c1 68       	rjmp	8000bbb2 <position_correction+0x5d8>
8000bb88:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bb8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bb90:	a3 68       	lsl	r8,0x2
8000bb92:	ee 08 00 08 	add	r8,r7,r8
8000bb96:	f0 f9 ff 5c 	ld.w	r9,r8[-164]
8000bb9a:	f4 c8 ff ff 	sub	r8,r10,-1
8000bb9e:	a3 68       	lsl	r8,0x2
8000bba0:	ee 08 00 08 	add	r8,r7,r8
8000bba4:	f1 49 ff 74 	st.w	r8[-140],r9
8000bba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbac:	2f f8       	sub	r8,-1
8000bbae:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbb6:	58 28       	cp.w	r8,2
8000bbb8:	fe 9a ff e8 	brle	8000bb88 <position_correction+0x5ae>
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bbbc:	30 08       	mov	r8,0
8000bbbe:	ef 48 ff fc 	st.w	r7[-4],r8
8000bbc2:	c2 e8       	rjmp	8000bc1e <position_correction+0x644>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
8000bbc4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bbc8:	ee fa ff fc 	ld.w	r10,r7[-4]
8000bbcc:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bbd0:	2f 2a       	sub	r10,-14
8000bbd2:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000bbd6:	ee fb ff fc 	ld.w	r11,r7[-4]
8000bbda:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bbde:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8000bbe2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bbe6:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bbea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bbee:	2f f8       	sub	r8,-1
8000bbf0:	a3 68       	lsl	r8,0x2
8000bbf2:	ee 08 00 08 	add	r8,r7,r8
8000bbf6:	f0 f8 ff 74 	ld.w	r8,r8[-140]
8000bbfa:	e5 a2 0b b8 	cop	cp0,cr11,cr11,cr8,0x44
8000bbfe:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bc02:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000bc06:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8000bc0a:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc0e:	2f 29       	sub	r9,-14
8000bc10:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

		for (i=0; i<3; i++) vel_correction.v[i] = vel_error[i];
		//for (i=0; i<3; i++) vel_correction.v[i] = pos_error[i];
		//vel_correction = quat_global_to_local(pos_est->qe, vel_correction);
				
		for (i=0;i<3;i++) {			
8000bc14:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc18:	2f f8       	sub	r8,-1
8000bc1a:	ef 48 ff fc 	st.w	r7[-4],r8
8000bc1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000bc22:	58 28       	cp.w	r8,2
8000bc24:	fe 9a ff d0 	brle	8000bbc4 <position_correction+0x5ea>
			pos_est->vel[i] += pos_est->kp_vel[i]*gps_gain * vel_correction.v[i]* dt;
		}
		pos_est->vel[2] += pos_est->kp_vel_baro * baro_gain * baro_vel_error* dt;
8000bc28:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc2c:	71 09       	ld.w	r9,r8[0x40]
8000bc2e:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc32:	70 7a       	ld.w	r10,r8[0x1c]
8000bc34:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000bc38:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc3c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8000bc40:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000bc44:	ee f8 ff 4c 	ld.w	r8,r7[-180]
8000bc48:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bc4c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bc50:	ee f8 ff 58 	ld.w	r8,r7[-168]
8000bc54:	f1 49 00 40 	st.w	r8[64],r9

	}
8000bc58:	2c 7d       	sub	sp,-228
8000bc5a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000bc5e:	00 00       	add	r0,r0
8000bc60:	80 00       	ld.sh	r0,r0[0x0]
8000bc62:	b4 6c       	st.h	r10[0xc],r12

8000bc64 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
8000bc64:	eb cd 40 80 	pushm	r7,lr
8000bc68:	1a 97       	mov	r7,sp
8000bc6a:	20 5d       	sub	sp,20
8000bc6c:	18 9a       	mov	r10,r12
8000bc6e:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
8000bc72:	30 08       	mov	r8,0
8000bc74:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
8000bc78:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc7c:	70 08       	ld.w	r8,r8[0x0]
8000bc7e:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
8000bc82:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc86:	2f c8       	sub	r8,-4
8000bc88:	70 08       	ld.w	r8,r8[0x0]
8000bc8a:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
8000bc8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000bc92:	2f 88       	sub	r8,-8
8000bc94:	70 08       	ld.w	r8,r8[0x0]
8000bc96:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
8000bc9a:	14 98       	mov	r8,r10
8000bc9c:	ee c9 00 10 	sub	r9,r7,16
8000bca0:	20 08       	sub	r8,0
8000bca2:	20 09       	sub	r9,0
8000bca4:	72 0b       	ld.w	r11,r9[0x0]
8000bca6:	91 0b       	st.w	r8[0x0],r11
8000bca8:	72 1b       	ld.w	r11,r9[0x4]
8000bcaa:	91 1b       	st.w	r8[0x4],r11
8000bcac:	72 2b       	ld.w	r11,r9[0x8]
8000bcae:	91 2b       	st.w	r8[0x8],r11
8000bcb0:	72 39       	ld.w	r9,r9[0xc]
8000bcb2:	91 39       	st.w	r8[0xc],r9
}
8000bcb4:	14 9c       	mov	r12,r10
8000bcb6:	2f bd       	sub	sp,-20
8000bcb8:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bcbc <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8000bcbc:	eb cd 40 80 	pushm	r7,lr
8000bcc0:	1a 97       	mov	r7,sp
8000bcc2:	20 3d       	sub	sp,12
8000bcc4:	ef 4c ff f8 	st.w	r7[-8],r12
8000bcc8:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8000bccc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcd0:	70 09       	ld.w	r9,r8[0x0]
8000bcd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bcd6:	70 08       	ld.w	r8,r8[0x0]
8000bcd8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000bcdc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bce0:	2f c8       	sub	r8,-4
8000bce2:	70 0a       	ld.w	r10,r8[0x0]
8000bce4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bce8:	2f c8       	sub	r8,-4
8000bcea:	70 08       	ld.w	r8,r8[0x0]
8000bcec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bcf0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000bcf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000bcf8:	2f 88       	sub	r8,-8
8000bcfa:	70 0a       	ld.w	r10,r8[0x0]
8000bcfc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000bd00:	2f 88       	sub	r8,-8
8000bd02:	70 08       	ld.w	r8,r8[0x0]
8000bd04:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000bd08:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000bd0c:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8000bd10:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000bd14:	10 9c       	mov	r12,r8
8000bd16:	2f dd       	sub	sp,-12
8000bd18:	e3 cd 80 80 	ldm	sp++,r7,pc

8000bd1c <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8000bd1c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bd20:	1a 97       	mov	r7,sp
8000bd22:	20 7d       	sub	sp,28
8000bd24:	4b d6       	lddpc	r6,8000be18 <quat_multi+0xfc>
8000bd26:	1e 26       	rsub	r6,pc
8000bd28:	ee c8 ff ec 	sub	r8,r7,-20
8000bd2c:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8000bd2e:	70 2a       	ld.w	r10,r8[0x8]
8000bd30:	70 79       	ld.w	r9,r8[0x1c]
8000bd32:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd36:	70 3b       	ld.w	r11,r8[0xc]
8000bd38:	70 69       	ld.w	r9,r8[0x18]
8000bd3a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd3e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd42:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8000bd46:	70 3a       	ld.w	r10,r8[0xc]
8000bd48:	70 59       	ld.w	r9,r8[0x14]
8000bd4a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd4e:	70 1b       	ld.w	r11,r8[0x4]
8000bd50:	70 79       	ld.w	r9,r8[0x1c]
8000bd52:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd56:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd5a:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8000bd5e:	70 1a       	ld.w	r10,r8[0x4]
8000bd60:	70 69       	ld.w	r9,r8[0x18]
8000bd62:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd66:	70 2b       	ld.w	r11,r8[0x8]
8000bd68:	70 59       	ld.w	r9,r8[0x14]
8000bd6a:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd6e:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8000bd72:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8000bd76:	70 4a       	ld.w	r10,r8[0x10]
8000bd78:	70 19       	ld.w	r9,r8[0x4]
8000bd7a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd7e:	70 0b       	ld.w	r11,r8[0x0]
8000bd80:	70 59       	ld.w	r9,r8[0x14]
8000bd82:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bd86:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bd8a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000bd8e:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bd92:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8000bd96:	70 4a       	ld.w	r10,r8[0x10]
8000bd98:	70 29       	ld.w	r9,r8[0x8]
8000bd9a:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bd9e:	70 0b       	ld.w	r11,r8[0x0]
8000bda0:	70 69       	ld.w	r9,r8[0x18]
8000bda2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bda6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bdaa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000bdae:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bdb2:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8000bdb6:	70 4a       	ld.w	r10,r8[0x10]
8000bdb8:	70 39       	ld.w	r9,r8[0xc]
8000bdba:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8000bdbe:	70 0b       	ld.w	r11,r8[0x0]
8000bdc0:	70 79       	ld.w	r9,r8[0x1c]
8000bdc2:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8000bdc6:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8000bdca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000bdce:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8000bdd2:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8000bdd6:	70 0a       	ld.w	r10,r8[0x0]
8000bdd8:	70 49       	ld.w	r9,r8[0x10]
8000bdda:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8000bdde:	f0 c9 ff f0 	sub	r9,r8,-16
8000bde2:	2f c9       	sub	r9,-4
8000bde4:	2f c8       	sub	r8,-4
8000bde6:	12 9b       	mov	r11,r9
8000bde8:	10 9c       	mov	r12,r8
8000bdea:	c6 9f       	rcall	8000bcbc <scalar_product>
8000bdec:	18 98       	mov	r8,r12
8000bdee:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8000bdf2:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8000bdf6:	0a 98       	mov	r8,r5
8000bdf8:	ee c9 00 1c 	sub	r9,r7,28
8000bdfc:	20 08       	sub	r8,0
8000bdfe:	20 09       	sub	r9,0
8000be00:	72 0a       	ld.w	r10,r9[0x0]
8000be02:	91 0a       	st.w	r8[0x0],r10
8000be04:	72 1a       	ld.w	r10,r9[0x4]
8000be06:	91 1a       	st.w	r8[0x4],r10
8000be08:	72 2a       	ld.w	r10,r9[0x8]
8000be0a:	91 2a       	st.w	r8[0x8],r10
8000be0c:	72 39       	ld.w	r9,r9[0xc]
8000be0e:	91 39       	st.w	r8[0xc],r9
}
8000be10:	0a 9c       	mov	r12,r5
8000be12:	2f 9d       	sub	sp,-28
8000be14:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000be18:	80 00       	ld.sh	r0,r0[0x0]
8000be1a:	bb aa       	sbr	r10,0x1a

8000be1c <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8000be1c:	eb cd 40 80 	pushm	r7,lr
8000be20:	1a 97       	mov	r7,sp
8000be22:	20 5d       	sub	sp,20
8000be24:	ee c9 ff f8 	sub	r9,r7,-8
8000be28:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8000be2a:	72 08       	ld.w	r8,r9[0x0]
8000be2c:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8000be30:	30 08       	mov	r8,0
8000be32:	ef 48 ff fc 	st.w	r7[-4],r8
8000be36:	c1 58       	rjmp	8000be60 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8000be38:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be3c:	ee fb ff fc 	ld.w	r11,r7[-4]
8000be40:	2f fb       	sub	r11,-1
8000be42:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8000be46:	ee 1b 80 00 	eorh	r11,0x8000
8000be4a:	2f f8       	sub	r8,-1
8000be4c:	a3 68       	lsl	r8,0x2
8000be4e:	ee 08 00 08 	add	r8,r7,r8
8000be52:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8000be56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be5a:	2f f8       	sub	r8,-1
8000be5c:	ef 48 ff fc 	st.w	r7[-4],r8
8000be60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000be64:	58 28       	cp.w	r8,2
8000be66:	fe 9a ff e9 	brle	8000be38 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8000be6a:	14 98       	mov	r8,r10
8000be6c:	ee c9 00 14 	sub	r9,r7,20
8000be70:	20 08       	sub	r8,0
8000be72:	20 09       	sub	r9,0
8000be74:	72 0b       	ld.w	r11,r9[0x0]
8000be76:	91 0b       	st.w	r8[0x0],r11
8000be78:	72 1b       	ld.w	r11,r9[0x4]
8000be7a:	91 1b       	st.w	r8[0x4],r11
8000be7c:	72 2b       	ld.w	r11,r9[0x8]
8000be7e:	91 2b       	st.w	r8[0x8],r11
8000be80:	72 39       	ld.w	r9,r9[0xc]
8000be82:	91 39       	st.w	r8[0xc],r9
}
8000be84:	14 9c       	mov	r12,r10
8000be86:	2f bd       	sub	sp,-20
8000be88:	e3 cd 80 80 	ldm	sp++,r7,pc

8000be8c <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8000be8c:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000be90:	1a 97       	mov	r7,sp
8000be92:	20 cd       	sub	sp,48
8000be94:	4b c6       	lddpc	r6,8000bf84 <quat_global_to_local+0xf8>
8000be96:	1e 26       	rsub	r6,pc
8000be98:	ee c5 ff ec 	sub	r5,r7,-20
8000be9c:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000be9e:	ee ca 00 10 	sub	r10,r7,16
8000bea2:	20 4d       	sub	sp,16
8000bea4:	1a 98       	mov	r8,sp
8000bea6:	0a 99       	mov	r9,r5
8000bea8:	20 08       	sub	r8,0
8000beaa:	20 09       	sub	r9,0
8000beac:	72 0b       	ld.w	r11,r9[0x0]
8000beae:	91 0b       	st.w	r8[0x0],r11
8000beb0:	72 1b       	ld.w	r11,r9[0x4]
8000beb2:	91 1b       	st.w	r8[0x4],r11
8000beb4:	72 2b       	ld.w	r11,r9[0x8]
8000beb6:	91 2b       	st.w	r8[0x8],r11
8000beb8:	72 39       	ld.w	r9,r9[0xc]
8000beba:	91 39       	st.w	r8[0xc],r9
8000bebc:	14 9c       	mov	r12,r10
8000bebe:	ca ff       	rcall	8000be1c <quat_inv>
8000bec0:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8000bec2:	ee ca 00 20 	sub	r10,r7,32
8000bec6:	20 4d       	sub	sp,16
8000bec8:	1a 98       	mov	r8,sp
8000beca:	ea c9 ff f0 	sub	r9,r5,-16
8000bece:	20 08       	sub	r8,0
8000bed0:	20 09       	sub	r9,0
8000bed2:	72 0b       	ld.w	r11,r9[0x0]
8000bed4:	91 0b       	st.w	r8[0x0],r11
8000bed6:	72 1b       	ld.w	r11,r9[0x4]
8000bed8:	91 1b       	st.w	r8[0x4],r11
8000beda:	72 2b       	ld.w	r11,r9[0x8]
8000bedc:	91 2b       	st.w	r8[0x8],r11
8000bede:	72 39       	ld.w	r9,r9[0xc]
8000bee0:	91 39       	st.w	r8[0xc],r9
8000bee2:	20 4d       	sub	sp,16
8000bee4:	1a 98       	mov	r8,sp
8000bee6:	ee c9 00 10 	sub	r9,r7,16
8000beea:	20 08       	sub	r8,0
8000beec:	20 09       	sub	r9,0
8000beee:	72 0b       	ld.w	r11,r9[0x0]
8000bef0:	91 0b       	st.w	r8[0x0],r11
8000bef2:	72 1b       	ld.w	r11,r9[0x4]
8000bef4:	91 1b       	st.w	r8[0x4],r11
8000bef6:	72 2b       	ld.w	r11,r9[0x8]
8000bef8:	91 2b       	st.w	r8[0x8],r11
8000befa:	72 39       	ld.w	r9,r9[0xc]
8000befc:	91 39       	st.w	r8[0xc],r9
8000befe:	14 9c       	mov	r12,r10
8000bf00:	c0 ef       	rcall	8000bd1c <quat_multi>
8000bf02:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8000bf04:	ee ca 00 30 	sub	r10,r7,48
8000bf08:	20 4d       	sub	sp,16
8000bf0a:	1a 98       	mov	r8,sp
8000bf0c:	0a 99       	mov	r9,r5
8000bf0e:	20 08       	sub	r8,0
8000bf10:	20 09       	sub	r9,0
8000bf12:	72 0b       	ld.w	r11,r9[0x0]
8000bf14:	91 0b       	st.w	r8[0x0],r11
8000bf16:	72 1b       	ld.w	r11,r9[0x4]
8000bf18:	91 1b       	st.w	r8[0x4],r11
8000bf1a:	72 2b       	ld.w	r11,r9[0x8]
8000bf1c:	91 2b       	st.w	r8[0x8],r11
8000bf1e:	72 39       	ld.w	r9,r9[0xc]
8000bf20:	91 39       	st.w	r8[0xc],r9
8000bf22:	20 4d       	sub	sp,16
8000bf24:	1a 98       	mov	r8,sp
8000bf26:	ee c9 00 20 	sub	r9,r7,32
8000bf2a:	20 08       	sub	r8,0
8000bf2c:	20 09       	sub	r9,0
8000bf2e:	72 0b       	ld.w	r11,r9[0x0]
8000bf30:	91 0b       	st.w	r8[0x0],r11
8000bf32:	72 1b       	ld.w	r11,r9[0x4]
8000bf34:	91 1b       	st.w	r8[0x4],r11
8000bf36:	72 2b       	ld.w	r11,r9[0x8]
8000bf38:	91 2b       	st.w	r8[0x8],r11
8000bf3a:	72 39       	ld.w	r9,r9[0xc]
8000bf3c:	91 39       	st.w	r8[0xc],r9
8000bf3e:	14 9c       	mov	r12,r10
8000bf40:	ce ee       	rcall	8000bd1c <quat_multi>
8000bf42:	2f 8d       	sub	sp,-32
8000bf44:	ee c8 00 20 	sub	r8,r7,32
8000bf48:	ee c9 00 30 	sub	r9,r7,48
8000bf4c:	20 08       	sub	r8,0
8000bf4e:	20 09       	sub	r9,0
8000bf50:	72 0a       	ld.w	r10,r9[0x0]
8000bf52:	91 0a       	st.w	r8[0x0],r10
8000bf54:	72 1a       	ld.w	r10,r9[0x4]
8000bf56:	91 1a       	st.w	r8[0x4],r10
8000bf58:	72 2a       	ld.w	r10,r9[0x8]
8000bf5a:	91 2a       	st.w	r8[0x8],r10
8000bf5c:	72 39       	ld.w	r9,r9[0xc]
8000bf5e:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8000bf60:	06 98       	mov	r8,r3
8000bf62:	ee c9 00 20 	sub	r9,r7,32
8000bf66:	20 08       	sub	r8,0
8000bf68:	20 09       	sub	r9,0
8000bf6a:	72 0a       	ld.w	r10,r9[0x0]
8000bf6c:	91 0a       	st.w	r8[0x0],r10
8000bf6e:	72 1a       	ld.w	r10,r9[0x4]
8000bf70:	91 1a       	st.w	r8[0x4],r10
8000bf72:	72 2a       	ld.w	r10,r9[0x8]
8000bf74:	91 2a       	st.w	r8[0x8],r10
8000bf76:	72 39       	ld.w	r9,r9[0xc]
8000bf78:	91 39       	st.w	r8[0xc],r9
}
8000bf7a:	06 9c       	mov	r12,r3
8000bf7c:	2f 4d       	sub	sp,-48
8000bf7e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000bf82:	00 00       	add	r0,r0
8000bf84:	80 00       	ld.sh	r0,r0[0x0]
8000bf86:	bd 1a       	ld.d	r10,--lr

8000bf88 <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8000bf88:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8000bf8c:	1a 97       	mov	r7,sp
8000bf8e:	20 cd       	sub	sp,48
8000bf90:	4b c6       	lddpc	r6,8000c080 <quat_local_to_global+0xf8>
8000bf92:	1e 26       	rsub	r6,pc
8000bf94:	ee c5 ff ec 	sub	r5,r7,-20
8000bf98:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8000bf9a:	ee ca 00 10 	sub	r10,r7,16
8000bf9e:	20 4d       	sub	sp,16
8000bfa0:	1a 98       	mov	r8,sp
8000bfa2:	0a 99       	mov	r9,r5
8000bfa4:	20 08       	sub	r8,0
8000bfa6:	20 09       	sub	r9,0
8000bfa8:	72 0b       	ld.w	r11,r9[0x0]
8000bfaa:	91 0b       	st.w	r8[0x0],r11
8000bfac:	72 1b       	ld.w	r11,r9[0x4]
8000bfae:	91 1b       	st.w	r8[0x4],r11
8000bfb0:	72 2b       	ld.w	r11,r9[0x8]
8000bfb2:	91 2b       	st.w	r8[0x8],r11
8000bfb4:	72 39       	ld.w	r9,r9[0xc]
8000bfb6:	91 39       	st.w	r8[0xc],r9
8000bfb8:	14 9c       	mov	r12,r10
8000bfba:	c3 1f       	rcall	8000be1c <quat_inv>
8000bfbc:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8000bfbe:	ee ca 00 20 	sub	r10,r7,32
8000bfc2:	20 4d       	sub	sp,16
8000bfc4:	1a 98       	mov	r8,sp
8000bfc6:	ea c9 ff f0 	sub	r9,r5,-16
8000bfca:	20 08       	sub	r8,0
8000bfcc:	20 09       	sub	r9,0
8000bfce:	72 0b       	ld.w	r11,r9[0x0]
8000bfd0:	91 0b       	st.w	r8[0x0],r11
8000bfd2:	72 1b       	ld.w	r11,r9[0x4]
8000bfd4:	91 1b       	st.w	r8[0x4],r11
8000bfd6:	72 2b       	ld.w	r11,r9[0x8]
8000bfd8:	91 2b       	st.w	r8[0x8],r11
8000bfda:	72 39       	ld.w	r9,r9[0xc]
8000bfdc:	91 39       	st.w	r8[0xc],r9
8000bfde:	20 4d       	sub	sp,16
8000bfe0:	1a 98       	mov	r8,sp
8000bfe2:	0a 99       	mov	r9,r5
8000bfe4:	20 08       	sub	r8,0
8000bfe6:	20 09       	sub	r9,0
8000bfe8:	72 0b       	ld.w	r11,r9[0x0]
8000bfea:	91 0b       	st.w	r8[0x0],r11
8000bfec:	72 1b       	ld.w	r11,r9[0x4]
8000bfee:	91 1b       	st.w	r8[0x4],r11
8000bff0:	72 2b       	ld.w	r11,r9[0x8]
8000bff2:	91 2b       	st.w	r8[0x8],r11
8000bff4:	72 39       	ld.w	r9,r9[0xc]
8000bff6:	91 39       	st.w	r8[0xc],r9
8000bff8:	14 9c       	mov	r12,r10
8000bffa:	c9 1e       	rcall	8000bd1c <quat_multi>
8000bffc:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8000bffe:	ee ca 00 30 	sub	r10,r7,48
8000c002:	20 4d       	sub	sp,16
8000c004:	1a 98       	mov	r8,sp
8000c006:	ee c9 00 10 	sub	r9,r7,16
8000c00a:	20 08       	sub	r8,0
8000c00c:	20 09       	sub	r9,0
8000c00e:	72 0b       	ld.w	r11,r9[0x0]
8000c010:	91 0b       	st.w	r8[0x0],r11
8000c012:	72 1b       	ld.w	r11,r9[0x4]
8000c014:	91 1b       	st.w	r8[0x4],r11
8000c016:	72 2b       	ld.w	r11,r9[0x8]
8000c018:	91 2b       	st.w	r8[0x8],r11
8000c01a:	72 39       	ld.w	r9,r9[0xc]
8000c01c:	91 39       	st.w	r8[0xc],r9
8000c01e:	20 4d       	sub	sp,16
8000c020:	1a 98       	mov	r8,sp
8000c022:	ee c9 00 20 	sub	r9,r7,32
8000c026:	20 08       	sub	r8,0
8000c028:	20 09       	sub	r9,0
8000c02a:	72 0b       	ld.w	r11,r9[0x0]
8000c02c:	91 0b       	st.w	r8[0x0],r11
8000c02e:	72 1b       	ld.w	r11,r9[0x4]
8000c030:	91 1b       	st.w	r8[0x4],r11
8000c032:	72 2b       	ld.w	r11,r9[0x8]
8000c034:	91 2b       	st.w	r8[0x8],r11
8000c036:	72 39       	ld.w	r9,r9[0xc]
8000c038:	91 39       	st.w	r8[0xc],r9
8000c03a:	14 9c       	mov	r12,r10
8000c03c:	c7 0e       	rcall	8000bd1c <quat_multi>
8000c03e:	2f 8d       	sub	sp,-32
8000c040:	ee c8 00 20 	sub	r8,r7,32
8000c044:	ee c9 00 30 	sub	r9,r7,48
8000c048:	20 08       	sub	r8,0
8000c04a:	20 09       	sub	r9,0
8000c04c:	72 0a       	ld.w	r10,r9[0x0]
8000c04e:	91 0a       	st.w	r8[0x0],r10
8000c050:	72 1a       	ld.w	r10,r9[0x4]
8000c052:	91 1a       	st.w	r8[0x4],r10
8000c054:	72 2a       	ld.w	r10,r9[0x8]
8000c056:	91 2a       	st.w	r8[0x8],r10
8000c058:	72 39       	ld.w	r9,r9[0xc]
8000c05a:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8000c05c:	06 98       	mov	r8,r3
8000c05e:	ee c9 00 20 	sub	r9,r7,32
8000c062:	20 08       	sub	r8,0
8000c064:	20 09       	sub	r9,0
8000c066:	72 0a       	ld.w	r10,r9[0x0]
8000c068:	91 0a       	st.w	r8[0x0],r10
8000c06a:	72 1a       	ld.w	r10,r9[0x4]
8000c06c:	91 1a       	st.w	r8[0x4],r10
8000c06e:	72 2a       	ld.w	r10,r9[0x8]
8000c070:	91 2a       	st.w	r8[0x8],r10
8000c072:	72 39       	ld.w	r9,r9[0xc]
8000c074:	91 39       	st.w	r8[0xc],r9
}
8000c076:	06 9c       	mov	r12,r3
8000c078:	2f 4d       	sub	sp,-48
8000c07a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8000c07e:	00 00       	add	r0,r0
8000c080:	80 00       	ld.sh	r0,r0[0x0]
8000c082:	be 16       	st.h	pc[0x2],r6

8000c084 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8000c084:	eb cd 40 c0 	pushm	r6-r7,lr
8000c088:	1a 97       	mov	r7,sp
8000c08a:	20 2d       	sub	sp,8
8000c08c:	4b 26       	lddpc	r6,8000c154 <fast_sqrt+0xd0>
8000c08e:	1e 26       	rsub	r6,pc
8000c090:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8000c094:	30 18       	mov	r8,1
8000c096:	ee fa ff f8 	ld.w	r10,r7[-8]
8000c09a:	30 09       	mov	r9,0
8000c09c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8000c0a0:	e0 8c 00 03 	brvs	8000c0a6 <fast_sqrt+0x22>
8000c0a4:	c0 25       	brlt	8000c0a8 <fast_sqrt+0x24>
8000c0a6:	30 08       	mov	r8,0
8000c0a8:	5c 58       	castu.b	r8
8000c0aa:	c0 30       	breq	8000c0b0 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8000c0ac:	30 08       	mov	r8,0
8000c0ae:	c4 f8       	rjmp	8000c14c <fast_sqrt+0xc8>
	}
	float result=1.0;
8000c0b0:	fc 18 3f 80 	movh	r8,0x3f80
8000c0b4:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c0b8:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c0bc:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c0c0:	f0 16 00 0a 	mcall	r6[40]
8000c0c4:	18 98       	mov	r8,r12
8000c0c6:	10 99       	mov	r9,r8
8000c0c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c0cc:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c0d0:	fc 18 3f 00 	movh	r8,0x3f00
8000c0d4:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c0d8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c0dc:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c0e0:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c0e4:	f0 16 00 0a 	mcall	r6[40]
8000c0e8:	18 98       	mov	r8,r12
8000c0ea:	10 99       	mov	r9,r8
8000c0ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c0f0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c0f4:	fc 18 3f 00 	movh	r8,0x3f00
8000c0f8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c0fc:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c100:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c104:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c108:	f0 16 00 0a 	mcall	r6[40]
8000c10c:	18 98       	mov	r8,r12
8000c10e:	10 99       	mov	r9,r8
8000c110:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c114:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c118:	fc 18 3f 00 	movh	r8,0x3f00
8000c11c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c120:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8000c124:	ee fb ff fc 	ld.w	r11,r7[-4]
8000c128:	ee fc ff f8 	ld.w	r12,r7[-8]
8000c12c:	f0 16 00 0a 	mcall	r6[40]
8000c130:	18 98       	mov	r8,r12
8000c132:	10 99       	mov	r9,r8
8000c134:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000c138:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c13c:	fc 18 3f 00 	movh	r8,0x3f00
8000c140:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c144:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8000c148:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8000c14c:	10 9c       	mov	r12,r8
8000c14e:	2f ed       	sub	sp,-8
8000c150:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000c154:	80 00       	ld.sh	r0,r0[0x0]
8000c156:	bf 12       	ld.d	r2,--pc
8000c158:	49 6e       	lddpc	lr,8000c1b0 <qfInit+0x12>
8000c15a:	69 74       	ld.w	r4,r4[0x5c]
8000c15c:	69 61       	ld.w	r1,r4[0x58]
8000c15e:	6c 20       	ld.w	r0,r6[0x8]
8000c160:	79 61       	ld.w	r1,r12[0x58]
8000c162:	77 3a       	ld.w	r10,r11[0x4c]
8000c164:	00 00       	add	r0,r0
8000c166:	00 00       	add	r0,r0
8000c168:	20 3d       	sub	sp,12
8000c16a:	20 61       	sub	r1,6
8000c16c:	74 61       	ld.w	r1,r10[0x18]
8000c16e:	6e 32       	ld.w	r2,r7[0xc]
8000c170:	28 6d       	sub	sp,-488
8000c172:	61 67       	ld.w	r7,r0[0x58]
8000c174:	5f 79       	srpl	r9
8000c176:	2c 6d       	sub	sp,-232
8000c178:	61 67       	ld.w	r7,r0[0x58]
8000c17a:	5f 78       	srpl	r8
8000c17c:	29 20       	sub	r0,-110
8000c17e:	3d 00       	mov	r0,-48
8000c180:	20 2c       	sub	r12,2
8000c182:	00 00       	add	r0,r0
8000c184:	0a 00       	add	r0,r5
8000c186:	00 00       	add	r0,r0
8000c188:	46 72       	lddsp	r2,sp[0x19c]
8000c18a:	6f 6e       	ld.w	lr,r7[0x58]
8000c18c:	74 20       	ld.w	r0,r10[0x8]
8000c18e:	6d 61       	ld.w	r1,r6[0x58]
8000c190:	67 28       	ld.w	r8,r3[0x48]
8000c192:	7a 29       	ld.w	r9,sp[0x8]
8000c194:	20 28       	sub	r8,2
8000c196:	2a 31       	sub	r1,-93
8000c198:	30 30       	mov	r0,3
8000c19a:	29 3a       	sub	r10,-109
	...

8000c19e <qfInit>:

float front_mag_vect_z;



void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
8000c19e:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c1a2:	1a 97       	mov	r7,sp
8000c1a4:	20 5d       	sub	sp,20
8000c1a6:	fe f6 03 46 	ld.w	r6,pc[838]
8000c1aa:	1e 26       	rsub	r6,pc
8000c1ac:	ef 4c ff f4 	st.w	r7[-12],r12
8000c1b0:	ef 4b ff f0 	st.w	r7[-16],r11
8000c1b4:	ef 4a ff ec 	st.w	r7[-20],r10
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c1b8:	30 08       	mov	r8,0
8000c1ba:	ef 68 ff fb 	st.b	r7[-5],r8
8000c1be:	c2 c8       	rjmp	8000c216 <qfInit+0x78>
		attitude->sf[i]=1.0/(float)scalefactor[i];
8000c1c0:	ef 35 ff fb 	ld.ub	r5,r7[-5]
8000c1c4:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c1c8:	a3 68       	lsl	r8,0x2
8000c1ca:	ee f9 ff f0 	ld.w	r9,r7[-16]
8000c1ce:	f2 08 00 08 	add	r8,r9,r8
8000c1d2:	70 08       	ld.w	r8,r8[0x0]
8000c1d4:	10 9b       	mov	r11,r8
8000c1d6:	fc 1c 3f 80 	movh	r12,0x3f80
8000c1da:	f0 16 00 0a 	mcall	r6[40]
8000c1de:	18 98       	mov	r8,r12
8000c1e0:	10 9a       	mov	r10,r8
8000c1e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c1e6:	ea c9 ff eb 	sub	r9,r5,-21
8000c1ea:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->be[i]=bias[i];
8000c1ee:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c1f2:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c1f6:	a3 68       	lsl	r8,0x2
8000c1f8:	ee fa ff ec 	ld.w	r10,r7[-20]
8000c1fc:	f4 08 00 08 	add	r8,r10,r8
8000c200:	70 0a       	ld.w	r10,r8[0x0]
8000c202:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c206:	2f 49       	sub	r9,-12
8000c208:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

void qfInit(Quat_Attitude_t *attitude,  float *scalefactor, float *bias) {
	uint8_t i;
	float init_angle;

	for (i=0; i<9; i++){
8000c20c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c210:	2f f8       	sub	r8,-1
8000c212:	ef 68 ff fb 	st.b	r7[-5],r8
8000c216:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c21a:	30 88       	mov	r8,8
8000c21c:	f0 09 18 00 	cp.b	r9,r8
8000c220:	fe 98 ff d0 	brls	8000c1c0 <qfInit+0x22>
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c224:	30 08       	mov	r8,0
8000c226:	ef 68 ff fb 	st.b	r7[-5],r8
8000c22a:	c0 e8       	rjmp	8000c246 <qfInit+0xa8>
		attitude->acc_bf[i]=0.0;
8000c22c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c230:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c234:	2d 09       	sub	r9,-48
8000c236:	30 0a       	mov	r10,0
8000c238:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<9; i++){
		attitude->sf[i]=1.0/(float)scalefactor[i];
		attitude->be[i]=bias[i];
		
	}
	for (i=0; i<3; i++){
8000c23c:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c240:	2f f8       	sub	r8,-1
8000c242:	ef 68 ff fb 	st.b	r7[-5],r8
8000c246:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c24a:	30 28       	mov	r8,2
8000c24c:	f0 09 18 00 	cp.b	r9,r8
8000c250:	fe 98 ff ee 	brls	8000c22c <qfInit+0x8e>

//	attitude->be[3]=-0.03;
//	attitude->be[4]=0.08;
//	attitude->be[5]=0.15;

	attitude->qe.s=1.0;
8000c254:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c258:	fc 19 3f 80 	movh	r9,0x3f80
8000c25c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c25e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c262:	30 09       	mov	r9,0
8000c264:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c266:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c26a:	30 09       	mov	r9,0
8000c26c:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]=0.0;
8000c26e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c272:	30 09       	mov	r9,0
8000c274:	91 39       	st.w	r8[0xc],r9

	for(i=0; i<3; i++)
8000c276:	30 08       	mov	r8,0
8000c278:	ef 68 ff fb 	st.b	r7[-5],r8
8000c27c:	c2 a8       	rjmp	8000c2d0 <qfInit+0x132>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
8000c27e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c282:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8000c286:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c28a:	2d 5a       	sub	r10,-43
8000c28c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8000c290:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c294:	f0 cb ff fa 	sub	r11,r8,-6
8000c298:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c29c:	2e bb       	sub	r11,-21
8000c29e:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c2a2:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000c2a6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c2aa:	f0 cb ff fa 	sub	r11,r8,-6
8000c2ae:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2b2:	2f 4b       	sub	r11,-12
8000c2b4:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
8000c2b8:	e5 a1 0a a8 	cop	cp0,cr10,cr10,cr8,0x42
8000c2bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2c0:	2d c9       	sub	r9,-36
8000c2c2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	attitude->qe.s=1.0;
	attitude->qe.v[0]=0.0;
	attitude->qe.v[1]=0.0;
	attitude->qe.v[2]=0.0;

	for(i=0; i<3; i++)
8000c2c6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8000c2ca:	2f f8       	sub	r8,-1
8000c2cc:	ef 68 ff fb 	st.b	r7[-5],r8
8000c2d0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8000c2d4:	30 28       	mov	r8,2
8000c2d6:	f0 09 18 00 	cp.b	r9,r8
8000c2da:	fe 98 ff d2 	brls	8000c27e <qfInit+0xe0>
	{
		attitude->mag[i]=((float)attitude->raw_mag_mean[i])*attitude->sf[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET];
	}
	
	init_angle = atan2(-attitude->mag[1],attitude->mag[0]);
8000c2de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2e2:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c2e6:	10 9c       	mov	r12,r8
8000c2e8:	f0 16 00 02 	mcall	r6[8]
8000c2ec:	14 92       	mov	r2,r10
8000c2ee:	16 93       	mov	r3,r11
8000c2f0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c2f4:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c2f8:	ee 18 80 00 	eorh	r8,0x8000
8000c2fc:	10 9c       	mov	r12,r8
8000c2fe:	f0 16 00 02 	mcall	r6[8]
8000c302:	04 98       	mov	r8,r2
8000c304:	06 99       	mov	r9,r3
8000c306:	f0 16 00 54 	mcall	r6[336]
8000c30a:	14 98       	mov	r8,r10
8000c30c:	16 99       	mov	r9,r11
8000c30e:	10 9a       	mov	r10,r8
8000c310:	12 9b       	mov	r11,r9
8000c312:	f0 16 00 08 	mcall	r6[32]
8000c316:	18 98       	mov	r8,r12
8000c318:	ef 48 ff fc 	st.w	r7[-4],r8

	dbg_print("Initial yaw:");
8000c31c:	fe cc 01 c4 	sub	r12,pc,452
8000c320:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(init_angle*100.0,10);
8000c324:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c328:	f0 16 00 02 	mcall	r6[8]
8000c32c:	30 08       	mov	r8,0
8000c32e:	fc 19 40 59 	movh	r9,0x4059
8000c332:	f0 16 00 03 	mcall	r6[12]
8000c336:	14 98       	mov	r8,r10
8000c338:	16 99       	mov	r9,r11
8000c33a:	10 9a       	mov	r10,r8
8000c33c:	12 9b       	mov	r11,r9
8000c33e:	f0 16 00 14 	mcall	r6[80]
8000c342:	18 98       	mov	r8,r12
8000c344:	30 ab       	mov	r11,10
8000c346:	10 9c       	mov	r12,r8
8000c348:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" = atan2(mag_y,mag_x) =");
8000c34c:	fe cc 01 e4 	sub	r12,pc,484
8000c350:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[1]*100.0,10);
8000c354:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c358:	f0 f8 00 94 	ld.w	r8,r8[148]
8000c35c:	10 9c       	mov	r12,r8
8000c35e:	f0 16 00 02 	mcall	r6[8]
8000c362:	30 08       	mov	r8,0
8000c364:	fc 19 40 59 	movh	r9,0x4059
8000c368:	f0 16 00 03 	mcall	r6[12]
8000c36c:	14 98       	mov	r8,r10
8000c36e:	16 99       	mov	r9,r11
8000c370:	10 9a       	mov	r10,r8
8000c372:	12 9b       	mov	r11,r9
8000c374:	f0 16 00 14 	mcall	r6[80]
8000c378:	18 98       	mov	r8,r12
8000c37a:	30 ab       	mov	r11,10
8000c37c:	10 9c       	mov	r12,r8
8000c37e:	f0 16 00 04 	mcall	r6[16]
	dbg_print(" ,");
8000c382:	fe cc 02 02 	sub	r12,pc,514
8000c386:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(attitude->mag[0]*100.0,10);
8000c38a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c38e:	f0 f8 00 90 	ld.w	r8,r8[144]
8000c392:	10 9c       	mov	r12,r8
8000c394:	f0 16 00 02 	mcall	r6[8]
8000c398:	30 08       	mov	r8,0
8000c39a:	fc 19 40 59 	movh	r9,0x4059
8000c39e:	f0 16 00 03 	mcall	r6[12]
8000c3a2:	14 98       	mov	r8,r10
8000c3a4:	16 99       	mov	r9,r11
8000c3a6:	10 9a       	mov	r10,r8
8000c3a8:	12 9b       	mov	r11,r9
8000c3aa:	f0 16 00 14 	mcall	r6[80]
8000c3ae:	18 98       	mov	r8,r12
8000c3b0:	30 ab       	mov	r11,10
8000c3b2:	10 9c       	mov	r12,r8
8000c3b4:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c3b8:	fe cc 02 34 	sub	r12,pc,564
8000c3bc:	f0 16 00 01 	mcall	r6[4]

	front_mag_vect_z = attitude->mag[2];
8000c3c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c3c4:	f0 f9 00 98 	ld.w	r9,r8[152]
8000c3c8:	ec f8 03 bc 	ld.w	r8,r6[956]
8000c3cc:	91 09       	st.w	r8[0x0],r9
	dbg_print("Front mag(z) (*100):");
8000c3ce:	fe cc 02 46 	sub	r12,pc,582
8000c3d2:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(front_mag_vect_z*100.0,10);
8000c3d6:	ec f8 03 bc 	ld.w	r8,r6[956]
8000c3da:	70 08       	ld.w	r8,r8[0x0]
8000c3dc:	10 9c       	mov	r12,r8
8000c3de:	f0 16 00 02 	mcall	r6[8]
8000c3e2:	30 08       	mov	r8,0
8000c3e4:	fc 19 40 59 	movh	r9,0x4059
8000c3e8:	f0 16 00 03 	mcall	r6[12]
8000c3ec:	14 98       	mov	r8,r10
8000c3ee:	16 99       	mov	r9,r11
8000c3f0:	10 9a       	mov	r10,r8
8000c3f2:	12 9b       	mov	r11,r9
8000c3f4:	f0 16 00 14 	mcall	r6[80]
8000c3f8:	18 98       	mov	r8,r12
8000c3fa:	30 ab       	mov	r11,10
8000c3fc:	10 9c       	mov	r12,r8
8000c3fe:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8000c402:	fe cc 02 7e 	sub	r12,pc,638
8000c406:	f0 16 00 01 	mcall	r6[4]

	attitude->qe.s = cos(init_angle/2.0);
8000c40a:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c40e:	f0 16 00 02 	mcall	r6[8]
8000c412:	30 08       	mov	r8,0
8000c414:	fc 19 40 00 	movh	r9,0x4000
8000c418:	f0 16 00 0c 	mcall	r6[48]
8000c41c:	14 98       	mov	r8,r10
8000c41e:	16 99       	mov	r9,r11
8000c420:	10 9a       	mov	r10,r8
8000c422:	12 9b       	mov	r11,r9
8000c424:	f0 16 00 c1 	mcall	r6[772]
8000c428:	14 98       	mov	r8,r10
8000c42a:	16 99       	mov	r9,r11
8000c42c:	10 9a       	mov	r10,r8
8000c42e:	12 9b       	mov	r11,r9
8000c430:	f0 16 00 08 	mcall	r6[32]
8000c434:	18 99       	mov	r9,r12
8000c436:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c43a:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]=0.0;
8000c43c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c440:	30 09       	mov	r9,0
8000c442:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]=0.0;
8000c444:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c448:	30 09       	mov	r9,0
8000c44a:	91 29       	st.w	r8[0x8],r9
	//attitude->qe.v[2]=sin((PI + init_angle)/2.0);
	attitude->qe.v[2]=sin(init_angle/2.0);
8000c44c:	ee fc ff fc 	ld.w	r12,r7[-4]
8000c450:	f0 16 00 02 	mcall	r6[8]
8000c454:	30 08       	mov	r8,0
8000c456:	fc 19 40 00 	movh	r9,0x4000
8000c45a:	f0 16 00 0c 	mcall	r6[48]
8000c45e:	14 98       	mov	r8,r10
8000c460:	16 99       	mov	r9,r11
8000c462:	10 9a       	mov	r10,r8
8000c464:	12 9b       	mov	r11,r9
8000c466:	f0 16 00 bf 	mcall	r6[764]
8000c46a:	14 98       	mov	r8,r10
8000c46c:	16 99       	mov	r9,r11
8000c46e:	10 9a       	mov	r10,r8
8000c470:	12 9b       	mov	r11,r9
8000c472:	f0 16 00 08 	mcall	r6[32]
8000c476:	18 99       	mov	r9,r12
8000c478:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c47c:	91 39       	st.w	r8[0xc],r9
	
	attitude->kp=0.09;
8000c47e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c482:	e0 69 51 ec 	mov	r9,20972
8000c486:	ea 19 3d b8 	orh	r9,0x3db8
8000c48a:	f1 49 00 9c 	st.w	r8[156],r9
	attitude->ki=attitude->kp/15.0;
8000c48e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c492:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000c496:	fc 1b 41 70 	movh	r11,0x4170
8000c49a:	10 9c       	mov	r12,r8
8000c49c:	f0 16 00 0a 	mcall	r6[40]
8000c4a0:	18 98       	mov	r8,r12
8000c4a2:	10 99       	mov	r9,r8
8000c4a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4a8:	f1 49 00 a0 	st.w	r8[160],r9
	
	attitude->kp_mag = 0.1;
8000c4ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4b0:	e0 69 cc cd 	mov	r9,52429
8000c4b4:	ea 19 3d cc 	orh	r9,0x3dcc
8000c4b8:	f1 49 00 a4 	st.w	r8[164],r9
	attitude->ki_mag = attitude->kp_mag/15.0;
8000c4bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4c0:	f0 f8 00 a4 	ld.w	r8,r8[164]
8000c4c4:	fc 1b 41 70 	movh	r11,0x4170
8000c4c8:	10 9c       	mov	r12,r8
8000c4ca:	f0 16 00 0a 	mcall	r6[40]
8000c4ce:	18 98       	mov	r8,r12
8000c4d0:	10 99       	mov	r9,r8
8000c4d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000c4d6:	f1 49 00 a8 	st.w	r8[168],r9
	
	attitude->calibration_level=LEVELING;
8000c4da:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000c4de:	30 18       	mov	r8,1
8000c4e0:	f3 68 00 b8 	st.b	r9[184],r8
	//dt=1.0/samplingrate;
}
8000c4e4:	2f bd       	sub	sp,-20
8000c4e6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000c4ea:	00 00       	add	r0,r0
8000c4ec:	80 00       	ld.sh	r0,r0[0x0]
8000c4ee:	c0 2e       	rcall	8000c0f2 <fast_sqrt+0x6e>

8000c4f0 <qfilter>:


void qfilter(Quat_Attitude_t *attitude, float *rates, float dt, bool simu_mode){
8000c4f0:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000c4f4:	1a 97       	mov	r7,sp
8000c4f6:	fa cd 01 04 	sub	sp,sp,260
8000c4fa:	fe f6 0b 0a 	ld.w	r6,pc[2826]
8000c4fe:	1e 26       	rsub	r6,pc
8000c500:	ef 4c ff 18 	st.w	r7[-232],r12
8000c504:	ef 4b ff 14 	st.w	r7[-236],r11
8000c508:	ef 4a ff 10 	st.w	r7[-240],r10
8000c50c:	12 98       	mov	r8,r9
8000c50e:	ef 68 ff 0c 	st.b	r7[-244],r8
	uint8_t i;
	float  omc[3], omc_mag[3], rvc[3], tmp[3], snorm, norm, s_acc_norm, acc_norm, s_mag_norm, mag_norm;
	UQuat_t qed, qtmp1, up, up_bf, qtmp2, qtmp3;
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
8000c512:	30 08       	mov	r8,0
8000c514:	ef 48 ff 1c 	st.w	r7[-228],r8
8000c518:	fc 18 3f 80 	movh	r8,0x3f80
8000c51c:	ef 48 ff 20 	st.w	r7[-224],r8
8000c520:	30 08       	mov	r8,0
8000c522:	ef 48 ff 24 	st.w	r7[-220],r8
8000c526:	30 08       	mov	r8,0
8000c528:	ef 48 ff 28 	st.w	r7[-216],r8
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c52c:	30 08       	mov	r8,0
8000c52e:	ef 68 ff df 	st.b	r7[-33],r8
8000c532:	c0 c9       	rjmp	8000c74a <qfilter+0x25a>
		attitude->om[i]  = (1.0-GYRO_LPF)*attitude->om[i]+GYRO_LPF*(((float)rates[GYRO_OFFSET+i]-attitude->be[GYRO_OFFSET+i])*attitude->sf[i]);
8000c534:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c538:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c53c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c540:	2e 29       	sub	r9,-30
8000c542:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c546:	10 9c       	mov	r12,r8
8000c548:	f0 16 00 02 	mcall	r6[8]
8000c54c:	e0 68 cc cd 	mov	r8,52429
8000c550:	ea 18 cc cc 	orh	r8,0xcccc
8000c554:	e0 69 cc cc 	mov	r9,52428
8000c558:	ea 19 3f ec 	orh	r9,0x3fec
8000c55c:	f0 16 00 03 	mcall	r6[12]
8000c560:	14 98       	mov	r8,r10
8000c562:	16 99       	mov	r9,r11
8000c564:	10 92       	mov	r2,r8
8000c566:	12 93       	mov	r3,r9
8000c568:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c56c:	a3 68       	lsl	r8,0x2
8000c56e:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c572:	f2 08 00 08 	add	r8,r9,r8
8000c576:	70 09       	ld.w	r9,r8[0x0]
8000c578:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c57c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c580:	2f 4a       	sub	r10,-12
8000c582:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c586:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c58a:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000c58e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c592:	2e ba       	sub	r10,-21
8000c594:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c598:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c59c:	10 9c       	mov	r12,r8
8000c59e:	f0 16 00 02 	mcall	r6[8]
8000c5a2:	e0 68 99 9a 	mov	r8,39322
8000c5a6:	ea 18 99 99 	orh	r8,0x9999
8000c5aa:	e0 69 99 99 	mov	r9,39321
8000c5ae:	ea 19 3f b9 	orh	r9,0x3fb9
8000c5b2:	f0 16 00 03 	mcall	r6[12]
8000c5b6:	14 98       	mov	r8,r10
8000c5b8:	16 99       	mov	r9,r11
8000c5ba:	04 9a       	mov	r10,r2
8000c5bc:	06 9b       	mov	r11,r3
8000c5be:	f0 16 00 05 	mcall	r6[20]
8000c5c2:	14 98       	mov	r8,r10
8000c5c4:	16 99       	mov	r9,r11
8000c5c6:	10 9a       	mov	r10,r8
8000c5c8:	12 9b       	mov	r11,r9
8000c5ca:	f0 16 00 08 	mcall	r6[32]
8000c5ce:	18 9a       	mov	r10,r12
8000c5d0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5d4:	ea c9 ff e2 	sub	r9,r5,-30
8000c5d8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
8000c5dc:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c5e0:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c5e4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c5e8:	2d f9       	sub	r9,-33
8000c5ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c5ee:	10 9c       	mov	r12,r8
8000c5f0:	f0 16 00 02 	mcall	r6[8]
8000c5f4:	e0 68 8f 5c 	mov	r8,36700
8000c5f8:	ea 18 f5 c2 	orh	r8,0xf5c2
8000c5fc:	e0 69 5c 28 	mov	r9,23592
8000c600:	ea 19 3f ef 	orh	r9,0x3fef
8000c604:	f0 16 00 03 	mcall	r6[12]
8000c608:	14 98       	mov	r8,r10
8000c60a:	16 99       	mov	r9,r11
8000c60c:	10 92       	mov	r2,r8
8000c60e:	12 93       	mov	r3,r9
8000c610:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c614:	2f d8       	sub	r8,-3
8000c616:	a3 68       	lsl	r8,0x2
8000c618:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c61c:	f2 08 00 08 	add	r8,r9,r8
8000c620:	70 09       	ld.w	r9,r8[0x0]
8000c622:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c626:	f0 ca ff fd 	sub	r10,r8,-3
8000c62a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c62e:	2f 4a       	sub	r10,-12
8000c630:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c634:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c638:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c63c:	f0 ca ff fd 	sub	r10,r8,-3
8000c640:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c644:	2e ba       	sub	r10,-21
8000c646:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c64a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c64e:	10 9c       	mov	r12,r8
8000c650:	f0 16 00 02 	mcall	r6[8]
8000c654:	e0 68 14 7b 	mov	r8,5243
8000c658:	ea 18 47 ae 	orh	r8,0x47ae
8000c65c:	e0 69 7a e1 	mov	r9,31457
8000c660:	ea 19 3f 94 	orh	r9,0x3f94
8000c664:	f0 16 00 03 	mcall	r6[12]
8000c668:	14 98       	mov	r8,r10
8000c66a:	16 99       	mov	r9,r11
8000c66c:	04 9a       	mov	r10,r2
8000c66e:	06 9b       	mov	r11,r3
8000c670:	f0 16 00 05 	mcall	r6[20]
8000c674:	14 98       	mov	r8,r10
8000c676:	16 99       	mov	r9,r11
8000c678:	10 9a       	mov	r10,r8
8000c67a:	12 9b       	mov	r11,r9
8000c67c:	f0 16 00 08 	mcall	r6[32]
8000c680:	18 9a       	mov	r10,r12
8000c682:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c686:	ea c9 ff df 	sub	r9,r5,-33
8000c68a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
8000c68e:	ef 35 ff df 	ld.ub	r5,r7[-33]
8000c692:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c696:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c69a:	2d c9       	sub	r9,-36
8000c69c:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8000c6a0:	10 9c       	mov	r12,r8
8000c6a2:	f0 16 00 02 	mcall	r6[8]
8000c6a6:	e0 68 cc cd 	mov	r8,52429
8000c6aa:	ea 18 cc cc 	orh	r8,0xcccc
8000c6ae:	e0 69 cc cc 	mov	r9,52428
8000c6b2:	ea 19 3f ec 	orh	r9,0x3fec
8000c6b6:	f0 16 00 03 	mcall	r6[12]
8000c6ba:	14 98       	mov	r8,r10
8000c6bc:	16 99       	mov	r9,r11
8000c6be:	10 92       	mov	r2,r8
8000c6c0:	12 93       	mov	r3,r9
8000c6c2:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6c6:	2f a8       	sub	r8,-6
8000c6c8:	a3 68       	lsl	r8,0x2
8000c6ca:	ee f9 ff 14 	ld.w	r9,r7[-236]
8000c6ce:	f2 08 00 08 	add	r8,r9,r8
8000c6d2:	70 09       	ld.w	r9,r8[0x0]
8000c6d4:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6d8:	f0 ca ff fa 	sub	r10,r8,-6
8000c6dc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6e0:	2f 4a       	sub	r10,-12
8000c6e2:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c6e6:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8000c6ea:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c6ee:	f0 ca ff fa 	sub	r10,r8,-6
8000c6f2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c6f6:	2e ba       	sub	r10,-21
8000c6f8:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8000c6fc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000c700:	10 9c       	mov	r12,r8
8000c702:	f0 16 00 02 	mcall	r6[8]
8000c706:	e0 68 99 9a 	mov	r8,39322
8000c70a:	ea 18 99 99 	orh	r8,0x9999
8000c70e:	e0 69 99 99 	mov	r9,39321
8000c712:	ea 19 3f b9 	orh	r9,0x3fb9
8000c716:	f0 16 00 03 	mcall	r6[12]
8000c71a:	14 98       	mov	r8,r10
8000c71c:	16 99       	mov	r9,r11
8000c71e:	04 9a       	mov	r10,r2
8000c720:	06 9b       	mov	r11,r3
8000c722:	f0 16 00 05 	mcall	r6[20]
8000c726:	14 98       	mov	r8,r10
8000c728:	16 99       	mov	r9,r11
8000c72a:	10 9a       	mov	r10,r8
8000c72c:	12 9b       	mov	r11,r9
8000c72e:	f0 16 00 08 	mcall	r6[32]
8000c732:	18 9a       	mov	r10,r12
8000c734:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c738:	ea c9 ff dc 	sub	r9,r5,-36
8000c73c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	UQuat_t mag_global, mag_corrected_local;
	UQuat_t front_vec_global = {.s=0.0, .v={1.0, 0.0, 0.0}};
	float kp, kp_mag;
	
	
	for (i=0; i<3; i++){
8000c740:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000c744:	2f f8       	sub	r8,-1
8000c746:	ef 68 ff df 	st.b	r7[-33],r8
8000c74a:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000c74e:	30 28       	mov	r8,2
8000c750:	f0 09 18 00 	cp.b	r9,r8
8000c754:	fe 98 fe f0 	brls	8000c534 <qfilter+0x44>
		attitude->a[i]   = (1.0-ACC_LPF)*attitude->a[i]+ACC_LPF*(((float)rates[i+ACC_OFFSET]-attitude->be[i+ACC_OFFSET])*attitude->sf[i+ACC_OFFSET]);
		attitude->mag[i] = (1.0-MAG_LPF)*attitude->mag[i]+MAG_LPF*(((float)rates[i+COMPASS_OFFSET]-attitude->be[i+COMPASS_OFFSET])*attitude->sf[i+COMPASS_OFFSET]);
	}

	// up_bf = qe^-1 *(0,0,0,-1) * qe
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
8000c758:	30 08       	mov	r8,0
8000c75a:	ef 48 ff 7c 	st.w	r7[-132],r8
8000c75e:	30 08       	mov	r8,0
8000c760:	ef 48 ff 80 	st.w	r7[-128],r8
8000c764:	30 08       	mov	r8,0
8000c766:	ef 48 ff 84 	st.w	r7[-124],r8
8000c76a:	fc 18 bf 80 	movh	r8,0xbf80
8000c76e:	ef 48 ff 88 	st.w	r7[-120],r8
	up_bf = quat_global_to_local(attitude->qe, up);
8000c772:	ee ca 00 94 	sub	r10,r7,148
8000c776:	20 4d       	sub	sp,16
8000c778:	1a 98       	mov	r8,sp
8000c77a:	ee c9 00 84 	sub	r9,r7,132
8000c77e:	20 08       	sub	r8,0
8000c780:	20 09       	sub	r9,0
8000c782:	72 0b       	ld.w	r11,r9[0x0]
8000c784:	91 0b       	st.w	r8[0x0],r11
8000c786:	72 1b       	ld.w	r11,r9[0x4]
8000c788:	91 1b       	st.w	r8[0x4],r11
8000c78a:	72 2b       	ld.w	r11,r9[0x8]
8000c78c:	91 2b       	st.w	r8[0x8],r11
8000c78e:	72 39       	ld.w	r9,r9[0xc]
8000c790:	91 39       	st.w	r8[0xc],r9
8000c792:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c796:	20 4d       	sub	sp,16
8000c798:	1a 98       	mov	r8,sp
8000c79a:	20 08       	sub	r8,0
8000c79c:	20 09       	sub	r9,0
8000c79e:	72 0b       	ld.w	r11,r9[0x0]
8000c7a0:	91 0b       	st.w	r8[0x0],r11
8000c7a2:	72 1b       	ld.w	r11,r9[0x4]
8000c7a4:	91 1b       	st.w	r8[0x4],r11
8000c7a6:	72 2b       	ld.w	r11,r9[0x8]
8000c7a8:	91 2b       	st.w	r8[0x8],r11
8000c7aa:	72 39       	ld.w	r9,r9[0xc]
8000c7ac:	91 39       	st.w	r8[0xc],r9
8000c7ae:	14 9c       	mov	r12,r10
8000c7b0:	fe b0 fb 6e 	rcall	8000be8c <quat_global_to_local>
8000c7b4:	2f 8d       	sub	sp,-32
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
8000c7b6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ba:	f0 f9 00 84 	ld.w	r9,r8[132]
8000c7be:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7c2:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c7c6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c7ca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ce:	f0 fa 00 88 	ld.w	r10,r8[136]
8000c7d2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7d6:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c7da:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7de:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c7e2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7e6:	f0 fa 00 8c 	ld.w	r10,r8[140]
8000c7ea:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c7ee:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c7f2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c7f6:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c7fa:	ef 48 ff e8 	st.w	r7[-24],r8
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c7fe:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c802:	f0 16 00 02 	mcall	r6[8]
8000c806:	14 98       	mov	r8,r10
8000c808:	16 99       	mov	r9,r11
8000c80a:	30 05       	mov	r5,0
8000c80c:	e0 6a 8f 5b 	mov	r10,36699
8000c810:	ea 1a f5 c2 	orh	r10,0xf5c2
8000c814:	e0 6b 5c 28 	mov	r11,23592
8000c818:	ea 1b 3f df 	orh	r11,0x3fdf
8000c81c:	f0 16 00 1e 	mcall	r6[120]
8000c820:	18 98       	mov	r8,r12
8000c822:	58 08       	cp.w	r8,0
8000c824:	c0 20       	breq	8000c828 <qfilter+0x338>
8000c826:	30 15       	mov	r5,1
8000c828:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c82c:	c7 30       	breq	8000c912 <qfilter+0x422>
8000c82e:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c832:	f0 16 00 02 	mcall	r6[8]
8000c836:	30 05       	mov	r5,0
8000c838:	e0 68 d7 0b 	mov	r8,55051
8000c83c:	ea 18 70 a3 	orh	r8,0x70a3
8000c840:	e0 69 0a 3d 	mov	r9,2621
8000c844:	ea 19 3f fb 	orh	r9,0x3ffb
8000c848:	f0 16 00 1e 	mcall	r6[120]
8000c84c:	18 98       	mov	r8,r12
8000c84e:	58 08       	cp.w	r8,0
8000c850:	c0 20       	breq	8000c854 <qfilter+0x364>
8000c852:	30 15       	mov	r5,1
8000c854:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c858:	c5 d0       	breq	8000c912 <qfilter+0x422>
		// approximate square root by running 2 iterations of newton method
		acc_norm=fast_sqrt(s_acc_norm);
8000c85a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000c85e:	fe b0 fc 13 	rcall	8000c084 <fast_sqrt>
8000c862:	18 98       	mov	r8,r12
8000c864:	ef 48 ff ec 	st.w	r7[-20],r8

		tmp[0]=attitude->a[0]/acc_norm;
8000c868:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c86c:	f0 f8 00 84 	ld.w	r8,r8[132]
8000c870:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c874:	10 9c       	mov	r12,r8
8000c876:	f0 16 00 0a 	mcall	r6[40]
8000c87a:	18 98       	mov	r8,r12
8000c87c:	ef 48 ff ac 	st.w	r7[-84],r8
		tmp[1]=attitude->a[1]/acc_norm;
8000c880:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c884:	f0 f8 00 88 	ld.w	r8,r8[136]
8000c888:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c88c:	10 9c       	mov	r12,r8
8000c88e:	f0 16 00 0a 	mcall	r6[40]
8000c892:	18 98       	mov	r8,r12
8000c894:	ef 48 ff b0 	st.w	r7[-80],r8
		tmp[2]=attitude->a[2]/acc_norm;
8000c898:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c89c:	f0 f8 00 8c 	ld.w	r8,r8[140]
8000c8a0:	ee fb ff ec 	ld.w	r11,r7[-20]
8000c8a4:	10 9c       	mov	r12,r8
8000c8a6:	f0 16 00 0a 	mcall	r6[40]
8000c8aa:	18 98       	mov	r8,r12
8000c8ac:	ef 48 ff b4 	st.w	r7[-76],r8
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
8000c8b0:	ee f9 ff b0 	ld.w	r9,r7[-80]
8000c8b4:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c8b8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8bc:	ee fa ff b4 	ld.w	r10,r7[-76]
8000c8c0:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c8c4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c8c8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c8cc:	ef 48 ff d0 	st.w	r7[-48],r8
8000c8d0:	ee f9 ff b4 	ld.w	r9,r7[-76]
8000c8d4:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c8d8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8dc:	ee fa ff ac 	ld.w	r10,r7[-84]
8000c8e0:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000c8e4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c8e8:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c8ec:	ef 48 ff d4 	st.w	r7[-44],r8
8000c8f0:	ee f9 ff ac 	ld.w	r9,r7[-84]
8000c8f4:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000c8f8:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c8fc:	ee fa ff b0 	ld.w	r10,r7[-80]
8000c900:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000c904:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c908:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000c90c:	ef 48 ff d8 	st.w	r7[-40],r8
	up.s=0; up.v[0]=UPVECTOR_X; up.v[1]=UPVECTOR_Y; up.v[2]=UPVECTOR_Z;
	up_bf = quat_global_to_local(attitude->qe, up);
	
	// calculate norm of acceleration vector
	s_acc_norm=attitude->a[0]*attitude->a[0]+attitude->a[1]*attitude->a[1]+attitude->a[2]*attitude->a[2];
	if ((s_acc_norm>0.7*0.7)&&(s_acc_norm<1.3*1.3)) {
8000c910:	c0 a8       	rjmp	8000c924 <qfilter+0x434>
		tmp[1]=attitude->a[1]/acc_norm;
		tmp[2]=attitude->a[2]/acc_norm;
		// omc = a x up_bf.v
		CROSS(tmp, up_bf.v, omc);
	} else {
		omc[0]=0;		omc[1]=0; 		omc[2]=0;
8000c912:	30 08       	mov	r8,0
8000c914:	ef 48 ff d0 	st.w	r7[-48],r8
8000c918:	30 08       	mov	r8,0
8000c91a:	ef 48 ff d4 	st.w	r7[-44],r8
8000c91e:	30 08       	mov	r8,0
8000c920:	ef 48 ff d8 	st.w	r7[-40],r8
	}

	// Heading computation
	// transfer 
	qtmp1=quat_from_vector(attitude->mag); 
8000c924:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000c928:	f0 c9 ff 70 	sub	r9,r8,-144
8000c92c:	ee c8 01 04 	sub	r8,r7,260
8000c930:	12 9b       	mov	r11,r9
8000c932:	10 9c       	mov	r12,r8
8000c934:	fe b0 f9 98 	rcall	8000bc64 <quat_from_vector>
8000c938:	ee c8 00 74 	sub	r8,r7,116
8000c93c:	ee c9 01 04 	sub	r9,r7,260
8000c940:	20 08       	sub	r8,0
8000c942:	20 09       	sub	r9,0
8000c944:	72 0a       	ld.w	r10,r9[0x0]
8000c946:	91 0a       	st.w	r8[0x0],r10
8000c948:	72 1a       	ld.w	r10,r9[0x4]
8000c94a:	91 1a       	st.w	r8[0x4],r10
8000c94c:	72 2a       	ld.w	r10,r9[0x8]
8000c94e:	91 2a       	st.w	r8[0x8],r10
8000c950:	72 39       	ld.w	r9,r9[0xc]
8000c952:	91 39       	st.w	r8[0xc],r9
	mag_global = quat_local_to_global(attitude->qe, qtmp1);
8000c954:	ee ca 00 c4 	sub	r10,r7,196
8000c958:	20 4d       	sub	sp,16
8000c95a:	1a 98       	mov	r8,sp
8000c95c:	ee c9 00 74 	sub	r9,r7,116
8000c960:	20 08       	sub	r8,0
8000c962:	20 09       	sub	r9,0
8000c964:	72 0b       	ld.w	r11,r9[0x0]
8000c966:	91 0b       	st.w	r8[0x0],r11
8000c968:	72 1b       	ld.w	r11,r9[0x4]
8000c96a:	91 1b       	st.w	r8[0x4],r11
8000c96c:	72 2b       	ld.w	r11,r9[0x8]
8000c96e:	91 2b       	st.w	r8[0x8],r11
8000c970:	72 39       	ld.w	r9,r9[0xc]
8000c972:	91 39       	st.w	r8[0xc],r9
8000c974:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000c978:	20 4d       	sub	sp,16
8000c97a:	1a 98       	mov	r8,sp
8000c97c:	20 08       	sub	r8,0
8000c97e:	20 09       	sub	r9,0
8000c980:	72 0b       	ld.w	r11,r9[0x0]
8000c982:	91 0b       	st.w	r8[0x0],r11
8000c984:	72 1b       	ld.w	r11,r9[0x4]
8000c986:	91 1b       	st.w	r8[0x4],r11
8000c988:	72 2b       	ld.w	r11,r9[0x8]
8000c98a:	91 2b       	st.w	r8[0x8],r11
8000c98c:	72 39       	ld.w	r9,r9[0xc]
8000c98e:	91 39       	st.w	r8[0xc],r9
8000c990:	14 9c       	mov	r12,r10
8000c992:	fe b0 fa fb 	rcall	8000bf88 <quat_local_to_global>
8000c996:	2f 8d       	sub	sp,-32
	//QI(attitude->qe,qtmp4);
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
8000c998:	ee f9 ff 40 	ld.w	r9,r7[-192]
8000c99c:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000c9a0:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000c9a4:	ee fa ff 44 	ld.w	r10,r7[-188]
8000c9a8:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000c9ac:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9b0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000c9b4:	ee fa ff 48 	ld.w	r10,r7[-184]
8000c9b8:	ee f8 ff 48 	ld.w	r8,r7[-184]
8000c9bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000c9c0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000c9c4:	ef 48 ff f0 	st.w	r7[-16],r8
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000c9c8:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c9cc:	f0 16 00 02 	mcall	r6[8]
8000c9d0:	14 98       	mov	r8,r10
8000c9d2:	16 99       	mov	r9,r11
8000c9d4:	30 05       	mov	r5,0
8000c9d6:	e0 6a 14 7c 	mov	r10,5244
8000c9da:	ea 1a 47 ae 	orh	r10,0x47ae
8000c9de:	e0 6b 7a e1 	mov	r11,31457
8000c9e2:	ea 1b 3f c4 	orh	r11,0x3fc4
8000c9e6:	f0 16 00 1e 	mcall	r6[120]
8000c9ea:	18 98       	mov	r8,r12
8000c9ec:	58 08       	cp.w	r8,0
8000c9ee:	c0 20       	breq	8000c9f2 <qfilter+0x502>
8000c9f0:	30 15       	mov	r5,1
8000c9f2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000c9f6:	e0 80 00 c2 	breq	8000cb7a <qfilter+0x68a>
8000c9fa:	ee fc ff f0 	ld.w	r12,r7[-16]
8000c9fe:	f0 16 00 02 	mcall	r6[8]
8000ca02:	30 05       	mov	r5,0
8000ca04:	e0 68 51 ec 	mov	r8,20972
8000ca08:	ea 18 1e b8 	orh	r8,0x1eb8
8000ca0c:	e0 69 eb 85 	mov	r9,60293
8000ca10:	ea 19 40 09 	orh	r9,0x4009
8000ca14:	f0 16 00 1e 	mcall	r6[120]
8000ca18:	18 98       	mov	r8,r12
8000ca1a:	58 08       	cp.w	r8,0
8000ca1c:	c0 20       	breq	8000ca20 <qfilter+0x530>
8000ca1e:	30 15       	mov	r5,1
8000ca20:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000ca24:	e0 80 00 ab 	breq	8000cb7a <qfilter+0x68a>
	{
		mag_norm=fast_sqrt(s_mag_norm);
8000ca28:	ee fc ff f0 	ld.w	r12,r7[-16]
8000ca2c:	fe b0 fb 2c 	rcall	8000c084 <fast_sqrt>
8000ca30:	18 98       	mov	r8,r12
8000ca32:	ef 48 ff f4 	st.w	r7[-12],r8

		mag_global.v[0]/=mag_norm;
8000ca36:	ee f8 ff 40 	ld.w	r8,r7[-192]
8000ca3a:	ee fb ff f4 	ld.w	r11,r7[-12]
8000ca3e:	10 9c       	mov	r12,r8
8000ca40:	f0 16 00 0a 	mcall	r6[40]
8000ca44:	18 98       	mov	r8,r12
8000ca46:	ef 48 ff 40 	st.w	r7[-192],r8
		mag_global.v[1]/=mag_norm;
8000ca4a:	ee f8 ff 44 	ld.w	r8,r7[-188]
8000ca4e:	ee fb ff f4 	ld.w	r11,r7[-12]
8000ca52:	10 9c       	mov	r12,r8
8000ca54:	f0 16 00 0a 	mcall	r6[40]
8000ca58:	18 98       	mov	r8,r12
8000ca5a:	ef 48 ff 44 	st.w	r7[-188],r8
		mag_global.v[2]=0.0;   // set z component in global frame to 0
8000ca5e:	30 08       	mov	r8,0
8000ca60:	ef 48 ff 48 	st.w	r7[-184],r8

		// transfer magneto vector back to body frame 
		attitude->north_vec=quat_global_to_local(attitude->qe, front_vec_global);		
8000ca64:	ee f5 ff 18 	ld.w	r5,r7[-232]
8000ca68:	ee ca 01 04 	sub	r10,r7,260
8000ca6c:	20 4d       	sub	sp,16
8000ca6e:	1a 98       	mov	r8,sp
8000ca70:	ee c9 00 e4 	sub	r9,r7,228
8000ca74:	20 08       	sub	r8,0
8000ca76:	20 09       	sub	r9,0
8000ca78:	72 0b       	ld.w	r11,r9[0x0]
8000ca7a:	91 0b       	st.w	r8[0x0],r11
8000ca7c:	72 1b       	ld.w	r11,r9[0x4]
8000ca7e:	91 1b       	st.w	r8[0x4],r11
8000ca80:	72 2b       	ld.w	r11,r9[0x8]
8000ca82:	91 2b       	st.w	r8[0x8],r11
8000ca84:	72 39       	ld.w	r9,r9[0xc]
8000ca86:	91 39       	st.w	r8[0xc],r9
8000ca88:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ca8c:	20 4d       	sub	sp,16
8000ca8e:	1a 98       	mov	r8,sp
8000ca90:	20 08       	sub	r8,0
8000ca92:	20 09       	sub	r9,0
8000ca94:	72 0b       	ld.w	r11,r9[0x0]
8000ca96:	91 0b       	st.w	r8[0x0],r11
8000ca98:	72 1b       	ld.w	r11,r9[0x4]
8000ca9a:	91 1b       	st.w	r8[0x4],r11
8000ca9c:	72 2b       	ld.w	r11,r9[0x8]
8000ca9e:	91 2b       	st.w	r8[0x8],r11
8000caa0:	72 39       	ld.w	r9,r9[0xc]
8000caa2:	91 39       	st.w	r8[0xc],r9
8000caa4:	14 9c       	mov	r12,r10
8000caa6:	fe b0 f9 f3 	rcall	8000be8c <quat_global_to_local>
8000caaa:	2f 8d       	sub	sp,-32
8000caac:	ea c8 ff e0 	sub	r8,r5,-32
8000cab0:	ee c9 01 04 	sub	r9,r7,260
8000cab4:	20 08       	sub	r8,0
8000cab6:	20 09       	sub	r9,0
8000cab8:	72 0a       	ld.w	r10,r9[0x0]
8000caba:	91 0a       	st.w	r8[0x0],r10
8000cabc:	72 1a       	ld.w	r10,r9[0x4]
8000cabe:	91 1a       	st.w	r8[0x4],r10
8000cac0:	72 2a       	ld.w	r10,r9[0x8]
8000cac2:	91 2a       	st.w	r8[0x8],r10
8000cac4:	72 39       	ld.w	r9,r9[0xc]
8000cac6:	91 39       	st.w	r8[0xc],r9
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
8000cac8:	ee ca 00 d4 	sub	r10,r7,212
8000cacc:	20 4d       	sub	sp,16
8000cace:	1a 98       	mov	r8,sp
8000cad0:	ee c9 00 c4 	sub	r9,r7,196
8000cad4:	20 08       	sub	r8,0
8000cad6:	20 09       	sub	r9,0
8000cad8:	72 0b       	ld.w	r11,r9[0x0]
8000cada:	91 0b       	st.w	r8[0x0],r11
8000cadc:	72 1b       	ld.w	r11,r9[0x4]
8000cade:	91 1b       	st.w	r8[0x4],r11
8000cae0:	72 2b       	ld.w	r11,r9[0x8]
8000cae2:	91 2b       	st.w	r8[0x8],r11
8000cae4:	72 39       	ld.w	r9,r9[0xc]
8000cae6:	91 39       	st.w	r8[0xc],r9
8000cae8:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000caec:	20 4d       	sub	sp,16
8000caee:	1a 98       	mov	r8,sp
8000caf0:	20 08       	sub	r8,0
8000caf2:	20 09       	sub	r9,0
8000caf4:	72 0b       	ld.w	r11,r9[0x0]
8000caf6:	91 0b       	st.w	r8[0x0],r11
8000caf8:	72 1b       	ld.w	r11,r9[0x4]
8000cafa:	91 1b       	st.w	r8[0x4],r11
8000cafc:	72 2b       	ld.w	r11,r9[0x8]
8000cafe:	91 2b       	st.w	r8[0x8],r11
8000cb00:	72 39       	ld.w	r9,r9[0xc]
8000cb02:	91 39       	st.w	r8[0xc],r9
8000cb04:	14 9c       	mov	r12,r10
8000cb06:	fe b0 f9 c3 	rcall	8000be8c <quat_global_to_local>
8000cb0a:	2f 8d       	sub	sp,-32
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
8000cb0c:	ee f9 ff 34 	ld.w	r9,r7[-204]
8000cb10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb14:	70 b8       	ld.w	r8,r8[0x2c]
8000cb16:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb1a:	ee fa ff 38 	ld.w	r10,r7[-200]
8000cb1e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb22:	70 a8       	ld.w	r8,r8[0x28]
8000cb24:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb28:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb2c:	ef 48 ff c4 	st.w	r7[-60],r8
8000cb30:	ee f9 ff 38 	ld.w	r9,r7[-200]
8000cb34:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb38:	70 98       	ld.w	r8,r8[0x24]
8000cb3a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb3e:	ee fa ff 30 	ld.w	r10,r7[-208]
8000cb42:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb46:	70 b8       	ld.w	r8,r8[0x2c]
8000cb48:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb4c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb50:	ef 48 ff c8 	st.w	r7[-56],r8
8000cb54:	ee f9 ff 30 	ld.w	r9,r7[-208]
8000cb58:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb5c:	70 a8       	ld.w	r8,r8[0x28]
8000cb5e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cb62:	ee fa ff 34 	ld.w	r10,r7[-204]
8000cb66:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cb6a:	70 98       	ld.w	r8,r8[0x24]
8000cb6c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cb70:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8000cb74:	ef 48 ff cc 	st.w	r7[-52],r8
	//QMUL(qtmp4, front_bf, qtmp5);
	//QMUL(qtmp5, attitude->qe, front_bf);
	
	// calculate norm of compass vector
	s_mag_norm=SQR(mag_global.v[0])+SQR(mag_global.v[1])+SQR(mag_global.v[2]);
	if ((s_mag_norm>0.4*0.4)&&(s_mag_norm<1.8*1.8)) 
8000cb78:	c0 a8       	rjmp	8000cb8c <qfilter+0x69c>
		mag_corrected_local=quat_global_to_local(attitude->qe, mag_global);		
		// omc = a x up_bf.v
		CROSS(mag_corrected_local.v, attitude->north_vec.v,  omc_mag);
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
8000cb7a:	30 08       	mov	r8,0
8000cb7c:	ef 48 ff c4 	st.w	r7[-60],r8
8000cb80:	30 08       	mov	r8,0
8000cb82:	ef 48 ff c8 	st.w	r7[-56],r8
8000cb86:	30 08       	mov	r8,0
8000cb88:	ef 48 ff cc 	st.w	r7[-52],r8
	}

	for (i=0; i<3; i++){
8000cb8c:	30 08       	mov	r8,0
8000cb8e:	ef 68 ff df 	st.b	r7[-33],r8
8000cb92:	c3 48       	rjmp	8000cbfa <qfilter+0x70a>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
8000cb94:	ef 3a ff df 	ld.ub	r10,r7[-33]
8000cb98:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000cb9c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cba0:	2e 29       	sub	r9,-30
8000cba2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8000cba6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbaa:	f0 fb 00 9c 	ld.w	r11,r8[156]
8000cbae:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbb2:	a3 68       	lsl	r8,0x2
8000cbb4:	ee 08 00 08 	add	r8,r7,r8
8000cbb8:	f0 f8 ff d0 	ld.w	r8,r8[-48]
8000cbbc:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cbc0:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbc4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cbc8:	f0 fb 00 a4 	ld.w	r11,r8[164]
8000cbcc:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbd0:	a3 68       	lsl	r8,0x2
8000cbd2:	ee 08 00 08 	add	r8,r7,r8
8000cbd6:	f0 f8 ff c4 	ld.w	r8,r8[-60]
8000cbda:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8000cbde:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cbe2:	f4 c8 ff ff 	sub	r8,r10,-1
8000cbe6:	a3 68       	lsl	r8,0x2
8000cbe8:	ee 08 00 08 	add	r8,r7,r8
8000cbec:	f1 49 ff 8c 	st.w	r8[-116],r9
		
	} else {
		omc_mag[0]=0;		omc_mag[1]=0; 		omc_mag[2]=0;
	}

	for (i=0; i<3; i++){
8000cbf0:	ef 38 ff df 	ld.ub	r8,r7[-33]
8000cbf4:	2f f8       	sub	r8,-1
8000cbf6:	ef 68 ff df 	st.b	r7[-33],r8
8000cbfa:	ef 39 ff df 	ld.ub	r9,r7[-33]
8000cbfe:	30 28       	mov	r8,2
8000cc00:	f0 09 18 00 	cp.b	r9,r8
8000cc04:	fe 98 ff c8 	brls	8000cb94 <qfilter+0x6a4>
		qtmp1.v[i] = attitude->om[i] +attitude->kp*omc[i] +attitude->kp_mag*omc_mag[i];
	}
	qtmp1.s=0;
8000cc08:	30 08       	mov	r8,0
8000cc0a:	ef 48 ff 8c 	st.w	r7[-116],r8

	// apply step rotation with corrections
	qed = quat_multi(attitude->qe,qtmp1);
8000cc0e:	ee ca 00 64 	sub	r10,r7,100
8000cc12:	20 4d       	sub	sp,16
8000cc14:	1a 98       	mov	r8,sp
8000cc16:	ee c9 00 74 	sub	r9,r7,116
8000cc1a:	20 08       	sub	r8,0
8000cc1c:	20 09       	sub	r9,0
8000cc1e:	72 0b       	ld.w	r11,r9[0x0]
8000cc20:	91 0b       	st.w	r8[0x0],r11
8000cc22:	72 1b       	ld.w	r11,r9[0x4]
8000cc24:	91 1b       	st.w	r8[0x4],r11
8000cc26:	72 2b       	ld.w	r11,r9[0x8]
8000cc28:	91 2b       	st.w	r8[0x8],r11
8000cc2a:	72 39       	ld.w	r9,r9[0xc]
8000cc2c:	91 39       	st.w	r8[0xc],r9
8000cc2e:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cc32:	20 4d       	sub	sp,16
8000cc34:	1a 98       	mov	r8,sp
8000cc36:	20 08       	sub	r8,0
8000cc38:	20 09       	sub	r9,0
8000cc3a:	72 0b       	ld.w	r11,r9[0x0]
8000cc3c:	91 0b       	st.w	r8[0x0],r11
8000cc3e:	72 1b       	ld.w	r11,r9[0x4]
8000cc40:	91 1b       	st.w	r8[0x4],r11
8000cc42:	72 2b       	ld.w	r11,r9[0x8]
8000cc44:	91 2b       	st.w	r8[0x8],r11
8000cc46:	72 39       	ld.w	r9,r9[0xc]
8000cc48:	91 39       	st.w	r8[0xc],r9
8000cc4a:	14 9c       	mov	r12,r10
8000cc4c:	fe b0 f8 68 	rcall	8000bd1c <quat_multi>
8000cc50:	2f 8d       	sub	sp,-32

	attitude->qe.s=attitude->qe.s+qed.s*dt;
8000cc52:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc56:	70 09       	ld.w	r9,r8[0x0]
8000cc58:	ee fa ff 9c 	ld.w	r10,r7[-100]
8000cc5c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc60:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc64:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc68:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc6c:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0]+=qed.v[0]*dt;
8000cc6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc72:	70 19       	ld.w	r9,r8[0x4]
8000cc74:	ee fa ff a0 	ld.w	r10,r7[-96]
8000cc78:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc7c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc80:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cc84:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc88:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1]+=qed.v[1]*dt;
8000cc8a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cc8e:	70 29       	ld.w	r9,r8[0x8]
8000cc90:	ee fa ff a4 	ld.w	r10,r7[-92]
8000cc94:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cc98:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cc9c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cca0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cca4:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2]+=qed.v[2]*dt;
8000cca6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccaa:	70 39       	ld.w	r9,r8[0xc]
8000ccac:	ee fa ff a8 	ld.w	r10,r7[-88]
8000ccb0:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ccb4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ccb8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ccbc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccc0:	91 39       	st.w	r8[0xc],r9

	snorm=attitude->qe.s*attitude->qe.s+attitude->qe.v[0]*attitude->qe.v[0] + attitude->qe.v[1] * attitude->qe.v[1] + attitude->qe.v[2] * attitude->qe.v[2];
8000ccc2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccc6:	70 09       	ld.w	r9,r8[0x0]
8000ccc8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cccc:	70 08       	ld.w	r8,r8[0x0]
8000ccce:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ccd2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccd6:	70 1a       	ld.w	r10,r8[0x4]
8000ccd8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccdc:	70 18       	ld.w	r8,r8[0x4]
8000ccde:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cce2:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cce6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccea:	70 2a       	ld.w	r10,r8[0x8]
8000ccec:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccf0:	70 28       	ld.w	r8,r8[0x8]
8000ccf2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ccf6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000ccfa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ccfe:	70 3a       	ld.w	r10,r8[0xc]
8000cd00:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd04:	70 38       	ld.w	r8,r8[0xc]
8000cd06:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cd0a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000cd0e:	ef 48 ff e0 	st.w	r7[-32],r8
	if (snorm<0.0001) norm=0.01; else {
8000cd12:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cd16:	f0 16 00 02 	mcall	r6[8]
8000cd1a:	30 05       	mov	r5,0
8000cd1c:	e0 68 43 2d 	mov	r8,17197
8000cd20:	ea 18 eb 1c 	orh	r8,0xeb1c
8000cd24:	e0 69 36 e2 	mov	r9,14050
8000cd28:	ea 19 3f 1a 	orh	r9,0x3f1a
8000cd2c:	f0 16 00 1e 	mcall	r6[120]
8000cd30:	18 98       	mov	r8,r12
8000cd32:	58 08       	cp.w	r8,0
8000cd34:	c0 20       	breq	8000cd38 <qfilter+0x848>
8000cd36:	30 15       	mov	r5,1
8000cd38:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8000cd3c:	c0 80       	breq	8000cd4c <qfilter+0x85c>
8000cd3e:	e0 68 d7 0a 	mov	r8,55050
8000cd42:	ea 18 3c 23 	orh	r8,0x3c23
8000cd46:	ef 48 ff e4 	st.w	r7[-28],r8
8000cd4a:	c0 88       	rjmp	8000cd5a <qfilter+0x86a>
		// approximate square root by running 2 iterations of newton method
		norm=fast_sqrt(snorm);
8000cd4c:	ee fc ff e0 	ld.w	r12,r7[-32]
8000cd50:	fe b0 f9 9a 	rcall	8000c084 <fast_sqrt>
8000cd54:	18 98       	mov	r8,r12
8000cd56:	ef 48 ff e4 	st.w	r7[-28],r8
		//norm=0.5*(norm+(snorm/norm));
	}	
	attitude->qe.s/= norm;
8000cd5a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd5e:	70 08       	ld.w	r8,r8[0x0]
8000cd60:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd64:	10 9c       	mov	r12,r8
8000cd66:	f0 16 00 0a 	mcall	r6[40]
8000cd6a:	18 98       	mov	r8,r12
8000cd6c:	10 99       	mov	r9,r8
8000cd6e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd72:	91 09       	st.w	r8[0x0],r9
	attitude->qe.v[0] /= norm;
8000cd74:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd78:	70 18       	ld.w	r8,r8[0x4]
8000cd7a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd7e:	10 9c       	mov	r12,r8
8000cd80:	f0 16 00 0a 	mcall	r6[40]
8000cd84:	18 98       	mov	r8,r12
8000cd86:	10 99       	mov	r9,r8
8000cd88:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd8c:	91 19       	st.w	r8[0x4],r9
	attitude->qe.v[1] /= norm;
8000cd8e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cd92:	70 28       	ld.w	r8,r8[0x8]
8000cd94:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cd98:	10 9c       	mov	r12,r8
8000cd9a:	f0 16 00 0a 	mcall	r6[40]
8000cd9e:	18 98       	mov	r8,r12
8000cda0:	10 99       	mov	r9,r8
8000cda2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cda6:	91 29       	st.w	r8[0x8],r9
	attitude->qe.v[2] /= norm;
8000cda8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdac:	70 38       	ld.w	r8,r8[0xc]
8000cdae:	ee fb ff e4 	ld.w	r11,r7[-28]
8000cdb2:	10 9c       	mov	r12,r8
8000cdb4:	f0 16 00 0a 	mcall	r6[40]
8000cdb8:	18 98       	mov	r8,r12
8000cdba:	10 99       	mov	r9,r8
8000cdbc:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdc0:	91 39       	st.w	r8[0xc],r9

	// bias estimate update
	attitude->be[0]+= - dt * attitude->ki * omc[0] / attitude->sf[0];
8000cdc2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdc6:	70 c5       	ld.w	r5,r8[0x30]
8000cdc8:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cdcc:	10 99       	mov	r9,r8
8000cdce:	ee 19 80 00 	eorh	r9,0x8000
8000cdd2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdd6:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000cdda:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000cdde:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000cde2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000cde6:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000cdea:	73 59       	ld.w	r9,r9[0x54]
8000cdec:	12 9b       	mov	r11,r9
8000cdee:	10 9c       	mov	r12,r8
8000cdf0:	f0 16 00 0a 	mcall	r6[40]
8000cdf4:	18 98       	mov	r8,r12
8000cdf6:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000cdfa:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cdfe:	91 c9       	st.w	r8[0x30],r9
	attitude->be[1]+= - dt * attitude->ki * omc[1] / attitude->sf[1];
8000ce00:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce04:	70 d5       	ld.w	r5,r8[0x34]
8000ce06:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce0a:	10 99       	mov	r9,r8
8000ce0c:	ee 19 80 00 	eorh	r9,0x8000
8000ce10:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce14:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000ce18:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ce1c:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000ce20:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ce24:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ce28:	73 69       	ld.w	r9,r9[0x58]
8000ce2a:	12 9b       	mov	r11,r9
8000ce2c:	10 9c       	mov	r12,r8
8000ce2e:	f0 16 00 0a 	mcall	r6[40]
8000ce32:	18 98       	mov	r8,r12
8000ce34:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000ce38:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce3c:	91 d9       	st.w	r8[0x34],r9
	attitude->be[2]+= - dt * attitude->ki * omc[2] / attitude->sf[2];
8000ce3e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce42:	70 e5       	ld.w	r5,r8[0x38]
8000ce44:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000ce48:	10 99       	mov	r9,r8
8000ce4a:	ee 19 80 00 	eorh	r9,0x8000
8000ce4e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce52:	f0 f8 00 a0 	ld.w	r8,r8[160]
8000ce56:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ce5a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8000ce5e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8000ce62:	ee f9 ff 18 	ld.w	r9,r7[-232]
8000ce66:	73 79       	ld.w	r9,r9[0x5c]
8000ce68:	12 9b       	mov	r11,r9
8000ce6a:	10 9c       	mov	r12,r8
8000ce6c:	f0 16 00 0a 	mcall	r6[40]
8000ce70:	18 98       	mov	r8,r12
8000ce72:	e5 a0 09 58 	cop	cp0,cr9,cr5,cr8,0x40
8000ce76:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce7a:	91 e9       	st.w	r8[0x38],r9
	// bias estimate update
	//attitude->be[6]+= - dt * attitude->ki_mag * omc[0];
	//attitude->be[7]+= - dt * attitude->ki_mag * omc[1];
	//attitude->be[8]+= - dt * attitude->ki_mag * omc[2];

	switch (attitude->calibration_level) {
8000ce7c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce80:	f1 38 00 b8 	ld.ub	r8,r8[184]
8000ce84:	58 18       	cp.w	r8,1
8000ce86:	c1 c0       	breq	8000cebe <qfilter+0x9ce>
8000ce88:	58 28       	cp.w	r8,2
8000ce8a:	c3 00       	breq	8000ceea <qfilter+0x9fa>
8000ce8c:	58 08       	cp.w	r8,0
8000ce8e:	e0 81 00 94 	brne	8000cfb6 <qfilter+0xac6>
		case OFF:
			kp=attitude->kp;//*(0.1/(0.1+s_acc_norm-1.0));
8000ce92:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ce96:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ce9a:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000ce9e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cea2:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cea6:	fc 1b 41 70 	movh	r11,0x4170
8000ceaa:	10 9c       	mov	r12,r8
8000ceac:	f0 16 00 0a 	mcall	r6[40]
8000ceb0:	18 98       	mov	r8,r12
8000ceb2:	10 99       	mov	r9,r8
8000ceb4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000ceb8:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000cebc:	c9 28       	rjmp	8000cfe0 <qfilter+0xaf0>
		case LEVELING:
			kp=0.3;
8000cebe:	e0 68 99 9a 	mov	r8,39322
8000cec2:	ea 18 3e 99 	orh	r8,0x3e99
8000cec6:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000ceca:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cece:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000ced2:	fc 1b 41 20 	movh	r11,0x4120
8000ced6:	10 9c       	mov	r12,r8
8000ced8:	f0 16 00 0a 	mcall	r6[40]
8000cedc:	18 98       	mov	r8,r12
8000cede:	10 99       	mov	r9,r8
8000cee0:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cee4:	f1 49 00 a0 	st.w	r8[160],r9
			break;
8000cee8:	c7 c8       	rjmp	8000cfe0 <qfilter+0xaf0>
		case LEVEL_PLUS_ACCEL:
			kp=0.3;
8000ceea:	e0 68 99 9a 	mov	r8,39322
8000ceee:	ea 18 3e 99 	orh	r8,0x3e99
8000cef2:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/10.0;
8000cef6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cefa:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cefe:	fc 1b 41 20 	movh	r11,0x4120
8000cf02:	10 9c       	mov	r12,r8
8000cf04:	f0 16 00 0a 	mcall	r6[40]
8000cf08:	18 98       	mov	r8,r12
8000cf0a:	10 99       	mov	r9,r8
8000cf0c:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf10:	f1 49 00 a0 	st.w	r8[160],r9
			attitude->be[3]+=   dt * attitude->kp * (attitude->a[0]-up_bf.v[0]);
8000cf14:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf18:	70 f9       	ld.w	r9,r8[0x3c]
8000cf1a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf1e:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf22:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf26:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf2a:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf2e:	f0 fb 00 84 	ld.w	r11,r8[132]
8000cf32:	ee f8 ff 70 	ld.w	r8,r7[-144]
8000cf36:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cf3a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cf3e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cf42:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf46:	91 f9       	st.w	r8[0x3c],r9
			attitude->be[4]+=   dt * attitude->kp * (attitude->a[1]-up_bf.v[1]);
8000cf48:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf4c:	71 09       	ld.w	r9,r8[0x40]
8000cf4e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf52:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf56:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf5a:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf5e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf62:	f0 fb 00 88 	ld.w	r11,r8[136]
8000cf66:	ee f8 ff 74 	ld.w	r8,r7[-140]
8000cf6a:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cf6e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cf72:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cf76:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf7a:	f1 49 00 40 	st.w	r8[64],r9
			attitude->be[5]+=   dt * attitude->kp * (attitude->a[2]-up_bf.v[2]);
8000cf7e:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf82:	71 19       	ld.w	r9,r8[0x44]
8000cf84:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf88:	f0 fa 00 9c 	ld.w	r10,r8[156]
8000cf8c:	ee f8 ff 10 	ld.w	r8,r7[-240]
8000cf90:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8000cf94:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cf98:	f0 fb 00 8c 	ld.w	r11,r8[140]
8000cf9c:	ee f8 ff 78 	ld.w	r8,r7[-136]
8000cfa0:	e5 a1 08 b8 	cop	cp0,cr8,cr11,cr8,0x42
8000cfa4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000cfa8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8000cfac:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfb0:	f1 49 00 44 	st.w	r8[68],r9
			break;
8000cfb4:	c1 68       	rjmp	8000cfe0 <qfilter+0xaf0>
		default:
			kp=attitude->kp;
8000cfb6:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfba:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cfbe:	ef 48 ff f8 	st.w	r7[-8],r8
			attitude->ki=attitude->kp/15.0;
8000cfc2:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfc6:	f0 f8 00 9c 	ld.w	r8,r8[156]
8000cfca:	fc 1b 41 70 	movh	r11,0x4170
8000cfce:	10 9c       	mov	r12,r8
8000cfd0:	f0 16 00 0a 	mcall	r6[40]
8000cfd4:	18 98       	mov	r8,r12
8000cfd6:	10 99       	mov	r9,r8
8000cfd8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfdc:	f1 49 00 a0 	st.w	r8[160],r9
			break;
	}

	// set up-vector (bodyframe) in attitude
	attitude->up_vec.v[0]=up_bf.v[0];
8000cfe0:	ee f9 ff 70 	ld.w	r9,r7[-144]
8000cfe4:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cfe8:	91 59       	st.w	r8[0x14],r9
	attitude->up_vec.v[1]=up_bf.v[1];
8000cfea:	ee f9 ff 74 	ld.w	r9,r7[-140]
8000cfee:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cff2:	91 69       	st.w	r8[0x18],r9
	attitude->up_vec.v[2]=up_bf.v[2];
8000cff4:	ee f9 ff 78 	ld.w	r9,r7[-136]
8000cff8:	ee f8 ff 18 	ld.w	r8,r7[-232]
8000cffc:	91 79       	st.w	r8[0x1c],r9
	
}
8000cffe:	2b fd       	sub	sp,-260
8000d000:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000d004:	80 00       	ld.sh	r0,r0[0x0]
8000d006:	c3 82       	brcc	8000d076 <initialise_central_data+0x22>

8000d008 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d008:	eb cd 40 c0 	pushm	r6-r7,lr
8000d00c:	1a 97       	mov	r7,sp
8000d00e:	20 3d       	sub	sp,12
8000d010:	49 06       	lddpc	r6,8000d050 <mav_array_memcpy+0x48>
8000d012:	1e 26       	rsub	r6,pc
8000d014:	ef 4c ff fc 	st.w	r7[-4],r12
8000d018:	ef 4b ff f8 	st.w	r7[-8],r11
8000d01c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d020:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d024:	58 08       	cp.w	r8,0
8000d026:	c0 91       	brne	8000d038 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d028:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d02c:	30 0b       	mov	r11,0
8000d02e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d032:	f0 16 00 31 	mcall	r6[196]
8000d036:	c0 98       	rjmp	8000d048 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d038:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d03c:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d040:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d044:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000d048:	2f dd       	sub	sp,-12
8000d04a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d04e:	00 00       	add	r0,r0
8000d050:	80 00       	ld.sh	r0,r0[0x0]
8000d052:	ce 96       	brmi	8000d024 <mav_array_memcpy+0x1c>

8000d054 <initialise_central_data>:
#include "conf_sim_model.h"


static volatile central_data_t centralData;

void initialise_central_data(){
8000d054:	eb cd 40 c0 	pushm	r6-r7,lr
8000d058:	1a 97       	mov	r7,sp
8000d05a:	4d 56       	lddpc	r6,8000d1ac <initialise_central_data+0x158>
8000d05c:	1e 26       	rsub	r6,pc
		
		centralData.controls.rpy[ROLL]=0;
8000d05e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d062:	30 09       	mov	r9,0
8000d064:	f1 49 01 48 	st.w	r8[328],r9
		centralData.controls.rpy[PITCH]=0;
8000d068:	ec f8 00 64 	ld.w	r8,r6[100]
8000d06c:	30 09       	mov	r9,0
8000d06e:	f1 49 01 4c 	st.w	r8[332],r9
		centralData.controls.rpy[YAW]=0;
8000d072:	ec f8 00 64 	ld.w	r8,r6[100]
8000d076:	30 09       	mov	r9,0
8000d078:	f1 49 01 50 	st.w	r8[336],r9
		centralData.controls.thrust=-1.0;
8000d07c:	ec f8 00 64 	ld.w	r8,r6[100]
8000d080:	fc 19 bf 80 	movh	r9,0xbf80
8000d084:	f1 49 01 54 	st.w	r8[340],r9
		
		centralData.number_of_waypoints = 0;
8000d088:	ec f9 00 64 	ld.w	r9,r6[100]
8000d08c:	30 08       	mov	r8,0
8000d08e:	f3 58 0c 64 	st.h	r9[3172],r8

		centralData.simulation_mode=0;
8000d092:	ec f8 00 64 	ld.w	r8,r6[100]
8000d096:	30 09       	mov	r9,0
8000d098:	f1 49 0d 08 	st.w	r8[3336],r9
		
		centralData.waypoint_set = false;
8000d09c:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0a0:	30 08       	mov	r8,0
8000d0a2:	f3 68 0c fc 	st.b	r9[3324],r8
		centralData.waypoint_sending = false;
8000d0a6:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0aa:	30 08       	mov	r8,0
8000d0ac:	f3 68 0c fd 	st.b	r9[3325],r8
		centralData.waypoint_receiving = false;
8000d0b0:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0b4:	30 08       	mov	r8,0
8000d0b6:	f3 68 0c fe 	st.b	r9[3326],r8
		centralData.waypoint_hold_init = false;
8000d0ba:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0be:	30 08       	mov	r8,0
8000d0c0:	f3 68 0c ff 	st.b	r9[3327],r8
		centralData.critical_landing = false;
8000d0c4:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0c8:	30 08       	mov	r8,0
8000d0ca:	f3 68 0d 00 	st.b	r9[3328],r8
		centralData.critical_init = false;
8000d0ce:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0d2:	30 08       	mov	r8,0
8000d0d4:	f3 68 0d 01 	st.b	r9[3329],r8
		
		centralData.collision_avoidance = false;
8000d0d8:	ec f9 00 64 	ld.w	r9,r6[100]
8000d0dc:	30 08       	mov	r8,0
8000d0de:	f3 68 0d 03 	st.b	r9[3331],r8
		
		// default GPS home position
		centralData.position_estimator.localPosition.origin.longitude=   HOME_LONGITUDE;
8000d0e2:	ec fa 00 64 	ld.w	r10,r6[100]
8000d0e6:	e0 68 33 27 	mov	r8,13095
8000d0ea:	ea 18 3f a0 	orh	r8,0x3fa0
8000d0ee:	e0 69 43 a1 	mov	r9,17313
8000d0f2:	ea 19 40 1a 	orh	r9,0x401a
8000d0f6:	f4 e9 09 f4 	st.d	r10[2548],r8
		centralData.position_estimator.localPosition.origin.latitude =   HOME_LATITUDE;
8000d0fa:	ec fa 00 64 	ld.w	r10,r6[100]
8000d0fe:	e0 68 f8 9c 	mov	r8,63644
8000d102:	ea 18 f0 d4 	orh	r8,0xf0d4
8000d106:	e0 69 42 5e 	mov	r9,16990
8000d10a:	ea 19 40 47 	orh	r9,0x4047
8000d10e:	f4 e9 09 fc 	st.d	r10[2556],r8
		centralData.position_estimator.localPosition.origin.altitude =   HOME_ALTITUDE;
8000d112:	ec f8 00 64 	ld.w	r8,r6[100]
8000d116:	fc 19 43 c8 	movh	r9,0x43c8
8000d11a:	f1 49 0a 04 	st.w	r8[2564],r9
		centralData.position_estimator.localPosition.pos[0]=0;
8000d11e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d122:	30 09       	mov	r9,0
8000d124:	f1 49 09 e4 	st.w	r8[2532],r9
		centralData.position_estimator.localPosition.pos[1]=0;
8000d128:	ec f8 00 64 	ld.w	r8,r6[100]
8000d12c:	30 09       	mov	r9,0
8000d12e:	f1 49 09 e8 	st.w	r8[2536],r9
		centralData.position_estimator.localPosition.pos[2]=0;
8000d132:	ec f8 00 64 	ld.w	r8,r6[100]
8000d136:	30 09       	mov	r9,0
8000d138:	f1 49 09 ec 	st.w	r8[2540],r9

		init_simulation(&(centralData.sim_model),&(centralData.imu1.attitude));
8000d13c:	ec f8 00 64 	ld.w	r8,r6[100]
8000d140:	f0 c8 f8 10 	sub	r8,r8,-2032
8000d144:	ec fb 00 64 	ld.w	r11,r6[100]
8000d148:	10 9c       	mov	r12,r8
8000d14a:	f0 16 01 eb 	mcall	r6[1964]
		centralData.sim_model.localPosition = centralData.position_estimator.localPosition;
8000d14e:	ec f9 00 64 	ld.w	r9,r6[100]
8000d152:	ec f8 00 64 	ld.w	r8,r6[100]
8000d156:	f2 cb f6 fc 	sub	r11,r9,-2308
8000d15a:	f0 ca f6 1c 	sub	r10,r8,-2532
8000d15e:	f6 c8 00 00 	sub	r8,r11,0
8000d162:	f4 c9 00 00 	sub	r9,r10,0
8000d166:	72 0c       	ld.w	r12,r9[0x0]
8000d168:	91 0c       	st.w	r8[0x0],r12
8000d16a:	72 1c       	ld.w	r12,r9[0x4]
8000d16c:	91 1c       	st.w	r8[0x4],r12
8000d16e:	72 2c       	ld.w	r12,r9[0x8]
8000d170:	91 2c       	st.w	r8[0x8],r12
8000d172:	72 39       	ld.w	r9,r9[0xc]
8000d174:	91 39       	st.w	r8[0xc],r9
8000d176:	f6 c8 ff f0 	sub	r8,r11,-16
8000d17a:	f4 c9 ff f0 	sub	r9,r10,-16
8000d17e:	72 0c       	ld.w	r12,r9[0x0]
8000d180:	91 0c       	st.w	r8[0x0],r12
8000d182:	72 1c       	ld.w	r12,r9[0x4]
8000d184:	91 1c       	st.w	r8[0x4],r12
8000d186:	72 2c       	ld.w	r12,r9[0x8]
8000d188:	91 2c       	st.w	r8[0x8],r12
8000d18a:	72 39       	ld.w	r9,r9[0xc]
8000d18c:	91 39       	st.w	r8[0xc],r9
8000d18e:	f6 c8 ff e0 	sub	r8,r11,-32
8000d192:	f4 c9 ff e0 	sub	r9,r10,-32
8000d196:	72 0a       	ld.w	r10,r9[0x0]
8000d198:	91 0a       	st.w	r8[0x0],r10
8000d19a:	72 1a       	ld.w	r10,r9[0x4]
8000d19c:	91 1a       	st.w	r8[0x4],r10
8000d19e:	72 2a       	ld.w	r10,r9[0x8]
8000d1a0:	91 2a       	st.w	r8[0x8],r10
8000d1a2:	72 39       	ld.w	r9,r9[0xc]
8000d1a4:	91 39       	st.w	r8[0xc],r9
		
		//init_waypoint_list(centralData.waypoint_list,&(centralData.number_of_waypoints));

}
8000d1a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1aa:	00 00       	add	r0,r0
8000d1ac:	80 00       	ld.sh	r0,r0[0x0]
8000d1ae:	ce e0       	breq	8000d18a <initialise_central_data+0x136>

8000d1b0 <get_central_data>:

central_data_t* get_central_data(void)
{
8000d1b0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1b4:	1a 97       	mov	r7,sp
8000d1b6:	48 46       	lddpc	r6,8000d1c4 <get_central_data+0x14>
8000d1b8:	1e 26       	rsub	r6,pc
	return &centralData;
8000d1ba:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d1be:	10 9c       	mov	r12,r8
8000d1c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1c4:	80 00       	ld.sh	r0,r0[0x0]
8000d1c6:	d0 3c       	*unknown*

8000d1c8 <get_telemetry_upstream>:

byte_stream_t* get_telemetry_upstream() {
8000d1c8:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1cc:	1a 97       	mov	r7,sp
8000d1ce:	48 56       	lddpc	r6,8000d1e0 <get_telemetry_upstream+0x18>
8000d1d0:	1e 26       	rsub	r6,pc
	return centralData.telemetry_up_stream;
8000d1d2:	ec f8 00 64 	ld.w	r8,r6[100]
8000d1d6:	f0 f8 0a 48 	ld.w	r8,r8[2632]
}
8000d1da:	10 9c       	mov	r12,r8
8000d1dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1e0:	80 00       	ld.sh	r0,r0[0x0]
8000d1e2:	d0 54       	*unknown*

8000d1e4 <get_telemetry_downstream>:
byte_stream_t* get_telemetry_downstream() {
8000d1e4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d1e8:	1a 97       	mov	r7,sp
8000d1ea:	48 56       	lddpc	r6,8000d1fc <get_telemetry_downstream+0x18>
8000d1ec:	1e 26       	rsub	r6,pc
	return centralData.telemetry_down_stream;
8000d1ee:	ec f8 00 64 	ld.w	r8,r6[100]
8000d1f2:	f0 f8 0a 44 	ld.w	r8,r8[2628]
}
8000d1f6:	10 9c       	mov	r12,r8
8000d1f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d1fc:	80 00       	ld.sh	r0,r0[0x0]
8000d1fe:	d0 70       	acall	0x7

8000d200 <get_debug_stream>:
byte_stream_t* get_debug_stream() {
8000d200:	eb cd 40 c0 	pushm	r6-r7,lr
8000d204:	1a 97       	mov	r7,sp
8000d206:	48 56       	lddpc	r6,8000d218 <get_debug_stream+0x18>
8000d208:	1e 26       	rsub	r6,pc
	return centralData.debug_out_stream;
8000d20a:	ec f8 00 64 	ld.w	r8,r6[100]
8000d20e:	f0 f8 0a 4c 	ld.w	r8,r8[2636]
}
8000d212:	10 9c       	mov	r12,r8
8000d214:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d218:	80 00       	ld.sh	r0,r0[0x0]
8000d21a:	d0 8c       	*unknown*

8000d21c <get_imu_data>:

Imu_Data_t* get_imu_data() {
8000d21c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d220:	1a 97       	mov	r7,sp
8000d222:	48 46       	lddpc	r6,8000d230 <get_imu_data+0x14>
8000d224:	1e 26       	rsub	r6,pc
	return &centralData.imu1;
8000d226:	ec f8 00 64 	ld.w	r8,r6[100]
}
8000d22a:	10 9c       	mov	r12,r8
8000d22c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d230:	80 00       	ld.sh	r0,r0[0x0]
8000d232:	d0 a8       	*unknown*

8000d234 <get_control_inputs_data>:
Control_Command_t* get_control_inputs_data() {
8000d234:	eb cd 40 c0 	pushm	r6-r7,lr
8000d238:	1a 97       	mov	r7,sp
8000d23a:	48 56       	lddpc	r6,8000d24c <get_control_inputs_data+0x18>
8000d23c:	1e 26       	rsub	r6,pc
	return &centralData.controls;
8000d23e:	ec f8 00 64 	ld.w	r8,r6[100]
8000d242:	f0 c8 fe b8 	sub	r8,r8,-328
8000d246:	10 9c       	mov	r12,r8
8000d248:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d24c:	80 00       	ld.sh	r0,r0[0x0]
8000d24e:	d0 c0       	acall	0xc

8000d250 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8000d250:	eb cd 40 80 	pushm	r7,lr
8000d254:	1a 97       	mov	r7,sp
8000d256:	20 3d       	sub	sp,12
8000d258:	18 98       	mov	r8,r12
8000d25a:	ef 4b ff f4 	st.w	r7[-12],r11
8000d25e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8000d262:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d266:	90 08       	ld.sh	r8,r8[0x0]
8000d268:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d26c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d270:	f3 e8 20 08 	eor	r8,r9,r8
8000d274:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8000d278:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d27c:	a5 68       	lsl	r8,0x4
8000d27e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d282:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d286:	f3 e8 20 08 	eor	r8,r9,r8
8000d28a:	5c 58       	castu.b	r8
8000d28c:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8000d290:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d294:	90 08       	ld.sh	r8,r8[0x0]
8000d296:	5c 78       	castu.h	r8
8000d298:	a9 88       	lsr	r8,0x8
8000d29a:	5c 88       	casts.h	r8
8000d29c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2a0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2a4:	a9 68       	lsl	r8,0x8
8000d2a6:	5c 88       	casts.h	r8
8000d2a8:	f3 e8 20 08 	eor	r8,r9,r8
8000d2ac:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2b0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2b4:	a3 78       	lsl	r8,0x3
8000d2b6:	5c 88       	casts.h	r8
8000d2b8:	f3 e8 20 08 	eor	r8,r9,r8
8000d2bc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8000d2c0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8000d2c4:	a5 88       	lsr	r8,0x4
8000d2c6:	5c 58       	castu.b	r8
8000d2c8:	f3 e8 20 08 	eor	r8,r9,r8
8000d2cc:	5c 88       	casts.h	r8
8000d2ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d2d2:	b2 08       	st.h	r9[0x0],r8
}
8000d2d4:	2f dd       	sub	sp,-12
8000d2d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d2da <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8000d2da:	eb cd 40 80 	pushm	r7,lr
8000d2de:	1a 97       	mov	r7,sp
8000d2e0:	20 1d       	sub	sp,4
8000d2e2:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8000d2e6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d2ea:	3f f8       	mov	r8,-1
8000d2ec:	b2 08       	st.h	r9[0x0],r8
}
8000d2ee:	2f fd       	sub	sp,-4
8000d2f0:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d2f4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8000d2f4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d2f8:	1a 97       	mov	r7,sp
8000d2fa:	20 3d       	sub	sp,12
8000d2fc:	49 76       	lddpc	r6,8000d358 <crc_calculate+0x64>
8000d2fe:	1e 26       	rsub	r6,pc
8000d300:	ef 4c ff f8 	st.w	r7[-8],r12
8000d304:	16 98       	mov	r8,r11
8000d306:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8000d30a:	ee c8 00 02 	sub	r8,r7,2
8000d30e:	10 9c       	mov	r12,r8
8000d310:	ce 5f       	rcall	8000d2da <crc_init>
	while (length--) {
8000d312:	c0 e8       	rjmp	8000d32e <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8000d314:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d318:	11 88       	ld.ub	r8,r8[0x0]
8000d31a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8000d31e:	2f f9       	sub	r9,-1
8000d320:	ef 49 ff f8 	st.w	r7[-8],r9
8000d324:	ee c9 00 02 	sub	r9,r7,2
8000d328:	12 9b       	mov	r11,r9
8000d32a:	10 9c       	mov	r12,r8
8000d32c:	c9 2f       	rcall	8000d250 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8000d32e:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8000d332:	30 08       	mov	r8,0
8000d334:	f0 09 19 00 	cp.h	r9,r8
8000d338:	5f 18       	srne	r8
8000d33a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d33e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8000d342:	20 18       	sub	r8,1
8000d344:	ef 58 ff f4 	st.h	r7[-12],r8
8000d348:	58 09       	cp.w	r9,0
8000d34a:	ce 51       	brne	8000d314 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8000d34c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8000d350:	10 9c       	mov	r12,r8
8000d352:	2f dd       	sub	sp,-12
8000d354:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d358:	80 00       	ld.sh	r0,r0[0x0]
8000d35a:	d1 82       	popm	r10-r11

8000d35c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8000d35c:	eb cd 40 c0 	pushm	r6-r7,lr
8000d360:	1a 97       	mov	r7,sp
8000d362:	20 4d       	sub	sp,16
8000d364:	49 66       	lddpc	r6,8000d3bc <crc_accumulate_buffer+0x60>
8000d366:	1e 26       	rsub	r6,pc
8000d368:	ef 4c ff f8 	st.w	r7[-8],r12
8000d36c:	ef 4b ff f4 	st.w	r7[-12],r11
8000d370:	14 98       	mov	r8,r10
8000d372:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8000d376:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000d37a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8000d37e:	c0 d8       	rjmp	8000d398 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8000d380:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d384:	11 88       	ld.ub	r8,r8[0x0]
8000d386:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d38a:	2f f9       	sub	r9,-1
8000d38c:	ef 49 ff fc 	st.w	r7[-4],r9
8000d390:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d394:	10 9c       	mov	r12,r8
8000d396:	c5 df       	rcall	8000d250 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8000d398:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d39c:	30 08       	mov	r8,0
8000d39e:	f0 09 18 00 	cp.b	r9,r8
8000d3a2:	5f 18       	srne	r8
8000d3a4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8000d3a8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8000d3ac:	20 18       	sub	r8,1
8000d3ae:	ef 68 ff f0 	st.b	r7[-16],r8
8000d3b2:	58 09       	cp.w	r9,0
8000d3b4:	ce 61       	brne	8000d380 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8000d3b6:	2f cd       	sub	sp,-16
8000d3b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3bc:	80 00       	ld.sh	r0,r0[0x0]
8000d3be:	d1 ea       	popm	r4-r11

8000d3c0 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8000d3c0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3c4:	1a 97       	mov	r7,sp
8000d3c6:	20 1d       	sub	sp,4
8000d3c8:	48 96       	lddpc	r6,8000d3ec <mavlink_get_channel_status+0x2c>
8000d3ca:	1e 26       	rsub	r6,pc
8000d3cc:	18 98       	mov	r8,r12
8000d3ce:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8000d3d2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8000d3d6:	f0 09 15 04 	lsl	r9,r8,0x4
8000d3da:	ec f8 09 24 	ld.w	r8,r6[2340]
8000d3de:	f2 08 00 08 	add	r8,r9,r8
}
8000d3e2:	10 9c       	mov	r12,r8
8000d3e4:	2f fd       	sub	sp,-4
8000d3e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d3ea:	00 00       	add	r0,r0
8000d3ec:	80 00       	ld.sh	r0,r0[0x0]
8000d3ee:	d2 4e       	*unknown*

8000d3f0 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8000d3f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d3f4:	1a 97       	mov	r7,sp
8000d3f6:	20 9d       	sub	sp,36
8000d3f8:	4b d6       	lddpc	r6,8000d4ec <_mav_finalize_message_chan_send+0xfc>
8000d3fa:	1e 26       	rsub	r6,pc
8000d3fc:	ef 4c ff ec 	st.w	r7[-20],r12
8000d400:	ef 4a ff e4 	st.w	r7[-28],r10
8000d404:	16 9a       	mov	r10,r11
8000d406:	ef 6a ff e8 	st.b	r7[-24],r10
8000d40a:	ef 69 ff e0 	st.b	r7[-32],r9
8000d40e:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8000d412:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000d416:	5c 58       	castu.b	r8
8000d418:	10 9c       	mov	r12,r8
8000d41a:	cd 3f       	rcall	8000d3c0 <mavlink_get_channel_status>
8000d41c:	18 98       	mov	r8,r12
8000d41e:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8000d422:	3f e8       	mov	r8,-2
8000d424:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8000d428:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d42c:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8000d430:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d434:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d438:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8000d43c:	ec f8 00 74 	ld.w	r8,r6[116]
8000d440:	11 88       	ld.ub	r8,r8[0x0]
8000d442:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8000d446:	ec f8 00 74 	ld.w	r8,r6[116]
8000d44a:	11 98       	ld.ub	r8,r8[0x1]
8000d44c:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8000d450:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d454:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8000d458:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d45c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8000d460:	2f f8       	sub	r8,-1
8000d462:	5c 58       	castu.b	r8
8000d464:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d468:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8000d46c:	ee c8 00 0c 	sub	r8,r7,12
8000d470:	2f f8       	sub	r8,-1
8000d472:	30 5b       	mov	r11,5
8000d474:	10 9c       	mov	r12,r8
8000d476:	c3 ff       	rcall	8000d2f4 <crc_calculate>
8000d478:	18 98       	mov	r8,r12
8000d47a:	5c 88       	casts.h	r8
8000d47c:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8000d480:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8000d484:	ee c8 00 06 	sub	r8,r7,6
8000d488:	12 9a       	mov	r10,r9
8000d48a:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d48e:	10 9c       	mov	r12,r8
8000d490:	c6 6f       	rcall	8000d35c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8000d492:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d496:	ee c9 00 06 	sub	r9,r7,6
8000d49a:	12 9b       	mov	r11,r9
8000d49c:	10 9c       	mov	r12,r8
8000d49e:	cd 9e       	rcall	8000d250 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8000d4a0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d4a4:	5c 58       	castu.b	r8
8000d4a6:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8000d4aa:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8000d4ae:	5c 78       	castu.h	r8
8000d4b0:	a9 88       	lsr	r8,0x8
8000d4b2:	5c 88       	casts.h	r8
8000d4b4:	5c 58       	castu.b	r8
8000d4b6:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8000d4ba:	ee c8 00 0c 	sub	r8,r7,12
8000d4be:	30 6a       	mov	r10,6
8000d4c0:	10 9b       	mov	r11,r8
8000d4c2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4c6:	c1 5c       	rcall	8000d4f0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8000d4c8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8000d4cc:	10 9a       	mov	r10,r8
8000d4ce:	ee fb ff e4 	ld.w	r11,r7[-28]
8000d4d2:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4d6:	c0 dc       	rcall	8000d4f0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8000d4d8:	ee c8 00 10 	sub	r8,r7,16
8000d4dc:	30 2a       	mov	r10,2
8000d4de:	10 9b       	mov	r11,r8
8000d4e0:	ee fc ff ec 	ld.w	r12,r7[-20]
8000d4e4:	c0 6c       	rcall	8000d4f0 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8000d4e6:	2f 7d       	sub	sp,-36
8000d4e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d4ec:	80 00       	ld.sh	r0,r0[0x0]
8000d4ee:	d2 7e       	*unknown*

8000d4f0 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8000d4f0:	eb cd 40 c0 	pushm	r6-r7,lr
8000d4f4:	1a 97       	mov	r7,sp
8000d4f6:	20 4d       	sub	sp,16
8000d4f8:	49 46       	lddpc	r6,8000d548 <_mavlink_send_uart+0x58>
8000d4fa:	1e 26       	rsub	r6,pc
8000d4fc:	ef 4c ff f8 	st.w	r7[-8],r12
8000d500:	ef 4b ff f4 	st.w	r7[-12],r11
8000d504:	14 98       	mov	r8,r10
8000d506:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d50a:	30 08       	mov	r8,0
8000d50c:	ef 58 ff fe 	st.h	r7[-2],r8
8000d510:	c1 28       	rjmp	8000d534 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8000d512:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8000d516:	ee f9 ff f4 	ld.w	r9,r7[-12]
8000d51a:	f2 08 00 08 	add	r8,r9,r8
8000d51e:	11 88       	ld.ub	r8,r8[0x0]
8000d520:	10 9b       	mov	r11,r8
8000d522:	ee fc ff f8 	ld.w	r12,r7[-8]
8000d526:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8000d52a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8000d52e:	2f f8       	sub	r8,-1
8000d530:	ef 58 ff fe 	st.h	r7[-2],r8
8000d534:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8000d538:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8000d53c:	f0 09 19 00 	cp.h	r9,r8
8000d540:	ce 93       	brcs	8000d512 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8000d542:	2f cd       	sub	sp,-16
8000d544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d548:	80 00       	ld.sh	r0,r0[0x0]
8000d54a:	d3 7e       	*unknown*

8000d54c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8000d54c:	eb cd 40 80 	pushm	r7,lr
8000d550:	1a 97       	mov	r7,sp
8000d552:	20 2d       	sub	sp,8
8000d554:	ef 4c ff fc 	st.w	r7[-4],r12
8000d558:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8000d55c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d560:	2f f8       	sub	r8,-1
8000d562:	11 88       	ld.ub	r8,r8[0x0]
8000d564:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d568:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8000d56a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d56e:	f0 c9 ff ff 	sub	r9,r8,-1
8000d572:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d576:	11 88       	ld.ub	r8,r8[0x0]
8000d578:	b2 88       	st.b	r9[0x0],r8
}
8000d57a:	2f ed       	sub	sp,-8
8000d57c:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d580 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8000d580:	eb cd 40 80 	pushm	r7,lr
8000d584:	1a 97       	mov	r7,sp
8000d586:	20 2d       	sub	sp,8
8000d588:	ef 4c ff fc 	st.w	r7[-4],r12
8000d58c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8000d590:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d594:	2f d8       	sub	r8,-3
8000d596:	11 88       	ld.ub	r8,r8[0x0]
8000d598:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d59c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8000d59e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5a2:	f0 c9 ff ff 	sub	r9,r8,-1
8000d5a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5aa:	2f e8       	sub	r8,-2
8000d5ac:	11 88       	ld.ub	r8,r8[0x0]
8000d5ae:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8000d5b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5b4:	f0 c9 ff fe 	sub	r9,r8,-2
8000d5b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5bc:	2f f8       	sub	r8,-1
8000d5be:	11 88       	ld.ub	r8,r8[0x0]
8000d5c0:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8000d5c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5c6:	f0 c9 ff fd 	sub	r9,r8,-3
8000d5ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5ce:	11 88       	ld.ub	r8,r8[0x0]
8000d5d0:	b2 88       	st.b	r9[0x0],r8
}
8000d5d2:	2f ed       	sub	sp,-8
8000d5d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d5d8 <byte_swap_8>:
static inline void byte_swap_8(char *dst, const char *src)
{
8000d5d8:	eb cd 40 80 	pushm	r7,lr
8000d5dc:	1a 97       	mov	r7,sp
8000d5de:	20 2d       	sub	sp,8
8000d5e0:	ef 4c ff fc 	st.w	r7[-4],r12
8000d5e4:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[7];
8000d5e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d5ec:	2f 98       	sub	r8,-7
8000d5ee:	11 88       	ld.ub	r8,r8[0x0]
8000d5f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000d5f4:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[6];
8000d5f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d5fa:	f0 c9 ff ff 	sub	r9,r8,-1
8000d5fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d602:	2f a8       	sub	r8,-6
8000d604:	11 88       	ld.ub	r8,r8[0x0]
8000d606:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[5];
8000d608:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d60c:	f0 c9 ff fe 	sub	r9,r8,-2
8000d610:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d614:	2f b8       	sub	r8,-5
8000d616:	11 88       	ld.ub	r8,r8[0x0]
8000d618:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[4];
8000d61a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d61e:	f0 c9 ff fd 	sub	r9,r8,-3
8000d622:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d626:	2f c8       	sub	r8,-4
8000d628:	11 88       	ld.ub	r8,r8[0x0]
8000d62a:	b2 88       	st.b	r9[0x0],r8
	dst[4] = src[3];
8000d62c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d630:	f0 c9 ff fc 	sub	r9,r8,-4
8000d634:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d638:	2f d8       	sub	r8,-3
8000d63a:	11 88       	ld.ub	r8,r8[0x0]
8000d63c:	b2 88       	st.b	r9[0x0],r8
	dst[5] = src[2];
8000d63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d642:	f0 c9 ff fb 	sub	r9,r8,-5
8000d646:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d64a:	2f e8       	sub	r8,-2
8000d64c:	11 88       	ld.ub	r8,r8[0x0]
8000d64e:	b2 88       	st.b	r9[0x0],r8
	dst[6] = src[1];
8000d650:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d654:	f0 c9 ff fa 	sub	r9,r8,-6
8000d658:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d65c:	2f f8       	sub	r8,-1
8000d65e:	11 88       	ld.ub	r8,r8[0x0]
8000d660:	b2 88       	st.b	r9[0x0],r8
	dst[7] = src[0];
8000d662:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000d666:	f0 c9 ff f9 	sub	r9,r8,-7
8000d66a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d66e:	11 88       	ld.ub	r8,r8[0x0]
8000d670:	b2 88       	st.b	r9[0x0],r8
}
8000d672:	2f ed       	sub	sp,-8
8000d674:	e3 cd 80 80 	ldm	sp++,r7,pc

8000d678 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8000d678:	eb cd 40 c0 	pushm	r6-r7,lr
8000d67c:	1a 97       	mov	r7,sp
8000d67e:	20 3d       	sub	sp,12
8000d680:	49 06       	lddpc	r6,8000d6c0 <mav_array_memcpy+0x48>
8000d682:	1e 26       	rsub	r6,pc
8000d684:	ef 4c ff fc 	st.w	r7[-4],r12
8000d688:	ef 4b ff f8 	st.w	r7[-8],r11
8000d68c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8000d690:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000d694:	58 08       	cp.w	r8,0
8000d696:	c0 91       	brne	8000d6a8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8000d698:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d69c:	30 0b       	mov	r11,0
8000d69e:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d6a2:	f0 16 00 31 	mcall	r6[196]
8000d6a6:	c0 98       	rjmp	8000d6b8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8000d6a8:	ee fa ff f4 	ld.w	r10,r7[-12]
8000d6ac:	ee fb ff f8 	ld.w	r11,r7[-8]
8000d6b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8000d6b4:	f0 16 00 1b 	mcall	r6[108]
	}
}
8000d6b8:	2f dd       	sub	sp,-12
8000d6ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d6be:	00 00       	add	r0,r0
8000d6c0:	80 00       	ld.sh	r0,r0[0x0]
8000d6c2:	d5 06       	*unknown*

8000d6c4 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
8000d6c4:	eb cd 40 c0 	pushm	r6-r7,lr
8000d6c8:	1a 97       	mov	r7,sp
8000d6ca:	20 4d       	sub	sp,16
8000d6cc:	48 e6       	lddpc	r6,8000d704 <_mav_put_char_array+0x40>
8000d6ce:	1e 26       	rsub	r6,pc
8000d6d0:	ef 4c ff fc 	st.w	r7[-4],r12
8000d6d4:	ef 4a ff f4 	st.w	r7[-12],r10
8000d6d8:	12 98       	mov	r8,r9
8000d6da:	16 99       	mov	r9,r11
8000d6dc:	ef 69 ff f8 	st.b	r7[-8],r9
8000d6e0:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
8000d6e4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8000d6e8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8000d6ec:	ee fa ff fc 	ld.w	r10,r7[-4]
8000d6f0:	f4 08 00 08 	add	r8,r10,r8
8000d6f4:	12 9a       	mov	r10,r9
8000d6f6:	ee fb ff f4 	ld.w	r11,r7[-12]
8000d6fa:	10 9c       	mov	r12,r8
8000d6fc:	cb ef       	rcall	8000d678 <mav_array_memcpy>

}
8000d6fe:	2f cd       	sub	sp,-16
8000d700:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d704:	80 00       	ld.sh	r0,r0[0x0]
8000d706:	d5 52       	popm	r0-r3,r8-r9,r11,lr

8000d708 <mavlink_msg_heartbeat_send>:
 * @param system_status System status flag, see MAV_STATE ENUM
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_heartbeat_send(mavlink_channel_t chan, uint8_t type, uint8_t autopilot, uint8_t base_mode, uint32_t custom_mode, uint8_t system_status)
{
8000d708:	eb cd 40 c0 	pushm	r6-r7,lr
8000d70c:	1a 97       	mov	r7,sp
8000d70e:	20 9d       	sub	sp,36
8000d710:	49 b6       	lddpc	r6,8000d77c <mavlink_msg_heartbeat_send+0x74>
8000d712:	1e 26       	rsub	r6,pc
8000d714:	ee ce ff f4 	sub	lr,r7,-12
8000d718:	ef 4c ff f0 	st.w	r7[-16],r12
8000d71c:	ef 48 ff e0 	st.w	r7[-32],r8
8000d720:	7c 08       	ld.w	r8,lr[0x0]
8000d722:	ef 6b ff ec 	st.b	r7[-20],r11
8000d726:	ef 6a ff e8 	st.b	r7[-24],r10
8000d72a:	ef 69 ff e4 	st.b	r7[-28],r9
8000d72e:	ef 68 ff dc 	st.b	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HEARTBEAT_LEN];
	_mav_put_uint32_t(buf, 0, custom_mode);
8000d732:	ee c9 00 20 	sub	r9,r7,32
8000d736:	ee c8 00 0c 	sub	r8,r7,12
8000d73a:	12 9b       	mov	r11,r9
8000d73c:	10 9c       	mov	r12,r8
8000d73e:	c2 1f       	rcall	8000d580 <byte_swap_4>
	_mav_put_uint8_t(buf, 4, type);
8000d740:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8000d744:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 5, autopilot);
8000d748:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8000d74c:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 6, base_mode);
8000d750:	ef 38 ff e4 	ld.ub	r8,r7[-28]
8000d754:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 7, system_status);
8000d758:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000d75c:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 8, 3);
8000d760:	30 38       	mov	r8,3
8000d762:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, buf, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
8000d766:	ee ca 00 0c 	sub	r10,r7,12
8000d76a:	33 28       	mov	r8,50
8000d76c:	30 99       	mov	r9,9
8000d76e:	30 0b       	mov	r11,0
8000d770:	ee fc ff f0 	ld.w	r12,r7[-16]
8000d774:	c3 ee       	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN, MAVLINK_MSG_ID_HEARTBEAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HEARTBEAT, (const char *)&packet, MAVLINK_MSG_ID_HEARTBEAT_LEN);
#endif
#endif
}
8000d776:	2f 7d       	sub	sp,-36
8000d778:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000d77c:	80 00       	ld.sh	r0,r0[0x0]
8000d77e:	d5 96       	*unknown*

8000d780 <mavlink_msg_gps_raw_int_send>:
 * @param satellites_visible Number of satellites visible. If unknown, set to 255
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
{
8000d780:	eb cd 40 e0 	pushm	r5-r7,lr
8000d784:	1a 97       	mov	r7,sp
8000d786:	21 2d       	sub	sp,72
8000d788:	4b 76       	lddpc	r6,8000d864 <mavlink_msg_gps_raw_int_send+0xe4>
8000d78a:	1e 26       	rsub	r6,pc
8000d78c:	ee c5 ff f0 	sub	r5,r7,-16
8000d790:	ef 4c ff dc 	st.w	r7[-36],r12
8000d794:	ee eb ff d4 	st.d	r7[-44],r10
8000d798:	12 9e       	mov	lr,r9
8000d79a:	ef 48 ff cc 	st.w	r7[-52],r8
8000d79e:	6a 2c       	ld.w	r12,r5[0x8]
8000d7a0:	6a 3b       	ld.w	r11,r5[0xc]
8000d7a2:	6a 4a       	ld.w	r10,r5[0x10]
8000d7a4:	6a 59       	ld.w	r9,r5[0x14]
8000d7a6:	6a 68       	ld.w	r8,r5[0x18]
8000d7a8:	ef 6e ff d0 	st.b	r7[-48],lr
8000d7ac:	ef 5c ff c8 	st.h	r7[-56],r12
8000d7b0:	ef 5b ff c4 	st.h	r7[-60],r11
8000d7b4:	ef 5a ff c0 	st.h	r7[-64],r10
8000d7b8:	ef 59 ff bc 	st.h	r7[-68],r9
8000d7bc:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GPS_RAW_INT_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d7c0:	ee c9 00 2c 	sub	r9,r7,44
8000d7c4:	ee c8 00 20 	sub	r8,r7,32
8000d7c8:	12 9b       	mov	r11,r9
8000d7ca:	10 9c       	mov	r12,r8
8000d7cc:	c0 6f       	rcall	8000d5d8 <byte_swap_8>
	_mav_put_int32_t(buf, 8, lat);
8000d7ce:	ee c9 00 34 	sub	r9,r7,52
8000d7d2:	ee c8 00 20 	sub	r8,r7,32
8000d7d6:	2f 88       	sub	r8,-8
8000d7d8:	12 9b       	mov	r11,r9
8000d7da:	10 9c       	mov	r12,r8
8000d7dc:	cd 2e       	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 12, lon);
8000d7de:	0a 99       	mov	r9,r5
8000d7e0:	ee c8 00 20 	sub	r8,r7,32
8000d7e4:	2f 48       	sub	r8,-12
8000d7e6:	12 9b       	mov	r11,r9
8000d7e8:	10 9c       	mov	r12,r8
8000d7ea:	cc be       	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 16, alt);
8000d7ec:	ea c9 ff fc 	sub	r9,r5,-4
8000d7f0:	ee c8 00 20 	sub	r8,r7,32
8000d7f4:	2f 08       	sub	r8,-16
8000d7f6:	12 9b       	mov	r11,r9
8000d7f8:	10 9c       	mov	r12,r8
8000d7fa:	cc 3e       	rcall	8000d580 <byte_swap_4>
	_mav_put_uint16_t(buf, 20, eph);
8000d7fc:	ee c9 00 38 	sub	r9,r7,56
8000d800:	ee c8 00 20 	sub	r8,r7,32
8000d804:	2e c8       	sub	r8,-20
8000d806:	12 9b       	mov	r11,r9
8000d808:	10 9c       	mov	r12,r8
8000d80a:	ca 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 22, epv);
8000d80c:	ee c9 00 3c 	sub	r9,r7,60
8000d810:	ee c8 00 20 	sub	r8,r7,32
8000d814:	2e a8       	sub	r8,-22
8000d816:	12 9b       	mov	r11,r9
8000d818:	10 9c       	mov	r12,r8
8000d81a:	c9 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 24, vel);
8000d81c:	ee c9 00 40 	sub	r9,r7,64
8000d820:	ee c8 00 20 	sub	r8,r7,32
8000d824:	2e 88       	sub	r8,-24
8000d826:	12 9b       	mov	r11,r9
8000d828:	10 9c       	mov	r12,r8
8000d82a:	c9 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, cog);
8000d82c:	ee c9 00 44 	sub	r9,r7,68
8000d830:	ee c8 00 20 	sub	r8,r7,32
8000d834:	2e 68       	sub	r8,-26
8000d836:	12 9b       	mov	r11,r9
8000d838:	10 9c       	mov	r12,r8
8000d83a:	c8 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_uint8_t(buf, 28, fix_type);
8000d83c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8000d840:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 29, satellites_visible);
8000d844:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000d848:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, buf, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
8000d84c:	ee ca 00 20 	sub	r10,r7,32
8000d850:	31 88       	mov	r8,24
8000d852:	31 e9       	mov	r9,30
8000d854:	31 8b       	mov	r11,24
8000d856:	ee fc ff dc 	ld.w	r12,r7[-36]
8000d85a:	fe b0 fd cb 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN, MAVLINK_MSG_ID_GPS_RAW_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GPS_RAW_INT, (const char *)&packet, MAVLINK_MSG_ID_GPS_RAW_INT_LEN);
#endif
#endif
}
8000d85e:	2e ed       	sub	sp,-72
8000d860:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000d864:	80 00       	ld.sh	r0,r0[0x0]
8000d866:	d6 0e       	*unknown*

8000d868 <mavlink_msg_scaled_imu_send>:
 * @param zmag Z Magnetic field (milli tesla)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_imu_send(mavlink_channel_t chan, uint32_t time_boot_ms, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d868:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d86c:	1a 97       	mov	r7,sp
8000d86e:	21 1d       	sub	sp,68
8000d870:	4c 26       	lddpc	r6,8000d978 <mavlink_msg_scaled_imu_send+0x110>
8000d872:	1e 26       	rsub	r6,pc
8000d874:	ee ce ff e4 	sub	lr,r7,-28
8000d878:	ef 4c ff e4 	st.w	r7[-28],r12
8000d87c:	ef 4b ff e0 	st.w	r7[-32],r11
8000d880:	14 91       	mov	r1,r10
8000d882:	12 92       	mov	r2,r9
8000d884:	10 93       	mov	r3,r8
8000d886:	7c 05       	ld.w	r5,lr[0x0]
8000d888:	7c 1c       	ld.w	r12,lr[0x4]
8000d88a:	7c 2b       	ld.w	r11,lr[0x8]
8000d88c:	7c 3a       	ld.w	r10,lr[0xc]
8000d88e:	7c 49       	ld.w	r9,lr[0x10]
8000d890:	7c 58       	ld.w	r8,lr[0x14]
8000d892:	02 9e       	mov	lr,r1
8000d894:	ef 5e ff dc 	st.h	r7[-36],lr
8000d898:	04 9e       	mov	lr,r2
8000d89a:	ef 5e ff d8 	st.h	r7[-40],lr
8000d89e:	06 9e       	mov	lr,r3
8000d8a0:	ef 5e ff d4 	st.h	r7[-44],lr
8000d8a4:	0a 9e       	mov	lr,r5
8000d8a6:	ef 5e ff d0 	st.h	r7[-48],lr
8000d8aa:	ef 5c ff cc 	st.h	r7[-52],r12
8000d8ae:	ef 5b ff c8 	st.h	r7[-56],r11
8000d8b2:	ef 5a ff c4 	st.h	r7[-60],r10
8000d8b6:	ef 59 ff c0 	st.h	r7[-64],r9
8000d8ba:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_IMU_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000d8be:	ee c9 00 20 	sub	r9,r7,32
8000d8c2:	ee c8 00 18 	sub	r8,r7,24
8000d8c6:	12 9b       	mov	r11,r9
8000d8c8:	10 9c       	mov	r12,r8
8000d8ca:	c5 be       	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 4, xacc);
8000d8cc:	ee c9 00 24 	sub	r9,r7,36
8000d8d0:	ee c8 00 18 	sub	r8,r7,24
8000d8d4:	2f c8       	sub	r8,-4
8000d8d6:	12 9b       	mov	r11,r9
8000d8d8:	10 9c       	mov	r12,r8
8000d8da:	c3 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 6, yacc);
8000d8dc:	ee c9 00 28 	sub	r9,r7,40
8000d8e0:	ee c8 00 18 	sub	r8,r7,24
8000d8e4:	2f a8       	sub	r8,-6
8000d8e6:	12 9b       	mov	r11,r9
8000d8e8:	10 9c       	mov	r12,r8
8000d8ea:	c3 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 8, zacc);
8000d8ec:	ee c9 00 2c 	sub	r9,r7,44
8000d8f0:	ee c8 00 18 	sub	r8,r7,24
8000d8f4:	2f 88       	sub	r8,-8
8000d8f6:	12 9b       	mov	r11,r9
8000d8f8:	10 9c       	mov	r12,r8
8000d8fa:	c2 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 10, xgyro);
8000d8fc:	ee c9 00 30 	sub	r9,r7,48
8000d900:	ee c8 00 18 	sub	r8,r7,24
8000d904:	2f 68       	sub	r8,-10
8000d906:	12 9b       	mov	r11,r9
8000d908:	10 9c       	mov	r12,r8
8000d90a:	c2 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 12, ygyro);
8000d90c:	ee c9 00 34 	sub	r9,r7,52
8000d910:	ee c8 00 18 	sub	r8,r7,24
8000d914:	2f 48       	sub	r8,-12
8000d916:	12 9b       	mov	r11,r9
8000d918:	10 9c       	mov	r12,r8
8000d91a:	c1 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 14, zgyro);
8000d91c:	ee c9 00 38 	sub	r9,r7,56
8000d920:	ee c8 00 18 	sub	r8,r7,24
8000d924:	2f 28       	sub	r8,-14
8000d926:	12 9b       	mov	r11,r9
8000d928:	10 9c       	mov	r12,r8
8000d92a:	c1 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 16, xmag);
8000d92c:	ee c9 00 3c 	sub	r9,r7,60
8000d930:	ee c8 00 18 	sub	r8,r7,24
8000d934:	2f 08       	sub	r8,-16
8000d936:	12 9b       	mov	r11,r9
8000d938:	10 9c       	mov	r12,r8
8000d93a:	c0 9e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 18, ymag);
8000d93c:	ee c9 00 40 	sub	r9,r7,64
8000d940:	ee c8 00 18 	sub	r8,r7,24
8000d944:	2e e8       	sub	r8,-18
8000d946:	12 9b       	mov	r11,r9
8000d948:	10 9c       	mov	r12,r8
8000d94a:	c0 1e       	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 20, zmag);
8000d94c:	ee c9 00 44 	sub	r9,r7,68
8000d950:	ee c8 00 18 	sub	r8,r7,24
8000d954:	2e c8       	sub	r8,-20
8000d956:	12 9b       	mov	r11,r9
8000d958:	10 9c       	mov	r12,r8
8000d95a:	fe b0 fd f9 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, buf, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
8000d95e:	ee ca 00 18 	sub	r10,r7,24
8000d962:	e0 68 00 aa 	mov	r8,170
8000d966:	31 69       	mov	r9,22
8000d968:	31 ab       	mov	r11,26
8000d96a:	ee fc ff e4 	ld.w	r12,r7[-28]
8000d96e:	fe b0 fd 41 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN, MAVLINK_MSG_ID_SCALED_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_IMU, (const char *)&packet, MAVLINK_MSG_ID_SCALED_IMU_LEN);
#endif
#endif
}
8000d972:	2e fd       	sub	sp,-68
8000d974:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000d978:	80 00       	ld.sh	r0,r0[0x0]
8000d97a:	d6 f6       	*unknown*

8000d97c <mavlink_msg_raw_imu_send>:
 * @param zmag Z Magnetic field (raw)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_raw_imu_send(mavlink_channel_t chan, uint64_t time_usec, int16_t xacc, int16_t yacc, int16_t zacc, int16_t xgyro, int16_t ygyro, int16_t zgyro, int16_t xmag, int16_t ymag, int16_t zmag)
{
8000d97c:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000d980:	1a 97       	mov	r7,sp
8000d982:	21 3d       	sub	sp,76
8000d984:	4c 76       	lddpc	r6,8000daa0 <mavlink_msg_raw_imu_send+0x124>
8000d986:	1e 26       	rsub	r6,pc
8000d988:	ee ce ff e4 	sub	lr,r7,-28
8000d98c:	ef 4c ff e0 	st.w	r7[-32],r12
8000d990:	ee eb ff d8 	st.d	r7[-40],r10
8000d994:	12 91       	mov	r1,r9
8000d996:	10 92       	mov	r2,r8
8000d998:	7c 03       	ld.w	r3,lr[0x0]
8000d99a:	7c 15       	ld.w	r5,lr[0x4]
8000d99c:	7c 2c       	ld.w	r12,lr[0x8]
8000d99e:	7c 3b       	ld.w	r11,lr[0xc]
8000d9a0:	7c 4a       	ld.w	r10,lr[0x10]
8000d9a2:	7c 59       	ld.w	r9,lr[0x14]
8000d9a4:	7c 68       	ld.w	r8,lr[0x18]
8000d9a6:	02 9e       	mov	lr,r1
8000d9a8:	ef 5e ff d4 	st.h	r7[-44],lr
8000d9ac:	04 9e       	mov	lr,r2
8000d9ae:	ef 5e ff d0 	st.h	r7[-48],lr
8000d9b2:	06 9e       	mov	lr,r3
8000d9b4:	ef 5e ff cc 	st.h	r7[-52],lr
8000d9b8:	0a 9e       	mov	lr,r5
8000d9ba:	ef 5e ff c8 	st.h	r7[-56],lr
8000d9be:	ef 5c ff c4 	st.h	r7[-60],r12
8000d9c2:	ef 5b ff c0 	st.h	r7[-64],r11
8000d9c6:	ef 5a ff bc 	st.h	r7[-68],r10
8000d9ca:	ef 59 ff b8 	st.h	r7[-72],r9
8000d9ce:	ef 58 ff b4 	st.h	r7[-76],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RAW_IMU_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000d9d2:	ee c9 00 28 	sub	r9,r7,40
8000d9d6:	ee c8 00 1c 	sub	r8,r7,28
8000d9da:	12 9b       	mov	r11,r9
8000d9dc:	10 9c       	mov	r12,r8
8000d9de:	fe b0 fd fd 	rcall	8000d5d8 <byte_swap_8>
	_mav_put_int16_t(buf, 8, xacc);
8000d9e2:	ee c9 00 2c 	sub	r9,r7,44
8000d9e6:	ee c8 00 1c 	sub	r8,r7,28
8000d9ea:	2f 88       	sub	r8,-8
8000d9ec:	12 9b       	mov	r11,r9
8000d9ee:	10 9c       	mov	r12,r8
8000d9f0:	fe b0 fd ae 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 10, yacc);
8000d9f4:	ee c9 00 30 	sub	r9,r7,48
8000d9f8:	ee c8 00 1c 	sub	r8,r7,28
8000d9fc:	2f 68       	sub	r8,-10
8000d9fe:	12 9b       	mov	r11,r9
8000da00:	10 9c       	mov	r12,r8
8000da02:	fe b0 fd a5 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 12, zacc);
8000da06:	ee c9 00 34 	sub	r9,r7,52
8000da0a:	ee c8 00 1c 	sub	r8,r7,28
8000da0e:	2f 48       	sub	r8,-12
8000da10:	12 9b       	mov	r11,r9
8000da12:	10 9c       	mov	r12,r8
8000da14:	fe b0 fd 9c 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 14, xgyro);
8000da18:	ee c9 00 38 	sub	r9,r7,56
8000da1c:	ee c8 00 1c 	sub	r8,r7,28
8000da20:	2f 28       	sub	r8,-14
8000da22:	12 9b       	mov	r11,r9
8000da24:	10 9c       	mov	r12,r8
8000da26:	fe b0 fd 93 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 16, ygyro);
8000da2a:	ee c9 00 3c 	sub	r9,r7,60
8000da2e:	ee c8 00 1c 	sub	r8,r7,28
8000da32:	2f 08       	sub	r8,-16
8000da34:	12 9b       	mov	r11,r9
8000da36:	10 9c       	mov	r12,r8
8000da38:	fe b0 fd 8a 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 18, zgyro);
8000da3c:	ee c9 00 40 	sub	r9,r7,64
8000da40:	ee c8 00 1c 	sub	r8,r7,28
8000da44:	2e e8       	sub	r8,-18
8000da46:	12 9b       	mov	r11,r9
8000da48:	10 9c       	mov	r12,r8
8000da4a:	fe b0 fd 81 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 20, xmag);
8000da4e:	ee c9 00 44 	sub	r9,r7,68
8000da52:	ee c8 00 1c 	sub	r8,r7,28
8000da56:	2e c8       	sub	r8,-20
8000da58:	12 9b       	mov	r11,r9
8000da5a:	10 9c       	mov	r12,r8
8000da5c:	fe b0 fd 78 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 22, ymag);
8000da60:	ee c9 00 48 	sub	r9,r7,72
8000da64:	ee c8 00 1c 	sub	r8,r7,28
8000da68:	2e a8       	sub	r8,-22
8000da6a:	12 9b       	mov	r11,r9
8000da6c:	10 9c       	mov	r12,r8
8000da6e:	fe b0 fd 6f 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 24, zmag);
8000da72:	ee c9 00 4c 	sub	r9,r7,76
8000da76:	ee c8 00 1c 	sub	r8,r7,28
8000da7a:	2e 88       	sub	r8,-24
8000da7c:	12 9b       	mov	r11,r9
8000da7e:	10 9c       	mov	r12,r8
8000da80:	fe b0 fd 66 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, buf, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
8000da84:	ee ca 00 1c 	sub	r10,r7,28
8000da88:	e0 68 00 90 	mov	r8,144
8000da8c:	31 a9       	mov	r9,26
8000da8e:	31 bb       	mov	r11,27
8000da90:	ee fc ff e0 	ld.w	r12,r7[-32]
8000da94:	fe b0 fc ae 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN, MAVLINK_MSG_ID_RAW_IMU_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RAW_IMU, (const char *)&packet, MAVLINK_MSG_ID_RAW_IMU_LEN);
#endif
#endif
}
8000da98:	2e dd       	sub	sp,-76
8000da9a:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000da9e:	00 00       	add	r0,r0
8000daa0:	80 00       	ld.sh	r0,r0[0x0]
8000daa2:	d8 0a       	popm	pc,r12=0

8000daa4 <mavlink_msg_scaled_pressure_send>:
 * @param temperature Temperature measurement (0.01 degrees celsius)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
{
8000daa4:	eb cd 40 c0 	pushm	r6-r7,lr
8000daa8:	1a 97       	mov	r7,sp
8000daaa:	20 9d       	sub	sp,36
8000daac:	49 e6       	lddpc	r6,8000db24 <mavlink_msg_scaled_pressure_send+0x80>
8000daae:	1e 26       	rsub	r6,pc
8000dab0:	ef 4c ff ec 	st.w	r7[-20],r12
8000dab4:	ef 4b ff e8 	st.w	r7[-24],r11
8000dab8:	ef 4a ff e4 	st.w	r7[-28],r10
8000dabc:	ef 49 ff e0 	st.w	r7[-32],r9
8000dac0:	ef 58 ff dc 	st.h	r7[-36],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SCALED_PRESSURE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dac4:	ee c9 00 18 	sub	r9,r7,24
8000dac8:	ee c8 00 10 	sub	r8,r7,16
8000dacc:	12 9b       	mov	r11,r9
8000dace:	10 9c       	mov	r12,r8
8000dad0:	fe b0 fd 58 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, press_abs);
8000dad4:	ee c9 00 1c 	sub	r9,r7,28
8000dad8:	ee c8 00 10 	sub	r8,r7,16
8000dadc:	2f c8       	sub	r8,-4
8000dade:	12 9b       	mov	r11,r9
8000dae0:	10 9c       	mov	r12,r8
8000dae2:	fe b0 fd 4f 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, press_diff);
8000dae6:	ee c9 00 20 	sub	r9,r7,32
8000daea:	ee c8 00 10 	sub	r8,r7,16
8000daee:	2f 88       	sub	r8,-8
8000daf0:	12 9b       	mov	r11,r9
8000daf2:	10 9c       	mov	r12,r8
8000daf4:	fe b0 fd 46 	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 12, temperature);
8000daf8:	ee c9 00 24 	sub	r9,r7,36
8000dafc:	ee c8 00 10 	sub	r8,r7,16
8000db00:	2f 48       	sub	r8,-12
8000db02:	12 9b       	mov	r11,r9
8000db04:	10 9c       	mov	r12,r8
8000db06:	fe b0 fd 23 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, buf, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
8000db0a:	ee ca 00 10 	sub	r10,r7,16
8000db0e:	37 38       	mov	r8,115
8000db10:	30 e9       	mov	r9,14
8000db12:	31 db       	mov	r11,29
8000db14:	ee fc ff ec 	ld.w	r12,r7[-20]
8000db18:	fe b0 fc 6c 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN, MAVLINK_MSG_ID_SCALED_PRESSURE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SCALED_PRESSURE, (const char *)&packet, MAVLINK_MSG_ID_SCALED_PRESSURE_LEN);
#endif
#endif
}
8000db1c:	2f 7d       	sub	sp,-36
8000db1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000db22:	00 00       	add	r0,r0
8000db24:	80 00       	ld.sh	r0,r0[0x0]
8000db26:	d9 32       	popm	r0-r7,r11,pc

8000db28 <mavlink_msg_attitude_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed)
{
8000db28:	eb cd 40 e0 	pushm	r5-r7,lr
8000db2c:	1a 97       	mov	r7,sp
8000db2e:	20 cd       	sub	sp,48
8000db30:	4a c6       	lddpc	r6,8000dbe0 <mavlink_msg_attitude_send+0xb8>
8000db32:	1e 26       	rsub	r6,pc
8000db34:	ee c5 ff f0 	sub	r5,r7,-16
8000db38:	ef 4c ff e0 	st.w	r7[-32],r12
8000db3c:	ef 4b ff dc 	st.w	r7[-36],r11
8000db40:	ef 4a ff d8 	st.w	r7[-40],r10
8000db44:	ef 49 ff d4 	st.w	r7[-44],r9
8000db48:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000db4c:	ee c9 00 24 	sub	r9,r7,36
8000db50:	ee c8 00 1c 	sub	r8,r7,28
8000db54:	12 9b       	mov	r11,r9
8000db56:	10 9c       	mov	r12,r8
8000db58:	fe b0 fd 14 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000db5c:	ee c9 00 28 	sub	r9,r7,40
8000db60:	ee c8 00 1c 	sub	r8,r7,28
8000db64:	2f c8       	sub	r8,-4
8000db66:	12 9b       	mov	r11,r9
8000db68:	10 9c       	mov	r12,r8
8000db6a:	fe b0 fd 0b 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000db6e:	ee c9 00 2c 	sub	r9,r7,44
8000db72:	ee c8 00 1c 	sub	r8,r7,28
8000db76:	2f 88       	sub	r8,-8
8000db78:	12 9b       	mov	r11,r9
8000db7a:	10 9c       	mov	r12,r8
8000db7c:	fe b0 fd 02 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000db80:	ee c9 00 30 	sub	r9,r7,48
8000db84:	ee c8 00 1c 	sub	r8,r7,28
8000db88:	2f 48       	sub	r8,-12
8000db8a:	12 9b       	mov	r11,r9
8000db8c:	10 9c       	mov	r12,r8
8000db8e:	fe b0 fc f9 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, rollspeed);
8000db92:	0a 99       	mov	r9,r5
8000db94:	ee c8 00 1c 	sub	r8,r7,28
8000db98:	2f 08       	sub	r8,-16
8000db9a:	12 9b       	mov	r11,r9
8000db9c:	10 9c       	mov	r12,r8
8000db9e:	fe b0 fc f1 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 20, pitchspeed);
8000dba2:	ea c9 ff fc 	sub	r9,r5,-4
8000dba6:	ee c8 00 1c 	sub	r8,r7,28
8000dbaa:	2e c8       	sub	r8,-20
8000dbac:	12 9b       	mov	r11,r9
8000dbae:	10 9c       	mov	r12,r8
8000dbb0:	fe b0 fc e8 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 24, yawspeed);
8000dbb4:	ea c9 ff f8 	sub	r9,r5,-8
8000dbb8:	ee c8 00 1c 	sub	r8,r7,28
8000dbbc:	2e 88       	sub	r8,-24
8000dbbe:	12 9b       	mov	r11,r9
8000dbc0:	10 9c       	mov	r12,r8
8000dbc2:	fe b0 fc df 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, buf, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
8000dbc6:	ee ca 00 1c 	sub	r10,r7,28
8000dbca:	32 78       	mov	r8,39
8000dbcc:	31 c9       	mov	r9,28
8000dbce:	31 eb       	mov	r11,30
8000dbd0:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dbd4:	fe b0 fc 0e 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN, MAVLINK_MSG_ID_ATTITUDE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_LEN);
#endif
#endif
}
8000dbd8:	2f 4d       	sub	sp,-48
8000dbda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dbde:	00 00       	add	r0,r0
8000dbe0:	80 00       	ld.sh	r0,r0[0x0]
8000dbe2:	d9 b6       	*unknown*

8000dbe4 <mavlink_msg_attitude_quaternion_send>:
 * @param yawspeed Yaw angular speed (rad/s)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_attitude_quaternion_send(mavlink_channel_t chan, uint32_t time_boot_ms, float q1, float q2, float q3, float q4, float rollspeed, float pitchspeed, float yawspeed)
{
8000dbe4:	eb cd 40 e0 	pushm	r5-r7,lr
8000dbe8:	1a 97       	mov	r7,sp
8000dbea:	20 dd       	sub	sp,52
8000dbec:	4b 16       	lddpc	r6,8000dcb0 <mavlink_msg_attitude_quaternion_send+0xcc>
8000dbee:	1e 26       	rsub	r6,pc
8000dbf0:	ee c5 ff f0 	sub	r5,r7,-16
8000dbf4:	ef 4c ff dc 	st.w	r7[-36],r12
8000dbf8:	ef 4b ff d8 	st.w	r7[-40],r11
8000dbfc:	ef 4a ff d4 	st.w	r7[-44],r10
8000dc00:	ef 49 ff d0 	st.w	r7[-48],r9
8000dc04:	ef 48 ff cc 	st.w	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dc08:	ee c9 00 28 	sub	r9,r7,40
8000dc0c:	ee c8 00 20 	sub	r8,r7,32
8000dc10:	12 9b       	mov	r11,r9
8000dc12:	10 9c       	mov	r12,r8
8000dc14:	fe b0 fc b6 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, q1);
8000dc18:	ee c9 00 2c 	sub	r9,r7,44
8000dc1c:	ee c8 00 20 	sub	r8,r7,32
8000dc20:	2f c8       	sub	r8,-4
8000dc22:	12 9b       	mov	r11,r9
8000dc24:	10 9c       	mov	r12,r8
8000dc26:	fe b0 fc ad 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, q2);
8000dc2a:	ee c9 00 30 	sub	r9,r7,48
8000dc2e:	ee c8 00 20 	sub	r8,r7,32
8000dc32:	2f 88       	sub	r8,-8
8000dc34:	12 9b       	mov	r11,r9
8000dc36:	10 9c       	mov	r12,r8
8000dc38:	fe b0 fc a4 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, q3);
8000dc3c:	ee c9 00 34 	sub	r9,r7,52
8000dc40:	ee c8 00 20 	sub	r8,r7,32
8000dc44:	2f 48       	sub	r8,-12
8000dc46:	12 9b       	mov	r11,r9
8000dc48:	10 9c       	mov	r12,r8
8000dc4a:	fe b0 fc 9b 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, q4);
8000dc4e:	0a 99       	mov	r9,r5
8000dc50:	ee c8 00 20 	sub	r8,r7,32
8000dc54:	2f 08       	sub	r8,-16
8000dc56:	12 9b       	mov	r11,r9
8000dc58:	10 9c       	mov	r12,r8
8000dc5a:	fe b0 fc 93 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000dc5e:	ea c9 ff fc 	sub	r9,r5,-4
8000dc62:	ee c8 00 20 	sub	r8,r7,32
8000dc66:	2e c8       	sub	r8,-20
8000dc68:	12 9b       	mov	r11,r9
8000dc6a:	10 9c       	mov	r12,r8
8000dc6c:	fe b0 fc 8a 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000dc70:	ea c9 ff f8 	sub	r9,r5,-8
8000dc74:	ee c8 00 20 	sub	r8,r7,32
8000dc78:	2e 88       	sub	r8,-24
8000dc7a:	12 9b       	mov	r11,r9
8000dc7c:	10 9c       	mov	r12,r8
8000dc7e:	fe b0 fc 81 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000dc82:	ea c9 ff f4 	sub	r9,r5,-12
8000dc86:	ee c8 00 20 	sub	r8,r7,32
8000dc8a:	2e 48       	sub	r8,-28
8000dc8c:	12 9b       	mov	r11,r9
8000dc8e:	10 9c       	mov	r12,r8
8000dc90:	fe b0 fc 78 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, buf, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
8000dc94:	ee ca 00 20 	sub	r10,r7,32
8000dc98:	e0 68 00 f6 	mov	r8,246
8000dc9c:	32 09       	mov	r9,32
8000dc9e:	31 fb       	mov	r11,31
8000dca0:	ee fc ff dc 	ld.w	r12,r7[-36]
8000dca4:	fe b0 fb a6 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ATTITUDE_QUATERNION, (const char *)&packet, MAVLINK_MSG_ID_ATTITUDE_QUATERNION_LEN);
#endif
#endif
}
8000dca8:	2f 3d       	sub	sp,-52
8000dcaa:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dcae:	00 00       	add	r0,r0
8000dcb0:	80 00       	ld.sh	r0,r0[0x0]
8000dcb2:	da 72       	popm	r0-r9,r12,pc

8000dcb4 <mavlink_msg_local_position_ned_send>:
 * @param vz Z Speed
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
{
8000dcb4:	eb cd 40 e0 	pushm	r5-r7,lr
8000dcb8:	1a 97       	mov	r7,sp
8000dcba:	20 cd       	sub	sp,48
8000dcbc:	4a c6       	lddpc	r6,8000dd6c <mavlink_msg_local_position_ned_send+0xb8>
8000dcbe:	1e 26       	rsub	r6,pc
8000dcc0:	ee c5 ff f0 	sub	r5,r7,-16
8000dcc4:	ef 4c ff e0 	st.w	r7[-32],r12
8000dcc8:	ef 4b ff dc 	st.w	r7[-36],r11
8000dccc:	ef 4a ff d8 	st.w	r7[-40],r10
8000dcd0:	ef 49 ff d4 	st.w	r7[-44],r9
8000dcd4:	ef 48 ff d0 	st.w	r7[-48],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dcd8:	ee c9 00 24 	sub	r9,r7,36
8000dcdc:	ee c8 00 1c 	sub	r8,r7,28
8000dce0:	12 9b       	mov	r11,r9
8000dce2:	10 9c       	mov	r12,r8
8000dce4:	fe b0 fc 4e 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, x);
8000dce8:	ee c9 00 28 	sub	r9,r7,40
8000dcec:	ee c8 00 1c 	sub	r8,r7,28
8000dcf0:	2f c8       	sub	r8,-4
8000dcf2:	12 9b       	mov	r11,r9
8000dcf4:	10 9c       	mov	r12,r8
8000dcf6:	fe b0 fc 45 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, y);
8000dcfa:	ee c9 00 2c 	sub	r9,r7,44
8000dcfe:	ee c8 00 1c 	sub	r8,r7,28
8000dd02:	2f 88       	sub	r8,-8
8000dd04:	12 9b       	mov	r11,r9
8000dd06:	10 9c       	mov	r12,r8
8000dd08:	fe b0 fc 3c 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, z);
8000dd0c:	ee c9 00 30 	sub	r9,r7,48
8000dd10:	ee c8 00 1c 	sub	r8,r7,28
8000dd14:	2f 48       	sub	r8,-12
8000dd16:	12 9b       	mov	r11,r9
8000dd18:	10 9c       	mov	r12,r8
8000dd1a:	fe b0 fc 33 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, vx);
8000dd1e:	0a 99       	mov	r9,r5
8000dd20:	ee c8 00 1c 	sub	r8,r7,28
8000dd24:	2f 08       	sub	r8,-16
8000dd26:	12 9b       	mov	r11,r9
8000dd28:	10 9c       	mov	r12,r8
8000dd2a:	fe b0 fc 2b 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 20, vy);
8000dd2e:	ea c9 ff fc 	sub	r9,r5,-4
8000dd32:	ee c8 00 1c 	sub	r8,r7,28
8000dd36:	2e c8       	sub	r8,-20
8000dd38:	12 9b       	mov	r11,r9
8000dd3a:	10 9c       	mov	r12,r8
8000dd3c:	fe b0 fc 22 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 24, vz);
8000dd40:	ea c9 ff f8 	sub	r9,r5,-8
8000dd44:	ee c8 00 1c 	sub	r8,r7,28
8000dd48:	2e 88       	sub	r8,-24
8000dd4a:	12 9b       	mov	r11,r9
8000dd4c:	10 9c       	mov	r12,r8
8000dd4e:	fe b0 fc 19 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, buf, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
8000dd52:	ee ca 00 1c 	sub	r10,r7,28
8000dd56:	e0 68 00 b9 	mov	r8,185
8000dd5a:	31 c9       	mov	r9,28
8000dd5c:	32 0b       	mov	r11,32
8000dd5e:	ee fc ff e0 	ld.w	r12,r7[-32]
8000dd62:	fe b0 fb 47 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN, MAVLINK_MSG_ID_LOCAL_POSITION_NED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_LOCAL_POSITION_NED, (const char *)&packet, MAVLINK_MSG_ID_LOCAL_POSITION_NED_LEN);
#endif
#endif
}
8000dd66:	2f 4d       	sub	sp,-48
8000dd68:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000dd6c:	80 00       	ld.sh	r0,r0[0x0]
8000dd6e:	db 42       	popm	r8-r9,r11-r12,pc

8000dd70 <mavlink_msg_global_position_int_send>:
 * @param hdg Compass heading in degrees * 100, 0.0..359.99 degrees. If unknown, set to: UINT16_MAX
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_global_position_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, int32_t lat, int32_t lon, int32_t alt, int32_t relative_alt, int16_t vx, int16_t vy, int16_t vz, uint16_t hdg)
{
8000dd70:	eb cd 40 e0 	pushm	r5-r7,lr
8000dd74:	1a 97       	mov	r7,sp
8000dd76:	21 0d       	sub	sp,64
8000dd78:	4b b6       	lddpc	r6,8000de64 <mavlink_msg_global_position_int_send+0xf4>
8000dd7a:	1e 26       	rsub	r6,pc
8000dd7c:	ee c5 ff f0 	sub	r5,r7,-16
8000dd80:	ef 4c ff e0 	st.w	r7[-32],r12
8000dd84:	ef 4b ff dc 	st.w	r7[-36],r11
8000dd88:	ef 4a ff d8 	st.w	r7[-40],r10
8000dd8c:	ef 49 ff d4 	st.w	r7[-44],r9
8000dd90:	ef 48 ff d0 	st.w	r7[-48],r8
8000dd94:	6a 1b       	ld.w	r11,r5[0x4]
8000dd96:	6a 2a       	ld.w	r10,r5[0x8]
8000dd98:	6a 39       	ld.w	r9,r5[0xc]
8000dd9a:	6a 48       	ld.w	r8,r5[0x10]
8000dd9c:	ef 5b ff cc 	st.h	r7[-52],r11
8000dda0:	ef 5a ff c8 	st.h	r7[-56],r10
8000dda4:	ef 59 ff c4 	st.h	r7[-60],r9
8000dda8:	ef 58 ff c0 	st.h	r7[-64],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000ddac:	ee c9 00 24 	sub	r9,r7,36
8000ddb0:	ee c8 00 1c 	sub	r8,r7,28
8000ddb4:	12 9b       	mov	r11,r9
8000ddb6:	10 9c       	mov	r12,r8
8000ddb8:	fe b0 fb e4 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 4, lat);
8000ddbc:	ee c9 00 28 	sub	r9,r7,40
8000ddc0:	ee c8 00 1c 	sub	r8,r7,28
8000ddc4:	2f c8       	sub	r8,-4
8000ddc6:	12 9b       	mov	r11,r9
8000ddc8:	10 9c       	mov	r12,r8
8000ddca:	fe b0 fb db 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 8, lon);
8000ddce:	ee c9 00 2c 	sub	r9,r7,44
8000ddd2:	ee c8 00 1c 	sub	r8,r7,28
8000ddd6:	2f 88       	sub	r8,-8
8000ddd8:	12 9b       	mov	r11,r9
8000ddda:	10 9c       	mov	r12,r8
8000dddc:	fe b0 fb d2 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 12, alt);
8000dde0:	ee c9 00 30 	sub	r9,r7,48
8000dde4:	ee c8 00 1c 	sub	r8,r7,28
8000dde8:	2f 48       	sub	r8,-12
8000ddea:	12 9b       	mov	r11,r9
8000ddec:	10 9c       	mov	r12,r8
8000ddee:	fe b0 fb c9 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 16, relative_alt);
8000ddf2:	0a 99       	mov	r9,r5
8000ddf4:	ee c8 00 1c 	sub	r8,r7,28
8000ddf8:	2f 08       	sub	r8,-16
8000ddfa:	12 9b       	mov	r11,r9
8000ddfc:	10 9c       	mov	r12,r8
8000ddfe:	fe b0 fb c1 	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 20, vx);
8000de02:	ee c9 00 34 	sub	r9,r7,52
8000de06:	ee c8 00 1c 	sub	r8,r7,28
8000de0a:	2e c8       	sub	r8,-20
8000de0c:	12 9b       	mov	r11,r9
8000de0e:	10 9c       	mov	r12,r8
8000de10:	fe b0 fb 9e 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 22, vy);
8000de14:	ee c9 00 38 	sub	r9,r7,56
8000de18:	ee c8 00 1c 	sub	r8,r7,28
8000de1c:	2e a8       	sub	r8,-22
8000de1e:	12 9b       	mov	r11,r9
8000de20:	10 9c       	mov	r12,r8
8000de22:	fe b0 fb 95 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 24, vz);
8000de26:	ee c9 00 3c 	sub	r9,r7,60
8000de2a:	ee c8 00 1c 	sub	r8,r7,28
8000de2e:	2e 88       	sub	r8,-24
8000de30:	12 9b       	mov	r11,r9
8000de32:	10 9c       	mov	r12,r8
8000de34:	fe b0 fb 8c 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 26, hdg);
8000de38:	ee c9 00 40 	sub	r9,r7,64
8000de3c:	ee c8 00 1c 	sub	r8,r7,28
8000de40:	2e 68       	sub	r8,-26
8000de42:	12 9b       	mov	r11,r9
8000de44:	10 9c       	mov	r12,r8
8000de46:	fe b0 fb 83 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, buf, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
8000de4a:	ee ca 00 1c 	sub	r10,r7,28
8000de4e:	36 88       	mov	r8,104
8000de50:	31 c9       	mov	r9,28
8000de52:	32 1b       	mov	r11,33
8000de54:	ee fc ff e0 	ld.w	r12,r7[-32]
8000de58:	fe b0 fa cc 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_GLOBAL_POSITION_INT, (const char *)&packet, MAVLINK_MSG_ID_GLOBAL_POSITION_INT_LEN);
#endif
#endif
}
8000de5c:	2f 0d       	sub	sp,-64
8000de5e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000de62:	00 00       	add	r0,r0
8000de64:	80 00       	ld.sh	r0,r0[0x0]
8000de66:	db fe       	*unknown*

8000de68 <mavlink_msg_rc_channels_scaled_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_scaled_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, int16_t chan1_scaled, int16_t chan2_scaled, int16_t chan3_scaled, int16_t chan4_scaled, int16_t chan5_scaled, int16_t chan6_scaled, int16_t chan7_scaled, int16_t chan8_scaled, uint8_t rssi)
{
8000de68:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000de6c:	1a 97       	mov	r7,sp
8000de6e:	21 2d       	sub	sp,72
8000de70:	4c 86       	lddpc	r6,8000df90 <mavlink_msg_rc_channels_scaled_send+0x128>
8000de72:	1e 26       	rsub	r6,pc
8000de74:	ee ce ff e0 	sub	lr,r7,-32
8000de78:	ef 4c ff e4 	st.w	r7[-28],r12
8000de7c:	ef 4b ff e0 	st.w	r7[-32],r11
8000de80:	14 90       	mov	r0,r10
8000de82:	12 91       	mov	r1,r9
8000de84:	10 92       	mov	r2,r8
8000de86:	7c 03       	ld.w	r3,lr[0x0]
8000de88:	7c 15       	ld.w	r5,lr[0x4]
8000de8a:	7c 2c       	ld.w	r12,lr[0x8]
8000de8c:	7c 3b       	ld.w	r11,lr[0xc]
8000de8e:	7c 4a       	ld.w	r10,lr[0x10]
8000de90:	7c 59       	ld.w	r9,lr[0x14]
8000de92:	7c 68       	ld.w	r8,lr[0x18]
8000de94:	00 9e       	mov	lr,r0
8000de96:	ef 6e ff dc 	st.b	r7[-36],lr
8000de9a:	02 9e       	mov	lr,r1
8000de9c:	ef 5e ff d8 	st.h	r7[-40],lr
8000dea0:	04 9e       	mov	lr,r2
8000dea2:	ef 5e ff d4 	st.h	r7[-44],lr
8000dea6:	06 9e       	mov	lr,r3
8000dea8:	ef 5e ff d0 	st.h	r7[-48],lr
8000deac:	0a 9e       	mov	lr,r5
8000deae:	ef 5e ff cc 	st.h	r7[-52],lr
8000deb2:	ef 5c ff c8 	st.h	r7[-56],r12
8000deb6:	ef 5b ff c4 	st.h	r7[-60],r11
8000deba:	ef 5a ff c0 	st.h	r7[-64],r10
8000debe:	ef 59 ff bc 	st.h	r7[-68],r9
8000dec2:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dec6:	ee c9 00 20 	sub	r9,r7,32
8000deca:	ee c8 00 18 	sub	r8,r7,24
8000dece:	12 9b       	mov	r11,r9
8000ded0:	10 9c       	mov	r12,r8
8000ded2:	fe b0 fb 57 	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 4, chan1_scaled);
8000ded6:	ee c9 00 28 	sub	r9,r7,40
8000deda:	ee c8 00 18 	sub	r8,r7,24
8000dede:	2f c8       	sub	r8,-4
8000dee0:	12 9b       	mov	r11,r9
8000dee2:	10 9c       	mov	r12,r8
8000dee4:	fe b0 fb 34 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 6, chan2_scaled);
8000dee8:	ee c9 00 2c 	sub	r9,r7,44
8000deec:	ee c8 00 18 	sub	r8,r7,24
8000def0:	2f a8       	sub	r8,-6
8000def2:	12 9b       	mov	r11,r9
8000def4:	10 9c       	mov	r12,r8
8000def6:	fe b0 fb 2b 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 8, chan3_scaled);
8000defa:	ee c9 00 30 	sub	r9,r7,48
8000defe:	ee c8 00 18 	sub	r8,r7,24
8000df02:	2f 88       	sub	r8,-8
8000df04:	12 9b       	mov	r11,r9
8000df06:	10 9c       	mov	r12,r8
8000df08:	fe b0 fb 22 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 10, chan4_scaled);
8000df0c:	ee c9 00 34 	sub	r9,r7,52
8000df10:	ee c8 00 18 	sub	r8,r7,24
8000df14:	2f 68       	sub	r8,-10
8000df16:	12 9b       	mov	r11,r9
8000df18:	10 9c       	mov	r12,r8
8000df1a:	fe b0 fb 19 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 12, chan5_scaled);
8000df1e:	ee c9 00 38 	sub	r9,r7,56
8000df22:	ee c8 00 18 	sub	r8,r7,24
8000df26:	2f 48       	sub	r8,-12
8000df28:	12 9b       	mov	r11,r9
8000df2a:	10 9c       	mov	r12,r8
8000df2c:	fe b0 fb 10 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 14, chan6_scaled);
8000df30:	ee c9 00 3c 	sub	r9,r7,60
8000df34:	ee c8 00 18 	sub	r8,r7,24
8000df38:	2f 28       	sub	r8,-14
8000df3a:	12 9b       	mov	r11,r9
8000df3c:	10 9c       	mov	r12,r8
8000df3e:	fe b0 fb 07 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 16, chan7_scaled);
8000df42:	ee c9 00 40 	sub	r9,r7,64
8000df46:	ee c8 00 18 	sub	r8,r7,24
8000df4a:	2f 08       	sub	r8,-16
8000df4c:	12 9b       	mov	r11,r9
8000df4e:	10 9c       	mov	r12,r8
8000df50:	fe b0 fa fe 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 18, chan8_scaled);
8000df54:	ee c9 00 44 	sub	r9,r7,68
8000df58:	ee c8 00 18 	sub	r8,r7,24
8000df5c:	2e e8       	sub	r8,-18
8000df5e:	12 9b       	mov	r11,r9
8000df60:	10 9c       	mov	r12,r8
8000df62:	fe b0 fa f5 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000df66:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000df6a:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000df6e:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000df72:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, buf, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
8000df76:	ee ca 00 18 	sub	r10,r7,24
8000df7a:	e0 68 00 ed 	mov	r8,237
8000df7e:	31 69       	mov	r9,22
8000df80:	32 2b       	mov	r11,34
8000df82:	ee fc ff e4 	ld.w	r12,r7[-28]
8000df86:	fe b0 fa 35 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_SCALED, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_SCALED_LEN);
#endif
#endif
}
8000df8a:	2e ed       	sub	sp,-72
8000df8c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000df90:	80 00       	ld.sh	r0,r0[0x0]
8000df92:	dc f6       	*unknown*

8000df94 <mavlink_msg_rc_channels_raw_send>:
 * @param rssi Receive signal strength indicator, 0: 0%, 100: 100%, 255: invalid/unknown.
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_rc_channels_raw_send(mavlink_channel_t chan, uint32_t time_boot_ms, uint8_t port, uint16_t chan1_raw, uint16_t chan2_raw, uint16_t chan3_raw, uint16_t chan4_raw, uint16_t chan5_raw, uint16_t chan6_raw, uint16_t chan7_raw, uint16_t chan8_raw, uint8_t rssi)
{
8000df94:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000df98:	1a 97       	mov	r7,sp
8000df9a:	21 2d       	sub	sp,72
8000df9c:	4c 86       	lddpc	r6,8000e0bc <mavlink_msg_rc_channels_raw_send+0x128>
8000df9e:	1e 26       	rsub	r6,pc
8000dfa0:	ee ce ff e0 	sub	lr,r7,-32
8000dfa4:	ef 4c ff e4 	st.w	r7[-28],r12
8000dfa8:	ef 4b ff e0 	st.w	r7[-32],r11
8000dfac:	14 90       	mov	r0,r10
8000dfae:	12 91       	mov	r1,r9
8000dfb0:	10 92       	mov	r2,r8
8000dfb2:	7c 03       	ld.w	r3,lr[0x0]
8000dfb4:	7c 15       	ld.w	r5,lr[0x4]
8000dfb6:	7c 2c       	ld.w	r12,lr[0x8]
8000dfb8:	7c 3b       	ld.w	r11,lr[0xc]
8000dfba:	7c 4a       	ld.w	r10,lr[0x10]
8000dfbc:	7c 59       	ld.w	r9,lr[0x14]
8000dfbe:	7c 68       	ld.w	r8,lr[0x18]
8000dfc0:	00 9e       	mov	lr,r0
8000dfc2:	ef 6e ff dc 	st.b	r7[-36],lr
8000dfc6:	02 9e       	mov	lr,r1
8000dfc8:	ef 5e ff d8 	st.h	r7[-40],lr
8000dfcc:	04 9e       	mov	lr,r2
8000dfce:	ef 5e ff d4 	st.h	r7[-44],lr
8000dfd2:	06 9e       	mov	lr,r3
8000dfd4:	ef 5e ff d0 	st.h	r7[-48],lr
8000dfd8:	0a 9e       	mov	lr,r5
8000dfda:	ef 5e ff cc 	st.h	r7[-52],lr
8000dfde:	ef 5c ff c8 	st.h	r7[-56],r12
8000dfe2:	ef 5b ff c4 	st.h	r7[-60],r11
8000dfe6:	ef 5a ff c0 	st.h	r7[-64],r10
8000dfea:	ef 59 ff bc 	st.h	r7[-68],r9
8000dfee:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000dff2:	ee c9 00 20 	sub	r9,r7,32
8000dff6:	ee c8 00 18 	sub	r8,r7,24
8000dffa:	12 9b       	mov	r11,r9
8000dffc:	10 9c       	mov	r12,r8
8000dffe:	fe b0 fa c1 	rcall	8000d580 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, chan1_raw);
8000e002:	ee c9 00 28 	sub	r9,r7,40
8000e006:	ee c8 00 18 	sub	r8,r7,24
8000e00a:	2f c8       	sub	r8,-4
8000e00c:	12 9b       	mov	r11,r9
8000e00e:	10 9c       	mov	r12,r8
8000e010:	fe b0 fa 9e 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, chan2_raw);
8000e014:	ee c9 00 2c 	sub	r9,r7,44
8000e018:	ee c8 00 18 	sub	r8,r7,24
8000e01c:	2f a8       	sub	r8,-6
8000e01e:	12 9b       	mov	r11,r9
8000e020:	10 9c       	mov	r12,r8
8000e022:	fe b0 fa 95 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, chan3_raw);
8000e026:	ee c9 00 30 	sub	r9,r7,48
8000e02a:	ee c8 00 18 	sub	r8,r7,24
8000e02e:	2f 88       	sub	r8,-8
8000e030:	12 9b       	mov	r11,r9
8000e032:	10 9c       	mov	r12,r8
8000e034:	fe b0 fa 8c 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, chan4_raw);
8000e038:	ee c9 00 34 	sub	r9,r7,52
8000e03c:	ee c8 00 18 	sub	r8,r7,24
8000e040:	2f 68       	sub	r8,-10
8000e042:	12 9b       	mov	r11,r9
8000e044:	10 9c       	mov	r12,r8
8000e046:	fe b0 fa 83 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, chan5_raw);
8000e04a:	ee c9 00 38 	sub	r9,r7,56
8000e04e:	ee c8 00 18 	sub	r8,r7,24
8000e052:	2f 48       	sub	r8,-12
8000e054:	12 9b       	mov	r11,r9
8000e056:	10 9c       	mov	r12,r8
8000e058:	fe b0 fa 7a 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, chan6_raw);
8000e05c:	ee c9 00 3c 	sub	r9,r7,60
8000e060:	ee c8 00 18 	sub	r8,r7,24
8000e064:	2f 28       	sub	r8,-14
8000e066:	12 9b       	mov	r11,r9
8000e068:	10 9c       	mov	r12,r8
8000e06a:	fe b0 fa 71 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, chan7_raw);
8000e06e:	ee c9 00 40 	sub	r9,r7,64
8000e072:	ee c8 00 18 	sub	r8,r7,24
8000e076:	2f 08       	sub	r8,-16
8000e078:	12 9b       	mov	r11,r9
8000e07a:	10 9c       	mov	r12,r8
8000e07c:	fe b0 fa 68 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, chan8_raw);
8000e080:	ee c9 00 44 	sub	r9,r7,68
8000e084:	ee c8 00 18 	sub	r8,r7,24
8000e088:	2e e8       	sub	r8,-18
8000e08a:	12 9b       	mov	r11,r9
8000e08c:	10 9c       	mov	r12,r8
8000e08e:	fe b0 fa 5f 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e092:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e096:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 21, rssi);
8000e09a:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8000e09e:	ef 68 ff fd 	st.b	r7[-3],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, buf, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
8000e0a2:	ee ca 00 18 	sub	r10,r7,24
8000e0a6:	e0 68 00 f4 	mov	r8,244
8000e0aa:	31 69       	mov	r9,22
8000e0ac:	32 3b       	mov	r11,35
8000e0ae:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e0b2:	fe b0 f9 9f 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN, MAVLINK_MSG_ID_RC_CHANNELS_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_RC_CHANNELS_RAW, (const char *)&packet, MAVLINK_MSG_ID_RC_CHANNELS_RAW_LEN);
#endif
#endif
}
8000e0b6:	2e ed       	sub	sp,-72
8000e0b8:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e0bc:	80 00       	ld.sh	r0,r0[0x0]
8000e0be:	de 22       	popm	r4-r7,r12,lr-pc

8000e0c0 <mavlink_msg_servo_output_raw_send>:
 * @param servo8_raw Servo output 8 value, in microseconds
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_servo_output_raw_send(mavlink_channel_t chan, uint32_t time_usec, uint8_t port, uint16_t servo1_raw, uint16_t servo2_raw, uint16_t servo3_raw, uint16_t servo4_raw, uint16_t servo5_raw, uint16_t servo6_raw, uint16_t servo7_raw, uint16_t servo8_raw)
{
8000e0c0:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e0c4:	1a 97       	mov	r7,sp
8000e0c6:	21 1d       	sub	sp,68
8000e0c8:	4c 46       	lddpc	r6,8000e1d8 <mavlink_msg_servo_output_raw_send+0x118>
8000e0ca:	1e 26       	rsub	r6,pc
8000e0cc:	ee ce ff e4 	sub	lr,r7,-28
8000e0d0:	ef 4c ff e4 	st.w	r7[-28],r12
8000e0d4:	ef 4b ff e0 	st.w	r7[-32],r11
8000e0d8:	14 91       	mov	r1,r10
8000e0da:	12 92       	mov	r2,r9
8000e0dc:	10 93       	mov	r3,r8
8000e0de:	7c 05       	ld.w	r5,lr[0x0]
8000e0e0:	7c 1c       	ld.w	r12,lr[0x4]
8000e0e2:	7c 2b       	ld.w	r11,lr[0x8]
8000e0e4:	7c 3a       	ld.w	r10,lr[0xc]
8000e0e6:	7c 49       	ld.w	r9,lr[0x10]
8000e0e8:	7c 58       	ld.w	r8,lr[0x14]
8000e0ea:	02 9e       	mov	lr,r1
8000e0ec:	ef 6e ff dc 	st.b	r7[-36],lr
8000e0f0:	04 9e       	mov	lr,r2
8000e0f2:	ef 5e ff d8 	st.h	r7[-40],lr
8000e0f6:	06 9e       	mov	lr,r3
8000e0f8:	ef 5e ff d4 	st.h	r7[-44],lr
8000e0fc:	0a 9e       	mov	lr,r5
8000e0fe:	ef 5e ff d0 	st.h	r7[-48],lr
8000e102:	ef 5c ff cc 	st.h	r7[-52],r12
8000e106:	ef 5b ff c8 	st.h	r7[-56],r11
8000e10a:	ef 5a ff c4 	st.h	r7[-60],r10
8000e10e:	ef 59 ff c0 	st.h	r7[-64],r9
8000e112:	ef 58 ff bc 	st.h	r7[-68],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN];
	_mav_put_uint32_t(buf, 0, time_usec);
8000e116:	ee c9 00 20 	sub	r9,r7,32
8000e11a:	ee c8 00 18 	sub	r8,r7,24
8000e11e:	12 9b       	mov	r11,r9
8000e120:	10 9c       	mov	r12,r8
8000e122:	fe b0 fa 2f 	rcall	8000d580 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, servo1_raw);
8000e126:	ee c9 00 28 	sub	r9,r7,40
8000e12a:	ee c8 00 18 	sub	r8,r7,24
8000e12e:	2f c8       	sub	r8,-4
8000e130:	12 9b       	mov	r11,r9
8000e132:	10 9c       	mov	r12,r8
8000e134:	fe b0 fa 0c 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, servo2_raw);
8000e138:	ee c9 00 2c 	sub	r9,r7,44
8000e13c:	ee c8 00 18 	sub	r8,r7,24
8000e140:	2f a8       	sub	r8,-6
8000e142:	12 9b       	mov	r11,r9
8000e144:	10 9c       	mov	r12,r8
8000e146:	fe b0 fa 03 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 8, servo3_raw);
8000e14a:	ee c9 00 30 	sub	r9,r7,48
8000e14e:	ee c8 00 18 	sub	r8,r7,24
8000e152:	2f 88       	sub	r8,-8
8000e154:	12 9b       	mov	r11,r9
8000e156:	10 9c       	mov	r12,r8
8000e158:	fe b0 f9 fa 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 10, servo4_raw);
8000e15c:	ee c9 00 34 	sub	r9,r7,52
8000e160:	ee c8 00 18 	sub	r8,r7,24
8000e164:	2f 68       	sub	r8,-10
8000e166:	12 9b       	mov	r11,r9
8000e168:	10 9c       	mov	r12,r8
8000e16a:	fe b0 f9 f1 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 12, servo5_raw);
8000e16e:	ee c9 00 38 	sub	r9,r7,56
8000e172:	ee c8 00 18 	sub	r8,r7,24
8000e176:	2f 48       	sub	r8,-12
8000e178:	12 9b       	mov	r11,r9
8000e17a:	10 9c       	mov	r12,r8
8000e17c:	fe b0 f9 e8 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 14, servo6_raw);
8000e180:	ee c9 00 3c 	sub	r9,r7,60
8000e184:	ee c8 00 18 	sub	r8,r7,24
8000e188:	2f 28       	sub	r8,-14
8000e18a:	12 9b       	mov	r11,r9
8000e18c:	10 9c       	mov	r12,r8
8000e18e:	fe b0 f9 df 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 16, servo7_raw);
8000e192:	ee c9 00 40 	sub	r9,r7,64
8000e196:	ee c8 00 18 	sub	r8,r7,24
8000e19a:	2f 08       	sub	r8,-16
8000e19c:	12 9b       	mov	r11,r9
8000e19e:	10 9c       	mov	r12,r8
8000e1a0:	fe b0 f9 d6 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, servo8_raw);
8000e1a4:	ee c9 00 44 	sub	r9,r7,68
8000e1a8:	ee c8 00 18 	sub	r8,r7,24
8000e1ac:	2e e8       	sub	r8,-18
8000e1ae:	12 9b       	mov	r11,r9
8000e1b0:	10 9c       	mov	r12,r8
8000e1b2:	fe b0 f9 cd 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint8_t(buf, 20, port);
8000e1b6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8000e1ba:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, buf, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
8000e1be:	ee ca 00 18 	sub	r10,r7,24
8000e1c2:	e0 68 00 de 	mov	r8,222
8000e1c6:	31 59       	mov	r9,21
8000e1c8:	32 4b       	mov	r11,36
8000e1ca:	ee fc ff e4 	ld.w	r12,r7[-28]
8000e1ce:	fe b0 f9 11 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW, (const char *)&packet, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW_LEN);
#endif
#endif
}
8000e1d2:	2e fd       	sub	sp,-68
8000e1d4:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000e1d8:	80 00       	ld.sh	r0,r0[0x0]
8000e1da:	df 4e       	*unknown*

8000e1dc <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
{
8000e1dc:	eb cd 40 e0 	pushm	r5-r7,lr
8000e1e0:	1a 97       	mov	r7,sp
8000e1e2:	20 ad       	sub	sp,40
8000e1e4:	4a 36       	lddpc	r6,8000e270 <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send+0x94>
8000e1e6:	1e 26       	rsub	r6,pc
8000e1e8:	ee c5 ff f0 	sub	r5,r7,-16
8000e1ec:	ef 4c ff e8 	st.w	r7[-24],r12
8000e1f0:	ef 4b ff e4 	st.w	r7[-28],r11
8000e1f4:	ef 4a ff e0 	st.w	r7[-32],r10
8000e1f8:	ef 49 ff dc 	st.w	r7[-36],r9
8000e1fc:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e200:	ee c9 00 1c 	sub	r9,r7,28
8000e204:	ee c8 00 14 	sub	r8,r7,20
8000e208:	12 9b       	mov	r11,r9
8000e20a:	10 9c       	mov	r12,r8
8000e20c:	fe b0 f9 ba 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, roll);
8000e210:	ee c9 00 20 	sub	r9,r7,32
8000e214:	ee c8 00 14 	sub	r8,r7,20
8000e218:	2f c8       	sub	r8,-4
8000e21a:	12 9b       	mov	r11,r9
8000e21c:	10 9c       	mov	r12,r8
8000e21e:	fe b0 f9 b1 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, pitch);
8000e222:	ee c9 00 24 	sub	r9,r7,36
8000e226:	ee c8 00 14 	sub	r8,r7,20
8000e22a:	2f 88       	sub	r8,-8
8000e22c:	12 9b       	mov	r11,r9
8000e22e:	10 9c       	mov	r12,r8
8000e230:	fe b0 f9 a8 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, yaw);
8000e234:	ee c9 00 28 	sub	r9,r7,40
8000e238:	ee c8 00 14 	sub	r8,r7,20
8000e23c:	2f 48       	sub	r8,-12
8000e23e:	12 9b       	mov	r11,r9
8000e240:	10 9c       	mov	r12,r8
8000e242:	fe b0 f9 9f 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e246:	0a 99       	mov	r9,r5
8000e248:	ee c8 00 14 	sub	r8,r7,20
8000e24c:	2f 08       	sub	r8,-16
8000e24e:	12 9b       	mov	r11,r9
8000e250:	10 9c       	mov	r12,r8
8000e252:	fe b0 f9 97 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
8000e256:	ee ca 00 14 	sub	r10,r7,20
8000e25a:	e0 68 00 ef 	mov	r8,239
8000e25e:	31 49       	mov	r9,20
8000e260:	33 ab       	mov	r11,58
8000e262:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e266:	fe b0 f8 c5 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e26a:	2f 6d       	sub	sp,-40
8000e26c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e270:	80 00       	ld.sh	r0,r0[0x0]
8000e272:	e0 6a eb cd 	mov	r10,60365

8000e274 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_speed, float pitch_speed, float yaw_speed, float thrust)
{
8000e274:	eb cd 40 e0 	pushm	r5-r7,lr
8000e278:	1a 97       	mov	r7,sp
8000e27a:	20 ad       	sub	sp,40
8000e27c:	4a 36       	lddpc	r6,8000e308 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send+0x94>
8000e27e:	1e 26       	rsub	r6,pc
8000e280:	ee c5 ff f0 	sub	r5,r7,-16
8000e284:	ef 4c ff e8 	st.w	r7[-24],r12
8000e288:	ef 4b ff e4 	st.w	r7[-28],r11
8000e28c:	ef 4a ff e0 	st.w	r7[-32],r10
8000e290:	ef 49 ff dc 	st.w	r7[-36],r9
8000e294:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e298:	ee c9 00 1c 	sub	r9,r7,28
8000e29c:	ee c8 00 14 	sub	r8,r7,20
8000e2a0:	12 9b       	mov	r11,r9
8000e2a2:	10 9c       	mov	r12,r8
8000e2a4:	fe b0 f9 6e 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, roll_speed);
8000e2a8:	ee c9 00 20 	sub	r9,r7,32
8000e2ac:	ee c8 00 14 	sub	r8,r7,20
8000e2b0:	2f c8       	sub	r8,-4
8000e2b2:	12 9b       	mov	r11,r9
8000e2b4:	10 9c       	mov	r12,r8
8000e2b6:	fe b0 f9 65 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_speed);
8000e2ba:	ee c9 00 24 	sub	r9,r7,36
8000e2be:	ee c8 00 14 	sub	r8,r7,20
8000e2c2:	2f 88       	sub	r8,-8
8000e2c4:	12 9b       	mov	r11,r9
8000e2c6:	10 9c       	mov	r12,r8
8000e2c8:	fe b0 f9 5c 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_speed);
8000e2cc:	ee c9 00 28 	sub	r9,r7,40
8000e2d0:	ee c8 00 14 	sub	r8,r7,20
8000e2d4:	2f 48       	sub	r8,-12
8000e2d6:	12 9b       	mov	r11,r9
8000e2d8:	10 9c       	mov	r12,r8
8000e2da:	fe b0 f9 53 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e2de:	0a 99       	mov	r9,r5
8000e2e0:	ee c8 00 14 	sub	r8,r7,20
8000e2e4:	2f 08       	sub	r8,-16
8000e2e6:	12 9b       	mov	r11,r9
8000e2e8:	10 9c       	mov	r12,r8
8000e2ea:	fe b0 f9 4b 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
8000e2ee:	ee ca 00 14 	sub	r10,r7,20
8000e2f2:	e0 68 00 ee 	mov	r8,238
8000e2f6:	31 49       	mov	r9,20
8000e2f8:	33 bb       	mov	r11,59
8000e2fa:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e2fe:	fe b0 f8 79 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e302:	2f 6d       	sub	sp,-40
8000e304:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e308:	80 00       	ld.sh	r0,r0[0x0]
8000e30a:	e1 02 eb cd 	ld.sh	r2,r0[-5171]

8000e30c <mavlink_msg_vfr_hud_send>:
 * @param climb Current climb rate in meters/second
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
{
8000e30c:	eb cd 40 e0 	pushm	r5-r7,lr
8000e310:	1a 97       	mov	r7,sp
8000e312:	20 ad       	sub	sp,40
8000e314:	4a 76       	lddpc	r6,8000e3b0 <mavlink_msg_vfr_hud_send+0xa4>
8000e316:	1e 26       	rsub	r6,pc
8000e318:	ee c5 ff f0 	sub	r5,r7,-16
8000e31c:	ef 4c ff e8 	st.w	r7[-24],r12
8000e320:	ef 4b ff e4 	st.w	r7[-28],r11
8000e324:	ef 4a ff e0 	st.w	r7[-32],r10
8000e328:	ef 59 ff dc 	st.h	r7[-36],r9
8000e32c:	ef 58 ff d8 	st.h	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_VFR_HUD_LEN];
	_mav_put_float(buf, 0, airspeed);
8000e330:	ee c9 00 1c 	sub	r9,r7,28
8000e334:	ee c8 00 14 	sub	r8,r7,20
8000e338:	12 9b       	mov	r11,r9
8000e33a:	10 9c       	mov	r12,r8
8000e33c:	fe b0 f9 22 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, groundspeed);
8000e340:	ee c9 00 20 	sub	r9,r7,32
8000e344:	ee c8 00 14 	sub	r8,r7,20
8000e348:	2f c8       	sub	r8,-4
8000e34a:	12 9b       	mov	r11,r9
8000e34c:	10 9c       	mov	r12,r8
8000e34e:	fe b0 f9 19 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, alt);
8000e352:	0a 99       	mov	r9,r5
8000e354:	ee c8 00 14 	sub	r8,r7,20
8000e358:	2f 88       	sub	r8,-8
8000e35a:	12 9b       	mov	r11,r9
8000e35c:	10 9c       	mov	r12,r8
8000e35e:	fe b0 f9 11 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, climb);
8000e362:	ea c9 ff fc 	sub	r9,r5,-4
8000e366:	ee c8 00 14 	sub	r8,r7,20
8000e36a:	2f 48       	sub	r8,-12
8000e36c:	12 9b       	mov	r11,r9
8000e36e:	10 9c       	mov	r12,r8
8000e370:	fe b0 f9 08 	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 16, heading);
8000e374:	ee c9 00 24 	sub	r9,r7,36
8000e378:	ee c8 00 14 	sub	r8,r7,20
8000e37c:	2f 08       	sub	r8,-16
8000e37e:	12 9b       	mov	r11,r9
8000e380:	10 9c       	mov	r12,r8
8000e382:	fe b0 f8 e5 	rcall	8000d54c <byte_swap_2>
	_mav_put_uint16_t(buf, 18, throttle);
8000e386:	ee c9 00 28 	sub	r9,r7,40
8000e38a:	ee c8 00 14 	sub	r8,r7,20
8000e38e:	2e e8       	sub	r8,-18
8000e390:	12 9b       	mov	r11,r9
8000e392:	10 9c       	mov	r12,r8
8000e394:	fe b0 f8 dc 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, buf, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
8000e398:	ee ca 00 14 	sub	r10,r7,20
8000e39c:	31 48       	mov	r8,20
8000e39e:	31 49       	mov	r9,20
8000e3a0:	34 ab       	mov	r11,74
8000e3a2:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e3a6:	fe b0 f8 25 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN, MAVLINK_MSG_ID_VFR_HUD_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_VFR_HUD, (const char *)&packet, MAVLINK_MSG_ID_VFR_HUD_LEN);
#endif
#endif
}
8000e3aa:	2f 6d       	sub	sp,-40
8000e3ac:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e3b0:	80 00       	ld.sh	r0,r0[0x0]
8000e3b2:	e1 9a       	*unknown*

8000e3b4 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>:
 * @param thrust Collective thrust, normalized to 0 .. 1
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll_rate, float pitch_rate, float yaw_rate, float thrust)
{
8000e3b4:	eb cd 40 e0 	pushm	r5-r7,lr
8000e3b8:	1a 97       	mov	r7,sp
8000e3ba:	20 ad       	sub	sp,40
8000e3bc:	4a 36       	lddpc	r6,8000e448 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send+0x94>
8000e3be:	1e 26       	rsub	r6,pc
8000e3c0:	ee c5 ff f0 	sub	r5,r7,-16
8000e3c4:	ef 4c ff e8 	st.w	r7[-24],r12
8000e3c8:	ef 4b ff e4 	st.w	r7[-28],r11
8000e3cc:	ef 4a ff e0 	st.w	r7[-32],r10
8000e3d0:	ef 49 ff dc 	st.w	r7[-36],r9
8000e3d4:	ef 48 ff d8 	st.w	r7[-40],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e3d8:	ee c9 00 1c 	sub	r9,r7,28
8000e3dc:	ee c8 00 14 	sub	r8,r7,20
8000e3e0:	12 9b       	mov	r11,r9
8000e3e2:	10 9c       	mov	r12,r8
8000e3e4:	fe b0 f8 ce 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, roll_rate);
8000e3e8:	ee c9 00 20 	sub	r9,r7,32
8000e3ec:	ee c8 00 14 	sub	r8,r7,20
8000e3f0:	2f c8       	sub	r8,-4
8000e3f2:	12 9b       	mov	r11,r9
8000e3f4:	10 9c       	mov	r12,r8
8000e3f6:	fe b0 f8 c5 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 8, pitch_rate);
8000e3fa:	ee c9 00 24 	sub	r9,r7,36
8000e3fe:	ee c8 00 14 	sub	r8,r7,20
8000e402:	2f 88       	sub	r8,-8
8000e404:	12 9b       	mov	r11,r9
8000e406:	10 9c       	mov	r12,r8
8000e408:	fe b0 f8 bc 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, yaw_rate);
8000e40c:	ee c9 00 28 	sub	r9,r7,40
8000e410:	ee c8 00 14 	sub	r8,r7,20
8000e414:	2f 48       	sub	r8,-12
8000e416:	12 9b       	mov	r11,r9
8000e418:	10 9c       	mov	r12,r8
8000e41a:	fe b0 f8 b3 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, thrust);
8000e41e:	0a 99       	mov	r9,r5
8000e420:	ee c8 00 14 	sub	r8,r7,20
8000e424:	2f 08       	sub	r8,-16
8000e426:	12 9b       	mov	r11,r9
8000e428:	10 9c       	mov	r12,r8
8000e42a:	fe b0 f8 ab 	rcall	8000d580 <byte_swap_4>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, buf, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
8000e42e:	ee ca 00 14 	sub	r10,r7,20
8000e432:	37 f8       	mov	r8,127
8000e434:	31 49       	mov	r9,20
8000e436:	35 0b       	mov	r11,80
8000e438:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e43c:	fe b0 f7 da 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT, (const char *)&packet, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT_LEN);
#endif
#endif
}
8000e440:	2f 6d       	sub	sp,-40
8000e442:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e446:	00 00       	add	r0,r0
8000e448:	80 00       	ld.sh	r0,r0[0x0]
8000e44a:	e2 42 eb cd 	cp.w	r2,191437

8000e44c <mavlink_msg_hil_state_send>:
 * @param zacc Z acceleration (mg)
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_hil_state_send(mavlink_channel_t chan, uint64_t time_usec, float roll, float pitch, float yaw, float rollspeed, float pitchspeed, float yawspeed, int32_t lat, int32_t lon, int32_t alt, int16_t vx, int16_t vy, int16_t vz, int16_t xacc, int16_t yacc, int16_t zacc)
{
8000e44c:	eb cd 40 e0 	pushm	r5-r7,lr
8000e450:	1a 97       	mov	r7,sp
8000e452:	21 9d       	sub	sp,100
8000e454:	4d d6       	lddpc	r6,8000e5c8 <mavlink_msg_hil_state_send+0x17c>
8000e456:	1e 26       	rsub	r6,pc
8000e458:	ee c5 ff f0 	sub	r5,r7,-16
8000e45c:	ef 4c ff c4 	st.w	r7[-60],r12
8000e460:	ee eb ff bc 	st.d	r7[-68],r10
8000e464:	ef 49 ff b8 	st.w	r7[-72],r9
8000e468:	ef 48 ff b4 	st.w	r7[-76],r8
8000e46c:	6a 7e       	ld.w	lr,r5[0x1c]
8000e46e:	6a 8c       	ld.w	r12,r5[0x20]
8000e470:	6a 9b       	ld.w	r11,r5[0x24]
8000e472:	6a aa       	ld.w	r10,r5[0x28]
8000e474:	6a b9       	ld.w	r9,r5[0x2c]
8000e476:	6a c8       	ld.w	r8,r5[0x30]
8000e478:	ef 5e ff b0 	st.h	r7[-80],lr
8000e47c:	ef 5c ff ac 	st.h	r7[-84],r12
8000e480:	ef 5b ff a8 	st.h	r7[-88],r11
8000e484:	ef 5a ff a4 	st.h	r7[-92],r10
8000e488:	ef 59 ff a0 	st.h	r7[-96],r9
8000e48c:	ef 58 ff 9c 	st.h	r7[-100],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_HIL_STATE_LEN];
	_mav_put_uint64_t(buf, 0, time_usec);
8000e490:	ee c9 00 44 	sub	r9,r7,68
8000e494:	ee c8 00 38 	sub	r8,r7,56
8000e498:	12 9b       	mov	r11,r9
8000e49a:	10 9c       	mov	r12,r8
8000e49c:	fe b0 f8 9e 	rcall	8000d5d8 <byte_swap_8>
	_mav_put_float(buf, 8, roll);
8000e4a0:	ee c9 00 48 	sub	r9,r7,72
8000e4a4:	ee c8 00 38 	sub	r8,r7,56
8000e4a8:	2f 88       	sub	r8,-8
8000e4aa:	12 9b       	mov	r11,r9
8000e4ac:	10 9c       	mov	r12,r8
8000e4ae:	fe b0 f8 69 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 12, pitch);
8000e4b2:	ee c9 00 4c 	sub	r9,r7,76
8000e4b6:	ee c8 00 38 	sub	r8,r7,56
8000e4ba:	2f 48       	sub	r8,-12
8000e4bc:	12 9b       	mov	r11,r9
8000e4be:	10 9c       	mov	r12,r8
8000e4c0:	fe b0 f8 60 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 16, yaw);
8000e4c4:	0a 99       	mov	r9,r5
8000e4c6:	ee c8 00 38 	sub	r8,r7,56
8000e4ca:	2f 08       	sub	r8,-16
8000e4cc:	12 9b       	mov	r11,r9
8000e4ce:	10 9c       	mov	r12,r8
8000e4d0:	fe b0 f8 58 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 20, rollspeed);
8000e4d4:	ea c9 ff fc 	sub	r9,r5,-4
8000e4d8:	ee c8 00 38 	sub	r8,r7,56
8000e4dc:	2e c8       	sub	r8,-20
8000e4de:	12 9b       	mov	r11,r9
8000e4e0:	10 9c       	mov	r12,r8
8000e4e2:	fe b0 f8 4f 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 24, pitchspeed);
8000e4e6:	ea c9 ff f8 	sub	r9,r5,-8
8000e4ea:	ee c8 00 38 	sub	r8,r7,56
8000e4ee:	2e 88       	sub	r8,-24
8000e4f0:	12 9b       	mov	r11,r9
8000e4f2:	10 9c       	mov	r12,r8
8000e4f4:	fe b0 f8 46 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 28, yawspeed);
8000e4f8:	ea c9 ff f4 	sub	r9,r5,-12
8000e4fc:	ee c8 00 38 	sub	r8,r7,56
8000e500:	2e 48       	sub	r8,-28
8000e502:	12 9b       	mov	r11,r9
8000e504:	10 9c       	mov	r12,r8
8000e506:	fe b0 f8 3d 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 32, lat);
8000e50a:	ea c9 ff f0 	sub	r9,r5,-16
8000e50e:	ee c8 00 38 	sub	r8,r7,56
8000e512:	2e 08       	sub	r8,-32
8000e514:	12 9b       	mov	r11,r9
8000e516:	10 9c       	mov	r12,r8
8000e518:	fe b0 f8 34 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 36, lon);
8000e51c:	ea c9 ff ec 	sub	r9,r5,-20
8000e520:	ee c8 00 38 	sub	r8,r7,56
8000e524:	2d c8       	sub	r8,-36
8000e526:	12 9b       	mov	r11,r9
8000e528:	10 9c       	mov	r12,r8
8000e52a:	fe b0 f8 2b 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 40, alt);
8000e52e:	ea c9 ff e8 	sub	r9,r5,-24
8000e532:	ee c8 00 38 	sub	r8,r7,56
8000e536:	2d 88       	sub	r8,-40
8000e538:	12 9b       	mov	r11,r9
8000e53a:	10 9c       	mov	r12,r8
8000e53c:	fe b0 f8 22 	rcall	8000d580 <byte_swap_4>
	_mav_put_int16_t(buf, 44, vx);
8000e540:	ee c9 00 50 	sub	r9,r7,80
8000e544:	ee c8 00 38 	sub	r8,r7,56
8000e548:	2d 48       	sub	r8,-44
8000e54a:	12 9b       	mov	r11,r9
8000e54c:	10 9c       	mov	r12,r8
8000e54e:	fe b0 f7 ff 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 46, vy);
8000e552:	ee c9 00 54 	sub	r9,r7,84
8000e556:	ee c8 00 38 	sub	r8,r7,56
8000e55a:	2d 28       	sub	r8,-46
8000e55c:	12 9b       	mov	r11,r9
8000e55e:	10 9c       	mov	r12,r8
8000e560:	fe b0 f7 f6 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 48, vz);
8000e564:	ee c9 00 58 	sub	r9,r7,88
8000e568:	ee c8 00 38 	sub	r8,r7,56
8000e56c:	2d 08       	sub	r8,-48
8000e56e:	12 9b       	mov	r11,r9
8000e570:	10 9c       	mov	r12,r8
8000e572:	fe b0 f7 ed 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 50, xacc);
8000e576:	ee c9 00 5c 	sub	r9,r7,92
8000e57a:	ee c8 00 38 	sub	r8,r7,56
8000e57e:	2c e8       	sub	r8,-50
8000e580:	12 9b       	mov	r11,r9
8000e582:	10 9c       	mov	r12,r8
8000e584:	fe b0 f7 e4 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 52, yacc);
8000e588:	ee c9 00 60 	sub	r9,r7,96
8000e58c:	ee c8 00 38 	sub	r8,r7,56
8000e590:	2c c8       	sub	r8,-52
8000e592:	12 9b       	mov	r11,r9
8000e594:	10 9c       	mov	r12,r8
8000e596:	fe b0 f7 db 	rcall	8000d54c <byte_swap_2>
	_mav_put_int16_t(buf, 54, zacc);
8000e59a:	ee c9 00 64 	sub	r9,r7,100
8000e59e:	ee c8 00 38 	sub	r8,r7,56
8000e5a2:	2c a8       	sub	r8,-54
8000e5a4:	12 9b       	mov	r11,r9
8000e5a6:	10 9c       	mov	r12,r8
8000e5a8:	fe b0 f7 d2 	rcall	8000d54c <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, buf, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
8000e5ac:	ee ca 00 38 	sub	r10,r7,56
8000e5b0:	e0 68 00 b7 	mov	r8,183
8000e5b4:	33 89       	mov	r9,56
8000e5b6:	35 ab       	mov	r11,90
8000e5b8:	ee fc ff c4 	ld.w	r12,r7[-60]
8000e5bc:	fe b0 f7 1a 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN, MAVLINK_MSG_ID_HIL_STATE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_HIL_STATE, (const char *)&packet, MAVLINK_MSG_ID_HIL_STATE_LEN);
#endif
#endif
}
8000e5c0:	2e 7d       	sub	sp,-100
8000e5c2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000e5c6:	00 00       	add	r0,r0
8000e5c8:	80 00       	ld.sh	r0,r0[0x0]
8000e5ca:	e2 da eb cd 	satsub.w	r10,r1,-5171

8000e5cc <mavlink_msg_named_value_float_send>:
 * @param value Floating point value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_float_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, float value)
{
8000e5cc:	eb cd 40 c0 	pushm	r6-r7,lr
8000e5d0:	1a 97       	mov	r7,sp
8000e5d2:	20 9d       	sub	sp,36
8000e5d4:	49 96       	lddpc	r6,8000e638 <mavlink_msg_named_value_float_send+0x6c>
8000e5d6:	1e 26       	rsub	r6,pc
8000e5d8:	ef 4c ff e8 	st.w	r7[-24],r12
8000e5dc:	ef 4b ff e4 	st.w	r7[-28],r11
8000e5e0:	ef 4a ff e0 	st.w	r7[-32],r10
8000e5e4:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e5e8:	ee c9 00 1c 	sub	r9,r7,28
8000e5ec:	ee c8 00 14 	sub	r8,r7,20
8000e5f0:	12 9b       	mov	r11,r9
8000e5f2:	10 9c       	mov	r12,r8
8000e5f4:	fe b0 f7 c6 	rcall	8000d580 <byte_swap_4>
	_mav_put_float(buf, 4, value);
8000e5f8:	ee c9 00 24 	sub	r9,r7,36
8000e5fc:	ee c8 00 14 	sub	r8,r7,20
8000e600:	2f c8       	sub	r8,-4
8000e602:	12 9b       	mov	r11,r9
8000e604:	10 9c       	mov	r12,r8
8000e606:	fe b0 f7 bd 	rcall	8000d580 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e60a:	ee c8 00 14 	sub	r8,r7,20
8000e60e:	30 a9       	mov	r9,10
8000e610:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e614:	30 8b       	mov	r11,8
8000e616:	10 9c       	mov	r12,r8
8000e618:	fe b0 f8 56 	rcall	8000d6c4 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, buf, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
8000e61c:	ee ca 00 14 	sub	r10,r7,20
8000e620:	e0 68 00 aa 	mov	r8,170
8000e624:	31 29       	mov	r9,18
8000e626:	e0 6b 00 fb 	mov	r11,251
8000e62a:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e62e:	fe b0 f6 e1 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT_LEN);
#endif
#endif
}
8000e632:	2f 7d       	sub	sp,-36
8000e634:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e638:	80 00       	ld.sh	r0,r0[0x0]
8000e63a:	e4 5a eb cd 	cp.w	r10,388045

8000e63c <mavlink_msg_named_value_int_send>:
 * @param value Signed integer value
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_named_value_int_send(mavlink_channel_t chan, uint32_t time_boot_ms, const char *name, int32_t value)
{
8000e63c:	eb cd 40 c0 	pushm	r6-r7,lr
8000e640:	1a 97       	mov	r7,sp
8000e642:	20 9d       	sub	sp,36
8000e644:	49 96       	lddpc	r6,8000e6a8 <mavlink_msg_named_value_int_send+0x6c>
8000e646:	1e 26       	rsub	r6,pc
8000e648:	ef 4c ff e8 	st.w	r7[-24],r12
8000e64c:	ef 4b ff e4 	st.w	r7[-28],r11
8000e650:	ef 4a ff e0 	st.w	r7[-32],r10
8000e654:	ef 49 ff dc 	st.w	r7[-36],r9
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN];
	_mav_put_uint32_t(buf, 0, time_boot_ms);
8000e658:	ee c9 00 1c 	sub	r9,r7,28
8000e65c:	ee c8 00 14 	sub	r8,r7,20
8000e660:	12 9b       	mov	r11,r9
8000e662:	10 9c       	mov	r12,r8
8000e664:	fe b0 f7 8e 	rcall	8000d580 <byte_swap_4>
	_mav_put_int32_t(buf, 4, value);
8000e668:	ee c9 00 24 	sub	r9,r7,36
8000e66c:	ee c8 00 14 	sub	r8,r7,20
8000e670:	2f c8       	sub	r8,-4
8000e672:	12 9b       	mov	r11,r9
8000e674:	10 9c       	mov	r12,r8
8000e676:	fe b0 f7 85 	rcall	8000d580 <byte_swap_4>
	_mav_put_char_array(buf, 8, name, 10);
8000e67a:	ee c8 00 14 	sub	r8,r7,20
8000e67e:	30 a9       	mov	r9,10
8000e680:	ee fa ff e0 	ld.w	r10,r7[-32]
8000e684:	30 8b       	mov	r11,8
8000e686:	10 9c       	mov	r12,r8
8000e688:	fe b0 f8 1e 	rcall	8000d6c4 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, buf, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
8000e68c:	ee ca 00 14 	sub	r10,r7,20
8000e690:	32 c8       	mov	r8,44
8000e692:	31 29       	mov	r9,18
8000e694:	e0 6b 00 fc 	mov	r11,252
8000e698:	ee fc ff e8 	ld.w	r12,r7[-24]
8000e69c:	fe b0 f6 aa 	rcall	8000d3f0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN, MAVLINK_MSG_ID_NAMED_VALUE_INT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_NAMED_VALUE_INT, (const char *)&packet, MAVLINK_MSG_ID_NAMED_VALUE_INT_LEN);
#endif
#endif
}
8000e6a0:	2f 7d       	sub	sp,-36
8000e6a2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e6a6:	00 00       	add	r0,r0
8000e6a8:	80 00       	ld.sh	r0,r0[0x0]
8000e6aa:	e4 ca eb cd 	sub	r10,r2,-5171

8000e6ac <mavlink_send_heartbeat>:
#include "analog_monitor.h"
#include "tasks.h"

central_data_t *centralData;

void mavlink_send_heartbeat(void) {
8000e6ac:	eb cd 40 c0 	pushm	r6-r7,lr
8000e6b0:	1a 97       	mov	r7,sp
8000e6b2:	20 1d       	sub	sp,4
8000e6b4:	48 e6       	lddpc	r6,8000e6ec <mavlink_send_heartbeat+0x40>
8000e6b6:	1e 26       	rsub	r6,pc

	central_data_t *centralData=get_central_data();
8000e6b8:	f0 16 00 33 	mcall	r6[204]
8000e6bc:	18 98       	mov	r8,r12
8000e6be:	ef 48 ff fc 	st.w	r7[-4],r8

	mavlink_msg_heartbeat_send(MAVLINK_COMM_0, MAV_TYPE_QUADROTOR, MAV_AUTOPILOT_GENERIC, centralData->mav_mode, 0, centralData->mav_state);
8000e6c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e6c6:	f1 38 0d 05 	ld.ub	r8,r8[3333]
8000e6ca:	ee f9 ff fc 	ld.w	r9,r7[-4]
8000e6ce:	f3 39 0d 04 	ld.ub	r9,r9[3332]
8000e6d2:	1a d8       	st.w	--sp,r8
8000e6d4:	30 08       	mov	r8,0
8000e6d6:	30 0a       	mov	r10,0
8000e6d8:	30 2b       	mov	r11,2
8000e6da:	30 0c       	mov	r12,0
8000e6dc:	fe b0 f8 16 	rcall	8000d708 <mavlink_msg_heartbeat_send>
8000e6e0:	2f fd       	sub	sp,-4
														//(int)(1000.0*get_internal_rail()), 
														//(int)(1000.0*get_6V_analog_rail()), 
														//(int)(1000.0*get_5V_analog_rail()),
														//0.0, 0.0, 0.0, 0.0);
														
	trigger_analog_monitor();
8000e6e2:	f0 16 01 fb 	mcall	r6[2028]
	
	//dbg_print("Send hearbeat.\n");
}
8000e6e6:	2f fd       	sub	sp,-4
8000e6e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8000e6ec:	80 00       	ld.sh	r0,r0[0x0]
8000e6ee:	e5 3a eb cd 	ld.ub	r10,r2[-5171]

8000e6f0 <mavlink_send_raw_imu>:

void mavlink_send_raw_imu(void) {
8000e6f0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e6f4:	1a 97       	mov	r7,sp
8000e6f6:	20 6d       	sub	sp,24
8000e6f8:	4b e6       	lddpc	r6,8000e7f0 <mavlink_send_raw_imu+0x100>
8000e6fa:	1e 26       	rsub	r6,pc
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
8000e6fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000e700:	70 08       	ld.w	r8,r8[0x0]
8000e702:	f0 f8 00 ec 	ld.w	r8,r8[236]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e706:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e70a:	5c 88       	casts.h	r8
8000e70c:	ef 48 ff e8 	st.w	r7[-24],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
8000e710:	ec f8 00 00 	ld.w	r8,r6[0]
8000e714:	70 08       	ld.w	r8,r8[0x0]
8000e716:	f0 f8 00 e8 	ld.w	r8,r8[232]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e71a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e71e:	5c 88       	casts.h	r8
8000e720:	ef 48 ff ec 	st.w	r7[-20],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
8000e724:	ec f8 00 00 	ld.w	r8,r6[0]
8000e728:	70 08       	ld.w	r8,r8[0x0]
8000e72a:	f0 f8 00 e4 	ld.w	r8,r8[228]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e72e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e732:	5c 88       	casts.h	r8
8000e734:	ef 48 ff f0 	st.w	r7[-16],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
8000e738:	ec f8 00 00 	ld.w	r8,r6[0]
8000e73c:	70 08       	ld.w	r8,r8[0x0]
8000e73e:	f0 f8 00 d4 	ld.w	r8,r8[212]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e742:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e746:	5c 88       	casts.h	r8
8000e748:	ef 48 ff f4 	st.w	r7[-12],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Y], 
8000e74c:	ec f8 00 00 	ld.w	r8,r6[0]
8000e750:	70 08       	ld.w	r8,r8[0x0]
8000e752:	f0 f8 00 d0 	ld.w	r8,r8[208]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e756:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e75a:	5c 88       	casts.h	r8
8000e75c:	ef 48 ff f8 	st.w	r7[-8],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_X], 
8000e760:	ec f8 00 00 	ld.w	r8,r6[0]
8000e764:	70 08       	ld.w	r8,r8[0x0]
8000e766:	f0 f8 00 cc 	ld.w	r8,r8[204]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e76a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e76e:	5c 88       	casts.h	r8
8000e770:	ef 48 ff fc 	st.w	r7[-4],r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Z], 
8000e774:	ec f8 00 00 	ld.w	r8,r6[0]
8000e778:	70 08       	ld.w	r8,r8[0x0]
8000e77a:	f0 f8 00 e0 	ld.w	r8,r8[224]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e77e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e782:	5c 88       	casts.h	r8
8000e784:	10 90       	mov	r0,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_Y], 
8000e786:	ec f8 00 00 	ld.w	r8,r6[0]
8000e78a:	70 08       	ld.w	r8,r8[0x0]
8000e78c:	f0 f8 00 dc 	ld.w	r8,r8[220]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e790:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e794:	5c 88       	casts.h	r8
8000e796:	10 91       	mov	r1,r8
	centralData->imu1.raw_channels[ACC_OFFSET+IMU_X], 
8000e798:	ec f8 00 00 	ld.w	r8,r6[0]
8000e79c:	70 08       	ld.w	r8,r8[0x0]
8000e79e:	f0 f8 00 d8 	ld.w	r8,r8[216]
	
	//dbg_print("Send hearbeat.\n");
}

void mavlink_send_raw_imu(void) {
	mavlink_msg_raw_imu_send(MAVLINK_COMM_0, get_micros(), 
8000e7a2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e7a6:	5c 88       	casts.h	r8
8000e7a8:	10 95       	mov	r5,r8
8000e7aa:	f0 16 00 29 	mcall	r6[164]
8000e7ae:	18 98       	mov	r8,r12
8000e7b0:	10 92       	mov	r2,r8
8000e7b2:	30 03       	mov	r3,0
8000e7b4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000e7b8:	1a d8       	st.w	--sp,r8
8000e7ba:	ee f8 ff ec 	ld.w	r8,r7[-20]
8000e7be:	1a d8       	st.w	--sp,r8
8000e7c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e7c4:	1a d8       	st.w	--sp,r8
8000e7c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e7ca:	1a d8       	st.w	--sp,r8
8000e7cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e7d0:	1a d8       	st.w	--sp,r8
8000e7d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e7d6:	1a d8       	st.w	--sp,r8
8000e7d8:	1a d0       	st.w	--sp,r0
8000e7da:	02 98       	mov	r8,r1
8000e7dc:	0a 99       	mov	r9,r5
8000e7de:	04 9a       	mov	r10,r2
8000e7e0:	06 9b       	mov	r11,r3
8000e7e2:	30 0c       	mov	r12,0
8000e7e4:	fe b0 f8 cc 	rcall	8000d97c <mavlink_msg_raw_imu_send>
8000e7e8:	2f 9d       	sub	sp,-28
	centralData->imu1.raw_channels[GYRO_OFFSET+IMU_Z], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_X], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Y], 
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}
8000e7ea:	2f ad       	sub	sp,-24
8000e7ec:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e7f0:	80 00       	ld.sh	r0,r0[0x0]
8000e7f2:	e5 7e eb cd 	stcond	r2[-5171],lr

8000e7f4 <mavlink_send_scaled_imu>:

void mavlink_send_scaled_imu(void) {
8000e7f4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000e7f8:	1a 97       	mov	r7,sp
8000e7fa:	20 4d       	sub	sp,16
8000e7fc:	4c 96       	lddpc	r6,8000e920 <mavlink_send_scaled_imu+0x12c>
8000e7fe:	1e 26       	rsub	r6,pc
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
	1000*centralData->imu1.attitude.north_vec.v[2]
8000e800:	ec f8 00 00 	ld.w	r8,r6[0]
8000e804:	70 08       	ld.w	r8,r8[0x0]
8000e806:	70 b9       	ld.w	r9,r8[0x2c]
8000e808:	fc 18 44 7a 	movh	r8,0x447a
8000e80c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e810:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e814:	5c 88       	casts.h	r8
8000e816:	ef 48 ff f0 	st.w	r7[-16],r8
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
	1000*centralData->imu1.attitude.north_vec.v[1],
8000e81a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e81e:	70 08       	ld.w	r8,r8[0x0]
8000e820:	70 a9       	ld.w	r9,r8[0x28]
8000e822:	fc 18 44 7a 	movh	r8,0x447a
8000e826:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e82a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e82e:	5c 88       	casts.h	r8
8000e830:	ef 48 ff f4 	st.w	r7[-12],r8
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
	//1000*centralData->imu1.attitude.mag[IMU_X],
	//1000*centralData->imu1.attitude.mag[IMU_Y],
	//1000*centralData->imu1.attitude.mag[IMU_Z]
	1000*centralData->imu1.attitude.north_vec.v[0],
8000e834:	ec f8 00 00 	ld.w	r8,r6[0]
8000e838:	70 08       	ld.w	r8,r8[0x0]
8000e83a:	70 99       	ld.w	r9,r8[0x24]
8000e83c:	fc 18 44 7a 	movh	r8,0x447a
8000e840:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e844:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e848:	5c 88       	casts.h	r8
8000e84a:	ef 48 ff f8 	st.w	r7[-8],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
	1000*centralData->imu1.attitude.om[IMU_Z], 
8000e84e:	ec f8 00 00 	ld.w	r8,r6[0]
8000e852:	70 08       	ld.w	r8,r8[0x0]
8000e854:	f0 f9 00 80 	ld.w	r9,r8[128]
8000e858:	fc 18 44 7a 	movh	r8,0x447a
8000e85c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e860:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e864:	5c 88       	casts.h	r8
8000e866:	ef 48 ff fc 	st.w	r7[-4],r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
	1000*centralData->imu1.attitude.om[IMU_Y], 
8000e86a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e86e:	70 08       	ld.w	r8,r8[0x0]
8000e870:	71 f9       	ld.w	r9,r8[0x7c]
8000e872:	fc 18 44 7a 	movh	r8,0x447a
8000e876:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e87a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e87e:	5c 88       	casts.h	r8
8000e880:	10 90       	mov	r0,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
	1000*centralData->imu1.attitude.om[IMU_X], 
8000e882:	ec f8 00 00 	ld.w	r8,r6[0]
8000e886:	70 08       	ld.w	r8,r8[0x0]
8000e888:	71 e9       	ld.w	r9,r8[0x78]
8000e88a:	fc 18 44 7a 	movh	r8,0x447a
8000e88e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e892:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e896:	5c 88       	casts.h	r8
8000e898:	10 91       	mov	r1,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
	1000*centralData->imu1.attitude.a [IMU_Z], 
8000e89a:	ec f8 00 00 	ld.w	r8,r6[0]
8000e89e:	70 08       	ld.w	r8,r8[0x0]
8000e8a0:	f0 f9 00 8c 	ld.w	r9,r8[140]
8000e8a4:	fc 18 44 7a 	movh	r8,0x447a
8000e8a8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8ac:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8b0:	5c 88       	casts.h	r8
8000e8b2:	10 92       	mov	r2,r8
	1000*centralData->imu1.attitude.a [IMU_X],
	1000*centralData->imu1.attitude.a [IMU_Y], 
8000e8b4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8b8:	70 08       	ld.w	r8,r8[0x0]
8000e8ba:	f0 f9 00 88 	ld.w	r9,r8[136]
8000e8be:	fc 18 44 7a 	movh	r8,0x447a
8000e8c2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8c6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8ca:	5c 88       	casts.h	r8
8000e8cc:	10 93       	mov	r3,r8
	1000*centralData->imu1.attitude.a [IMU_X],
8000e8ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000e8d2:	70 08       	ld.w	r8,r8[0x0]
8000e8d4:	f0 f9 00 84 	ld.w	r9,r8[132]
8000e8d8:	fc 18 44 7a 	movh	r8,0x447a
8000e8dc:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
	centralData->imu1.raw_channels[COMPASS_OFFSET+IMU_Z]
	);
}

void mavlink_send_scaled_imu(void) {
	mavlink_msg_scaled_imu_send(MAVLINK_COMM_0, get_millis(),
8000e8e0:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000e8e4:	5c 88       	casts.h	r8
8000e8e6:	10 95       	mov	r5,r8
8000e8e8:	f0 16 00 0f 	mcall	r6[60]
8000e8ec:	18 9b       	mov	r11,r12
8000e8ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000e8f2:	1a d8       	st.w	--sp,r8
8000e8f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000e8f8:	1a d8       	st.w	--sp,r8
8000e8fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000e8fe:	1a d8       	st.w	--sp,r8
8000e900:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e904:	1a d8       	st.w	--sp,r8
8000e906:	1a d0       	st.w	--sp,r0
8000e908:	1a d1       	st.w	--sp,r1
8000e90a:	04 98       	mov	r8,r2
8000e90c:	06 99       	mov	r9,r3
8000e90e:	0a 9a       	mov	r10,r5
8000e910:	30 0c       	mov	r12,0
8000e912:	fe b0 f7 ab 	rcall	8000d868 <mavlink_msg_scaled_imu_send>
8000e916:	2f ad       	sub	sp,-24
	1000*centralData->imu1.attitude.north_vec.v[2]
	//1000*centralData->imu1.attitude.up_vec.v[0],
	//1000*centralData->imu1.attitude.up_vec.v[1],
	//1000*centralData->imu1.attitude.up_vec.v[2]
	);
}
8000e918:	2f cd       	sub	sp,-16
8000e91a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000e91e:	00 00       	add	r0,r0
8000e920:	80 00       	ld.sh	r0,r0[0x0]
8000e922:	e6 82 eb cd 	brhs	800ec0bc <_data_lma+0xba674>

8000e924 <mavlink_send_rpy_rates_error>:
void  mavlink_send_rpy_rates_error(void) {
8000e924:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e928:	1a 97       	mov	r7,sp
8000e92a:	20 1d       	sub	sp,4
8000e92c:	49 06       	lddpc	r6,8000e96c <mavlink_send_rpy_rates_error+0x48>
8000e92e:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000e930:	f0 16 00 99 	mcall	r6[612]
8000e934:	18 98       	mov	r8,r12
8000e936:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].error, rate_stab->rpy_controller[1].error,rate_stab->rpy_controller[2].error,0 );
8000e93a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e93e:	f0 f2 00 bc 	ld.w	r2,r8[188]
8000e942:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e946:	71 e3       	ld.w	r3,r8[0x78]
8000e948:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e94c:	70 d5       	ld.w	r5,r8[0x34]
8000e94e:	f0 16 00 0f 	mcall	r6[60]
8000e952:	18 9b       	mov	r11,r12
8000e954:	30 08       	mov	r8,0
8000e956:	1a d8       	st.w	--sp,r8
8000e958:	04 98       	mov	r8,r2
8000e95a:	06 99       	mov	r9,r3
8000e95c:	0a 9a       	mov	r10,r5
8000e95e:	30 0c       	mov	r12,0
8000e960:	fe b0 fd 2a 	rcall	8000e3b4 <mavlink_msg_roll_pitch_yaw_rates_thrust_setpoint_send>
8000e964:	2f fd       	sub	sp,-4
}
8000e966:	2f fd       	sub	sp,-4
8000e968:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e96c:	80 00       	ld.sh	r0,r0[0x0]
8000e96e:	e7 b2       	*unknown*

8000e970 <mavlink_send_rpy_speed_thrust_setpoint>:
void  mavlink_send_rpy_speed_thrust_setpoint(void) {
8000e970:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000e974:	1a 97       	mov	r7,sp
8000e976:	20 1d       	sub	sp,4
8000e978:	49 06       	lddpc	r6,8000e9b8 <mavlink_send_rpy_speed_thrust_setpoint+0x48>
8000e97a:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000e97c:	f0 16 00 99 	mcall	r6[612]
8000e980:	18 98       	mov	r8,r12
8000e982:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), rate_stab->rpy_controller[0].output, rate_stab->rpy_controller[1].output,rate_stab->rpy_controller[2].output,0 );
8000e986:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e98a:	f0 f2 00 b8 	ld.w	r2,r8[184]
8000e98e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e992:	71 d3       	ld.w	r3,r8[0x74]
8000e994:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000e998:	70 c5       	ld.w	r5,r8[0x30]
8000e99a:	f0 16 00 0f 	mcall	r6[60]
8000e99e:	18 9b       	mov	r11,r12
8000e9a0:	30 08       	mov	r8,0
8000e9a2:	1a d8       	st.w	--sp,r8
8000e9a4:	04 98       	mov	r8,r2
8000e9a6:	06 99       	mov	r9,r3
8000e9a8:	0a 9a       	mov	r10,r5
8000e9aa:	30 0c       	mov	r12,0
8000e9ac:	fe b0 fc 64 	rcall	8000e274 <mavlink_msg_roll_pitch_yaw_speed_thrust_setpoint_send>
8000e9b0:	2f fd       	sub	sp,-4
}
8000e9b2:	2f fd       	sub	sp,-4
8000e9b4:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000e9b8:	80 00       	ld.sh	r0,r0[0x0]
8000e9ba:	e7 fe eb cd 	st.wqs	r3[0x734],lr

8000e9bc <mavlink_send_rpy_thrust_setpoint>:
void mavlink_send_rpy_thrust_setpoint(void) {
8000e9bc:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
8000e9c0:	1a 97       	mov	r7,sp
8000e9c2:	49 26       	lddpc	r6,8000ea08 <mavlink_send_rpy_thrust_setpoint+0x4c>
8000e9c4:	1e 26       	rsub	r6,pc
	
	// Controls output
	//mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(mavlink_channel_t chan, uint32_t time_boot_ms, float roll, float pitch, float yaw, float thrust)
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
8000e9c6:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9ca:	70 08       	ld.w	r8,r8[0x0]
8000e9cc:	f0 f1 01 54 	ld.w	r1,r8[340]
8000e9d0:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9d4:	70 08       	ld.w	r8,r8[0x0]
8000e9d6:	f0 f2 01 50 	ld.w	r2,r8[336]
8000e9da:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9de:	70 08       	ld.w	r8,r8[0x0]
8000e9e0:	f0 f3 01 4c 	ld.w	r3,r8[332]
8000e9e4:	ec f8 00 00 	ld.w	r8,r6[0]
8000e9e8:	70 08       	ld.w	r8,r8[0x0]
8000e9ea:	f0 f5 01 48 	ld.w	r5,r8[328]
8000e9ee:	f0 16 00 0f 	mcall	r6[60]
8000e9f2:	18 9b       	mov	r11,r12
8000e9f4:	1a d1       	st.w	--sp,r1
8000e9f6:	04 98       	mov	r8,r2
8000e9f8:	06 99       	mov	r9,r3
8000e9fa:	0a 9a       	mov	r10,r5
8000e9fc:	30 0c       	mov	r12,0
8000e9fe:	fe b0 fb ef 	rcall	8000e1dc <mavlink_msg_roll_pitch_yaw_thrust_setpoint_send>
8000ea02:	2f fd       	sub	sp,-4
}
8000ea04:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
8000ea08:	80 00       	ld.sh	r0,r0[0x0]
8000ea0a:	e8 48 eb cd 	cp.w	r8,584653

8000ea0c <mavlink_send_servo_output>:

void mavlink_send_servo_output(void) {
8000ea0c:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ea10:	1a 97       	mov	r7,sp
8000ea12:	20 4d       	sub	sp,16
8000ea14:	4c a6       	lddpc	r6,8000eb3c <mavlink_send_servo_output+0x130>
8000ea16:	1e 26       	rsub	r6,pc
	Stabiliser_t *rate_stab=get_rate_stabiliser();
8000ea18:	f0 16 00 99 	mcall	r6[612]
8000ea1c:	18 98       	mov	r8,r12
8000ea1e:	ef 48 ff fc 	st.w	r7[-4],r8
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
8000ea22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea26:	f0 f9 01 1c 	ld.w	r9,r8[284]
8000ea2a:	fc 18 44 7a 	movh	r8,0x447a
8000ea2e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea32:	fc 18 44 7a 	movh	r8,0x447a
8000ea36:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea3a:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea3e:	5c 88       	casts.h	r8
8000ea40:	5c 78       	castu.h	r8
8000ea42:	ef 48 ff f0 	st.w	r7[-16],r8
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
8000ea46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea4a:	f0 f9 01 18 	ld.w	r9,r8[280]
8000ea4e:	fc 18 44 7a 	movh	r8,0x447a
8000ea52:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea56:	fc 18 44 7a 	movh	r8,0x447a
8000ea5a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea5e:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea62:	5c 88       	casts.h	r8
8000ea64:	5c 78       	castu.h	r8
8000ea66:	ef 48 ff f4 	st.w	r7[-12],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
8000ea6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea6e:	f0 f9 01 14 	ld.w	r9,r8[276]
8000ea72:	fc 18 44 7a 	movh	r8,0x447a
8000ea76:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea7a:	fc 18 44 7a 	movh	r8,0x447a
8000ea7e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ea82:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ea86:	5c 88       	casts.h	r8
8000ea88:	5c 78       	castu.h	r8
8000ea8a:	ef 48 ff f8 	st.w	r7[-8],r8
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
	1000*rate_stab->output.rpy[0]+1000, 
8000ea8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000ea92:	f0 f9 01 10 	ld.w	r9,r8[272]
8000ea96:	fc 18 44 7a 	movh	r8,0x447a
8000ea9a:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ea9e:	fc 18 44 7a 	movh	r8,0x447a
8000eaa2:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eaa6:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000eaaa:	5c 88       	casts.h	r8
8000eaac:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
	(uint16_t)(centralData->servos[3].value+1500),
8000eab0:	ec f8 00 00 	ld.w	r8,r6[0]
8000eab4:	70 08       	ld.w	r8,r8[0x0]
8000eab6:	f0 f8 03 64 	ld.w	r8,r8[868]
8000eaba:	5c 88       	casts.h	r8
8000eabc:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eac0:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eac2:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
	(uint16_t)(centralData->servos[2].value+1500),
8000eac6:	ec f8 00 00 	ld.w	r8,r6[0]
8000eaca:	70 08       	ld.w	r8,r8[0x0]
8000eacc:	f0 f8 03 54 	ld.w	r8,r8[852]
8000ead0:	5c 88       	casts.h	r8
8000ead2:	f0 c8 fa 24 	sub	r8,r8,-1500
8000ead6:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000ead8:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
	(uint16_t)(centralData->servos[1].value+1500),
8000eadc:	ec f8 00 00 	ld.w	r8,r6[0]
8000eae0:	70 08       	ld.w	r8,r8[0x0]
8000eae2:	f0 f8 03 44 	ld.w	r8,r8[836]
8000eae6:	5c 88       	casts.h	r8
8000eae8:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eaec:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eaee:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
	(uint16_t)(centralData->servos[0].value+1500),
8000eaf2:	ec f8 00 00 	ld.w	r8,r6[0]
8000eaf6:	70 08       	ld.w	r8,r8[0x0]
8000eaf8:	f0 f8 03 34 	ld.w	r8,r8[820]
8000eafc:	5c 88       	casts.h	r8
8000eafe:	f0 c8 fa 24 	sub	r8,r8,-1500
8000eb02:	5c 88       	casts.h	r8
	mavlink_msg_roll_pitch_yaw_thrust_setpoint_send(MAVLINK_COMM_0, get_millis(), centralData->controls.rpy[ROLL], centralData->controls.rpy[PITCH], centralData->controls.rpy[YAW], centralData->controls.thrust);
}

void mavlink_send_servo_output(void) {
	Stabiliser_t *rate_stab=get_rate_stabiliser();
	mavlink_msg_servo_output_raw_send(MAVLINK_COMM_0, get_micros(), 0, 
8000eb04:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000eb08:	f0 16 00 29 	mcall	r6[164]
8000eb0c:	18 9b       	mov	r11,r12
8000eb0e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000eb12:	1a d8       	st.w	--sp,r8
8000eb14:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eb18:	1a d8       	st.w	--sp,r8
8000eb1a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eb1e:	1a d8       	st.w	--sp,r8
8000eb20:	1a d0       	st.w	--sp,r0
8000eb22:	1a d1       	st.w	--sp,r1
8000eb24:	1a d2       	st.w	--sp,r2
8000eb26:	06 98       	mov	r8,r3
8000eb28:	0a 99       	mov	r9,r5
8000eb2a:	30 0a       	mov	r10,0
8000eb2c:	30 0c       	mov	r12,0
8000eb2e:	fe b0 fa c9 	rcall	8000e0c0 <mavlink_msg_servo_output_raw_send>
8000eb32:	2f ad       	sub	sp,-24
	1000*rate_stab->output.rpy[0]+1000, 
	1000*rate_stab->output.rpy[1]+1000,
	1000*rate_stab->output.rpy[2]+1000,
	1000*rate_stab->output.thrust+1000
	);
}
8000eb34:	2f cd       	sub	sp,-16
8000eb36:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000eb3a:	00 00       	add	r0,r0
8000eb3c:	80 00       	ld.sh	r0,r0[0x0]
8000eb3e:	e8 9a eb cd 	brle	8014c2d8 <_data_lma+0x11a890>

8000eb40 <mavlink_send_attitude_quaternion>:

void mavlink_send_attitude_quaternion(void) {
8000eb40:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000eb44:	1a 97       	mov	r7,sp
8000eb46:	20 2d       	sub	sp,8
8000eb48:	49 c6       	lddpc	r6,8000ebb8 <mavlink_send_attitude_quaternion+0x78>
8000eb4a:	1e 26       	rsub	r6,pc
	// ATTITUDE QUATERNION
	mavlink_msg_attitude_quaternion_send(MAVLINK_COMM_0, get_millis(), centralData->imu1.attitude.qe.s, centralData->imu1.attitude.qe.v[0], centralData->imu1.attitude.qe.v[1], centralData->imu1.attitude.qe.v[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000eb4c:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb50:	70 08       	ld.w	r8,r8[0x0]
8000eb52:	f0 f8 00 80 	ld.w	r8,r8[128]
8000eb56:	ef 48 ff f8 	st.w	r7[-8],r8
8000eb5a:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb5e:	70 08       	ld.w	r8,r8[0x0]
8000eb60:	71 f8       	ld.w	r8,r8[0x7c]
8000eb62:	ef 48 ff fc 	st.w	r7[-4],r8
8000eb66:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb6a:	70 08       	ld.w	r8,r8[0x0]
8000eb6c:	71 e0       	ld.w	r0,r8[0x78]
8000eb6e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb72:	70 08       	ld.w	r8,r8[0x0]
8000eb74:	70 31       	ld.w	r1,r8[0xc]
8000eb76:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb7a:	70 08       	ld.w	r8,r8[0x0]
8000eb7c:	70 22       	ld.w	r2,r8[0x8]
8000eb7e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb82:	70 08       	ld.w	r8,r8[0x0]
8000eb84:	70 13       	ld.w	r3,r8[0x4]
8000eb86:	ec f8 00 00 	ld.w	r8,r6[0]
8000eb8a:	70 08       	ld.w	r8,r8[0x0]
8000eb8c:	70 05       	ld.w	r5,r8[0x0]
8000eb8e:	f0 16 00 0f 	mcall	r6[60]
8000eb92:	18 9b       	mov	r11,r12
8000eb94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000eb98:	1a d8       	st.w	--sp,r8
8000eb9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000eb9e:	1a d8       	st.w	--sp,r8
8000eba0:	1a d0       	st.w	--sp,r0
8000eba2:	1a d1       	st.w	--sp,r1
8000eba4:	04 98       	mov	r8,r2
8000eba6:	06 99       	mov	r9,r3
8000eba8:	0a 9a       	mov	r10,r5
8000ebaa:	30 0c       	mov	r12,0
8000ebac:	fe b0 f8 1c 	rcall	8000dbe4 <mavlink_msg_attitude_quaternion_send>
8000ebb0:	2f cd       	sub	sp,-16
}
8000ebb2:	2f ed       	sub	sp,-8
8000ebb4:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ebb8:	80 00       	ld.sh	r0,r0[0x0]
8000ebba:	e9 ce eb cd 	stm	lr,r0,r2-r3,r6-r9,r11,sp-pc

8000ebbc <mavlink_send_attitude>:
void mavlink_send_attitude(void) {
8000ebbc:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ebc0:	1a 97       	mov	r7,sp
8000ebc2:	20 4d       	sub	sp,16
8000ebc4:	49 f6       	lddpc	r6,8000ec40 <mavlink_send_attitude+0x84>
8000ebc6:	1e 26       	rsub	r6,pc
	// ATTITUDE
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ebc8:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebcc:	70 09       	ld.w	r9,r8[0x0]
8000ebce:	ee ca 00 0c 	sub	r10,r7,12
8000ebd2:	20 4d       	sub	sp,16
8000ebd4:	1a 98       	mov	r8,sp
8000ebd6:	20 08       	sub	r8,0
8000ebd8:	20 09       	sub	r9,0
8000ebda:	72 0b       	ld.w	r11,r9[0x0]
8000ebdc:	91 0b       	st.w	r8[0x0],r11
8000ebde:	72 1b       	ld.w	r11,r9[0x4]
8000ebe0:	91 1b       	st.w	r8[0x4],r11
8000ebe2:	72 2b       	ld.w	r11,r9[0x8]
8000ebe4:	91 2b       	st.w	r8[0x8],r11
8000ebe6:	72 39       	ld.w	r9,r9[0xc]
8000ebe8:	91 39       	st.w	r8[0xc],r9
8000ebea:	14 9c       	mov	r12,r10
8000ebec:	f0 16 00 70 	mcall	r6[448]
8000ebf0:	2f cd       	sub	sp,-16
	mavlink_msg_attitude_send(MAVLINK_COMM_0, get_millis(), aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2], centralData->imu1.attitude.om[0], centralData->imu1.attitude.om[1], centralData->imu1.attitude.om[2]);
8000ebf2:	ec f8 00 00 	ld.w	r8,r6[0]
8000ebf6:	70 08       	ld.w	r8,r8[0x0]
8000ebf8:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ebfc:	ef 48 ff f0 	st.w	r7[-16],r8
8000ec00:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec04:	70 08       	ld.w	r8,r8[0x0]
8000ec06:	71 f0       	ld.w	r0,r8[0x7c]
8000ec08:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec0c:	70 08       	ld.w	r8,r8[0x0]
8000ec0e:	71 e1       	ld.w	r1,r8[0x78]
8000ec10:	ee f2 ff fc 	ld.w	r2,r7[-4]
8000ec14:	ee f3 ff f8 	ld.w	r3,r7[-8]
8000ec18:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000ec1c:	f0 16 00 0f 	mcall	r6[60]
8000ec20:	18 9b       	mov	r11,r12
8000ec22:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000ec26:	1a d8       	st.w	--sp,r8
8000ec28:	1a d0       	st.w	--sp,r0
8000ec2a:	1a d1       	st.w	--sp,r1
8000ec2c:	04 98       	mov	r8,r2
8000ec2e:	06 99       	mov	r9,r3
8000ec30:	0a 9a       	mov	r10,r5
8000ec32:	30 0c       	mov	r12,0
8000ec34:	fe b0 f7 7a 	rcall	8000db28 <mavlink_msg_attitude_send>
8000ec38:	2f dd       	sub	sp,-12
}
8000ec3a:	2f cd       	sub	sp,-16
8000ec3c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ec40:	80 00       	ld.sh	r0,r0[0x0]
8000ec42:	ea 4a eb cd 	cp.w	r10,715725

8000ec44 <mavlink_send_global_position>:

void mavlink_send_global_position(void) {				
8000ec44:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ec48:	1a 97       	mov	r7,sp
8000ec4a:	20 9d       	sub	sp,36
8000ec4c:	4e 66       	lddpc	r6,8000ede4 <mavlink_send_global_position+0x1a0>
8000ec4e:	1e 26       	rsub	r6,pc
   //{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis() , centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, 1, centralData->GPS_data.northSpeed*100.0, centralData->GPS_data.eastSpeed*100.0, centralData->GPS_data.verticalSpeed*100.0, centralData->GPS_data.course);
   //}else{
	   //mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), 46.5193*10000000, 6.56507*10000000, 400*1000, 1, 0, 0, 0, centralData->imu1.attitude.om[2]);
	   	// send integrated position (for now there is no GPS error correction...!!!)
		global_position_t gpos=local_to_global_position(centralData->position_estimator.localPosition);
8000ec50:	ec f8 00 00 	ld.w	r8,r6[0]
8000ec54:	70 08       	ld.w	r8,r8[0x0]
8000ec56:	ee cc 00 1c 	sub	r12,r7,28
8000ec5a:	20 cd       	sub	sp,48
8000ec5c:	1a 99       	mov	r9,sp
8000ec5e:	12 9b       	mov	r11,r9
8000ec60:	f0 ca f6 1c 	sub	r10,r8,-2532
8000ec64:	f6 c8 00 00 	sub	r8,r11,0
8000ec68:	f4 c9 00 00 	sub	r9,r10,0
8000ec6c:	72 0e       	ld.w	lr,r9[0x0]
8000ec6e:	91 0e       	st.w	r8[0x0],lr
8000ec70:	72 1e       	ld.w	lr,r9[0x4]
8000ec72:	91 1e       	st.w	r8[0x4],lr
8000ec74:	72 2e       	ld.w	lr,r9[0x8]
8000ec76:	91 2e       	st.w	r8[0x8],lr
8000ec78:	72 39       	ld.w	r9,r9[0xc]
8000ec7a:	91 39       	st.w	r8[0xc],r9
8000ec7c:	f6 c8 ff f0 	sub	r8,r11,-16
8000ec80:	f4 c9 ff f0 	sub	r9,r10,-16
8000ec84:	72 0e       	ld.w	lr,r9[0x0]
8000ec86:	91 0e       	st.w	r8[0x0],lr
8000ec88:	72 1e       	ld.w	lr,r9[0x4]
8000ec8a:	91 1e       	st.w	r8[0x4],lr
8000ec8c:	72 2e       	ld.w	lr,r9[0x8]
8000ec8e:	91 2e       	st.w	r8[0x8],lr
8000ec90:	72 39       	ld.w	r9,r9[0xc]
8000ec92:	91 39       	st.w	r8[0xc],r9
8000ec94:	f6 c8 ff e0 	sub	r8,r11,-32
8000ec98:	f4 c9 ff e0 	sub	r9,r10,-32
8000ec9c:	72 0a       	ld.w	r10,r9[0x0]
8000ec9e:	91 0a       	st.w	r8[0x0],r10
8000eca0:	72 1a       	ld.w	r10,r9[0x4]
8000eca2:	91 1a       	st.w	r8[0x4],r10
8000eca4:	72 2a       	ld.w	r10,r9[0x8]
8000eca6:	91 2a       	st.w	r8[0x8],r10
8000eca8:	72 39       	ld.w	r9,r9[0xc]
8000ecaa:	91 39       	st.w	r8[0xc],r9
8000ecac:	f0 16 00 8b 	mcall	r6[556]
8000ecb0:	2f 4d       	sub	sp,-48
		mavlink_msg_global_position_int_send(MAVLINK_COMM_0, get_millis(), gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0, 1, centralData->position_estimator.vel[0]*100.0, centralData->position_estimator.vel[1]*100.0, centralData->position_estimator.vel[2]*100.0, centralData->imu1.attitude.om[2]);
8000ecb2:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecb6:	70 08       	ld.w	r8,r8[0x0]
8000ecb8:	f0 f8 00 80 	ld.w	r8,r8[128]
8000ecbc:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ecc0:	5c 88       	casts.h	r8
8000ecc2:	5c 78       	castu.h	r8
8000ecc4:	ef 48 ff dc 	st.w	r7[-36],r8
8000ecc8:	ec f8 00 00 	ld.w	r8,r6[0]
8000eccc:	70 08       	ld.w	r8,r8[0x0]
8000ecce:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000ecd2:	10 9c       	mov	r12,r8
8000ecd4:	f0 16 00 02 	mcall	r6[8]
8000ecd8:	30 08       	mov	r8,0
8000ecda:	fc 19 40 59 	movh	r9,0x4059
8000ecde:	f0 16 00 03 	mcall	r6[12]
8000ece2:	14 98       	mov	r8,r10
8000ece4:	16 99       	mov	r9,r11
8000ece6:	10 9a       	mov	r10,r8
8000ece8:	12 9b       	mov	r11,r9
8000ecea:	f0 16 00 14 	mcall	r6[80]
8000ecee:	18 98       	mov	r8,r12
8000ecf0:	5c 88       	casts.h	r8
8000ecf2:	ef 48 ff e0 	st.w	r7[-32],r8
8000ecf6:	ec f8 00 00 	ld.w	r8,r6[0]
8000ecfa:	70 08       	ld.w	r8,r8[0x0]
8000ecfc:	f0 f8 09 c0 	ld.w	r8,r8[2496]
8000ed00:	10 9c       	mov	r12,r8
8000ed02:	f0 16 00 02 	mcall	r6[8]
8000ed06:	30 08       	mov	r8,0
8000ed08:	fc 19 40 59 	movh	r9,0x4059
8000ed0c:	f0 16 00 03 	mcall	r6[12]
8000ed10:	14 98       	mov	r8,r10
8000ed12:	16 99       	mov	r9,r11
8000ed14:	10 9a       	mov	r10,r8
8000ed16:	12 9b       	mov	r11,r9
8000ed18:	f0 16 00 14 	mcall	r6[80]
8000ed1c:	18 98       	mov	r8,r12
8000ed1e:	5c 88       	casts.h	r8
8000ed20:	10 90       	mov	r0,r8
8000ed22:	ec f8 00 00 	ld.w	r8,r6[0]
8000ed26:	70 08       	ld.w	r8,r8[0x0]
8000ed28:	f0 f8 09 bc 	ld.w	r8,r8[2492]
8000ed2c:	10 9c       	mov	r12,r8
8000ed2e:	f0 16 00 02 	mcall	r6[8]
8000ed32:	30 08       	mov	r8,0
8000ed34:	fc 19 40 59 	movh	r9,0x4059
8000ed38:	f0 16 00 03 	mcall	r6[12]
8000ed3c:	14 98       	mov	r8,r10
8000ed3e:	16 99       	mov	r9,r11
8000ed40:	10 9a       	mov	r10,r8
8000ed42:	12 9b       	mov	r11,r9
8000ed44:	f0 16 00 14 	mcall	r6[80]
8000ed48:	18 98       	mov	r8,r12
8000ed4a:	5c 88       	casts.h	r8
8000ed4c:	10 91       	mov	r1,r8
8000ed4e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000ed52:	10 9c       	mov	r12,r8
8000ed54:	f0 16 00 02 	mcall	r6[8]
8000ed58:	30 08       	mov	r8,0
8000ed5a:	e0 69 40 00 	mov	r9,16384
8000ed5e:	ea 19 40 8f 	orh	r9,0x408f
8000ed62:	f0 16 00 03 	mcall	r6[12]
8000ed66:	14 98       	mov	r8,r10
8000ed68:	16 99       	mov	r9,r11
8000ed6a:	10 9a       	mov	r10,r8
8000ed6c:	12 9b       	mov	r11,r9
8000ed6e:	f0 16 00 14 	mcall	r6[80]
8000ed72:	18 92       	mov	r2,r12
8000ed74:	ee ea ff e4 	ld.d	r10,r7[-28]
8000ed78:	30 08       	mov	r8,0
8000ed7a:	e0 69 12 d0 	mov	r9,4816
8000ed7e:	ea 19 41 63 	orh	r9,0x4163
8000ed82:	f0 16 00 03 	mcall	r6[12]
8000ed86:	14 98       	mov	r8,r10
8000ed88:	16 99       	mov	r9,r11
8000ed8a:	10 9a       	mov	r10,r8
8000ed8c:	12 9b       	mov	r11,r9
8000ed8e:	f0 16 00 14 	mcall	r6[80]
8000ed92:	18 93       	mov	r3,r12
8000ed94:	ee ea ff ec 	ld.d	r10,r7[-20]
8000ed98:	30 08       	mov	r8,0
8000ed9a:	e0 69 12 d0 	mov	r9,4816
8000ed9e:	ea 19 41 63 	orh	r9,0x4163
8000eda2:	f0 16 00 03 	mcall	r6[12]
8000eda6:	14 98       	mov	r8,r10
8000eda8:	16 99       	mov	r9,r11
8000edaa:	10 9a       	mov	r10,r8
8000edac:	12 9b       	mov	r11,r9
8000edae:	f0 16 00 14 	mcall	r6[80]
8000edb2:	18 95       	mov	r5,r12
8000edb4:	f0 16 00 0f 	mcall	r6[60]
8000edb8:	18 9b       	mov	r11,r12
8000edba:	ee f8 ff dc 	ld.w	r8,r7[-36]
8000edbe:	1a d8       	st.w	--sp,r8
8000edc0:	ee f8 ff e0 	ld.w	r8,r7[-32]
8000edc4:	1a d8       	st.w	--sp,r8
8000edc6:	1a d0       	st.w	--sp,r0
8000edc8:	1a d1       	st.w	--sp,r1
8000edca:	30 18       	mov	r8,1
8000edcc:	1a d8       	st.w	--sp,r8
8000edce:	04 98       	mov	r8,r2
8000edd0:	06 99       	mov	r9,r3
8000edd2:	0a 9a       	mov	r10,r5
8000edd4:	30 0c       	mov	r12,0
8000edd6:	fe b0 f7 cd 	rcall	8000dd70 <mavlink_msg_global_position_int_send>
8000edda:	2f bd       	sub	sp,-20
   //} 
}
8000eddc:	2f 7d       	sub	sp,-36
8000edde:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000ede2:	00 00       	add	r0,r0
8000ede4:	80 00       	ld.sh	r0,r0[0x0]
8000ede6:	ea d2 eb cd 	satsub.w	r2,r5,-5171

8000ede8 <mavlink_send_hud>:

void mavlink_send_hud(void) {
8000ede8:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000edec:	1a 97       	mov	r7,sp
8000edee:	20 5d       	sub	sp,20
8000edf0:	4d 46       	lddpc	r6,8000ef40 <mavlink_send_hud+0x158>
8000edf2:	1e 26       	rsub	r6,pc
	float groundspeed=sqrt(centralData->position_estimator.vel[0]*centralData->position_estimator.vel[0] +centralData->position_estimator.vel[1]*centralData->position_estimator.vel[1]);
8000edf4:	ec f8 00 00 	ld.w	r8,r6[0]
8000edf8:	70 08       	ld.w	r8,r8[0x0]
8000edfa:	f0 f9 09 bc 	ld.w	r9,r8[2492]
8000edfe:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee02:	70 08       	ld.w	r8,r8[0x0]
8000ee04:	f0 f8 09 bc 	ld.w	r8,r8[2492]
8000ee08:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8000ee0c:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee10:	70 08       	ld.w	r8,r8[0x0]
8000ee12:	f0 fa 09 c0 	ld.w	r10,r8[2496]
8000ee16:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee1a:	70 08       	ld.w	r8,r8[0x0]
8000ee1c:	f0 f8 09 c0 	ld.w	r8,r8[2496]
8000ee20:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8000ee24:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8000ee28:	10 9c       	mov	r12,r8
8000ee2a:	f0 16 00 02 	mcall	r6[8]
8000ee2e:	14 98       	mov	r8,r10
8000ee30:	16 99       	mov	r9,r11
8000ee32:	10 9a       	mov	r10,r8
8000ee34:	12 9b       	mov	r11,r9
8000ee36:	f0 16 00 6e 	mcall	r6[440]
8000ee3a:	14 98       	mov	r8,r10
8000ee3c:	16 99       	mov	r9,r11
8000ee3e:	10 9a       	mov	r10,r8
8000ee40:	12 9b       	mov	r11,r9
8000ee42:	f0 16 00 08 	mcall	r6[32]
8000ee46:	18 98       	mov	r8,r12
8000ee48:	ef 48 ff f8 	st.w	r7[-8],r8
	float airspeed=groundspeed;
8000ee4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000ee50:	ef 48 ff fc 	st.w	r7[-4],r8
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
8000ee54:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee58:	70 09       	ld.w	r9,r8[0x0]
8000ee5a:	ee ca 00 14 	sub	r10,r7,20
8000ee5e:	20 4d       	sub	sp,16
8000ee60:	1a 98       	mov	r8,sp
8000ee62:	20 08       	sub	r8,0
8000ee64:	20 09       	sub	r9,0
8000ee66:	72 0b       	ld.w	r11,r9[0x0]
8000ee68:	91 0b       	st.w	r8[0x0],r11
8000ee6a:	72 1b       	ld.w	r11,r9[0x4]
8000ee6c:	91 1b       	st.w	r8[0x4],r11
8000ee6e:	72 2b       	ld.w	r11,r9[0x8]
8000ee70:	91 2b       	st.w	r8[0x8],r11
8000ee72:	72 39       	ld.w	r9,r9[0xc]
8000ee74:	91 39       	st.w	r8[0xc],r9
8000ee76:	14 9c       	mov	r12,r10
8000ee78:	f0 16 00 70 	mcall	r6[448]
8000ee7c:	2f cd       	sub	sp,-16
	// mavlink_msg_vfr_hud_send(mavlink_channel_t chan, float airspeed, float groundspeed, int16_t heading, uint16_t throttle, float alt, float climb)
	mavlink_msg_vfr_hud_send(MAVLINK_COMM_0, airspeed, groundspeed, 180.0*aero_attitude.rpy[2]/PI, (int)((centralData->controls.thrust+1.0)*50), -centralData->position_estimator.localPosition.pos[2], -centralData->position_estimator.vel[2]);
8000ee7e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee82:	70 08       	ld.w	r8,r8[0x0]
8000ee84:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000ee88:	10 92       	mov	r2,r8
8000ee8a:	ee 12 80 00 	eorh	r2,0x8000
8000ee8e:	ec f8 00 00 	ld.w	r8,r6[0]
8000ee92:	70 08       	ld.w	r8,r8[0x0]
8000ee94:	f0 f8 09 ec 	ld.w	r8,r8[2540]
8000ee98:	10 93       	mov	r3,r8
8000ee9a:	ee 13 80 00 	eorh	r3,0x8000
8000ee9e:	ec f8 00 00 	ld.w	r8,r6[0]
8000eea2:	70 08       	ld.w	r8,r8[0x0]
8000eea4:	f0 f8 01 54 	ld.w	r8,r8[340]
8000eea8:	10 9c       	mov	r12,r8
8000eeaa:	f0 16 00 02 	mcall	r6[8]
8000eeae:	30 08       	mov	r8,0
8000eeb0:	fc 19 3f f0 	movh	r9,0x3ff0
8000eeb4:	f0 16 00 05 	mcall	r6[20]
8000eeb8:	14 98       	mov	r8,r10
8000eeba:	16 99       	mov	r9,r11
8000eebc:	10 9a       	mov	r10,r8
8000eebe:	12 9b       	mov	r11,r9
8000eec0:	30 08       	mov	r8,0
8000eec2:	fc 19 40 49 	movh	r9,0x4049
8000eec6:	f0 16 00 03 	mcall	r6[12]
8000eeca:	14 98       	mov	r8,r10
8000eecc:	16 99       	mov	r9,r11
8000eece:	10 9a       	mov	r10,r8
8000eed0:	12 9b       	mov	r11,r9
8000eed2:	f0 16 00 14 	mcall	r6[80]
8000eed6:	18 98       	mov	r8,r12
8000eed8:	5c 88       	casts.h	r8
8000eeda:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000eede:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000eee2:	10 9c       	mov	r12,r8
8000eee4:	f0 16 00 02 	mcall	r6[8]
8000eee8:	30 08       	mov	r8,0
8000eeea:	e0 69 80 00 	mov	r9,32768
8000eeee:	ea 19 40 66 	orh	r9,0x4066
8000eef2:	f0 16 00 03 	mcall	r6[12]
8000eef6:	14 98       	mov	r8,r10
8000eef8:	16 99       	mov	r9,r11
8000eefa:	10 9a       	mov	r10,r8
8000eefc:	12 9b       	mov	r11,r9
8000eefe:	e0 68 2d 18 	mov	r8,11544
8000ef02:	ea 18 54 44 	orh	r8,0x5444
8000ef06:	e0 69 21 fb 	mov	r9,8699
8000ef0a:	ea 19 40 09 	orh	r9,0x4009
8000ef0e:	f0 16 00 0c 	mcall	r6[48]
8000ef12:	14 98       	mov	r8,r10
8000ef14:	16 99       	mov	r9,r11
8000ef16:	10 9a       	mov	r10,r8
8000ef18:	12 9b       	mov	r11,r9
8000ef1a:	f0 16 00 14 	mcall	r6[80]
8000ef1e:	18 98       	mov	r8,r12
8000ef20:	5c 88       	casts.h	r8
8000ef22:	10 99       	mov	r9,r8
8000ef24:	1a d2       	st.w	--sp,r2
8000ef26:	1a d3       	st.w	--sp,r3
8000ef28:	0a 98       	mov	r8,r5
8000ef2a:	ee fa ff f8 	ld.w	r10,r7[-8]
8000ef2e:	ee fb ff fc 	ld.w	r11,r7[-4]
8000ef32:	30 0c       	mov	r12,0
8000ef34:	fe b0 f9 ec 	rcall	8000e30c <mavlink_msg_vfr_hud_send>
8000ef38:	2f ed       	sub	sp,-8

	
}
8000ef3a:	2f bd       	sub	sp,-20
8000ef3c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000ef40:	80 00       	ld.sh	r0,r0[0x0]
8000ef42:	ec 76 eb cd 	mov	r6,912333

8000ef44 <mavlink_send_gps_raw>:

void mavlink_send_gps_raw(void) {	
8000ef44:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000ef48:	1a 97       	mov	r7,sp
8000ef4a:	20 4d       	sub	sp,16
8000ef4c:	4f d6       	lddpc	r6,8000f140 <mavlink_send_gps_raw+0x1fc>
8000ef4e:	1e 26       	rsub	r6,pc
	// mavlink_msg_gps_raw_int_send(mavlink_channel_t chan, uint64_t time_usec, uint8_t fix_type, int32_t lat, int32_t lon, int32_t alt, uint16_t eph, uint16_t epv, uint16_t vel, uint16_t cog, uint8_t satellites_visible)
	if (centralData->GPS_data.status == GPS_OK)
8000ef50:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef54:	70 08       	ld.w	r8,r8[0x0]
8000ef56:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8000ef5a:	30 28       	mov	r8,2
8000ef5c:	f0 09 18 00 	cp.b	r9,r8
8000ef60:	e0 81 00 c0 	brne	8000f0e0 <mavlink_send_gps_raw+0x19c>
	{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,1000*centralData->GPS_data.timeLastMsg, centralData->GPS_data.status, centralData->GPS_data.latitude*10000000.0, centralData->GPS_data.longitude*10000000.0, centralData->GPS_data.altitude*1000.0, centralData->GPS_data.hdop*100.0, centralData->GPS_data.speedAccuracy*100.0 ,centralData->GPS_data.groundSpeed*100.0, centralData->GPS_data.course, centralData->GPS_data.num_sats);	
8000ef64:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef68:	70 08       	ld.w	r8,r8[0x0]
8000ef6a:	f1 38 07 90 	ld.ub	r8,r8[1936]
8000ef6e:	ef 48 ff f0 	st.w	r7[-16],r8
8000ef72:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef76:	70 08       	ld.w	r8,r8[0x0]
8000ef78:	f0 f8 07 7c 	ld.w	r8,r8[1916]
8000ef7c:	e5 a9 08 08 	cop	cp0,cr8,cr0,cr8,0x52
8000ef80:	5c 88       	casts.h	r8
8000ef82:	5c 78       	castu.h	r8
8000ef84:	ef 48 ff f4 	st.w	r7[-12],r8
8000ef88:	ec f8 00 00 	ld.w	r8,r6[0]
8000ef8c:	70 08       	ld.w	r8,r8[0x0]
8000ef8e:	f0 f8 07 6c 	ld.w	r8,r8[1900]
8000ef92:	10 9c       	mov	r12,r8
8000ef94:	f0 16 00 02 	mcall	r6[8]
8000ef98:	30 08       	mov	r8,0
8000ef9a:	fc 19 40 59 	movh	r9,0x4059
8000ef9e:	f0 16 00 03 	mcall	r6[12]
8000efa2:	14 98       	mov	r8,r10
8000efa4:	16 99       	mov	r9,r11
8000efa6:	10 9a       	mov	r10,r8
8000efa8:	12 9b       	mov	r11,r9
8000efaa:	f0 16 00 7e 	mcall	r6[504]
8000efae:	18 98       	mov	r8,r12
8000efb0:	5c 88       	casts.h	r8
8000efb2:	5c 78       	castu.h	r8
8000efb4:	ef 48 ff f8 	st.w	r7[-8],r8
8000efb8:	ec f8 00 00 	ld.w	r8,r6[0]
8000efbc:	70 08       	ld.w	r8,r8[0x0]
8000efbe:	f0 f8 07 88 	ld.w	r8,r8[1928]
8000efc2:	10 9c       	mov	r12,r8
8000efc4:	f0 16 00 02 	mcall	r6[8]
8000efc8:	30 08       	mov	r8,0
8000efca:	fc 19 40 59 	movh	r9,0x4059
8000efce:	f0 16 00 03 	mcall	r6[12]
8000efd2:	14 98       	mov	r8,r10
8000efd4:	16 99       	mov	r9,r11
8000efd6:	10 9a       	mov	r10,r8
8000efd8:	12 9b       	mov	r11,r9
8000efda:	f0 16 00 7e 	mcall	r6[504]
8000efde:	18 98       	mov	r8,r12
8000efe0:	5c 88       	casts.h	r8
8000efe2:	5c 78       	castu.h	r8
8000efe4:	ef 48 ff fc 	st.w	r7[-4],r8
8000efe8:	ec f8 00 00 	ld.w	r8,r6[0]
8000efec:	70 08       	ld.w	r8,r8[0x0]
8000efee:	f1 08 07 92 	ld.sh	r8,r8[1938]
8000eff2:	5c 78       	castu.h	r8
8000eff4:	10 9c       	mov	r12,r8
8000eff6:	f0 16 00 1a 	mcall	r6[104]
8000effa:	30 08       	mov	r8,0
8000effc:	fc 19 40 59 	movh	r9,0x4059
8000f000:	f0 16 00 03 	mcall	r6[12]
8000f004:	14 98       	mov	r8,r10
8000f006:	16 99       	mov	r9,r11
8000f008:	10 9a       	mov	r10,r8
8000f00a:	12 9b       	mov	r11,r9
8000f00c:	f0 16 00 7e 	mcall	r6[504]
8000f010:	18 98       	mov	r8,r12
8000f012:	5c 88       	casts.h	r8
8000f014:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f018:	ec f8 00 00 	ld.w	r8,r6[0]
8000f01c:	70 08       	ld.w	r8,r8[0x0]
8000f01e:	f0 f8 07 60 	ld.w	r8,r8[1888]
8000f022:	10 9c       	mov	r12,r8
8000f024:	f0 16 00 02 	mcall	r6[8]
8000f028:	30 08       	mov	r8,0
8000f02a:	e0 69 40 00 	mov	r9,16384
8000f02e:	ea 19 40 8f 	orh	r9,0x408f
8000f032:	f0 16 00 03 	mcall	r6[12]
8000f036:	14 98       	mov	r8,r10
8000f038:	16 99       	mov	r9,r11
8000f03a:	10 9a       	mov	r10,r8
8000f03c:	12 9b       	mov	r11,r9
8000f03e:	f0 16 00 14 	mcall	r6[80]
8000f042:	18 93       	mov	r3,r12
8000f044:	ec f8 00 00 	ld.w	r8,r6[0]
8000f048:	70 08       	ld.w	r8,r8[0x0]
8000f04a:	f0 ea 07 58 	ld.d	r10,r8[1880]
8000f04e:	30 08       	mov	r8,0
8000f050:	e0 69 12 d0 	mov	r9,4816
8000f054:	ea 19 41 63 	orh	r9,0x4163
8000f058:	f0 16 00 03 	mcall	r6[12]
8000f05c:	14 98       	mov	r8,r10
8000f05e:	16 99       	mov	r9,r11
8000f060:	10 9a       	mov	r10,r8
8000f062:	12 9b       	mov	r11,r9
8000f064:	f0 16 00 14 	mcall	r6[80]
8000f068:	18 95       	mov	r5,r12
8000f06a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f06e:	70 08       	ld.w	r8,r8[0x0]
8000f070:	f0 ea 07 50 	ld.d	r10,r8[1872]
8000f074:	30 08       	mov	r8,0
8000f076:	e0 69 12 d0 	mov	r9,4816
8000f07a:	ea 19 41 63 	orh	r9,0x4163
8000f07e:	f0 16 00 03 	mcall	r6[12]
8000f082:	14 98       	mov	r8,r10
8000f084:	16 99       	mov	r9,r11
8000f086:	10 9a       	mov	r10,r8
8000f088:	12 9b       	mov	r11,r9
8000f08a:	f0 16 00 14 	mcall	r6[80]
8000f08e:	18 9a       	mov	r10,r12
8000f090:	ec f8 00 00 	ld.w	r8,r6[0]
8000f094:	70 08       	ld.w	r8,r8[0x0]
8000f096:	f1 38 07 9c 	ld.ub	r8,r8[1948]
8000f09a:	10 99       	mov	r9,r8
8000f09c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0a0:	70 08       	ld.w	r8,r8[0x0]
8000f0a2:	f0 fb 07 94 	ld.w	r11,r8[1940]
8000f0a6:	e0 68 03 e8 	mov	r8,1000
8000f0aa:	f6 08 02 48 	mul	r8,r11,r8
8000f0ae:	10 90       	mov	r0,r8
8000f0b0:	30 01       	mov	r1,0
8000f0b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f0b6:	1a d8       	st.w	--sp,r8
8000f0b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f0bc:	1a d8       	st.w	--sp,r8
8000f0be:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f0c2:	1a d8       	st.w	--sp,r8
8000f0c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f0c8:	1a d8       	st.w	--sp,r8
8000f0ca:	1a d2       	st.w	--sp,r2
8000f0cc:	1a d3       	st.w	--sp,r3
8000f0ce:	1a d5       	st.w	--sp,r5
8000f0d0:	14 98       	mov	r8,r10
8000f0d2:	00 9a       	mov	r10,r0
8000f0d4:	02 9b       	mov	r11,r1
8000f0d6:	30 0c       	mov	r12,0
8000f0d8:	fe b0 f3 54 	rcall	8000d780 <mavlink_msg_gps_raw_int_send>
8000f0dc:	2f 9d       	sub	sp,-28
8000f0de:	c2 e8       	rjmp	8000f13a <mavlink_send_gps_raw+0x1f6>
	}else{
		mavlink_msg_gps_raw_int_send(MAVLINK_COMM_0,get_micros(), centralData->GPS_data.status, 46.5193*10000000, 6.56507*10000000, 400 * 1000, 0, 0 , 0, 0, centralData->GPS_data.num_sats);
8000f0e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0e4:	70 08       	ld.w	r8,r8[0x0]
8000f0e6:	f1 38 07 90 	ld.ub	r8,r8[1936]
8000f0ea:	10 91       	mov	r1,r8
8000f0ec:	ec f8 00 00 	ld.w	r8,r6[0]
8000f0f0:	70 08       	ld.w	r8,r8[0x0]
8000f0f2:	f1 38 07 9c 	ld.ub	r8,r8[1948]
8000f0f6:	10 95       	mov	r5,r8
8000f0f8:	f0 16 00 29 	mcall	r6[164]
8000f0fc:	18 98       	mov	r8,r12
8000f0fe:	10 92       	mov	r2,r8
8000f100:	30 03       	mov	r3,0
8000f102:	1a d1       	st.w	--sp,r1
8000f104:	30 08       	mov	r8,0
8000f106:	1a d8       	st.w	--sp,r8
8000f108:	30 08       	mov	r8,0
8000f10a:	1a d8       	st.w	--sp,r8
8000f10c:	30 08       	mov	r8,0
8000f10e:	1a d8       	st.w	--sp,r8
8000f110:	30 08       	mov	r8,0
8000f112:	1a d8       	st.w	--sp,r8
8000f114:	e6 68 1a 80 	mov	r8,400000
8000f118:	1a d8       	st.w	--sp,r8
8000f11a:	e0 68 c0 0c 	mov	r8,49164
8000f11e:	ea 18 03 e9 	orh	r8,0x3e9
8000f122:	1a d8       	st.w	--sp,r8
8000f124:	e0 68 48 28 	mov	r8,18472
8000f128:	ea 18 1b ba 	orh	r8,0x1bba
8000f12c:	0a 99       	mov	r9,r5
8000f12e:	04 9a       	mov	r10,r2
8000f130:	06 9b       	mov	r11,r3
8000f132:	30 0c       	mov	r12,0
8000f134:	fe b0 f3 26 	rcall	8000d780 <mavlink_msg_gps_raw_int_send>
8000f138:	2f 9d       	sub	sp,-28
	}
}
8000f13a:	2f cd       	sub	sp,-16
8000f13c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f140:	80 00       	ld.sh	r0,r0[0x0]
8000f142:	ed d2 70 72 	ldins.b	r2:t,r6[114]
8000f146:	65 73       	ld.w	r3,r2[0x5c]
8000f148:	73 41       	ld.w	r1,r9[0x50]
8000f14a:	6c 74       	ld.w	r4,r6[0x1c]
8000f14c:	00 00       	add	r0,r0
8000f14e:	00 00       	add	r0,r0
8000f150:	6c 61       	ld.w	r1,r6[0x18]
8000f152:	73 74       	ld.w	r4,r9[0x5c]
8000f154:	41 6c       	lddsp	r12,sp[0x58]
8000f156:	74 00       	ld.w	r0,r10[0x0]
8000f158:	62 61       	ld.w	r1,r1[0x18]
8000f15a:	72 6f       	ld.w	pc,r9[0x18]
8000f15c:	5f 64       	srmi	r4
8000f15e:	74 00       	ld.w	r0,r10[0x0]

8000f160 <mavlink_send_pressure>:


void mavlink_send_pressure(void) {			
8000f160:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8000f164:	1a 97       	mov	r7,sp
8000f166:	4b 56       	lddpc	r6,8000f238 <mavlink_send_pressure+0xd8>
8000f168:	1e 26       	rsub	r6,pc
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Altitude", centralData->pressure.altitude);
	
	
	//mavlink_msg_scaled_pressure_send(mavlink_channel_t chan, uint32_t time_boot_ms, float press_abs, float press_diff, int16_t temperature)
	
	mavlink_msg_scaled_pressure_send(MAVLINK_COMM_0, get_millis(), centralData->pressure.pressure/100.0, centralData->pressure.vario_vz, centralData->pressure.temperature*100.0);
8000f16a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f16e:	70 08       	ld.w	r8,r8[0x0]
8000f170:	f0 f8 0d 18 	ld.w	r8,r8[3352]
8000f174:	10 9c       	mov	r12,r8
8000f176:	f0 16 00 02 	mcall	r6[8]
8000f17a:	30 08       	mov	r8,0
8000f17c:	fc 19 40 59 	movh	r9,0x4059
8000f180:	f0 16 00 03 	mcall	r6[12]
8000f184:	14 98       	mov	r8,r10
8000f186:	16 99       	mov	r9,r11
8000f188:	10 9a       	mov	r10,r8
8000f18a:	12 9b       	mov	r11,r9
8000f18c:	f0 16 00 14 	mcall	r6[80]
8000f190:	18 98       	mov	r8,r12
8000f192:	5c 88       	casts.h	r8
8000f194:	10 92       	mov	r2,r8
8000f196:	ec f8 00 00 	ld.w	r8,r6[0]
8000f19a:	70 08       	ld.w	r8,r8[0x0]
8000f19c:	f0 f3 0d 30 	ld.w	r3,r8[3376]
8000f1a0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1a4:	70 08       	ld.w	r8,r8[0x0]
8000f1a6:	f0 f8 0d 14 	ld.w	r8,r8[3348]
8000f1aa:	fc 1b 42 c8 	movh	r11,0x42c8
8000f1ae:	10 9c       	mov	r12,r8
8000f1b0:	f0 16 00 0a 	mcall	r6[40]
8000f1b4:	18 98       	mov	r8,r12
8000f1b6:	10 95       	mov	r5,r8
8000f1b8:	f0 16 00 0f 	mcall	r6[60]
8000f1bc:	18 9b       	mov	r11,r12
8000f1be:	04 98       	mov	r8,r2
8000f1c0:	06 99       	mov	r9,r3
8000f1c2:	0a 9a       	mov	r10,r5
8000f1c4:	30 0c       	mov	r12,0
8000f1c6:	fe b0 f4 6f 	rcall	8000daa4 <mavlink_msg_scaled_pressure_send>
	flush_mavlink();
8000f1ca:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressAlt", centralData->pressure.altitude);
8000f1ce:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1d2:	70 08       	ld.w	r8,r8[0x0]
8000f1d4:	f0 f5 0d 28 	ld.w	r5,r8[3368]
8000f1d8:	f0 16 00 0f 	mcall	r6[60]
8000f1dc:	18 98       	mov	r8,r12
8000f1de:	0a 99       	mov	r9,r5
8000f1e0:	fe ca 00 9c 	sub	r10,pc,156
8000f1e4:	10 9b       	mov	r11,r8
8000f1e6:	30 0c       	mov	r12,0
8000f1e8:	fe b0 f9 f2 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f1ec:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"lastAlt", centralData->position_estimator.last_alt);
8000f1f0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f1f4:	70 08       	ld.w	r8,r8[0x0]
8000f1f6:	f0 f5 09 d4 	ld.w	r5,r8[2516]
8000f1fa:	f0 16 00 0f 	mcall	r6[60]
8000f1fe:	18 98       	mov	r8,r12
8000f200:	0a 99       	mov	r9,r5
8000f202:	fe ca 00 b2 	sub	r10,pc,178
8000f206:	10 9b       	mov	r11,r8
8000f208:	30 0c       	mov	r12,0
8000f20a:	fe b0 f9 e1 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f20e:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"baro_dt", centralData->pressure.dt);
8000f212:	ec f8 00 00 	ld.w	r8,r6[0]
8000f216:	70 08       	ld.w	r8,r8[0x0]
8000f218:	f0 f5 0d 40 	ld.w	r5,r8[3392]
8000f21c:	f0 16 00 0f 	mcall	r6[60]
8000f220:	18 98       	mov	r8,r12
8000f222:	0a 99       	mov	r9,r5
8000f224:	fe ca 00 cc 	sub	r10,pc,204
8000f228:	10 9b       	mov	r11,r8
8000f22a:	30 0c       	mov	r12,0
8000f22c:	fe b0 f9 d0 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	flush_mavlink();
8000f230:	f0 16 00 3c 	mcall	r6[240]
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0,get_millis(),"pressFilt", centralData->altitude_filtered);
}
8000f234:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8000f238:	80 00       	ld.sh	r0,r0[0x0]
8000f23a:	ef ec       	*unknown*
8000f23c:	52 61       	stdsp	sp[0x98],r1
8000f23e:	64 61       	ld.w	r1,r2[0x18]
8000f240:	72 5f       	ld.w	pc,r9[0x14]
8000f242:	76 65       	ld.w	r5,r11[0x18]
8000f244:	6c 6f       	ld.w	pc,r6[0x18]
8000f246:	63 69       	ld.w	r9,r1[0x58]
8000f248:	74 79       	ld.w	r9,r10[0x1c]
8000f24a:	00 00       	add	r0,r0
8000f24c:	52 61       	stdsp	sp[0x98],r1
8000f24e:	64 61       	ld.w	r1,r2[0x18]
8000f250:	72 5f       	ld.w	pc,r9[0x14]
8000f252:	61 6d       	ld.w	sp,r0[0x58]
8000f254:	70 6c       	ld.w	r12,r8[0x18]
8000f256:	69 74       	ld.w	r4,r4[0x5c]
8000f258:	75 64       	ld.w	r4,r10[0x58]
8000f25a:	65 00       	ld.w	r0,r2[0x40]

8000f25c <mavlink_send_radar>:

void mavlink_send_radar(void) {
8000f25c:	eb cd 40 e0 	pushm	r5-r7,lr
8000f260:	1a 97       	mov	r7,sp
8000f262:	20 1d       	sub	sp,4
8000f264:	49 76       	lddpc	r6,8000f2c0 <mavlink_send_radar+0x64>
8000f266:	1e 26       	rsub	r6,pc
	read_radar();
8000f268:	f0 16 01 a7 	mcall	r6[1692]
	radar_target *target=get_radar_main_target();
8000f26c:	f0 16 01 b1 	mcall	r6[1732]
8000f270:	18 98       	mov	r8,r12
8000f272:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_velocity", target->velocity);
8000f276:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f27a:	70 05       	ld.w	r5,r8[0x0]
8000f27c:	f0 16 00 0f 	mcall	r6[60]
8000f280:	18 98       	mov	r8,r12
8000f282:	0a 99       	mov	r9,r5
8000f284:	fe ca 00 48 	sub	r10,pc,72
8000f288:	10 9b       	mov	r11,r8
8000f28a:	30 0c       	mov	r12,0
8000f28c:	fe b0 f9 a0 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "Radar_amplitude", target->amplitude/1000.0);
8000f290:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f294:	70 18       	ld.w	r8,r8[0x4]
8000f296:	fc 1b 44 7a 	movh	r11,0x447a
8000f29a:	10 9c       	mov	r12,r8
8000f29c:	f0 16 00 0a 	mcall	r6[40]
8000f2a0:	18 98       	mov	r8,r12
8000f2a2:	10 95       	mov	r5,r8
8000f2a4:	f0 16 00 0f 	mcall	r6[60]
8000f2a8:	18 98       	mov	r8,r12
8000f2aa:	0a 99       	mov	r9,r5
8000f2ac:	fe ca 00 60 	sub	r10,pc,96
8000f2b0:	10 9b       	mov	r11,r8
8000f2b2:	30 0c       	mov	r12,0
8000f2b4:	fe b0 f9 8c 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
}
8000f2b8:	2f fd       	sub	sp,-4
8000f2ba:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f2be:	00 00       	add	r0,r0
8000f2c0:	80 00       	ld.sh	r0,r0[0x0]
8000f2c2:	f0 ea eb cd 	ld.d	r10,r8[-5171]

8000f2c4 <mavlink_send_estimator>:

void mavlink_send_estimator(void)
{
8000f2c4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f2c8:	1a 97       	mov	r7,sp
8000f2ca:	20 1d       	sub	sp,4
8000f2cc:	49 a6       	lddpc	r6,8000f334 <mavlink_send_estimator+0x70>
8000f2ce:	1e 26       	rsub	r6,pc
	//mavlink_msg_local_position_ned_send(mavlink_channel_t chan, uint32_t time_boot_ms, float x, float y, float z, float vx, float vy, float vz)
	//mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->estimation.state[0][0], centralData->estimation.state[1][0], centralData->estimation.state[2][0], centralData->estimation.state[0][1], centralData->estimation.state[1][1], centralData->estimation.state[2][1]);
	mavlink_msg_local_position_ned_send(MAVLINK_COMM_0, get_millis(), centralData->position_estimator.localPosition.pos[0], centralData->position_estimator.localPosition.pos[1], centralData->position_estimator.localPosition.pos[2], centralData->position_estimator.vel[0], centralData->position_estimator.vel[1], centralData->position_estimator.vel[2]);
8000f2d0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2d4:	70 08       	ld.w	r8,r8[0x0]
8000f2d6:	f0 f8 09 c4 	ld.w	r8,r8[2500]
8000f2da:	ef 48 ff fc 	st.w	r7[-4],r8
8000f2de:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2e2:	70 08       	ld.w	r8,r8[0x0]
8000f2e4:	f0 f0 09 c0 	ld.w	r0,r8[2496]
8000f2e8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2ec:	70 08       	ld.w	r8,r8[0x0]
8000f2ee:	f0 f1 09 bc 	ld.w	r1,r8[2492]
8000f2f2:	ec f8 00 00 	ld.w	r8,r6[0]
8000f2f6:	70 08       	ld.w	r8,r8[0x0]
8000f2f8:	f0 f2 09 ec 	ld.w	r2,r8[2540]
8000f2fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f300:	70 08       	ld.w	r8,r8[0x0]
8000f302:	f0 f3 09 e8 	ld.w	r3,r8[2536]
8000f306:	ec f8 00 00 	ld.w	r8,r6[0]
8000f30a:	70 08       	ld.w	r8,r8[0x0]
8000f30c:	f0 f5 09 e4 	ld.w	r5,r8[2532]
8000f310:	f0 16 00 0f 	mcall	r6[60]
8000f314:	18 9b       	mov	r11,r12
8000f316:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f31a:	1a d8       	st.w	--sp,r8
8000f31c:	1a d0       	st.w	--sp,r0
8000f31e:	1a d1       	st.w	--sp,r1
8000f320:	04 98       	mov	r8,r2
8000f322:	06 99       	mov	r9,r3
8000f324:	0a 9a       	mov	r10,r5
8000f326:	30 0c       	mov	r12,0
8000f328:	fe b0 f4 c6 	rcall	8000dcb4 <mavlink_msg_local_position_ned_send>
8000f32c:	2f dd       	sub	sp,-12
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
	//dbg_print(", ");
	//dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
	//dbg_print(")\n");
}
8000f32e:	2f fd       	sub	sp,-4
8000f330:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f334:	80 00       	ld.sh	r0,r0[0x0]
8000f336:	f1 52 65 73 	st.h	r8[25971],r2
8000f33a:	74 69       	ld.w	r9,r10[0x18]
8000f33c:	58 00       	cp.w	r0,0
8000f33e:	00 00       	add	r0,r0
8000f340:	65 73       	ld.w	r3,r2[0x5c]
8000f342:	74 69       	ld.w	r9,r10[0x18]
8000f344:	59 00       	cp.w	r0,16
8000f346:	00 00       	add	r0,r0
8000f348:	65 73       	ld.w	r3,r2[0x5c]
8000f34a:	74 69       	ld.w	r9,r10[0x18]
8000f34c:	5a 00       	cp.w	r0,-32
8000f34e:	00 00       	add	r0,r0
8000f350:	65 73       	ld.w	r3,r2[0x5c]
8000f352:	74 69       	ld.w	r9,r10[0x18]
8000f354:	56 78       	stdsp	sp[0x19c],r8
8000f356:	00 00       	add	r0,r0
8000f358:	65 73       	ld.w	r3,r2[0x5c]
8000f35a:	74 69       	ld.w	r9,r10[0x18]
8000f35c:	56 79       	stdsp	sp[0x19c],r9
8000f35e:	00 00       	add	r0,r0
8000f360:	65 73       	ld.w	r3,r2[0x5c]
8000f362:	74 69       	ld.w	r9,r10[0x18]
8000f364:	56 7a       	stdsp	sp[0x19c],r10
8000f366:	00 00       	add	r0,r0
8000f368:	65 73       	ld.w	r3,r2[0x5c]
8000f36a:	74 69       	ld.w	r9,r10[0x18]
8000f36c:	62 69       	ld.w	r9,r1[0x18]
8000f36e:	61 69       	ld.w	r9,r0[0x58]
8000f370:	73 58       	ld.w	r8,r9[0x54]
8000f372:	00 00       	add	r0,r0
8000f374:	65 73       	ld.w	r3,r2[0x5c]
8000f376:	74 69       	ld.w	r9,r10[0x18]
8000f378:	62 69       	ld.w	r9,r1[0x18]
8000f37a:	61 69       	ld.w	r9,r0[0x58]
8000f37c:	73 59       	ld.w	r9,r9[0x54]
8000f37e:	00 00       	add	r0,r0
8000f380:	65 73       	ld.w	r3,r2[0x5c]
8000f382:	74 69       	ld.w	r9,r10[0x18]
8000f384:	62 69       	ld.w	r9,r1[0x18]
8000f386:	61 69       	ld.w	r9,r0[0x58]
8000f388:	73 5a       	ld.w	r10,r9[0x54]
	...

8000f38c <mavlink_send_kalman_estimator>:

void mavlink_send_kalman_estimator(void)
{
8000f38c:	eb cd 40 e0 	pushm	r5-r7,lr
8000f390:	1a 97       	mov	r7,sp
8000f392:	4d d6       	lddpc	r6,8000f504 <mavlink_send_kalman_estimator+0x178>
8000f394:	1e 26       	rsub	r6,pc
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiX", centralData->estimation.state[X][POSITION]);
8000f396:	ec f8 00 00 	ld.w	r8,r6[0]
8000f39a:	70 08       	ld.w	r8,r8[0x0]
8000f39c:	f0 e8 07 a4 	ld.d	r8,r8[1956]
8000f3a0:	10 9a       	mov	r10,r8
8000f3a2:	12 9b       	mov	r11,r9
8000f3a4:	f0 16 00 08 	mcall	r6[32]
8000f3a8:	18 95       	mov	r5,r12
8000f3aa:	f0 16 00 0f 	mcall	r6[60]
8000f3ae:	18 98       	mov	r8,r12
8000f3b0:	0a 99       	mov	r9,r5
8000f3b2:	fe ca 00 7a 	sub	r10,pc,122
8000f3b6:	10 9b       	mov	r11,r8
8000f3b8:	30 0c       	mov	r12,0
8000f3ba:	fe b0 f9 09 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiY", centralData->estimation.state[Y][POSITION]);
8000f3be:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3c2:	70 08       	ld.w	r8,r8[0x0]
8000f3c4:	f0 e8 07 bc 	ld.d	r8,r8[1980]
8000f3c8:	10 9a       	mov	r10,r8
8000f3ca:	12 9b       	mov	r11,r9
8000f3cc:	f0 16 00 08 	mcall	r6[32]
8000f3d0:	18 95       	mov	r5,r12
8000f3d2:	f0 16 00 0f 	mcall	r6[60]
8000f3d6:	18 98       	mov	r8,r12
8000f3d8:	0a 99       	mov	r9,r5
8000f3da:	fe ca 00 9a 	sub	r10,pc,154
8000f3de:	10 9b       	mov	r11,r8
8000f3e0:	30 0c       	mov	r12,0
8000f3e2:	fe b0 f8 f5 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiZ", centralData->estimation.state[Z][POSITION]);
8000f3e6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f3ea:	70 08       	ld.w	r8,r8[0x0]
8000f3ec:	f0 e8 07 d4 	ld.d	r8,r8[2004]
8000f3f0:	10 9a       	mov	r10,r8
8000f3f2:	12 9b       	mov	r11,r9
8000f3f4:	f0 16 00 08 	mcall	r6[32]
8000f3f8:	18 95       	mov	r5,r12
8000f3fa:	f0 16 00 0f 	mcall	r6[60]
8000f3fe:	18 98       	mov	r8,r12
8000f400:	0a 99       	mov	r9,r5
8000f402:	fe ca 00 ba 	sub	r10,pc,186
8000f406:	10 9b       	mov	r11,r8
8000f408:	30 0c       	mov	r12,0
8000f40a:	fe b0 f8 e1 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVx", centralData->estimation.state[X][SPEED]);
8000f40e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f412:	70 08       	ld.w	r8,r8[0x0]
8000f414:	f0 e8 07 ac 	ld.d	r8,r8[1964]
8000f418:	10 9a       	mov	r10,r8
8000f41a:	12 9b       	mov	r11,r9
8000f41c:	f0 16 00 08 	mcall	r6[32]
8000f420:	18 95       	mov	r5,r12
8000f422:	f0 16 00 0f 	mcall	r6[60]
8000f426:	18 98       	mov	r8,r12
8000f428:	0a 99       	mov	r9,r5
8000f42a:	fe ca 00 da 	sub	r10,pc,218
8000f42e:	10 9b       	mov	r11,r8
8000f430:	30 0c       	mov	r12,0
8000f432:	fe b0 f8 cd 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVy", centralData->estimation.state[Y][SPEED]);
8000f436:	ec f8 00 00 	ld.w	r8,r6[0]
8000f43a:	70 08       	ld.w	r8,r8[0x0]
8000f43c:	f0 e8 07 c4 	ld.d	r8,r8[1988]
8000f440:	10 9a       	mov	r10,r8
8000f442:	12 9b       	mov	r11,r9
8000f444:	f0 16 00 08 	mcall	r6[32]
8000f448:	18 95       	mov	r5,r12
8000f44a:	f0 16 00 0f 	mcall	r6[60]
8000f44e:	18 98       	mov	r8,r12
8000f450:	0a 99       	mov	r9,r5
8000f452:	fe ca 00 fa 	sub	r10,pc,250
8000f456:	10 9b       	mov	r11,r8
8000f458:	30 0c       	mov	r12,0
8000f45a:	fe b0 f8 b9 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiVz", centralData->estimation.state[Z][SPEED]);
8000f45e:	ec f8 00 00 	ld.w	r8,r6[0]
8000f462:	70 08       	ld.w	r8,r8[0x0]
8000f464:	f0 e8 07 dc 	ld.d	r8,r8[2012]
8000f468:	10 9a       	mov	r10,r8
8000f46a:	12 9b       	mov	r11,r9
8000f46c:	f0 16 00 08 	mcall	r6[32]
8000f470:	18 95       	mov	r5,r12
8000f472:	f0 16 00 0f 	mcall	r6[60]
8000f476:	18 98       	mov	r8,r12
8000f478:	0a 99       	mov	r9,r5
8000f47a:	fe ca 01 1a 	sub	r10,pc,282
8000f47e:	10 9b       	mov	r11,r8
8000f480:	30 0c       	mov	r12,0
8000f482:	fe b0 f8 a5 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisX", centralData->estimation.state[X][BIAIS]);
8000f486:	ec f8 00 00 	ld.w	r8,r6[0]
8000f48a:	70 08       	ld.w	r8,r8[0x0]
8000f48c:	f0 e8 07 b4 	ld.d	r8,r8[1972]
8000f490:	10 9a       	mov	r10,r8
8000f492:	12 9b       	mov	r11,r9
8000f494:	f0 16 00 08 	mcall	r6[32]
8000f498:	18 95       	mov	r5,r12
8000f49a:	f0 16 00 0f 	mcall	r6[60]
8000f49e:	18 98       	mov	r8,r12
8000f4a0:	0a 99       	mov	r9,r5
8000f4a2:	fe ca 01 3a 	sub	r10,pc,314
8000f4a6:	10 9b       	mov	r11,r8
8000f4a8:	30 0c       	mov	r12,0
8000f4aa:	fe b0 f8 91 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisY", centralData->estimation.state[Y][BIAIS]);
8000f4ae:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4b2:	70 08       	ld.w	r8,r8[0x0]
8000f4b4:	f0 e8 07 cc 	ld.d	r8,r8[1996]
8000f4b8:	10 9a       	mov	r10,r8
8000f4ba:	12 9b       	mov	r11,r9
8000f4bc:	f0 16 00 08 	mcall	r6[32]
8000f4c0:	18 95       	mov	r5,r12
8000f4c2:	f0 16 00 0f 	mcall	r6[60]
8000f4c6:	18 98       	mov	r8,r12
8000f4c8:	0a 99       	mov	r9,r5
8000f4ca:	fe ca 01 56 	sub	r10,pc,342
8000f4ce:	10 9b       	mov	r11,r8
8000f4d0:	30 0c       	mov	r12,0
8000f4d2:	fe b0 f8 7d 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estibiaisZ", centralData->estimation.state[Z][BIAIS]);
8000f4d6:	ec f8 00 00 	ld.w	r8,r6[0]
8000f4da:	70 08       	ld.w	r8,r8[0x0]
8000f4dc:	f0 e8 07 e4 	ld.d	r8,r8[2020]
8000f4e0:	10 9a       	mov	r10,r8
8000f4e2:	12 9b       	mov	r11,r9
8000f4e4:	f0 16 00 08 	mcall	r6[32]
8000f4e8:	18 95       	mov	r5,r12
8000f4ea:	f0 16 00 0f 	mcall	r6[60]
8000f4ee:	18 98       	mov	r8,r12
8000f4f0:	0a 99       	mov	r9,r5
8000f4f2:	fe ca 01 72 	sub	r10,pc,370
8000f4f6:	10 9b       	mov	r11,r8
8000f4f8:	30 0c       	mov	r12,0
8000f4fa:	fe b0 f8 69 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Y]);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "acc_bfZ", centralData->position_estimator.vel_bf[Z]);
	
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
8000f4fe:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000f502:	00 00       	add	r0,r0
8000f504:	80 00       	ld.sh	r0,r0[0x0]
8000f506:	f2 18 eb cd 	pref	r8[-5171]

8000f508 <mavlink_send_raw_rc_channels>:
void mavlink_send_raw_rc_channels(void)
{
8000f508:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f50c:	1a 97       	mov	r7,sp
8000f50e:	20 4d       	sub	sp,16
8000f510:	4b 86       	lddpc	r6,8000f5f0 <mavlink_send_raw_rc_channels+0xe8>
8000f512:	1e 26       	rsub	r6,pc
	rc_get_channel(3)+1000,
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
8000f514:	f0 16 00 ad 	mcall	r6[692]
8000f518:	18 98       	mov	r8,r12
8000f51a:	5c 58       	castu.b	r8
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "estiDeltaT", centralData->estimation.delta_t_filter);
	//mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuDeltaT", centralData->imu1.dt);
}
void mavlink_send_raw_rc_channels(void)
{
	mavlink_msg_rc_channels_raw_send(MAVLINK_COMM_0,get_millis(),1,
8000f51c:	5c 58       	castu.b	r8
8000f51e:	ef 48 ff f0 	st.w	r7[-16],r8
8000f522:	30 7c       	mov	r12,7
8000f524:	f0 16 00 1c 	mcall	r6[112]
8000f528:	18 98       	mov	r8,r12
8000f52a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f52e:	5c 88       	casts.h	r8
8000f530:	5c 78       	castu.h	r8
8000f532:	ef 48 ff f4 	st.w	r7[-12],r8
8000f536:	30 6c       	mov	r12,6
8000f538:	f0 16 00 1c 	mcall	r6[112]
8000f53c:	18 98       	mov	r8,r12
8000f53e:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f542:	5c 88       	casts.h	r8
8000f544:	5c 78       	castu.h	r8
8000f546:	ef 48 ff f8 	st.w	r7[-8],r8
8000f54a:	30 5c       	mov	r12,5
8000f54c:	f0 16 00 1c 	mcall	r6[112]
8000f550:	18 98       	mov	r8,r12
8000f552:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f556:	5c 88       	casts.h	r8
8000f558:	5c 78       	castu.h	r8
8000f55a:	ef 48 ff fc 	st.w	r7[-4],r8
8000f55e:	30 4c       	mov	r12,4
8000f560:	f0 16 00 1c 	mcall	r6[112]
8000f564:	18 98       	mov	r8,r12
8000f566:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f56a:	5c 88       	casts.h	r8
8000f56c:	e1 d8 c0 10 	bfextu	r0,r8,0x0,0x10
8000f570:	30 3c       	mov	r12,3
8000f572:	f0 16 00 1c 	mcall	r6[112]
8000f576:	18 98       	mov	r8,r12
8000f578:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f57c:	5c 88       	casts.h	r8
8000f57e:	e3 d8 c0 10 	bfextu	r1,r8,0x0,0x10
8000f582:	30 2c       	mov	r12,2
8000f584:	f0 16 00 1c 	mcall	r6[112]
8000f588:	18 98       	mov	r8,r12
8000f58a:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f58e:	5c 88       	casts.h	r8
8000f590:	e5 d8 c0 10 	bfextu	r2,r8,0x0,0x10
8000f594:	30 1c       	mov	r12,1
8000f596:	f0 16 00 1c 	mcall	r6[112]
8000f59a:	18 98       	mov	r8,r12
8000f59c:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5a0:	5c 88       	casts.h	r8
8000f5a2:	e7 d8 c0 10 	bfextu	r3,r8,0x0,0x10
8000f5a6:	30 0c       	mov	r12,0
8000f5a8:	f0 16 00 1c 	mcall	r6[112]
8000f5ac:	18 98       	mov	r8,r12
8000f5ae:	f0 c8 fc 18 	sub	r8,r8,-1000
8000f5b2:	5c 88       	casts.h	r8
8000f5b4:	eb d8 c0 10 	bfextu	r5,r8,0x0,0x10
8000f5b8:	f0 16 00 0f 	mcall	r6[60]
8000f5bc:	18 9b       	mov	r11,r12
8000f5be:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f5c2:	1a d8       	st.w	--sp,r8
8000f5c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f5c8:	1a d8       	st.w	--sp,r8
8000f5ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f5ce:	1a d8       	st.w	--sp,r8
8000f5d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f5d4:	1a d8       	st.w	--sp,r8
8000f5d6:	1a d0       	st.w	--sp,r0
8000f5d8:	1a d1       	st.w	--sp,r1
8000f5da:	1a d2       	st.w	--sp,r2
8000f5dc:	06 98       	mov	r8,r3
8000f5de:	0a 99       	mov	r9,r5
8000f5e0:	30 1a       	mov	r10,1
8000f5e2:	30 0c       	mov	r12,0
8000f5e4:	fe b0 f4 d8 	rcall	8000df94 <mavlink_msg_rc_channels_raw_send>
8000f5e8:	2f 9d       	sub	sp,-28
	rc_get_channel(4)+1000,
	rc_get_channel(5)+1000,
	rc_get_channel(6)+1000,
	rc_get_channel(7)+1000,
	rc_check_receivers());
}
8000f5ea:	2f cd       	sub	sp,-16
8000f5ec:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f5f0:	80 00       	ld.sh	r0,r0[0x0]
8000f5f2:	f3 96       	*unknown*
8000f5f4:	43 6f       	lddsp	pc,sp[0xd8]
8000f5f6:	6c 6c       	ld.w	r12,r6[0x18]
8000f5f8:	5f 41       	srge	r1
8000f5fa:	76 6f       	ld.w	pc,r11[0x18]
8000f5fc:	69 64       	ld.w	r4,r4[0x58]
8000f5fe:	61 6e       	ld.w	lr,r0[0x58]
8000f600:	63 65       	ld.w	r5,r1[0x58]
	...

8000f604 <mavlink_send_scaled_rc_channels>:

void mavlink_send_scaled_rc_channels(void)
{
8000f604:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f608:	1a 97       	mov	r7,sp
8000f60a:	20 4d       	sub	sp,16
8000f60c:	fe f6 02 94 	ld.w	r6,pc[660]
8000f610:	1e 26       	rsub	r6,pc
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
8000f612:	f0 16 00 ad 	mcall	r6[692]
8000f616:	18 98       	mov	r8,r12
8000f618:	5c 58       	castu.b	r8
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f61a:	5c 58       	castu.b	r8
8000f61c:	ef 48 ff f0 	st.w	r7[-16],r8
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
8000f620:	30 7c       	mov	r12,7
8000f622:	f0 16 00 1c 	mcall	r6[112]
8000f626:	18 98       	mov	r8,r12
8000f628:	10 9c       	mov	r12,r8
8000f62a:	f0 16 00 1a 	mcall	r6[104]
8000f62e:	30 08       	mov	r8,0
8000f630:	e0 69 40 00 	mov	r9,16384
8000f634:	ea 19 40 8f 	orh	r9,0x408f
8000f638:	f0 16 00 03 	mcall	r6[12]
8000f63c:	14 98       	mov	r8,r10
8000f63e:	16 99       	mov	r9,r11
8000f640:	10 9a       	mov	r10,r8
8000f642:	12 9b       	mov	r11,r9
8000f644:	30 08       	mov	r8,0
8000f646:	e0 69 60 00 	mov	r9,24576
8000f64a:	ea 19 40 7b 	orh	r9,0x407b
8000f64e:	f0 16 00 0c 	mcall	r6[48]
8000f652:	14 98       	mov	r8,r10
8000f654:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f656:	10 9a       	mov	r10,r8
8000f658:	12 9b       	mov	r11,r9
8000f65a:	f0 16 00 14 	mcall	r6[80]
8000f65e:	18 98       	mov	r8,r12
8000f660:	5c 88       	casts.h	r8
8000f662:	ef 48 ff f4 	st.w	r7[-12],r8
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
8000f666:	30 6c       	mov	r12,6
8000f668:	f0 16 00 1c 	mcall	r6[112]
8000f66c:	18 98       	mov	r8,r12
8000f66e:	10 9c       	mov	r12,r8
8000f670:	f0 16 00 1a 	mcall	r6[104]
8000f674:	30 08       	mov	r8,0
8000f676:	e0 69 40 00 	mov	r9,16384
8000f67a:	ea 19 40 8f 	orh	r9,0x408f
8000f67e:	f0 16 00 03 	mcall	r6[12]
8000f682:	14 98       	mov	r8,r10
8000f684:	16 99       	mov	r9,r11
8000f686:	10 9a       	mov	r10,r8
8000f688:	12 9b       	mov	r11,r9
8000f68a:	30 08       	mov	r8,0
8000f68c:	e0 69 60 00 	mov	r9,24576
8000f690:	ea 19 40 7b 	orh	r9,0x407b
8000f694:	f0 16 00 0c 	mcall	r6[48]
8000f698:	14 98       	mov	r8,r10
8000f69a:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f69c:	10 9a       	mov	r10,r8
8000f69e:	12 9b       	mov	r11,r9
8000f6a0:	f0 16 00 14 	mcall	r6[80]
8000f6a4:	18 98       	mov	r8,r12
8000f6a6:	5c 88       	casts.h	r8
8000f6a8:	ef 48 ff f8 	st.w	r7[-8],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
8000f6ac:	30 5c       	mov	r12,5
8000f6ae:	f0 16 00 1c 	mcall	r6[112]
8000f6b2:	18 98       	mov	r8,r12
8000f6b4:	10 9c       	mov	r12,r8
8000f6b6:	f0 16 00 1a 	mcall	r6[104]
8000f6ba:	30 08       	mov	r8,0
8000f6bc:	e0 69 40 00 	mov	r9,16384
8000f6c0:	ea 19 40 8f 	orh	r9,0x408f
8000f6c4:	f0 16 00 03 	mcall	r6[12]
8000f6c8:	14 98       	mov	r8,r10
8000f6ca:	16 99       	mov	r9,r11
8000f6cc:	10 9a       	mov	r10,r8
8000f6ce:	12 9b       	mov	r11,r9
8000f6d0:	30 08       	mov	r8,0
8000f6d2:	e0 69 60 00 	mov	r9,24576
8000f6d6:	ea 19 40 7b 	orh	r9,0x407b
8000f6da:	f0 16 00 0c 	mcall	r6[48]
8000f6de:	14 98       	mov	r8,r10
8000f6e0:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f6e2:	10 9a       	mov	r10,r8
8000f6e4:	12 9b       	mov	r11,r9
8000f6e6:	f0 16 00 14 	mcall	r6[80]
8000f6ea:	18 98       	mov	r8,r12
8000f6ec:	5c 88       	casts.h	r8
8000f6ee:	ef 48 ff fc 	st.w	r7[-4],r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(4) * 1000.0 * RC_SCALEFACTOR,
8000f6f2:	30 4c       	mov	r12,4
8000f6f4:	f0 16 00 1c 	mcall	r6[112]
8000f6f8:	18 98       	mov	r8,r12
8000f6fa:	10 9c       	mov	r12,r8
8000f6fc:	f0 16 00 1a 	mcall	r6[104]
8000f700:	30 08       	mov	r8,0
8000f702:	e0 69 40 00 	mov	r9,16384
8000f706:	ea 19 40 8f 	orh	r9,0x408f
8000f70a:	f0 16 00 03 	mcall	r6[12]
8000f70e:	14 98       	mov	r8,r10
8000f710:	16 99       	mov	r9,r11
8000f712:	10 9a       	mov	r10,r8
8000f714:	12 9b       	mov	r11,r9
8000f716:	30 08       	mov	r8,0
8000f718:	e0 69 60 00 	mov	r9,24576
8000f71c:	ea 19 40 7b 	orh	r9,0x407b
8000f720:	f0 16 00 0c 	mcall	r6[48]
8000f724:	14 98       	mov	r8,r10
8000f726:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f728:	10 9a       	mov	r10,r8
8000f72a:	12 9b       	mov	r11,r9
8000f72c:	f0 16 00 14 	mcall	r6[80]
8000f730:	18 98       	mov	r8,r12
8000f732:	5c 88       	casts.h	r8
8000f734:	10 90       	mov	r0,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(3) * 1000.0 * RC_SCALEFACTOR,
8000f736:	30 3c       	mov	r12,3
8000f738:	f0 16 00 1c 	mcall	r6[112]
8000f73c:	18 98       	mov	r8,r12
8000f73e:	10 9c       	mov	r12,r8
8000f740:	f0 16 00 1a 	mcall	r6[104]
8000f744:	30 08       	mov	r8,0
8000f746:	e0 69 40 00 	mov	r9,16384
8000f74a:	ea 19 40 8f 	orh	r9,0x408f
8000f74e:	f0 16 00 03 	mcall	r6[12]
8000f752:	14 98       	mov	r8,r10
8000f754:	16 99       	mov	r9,r11
8000f756:	10 9a       	mov	r10,r8
8000f758:	12 9b       	mov	r11,r9
8000f75a:	30 08       	mov	r8,0
8000f75c:	e0 69 60 00 	mov	r9,24576
8000f760:	ea 19 40 7b 	orh	r9,0x407b
8000f764:	f0 16 00 0c 	mcall	r6[48]
8000f768:	14 98       	mov	r8,r10
8000f76a:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f76c:	10 9a       	mov	r10,r8
8000f76e:	12 9b       	mov	r11,r9
8000f770:	f0 16 00 14 	mcall	r6[80]
8000f774:	18 98       	mov	r8,r12
8000f776:	5c 88       	casts.h	r8
8000f778:	10 91       	mov	r1,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(2) * 1000.0 * RC_SCALEFACTOR,
8000f77a:	30 2c       	mov	r12,2
8000f77c:	f0 16 00 1c 	mcall	r6[112]
8000f780:	18 98       	mov	r8,r12
8000f782:	10 9c       	mov	r12,r8
8000f784:	f0 16 00 1a 	mcall	r6[104]
8000f788:	30 08       	mov	r8,0
8000f78a:	e0 69 40 00 	mov	r9,16384
8000f78e:	ea 19 40 8f 	orh	r9,0x408f
8000f792:	f0 16 00 03 	mcall	r6[12]
8000f796:	14 98       	mov	r8,r10
8000f798:	16 99       	mov	r9,r11
8000f79a:	10 9a       	mov	r10,r8
8000f79c:	12 9b       	mov	r11,r9
8000f79e:	30 08       	mov	r8,0
8000f7a0:	e0 69 60 00 	mov	r9,24576
8000f7a4:	ea 19 40 7b 	orh	r9,0x407b
8000f7a8:	f0 16 00 0c 	mcall	r6[48]
8000f7ac:	14 98       	mov	r8,r10
8000f7ae:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f7b0:	10 9a       	mov	r10,r8
8000f7b2:	12 9b       	mov	r11,r9
8000f7b4:	f0 16 00 14 	mcall	r6[80]
8000f7b8:	18 98       	mov	r8,r12
8000f7ba:	5c 88       	casts.h	r8
8000f7bc:	10 92       	mov	r2,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
	rc_get_channel(1) * 1000.0 * RC_SCALEFACTOR,
8000f7be:	30 1c       	mov	r12,1
8000f7c0:	f0 16 00 1c 	mcall	r6[112]
8000f7c4:	18 98       	mov	r8,r12
8000f7c6:	10 9c       	mov	r12,r8
8000f7c8:	f0 16 00 1a 	mcall	r6[104]
8000f7cc:	30 08       	mov	r8,0
8000f7ce:	e0 69 40 00 	mov	r9,16384
8000f7d2:	ea 19 40 8f 	orh	r9,0x408f
8000f7d6:	f0 16 00 03 	mcall	r6[12]
8000f7da:	14 98       	mov	r8,r10
8000f7dc:	16 99       	mov	r9,r11
8000f7de:	10 9a       	mov	r10,r8
8000f7e0:	12 9b       	mov	r11,r9
8000f7e2:	30 08       	mov	r8,0
8000f7e4:	e0 69 60 00 	mov	r9,24576
8000f7e8:	ea 19 40 7b 	orh	r9,0x407b
8000f7ec:	f0 16 00 0c 	mcall	r6[48]
8000f7f0:	14 98       	mov	r8,r10
8000f7f2:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f7f4:	10 9a       	mov	r10,r8
8000f7f6:	12 9b       	mov	r11,r9
8000f7f8:	f0 16 00 14 	mcall	r6[80]
8000f7fc:	18 98       	mov	r8,r12
8000f7fe:	5c 88       	casts.h	r8
8000f800:	10 93       	mov	r3,r8
	rc_get_channel(0) * 1000.0 * RC_SCALEFACTOR ,
8000f802:	30 0c       	mov	r12,0
8000f804:	f0 16 00 1c 	mcall	r6[112]
8000f808:	18 98       	mov	r8,r12
8000f80a:	10 9c       	mov	r12,r8
8000f80c:	f0 16 00 1a 	mcall	r6[104]
8000f810:	30 08       	mov	r8,0
8000f812:	e0 69 40 00 	mov	r9,16384
8000f816:	ea 19 40 8f 	orh	r9,0x408f
8000f81a:	f0 16 00 03 	mcall	r6[12]
8000f81e:	14 98       	mov	r8,r10
8000f820:	16 99       	mov	r9,r11
8000f822:	10 9a       	mov	r10,r8
8000f824:	12 9b       	mov	r11,r9
8000f826:	30 08       	mov	r8,0
8000f828:	e0 69 60 00 	mov	r9,24576
8000f82c:	ea 19 40 7b 	orh	r9,0x407b
8000f830:	f0 16 00 0c 	mcall	r6[48]
8000f834:	14 98       	mov	r8,r10
8000f836:	16 99       	mov	r9,r11
	rc_check_receivers());
}

void mavlink_send_scaled_rc_channels(void)
{
	mavlink_msg_rc_channels_scaled_send(MAVLINK_COMM_0,get_millis(),1,
8000f838:	10 9a       	mov	r10,r8
8000f83a:	12 9b       	mov	r11,r9
8000f83c:	f0 16 00 14 	mcall	r6[80]
8000f840:	18 98       	mov	r8,r12
8000f842:	5c 88       	casts.h	r8
8000f844:	10 95       	mov	r5,r8
8000f846:	f0 16 00 0f 	mcall	r6[60]
8000f84a:	18 9b       	mov	r11,r12
8000f84c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8000f850:	1a d8       	st.w	--sp,r8
8000f852:	ee f8 ff f4 	ld.w	r8,r7[-12]
8000f856:	1a d8       	st.w	--sp,r8
8000f858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8000f85c:	1a d8       	st.w	--sp,r8
8000f85e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000f862:	1a d8       	st.w	--sp,r8
8000f864:	1a d0       	st.w	--sp,r0
8000f866:	1a d1       	st.w	--sp,r1
8000f868:	1a d2       	st.w	--sp,r2
8000f86a:	06 98       	mov	r8,r3
8000f86c:	0a 99       	mov	r9,r5
8000f86e:	30 1a       	mov	r10,1
8000f870:	30 0c       	mov	r12,0
8000f872:	fe b0 f2 fb 	rcall	8000de68 <mavlink_msg_rc_channels_scaled_send>
8000f876:	2f 9d       	sub	sp,-28
	rc_get_channel(5) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(6) * 1000.0 * RC_SCALEFACTOR,
	rc_get_channel(7) * 1000.0 * RC_SCALEFACTOR,
	rc_check_receivers());
	
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0,get_millis(),"Coll_Avoidance",centralData->collision_avoidance);
8000f878:	ec f8 00 00 	ld.w	r8,r6[0]
8000f87c:	70 08       	ld.w	r8,r8[0x0]
8000f87e:	f1 38 0d 03 	ld.ub	r8,r8[3331]
8000f882:	10 95       	mov	r5,r8
8000f884:	f0 16 00 0f 	mcall	r6[60]
8000f888:	18 98       	mov	r8,r12
8000f88a:	0a 99       	mov	r9,r5
8000f88c:	fe ca 02 98 	sub	r10,pc,664
8000f890:	10 9b       	mov	r11,r8
8000f892:	30 0c       	mov	r12,0
8000f894:	fe b0 f6 d4 	rcall	8000e63c <mavlink_msg_named_value_int_send>
}
8000f898:	2f cd       	sub	sp,-16
8000f89a:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000f89e:	00 00       	add	r0,r0
8000f8a0:	80 00       	ld.sh	r0,r0[0x0]
8000f8a2:	f4 94 72 6f 	brge	7febdd80 <_estack+0x7feadd80>
8000f8a6:	6c 6c       	ld.w	r12,r6[0x18]
8000f8a8:	74 6f       	ld.w	pc,r10[0x18]
8000f8aa:	72 71       	ld.w	r1,r9[0x1c]
8000f8ac:	75 65       	ld.w	r5,r10[0x58]
8000f8ae:	00 00       	add	r0,r0
8000f8b0:	70 69       	ld.w	r9,r8[0x18]
8000f8b2:	74 63       	ld.w	r3,r10[0x18]
8000f8b4:	68 74       	ld.w	r4,r4[0x1c]
8000f8b6:	6f 72       	ld.w	r2,r7[0x5c]
8000f8b8:	71 75       	ld.w	r5,r8[0x5c]
8000f8ba:	65 00       	ld.w	r0,r2[0x40]
8000f8bc:	79 61       	ld.w	r1,r12[0x58]
8000f8be:	77 74       	ld.w	r4,r11[0x5c]
8000f8c0:	6f 72       	ld.w	r2,r7[0x5c]
8000f8c2:	71 75       	ld.w	r5,r8[0x5c]
8000f8c4:	65 00       	ld.w	r0,r2[0x40]
8000f8c6:	00 00       	add	r0,r0
8000f8c8:	74 68       	ld.w	r8,r10[0x18]
8000f8ca:	72 75       	ld.w	r5,r9[0x1c]
8000f8cc:	73 74       	ld.w	r4,r9[0x5c]
8000f8ce:	00 00       	add	r0,r0
8000f8d0:	72 70       	ld.w	r0,r9[0x1c]
8000f8d2:	6d 31       	ld.w	r1,r6[0x4c]
8000f8d4:	00 00       	add	r0,r0
8000f8d6:	00 00       	add	r0,r0
8000f8d8:	72 70       	ld.w	r0,r9[0x1c]
8000f8da:	6d 32       	ld.w	r2,r6[0x4c]
8000f8dc:	00 00       	add	r0,r0
8000f8de:	00 00       	add	r0,r0
8000f8e0:	72 70       	ld.w	r0,r9[0x1c]
8000f8e2:	6d 33       	ld.w	r3,r6[0x4c]
8000f8e4:	00 00       	add	r0,r0
8000f8e6:	00 00       	add	r0,r0
8000f8e8:	72 70       	ld.w	r0,r9[0x1c]
8000f8ea:	6d 34       	ld.w	r4,r6[0x4c]
	...

8000f8ee <mavlink_send_simulation>:

void mavlink_send_simulation(void) {
8000f8ee:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8000f8f2:	1a 97       	mov	r7,sp
8000f8f4:	21 6d       	sub	sp,88
8000f8f6:	fe f6 03 66 	ld.w	r6,pc[870]
8000f8fa:	1e 26       	rsub	r6,pc
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
8000f8fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000f900:	70 09       	ld.w	r9,r8[0x0]
8000f902:	ee ca 00 0c 	sub	r10,r7,12
8000f906:	20 4d       	sub	sp,16
8000f908:	1a 98       	mov	r8,sp
8000f90a:	f2 c9 f7 c8 	sub	r9,r9,-2104
8000f90e:	20 08       	sub	r8,0
8000f910:	20 09       	sub	r9,0
8000f912:	72 0b       	ld.w	r11,r9[0x0]
8000f914:	91 0b       	st.w	r8[0x0],r11
8000f916:	72 1b       	ld.w	r11,r9[0x4]
8000f918:	91 1b       	st.w	r8[0x4],r11
8000f91a:	72 2b       	ld.w	r11,r9[0x8]
8000f91c:	91 2b       	st.w	r8[0x8],r11
8000f91e:	72 39       	ld.w	r9,r9[0xc]
8000f920:	91 39       	st.w	r8[0xc],r9
8000f922:	14 9c       	mov	r12,r10
8000f924:	f0 16 00 70 	mcall	r6[448]
8000f928:	2f cd       	sub	sp,-16
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
8000f92a:	ec f8 00 00 	ld.w	r8,r6[0]
8000f92e:	70 08       	ld.w	r8,r8[0x0]
8000f930:	ee cc 00 28 	sub	r12,r7,40
8000f934:	20 cd       	sub	sp,48
8000f936:	1a 99       	mov	r9,sp
8000f938:	12 9b       	mov	r11,r9
8000f93a:	f0 ca f6 fc 	sub	r10,r8,-2308
8000f93e:	f6 c8 00 00 	sub	r8,r11,0
8000f942:	f4 c9 00 00 	sub	r9,r10,0
8000f946:	72 0e       	ld.w	lr,r9[0x0]
8000f948:	91 0e       	st.w	r8[0x0],lr
8000f94a:	72 1e       	ld.w	lr,r9[0x4]
8000f94c:	91 1e       	st.w	r8[0x4],lr
8000f94e:	72 2e       	ld.w	lr,r9[0x8]
8000f950:	91 2e       	st.w	r8[0x8],lr
8000f952:	72 39       	ld.w	r9,r9[0xc]
8000f954:	91 39       	st.w	r8[0xc],r9
8000f956:	f6 c8 ff f0 	sub	r8,r11,-16
8000f95a:	f4 c9 ff f0 	sub	r9,r10,-16
8000f95e:	72 0e       	ld.w	lr,r9[0x0]
8000f960:	91 0e       	st.w	r8[0x0],lr
8000f962:	72 1e       	ld.w	lr,r9[0x4]
8000f964:	91 1e       	st.w	r8[0x4],lr
8000f966:	72 2e       	ld.w	lr,r9[0x8]
8000f968:	91 2e       	st.w	r8[0x8],lr
8000f96a:	72 39       	ld.w	r9,r9[0xc]
8000f96c:	91 39       	st.w	r8[0xc],r9
8000f96e:	f6 c8 ff e0 	sub	r8,r11,-32
8000f972:	f4 c9 ff e0 	sub	r9,r10,-32
8000f976:	72 0a       	ld.w	r10,r9[0x0]
8000f978:	91 0a       	st.w	r8[0x0],r10
8000f97a:	72 1a       	ld.w	r10,r9[0x4]
8000f97c:	91 1a       	st.w	r8[0x4],r10
8000f97e:	72 2a       	ld.w	r10,r9[0x8]
8000f980:	91 2a       	st.w	r8[0x8],r10
8000f982:	72 39       	ld.w	r9,r9[0xc]
8000f984:	91 39       	st.w	r8[0xc],r9
8000f986:	f0 16 00 8b 	mcall	r6[556]
8000f98a:	2f 4d       	sub	sp,-48
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f98c:	ec f8 00 00 	ld.w	r8,r6[0]
8000f990:	70 08       	ld.w	r8,r8[0x0]
8000f992:	f0 f9 08 10 	ld.w	r9,r8[2064]
8000f996:	fc 18 44 7a 	movh	r8,0x447a
8000f99a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f99e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9a2:	5c 88       	casts.h	r8
8000f9a4:	ef 48 ff a8 	st.w	r7[-88],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f9a8:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9ac:	70 08       	ld.w	r8,r8[0x0]
8000f9ae:	f0 f9 08 0c 	ld.w	r9,r8[2060]
8000f9b2:	fc 18 44 7a 	movh	r8,0x447a
8000f9b6:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9ba:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9be:	5c 88       	casts.h	r8
8000f9c0:	ef 48 ff ac 	st.w	r7[-84],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
8000f9c4:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9c8:	70 08       	ld.w	r8,r8[0x0]
8000f9ca:	f0 f9 08 08 	ld.w	r9,r8[2056]
8000f9ce:	fc 18 44 7a 	movh	r8,0x447a
8000f9d2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9da:	5c 88       	casts.h	r8
8000f9dc:	ef 48 ff b0 	st.w	r7[-80],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f9e0:	ec f8 00 00 	ld.w	r8,r6[0]
8000f9e4:	70 08       	ld.w	r8,r8[0x0]
8000f9e6:	f0 f9 08 28 	ld.w	r9,r8[2088]
8000f9ea:	fc 18 42 c8 	movh	r8,0x42c8
8000f9ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000f9f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000f9f6:	5c 88       	casts.h	r8
8000f9f8:	ef 48 ff b4 	st.w	r7[-76],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000f9fc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa00:	70 08       	ld.w	r8,r8[0x0]
8000fa02:	f0 f9 08 24 	ld.w	r9,r8[2084]
8000fa06:	fc 18 42 c8 	movh	r8,0x42c8
8000fa0a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa0e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa12:	5c 88       	casts.h	r8
8000fa14:	ef 48 ff b8 	st.w	r7[-72],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
8000fa18:	ec f8 00 00 	ld.w	r8,r6[0]
8000fa1c:	70 08       	ld.w	r8,r8[0x0]
8000fa1e:	f0 f9 08 20 	ld.w	r9,r8[2080]
8000fa22:	fc 18 42 c8 	movh	r8,0x42c8
8000fa26:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa2a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8000fa2e:	5c 88       	casts.h	r8
8000fa30:	ef 48 ff bc 	st.w	r7[-68],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa34:	ee f8 ff e8 	ld.w	r8,r7[-24]
8000fa38:	10 9c       	mov	r12,r8
8000fa3a:	f0 16 00 02 	mcall	r6[8]
8000fa3e:	30 08       	mov	r8,0
8000fa40:	e0 69 40 00 	mov	r9,16384
8000fa44:	ea 19 40 8f 	orh	r9,0x408f
8000fa48:	f0 16 00 03 	mcall	r6[12]
8000fa4c:	14 98       	mov	r8,r10
8000fa4e:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa50:	10 9a       	mov	r10,r8
8000fa52:	12 9b       	mov	r11,r9
8000fa54:	f0 16 00 14 	mcall	r6[80]
8000fa58:	ef 4c ff c0 	st.w	r7[-64],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa5c:	ee ea ff d8 	ld.d	r10,r7[-40]
8000fa60:	30 08       	mov	r8,0
8000fa62:	e0 69 12 d0 	mov	r9,4816
8000fa66:	ea 19 41 63 	orh	r9,0x4163
8000fa6a:	f0 16 00 03 	mcall	r6[12]
8000fa6e:	14 98       	mov	r8,r10
8000fa70:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa72:	10 9a       	mov	r10,r8
8000fa74:	12 9b       	mov	r11,r9
8000fa76:	f0 16 00 14 	mcall	r6[80]
8000fa7a:	ef 4c ff c4 	st.w	r7[-60],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
8000fa7e:	ee ea ff e0 	ld.d	r10,r7[-32]
8000fa82:	30 08       	mov	r8,0
8000fa84:	e0 69 12 d0 	mov	r9,4816
8000fa88:	ea 19 41 63 	orh	r9,0x4163
8000fa8c:	f0 16 00 03 	mcall	r6[12]
8000fa90:	14 98       	mov	r8,r10
8000fa92:	16 99       	mov	r9,r11
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fa94:	10 9a       	mov	r10,r8
8000fa96:	12 9b       	mov	r11,r9
8000fa98:	f0 16 00 14 	mcall	r6[80]
8000fa9c:	ef 4c ff c8 	st.w	r7[-56],r12
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000faa0:	ec f8 00 00 	ld.w	r8,r6[0]
8000faa4:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000faa6:	f0 f8 08 04 	ld.w	r8,r8[2052]
8000faaa:	ef 48 ff cc 	st.w	r7[-52],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000faae:	ec f8 00 00 	ld.w	r8,r6[0]
8000fab2:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fab4:	f0 f8 08 00 	ld.w	r8,r8[2048]
8000fab8:	ef 48 ff d0 	st.w	r7[-48],r8
	aero_attitude.rpy[0], aero_attitude.rpy[1], aero_attitude.rpy[2],
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
8000fabc:	ec f8 00 00 	ld.w	r8,r6[0]
8000fac0:	70 08       	ld.w	r8,r8[0x0]
void mavlink_send_simulation(void) {
	Aero_Attitude_t aero_attitude;
	aero_attitude=Quat_to_Aero(centralData->sim_model.attitude.qe);
	global_position_t gpos=local_to_global_position(centralData->sim_model.localPosition);
	
	mavlink_msg_hil_state_send(MAVLINK_COMM_0, get_micros(), 
8000fac2:	f0 f8 07 fc 	ld.w	r8,r8[2044]
8000fac6:	ef 48 ff d4 	st.w	r7[-44],r8
8000faca:	ee f0 ff fc 	ld.w	r0,r7[-4]
8000face:	ee f1 ff f8 	ld.w	r1,r7[-8]
8000fad2:	ee f5 ff f4 	ld.w	r5,r7[-12]
8000fad6:	f0 16 00 29 	mcall	r6[164]
8000fada:	18 98       	mov	r8,r12
8000fadc:	10 92       	mov	r2,r8
8000fade:	30 03       	mov	r3,0
8000fae0:	ee f8 ff a8 	ld.w	r8,r7[-88]
8000fae4:	1a d8       	st.w	--sp,r8
8000fae6:	ee f8 ff ac 	ld.w	r8,r7[-84]
8000faea:	1a d8       	st.w	--sp,r8
8000faec:	ee f8 ff b0 	ld.w	r8,r7[-80]
8000faf0:	1a d8       	st.w	--sp,r8
8000faf2:	ee f8 ff b4 	ld.w	r8,r7[-76]
8000faf6:	1a d8       	st.w	--sp,r8
8000faf8:	ee f8 ff b8 	ld.w	r8,r7[-72]
8000fafc:	1a d8       	st.w	--sp,r8
8000fafe:	ee f8 ff bc 	ld.w	r8,r7[-68]
8000fb02:	1a d8       	st.w	--sp,r8
8000fb04:	ee f8 ff c0 	ld.w	r8,r7[-64]
8000fb08:	1a d8       	st.w	--sp,r8
8000fb0a:	ee f8 ff c4 	ld.w	r8,r7[-60]
8000fb0e:	1a d8       	st.w	--sp,r8
8000fb10:	ee f8 ff c8 	ld.w	r8,r7[-56]
8000fb14:	1a d8       	st.w	--sp,r8
8000fb16:	ee f8 ff cc 	ld.w	r8,r7[-52]
8000fb1a:	1a d8       	st.w	--sp,r8
8000fb1c:	ee f8 ff d0 	ld.w	r8,r7[-48]
8000fb20:	1a d8       	st.w	--sp,r8
8000fb22:	ee f8 ff d4 	ld.w	r8,r7[-44]
8000fb26:	1a d8       	st.w	--sp,r8
8000fb28:	1a d0       	st.w	--sp,r0
8000fb2a:	02 98       	mov	r8,r1
8000fb2c:	0a 99       	mov	r9,r5
8000fb2e:	04 9a       	mov	r10,r2
8000fb30:	06 9b       	mov	r11,r3
8000fb32:	30 0c       	mov	r12,0
8000fb34:	fe b0 f4 8c 	rcall	8000e44c <mavlink_msg_hil_state_send>
8000fb38:	2f 3d       	sub	sp,-52
	centralData->sim_model.rates_bf[ROLL], centralData->sim_model.rates_bf[PITCH], centralData->sim_model.rates_bf[YAW],
	gpos.latitude*10000000, gpos.longitude*10000000, gpos.altitude*1000.0,
	100*centralData->sim_model.vel[X], 100*centralData->sim_model.vel[Y], 100*centralData->sim_model.vel[Z],
	1000*centralData->sim_model.lin_forces_bf[0], 1000*centralData->sim_model.lin_forces_bf[1], 1000*centralData->sim_model.lin_forces_bf[2]
	);
	flush_mavlink();
8000fb3a:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "rolltorque", centralData->sim_model.torques_bf[0]);flush_mavlink();
8000fb3e:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb42:	70 08       	ld.w	r8,r8[0x0]
8000fb44:	f0 f8 07 f0 	ld.w	r8,r8[2032]
8000fb48:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fb4c:	f0 16 00 0f 	mcall	r6[60]
8000fb50:	18 98       	mov	r8,r12
8000fb52:	0a 99       	mov	r9,r5
8000fb54:	fe ca 02 b0 	sub	r10,pc,688
8000fb58:	10 9b       	mov	r11,r8
8000fb5a:	30 0c       	mov	r12,0
8000fb5c:	fe b0 f5 70 	rcall	8000e63c <mavlink_msg_named_value_int_send>
8000fb60:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "pitchtorque", centralData->sim_model.torques_bf[1]);flush_mavlink();
8000fb64:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb68:	70 08       	ld.w	r8,r8[0x0]
8000fb6a:	f0 f8 07 f4 	ld.w	r8,r8[2036]
8000fb6e:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fb72:	f0 16 00 0f 	mcall	r6[60]
8000fb76:	18 98       	mov	r8,r12
8000fb78:	0a 99       	mov	r9,r5
8000fb7a:	fe ca 02 ca 	sub	r10,pc,714
8000fb7e:	10 9b       	mov	r11,r8
8000fb80:	30 0c       	mov	r12,0
8000fb82:	fe b0 f5 5d 	rcall	8000e63c <mavlink_msg_named_value_int_send>
8000fb86:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_int_send(MAVLINK_COMM_0, get_millis(), "yawtorque", centralData->sim_model.torques_bf[2]);flush_mavlink();
8000fb8a:	ec f8 00 00 	ld.w	r8,r6[0]
8000fb8e:	70 08       	ld.w	r8,r8[0x0]
8000fb90:	f0 f8 07 f8 	ld.w	r8,r8[2040]
8000fb94:	e5 ab 05 08 	cop	cp0,cr5,cr0,cr8,0x56
8000fb98:	f0 16 00 0f 	mcall	r6[60]
8000fb9c:	18 98       	mov	r8,r12
8000fb9e:	0a 99       	mov	r9,r5
8000fba0:	fe ca 02 e4 	sub	r10,pc,740
8000fba4:	10 9b       	mov	r11,r8
8000fba6:	30 0c       	mov	r12,0
8000fba8:	fe b0 f5 4a 	rcall	8000e63c <mavlink_msg_named_value_int_send>
8000fbac:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "thrust", centralData->sim_model.lin_forces_bf[2]);flush_mavlink();
8000fbb0:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbb4:	70 08       	ld.w	r8,r8[0x0]
8000fbb6:	f0 f5 08 10 	ld.w	r5,r8[2064]
8000fbba:	f0 16 00 0f 	mcall	r6[60]
8000fbbe:	18 98       	mov	r8,r12
8000fbc0:	0a 99       	mov	r9,r5
8000fbc2:	fe ca 02 fa 	sub	r10,pc,762
8000fbc6:	10 9b       	mov	r11,r8
8000fbc8:	30 0c       	mov	r12,0
8000fbca:	fe b0 f5 01 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
8000fbce:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm1", centralData->sim_model.rotorspeeds[0]);flush_mavlink();
8000fbd2:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbd6:	70 08       	ld.w	r8,r8[0x0]
8000fbd8:	f0 f5 09 34 	ld.w	r5,r8[2356]
8000fbdc:	f0 16 00 0f 	mcall	r6[60]
8000fbe0:	18 98       	mov	r8,r12
8000fbe2:	0a 99       	mov	r9,r5
8000fbe4:	fe ca 03 14 	sub	r10,pc,788
8000fbe8:	10 9b       	mov	r11,r8
8000fbea:	30 0c       	mov	r12,0
8000fbec:	fe b0 f4 f0 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
8000fbf0:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm2", centralData->sim_model.rotorspeeds[1]);flush_mavlink();
8000fbf4:	ec f8 00 00 	ld.w	r8,r6[0]
8000fbf8:	70 08       	ld.w	r8,r8[0x0]
8000fbfa:	f0 f5 09 38 	ld.w	r5,r8[2360]
8000fbfe:	f0 16 00 0f 	mcall	r6[60]
8000fc02:	18 98       	mov	r8,r12
8000fc04:	0a 99       	mov	r9,r5
8000fc06:	fe ca 03 2e 	sub	r10,pc,814
8000fc0a:	10 9b       	mov	r11,r8
8000fc0c:	30 0c       	mov	r12,0
8000fc0e:	fe b0 f4 df 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
8000fc12:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm3", centralData->sim_model.rotorspeeds[2]);flush_mavlink();
8000fc16:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc1a:	70 08       	ld.w	r8,r8[0x0]
8000fc1c:	f0 f5 09 3c 	ld.w	r5,r8[2364]
8000fc20:	f0 16 00 0f 	mcall	r6[60]
8000fc24:	18 98       	mov	r8,r12
8000fc26:	0a 99       	mov	r9,r5
8000fc28:	fe ca 03 48 	sub	r10,pc,840
8000fc2c:	10 9b       	mov	r11,r8
8000fc2e:	30 0c       	mov	r12,0
8000fc30:	fe b0 f4 ce 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
8000fc34:	f0 16 00 3c 	mcall	r6[240]
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "rpm4", centralData->sim_model.rotorspeeds[3]);
8000fc38:	ec f8 00 00 	ld.w	r8,r6[0]
8000fc3c:	70 08       	ld.w	r8,r8[0x0]
8000fc3e:	f0 f5 09 40 	ld.w	r5,r8[2368]
8000fc42:	f0 16 00 0f 	mcall	r6[60]
8000fc46:	18 98       	mov	r8,r12
8000fc48:	0a 99       	mov	r9,r5
8000fc4a:	fe ca 03 62 	sub	r10,pc,866
8000fc4e:	10 9b       	mov	r11,r8
8000fc50:	30 0c       	mov	r12,0
8000fc52:	fe b0 f4 bd 	rcall	8000e5cc <mavlink_msg_named_value_float_send>

	
}
8000fc56:	2e ad       	sub	sp,-88
8000fc58:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8000fc5c:	80 00       	ld.sh	r0,r0[0x0]
8000fc5e:	f7 7e 73 74 	stcond	r11[29556],lr
8000fc62:	61 62       	ld.w	r2,r0[0x58]
8000fc64:	41 76       	lddsp	r6,sp[0x5c]
8000fc66:	67 44       	ld.w	r4,r3[0x50]
8000fc68:	65 6c       	ld.w	r12,r2[0x58]
8000fc6a:	61 79       	ld.w	r9,r0[0x5c]
8000fc6c:	00 00       	add	r0,r0
8000fc6e:	00 00       	add	r0,r0
8000fc70:	73 74       	ld.w	r4,r9[0x5c]
8000fc72:	61 62       	ld.w	r2,r0[0x58]
8000fc74:	44 65       	lddsp	r5,sp[0x118]
8000fc76:	6c 61       	ld.w	r1,r6[0x18]
8000fc78:	79 56       	ld.w	r6,r12[0x54]
8000fc7a:	61 72       	ld.w	r2,r0[0x5c]
8000fc7c:	00 00       	add	r0,r0
8000fc7e:	00 00       	add	r0,r0
8000fc80:	73 74       	ld.w	r4,r9[0x5c]
8000fc82:	61 62       	ld.w	r2,r0[0x58]
8000fc84:	4d 61       	lddpc	r1,8000fddc <send_rt_stats+0x110>
8000fc86:	78 44       	ld.w	r4,r12[0x10]
8000fc88:	65 6c       	ld.w	r12,r2[0x58]
8000fc8a:	61 79       	ld.w	r9,r0[0x5c]
8000fc8c:	00 00       	add	r0,r0
8000fc8e:	00 00       	add	r0,r0
8000fc90:	73 74       	ld.w	r4,r9[0x5c]
8000fc92:	61 62       	ld.w	r2,r0[0x58]
8000fc94:	52 54       	stdsp	sp[0x94],r4
8000fc96:	76 69       	ld.w	r9,r11[0x18]
8000fc98:	6f 00       	ld.w	r0,r7[0x40]
8000fc9a:	00 00       	add	r0,r0
8000fc9c:	62 61       	ld.w	r1,r1[0x18]
8000fc9e:	72 6f       	ld.w	pc,r9[0x18]
8000fca0:	41 76       	lddsp	r6,sp[0x5c]
8000fca2:	67 44       	ld.w	r4,r3[0x50]
8000fca4:	65 6c       	ld.w	r12,r2[0x58]
8000fca6:	61 79       	ld.w	r9,r0[0x5c]
8000fca8:	00 00       	add	r0,r0
8000fcaa:	00 00       	add	r0,r0
8000fcac:	69 6d       	ld.w	sp,r4[0x58]
8000fcae:	75 45       	ld.w	r5,r10[0x50]
8000fcb0:	78 54       	ld.w	r4,r12[0x14]
8000fcb2:	69 6d       	ld.w	sp,r4[0x58]
8000fcb4:	65 00       	ld.w	r0,r2[0x40]
8000fcb6:	00 00       	add	r0,r0
8000fcb8:	6e 61       	ld.w	r1,r7[0x18]
8000fcba:	76 45       	ld.w	r5,r11[0x10]
8000fcbc:	78 54       	ld.w	r4,r12[0x14]
8000fcbe:	69 6d       	ld.w	sp,r4[0x58]
8000fcc0:	65 00       	ld.w	r0,r2[0x40]
8000fcc2:	00 00       	add	r0,r0
8000fcc4:	69 6d       	ld.w	sp,r4[0x58]
8000fcc6:	75 5f       	ld.w	pc,r10[0x54]
8000fcc8:	64 74       	ld.w	r4,r2[0x1c]
	...

8000fccc <send_rt_stats>:

task_return_t send_rt_stats() {
8000fccc:	eb cd 40 e0 	pushm	r5-r7,lr
8000fcd0:	1a 97       	mov	r7,sp
8000fcd2:	20 1d       	sub	sp,4
8000fcd4:	4c e6       	lddpc	r6,8000fe0c <send_rt_stats+0x140>
8000fcd6:	1e 26       	rsub	r6,pc
	task_set *main_tasks=get_main_taskset();
8000fcd8:	f0 16 01 0b 	mcall	r6[1068]
8000fcdc:	18 98       	mov	r8,r12
8000fcde:	ef 48 ff fc 	st.w	r7[-4],r8
	
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabAvgDelay", main_tasks->tasks[0].delay_avg);
8000fce2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fce6:	70 c8       	ld.w	r8,r8[0x30]
8000fce8:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fcec:	f0 16 00 0f 	mcall	r6[60]
8000fcf0:	18 98       	mov	r8,r12
8000fcf2:	0a 99       	mov	r9,r5
8000fcf4:	fe ca 00 94 	sub	r10,pc,148
8000fcf8:	10 9b       	mov	r11,r8
8000fcfa:	30 0c       	mov	r12,0
8000fcfc:	fe b0 f4 68 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabDelayVar", sqrt(main_tasks->tasks[0].delay_var_squared));
8000fd00:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd04:	70 d8       	ld.w	r8,r8[0x34]
8000fd06:	10 9c       	mov	r12,r8
8000fd08:	f0 16 00 52 	mcall	r6[328]
8000fd0c:	14 98       	mov	r8,r10
8000fd0e:	16 99       	mov	r9,r11
8000fd10:	10 9a       	mov	r10,r8
8000fd12:	12 9b       	mov	r11,r9
8000fd14:	f0 16 00 6e 	mcall	r6[440]
8000fd18:	14 98       	mov	r8,r10
8000fd1a:	16 99       	mov	r9,r11
8000fd1c:	10 9a       	mov	r10,r8
8000fd1e:	12 9b       	mov	r11,r9
8000fd20:	f0 16 00 08 	mcall	r6[32]
8000fd24:	18 95       	mov	r5,r12
8000fd26:	f0 16 00 0f 	mcall	r6[60]
8000fd2a:	18 98       	mov	r8,r12
8000fd2c:	0a 99       	mov	r9,r5
8000fd2e:	fe ca 00 be 	sub	r10,pc,190
8000fd32:	10 9b       	mov	r11,r8
8000fd34:	30 0c       	mov	r12,0
8000fd36:	fe b0 f4 4b 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabMaxDelay", main_tasks->tasks[0].delay_max);
8000fd3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd3e:	70 b8       	ld.w	r8,r8[0x2c]
8000fd40:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd44:	f0 16 00 0f 	mcall	r6[60]
8000fd48:	18 98       	mov	r8,r12
8000fd4a:	0a 99       	mov	r9,r5
8000fd4c:	fe ca 00 cc 	sub	r10,pc,204
8000fd50:	10 9b       	mov	r11,r8
8000fd52:	30 0c       	mov	r12,0
8000fd54:	fe b0 f4 3c 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "stabRTvio", main_tasks->tasks[0].rt_violations);
8000fd58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd5c:	70 e8       	ld.w	r8,r8[0x38]
8000fd5e:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd62:	f0 16 00 0f 	mcall	r6[60]
8000fd66:	18 98       	mov	r8,r12
8000fd68:	0a 99       	mov	r9,r5
8000fd6a:	fe ca 00 da 	sub	r10,pc,218
8000fd6e:	10 9b       	mov	r11,r8
8000fd70:	30 0c       	mov	r12,0
8000fd72:	fe b0 f4 2d 	rcall	8000e5cc <mavlink_msg_named_value_float_send>

	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "baroAvgDelay", main_tasks->tasks[1].delay_avg);
8000fd76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd7a:	71 88       	ld.w	r8,r8[0x60]
8000fd7c:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd80:	f0 16 00 0f 	mcall	r6[60]
8000fd84:	18 98       	mov	r8,r12
8000fd86:	0a 99       	mov	r9,r5
8000fd88:	fe ca 00 ec 	sub	r10,pc,236
8000fd8c:	10 9b       	mov	r11,r8
8000fd8e:	30 0c       	mov	r12,0
8000fd90:	fe b0 f4 1e 	rcall	8000e5cc <mavlink_msg_named_value_float_send>


	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imuExTime", main_tasks->tasks[0].execution_time);
8000fd94:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fd98:	70 a8       	ld.w	r8,r8[0x28]
8000fd9a:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fd9e:	f0 16 00 0f 	mcall	r6[60]
8000fda2:	18 98       	mov	r8,r12
8000fda4:	0a 99       	mov	r9,r5
8000fda6:	fe ca 00 fa 	sub	r10,pc,250
8000fdaa:	10 9b       	mov	r11,r8
8000fdac:	30 0c       	mov	r12,0
8000fdae:	fe b0 f4 0f 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "navExTime", main_tasks->tasks[3].execution_time);
8000fdb2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdb6:	f0 f8 00 b8 	ld.w	r8,r8[184]
8000fdba:	e5 a4 05 08 	cop	cp0,cr5,cr0,cr8,0x48
8000fdbe:	f0 16 00 0f 	mcall	r6[60]
8000fdc2:	18 98       	mov	r8,r12
8000fdc4:	0a 99       	mov	r9,r5
8000fdc6:	fe ca 01 0e 	sub	r10,pc,270
8000fdca:	10 9b       	mov	r11,r8
8000fdcc:	30 0c       	mov	r12,0
8000fdce:	fe b0 f3 ff 	rcall	8000e5cc <mavlink_msg_named_value_float_send>
	mavlink_msg_named_value_float_send(MAVLINK_COMM_0, get_millis(), "imu_dt", get_central_data()->imu1.dt);
8000fdd2:	f0 16 00 33 	mcall	r6[204]
8000fdd6:	18 98       	mov	r8,r12
8000fdd8:	f0 f5 01 40 	ld.w	r5,r8[320]
8000fddc:	f0 16 00 0f 	mcall	r6[60]
8000fde0:	18 98       	mov	r8,r12
8000fde2:	0a 99       	mov	r9,r5
8000fde4:	fe ca 01 20 	sub	r10,pc,288
8000fde8:	10 9b       	mov	r11,r8
8000fdea:	30 0c       	mov	r12,0
8000fdec:	fe b0 f3 f0 	rcall	8000e5cc <mavlink_msg_named_value_float_send>

	
	main_tasks->tasks[1].rt_violations=0;
8000fdf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdf4:	30 09       	mov	r9,0
8000fdf6:	f1 49 00 68 	st.w	r8[104],r9
	main_tasks->tasks[1].delay_max=0;
8000fdfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8000fdfe:	30 09       	mov	r9,0
8000fe00:	f1 49 00 5c 	st.w	r8[92],r9

}
8000fe04:	2f fd       	sub	sp,-4
8000fe06:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8000fe0a:	00 00       	add	r0,r0
8000fe0c:	80 00       	ld.sh	r0,r0[0x0]
8000fe0e:	fb 5a 53 69 	st.h	sp[21353],r10
8000fe12:	6d 5f       	ld.w	pc,r6[0x54]
8000fe14:	6d 6f       	ld.w	pc,r6[0x58]
8000fe16:	64 65       	ld.w	r5,r2[0x18]
8000fe18:	00 00       	add	r0,r0
8000fe1a:	00 00       	add	r0,r0
8000fe1c:	52 6f       	stdsp	sp[0x98],pc
8000fe1e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe20:	52 50       	stdsp	sp[0x94],r0
8000fe22:	69 64       	ld.w	r4,r4[0x58]
8000fe24:	5f 50       	srlt	r0
8000fe26:	5f 47       	srge	r7
8000fe28:	00 00       	add	r0,r0
8000fe2a:	00 00       	add	r0,r0
8000fe2c:	52 6f       	stdsp	sp[0x98],pc
8000fe2e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe30:	52 50       	stdsp	sp[0x94],r0
8000fe32:	69 64       	ld.w	r4,r4[0x58]
8000fe34:	5f 49       	srge	r9
8000fe36:	5f 50       	srlt	r0
8000fe38:	73 74       	ld.w	r4,r9[0x5c]
8000fe3a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe3c:	52 6f       	stdsp	sp[0x98],pc
8000fe3e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe40:	52 50       	stdsp	sp[0x94],r0
8000fe42:	69 64       	ld.w	r4,r4[0x58]
8000fe44:	5f 49       	srge	r9
8000fe46:	5f 50       	srlt	r0
8000fe48:	72 65       	ld.w	r5,r9[0x18]
8000fe4a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe4c:	52 6f       	stdsp	sp[0x98],pc
8000fe4e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe50:	52 50       	stdsp	sp[0x94],r0
8000fe52:	69 64       	ld.w	r4,r4[0x58]
8000fe54:	5f 44       	srge	r4
8000fe56:	5f 47       	srge	r7
8000fe58:	61 69       	ld.w	r9,r0[0x58]
8000fe5a:	6e 00       	ld.w	r0,r7[0x0]
8000fe5c:	52 6f       	stdsp	sp[0x98],pc
8000fe5e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe60:	41 50       	lddsp	r0,sp[0x54]
8000fe62:	69 64       	ld.w	r4,r4[0x58]
8000fe64:	5f 50       	srlt	r0
8000fe66:	5f 47       	srge	r7
8000fe68:	00 00       	add	r0,r0
8000fe6a:	00 00       	add	r0,r0
8000fe6c:	52 6f       	stdsp	sp[0x98],pc
8000fe6e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe70:	41 50       	lddsp	r0,sp[0x54]
8000fe72:	69 64       	ld.w	r4,r4[0x58]
8000fe74:	5f 49       	srge	r9
8000fe76:	5f 50       	srlt	r0
8000fe78:	73 74       	ld.w	r4,r9[0x5c]
8000fe7a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe7c:	52 6f       	stdsp	sp[0x98],pc
8000fe7e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe80:	41 50       	lddsp	r0,sp[0x54]
8000fe82:	69 64       	ld.w	r4,r4[0x58]
8000fe84:	5f 49       	srge	r9
8000fe86:	5f 50       	srlt	r0
8000fe88:	72 65       	ld.w	r5,r9[0x18]
8000fe8a:	47 00       	lddsp	r0,sp[0x1c0]
8000fe8c:	52 6f       	stdsp	sp[0x98],pc
8000fe8e:	6c 6c       	ld.w	r12,r6[0x18]
8000fe90:	41 50       	lddsp	r0,sp[0x54]
8000fe92:	69 64       	ld.w	r4,r4[0x58]
8000fe94:	5f 44       	srge	r4
8000fe96:	5f 47       	srge	r7
8000fe98:	61 69       	ld.w	r9,r0[0x58]
8000fe9a:	6e 00       	ld.w	r0,r7[0x0]
8000fe9c:	50 69       	stdsp	sp[0x18],r9
8000fe9e:	74 63       	ld.w	r3,r10[0x18]
8000fea0:	68 52       	ld.w	r2,r4[0x14]
8000fea2:	50 69       	stdsp	sp[0x18],r9
8000fea4:	64 5f       	ld.w	pc,r2[0x14]
8000fea6:	50 5f       	stdsp	sp[0x14],pc
8000fea8:	47 00       	lddsp	r0,sp[0x1c0]
8000feaa:	00 00       	add	r0,r0
8000feac:	50 69       	stdsp	sp[0x18],r9
8000feae:	74 63       	ld.w	r3,r10[0x18]
8000feb0:	68 52       	ld.w	r2,r4[0x14]
8000feb2:	50 69       	stdsp	sp[0x18],r9
8000feb4:	64 5f       	ld.w	pc,r2[0x14]
8000feb6:	49 5f       	lddpc	pc,8000ff08 <send_rt_stats+0x23c>
8000feb8:	50 73       	stdsp	sp[0x1c],r3
8000feba:	74 47       	ld.w	r7,r10[0x10]
8000febc:	00 00       	add	r0,r0
8000febe:	00 00       	add	r0,r0
8000fec0:	50 69       	stdsp	sp[0x18],r9
8000fec2:	74 63       	ld.w	r3,r10[0x18]
8000fec4:	68 52       	ld.w	r2,r4[0x14]
8000fec6:	50 69       	stdsp	sp[0x18],r9
8000fec8:	64 5f       	ld.w	pc,r2[0x14]
8000feca:	49 5f       	lddpc	pc,8000ff1c <send_rt_stats+0x250>
8000fecc:	50 72       	stdsp	sp[0x1c],r2
8000fece:	65 47       	ld.w	r7,r2[0x50]
8000fed0:	00 00       	add	r0,r0
8000fed2:	00 00       	add	r0,r0
8000fed4:	50 69       	stdsp	sp[0x18],r9
8000fed6:	74 63       	ld.w	r3,r10[0x18]
8000fed8:	68 52       	ld.w	r2,r4[0x14]
8000feda:	50 69       	stdsp	sp[0x18],r9
8000fedc:	64 5f       	ld.w	pc,r2[0x14]
8000fede:	44 5f       	lddsp	pc,sp[0x114]
8000fee0:	47 61       	lddsp	r1,sp[0x1d8]
8000fee2:	69 6e       	ld.w	lr,r4[0x58]
8000fee4:	00 00       	add	r0,r0
8000fee6:	00 00       	add	r0,r0
8000fee8:	50 69       	stdsp	sp[0x18],r9
8000feea:	74 63       	ld.w	r3,r10[0x18]
8000feec:	68 41       	ld.w	r1,r4[0x10]
8000feee:	50 69       	stdsp	sp[0x18],r9
8000fef0:	64 5f       	ld.w	pc,r2[0x14]
8000fef2:	50 5f       	stdsp	sp[0x14],pc
8000fef4:	47 00       	lddsp	r0,sp[0x1c0]
8000fef6:	00 00       	add	r0,r0
8000fef8:	50 69       	stdsp	sp[0x18],r9
8000fefa:	74 63       	ld.w	r3,r10[0x18]
8000fefc:	68 41       	ld.w	r1,r4[0x10]
8000fefe:	50 69       	stdsp	sp[0x18],r9
8000ff00:	64 5f       	ld.w	pc,r2[0x14]
8000ff02:	49 5f       	lddpc	pc,8000ff54 <send_rt_stats+0x288>
8000ff04:	50 73       	stdsp	sp[0x1c],r3
8000ff06:	74 47       	ld.w	r7,r10[0x10]
8000ff08:	00 00       	add	r0,r0
8000ff0a:	00 00       	add	r0,r0
8000ff0c:	50 69       	stdsp	sp[0x18],r9
8000ff0e:	74 63       	ld.w	r3,r10[0x18]
8000ff10:	68 41       	ld.w	r1,r4[0x10]
8000ff12:	50 69       	stdsp	sp[0x18],r9
8000ff14:	64 5f       	ld.w	pc,r2[0x14]
8000ff16:	49 5f       	lddpc	pc,8000ff68 <send_rt_stats+0x29c>
8000ff18:	50 72       	stdsp	sp[0x1c],r2
8000ff1a:	65 47       	ld.w	r7,r2[0x50]
8000ff1c:	00 00       	add	r0,r0
8000ff1e:	00 00       	add	r0,r0
8000ff20:	50 69       	stdsp	sp[0x18],r9
8000ff22:	74 63       	ld.w	r3,r10[0x18]
8000ff24:	68 41       	ld.w	r1,r4[0x10]
8000ff26:	50 69       	stdsp	sp[0x18],r9
8000ff28:	64 5f       	ld.w	pc,r2[0x14]
8000ff2a:	44 5f       	lddsp	pc,sp[0x114]
8000ff2c:	47 61       	lddsp	r1,sp[0x1d8]
8000ff2e:	69 6e       	ld.w	lr,r4[0x58]
8000ff30:	00 00       	add	r0,r0
8000ff32:	00 00       	add	r0,r0
8000ff34:	59 61       	cp.w	r1,22
8000ff36:	77 52       	ld.w	r2,r11[0x54]
8000ff38:	50 69       	stdsp	sp[0x18],r9
8000ff3a:	64 5f       	ld.w	pc,r2[0x14]
8000ff3c:	50 5f       	stdsp	sp[0x14],pc
8000ff3e:	47 00       	lddsp	r0,sp[0x1c0]
8000ff40:	59 61       	cp.w	r1,22
8000ff42:	77 52       	ld.w	r2,r11[0x54]
8000ff44:	50 69       	stdsp	sp[0x18],r9
8000ff46:	64 5f       	ld.w	pc,r2[0x14]
8000ff48:	49 5f       	lddpc	pc,8000ff9c <send_rt_stats+0x2d0>
8000ff4a:	50 73       	stdsp	sp[0x1c],r3
8000ff4c:	74 47       	ld.w	r7,r10[0x10]
8000ff4e:	00 00       	add	r0,r0
8000ff50:	59 61       	cp.w	r1,22
8000ff52:	77 52       	ld.w	r2,r11[0x54]
8000ff54:	50 69       	stdsp	sp[0x18],r9
8000ff56:	64 5f       	ld.w	pc,r2[0x14]
8000ff58:	49 5f       	lddpc	pc,8000ffac <send_rt_stats+0x2e0>
8000ff5a:	50 72       	stdsp	sp[0x1c],r2
8000ff5c:	65 47       	ld.w	r7,r2[0x50]
8000ff5e:	00 00       	add	r0,r0
8000ff60:	59 61       	cp.w	r1,22
8000ff62:	77 52       	ld.w	r2,r11[0x54]
8000ff64:	50 69       	stdsp	sp[0x18],r9
8000ff66:	64 5f       	ld.w	pc,r2[0x14]
8000ff68:	44 5f       	lddsp	pc,sp[0x114]
8000ff6a:	47 61       	lddsp	r1,sp[0x1d8]
8000ff6c:	69 6e       	ld.w	lr,r4[0x58]
8000ff6e:	00 00       	add	r0,r0
8000ff70:	59 61       	cp.w	r1,22
8000ff72:	77 41       	ld.w	r1,r11[0x50]
8000ff74:	50 69       	stdsp	sp[0x18],r9
8000ff76:	64 5f       	ld.w	pc,r2[0x14]
8000ff78:	50 5f       	stdsp	sp[0x14],pc
8000ff7a:	47 00       	lddsp	r0,sp[0x1c0]
8000ff7c:	59 61       	cp.w	r1,22
8000ff7e:	77 41       	ld.w	r1,r11[0x50]
8000ff80:	50 69       	stdsp	sp[0x18],r9
8000ff82:	64 5f       	ld.w	pc,r2[0x14]
8000ff84:	49 5f       	lddpc	pc,8000ffd8 <send_rt_stats+0x30c>
8000ff86:	50 73       	stdsp	sp[0x1c],r3
8000ff88:	74 47       	ld.w	r7,r10[0x10]
8000ff8a:	00 00       	add	r0,r0
8000ff8c:	59 61       	cp.w	r1,22
8000ff8e:	77 41       	ld.w	r1,r11[0x50]
8000ff90:	50 69       	stdsp	sp[0x18],r9
8000ff92:	64 5f       	ld.w	pc,r2[0x14]
8000ff94:	49 5f       	lddpc	pc,8000ffe8 <send_rt_stats+0x31c>
8000ff96:	50 72       	stdsp	sp[0x1c],r2
8000ff98:	65 47       	ld.w	r7,r2[0x50]
8000ff9a:	00 00       	add	r0,r0
8000ff9c:	59 61       	cp.w	r1,22
8000ff9e:	77 41       	ld.w	r1,r11[0x50]
8000ffa0:	50 69       	stdsp	sp[0x18],r9
8000ffa2:	64 5f       	ld.w	pc,r2[0x14]
8000ffa4:	44 5f       	lddsp	pc,sp[0x114]
8000ffa6:	47 61       	lddsp	r1,sp[0x1d8]
8000ffa8:	69 6e       	ld.w	lr,r4[0x58]
8000ffaa:	00 00       	add	r0,r0
8000ffac:	52 6f       	stdsp	sp[0x98],pc
8000ffae:	6c 6c       	ld.w	r12,r6[0x18]
8000ffb0:	56 50       	stdsp	sp[0x194],r0
8000ffb2:	69 64       	ld.w	r4,r4[0x58]
8000ffb4:	5f 50       	srlt	r0
8000ffb6:	5f 47       	srge	r7
8000ffb8:	00 00       	add	r0,r0
8000ffba:	00 00       	add	r0,r0
8000ffbc:	52 6f       	stdsp	sp[0x98],pc
8000ffbe:	6c 6c       	ld.w	r12,r6[0x18]
8000ffc0:	56 50       	stdsp	sp[0x194],r0
8000ffc2:	69 64       	ld.w	r4,r4[0x58]
8000ffc4:	5f 49       	srge	r9
8000ffc6:	5f 50       	srlt	r0
8000ffc8:	73 74       	ld.w	r4,r9[0x5c]
8000ffca:	47 00       	lddsp	r0,sp[0x1c0]
8000ffcc:	52 6f       	stdsp	sp[0x98],pc
8000ffce:	6c 6c       	ld.w	r12,r6[0x18]
8000ffd0:	56 50       	stdsp	sp[0x194],r0
8000ffd2:	69 64       	ld.w	r4,r4[0x58]
8000ffd4:	5f 49       	srge	r9
8000ffd6:	5f 50       	srlt	r0
8000ffd8:	72 65       	ld.w	r5,r9[0x18]
8000ffda:	47 00       	lddsp	r0,sp[0x1c0]
8000ffdc:	52 6f       	stdsp	sp[0x98],pc
8000ffde:	6c 6c       	ld.w	r12,r6[0x18]
8000ffe0:	56 50       	stdsp	sp[0x194],r0
8000ffe2:	69 64       	ld.w	r4,r4[0x58]
8000ffe4:	5f 44       	srge	r4
8000ffe6:	5f 47       	srge	r7
8000ffe8:	61 69       	ld.w	r9,r0[0x58]
8000ffea:	6e 00       	ld.w	r0,r7[0x0]
8000ffec:	50 69       	stdsp	sp[0x18],r9
8000ffee:	74 63       	ld.w	r3,r10[0x18]
8000fff0:	68 56       	ld.w	r6,r4[0x14]
8000fff2:	50 69       	stdsp	sp[0x18],r9
8000fff4:	64 5f       	ld.w	pc,r2[0x14]
8000fff6:	50 5f       	stdsp	sp[0x14],pc
8000fff8:	47 00       	lddsp	r0,sp[0x1c0]
8000fffa:	00 00       	add	r0,r0
8000fffc:	50 69       	stdsp	sp[0x18],r9
8000fffe:	74 63       	ld.w	r3,r10[0x18]
80010000:	68 56       	ld.w	r6,r4[0x14]
80010002:	50 69       	stdsp	sp[0x18],r9
80010004:	64 5f       	ld.w	pc,r2[0x14]
80010006:	49 5f       	lddpc	pc,80010058 <send_rt_stats+0x38c>
80010008:	50 73       	stdsp	sp[0x1c],r3
8001000a:	74 47       	ld.w	r7,r10[0x10]
8001000c:	00 00       	add	r0,r0
8001000e:	00 00       	add	r0,r0
80010010:	50 69       	stdsp	sp[0x18],r9
80010012:	74 63       	ld.w	r3,r10[0x18]
80010014:	68 56       	ld.w	r6,r4[0x14]
80010016:	50 69       	stdsp	sp[0x18],r9
80010018:	64 5f       	ld.w	pc,r2[0x14]
8001001a:	49 5f       	lddpc	pc,8001006c <send_rt_stats+0x3a0>
8001001c:	50 72       	stdsp	sp[0x1c],r2
8001001e:	65 47       	ld.w	r7,r2[0x50]
80010020:	00 00       	add	r0,r0
80010022:	00 00       	add	r0,r0
80010024:	50 69       	stdsp	sp[0x18],r9
80010026:	74 63       	ld.w	r3,r10[0x18]
80010028:	68 56       	ld.w	r6,r4[0x14]
8001002a:	50 69       	stdsp	sp[0x18],r9
8001002c:	64 5f       	ld.w	pc,r2[0x14]
8001002e:	44 5f       	lddsp	pc,sp[0x114]
80010030:	47 61       	lddsp	r1,sp[0x1d8]
80010032:	69 6e       	ld.w	lr,r4[0x58]
80010034:	00 00       	add	r0,r0
80010036:	00 00       	add	r0,r0
80010038:	54 68       	stdsp	sp[0x118],r8
8001003a:	72 56       	ld.w	r6,r9[0x14]
8001003c:	50 69       	stdsp	sp[0x18],r9
8001003e:	64 5f       	ld.w	pc,r2[0x14]
80010040:	50 5f       	stdsp	sp[0x14],pc
80010042:	47 00       	lddsp	r0,sp[0x1c0]
80010044:	54 68       	stdsp	sp[0x118],r8
80010046:	72 56       	ld.w	r6,r9[0x14]
80010048:	50 69       	stdsp	sp[0x18],r9
8001004a:	64 5f       	ld.w	pc,r2[0x14]
8001004c:	49 5f       	lddpc	pc,800100a0 <send_rt_stats+0x3d4>
8001004e:	50 73       	stdsp	sp[0x1c],r3
80010050:	74 47       	ld.w	r7,r10[0x10]
80010052:	00 00       	add	r0,r0
80010054:	54 68       	stdsp	sp[0x118],r8
80010056:	72 56       	ld.w	r6,r9[0x14]
80010058:	50 69       	stdsp	sp[0x18],r9
8001005a:	64 5f       	ld.w	pc,r2[0x14]
8001005c:	49 5f       	lddpc	pc,800100b0 <send_rt_stats+0x3e4>
8001005e:	50 72       	stdsp	sp[0x1c],r2
80010060:	65 47       	ld.w	r7,r2[0x50]
80010062:	00 00       	add	r0,r0
80010064:	54 68       	stdsp	sp[0x118],r8
80010066:	72 56       	ld.w	r6,r9[0x14]
80010068:	50 69       	stdsp	sp[0x18],r9
8001006a:	64 5f       	ld.w	pc,r2[0x14]
8001006c:	44 5f       	lddsp	pc,sp[0x114]
8001006e:	47 61       	lddsp	r1,sp[0x1d8]
80010070:	69 6e       	ld.w	lr,r4[0x58]
80010072:	00 00       	add	r0,r0
80010074:	54 68       	stdsp	sp[0x118],r8
80010076:	72 56       	ld.w	r6,r9[0x14]
80010078:	50 69       	stdsp	sp[0x18],r9
8001007a:	64 5f       	ld.w	pc,r2[0x14]
8001007c:	44 5f       	lddsp	pc,sp[0x114]
8001007e:	4c 50       	lddpc	r0,80010190 <send_rt_stats+0x4c4>
80010080:	46 00       	lddsp	r0,sp[0x180]
80010082:	00 00       	add	r0,r0
80010084:	54 68       	stdsp	sp[0x118],r8
80010086:	72 56       	ld.w	r6,r9[0x14]
80010088:	50 69       	stdsp	sp[0x18],r9
8001008a:	64 5f       	ld.w	pc,r2[0x14]
8001008c:	73 6f       	ld.w	pc,r9[0x58]
8001008e:	66 74       	ld.w	r4,r3[0x1c]
80010090:	00 00       	add	r0,r0
80010092:	00 00       	add	r0,r0
80010094:	51 46       	stdsp	sp[0x50],r6
80010096:	5f 6b       	srmi	r11
80010098:	70 5f       	ld.w	pc,r8[0x14]
8001009a:	61 63       	ld.w	r3,r0[0x58]
8001009c:	63 00       	ld.w	r0,r1[0x40]
8001009e:	00 00       	add	r0,r0
800100a0:	51 46       	stdsp	sp[0x50],r6
800100a2:	5f 6b       	srmi	r11
800100a4:	70 5f       	ld.w	pc,r8[0x14]
800100a6:	6d 61       	ld.w	r1,r6[0x58]
800100a8:	67 00       	ld.w	r0,r3[0x40]
800100aa:	00 00       	add	r0,r0
800100ac:	42 69       	lddsp	r9,sp[0x98]
800100ae:	61 73       	ld.w	r3,r0[0x5c]
800100b0:	5f 47       	srge	r7
800100b2:	79 72       	ld.w	r2,r12[0x5c]
800100b4:	6f 5f       	ld.w	pc,r7[0x54]
800100b6:	58 00       	cp.w	r0,0
800100b8:	42 69       	lddsp	r9,sp[0x98]
800100ba:	61 73       	ld.w	r3,r0[0x5c]
800100bc:	5f 47       	srge	r7
800100be:	79 72       	ld.w	r2,r12[0x5c]
800100c0:	6f 5f       	ld.w	pc,r7[0x54]
800100c2:	59 00       	cp.w	r0,16
800100c4:	42 69       	lddsp	r9,sp[0x98]
800100c6:	61 73       	ld.w	r3,r0[0x5c]
800100c8:	5f 47       	srge	r7
800100ca:	79 72       	ld.w	r2,r12[0x5c]
800100cc:	6f 5f       	ld.w	pc,r7[0x54]
800100ce:	5a 00       	cp.w	r0,-32
800100d0:	42 69       	lddsp	r9,sp[0x98]
800100d2:	61 73       	ld.w	r3,r0[0x5c]
800100d4:	5f 41       	srge	r1
800100d6:	63 63       	ld.w	r3,r1[0x58]
800100d8:	5f 58       	srlt	r8
800100da:	00 00       	add	r0,r0
800100dc:	42 69       	lddsp	r9,sp[0x98]
800100de:	61 73       	ld.w	r3,r0[0x5c]
800100e0:	5f 41       	srge	r1
800100e2:	63 63       	ld.w	r3,r1[0x58]
800100e4:	5f 59       	srlt	r9
800100e6:	00 00       	add	r0,r0
800100e8:	42 69       	lddsp	r9,sp[0x98]
800100ea:	61 73       	ld.w	r3,r0[0x5c]
800100ec:	5f 41       	srge	r1
800100ee:	63 63       	ld.w	r3,r1[0x58]
800100f0:	5f 5a       	srlt	r10
800100f2:	00 00       	add	r0,r0
800100f4:	42 69       	lddsp	r9,sp[0x98]
800100f6:	61 73       	ld.w	r3,r0[0x5c]
800100f8:	5f 4d       	srge	sp
800100fa:	61 67       	ld.w	r7,r0[0x58]
800100fc:	5f 58       	srlt	r8
800100fe:	00 00       	add	r0,r0
80010100:	42 69       	lddsp	r9,sp[0x98]
80010102:	61 73       	ld.w	r3,r0[0x5c]
80010104:	5f 4d       	srge	sp
80010106:	61 67       	ld.w	r7,r0[0x58]
80010108:	5f 59       	srlt	r9
8001010a:	00 00       	add	r0,r0
8001010c:	42 69       	lddsp	r9,sp[0x98]
8001010e:	61 73       	ld.w	r3,r0[0x5c]
80010110:	5f 4d       	srge	sp
80010112:	61 67       	ld.w	r7,r0[0x58]
80010114:	5f 5a       	srlt	r10
80010116:	00 00       	add	r0,r0
80010118:	53 63       	stdsp	sp[0xd8],r3
8001011a:	61 6c       	ld.w	r12,r0[0x58]
8001011c:	65 5f       	ld.w	pc,r2[0x54]
8001011e:	47 79       	lddsp	r9,sp[0x1dc]
80010120:	72 6f       	ld.w	pc,r9[0x18]
80010122:	5f 58       	srlt	r8
80010124:	00 00       	add	r0,r0
80010126:	00 00       	add	r0,r0
80010128:	53 63       	stdsp	sp[0xd8],r3
8001012a:	61 6c       	ld.w	r12,r0[0x58]
8001012c:	65 5f       	ld.w	pc,r2[0x54]
8001012e:	47 79       	lddsp	r9,sp[0x1dc]
80010130:	72 6f       	ld.w	pc,r9[0x18]
80010132:	5f 59       	srlt	r9
80010134:	00 00       	add	r0,r0
80010136:	00 00       	add	r0,r0
80010138:	53 63       	stdsp	sp[0xd8],r3
8001013a:	61 6c       	ld.w	r12,r0[0x58]
8001013c:	65 5f       	ld.w	pc,r2[0x54]
8001013e:	47 79       	lddsp	r9,sp[0x1dc]
80010140:	72 6f       	ld.w	pc,r9[0x18]
80010142:	5f 5a       	srlt	r10
80010144:	00 00       	add	r0,r0
80010146:	00 00       	add	r0,r0
80010148:	53 63       	stdsp	sp[0xd8],r3
8001014a:	61 6c       	ld.w	r12,r0[0x58]
8001014c:	65 5f       	ld.w	pc,r2[0x54]
8001014e:	41 63       	lddsp	r3,sp[0x58]
80010150:	63 5f       	ld.w	pc,r1[0x54]
80010152:	58 00       	cp.w	r0,0
80010154:	53 63       	stdsp	sp[0xd8],r3
80010156:	61 6c       	ld.w	r12,r0[0x58]
80010158:	65 5f       	ld.w	pc,r2[0x54]
8001015a:	41 63       	lddsp	r3,sp[0x58]
8001015c:	63 5f       	ld.w	pc,r1[0x54]
8001015e:	59 00       	cp.w	r0,16
80010160:	53 63       	stdsp	sp[0xd8],r3
80010162:	61 6c       	ld.w	r12,r0[0x58]
80010164:	65 5f       	ld.w	pc,r2[0x54]
80010166:	41 63       	lddsp	r3,sp[0x58]
80010168:	63 5f       	ld.w	pc,r1[0x54]
8001016a:	5a 00       	cp.w	r0,-32
8001016c:	53 63       	stdsp	sp[0xd8],r3
8001016e:	61 6c       	ld.w	r12,r0[0x58]
80010170:	65 5f       	ld.w	pc,r2[0x54]
80010172:	4d 61       	lddpc	r1,800102c8 <add_PID_parameters+0xe4>
80010174:	67 5f       	ld.w	pc,r3[0x54]
80010176:	58 00       	cp.w	r0,0
80010178:	53 63       	stdsp	sp[0xd8],r3
8001017a:	61 6c       	ld.w	r12,r0[0x58]
8001017c:	65 5f       	ld.w	pc,r2[0x54]
8001017e:	4d 61       	lddpc	r1,800102d4 <add_PID_parameters+0xf0>
80010180:	67 5f       	ld.w	pc,r3[0x54]
80010182:	59 00       	cp.w	r0,16
80010184:	53 63       	stdsp	sp[0xd8],r3
80010186:	61 6c       	ld.w	r12,r0[0x58]
80010188:	65 5f       	ld.w	pc,r2[0x54]
8001018a:	4d 61       	lddpc	r1,800102e0 <add_PID_parameters+0xfc>
8001018c:	67 5f       	ld.w	pc,r3[0x54]
8001018e:	5a 00       	cp.w	r0,-32
80010190:	49 44       	lddpc	r4,800101e0 <send_rt_stats+0x514>
80010192:	5f 53       	srlt	r3
80010194:	79 73       	ld.w	r3,r12[0x5c]
80010196:	74 65       	ld.w	r5,r10[0x18]
80010198:	6d 00       	ld.w	r0,r6[0x40]
8001019a:	00 00       	add	r0,r0
8001019c:	49 44       	lddpc	r4,800101ec <add_PID_parameters+0x8>
8001019e:	5f 50       	srlt	r0
800101a0:	6c 61       	ld.w	r1,r6[0x18]
800101a2:	6e 6e       	ld.w	lr,r7[0x18]
800101a4:	65 72       	ld.w	r2,r2[0x5c]
800101a6:	00 00       	add	r0,r0
800101a8:	50 6f       	stdsp	sp[0x18],pc
800101aa:	73 5f       	ld.w	pc,r9[0x54]
800101ac:	6b 70       	ld.w	r0,r5[0x5c]
800101ae:	5f 61       	srmi	r1
800101b0:	6c 74       	ld.w	r4,r6[0x1c]
800101b2:	00 00       	add	r0,r0
800101b4:	50 6f       	stdsp	sp[0x18],pc
800101b6:	73 5f       	ld.w	pc,r9[0x54]
800101b8:	6b 70       	ld.w	r0,r5[0x5c]
800101ba:	5f 76       	srpl	r6
800101bc:	65 6c       	ld.w	r12,r2[0x58]
800101be:	62 00       	ld.w	r0,r1[0x0]
800101c0:	50 6f       	stdsp	sp[0x18],pc
800101c2:	73 5f       	ld.w	pc,r9[0x54]
800101c4:	6b 70       	ld.w	r0,r5[0x5c]
800101c6:	5f 70       	srpl	r0
800101c8:	6f 73       	ld.w	r3,r7[0x5c]
800101ca:	30 00       	mov	r0,0
800101cc:	50 6f       	stdsp	sp[0x18],pc
800101ce:	73 5f       	ld.w	pc,r9[0x54]
800101d0:	6b 70       	ld.w	r0,r5[0x5c]
800101d2:	5f 70       	srpl	r0
800101d4:	6f 73       	ld.w	r3,r7[0x5c]
800101d6:	31 00       	mov	r0,16
800101d8:	50 6f       	stdsp	sp[0x18],pc
800101da:	73 5f       	ld.w	pc,r9[0x54]
800101dc:	6b 70       	ld.w	r0,r5[0x5c]
800101de:	5f 70       	srpl	r0
800101e0:	6f 73       	ld.w	r3,r7[0x5c]
800101e2:	32 00       	mov	r0,32

800101e4 <add_PID_parameters>:


void add_PID_parameters(void) {
800101e4:	eb cd 40 c0 	pushm	r6-r7,lr
800101e8:	1a 97       	mov	r7,sp
800101ea:	20 3d       	sub	sp,12
800101ec:	fe f6 04 c0 	ld.w	r6,pc[1216]
800101f0:	1e 26       	rsub	r6,pc
	Stabiliser_t* rate_stabiliser = get_rate_stabiliser();
800101f2:	f0 16 00 99 	mcall	r6[612]
800101f6:	18 98       	mov	r8,r12
800101f8:	ef 48 ff f4 	st.w	r7[-12],r8
	Stabiliser_t* attitude_stabiliser = get_attitude_stabiliser();
800101fc:	f0 16 02 01 	mcall	r6[2052]
80010200:	18 98       	mov	r8,r12
80010202:	ef 48 ff f8 	st.w	r7[-8],r8
	Stabiliser_t* velocity_stabiliser= get_velocity_stabiliser();
80010206:	f0 16 01 a6 	mcall	r6[1688]
8001020a:	18 98       	mov	r8,r12
8001020c:	ef 48 ff fc 	st.w	r7[-4],r8

	
	add_parameter_int32(&centralData->simulation_mode, "Sim_mode");
80010210:	ec f8 00 00 	ld.w	r8,r6[0]
80010214:	70 08       	ld.w	r8,r8[0x0]
80010216:	f0 c8 f2 f8 	sub	r8,r8,-3336
8001021a:	fe cb 04 0a 	sub	r11,pc,1034
8001021e:	10 9c       	mov	r12,r8
80010220:	f0 16 02 0d 	mcall	r6[2100]
	// Roll rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].p_gain, "RollRPid_P_G");
80010224:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010228:	fe cb 04 0c 	sub	r11,pc,1036
8001022c:	10 9c       	mov	r12,r8
8001022e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_max, "RollRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].clip_min, "RollRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.clip, "RollRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollRPid_I_PstG");
80010232:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010236:	2f 08       	sub	r8,-16
80010238:	fe cb 04 0c 	sub	r11,pc,1036
8001023c:	10 9c       	mov	r12,r8
8001023e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollRPid_I_PreG");
80010242:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010246:	2f 48       	sub	r8,-12
80010248:	fe cb 04 0c 	sub	r11,pc,1036
8001024c:	10 9c       	mov	r12,r8
8001024e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollRPid_D_Gain");
80010252:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010256:	2e 08       	sub	r8,-32
80010258:	fe cb 04 0c 	sub	r11,pc,1036
8001025c:	10 9c       	mov	r12,r8
8001025e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollRPid_D_LPF");
	
	// Roll attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].p_gain, "RollAPid_P_G");
80010262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010266:	fe cb 04 0a 	sub	r11,pc,1034
8001026a:	10 9c       	mov	r12,r8
8001026c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_max, "RollAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].clip_min, "RollAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.clip, "RollAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollAPid_I_PstG");
80010270:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010274:	2f 08       	sub	r8,-16
80010276:	fe cb 04 0a 	sub	r11,pc,1034
8001027a:	10 9c       	mov	r12,r8
8001027c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollAPid_I_PreG");
80010280:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010284:	2f 48       	sub	r8,-12
80010286:	fe cb 04 0a 	sub	r11,pc,1034
8001028a:	10 9c       	mov	r12,r8
8001028c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.clip, "RollAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollAPid_D_Gain");
80010290:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010294:	2e 08       	sub	r8,-32
80010296:	fe cb 04 0a 	sub	r11,pc,1034
8001029a:	10 9c       	mov	r12,r8
8001029c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[ROLL].differentiator.LPF, "RollAPid_D_LPF");

	// Pitch rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].p_gain, "PitchRPid_P_G");
800102a0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102a4:	2b c8       	sub	r8,-68
800102a6:	fe cb 04 0a 	sub	r11,pc,1034
800102aa:	10 9c       	mov	r12,r8
800102ac:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_max, "PitchRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].clip_min, "PitchRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchRPid_I_PstG");
800102b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102b4:	2a c8       	sub	r8,-84
800102b6:	fe cb 04 0a 	sub	r11,pc,1034
800102ba:	10 9c       	mov	r12,r8
800102bc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchRPid_I_PreG");
800102c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102c4:	2b 08       	sub	r8,-80
800102c6:	fe cb 04 06 	sub	r11,pc,1030
800102ca:	10 9c       	mov	r12,r8
800102cc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchRPid_D_Gain");
800102d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800102d4:	29 c8       	sub	r8,-100
800102d6:	fe cb 04 02 	sub	r11,pc,1026
800102da:	10 9c       	mov	r12,r8
800102dc:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchRPid_D_LPF");
	
	// Pitch attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].p_gain, "PitchAPid_P_G");
800102e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800102e4:	2b c8       	sub	r8,-68
800102e6:	fe cb 03 fe 	sub	r11,pc,1022
800102ea:	10 9c       	mov	r12,r8
800102ec:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_max, "PitchAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].clip_min, "PitchAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.clip, "PitchAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchAPid_I_PstG");
800102f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800102f4:	2a c8       	sub	r8,-84
800102f6:	fe cb 03 fe 	sub	r11,pc,1022
800102fa:	10 9c       	mov	r12,r8
800102fc:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchAPid_I_PreG");
80010300:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010304:	2b 08       	sub	r8,-80
80010306:	fe cb 03 fa 	sub	r11,pc,1018
8001030a:	10 9c       	mov	r12,r8
8001030c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.clip, "PitchAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchAPid_D_Gain");
80010310:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010314:	29 c8       	sub	r8,-100
80010316:	fe cb 03 f6 	sub	r11,pc,1014
8001031a:	10 9c       	mov	r12,r8
8001031c:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[PITCH].differentiator.LPF, "PitchAPid_D_LPF");

	// Yaw rate PID
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].p_gain, "YawRPid_P_G");
80010320:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010324:	f0 c8 ff 78 	sub	r8,r8,-136
80010328:	fe cb 03 f4 	sub	r11,pc,1012
8001032c:	10 9c       	mov	r12,r8
8001032e:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_max, "YawRPid_P_CLmx");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].clip_min, "YawRPid_P_CLmn");
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.clip, "YawRPid_I_CLip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.postgain, "YawRPid_I_PstG");
80010332:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010336:	f0 c8 ff 68 	sub	r8,r8,-152
8001033a:	fe cb 03 fa 	sub	r11,pc,1018
8001033e:	10 9c       	mov	r12,r8
80010340:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].integrator.pregain, "YawRPid_I_PreG");
80010344:	ee f8 ff f4 	ld.w	r8,r7[-12]
80010348:	f0 c8 ff 6c 	sub	r8,r8,-148
8001034c:	fe cb 03 fc 	sub	r11,pc,1020
80010350:	10 9c       	mov	r12,r8
80010352:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.clip, "YawRPid_D_Clip");
	add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.gain, "YawRPid_D_Gain");
80010356:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001035a:	f0 c8 ff 58 	sub	r8,r8,-168
8001035e:	fe cb 03 fe 	sub	r11,pc,1022
80010362:	10 9c       	mov	r12,r8
80010364:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&rate_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawRPid_D_LPF");
	
	// Yaw attitude PID
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].p_gain, "YawAPid_P_G");
80010368:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001036c:	f0 c8 ff 78 	sub	r8,r8,-136
80010370:	fe cb 04 00 	sub	r11,pc,1024
80010374:	10 9c       	mov	r12,r8
80010376:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_max, "YawAPid_P_CLmx");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].clip_min, "YawAPid_P_CLmn");
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.clip, "YawAPid_I_CLip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.postgain, "YawAPid_I_PstG");
8001037a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001037e:	f0 c8 ff 68 	sub	r8,r8,-152
80010382:	fe cb 04 06 	sub	r11,pc,1030
80010386:	10 9c       	mov	r12,r8
80010388:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].integrator.pregain, "YawAPid_I_PreG");
8001038c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010390:	f0 c8 ff 6c 	sub	r8,r8,-148
80010394:	fe cb 04 08 	sub	r11,pc,1032
80010398:	10 9c       	mov	r12,r8
8001039a:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.clip, "YawAPid_D_Clip");
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
8001039e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800103a2:	f0 c8 ff 58 	sub	r8,r8,-168
800103a6:	fe cb 04 0a 	sub	r11,pc,1034
800103aa:	10 9c       	mov	r12,r8
800103ac:	f0 16 00 0e 	mcall	r6[56]
	//add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.LPF, "YawAPid_D_LPF");


	// Roll velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].p_gain, "RollVPid_P_G");
800103b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103b4:	fe cb 04 08 	sub	r11,pc,1032
800103b8:	10 9c       	mov	r12,r8
800103ba:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.postgain, "RollVPid_I_PstG");
800103be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103c2:	2f 08       	sub	r8,-16
800103c4:	fe cb 04 08 	sub	r11,pc,1032
800103c8:	10 9c       	mov	r12,r8
800103ca:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].integrator.pregain, "RollVPid_I_PreG");
800103ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103d2:	2f 48       	sub	r8,-12
800103d4:	fe cb 04 08 	sub	r11,pc,1032
800103d8:	10 9c       	mov	r12,r8
800103da:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[ROLL].differentiator.gain, "RollVPid_D_Gain");
800103de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103e2:	2e 08       	sub	r8,-32
800103e4:	fe cb 04 08 	sub	r11,pc,1032
800103e8:	10 9c       	mov	r12,r8
800103ea:	f0 16 00 0e 	mcall	r6[56]

	// Pitch velocity PID
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].p_gain, "PitchVPid_P_G");
800103ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800103f2:	2b c8       	sub	r8,-68
800103f4:	fe cb 04 08 	sub	r11,pc,1032
800103f8:	10 9c       	mov	r12,r8
800103fa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.postgain, "PitchVPid_I_PstG");
800103fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010402:	2a c8       	sub	r8,-84
80010404:	fe cb 04 08 	sub	r11,pc,1032
80010408:	10 9c       	mov	r12,r8
8001040a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].integrator.pregain, "PitchVPid_I_PreG");
8001040e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010412:	2b 08       	sub	r8,-80
80010414:	fe cb 04 04 	sub	r11,pc,1028
80010418:	10 9c       	mov	r12,r8
8001041a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->rpy_controller[PITCH].differentiator.gain, "PitchVPid_D_Gain");
8001041e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010422:	29 c8       	sub	r8,-100
80010424:	fe cb 04 00 	sub	r11,pc,1024
80010428:	10 9c       	mov	r12,r8
8001042a:	f0 16 00 0e 	mcall	r6[56]

	// Thrust velocity PID
	add_parameter_float(&velocity_stabiliser->thrust_controller.p_gain, "ThrVPid_P_G");
8001042e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010432:	f0 c8 ff 34 	sub	r8,r8,-204
80010436:	fe cb 03 fe 	sub	r11,pc,1022
8001043a:	10 9c       	mov	r12,r8
8001043c:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.postgain, "ThrVPid_I_PstG");
80010440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010444:	f0 c8 ff 24 	sub	r8,r8,-220
80010448:	fe cb 04 04 	sub	r11,pc,1028
8001044c:	10 9c       	mov	r12,r8
8001044e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.integrator.pregain, "ThrVPid_I_PreG");
80010452:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010456:	f0 c8 ff 28 	sub	r8,r8,-216
8001045a:	fe cb 04 06 	sub	r11,pc,1030
8001045e:	10 9c       	mov	r12,r8
80010460:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.gain, "ThrVPid_D_Gain");
80010464:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010468:	f0 c8 ff 14 	sub	r8,r8,-236
8001046c:	fe cb 04 08 	sub	r11,pc,1032
80010470:	10 9c       	mov	r12,r8
80010472:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.differentiator.LPF, "ThrVPid_D_LPF");
80010476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001047a:	f0 c8 ff 0c 	sub	r8,r8,-244
8001047e:	fe cb 04 0a 	sub	r11,pc,1034
80010482:	10 9c       	mov	r12,r8
80010484:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&velocity_stabiliser->thrust_controller.soft_zone_width, "ThrVPid_soft");
80010488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001048c:	f0 c8 fe f4 	sub	r8,r8,-268
80010490:	fe cb 04 0c 	sub	r11,pc,1036
80010494:	10 9c       	mov	r12,r8
80010496:	f0 16 00 0e 	mcall	r6[56]

	// qfilter
	add_parameter_float(&centralData->imu1.attitude.kp, "QF_kp_acc");
8001049a:	ec f8 00 00 	ld.w	r8,r6[0]
8001049e:	70 08       	ld.w	r8,r8[0x0]
800104a0:	f0 c8 ff 64 	sub	r8,r8,-156
800104a4:	fe cb 04 10 	sub	r11,pc,1040
800104a8:	10 9c       	mov	r12,r8
800104aa:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.kp_mag, "QF_kp_mag");
800104ae:	ec f8 00 00 	ld.w	r8,r6[0]
800104b2:	70 08       	ld.w	r8,r8[0x0]
800104b4:	f0 c8 ff 5c 	sub	r8,r8,-164
800104b8:	fe cb 04 18 	sub	r11,pc,1048
800104bc:	10 9c       	mov	r12,r8
800104be:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&attitude_stabiliser->rpy_controller[YAW].differentiator.gain, "YawAPid_D_Gain");
800104c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800104c6:	f0 c8 ff 58 	sub	r8,r8,-168
800104ca:	fe cb 05 2e 	sub	r11,pc,1326
800104ce:	10 9c       	mov	r12,r8
800104d0:	f0 16 00 0e 	mcall	r6[56]
	
	// Biaises
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+X],"Bias_Gyro_X");
800104d4:	ec f8 00 00 	ld.w	r8,r6[0]
800104d8:	70 08       	ld.w	r8,r8[0x0]
800104da:	2d 08       	sub	r8,-48
800104dc:	fe cb 04 30 	sub	r11,pc,1072
800104e0:	10 9c       	mov	r12,r8
800104e2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Y],"Bias_Gyro_Y");
800104e6:	ec f8 00 00 	ld.w	r8,r6[0]
800104ea:	70 08       	ld.w	r8,r8[0x0]
800104ec:	2c c8       	sub	r8,-52
800104ee:	fe cb 04 36 	sub	r11,pc,1078
800104f2:	10 9c       	mov	r12,r8
800104f4:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[GYRO_OFFSET+Z],"Bias_Gyro_Z");
800104f8:	ec f8 00 00 	ld.w	r8,r6[0]
800104fc:	70 08       	ld.w	r8,r8[0x0]
800104fe:	2c 88       	sub	r8,-56
80010500:	fe cb 04 3c 	sub	r11,pc,1084
80010504:	10 9c       	mov	r12,r8
80010506:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+X],"Bias_Acc_X");
8001050a:	ec f8 00 00 	ld.w	r8,r6[0]
8001050e:	70 08       	ld.w	r8,r8[0x0]
80010510:	2c 48       	sub	r8,-60
80010512:	fe cb 04 42 	sub	r11,pc,1090
80010516:	10 9c       	mov	r12,r8
80010518:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Y],"Bias_Acc_Y");
8001051c:	ec f8 00 00 	ld.w	r8,r6[0]
80010520:	70 08       	ld.w	r8,r8[0x0]
80010522:	2c 08       	sub	r8,-64
80010524:	fe cb 04 48 	sub	r11,pc,1096
80010528:	10 9c       	mov	r12,r8
8001052a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[ACC_OFFSET+Z],"Bias_Acc_Z");
8001052e:	ec f8 00 00 	ld.w	r8,r6[0]
80010532:	70 08       	ld.w	r8,r8[0x0]
80010534:	2b c8       	sub	r8,-68
80010536:	fe cb 04 4e 	sub	r11,pc,1102
8001053a:	10 9c       	mov	r12,r8
8001053c:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+X],"Bias_Mag_X");
80010540:	ec f8 00 00 	ld.w	r8,r6[0]
80010544:	70 08       	ld.w	r8,r8[0x0]
80010546:	2b 88       	sub	r8,-72
80010548:	fe cb 04 54 	sub	r11,pc,1108
8001054c:	10 9c       	mov	r12,r8
8001054e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Y],"Bias_Mag_Y");
80010552:	ec f8 00 00 	ld.w	r8,r6[0]
80010556:	70 08       	ld.w	r8,r8[0x0]
80010558:	2b 48       	sub	r8,-76
8001055a:	fe cb 04 5a 	sub	r11,pc,1114
8001055e:	10 9c       	mov	r12,r8
80010560:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.attitude.be[COMPASS_OFFSET+Z],"Bias_Mag_Z");
80010564:	ec f8 00 00 	ld.w	r8,r6[0]
80010568:	70 08       	ld.w	r8,r8[0x0]
8001056a:	2b 08       	sub	r8,-80
8001056c:	fe cb 04 60 	sub	r11,pc,1120
80010570:	10 9c       	mov	r12,r8
80010572:	f0 16 00 0e 	mcall	r6[56]
	
	// Scale factor
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+X],"Scale_Gyro_X");
80010576:	ec f8 00 00 	ld.w	r8,r6[0]
8001057a:	70 08       	ld.w	r8,r8[0x0]
8001057c:	f0 c8 fe ec 	sub	r8,r8,-276
80010580:	fe cb 04 68 	sub	r11,pc,1128
80010584:	10 9c       	mov	r12,r8
80010586:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Y],"Scale_Gyro_Y");
8001058a:	ec f8 00 00 	ld.w	r8,r6[0]
8001058e:	70 08       	ld.w	r8,r8[0x0]
80010590:	f0 c8 fe e8 	sub	r8,r8,-280
80010594:	fe cb 04 6c 	sub	r11,pc,1132
80010598:	10 9c       	mov	r12,r8
8001059a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[GYRO_OFFSET+Z],"Scale_Gyro_Z");
8001059e:	ec f8 00 00 	ld.w	r8,r6[0]
800105a2:	70 08       	ld.w	r8,r8[0x0]
800105a4:	f0 c8 fe e4 	sub	r8,r8,-284
800105a8:	fe cb 04 70 	sub	r11,pc,1136
800105ac:	10 9c       	mov	r12,r8
800105ae:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+X],"Scale_Acc_X");
800105b2:	ec f8 00 00 	ld.w	r8,r6[0]
800105b6:	70 08       	ld.w	r8,r8[0x0]
800105b8:	f0 c8 fe e0 	sub	r8,r8,-288
800105bc:	fe cb 04 74 	sub	r11,pc,1140
800105c0:	10 9c       	mov	r12,r8
800105c2:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Y],"Scale_Acc_Y");
800105c6:	ec f8 00 00 	ld.w	r8,r6[0]
800105ca:	70 08       	ld.w	r8,r8[0x0]
800105cc:	f0 c8 fe dc 	sub	r8,r8,-292
800105d0:	fe cb 04 7c 	sub	r11,pc,1148
800105d4:	10 9c       	mov	r12,r8
800105d6:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[ACC_OFFSET+Z],"Scale_Acc_Z");
800105da:	ec f8 00 00 	ld.w	r8,r6[0]
800105de:	70 08       	ld.w	r8,r8[0x0]
800105e0:	f0 c8 fe d8 	sub	r8,r8,-296
800105e4:	fe cb 04 84 	sub	r11,pc,1156
800105e8:	10 9c       	mov	r12,r8
800105ea:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+X],"Scale_Mag_X");
800105ee:	ec f8 00 00 	ld.w	r8,r6[0]
800105f2:	70 08       	ld.w	r8,r8[0x0]
800105f4:	f0 c8 fe d4 	sub	r8,r8,-300
800105f8:	fe cb 04 8c 	sub	r11,pc,1164
800105fc:	10 9c       	mov	r12,r8
800105fe:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Y],"Scale_Mag_Y");
80010602:	ec f8 00 00 	ld.w	r8,r6[0]
80010606:	70 08       	ld.w	r8,r8[0x0]
80010608:	f0 c8 fe d0 	sub	r8,r8,-304
8001060c:	fe cb 04 94 	sub	r11,pc,1172
80010610:	10 9c       	mov	r12,r8
80010612:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->imu1.raw_scale[COMPASS_OFFSET+Z],"Scale_Mag_Z");
80010616:	ec f8 00 00 	ld.w	r8,r6[0]
8001061a:	70 08       	ld.w	r8,r8[0x0]
8001061c:	f0 c8 fe cc 	sub	r8,r8,-308
80010620:	fe cb 04 9c 	sub	r11,pc,1180
80010624:	10 9c       	mov	r12,r8
80010626:	f0 16 00 0e 	mcall	r6[56]
	
	add_parameter_uint8(&(mavlink_system.sysid),"ID_System");
8001062a:	fe cb 04 9a 	sub	r11,pc,1178
8001062e:	ec fc 00 74 	ld.w	r12,r6[116]
80010632:	f0 16 00 e7 	mcall	r6[924]
	add_parameter_uint8(&(mavlink_mission_planner.sysid),"ID_Planner");
80010636:	fe cb 04 9a 	sub	r11,pc,1178
8001063a:	ec fc 00 c8 	ld.w	r12,r6[200]
8001063e:	f0 16 00 e7 	mcall	r6[924]

	add_parameter_float(&centralData->position_estimator.kp_alt,"Pos_kp_alt");
80010642:	ec f8 00 00 	ld.w	r8,r6[0]
80010646:	70 08       	ld.w	r8,r8[0x0]
80010648:	f0 c8 f6 64 	sub	r8,r8,-2460
8001064c:	fe cb 04 a4 	sub	r11,pc,1188
80010650:	10 9c       	mov	r12,r8
80010652:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_vel_baro,"Pos_kp_velb");
80010656:	ec f8 00 00 	ld.w	r8,r6[0]
8001065a:	70 08       	ld.w	r8,r8[0x0]
8001065c:	f0 c8 f6 60 	sub	r8,r8,-2464
80010660:	fe cb 04 ac 	sub	r11,pc,1196
80010664:	10 9c       	mov	r12,r8
80010666:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[0],"Pos_kp_pos0");
8001066a:	ec f8 00 00 	ld.w	r8,r6[0]
8001066e:	70 08       	ld.w	r8,r8[0x0]
80010670:	f0 c8 f6 70 	sub	r8,r8,-2448
80010674:	fe cb 04 b4 	sub	r11,pc,1204
80010678:	10 9c       	mov	r12,r8
8001067a:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[1],"Pos_kp_pos1");
8001067e:	ec f8 00 00 	ld.w	r8,r6[0]
80010682:	70 08       	ld.w	r8,r8[0x0]
80010684:	f0 c8 f6 6c 	sub	r8,r8,-2452
80010688:	fe cb 04 bc 	sub	r11,pc,1212
8001068c:	10 9c       	mov	r12,r8
8001068e:	f0 16 00 0e 	mcall	r6[56]
	add_parameter_float(&centralData->position_estimator.kp_pos[2],"Pos_kp_pos2");
80010692:	ec f8 00 00 	ld.w	r8,r6[0]
80010696:	70 08       	ld.w	r8,r8[0x0]
80010698:	f0 c8 f6 68 	sub	r8,r8,-2456
8001069c:	fe cb 04 c4 	sub	r11,pc,1220
800106a0:	10 9c       	mov	r12,r8
800106a2:	f0 16 00 0e 	mcall	r6[56]
}
800106a6:	2f dd       	sub	sp,-12
800106a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800106ac:	80 01       	ld.sh	r1,r0[0x0]
800106ae:	00 74       	tst	r4,r0

800106b0 <init_mavlink_actions>:

void init_mavlink_actions(void) {
800106b0:	eb cd 40 e0 	pushm	r5-r7,lr
800106b4:	1a 97       	mov	r7,sp
800106b6:	4e e6       	lddpc	r6,8001086c <init_mavlink_actions+0x1bc>
800106b8:	1e 26       	rsub	r6,pc
	//board=get_board_hardware();
	centralData=get_central_data();
800106ba:	f0 16 00 33 	mcall	r6[204]
800106be:	18 99       	mov	r9,r12
800106c0:	ec f8 00 00 	ld.w	r8,r6[0]
800106c4:	91 09       	st.w	r8[0x0],r9
	add_PID_parameters();
800106c6:	f0 16 01 a1 	mcall	r6[1668]
	
	//write_parameters_to_flashc();
	
	read_parameters_from_flashc();
800106ca:	f0 16 01 20 	mcall	r6[1152]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_heartbeat, MAVLINK_MSG_ID_HEARTBEAT);
800106ce:	ec f5 06 e0 	ld.w	r5,r6[1760]
800106d2:	f0 16 00 26 	mcall	r6[152]
800106d6:	30 08       	mov	r8,0
800106d8:	0a 99       	mov	r9,r5
800106da:	30 2a       	mov	r10,2
800106dc:	e6 7b a1 20 	mov	r11,500000
800106e0:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(), 1000000, RUN_NEVER, &mavlink_send_attitude_quaternion, MAVLINK_MSG_ID_ATTITUDE_QUATERNION);
800106e4:	ec f5 07 74 	ld.w	r5,r6[1908]
800106e8:	f0 16 00 26 	mcall	r6[152]
800106ec:	31 f8       	mov	r8,31
800106ee:	0a 99       	mov	r9,r5
800106f0:	30 0a       	mov	r10,0
800106f2:	ee 7b 42 40 	mov	r11,1000000
800106f6:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_attitude, MAVLINK_MSG_ID_ATTITUDE);
800106fa:	ec f5 07 dc 	ld.w	r5,r6[2012]
800106fe:	f0 16 00 26 	mcall	r6[152]
80010702:	31 e8       	mov	r8,30
80010704:	0a 99       	mov	r9,r5
80010706:	30 2a       	mov	r10,2
80010708:	e2 7b 0d 40 	mov	r11,200000
8001070c:	f0 16 00 25 	mcall	r6[148]
	
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_hud, MAVLINK_MSG_ID_VFR_HUD);
80010710:	ec f5 06 58 	ld.w	r5,r6[1624]
80010714:	f0 16 00 26 	mcall	r6[152]
80010718:	34 a8       	mov	r8,74
8001071a:	0a 99       	mov	r9,r5
8001071c:	30 2a       	mov	r10,2
8001071e:	e6 7b a1 20 	mov	r11,500000
80010722:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_pressure, MAVLINK_MSG_ID_SCALED_PRESSURE);
80010726:	ec f5 05 10 	ld.w	r5,r6[1296]
8001072a:	f0 16 00 26 	mcall	r6[152]
8001072e:	31 d8       	mov	r8,29
80010730:	0a 99       	mov	r9,r5
80010732:	30 2a       	mov	r10,2
80010734:	e6 7b a1 20 	mov	r11,500000
80010738:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_scaled_imu, MAVLINK_MSG_ID_SCALED_IMU);
8001073c:	ec f5 05 0c 	ld.w	r5,r6[1292]
80010740:	f0 16 00 26 	mcall	r6[152]
80010744:	31 a8       	mov	r8,26
80010746:	0a 99       	mov	r9,r5
80010748:	30 2a       	mov	r10,2
8001074a:	e2 7b 0d 40 	mov	r11,200000
8001074e:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_raw_imu, MAVLINK_MSG_ID_RAW_IMU);
80010752:	ec f5 05 14 	ld.w	r5,r6[1300]
80010756:	f0 16 00 26 	mcall	r6[152]
8001075a:	31 b8       	mov	r8,27
8001075c:	0a 99       	mov	r9,r5
8001075e:	30 2a       	mov	r10,2
80010760:	e6 7b a1 20 	mov	r11,500000
80010764:	f0 16 00 25 	mcall	r6[148]

	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_rates_error, MAVLINK_MSG_ID_ROLL_PITCH_YAW_RATES_THRUST_SETPOINT);
80010768:	ec f5 05 a4 	ld.w	r5,r6[1444]
8001076c:	f0 16 00 26 	mcall	r6[152]
80010770:	35 08       	mov	r8,80
80010772:	0a 99       	mov	r9,r5
80010774:	30 0a       	mov	r10,0
80010776:	e2 7b 0d 40 	mov	r11,200000
8001077a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_speed_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_SPEED_THRUST_SETPOINT);
8001077e:	ec f5 05 94 	ld.w	r5,r6[1428]
80010782:	f0 16 00 26 	mcall	r6[152]
80010786:	33 b8       	mov	r8,59
80010788:	0a 99       	mov	r9,r5
8001078a:	30 0a       	mov	r10,0
8001078c:	e2 7b 0d 40 	mov	r11,200000
80010790:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_NEVER, &mavlink_send_rpy_thrust_setpoint, MAVLINK_MSG_ID_ROLL_PITCH_YAW_THRUST_SETPOINT);
80010794:	ec f5 05 38 	ld.w	r5,r6[1336]
80010798:	f0 16 00 26 	mcall	r6[152]
8001079c:	33 a8       	mov	r8,58
8001079e:	0a 99       	mov	r9,r5
800107a0:	30 0a       	mov	r10,0
800107a2:	e2 7b 0d 40 	mov	r11,200000
800107a6:	f0 16 00 25 	mcall	r6[148]


	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_servo_output, MAVLINK_MSG_ID_SERVO_OUTPUT_RAW);
800107aa:	ec f5 07 68 	ld.w	r5,r6[1896]
800107ae:	f0 16 00 26 	mcall	r6[152]
800107b2:	32 48       	mov	r8,36
800107b4:	0a 99       	mov	r9,r5
800107b6:	30 2a       	mov	r10,2
800107b8:	e2 7b d0 90 	mov	r11,250000
800107bc:	f0 16 00 25 	mcall	r6[148]
//	add_task(get_mavlink_taskset(),  50000, &mavlink_send_radar);
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_estimator, MAVLINK_MSG_ID_LOCAL_POSITION_NED);
800107c0:	ec f5 06 fc 	ld.w	r5,r6[1788]
800107c4:	f0 16 00 26 	mcall	r6[152]
800107c8:	32 08       	mov	r8,32
800107ca:	0a 99       	mov	r9,r5
800107cc:	30 2a       	mov	r10,2
800107ce:	e2 7b 0d 40 	mov	r11,200000
800107d2:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_global_position, MAVLINK_MSG_ID_GLOBAL_POSITION_INT);
800107d6:	ec f5 07 5c 	ld.w	r5,r6[1884]
800107da:	f0 16 00 26 	mcall	r6[152]
800107de:	32 18       	mov	r8,33
800107e0:	0a 99       	mov	r9,r5
800107e2:	30 2a       	mov	r10,2
800107e4:	e2 7b 0d 40 	mov	r11,200000
800107e8:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_gps_raw, MAVLINK_MSG_ID_GPS_RAW_INT);
800107ec:	ec f5 07 8c 	ld.w	r5,r6[1932]
800107f0:	f0 16 00 26 	mcall	r6[152]
800107f4:	31 88       	mov	r8,24
800107f6:	0a 99       	mov	r9,r5
800107f8:	30 2a       	mov	r10,2
800107fa:	e2 7b d0 90 	mov	r11,250000
800107fe:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  200000, RUN_REGULAR, &mavlink_send_raw_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_RAW);
80010802:	ec f5 06 38 	ld.w	r5,r6[1592]
80010806:	f0 16 00 26 	mcall	r6[152]
8001080a:	32 38       	mov	r8,35
8001080c:	0a 99       	mov	r9,r5
8001080e:	30 2a       	mov	r10,2
80010810:	e2 7b 0d 40 	mov	r11,200000
80010814:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_scaled_rc_channels, MAVLINK_MSG_ID_RC_CHANNELS_SCALED);
80010818:	ec f5 07 60 	ld.w	r5,r6[1888]
8001081c:	f0 16 00 26 	mcall	r6[152]
80010820:	32 28       	mov	r8,34
80010822:	0a 99       	mov	r9,r5
80010824:	30 2a       	mov	r10,2
80010826:	e2 7b d0 90 	mov	r11,250000
8001082a:	f0 16 00 25 	mcall	r6[148]
	add_task(get_mavlink_taskset(),  500000, RUN_REGULAR, &mavlink_send_simulation, MAVLINK_MSG_ID_HIL_STATE);
8001082e:	ec f5 07 f0 	ld.w	r5,r6[2032]
80010832:	f0 16 00 26 	mcall	r6[152]
80010836:	35 a8       	mov	r8,90
80010838:	0a 99       	mov	r9,r5
8001083a:	30 2a       	mov	r10,2
8001083c:	e6 7b a1 20 	mov	r11,500000
80010840:	f0 16 00 25 	mcall	r6[148]
	//add_task(get_mavlink_taskset(),  250000, RUN_REGULAR, &mavlink_send_kalman_estimator, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
	add_task(get_mavlink_taskset(),  250000, RUN_NEVER, &send_rt_stats, MAVLINK_MSG_ID_NAMED_VALUE_FLOAT);
80010844:	ec f5 06 a0 	ld.w	r5,r6[1696]
80010848:	f0 16 00 26 	mcall	r6[152]
8001084c:	e0 68 00 fb 	mov	r8,251
80010850:	0a 99       	mov	r9,r5
80010852:	30 0a       	mov	r10,0
80010854:	e2 7b d0 90 	mov	r11,250000
80010858:	f0 16 00 25 	mcall	r6[148]
	
	sort_taskset_by_period(get_mavlink_taskset());
8001085c:	f0 16 00 26 	mcall	r6[152]
80010860:	18 98       	mov	r8,r12
80010862:	10 9c       	mov	r12,r8
80010864:	f0 16 01 ac 	mcall	r6[1712]
}
80010868:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001086c:	80 01       	ld.sh	r1,r0[0x0]
8001086e:	05 3c       	ld.ub	r12,r2++

80010870 <get_roll_from_remote>:
	#include "joystick_rc.h"
#endif



static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
80010870:	eb cd 40 c0 	pushm	r6-r7,lr
80010874:	1a 97       	mov	r7,sp
80010876:	48 e6       	lddpc	r6,800108ac <get_roll_from_remote+0x3c>
80010878:	1e 26       	rsub	r6,pc
8001087a:	30 1c       	mov	r12,1
8001087c:	f0 16 00 c6 	mcall	r6[792]
80010880:	18 98       	mov	r8,r12
80010882:	10 9c       	mov	r12,r8
80010884:	f0 16 00 1a 	mcall	r6[104]
80010888:	30 08       	mov	r8,0
8001088a:	e0 69 60 00 	mov	r9,24576
8001088e:	ea 19 40 7b 	orh	r9,0x407b
80010892:	f0 16 00 0c 	mcall	r6[48]
80010896:	14 98       	mov	r8,r10
80010898:	16 99       	mov	r9,r11
8001089a:	10 9a       	mov	r10,r8
8001089c:	12 9b       	mov	r11,r9
8001089e:	f0 16 00 08 	mcall	r6[32]
800108a2:	18 98       	mov	r8,r12
800108a4:	10 9c       	mov	r12,r8
800108a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108aa:	00 00       	add	r0,r0
800108ac:	80 01       	ld.sh	r1,r0[0x0]
800108ae:	06 fc       	st.b	--r3,r12

800108b0 <get_pitch_from_remote>:
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
800108b0:	eb cd 40 c0 	pushm	r6-r7,lr
800108b4:	1a 97       	mov	r7,sp
800108b6:	48 e6       	lddpc	r6,800108ec <get_pitch_from_remote+0x3c>
800108b8:	1e 26       	rsub	r6,pc
800108ba:	30 2c       	mov	r12,2
800108bc:	f0 16 00 c6 	mcall	r6[792]
800108c0:	18 98       	mov	r8,r12
800108c2:	5c 38       	neg	r8
800108c4:	10 9c       	mov	r12,r8
800108c6:	f0 16 00 1a 	mcall	r6[104]
800108ca:	30 08       	mov	r8,0
800108cc:	e0 69 60 00 	mov	r9,24576
800108d0:	ea 19 40 7b 	orh	r9,0x407b
800108d4:	f0 16 00 0c 	mcall	r6[48]
800108d8:	14 98       	mov	r8,r10
800108da:	16 99       	mov	r9,r11
800108dc:	10 9a       	mov	r10,r8
800108de:	12 9b       	mov	r11,r9
800108e0:	f0 16 00 08 	mcall	r6[32]
800108e4:	18 98       	mov	r8,r12
800108e6:	10 9c       	mov	r12,r8
800108e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800108ec:	80 01       	ld.sh	r1,r0[0x0]
800108ee:	07 3c       	ld.ub	r12,r3++

800108f0 <get_yaw_from_remote>:
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
800108f0:	eb cd 40 c0 	pushm	r6-r7,lr
800108f4:	1a 97       	mov	r7,sp
800108f6:	48 e6       	lddpc	r6,8001092c <get_yaw_from_remote+0x3c>
800108f8:	1e 26       	rsub	r6,pc
800108fa:	30 3c       	mov	r12,3
800108fc:	f0 16 00 c6 	mcall	r6[792]
80010900:	18 98       	mov	r8,r12
80010902:	10 9c       	mov	r12,r8
80010904:	f0 16 00 1a 	mcall	r6[104]
80010908:	30 08       	mov	r8,0
8001090a:	e0 69 60 00 	mov	r9,24576
8001090e:	ea 19 40 7b 	orh	r9,0x407b
80010912:	f0 16 00 0c 	mcall	r6[48]
80010916:	14 98       	mov	r8,r10
80010918:	16 99       	mov	r9,r11
8001091a:	10 9a       	mov	r10,r8
8001091c:	12 9b       	mov	r11,r9
8001091e:	f0 16 00 08 	mcall	r6[32]
80010922:	18 98       	mov	r8,r12
80010924:	10 9c       	mov	r12,r8
80010926:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001092a:	00 00       	add	r0,r0
8001092c:	80 01       	ld.sh	r1,r0[0x0]
8001092e:	07 7c       	ld.ub	r12,--r3

80010930 <get_thrust_from_remote>:
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
80010930:	eb cd 40 c0 	pushm	r6-r7,lr
80010934:	1a 97       	mov	r7,sp
80010936:	48 e6       	lddpc	r6,8001096c <get_thrust_from_remote+0x3c>
80010938:	1e 26       	rsub	r6,pc
8001093a:	30 0c       	mov	r12,0
8001093c:	f0 16 00 1c 	mcall	r6[112]
80010940:	18 98       	mov	r8,r12
80010942:	10 9c       	mov	r12,r8
80010944:	f0 16 00 1a 	mcall	r6[104]
80010948:	30 08       	mov	r8,0
8001094a:	e0 69 60 00 	mov	r9,24576
8001094e:	ea 19 40 7b 	orh	r9,0x407b
80010952:	f0 16 00 0c 	mcall	r6[48]
80010956:	14 98       	mov	r8,r10
80010958:	16 99       	mov	r9,r11
8001095a:	10 9a       	mov	r10,r8
8001095c:	12 9b       	mov	r11,r9
8001095e:	f0 16 00 08 	mcall	r6[32]
80010962:	18 98       	mov	r8,r12
80010964:	10 9c       	mov	r12,r8
80010966:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001096a:	00 00       	add	r0,r0
8001096c:	80 01       	ld.sh	r1,r0[0x0]
8001096e:	07 bc       	ld.ub	r12,r3[0x3]

80010970 <get_command_from_remote>:


static inline Control_Command_t get_command_from_remote()
{
80010970:	eb cd 40 e0 	pushm	r5-r7,lr
80010974:	1a 97       	mov	r7,sp
80010976:	20 bd       	sub	sp,44
80010978:	4b a6       	lddpc	r6,80010a60 <get_command_from_remote+0xf0>
8001097a:	1e 26       	rsub	r6,pc
8001097c:	18 95       	mov	r5,r12
	Control_Command_t controls;
	controls.rpy[ROLL]= get_roll_from_remote()*RC_INPUT_SCALE;
8001097e:	c7 9f       	rcall	80010870 <get_roll_from_remote>
80010980:	18 98       	mov	r8,r12
80010982:	10 9c       	mov	r12,r8
80010984:	f0 16 00 02 	mcall	r6[8]
80010988:	e0 68 99 9a 	mov	r8,39322
8001098c:	ea 18 99 99 	orh	r8,0x9999
80010990:	e0 69 99 99 	mov	r9,39321
80010994:	ea 19 3f e9 	orh	r9,0x3fe9
80010998:	f0 16 00 03 	mcall	r6[12]
8001099c:	14 98       	mov	r8,r10
8001099e:	16 99       	mov	r9,r11
800109a0:	10 9a       	mov	r10,r8
800109a2:	12 9b       	mov	r11,r9
800109a4:	f0 16 00 08 	mcall	r6[32]
800109a8:	18 98       	mov	r8,r12
800109aa:	ef 48 ff d4 	st.w	r7[-44],r8
	controls.rpy[PITCH]= get_pitch_from_remote()*RC_INPUT_SCALE;
800109ae:	c8 1f       	rcall	800108b0 <get_pitch_from_remote>
800109b0:	18 98       	mov	r8,r12
800109b2:	10 9c       	mov	r12,r8
800109b4:	f0 16 00 02 	mcall	r6[8]
800109b8:	e0 68 99 9a 	mov	r8,39322
800109bc:	ea 18 99 99 	orh	r8,0x9999
800109c0:	e0 69 99 99 	mov	r9,39321
800109c4:	ea 19 3f e9 	orh	r9,0x3fe9
800109c8:	f0 16 00 03 	mcall	r6[12]
800109cc:	14 98       	mov	r8,r10
800109ce:	16 99       	mov	r9,r11
800109d0:	10 9a       	mov	r10,r8
800109d2:	12 9b       	mov	r11,r9
800109d4:	f0 16 00 08 	mcall	r6[32]
800109d8:	18 98       	mov	r8,r12
800109da:	ef 48 ff d8 	st.w	r7[-40],r8
	controls.rpy[YAW]= get_yaw_from_remote()*RC_INPUT_SCALE;
800109de:	c8 9f       	rcall	800108f0 <get_yaw_from_remote>
800109e0:	18 98       	mov	r8,r12
800109e2:	10 9c       	mov	r12,r8
800109e4:	f0 16 00 02 	mcall	r6[8]
800109e8:	e0 68 99 9a 	mov	r8,39322
800109ec:	ea 18 99 99 	orh	r8,0x9999
800109f0:	e0 69 99 99 	mov	r9,39321
800109f4:	ea 19 3f e9 	orh	r9,0x3fe9
800109f8:	f0 16 00 03 	mcall	r6[12]
800109fc:	14 98       	mov	r8,r10
800109fe:	16 99       	mov	r9,r11
80010a00:	10 9a       	mov	r10,r8
80010a02:	12 9b       	mov	r11,r9
80010a04:	f0 16 00 08 	mcall	r6[32]
80010a08:	18 98       	mov	r8,r12
80010a0a:	ef 48 ff dc 	st.w	r7[-36],r8
	controls.thrust = get_thrust_from_remote();
80010a0e:	c9 1f       	rcall	80010930 <get_thrust_from_remote>
80010a10:	18 98       	mov	r8,r12
80010a12:	ef 48 ff e0 	st.w	r7[-32],r8
	
	return controls;
80010a16:	0a 98       	mov	r8,r5
80010a18:	ee c9 00 2c 	sub	r9,r7,44
80010a1c:	f0 ca 00 00 	sub	r10,r8,0
80010a20:	f2 cb 00 00 	sub	r11,r9,0
80010a24:	76 0c       	ld.w	r12,r11[0x0]
80010a26:	95 0c       	st.w	r10[0x0],r12
80010a28:	76 1c       	ld.w	r12,r11[0x4]
80010a2a:	95 1c       	st.w	r10[0x4],r12
80010a2c:	76 2c       	ld.w	r12,r11[0x8]
80010a2e:	95 2c       	st.w	r10[0x8],r12
80010a30:	76 3b       	ld.w	r11,r11[0xc]
80010a32:	95 3b       	st.w	r10[0xc],r11
80010a34:	f0 ca ff f0 	sub	r10,r8,-16
80010a38:	f2 cb ff f0 	sub	r11,r9,-16
80010a3c:	76 0c       	ld.w	r12,r11[0x0]
80010a3e:	95 0c       	st.w	r10[0x0],r12
80010a40:	76 1c       	ld.w	r12,r11[0x4]
80010a42:	95 1c       	st.w	r10[0x4],r12
80010a44:	76 2c       	ld.w	r12,r11[0x8]
80010a46:	95 2c       	st.w	r10[0x8],r12
80010a48:	76 3b       	ld.w	r11,r11[0xc]
80010a4a:	95 3b       	st.w	r10[0xc],r11
80010a4c:	f2 ea 00 20 	ld.d	r10,r9[32]
80010a50:	f0 eb 00 20 	st.d	r8[32],r10
80010a54:	72 a9       	ld.w	r9,r9[0x28]
80010a56:	91 a9       	st.w	r8[0x28],r9
}
80010a58:	0a 9c       	mov	r12,r5
80010a5a:	2f 5d       	sub	sp,-44
80010a5c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010a60:	80 01       	ld.sh	r1,r0[0x0]
80010a62:	07 fe       	ld.ub	lr,r3[0x7]

80010a64 <get_channel_mode>:
	}
#endif

#ifdef TURNIGY_REMOTE
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
80010a64:	eb cd 40 c0 	pushm	r6-r7,lr
80010a68:	1a 97       	mov	r7,sp
80010a6a:	20 1d       	sub	sp,4
80010a6c:	4a d6       	lddpc	r6,80010b20 <get_channel_mode+0xbc>
80010a6e:	1e 26       	rsub	r6,pc
80010a70:	ef 4c ff fc 	st.w	r7[-4],r12
		if (rc_get_channel(RC_SAFETY)<0)
80010a74:	30 4c       	mov	r12,4
80010a76:	f0 16 00 1c 	mcall	r6[112]
80010a7a:	18 98       	mov	r8,r12
80010a7c:	10 99       	mov	r9,r8
80010a7e:	30 08       	mov	r8,0
80010a80:	f0 09 19 00 	cp.h	r9,r8
80010a84:	c0 84       	brge	80010a94 <get_channel_mode+0x30>
		{
			*chanSwitch |= 0x00;
80010a86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010a8a:	11 88       	ld.ub	r8,r8[0x0]
80010a8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010a90:	b2 88       	st.b	r9[0x0],r8
80010a92:	c4 38       	rjmp	80010b18 <get_channel_mode+0xb4>
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80010a94:	30 4c       	mov	r12,4
80010a96:	f0 16 00 1c 	mcall	r6[112]
80010a9a:	18 98       	mov	r8,r12
80010a9c:	10 99       	mov	r9,r8
80010a9e:	30 08       	mov	r8,0
80010aa0:	f0 09 19 00 	cp.h	r9,r8
80010aa4:	e0 8a 00 14 	brle	80010acc <get_channel_mode+0x68>
80010aa8:	30 5c       	mov	r12,5
80010aaa:	f0 16 00 1c 	mcall	r6[112]
80010aae:	18 98       	mov	r8,r12
80010ab0:	10 99       	mov	r9,r8
80010ab2:	30 08       	mov	r8,0
80010ab4:	f0 09 19 00 	cp.h	r9,r8
80010ab8:	c0 a4       	brge	80010acc <get_channel_mode+0x68>
			*chanSwitch |= 0x01;
80010aba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010abe:	11 88       	ld.ub	r8,r8[0x0]
80010ac0:	a1 a8       	sbr	r8,0x0
80010ac2:	5c 58       	castu.b	r8
80010ac4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010ac8:	b2 88       	st.b	r9[0x0],r8
	static inline void get_channel_mode(uint8_t* chanSwitch)
	{
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
80010aca:	c2 78       	rjmp	80010b18 <get_channel_mode+0xb4>
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80010acc:	30 4c       	mov	r12,4
80010ace:	f0 16 00 1c 	mcall	r6[112]
80010ad2:	18 98       	mov	r8,r12
80010ad4:	10 99       	mov	r9,r8
80010ad6:	30 08       	mov	r8,0
80010ad8:	f0 09 19 00 	cp.h	r9,r8
80010adc:	e0 8a 00 16 	brle	80010b08 <get_channel_mode+0xa4>
80010ae0:	30 5c       	mov	r12,5
80010ae2:	f0 16 00 1c 	mcall	r6[112]
80010ae6:	18 98       	mov	r8,r12
80010ae8:	10 99       	mov	r9,r8
80010aea:	31 48       	mov	r8,20
80010aec:	f0 09 19 00 	cp.h	r9,r8
80010af0:	e0 8a 00 0c 	brle	80010b08 <get_channel_mode+0xa4>
			*chanSwitch |= 0x03;
80010af4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010af8:	11 88       	ld.ub	r8,r8[0x0]
80010afa:	e8 18 00 03 	orl	r8,0x3
80010afe:	5c 58       	castu.b	r8
80010b00:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010b04:	b2 88       	st.b	r9[0x0],r8
		if (rc_get_channel(RC_SAFETY)<0)
		{
			*chanSwitch |= 0x00;
			}else if(rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)<0){
			*chanSwitch |= 0x01;
			}else if (rc_get_channel(RC_SAFETY)>0 && rc_get_channel(RC_ID_MODE)>20){
80010b06:	c0 98       	rjmp	80010b18 <get_channel_mode+0xb4>
			*chanSwitch |= 0x03;
			}else{
			*chanSwitch |= 0x02;
80010b08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80010b0c:	11 88       	ld.ub	r8,r8[0x0]
80010b0e:	a1 b8       	sbr	r8,0x1
80010b10:	5c 58       	castu.b	r8
80010b12:	ee f9 ff fc 	ld.w	r9,r7[-4]
80010b16:	b2 88       	st.b	r9[0x0],r8
		}
	}
80010b18:	2f fd       	sub	sp,-4
80010b1a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010b1e:	00 00       	add	r0,r0
80010b20:	80 01       	ld.sh	r1,r0[0x0]
80010b22:	08 f2       	st.b	--r4,r2

80010b24 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80010b24:	eb cd 40 c0 	pushm	r6-r7,lr
80010b28:	1a 97       	mov	r7,sp
80010b2a:	20 3d       	sub	sp,12
80010b2c:	49 06       	lddpc	r6,80010b6c <mav_array_memcpy+0x48>
80010b2e:	1e 26       	rsub	r6,pc
80010b30:	ef 4c ff fc 	st.w	r7[-4],r12
80010b34:	ef 4b ff f8 	st.w	r7[-8],r11
80010b38:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80010b3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80010b40:	58 08       	cp.w	r8,0
80010b42:	c0 91       	brne	80010b54 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80010b44:	ee fa ff f4 	ld.w	r10,r7[-12]
80010b48:	30 0b       	mov	r11,0
80010b4a:	ee fc ff fc 	ld.w	r12,r7[-4]
80010b4e:	f0 16 00 31 	mcall	r6[196]
80010b52:	c0 98       	rjmp	80010b64 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80010b54:	ee fa ff f4 	ld.w	r10,r7[-12]
80010b58:	ee fb ff f8 	ld.w	r11,r7[-8]
80010b5c:	ee fc ff fc 	ld.w	r12,r7[-4]
80010b60:	f0 16 00 1b 	mcall	r6[108]
	}
}
80010b64:	2f dd       	sub	sp,-12
80010b66:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010b6a:	00 00       	add	r0,r0
80010b6c:	80 01       	ld.sh	r1,r0[0x0]
80010b6e:	09 b2       	ld.ub	r2,r4[0x3]

80010b70 <get_main_taskset>:

#define PRESSURE_LPF 0.1

central_data_t *centralData;

task_set* get_main_taskset() {
80010b70:	eb cd 40 c0 	pushm	r6-r7,lr
80010b74:	1a 97       	mov	r7,sp
80010b76:	48 46       	lddpc	r6,80010b84 <get_main_taskset+0x14>
80010b78:	1e 26       	rsub	r6,pc
	return &main_tasks;
80010b7a:	ec f8 01 30 	ld.w	r8,r6[304]
}
80010b7e:	10 9c       	mov	r12,r8
80010b80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010b84:	80 01       	ld.sh	r1,r0[0x0]
80010b86:	09 fc       	ld.ub	r12,r4[0x7]

80010b88 <run_imu_update>:

task_return_t run_imu_update() {
80010b88:	eb cd 40 c0 	pushm	r6-r7,lr
80010b8c:	1a 97       	mov	r7,sp
80010b8e:	48 d6       	lddpc	r6,80010bc0 <run_imu_update+0x38>
80010b90:	1e 26       	rsub	r6,pc
	imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
80010b92:	ec f8 00 00 	ld.w	r8,r6[0]
80010b96:	70 08       	ld.w	r8,r8[0x0]
80010b98:	f0 c9 f8 b0 	sub	r9,r8,-1872
80010b9c:	ec f8 00 00 	ld.w	r8,r6[0]
80010ba0:	70 08       	ld.w	r8,r8[0x0]
80010ba2:	f0 ca f2 f4 	sub	r10,r8,-3340
80010ba6:	ec f8 00 00 	ld.w	r8,r6[0]
80010baa:	70 08       	ld.w	r8,r8[0x0]
80010bac:	f0 cb f6 7c 	sub	r11,r8,-2436
80010bb0:	ec f8 00 00 	ld.w	r8,r6[0]
80010bb4:	70 08       	ld.w	r8,r8[0x0]
80010bb6:	10 9c       	mov	r12,r8
80010bb8:	f0 16 00 9b 	mcall	r6[620]
}	
80010bbc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80010bc0:	80 01       	ld.sh	r1,r0[0x0]
80010bc2:	0a 14       	sub	r4,r5
80010bc4:	6d 6f       	ld.w	pc,r6[0x58]
80010bc6:	74 6f       	ld.w	pc,r10[0x18]
80010bc8:	72 20       	ld.w	r0,r9[0x8]
80010bca:	6f 6e       	ld.w	lr,r7[0x58]
80010bcc:	3a 20       	mov	r0,-94
80010bce:	79 61       	ld.w	r1,r12[0x58]
80010bd0:	77 3d       	ld.w	sp,r11[0x4c]
80010bd2:	0a 00       	add	r0,r5

80010bd4 <rc_user_channels>:

void rc_user_channels(uint8_t *chanSwitch, int8_t *rc_check, int8_t *motorbool)
{
80010bd4:	eb cd 40 e0 	pushm	r5-r7,lr
80010bd8:	1a 97       	mov	r7,sp
80010bda:	20 3d       	sub	sp,12
80010bdc:	4c f6       	lddpc	r6,80010d18 <rc_user_channels+0x144>
80010bde:	1e 26       	rsub	r6,pc
80010be0:	ef 4c ff fc 	st.w	r7[-4],r12
80010be4:	ef 4b ff f8 	st.w	r7[-8],r11
80010be8:	ef 4a ff f4 	st.w	r7[-12],r10
	
	get_channel_mode(chanSwitch);
80010bec:	ee fc ff fc 	ld.w	r12,r7[-4]
80010bf0:	c3 af       	rcall	80010a64 <get_channel_mode>
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010bf2:	c9 fe       	rcall	80010930 <get_thrust_from_remote>
80010bf4:	18 98       	mov	r8,r12
80010bf6:	10 9c       	mov	r12,r8
80010bf8:	f0 16 00 02 	mcall	r6[8]
80010bfc:	30 05       	mov	r5,0
80010bfe:	e0 68 66 66 	mov	r8,26214
80010c02:	ea 18 66 66 	orh	r8,0x6666
80010c06:	e0 69 66 66 	mov	r9,26214
80010c0a:	ea 19 bf ee 	orh	r9,0xbfee
80010c0e:	f0 16 00 1e 	mcall	r6[120]
80010c12:	18 98       	mov	r8,r12
80010c14:	58 08       	cp.w	r8,0
80010c16:	c0 20       	breq	80010c1a <rc_user_channels+0x46>
80010c18:	30 15       	mov	r5,1
80010c1a:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010c1e:	c2 90       	breq	80010c70 <rc_user_channels+0x9c>
80010c20:	c6 8e       	rcall	800108f0 <get_yaw_from_remote>
80010c22:	18 98       	mov	r8,r12
80010c24:	10 9c       	mov	r12,r8
80010c26:	f0 16 00 02 	mcall	r6[8]
80010c2a:	14 98       	mov	r8,r10
80010c2c:	16 99       	mov	r9,r11
80010c2e:	30 05       	mov	r5,0
80010c30:	e0 6a cc cd 	mov	r10,52429
80010c34:	ea 1a cc cc 	orh	r10,0xcccc
80010c38:	e0 6b cc cc 	mov	r11,52428
80010c3c:	ea 1b 3f ec 	orh	r11,0x3fec
80010c40:	f0 16 00 1e 	mcall	r6[120]
80010c44:	18 98       	mov	r8,r12
80010c46:	58 08       	cp.w	r8,0
80010c48:	c0 20       	breq	80010c4c <rc_user_channels+0x78>
80010c4a:	30 15       	mov	r5,1
80010c4c:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010c50:	c1 00       	breq	80010c70 <rc_user_channels+0x9c>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
80010c52:	fe cc 00 8e 	sub	r12,pc,142
80010c56:	f0 16 00 01 	mcall	r6[4]
80010c5a:	c4 be       	rcall	800108f0 <get_yaw_from_remote>
80010c5c:	18 98       	mov	r8,r12
80010c5e:	30 2b       	mov	r11,2
80010c60:	10 9c       	mov	r12,r8
80010c62:	f0 16 02 15 	mcall	r6[2132]
		*motorbool = 1;
80010c66:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010c6a:	30 18       	mov	r8,1
80010c6c:	b2 88       	st.b	r9[0x0],r8
	//dbg_print_num(*chanSwitch,10);
	//dbg_print_num(getChannel(4),10);
	//dbg_print_num(getChannel(5),10);
	//dbg_print("\n");
	
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
80010c6e:	c3 88       	rjmp	80010cde <rc_user_channels+0x10a>
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80010c70:	c6 0e       	rcall	80010930 <get_thrust_from_remote>
80010c72:	18 98       	mov	r8,r12
80010c74:	10 9c       	mov	r12,r8
80010c76:	f0 16 00 02 	mcall	r6[8]
80010c7a:	30 05       	mov	r5,0
80010c7c:	e0 68 66 66 	mov	r8,26214
80010c80:	ea 18 66 66 	orh	r8,0x6666
80010c84:	e0 69 66 66 	mov	r9,26214
80010c88:	ea 19 bf ee 	orh	r9,0xbfee
80010c8c:	f0 16 00 1e 	mcall	r6[120]
80010c90:	18 98       	mov	r8,r12
80010c92:	58 08       	cp.w	r8,0
80010c94:	c0 20       	breq	80010c98 <rc_user_channels+0xc4>
80010c96:	30 15       	mov	r5,1
80010c98:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010c9c:	c1 d0       	breq	80010cd6 <rc_user_channels+0x102>
80010c9e:	c2 9e       	rcall	800108f0 <get_yaw_from_remote>
80010ca0:	18 98       	mov	r8,r12
80010ca2:	10 9c       	mov	r12,r8
80010ca4:	f0 16 00 02 	mcall	r6[8]
80010ca8:	30 05       	mov	r5,0
80010caa:	e0 68 cc cd 	mov	r8,52429
80010cae:	ea 18 cc cc 	orh	r8,0xcccc
80010cb2:	e0 69 cc cc 	mov	r9,52428
80010cb6:	ea 19 bf ec 	orh	r9,0xbfec
80010cba:	f0 16 00 1e 	mcall	r6[120]
80010cbe:	18 98       	mov	r8,r12
80010cc0:	58 08       	cp.w	r8,0
80010cc2:	c0 20       	breq	80010cc6 <rc_user_channels+0xf2>
80010cc4:	30 15       	mov	r5,1
80010cc6:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80010cca:	c0 60       	breq	80010cd6 <rc_user_channels+0x102>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
80010ccc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010cd0:	3f f8       	mov	r8,-1
80010cd2:	b2 88       	st.b	r9[0x0],r8
	if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() > 0.9))
	{
		//dbg_print("motor on\n");
		dbg_print("motor on: yaw=\n"); dbg_putfloat(get_yaw_from_remote(),2);
		*motorbool = 1;
	}else if((get_thrust_from_remote()<-0.95) && (get_yaw_from_remote() <-0.9))
80010cd4:	c0 58       	rjmp	80010cde <rc_user_channels+0x10a>
	{
		//dbg_print("motor off\n");
		*motorbool = -1;
	}else{
		//dbg_print("motor nothing\n");
		*motorbool = 0;
80010cd6:	ee f9 ff f4 	ld.w	r9,r7[-12]
80010cda:	30 08       	mov	r8,0
80010cdc:	b2 88       	st.b	r9[0x0],r8
	}
	
	switch (rc_check_receivers())
80010cde:	f0 16 00 ad 	mcall	r6[692]
80010ce2:	18 98       	mov	r8,r12
80010ce4:	5c 58       	castu.b	r8
80010ce6:	5c 68       	casts.b	r8
80010ce8:	5b f8       	cp.w	r8,-1
80010cea:	c0 b0       	breq	80010d00 <rc_user_channels+0x12c>
80010cec:	58 18       	cp.w	r8,1
80010cee:	c0 40       	breq	80010cf6 <rc_user_channels+0x122>
80010cf0:	5b e8       	cp.w	r8,-2
80010cf2:	c0 c0       	breq	80010d0a <rc_user_channels+0x136>
80010cf4:	c0 f8       	rjmp	80010d12 <rc_user_channels+0x13e>
	{
		case 1:
		*rc_check = 1;
80010cf6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010cfa:	30 18       	mov	r8,1
80010cfc:	b2 88       	st.b	r9[0x0],r8
		break;
80010cfe:	c0 a8       	rjmp	80010d12 <rc_user_channels+0x13e>
		case -1:
		*rc_check = -1;
80010d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010d04:	3f f8       	mov	r8,-1
80010d06:	b2 88       	st.b	r9[0x0],r8
		break;
80010d08:	c0 58       	rjmp	80010d12 <rc_user_channels+0x13e>
		case -2:
		*rc_check = -2;
80010d0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80010d0e:	3f e8       	mov	r8,-2
80010d10:	b2 88       	st.b	r9[0x0],r8
	//dbg_print("rc_check: ");
	//dbg_print_num(rc_check,10);
	//dbg_print("; motorbool : ");
	//dbg_print_num(*motorbool,10);
	//dbg_print("\n");
}
80010d12:	2f dd       	sub	sp,-12
80010d14:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80010d18:	80 01       	ld.sh	r1,r0[0x0]
80010d1a:	0a 62       	and	r2,r5
80010d1c:	53 77       	stdsp	sp[0xdc],r7
80010d1e:	69 74       	ld.w	r4,r4[0x5c]
80010d20:	63 68       	ld.w	r8,r1[0x58]
80010d22:	69 6e       	ld.w	lr,r4[0x58]
80010d24:	67 20       	ld.w	r0,r3[0x48]
80010d26:	6f 6e       	ld.w	lr,r7[0x58]
80010d28:	20 74       	sub	r4,7
80010d2a:	68 65       	ld.w	r5,r4[0x18]
80010d2c:	20 6d       	sub	sp,24
80010d2e:	6f 74       	ld.w	r4,r7[0x5c]
80010d30:	6f 72       	ld.w	r2,r7[0x5c]
80010d32:	73 21       	ld.w	r1,r9[0x48]
80010d34:	0a 00       	add	r0,r5
80010d36:	00 00       	add	r0,r0
80010d38:	53 77       	stdsp	sp[0xdc],r7
80010d3a:	69 74       	ld.w	r4,r4[0x5c]
80010d3c:	63 68       	ld.w	r8,r1[0x58]
80010d3e:	65 73       	ld.w	r3,r2[0x5c]
80010d40:	20 6e       	sub	lr,6
80010d42:	6f 74       	ld.w	r4,r7[0x5c]
80010d44:	20 72       	sub	r2,7
80010d46:	65 61       	ld.w	r1,r2[0x58]
80010d48:	64 79       	ld.w	r9,r2[0x1c]
80010d4a:	2c 20       	sub	r0,-62
80010d4c:	62 6f       	ld.w	pc,r1[0x18]
80010d4e:	74 68       	ld.w	r8,r10[0x18]
80010d50:	20 73       	sub	r3,7
80010d52:	68 6f       	ld.w	pc,r4[0x18]
80010d54:	75 6c       	ld.w	r12,r10[0x58]
80010d56:	64 20       	ld.w	r0,r2[0x8]
80010d58:	62 65       	ld.w	r5,r1[0x18]
80010d5a:	20 70       	sub	r0,7
80010d5c:	75 73       	ld.w	r3,r10[0x5c]
80010d5e:	68 65       	ld.w	r5,r4[0x18]
80010d60:	64 21       	ld.w	r1,r2[0x8]
80010d62:	0a 00       	add	r0,r5
80010d64:	53 77       	stdsp	sp[0xdc],r7
80010d66:	69 74       	ld.w	r4,r4[0x5c]
80010d68:	63 68       	ld.w	r8,r1[0x58]
80010d6a:	69 6e       	ld.w	lr,r4[0x58]
80010d6c:	67 20       	ld.w	r0,r3[0x48]
80010d6e:	6f 66       	ld.w	r6,r7[0x58]
80010d70:	66 20       	ld.w	r0,r3[0x8]
80010d72:	6d 6f       	ld.w	pc,r6[0x58]
80010d74:	74 6f       	ld.w	pc,r10[0x18]
80010d76:	72 73       	ld.w	r3,r9[0x1c]
80010d78:	21 0a       	sub	r10,16
	...

80010d7c <set_mav_mode_n_state>:

task_return_t set_mav_mode_n_state()
{
80010d7c:	eb cd 40 c0 	pushm	r6-r7,lr
80010d80:	1a 97       	mov	r7,sp
80010d82:	20 1d       	sub	sp,4
80010d84:	fe f6 03 9c 	ld.w	r6,pc[924]
80010d88:	1e 26       	rsub	r6,pc
	uint8_t channelSwitches = 0;
80010d8a:	30 08       	mov	r8,0
80010d8c:	ef 68 ff ff 	st.b	r7[-1],r8
	int8_t RC_check = 0;
80010d90:	30 08       	mov	r8,0
80010d92:	ef 68 ff fe 	st.b	r7[-2],r8
	int8_t motor_switch = 0;
80010d96:	30 08       	mov	r8,0
80010d98:	ef 68 ff fd 	st.b	r7[-3],r8
	
	LED_Toggle(LED1);
80010d9c:	30 2c       	mov	r12,2
80010d9e:	f0 16 01 d0 	mcall	r6[1856]
	
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
80010da2:	ee ca 00 03 	sub	r10,r7,3
80010da6:	ee c9 00 02 	sub	r9,r7,2
80010daa:	ee c8 00 01 	sub	r8,r7,1
80010dae:	12 9b       	mov	r11,r9
80010db0:	10 9c       	mov	r12,r8
80010db2:	f0 16 01 5b 	mcall	r6[1388]
	
	switch(centralData->mav_state)
80010db6:	ec f8 00 00 	ld.w	r8,r6[0]
80010dba:	70 08       	ld.w	r8,r8[0x0]
80010dbc:	f1 38 0d 05 	ld.ub	r8,r8[3333]
80010dc0:	58 48       	cp.w	r8,4
80010dc2:	c6 50       	breq	80010e8c <set_mav_mode_n_state+0x110>
80010dc4:	e0 89 00 09 	brgt	80010dd6 <set_mav_mode_n_state+0x5a>
80010dc8:	58 28       	cp.w	r8,2
80010dca:	e0 80 01 a2 	breq	8001110e <set_mav_mode_n_state+0x392>
80010dce:	58 38       	cp.w	r8,3
80010dd0:	c0 b0       	breq	80010de6 <set_mav_mode_n_state+0x6a>
80010dd2:	e0 8f 01 a3 	bral	80011118 <set_mav_mode_n_state+0x39c>
80010dd6:	58 58       	cp.w	r8,5
80010dd8:	e0 80 00 fa 	breq	80010fcc <set_mav_mode_n_state+0x250>
80010ddc:	58 68       	cp.w	r8,6
80010dde:	e0 80 01 70 	breq	800110be <set_mav_mode_n_state+0x342>
80010de2:	e0 8f 01 9b 	bral	80011118 <set_mav_mode_n_state+0x39c>
	{
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
80010de6:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010dea:	30 18       	mov	r8,1
80010dec:	f0 09 18 00 	cp.b	r9,r8
80010df0:	e0 81 01 91 	brne	80011112 <set_mav_mode_n_state+0x396>
			{
				switch(channelSwitches)
80010df4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010df8:	58 18       	cp.w	r8,1
80010dfa:	c3 70       	breq	80010e68 <set_mav_mode_n_state+0xec>
80010dfc:	e0 89 00 06 	brgt	80010e08 <set_mav_mode_n_state+0x8c>
80010e00:	58 08       	cp.w	r8,0
80010e02:	c0 90       	breq	80010e14 <set_mav_mode_n_state+0x98>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010e04:	e0 8f 01 8a 	bral	80011118 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CALIBRATING:
			break;
		case MAV_STATE_STANDBY:
			if (motor_switch == 1)
			{
				switch(channelSwitches)
80010e08:	58 28       	cp.w	r8,2
80010e0a:	c3 40       	breq	80010e72 <set_mav_mode_n_state+0xf6>
80010e0c:	58 38       	cp.w	r8,3
80010e0e:	c3 70       	breq	80010e7c <set_mav_mode_n_state+0x100>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80010e10:	e0 8f 01 84 	bral	80011118 <set_mav_mode_n_state+0x39c>
			if (motor_switch == 1)
			{
				switch(channelSwitches)
				{
					case 0:
						dbg_print("Switching on the motors!\n");
80010e14:	fe cc 00 f8 	sub	r12,pc,248
80010e18:	f0 16 00 01 	mcall	r6[4]
						position_reset_home_altitude(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
80010e1c:	ec f8 00 00 	ld.w	r8,r6[0]
80010e20:	70 08       	ld.w	r8,r8[0x0]
80010e22:	f0 ca f8 b0 	sub	r10,r8,-1872
80010e26:	ec f8 00 00 	ld.w	r8,r6[0]
80010e2a:	70 08       	ld.w	r8,r8[0x0]
80010e2c:	f0 c9 f2 f4 	sub	r9,r8,-3340
80010e30:	ec f8 00 00 	ld.w	r8,r6[0]
80010e34:	70 08       	ld.w	r8,r8[0x0]
80010e36:	f0 c8 f6 7c 	sub	r8,r8,-2436
80010e3a:	12 9b       	mov	r11,r9
80010e3c:	10 9c       	mov	r12,r8
80010e3e:	f0 16 02 11 	mcall	r6[2116]
						centralData->controls.run_mode = MOTORS_ON;
80010e42:	ec f8 00 00 	ld.w	r8,r6[0]
80010e46:	70 08       	ld.w	r8,r8[0x0]
80010e48:	30 19       	mov	r9,1
80010e4a:	f1 49 01 70 	st.w	r8[368],r9
						centralData->mav_state = MAV_STATE_ACTIVE;
80010e4e:	ec f8 00 00 	ld.w	r8,r6[0]
80010e52:	70 09       	ld.w	r9,r8[0x0]
80010e54:	30 48       	mov	r8,4
80010e56:	f3 68 0d 05 	st.b	r9[3333],r8
						centralData->mav_mode = MAV_MODE_MANUAL_ARMED;
80010e5a:	ec f8 00 00 	ld.w	r8,r6[0]
80010e5e:	70 09       	ld.w	r9,r8[0x0]
80010e60:	3c 08       	mov	r8,-64
80010e62:	f3 68 0d 04 	st.b	r9[3332],r8
						break;
80010e66:	c1 18       	rjmp	80010e88 <set_mav_mode_n_state+0x10c>
					case 1:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e68:	fe cc 01 30 	sub	r12,pc,304
80010e6c:	f0 16 00 01 	mcall	r6[4]
						//centralData->controls.run_mode = MOTORS_ON;
						//centralData->mav_state = MAV_STATE_ACTIVE;
						//centralData->mav_mode = MAV_MODE_STABILIZE_ARMED;
						break;
80010e70:	c0 c8       	rjmp	80010e88 <set_mav_mode_n_state+0x10c>
					case 2:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e72:	fe cc 01 3a 	sub	r12,pc,314
80010e76:	f0 16 00 01 	mcall	r6[4]
						break;
80010e7a:	c0 78       	rjmp	80010e88 <set_mav_mode_n_state+0x10c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
80010e7c:	fe cc 01 44 	sub	r12,pc,324
80010e80:	f0 16 00 01 	mcall	r6[4]
						break;
				}
			}
			break;
80010e84:	e0 8f 01 4a 	bral	80011118 <set_mav_mode_n_state+0x39c>
80010e88:	e0 8f 01 48 	bral	80011118 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_ACTIVE:
			switch(channelSwitches)
80010e8c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010e90:	58 18       	cp.w	r8,1
80010e92:	c1 80       	breq	80010ec2 <set_mav_mode_n_state+0x146>
80010e94:	e0 89 00 05 	brgt	80010e9e <set_mav_mode_n_state+0x122>
80010e98:	58 08       	cp.w	r8,0
80010e9a:	c0 70       	breq	80010ea8 <set_mav_mode_n_state+0x12c>
80010e9c:	c2 d8       	rjmp	80010ef6 <set_mav_mode_n_state+0x17a>
80010e9e:	58 28       	cp.w	r8,2
80010ea0:	c1 e0       	breq	80010edc <set_mav_mode_n_state+0x160>
80010ea2:	58 38       	cp.w	r8,3
80010ea4:	c2 30       	breq	80010eea <set_mav_mode_n_state+0x16e>
80010ea6:	c2 88       	rjmp	80010ef6 <set_mav_mode_n_state+0x17a>
			{
				case 0:
					centralData->waypoint_hold_init = false;
80010ea8:	ec f8 00 00 	ld.w	r8,r6[0]
80010eac:	70 09       	ld.w	r9,r8[0x0]
80010eae:	30 08       	mov	r8,0
80010eb0:	f3 68 0c ff 	st.b	r9[3327],r8
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80010eb4:	ec f8 00 00 	ld.w	r8,r6[0]
80010eb8:	70 09       	ld.w	r9,r8[0x0]
80010eba:	3c 08       	mov	r8,-64
80010ebc:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80010ec0:	c1 b8       	rjmp	80010ef6 <set_mav_mode_n_state+0x17a>
				case 1:
					centralData->waypoint_hold_init = false;
80010ec2:	ec f8 00 00 	ld.w	r8,r6[0]
80010ec6:	70 09       	ld.w	r9,r8[0x0]
80010ec8:	30 08       	mov	r8,0
80010eca:	f3 68 0c ff 	st.b	r9[3327],r8
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80010ece:	ec f8 00 00 	ld.w	r8,r6[0]
80010ed2:	70 09       	ld.w	r9,r8[0x0]
80010ed4:	3d 08       	mov	r8,-48
80010ed6:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80010eda:	c0 e8       	rjmp	80010ef6 <set_mav_mode_n_state+0x17a>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80010edc:	ec f8 00 00 	ld.w	r8,r6[0]
80010ee0:	70 09       	ld.w	r9,r8[0x0]
80010ee2:	3d 88       	mov	r8,-40
80010ee4:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80010ee8:	c0 78       	rjmp	80010ef6 <set_mav_mode_n_state+0x17a>
				case 3:
					
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80010eea:	ec f8 00 00 	ld.w	r8,r6[0]
80010eee:	70 09       	ld.w	r9,r8[0x0]
80010ef0:	3d c8       	mov	r8,-36
80010ef2:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
			}
			
			switch (centralData->mav_mode)
80010ef6:	ec f8 00 00 	ld.w	r8,r6[0]
80010efa:	70 08       	ld.w	r8,r8[0x0]
80010efc:	f1 38 0d 04 	ld.ub	r8,r8[3332]
80010f00:	e0 48 00 d0 	cp.w	r8,208
80010f04:	c1 50       	breq	80010f2e <set_mav_mode_n_state+0x1b2>
80010f06:	e0 89 00 06 	brgt	80010f12 <set_mav_mode_n_state+0x196>
80010f0a:	e0 48 00 c0 	cp.w	r8,192
80010f0e:	c0 90       	breq	80010f20 <set_mav_mode_n_state+0x1a4>
80010f10:	c2 88       	rjmp	80010f60 <set_mav_mode_n_state+0x1e4>
80010f12:	e0 48 00 d8 	cp.w	r8,216
80010f16:	c1 30       	breq	80010f3c <set_mav_mode_n_state+0x1c0>
80010f18:	e0 48 00 dc 	cp.w	r8,220
80010f1c:	c1 30       	breq	80010f42 <set_mav_mode_n_state+0x1c6>
80010f1e:	c2 18       	rjmp	80010f60 <set_mav_mode_n_state+0x1e4>
			{
				case MAV_MODE_MANUAL_ARMED:
					centralData->waypoint_hold_init = false;
80010f20:	ec f8 00 00 	ld.w	r8,r6[0]
80010f24:	70 09       	ld.w	r9,r8[0x0]
80010f26:	30 08       	mov	r8,0
80010f28:	f3 68 0c ff 	st.b	r9[3327],r8
					break;
80010f2c:	c1 a8       	rjmp	80010f60 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_STABILIZE_ARMED:
					centralData->waypoint_hold_init = false;
80010f2e:	ec f8 00 00 	ld.w	r8,r6[0]
80010f32:	70 09       	ld.w	r9,r8[0x0]
80010f34:	30 08       	mov	r8,0
80010f36:	f3 68 0c ff 	st.b	r9[3327],r8
					break;
80010f3a:	c1 38       	rjmp	80010f60 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_GUIDED_ARMED:
					waypoint_hold_position_handler();
80010f3c:	f0 16 01 c5 	mcall	r6[1812]
					break;
80010f40:	c1 08       	rjmp	80010f60 <set_mav_mode_n_state+0x1e4>
				case MAV_MODE_AUTO_ARMED:
					if (centralData->waypoint_set)
80010f42:	ec f8 00 00 	ld.w	r8,r6[0]
80010f46:	70 08       	ld.w	r8,r8[0x0]
80010f48:	f1 38 0c fc 	ld.ub	r8,r8[3324]
80010f4c:	58 08       	cp.w	r8,0
80010f4e:	c0 70       	breq	80010f5c <set_mav_mode_n_state+0x1e0>
					{
						centralData->waypoint_hold_init = false;
80010f50:	ec f8 00 00 	ld.w	r8,r6[0]
80010f54:	70 09       	ld.w	r9,r8[0x0]
80010f56:	30 08       	mov	r8,0
80010f58:	f3 68 0c ff 	st.b	r9[3327],r8
					}
					waypoint_navigation_handler();
80010f5c:	f0 16 02 16 	mcall	r6[2136]
					break;
			}
			
			//dbg_print("motor_switch: ");
			//dbg_print_num(motor_switch,10);
			if (motor_switch == -1)
80010f60:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80010f64:	3f f8       	mov	r8,-1
80010f66:	f0 09 18 00 	cp.b	r9,r8
80010f6a:	c1 71       	brne	80010f98 <set_mav_mode_n_state+0x21c>
			{
				dbg_print("Switching off motors!\n");
80010f6c:	fe cc 02 08 	sub	r12,pc,520
80010f70:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80010f74:	ec f8 00 00 	ld.w	r8,r6[0]
80010f78:	70 08       	ld.w	r8,r8[0x0]
80010f7a:	30 09       	mov	r9,0
80010f7c:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
80010f80:	ec f8 00 00 	ld.w	r8,r6[0]
80010f84:	70 09       	ld.w	r9,r8[0x0]
80010f86:	30 38       	mov	r8,3
80010f88:	f3 68 0d 05 	st.b	r9[3333],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
80010f8c:	ec f8 00 00 	ld.w	r8,r6[0]
80010f90:	70 09       	ld.w	r9,r8[0x0]
80010f92:	34 08       	mov	r8,64
80010f94:	f3 68 0d 04 	st.b	r9[3332],r8
			}
		
			switch (RC_check)
80010f98:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80010f9c:	5c 68       	casts.b	r8
80010f9e:	5b f8       	cp.w	r8,-1
80010fa0:	c0 70       	breq	80010fae <set_mav_mode_n_state+0x232>
80010fa2:	58 18       	cp.w	r8,1
80010fa4:	c0 40       	breq	80010fac <set_mav_mode_n_state+0x230>
80010fa6:	5b e8       	cp.w	r8,-2
80010fa8:	c0 a0       	breq	80010fbc <set_mav_mode_n_state+0x240>
					break;
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
					break;
			}
			break;
80010faa:	cb 78       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
			}
		
			switch (RC_check)
			{
				case 1:
					break;
80010fac:	c0 f8       	rjmp	80010fca <set_mav_mode_n_state+0x24e>
				case -1:
					centralData->mav_state = MAV_STATE_CRITICAL;
80010fae:	ec f8 00 00 	ld.w	r8,r6[0]
80010fb2:	70 09       	ld.w	r9,r8[0x0]
80010fb4:	30 58       	mov	r8,5
80010fb6:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
80010fba:	c0 88       	rjmp	80010fca <set_mav_mode_n_state+0x24e>
				case -2:
					centralData->mav_state = MAV_STATE_CRITICAL;
80010fbc:	ec f8 00 00 	ld.w	r8,r6[0]
80010fc0:	70 09       	ld.w	r9,r8[0x0]
80010fc2:	30 58       	mov	r8,5
80010fc4:	f3 68 0d 05 	st.b	r9[3333],r8
					break;
			}
			break;
80010fc8:	ca 88       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
80010fca:	ca 78       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_CRITICAL:
			switch(channelSwitches)
80010fcc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80010fd0:	58 18       	cp.w	r8,1
80010fd2:	c1 20       	breq	80010ff6 <set_mav_mode_n_state+0x27a>
80010fd4:	e0 89 00 05 	brgt	80010fde <set_mav_mode_n_state+0x262>
80010fd8:	58 08       	cp.w	r8,0
80010fda:	c0 70       	breq	80010fe8 <set_mav_mode_n_state+0x26c>
80010fdc:	c2 18       	rjmp	8001101e <set_mav_mode_n_state+0x2a2>
80010fde:	58 28       	cp.w	r8,2
80010fe0:	c1 20       	breq	80011004 <set_mav_mode_n_state+0x288>
80010fe2:	58 38       	cp.w	r8,3
80010fe4:	c1 70       	breq	80011012 <set_mav_mode_n_state+0x296>
80010fe6:	c1 c8       	rjmp	8001101e <set_mav_mode_n_state+0x2a2>
			{
				case 0:
					centralData->mav_mode= MAV_MODE_MANUAL_ARMED;
80010fe8:	ec f8 00 00 	ld.w	r8,r6[0]
80010fec:	70 09       	ld.w	r9,r8[0x0]
80010fee:	3c 08       	mov	r8,-64
80010ff0:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80010ff4:	c1 58       	rjmp	8001101e <set_mav_mode_n_state+0x2a2>
				case 1:
					centralData->mav_mode= MAV_MODE_STABILIZE_ARMED;
80010ff6:	ec f8 00 00 	ld.w	r8,r6[0]
80010ffa:	70 09       	ld.w	r9,r8[0x0]
80010ffc:	3d 08       	mov	r8,-48
80010ffe:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80011002:	c0 e8       	rjmp	8001101e <set_mav_mode_n_state+0x2a2>
				case 2:
					centralData->mav_mode = MAV_MODE_GUIDED_ARMED;
80011004:	ec f8 00 00 	ld.w	r8,r6[0]
80011008:	70 09       	ld.w	r9,r8[0x0]
8001100a:	3d 88       	mov	r8,-40
8001100c:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
80011010:	c0 78       	rjmp	8001101e <set_mav_mode_n_state+0x2a2>
				case 3:
					centralData->mav_mode = MAV_MODE_AUTO_ARMED;
80011012:	ec f8 00 00 	ld.w	r8,r6[0]
80011016:	70 09       	ld.w	r9,r8[0x0]
80011018:	3d c8       	mov	r8,-36
8001101a:	f3 68 0d 04 	st.b	r9[3332],r8
					break;
			}
			if (motor_switch == -1)
8001101e:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80011022:	3f f8       	mov	r8,-1
80011024:	f0 09 18 00 	cp.b	r9,r8
80011028:	c1 71       	brne	80011056 <set_mav_mode_n_state+0x2da>
			{
				dbg_print("Switching off motors!\n");
8001102a:	fe cc 02 c6 	sub	r12,pc,710
8001102e:	f0 16 00 01 	mcall	r6[4]
				centralData->controls.run_mode = MOTORS_OFF;
80011032:	ec f8 00 00 	ld.w	r8,r6[0]
80011036:	70 08       	ld.w	r8,r8[0x0]
80011038:	30 09       	mov	r9,0
8001103a:	f1 49 01 70 	st.w	r8[368],r9
				centralData->mav_state = MAV_STATE_STANDBY;
8001103e:	ec f8 00 00 	ld.w	r8,r6[0]
80011042:	70 09       	ld.w	r9,r8[0x0]
80011044:	30 38       	mov	r8,3
80011046:	f3 68 0d 05 	st.b	r9[3333],r8
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8001104a:	ec f8 00 00 	ld.w	r8,r6[0]
8001104e:	70 09       	ld.w	r9,r8[0x0]
80011050:	34 08       	mov	r8,64
80011052:	f3 68 0d 04 	st.b	r9[3332],r8
			}
			
			switch (centralData->mav_mode)
80011056:	ec f8 00 00 	ld.w	r8,r6[0]
8001105a:	70 08       	ld.w	r8,r8[0x0]
8001105c:	f1 38 0d 04 	ld.ub	r8,r8[3332]
80011060:	e0 48 00 d8 	cp.w	r8,216
80011064:	c0 40       	breq	8001106c <set_mav_mode_n_state+0x2f0>
80011066:	e0 48 00 dc 	cp.w	r8,220
8001106a:	c0 31       	brne	80011070 <set_mav_mode_n_state+0x2f4>
			{
				case MAV_MODE_GUIDED_ARMED:
				case MAV_MODE_AUTO_ARMED:
					waypoint_critical_handler();
8001106c:	f0 16 01 e1 	mcall	r6[1924]
					break;
			}
			
			switch (RC_check)
80011070:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80011074:	5c 68       	casts.b	r8
80011076:	5b f8       	cp.w	r8,-1
80011078:	c1 30       	breq	8001109e <set_mav_mode_n_state+0x322>
8001107a:	58 18       	cp.w	r8,1
8001107c:	c0 40       	breq	80011084 <set_mav_mode_n_state+0x308>
8001107e:	5b e8       	cp.w	r8,-2
80011080:	c1 00       	breq	800110a0 <set_mav_mode_n_state+0x324>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011082:	c4 b8       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
			}
			
			switch (RC_check)
			{
				case 1:
					centralData->mav_state = MAV_STATE_ACTIVE;
80011084:	ec f8 00 00 	ld.w	r8,r6[0]
80011088:	70 09       	ld.w	r9,r8[0x0]
8001108a:	30 48       	mov	r8,4
8001108c:	f3 68 0d 05 	st.b	r9[3333],r8
					centralData->critical_init = false;
80011090:	ec f8 00 00 	ld.w	r8,r6[0]
80011094:	70 09       	ld.w	r9,r8[0x0]
80011096:	30 08       	mov	r8,0
80011098:	f3 68 0d 01 	st.b	r9[3329],r8
					break;
8001109c:	c1 08       	rjmp	800110bc <set_mav_mode_n_state+0x340>
				case -1:
					break;
8001109e:	c0 f8       	rjmp	800110bc <set_mav_mode_n_state+0x340>
				case -2:
					if (centralData->critical_landing)
800110a0:	ec f8 00 00 	ld.w	r8,r6[0]
800110a4:	70 08       	ld.w	r8,r8[0x0]
800110a6:	f1 38 0d 00 	ld.ub	r8,r8[3328]
800110aa:	58 08       	cp.w	r8,0
800110ac:	c3 50       	breq	80011116 <set_mav_mode_n_state+0x39a>
					{
						centralData->mav_state = MAV_STATE_EMERGENCY;
800110ae:	ec f8 00 00 	ld.w	r8,r6[0]
800110b2:	70 09       	ld.w	r9,r8[0x0]
800110b4:	30 68       	mov	r8,6
800110b6:	f3 68 0d 05 	st.b	r9[3333],r8
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
800110ba:	c2 f8       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
800110bc:	c2 e8       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
		case MAV_STATE_EMERGENCY:
			if (centralData->position_estimator.localPosition.pos[Z] < 1.0)
800110be:	ec f8 00 00 	ld.w	r8,r6[0]
800110c2:	70 08       	ld.w	r8,r8[0x0]
800110c4:	f0 fa 09 ec 	ld.w	r10,r8[2540]
800110c8:	30 18       	mov	r8,1
800110ca:	fc 19 3f 80 	movh	r9,0x3f80
800110ce:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
800110d2:	e0 8c 00 03 	brvs	800110d8 <set_mav_mode_n_state+0x35c>
800110d6:	c0 25       	brlt	800110da <set_mav_mode_n_state+0x35e>
800110d8:	30 08       	mov	r8,0
800110da:	5c 58       	castu.b	r8
800110dc:	c1 e0       	breq	80011118 <set_mav_mode_n_state+0x39c>
			{
				centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
800110de:	ec f8 00 00 	ld.w	r8,r6[0]
800110e2:	70 09       	ld.w	r9,r8[0x0]
800110e4:	34 08       	mov	r8,64
800110e6:	f3 68 0d 04 	st.b	r9[3332],r8
				centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
800110ea:	ec f8 00 00 	ld.w	r8,r6[0]
800110ee:	70 08       	ld.w	r8,r8[0x0]
800110f0:	30 19       	mov	r9,1
800110f2:	f1 49 01 68 	st.w	r8[360],r9
				switch (RC_check)
800110f6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
800110fa:	5c 68       	casts.b	r8
800110fc:	58 18       	cp.w	r8,1
800110fe:	c0 d1       	brne	80011118 <set_mav_mode_n_state+0x39c>
				{
					case 1:
						centralData->mav_state = MAV_STATE_STANDBY;
80011100:	ec f8 00 00 	ld.w	r8,r6[0]
80011104:	70 09       	ld.w	r9,r8[0x0]
80011106:	30 38       	mov	r8,3
80011108:	f3 68 0d 05 	st.b	r9[3333],r8
8001110c:	c0 68       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
	rc_user_channels(&channelSwitches,&RC_check, &motor_switch);
	
	switch(centralData->mav_state)
	{
		case MAV_STATE_CALIBRATING:
			break;
8001110e:	d7 03       	nop
80011110:	c0 48       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
					case 3:
						dbg_print("Switches not ready, both should be pushed!\n");
						break;
				}
			}
			break;
80011112:	d7 03       	nop
80011114:	c0 28       	rjmp	80011118 <set_mav_mode_n_state+0x39c>
						centralData->mav_state = MAV_STATE_EMERGENCY;
					}
					//centralData->mav_state = MAV_STATE_EMERGENCY;
					break;
			}
			break;
80011116:	d7 03       	nop
	//dbg_print_num(centralData->mav_state,10);
	//dbg_print(", MAV mode :");
	//dbg_print_num(centralData->mav_mode,10);
	//dbg_print("\n");
	
}
80011118:	2f fd       	sub	sp,-4
8001111a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001111e:	00 00       	add	r0,r0
80011120:	80 01       	ld.sh	r1,r0[0x0]
80011122:	0c 0c       	add	r12,r6

80011124 <run_stabilisation>:

task_return_t run_stabilisation() {
80011124:	eb cd 40 e0 	pushm	r5-r7,lr
80011128:	1a 97       	mov	r7,sp
8001112a:	20 cd       	sub	sp,48
8001112c:	fe f6 04 18 	ld.w	r6,pc[1048]
80011130:	1e 26       	rsub	r6,pc
	int i;
	
	if (centralData->simulation_mode==1) {
80011132:	ec f8 00 00 	ld.w	r8,r6[0]
80011136:	70 08       	ld.w	r8,r8[0x0]
80011138:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8001113c:	58 18       	cp.w	r8,1
8001113e:	c2 d1       	brne	80011198 <run_stabilisation+0x74>
		simu_update(&centralData->sim_model, &centralData->servos, &(centralData->imu1), &centralData->position_estimator);
80011140:	ec f8 00 00 	ld.w	r8,r6[0]
80011144:	70 08       	ld.w	r8,r8[0x0]
80011146:	f0 c9 f6 7c 	sub	r9,r8,-2436
8001114a:	ec f8 00 00 	ld.w	r8,r6[0]
8001114e:	70 08       	ld.w	r8,r8[0x0]
80011150:	10 9a       	mov	r10,r8
80011152:	ec f8 00 00 	ld.w	r8,r6[0]
80011156:	70 08       	ld.w	r8,r8[0x0]
80011158:	f0 cb fc cc 	sub	r11,r8,-820
8001115c:	ec f8 00 00 	ld.w	r8,r6[0]
80011160:	70 08       	ld.w	r8,r8[0x0]
80011162:	f0 c8 f8 10 	sub	r8,r8,-2032
80011166:	10 9c       	mov	r12,r8
80011168:	f0 16 01 a3 	mcall	r6[1676]
		
		
		imu_update(&(centralData->imu1), &(centralData->position_estimator), &centralData->pressure, &centralData->GPS_data);
8001116c:	ec f8 00 00 	ld.w	r8,r6[0]
80011170:	70 08       	ld.w	r8,r8[0x0]
80011172:	f0 c9 f8 b0 	sub	r9,r8,-1872
80011176:	ec f8 00 00 	ld.w	r8,r6[0]
8001117a:	70 08       	ld.w	r8,r8[0x0]
8001117c:	f0 ca f2 f4 	sub	r10,r8,-3340
80011180:	ec f8 00 00 	ld.w	r8,r6[0]
80011184:	70 08       	ld.w	r8,r8[0x0]
80011186:	f0 cb f6 7c 	sub	r11,r8,-2436
8001118a:	ec f8 00 00 	ld.w	r8,r6[0]
8001118e:	70 08       	ld.w	r8,r8[0x0]
80011190:	10 9c       	mov	r12,r8
80011192:	f0 16 00 9b 	mcall	r6[620]
80011196:	c1 c8       	rjmp	800111ce <run_stabilisation+0xaa>
		
		//for (i=0; i<3; i++) centralData->position_estimator.vel[i]=centralData->sim_model.vel[i];
		//centralData->position_estimator.localPosition=centralData->sim_model.localPosition;
	} else {
		imu_get_raw_data(&(centralData->imu1));
80011198:	ec f8 00 00 	ld.w	r8,r6[0]
8001119c:	70 08       	ld.w	r8,r8[0x0]
8001119e:	10 9c       	mov	r12,r8
800111a0:	f0 16 00 9a 	mcall	r6[616]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
800111a4:	ec f8 00 00 	ld.w	r8,r6[0]
800111a8:	70 08       	ld.w	r8,r8[0x0]
800111aa:	f0 c9 f8 b0 	sub	r9,r8,-1872
800111ae:	ec f8 00 00 	ld.w	r8,r6[0]
800111b2:	70 08       	ld.w	r8,r8[0x0]
800111b4:	f0 ca f2 f4 	sub	r10,r8,-3340
800111b8:	ec f8 00 00 	ld.w	r8,r6[0]
800111bc:	70 08       	ld.w	r8,r8[0x0]
800111be:	f0 cb f6 7c 	sub	r11,r8,-2436
800111c2:	ec f8 00 00 	ld.w	r8,r6[0]
800111c6:	70 08       	ld.w	r8,r8[0x0]
800111c8:	10 9c       	mov	r12,r8
800111ca:	f0 16 00 9b 	mcall	r6[620]
	}

	switch(centralData->mav_mode)
800111ce:	ec f8 00 00 	ld.w	r8,r6[0]
800111d2:	70 08       	ld.w	r8,r8[0x0]
800111d4:	f1 38 0d 04 	ld.ub	r8,r8[3332]
800111d8:	e0 48 00 5c 	cp.w	r8,92
800111dc:	e0 80 01 73 	breq	800114c2 <run_stabilisation+0x39e>
800111e0:	e0 89 00 17 	brgt	8001120e <run_stabilisation+0xea>
800111e4:	e0 48 00 40 	cp.w	r8,64
800111e8:	e0 80 01 6d 	breq	800114c2 <run_stabilisation+0x39e>
800111ec:	e0 89 00 07 	brgt	800111fa <run_stabilisation+0xd6>
800111f0:	58 08       	cp.w	r8,0
800111f2:	e0 80 01 68 	breq	800114c2 <run_stabilisation+0x39e>
800111f6:	e0 8f 01 95 	bral	80011520 <run_stabilisation+0x3fc>
800111fa:	e0 48 00 50 	cp.w	r8,80
800111fe:	e0 80 01 62 	breq	800114c2 <run_stabilisation+0x39e>
80011202:	e0 48 00 58 	cp.w	r8,88
80011206:	e0 80 01 5e 	breq	800114c2 <run_stabilisation+0x39e>
8001120a:	e0 8f 01 8b 	bral	80011520 <run_stabilisation+0x3fc>
8001120e:	e0 48 00 d0 	cp.w	r8,208
80011212:	c5 a0       	breq	800112c6 <run_stabilisation+0x1a2>
80011214:	e0 89 00 07 	brgt	80011222 <run_stabilisation+0xfe>
80011218:	e0 48 00 c0 	cp.w	r8,192
8001121c:	c0 d0       	breq	80011236 <run_stabilisation+0x112>
8001121e:	e0 8f 01 81 	bral	80011520 <run_stabilisation+0x3fc>
80011222:	e0 48 00 d8 	cp.w	r8,216
80011226:	e0 80 00 c2 	breq	800113aa <run_stabilisation+0x286>
8001122a:	e0 48 00 dc 	cp.w	r8,220
8001122e:	e0 80 01 04 	breq	80011436 <run_stabilisation+0x312>
80011232:	e0 8f 01 77 	bral	80011520 <run_stabilisation+0x3fc>
	{
		
		case MAV_MODE_MANUAL_ARMED:
			centralData->controls = get_command_from_remote();
80011236:	ec f8 00 00 	ld.w	r8,r6[0]
8001123a:	70 05       	ld.w	r5,r8[0x0]
8001123c:	ee c8 00 30 	sub	r8,r7,48
80011240:	10 9c       	mov	r12,r8
80011242:	fe b0 fb 97 	rcall	80010970 <get_command_from_remote>
80011246:	ea c8 fe b8 	sub	r8,r5,-328
8001124a:	ee c9 00 30 	sub	r9,r7,48
8001124e:	f0 ca 00 00 	sub	r10,r8,0
80011252:	f2 cb 00 00 	sub	r11,r9,0
80011256:	76 0c       	ld.w	r12,r11[0x0]
80011258:	95 0c       	st.w	r10[0x0],r12
8001125a:	76 1c       	ld.w	r12,r11[0x4]
8001125c:	95 1c       	st.w	r10[0x4],r12
8001125e:	76 2c       	ld.w	r12,r11[0x8]
80011260:	95 2c       	st.w	r10[0x8],r12
80011262:	76 3b       	ld.w	r11,r11[0xc]
80011264:	95 3b       	st.w	r10[0xc],r11
80011266:	f0 ca ff f0 	sub	r10,r8,-16
8001126a:	f2 cb ff f0 	sub	r11,r9,-16
8001126e:	76 0c       	ld.w	r12,r11[0x0]
80011270:	95 0c       	st.w	r10[0x0],r12
80011272:	76 1c       	ld.w	r12,r11[0x4]
80011274:	95 1c       	st.w	r10[0x4],r12
80011276:	76 2c       	ld.w	r12,r11[0x8]
80011278:	95 2c       	st.w	r10[0x8],r12
8001127a:	76 3b       	ld.w	r11,r11[0xc]
8001127c:	95 3b       	st.w	r10[0xc],r11
8001127e:	f2 ea 00 20 	ld.d	r10,r9[32]
80011282:	f0 eb 00 20 	st.d	r8[32],r10
80011286:	72 a9       	ld.w	r9,r9[0x28]
80011288:	91 a9       	st.w	r8[0x28],r9
			
			centralData->controls.yaw_mode=YAW_RELATIVE;
8001128a:	ec f8 00 00 	ld.w	r8,r6[0]
8001128e:	70 08       	ld.w	r8,r8[0x0]
80011290:	30 09       	mov	r9,0
80011292:	f1 49 01 6c 	st.w	r8[364],r9
			centralData->controls.control_mode = ATTITUDE_COMMAND_MODE;
80011296:	ec f8 00 00 	ld.w	r8,r6[0]
8001129a:	70 08       	ld.w	r8,r8[0x0]
8001129c:	30 19       	mov	r9,1
8001129e:	f1 49 01 68 	st.w	r8[360],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
800112a2:	ec f8 00 00 	ld.w	r8,r6[0]
800112a6:	70 08       	ld.w	r8,r8[0x0]
800112a8:	f0 ca fe b8 	sub	r10,r8,-328
800112ac:	ec f8 00 00 	ld.w	r8,r6[0]
800112b0:	70 08       	ld.w	r8,r8[0x0]
800112b2:	f0 c9 f6 7c 	sub	r9,r8,-2436
800112b6:	ec f8 00 00 	ld.w	r8,r6[0]
800112ba:	70 08       	ld.w	r8,r8[0x0]
800112bc:	12 9b       	mov	r11,r9
800112be:	10 9c       	mov	r12,r8
800112c0:	f0 16 00 9c 	mcall	r6[624]
			break;
800112c4:	c2 e9       	rjmp	80011520 <run_stabilisation+0x3fc>
		case MAV_MODE_STABILIZE_ARMED:
			centralData->controls = get_command_from_remote();
800112c6:	ec f8 00 00 	ld.w	r8,r6[0]
800112ca:	70 05       	ld.w	r5,r8[0x0]
800112cc:	ee c8 00 30 	sub	r8,r7,48
800112d0:	10 9c       	mov	r12,r8
800112d2:	fe b0 fb 4f 	rcall	80010970 <get_command_from_remote>
800112d6:	ea c8 fe b8 	sub	r8,r5,-328
800112da:	ee c9 00 30 	sub	r9,r7,48
800112de:	f0 ca 00 00 	sub	r10,r8,0
800112e2:	f2 cb 00 00 	sub	r11,r9,0
800112e6:	76 0c       	ld.w	r12,r11[0x0]
800112e8:	95 0c       	st.w	r10[0x0],r12
800112ea:	76 1c       	ld.w	r12,r11[0x4]
800112ec:	95 1c       	st.w	r10[0x4],r12
800112ee:	76 2c       	ld.w	r12,r11[0x8]
800112f0:	95 2c       	st.w	r10[0x8],r12
800112f2:	76 3b       	ld.w	r11,r11[0xc]
800112f4:	95 3b       	st.w	r10[0xc],r11
800112f6:	f0 ca ff f0 	sub	r10,r8,-16
800112fa:	f2 cb ff f0 	sub	r11,r9,-16
800112fe:	76 0c       	ld.w	r12,r11[0x0]
80011300:	95 0c       	st.w	r10[0x0],r12
80011302:	76 1c       	ld.w	r12,r11[0x4]
80011304:	95 1c       	st.w	r10[0x4],r12
80011306:	76 2c       	ld.w	r12,r11[0x8]
80011308:	95 2c       	st.w	r10[0x8],r12
8001130a:	76 3b       	ld.w	r11,r11[0xc]
8001130c:	95 3b       	st.w	r10[0xc],r11
8001130e:	f2 ea 00 20 	ld.d	r10,r9[32]
80011312:	f0 eb 00 20 	st.d	r8[32],r10
80011316:	72 a9       	ld.w	r9,r9[0x28]
80011318:	91 a9       	st.w	r8[0x28],r9
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
8001131a:	ec f8 00 00 	ld.w	r8,r6[0]
8001131e:	70 08       	ld.w	r8,r8[0x0]
80011320:	30 09       	mov	r9,0
80011322:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode=YAW_RELATIVE;
80011326:	ec f8 00 00 	ld.w	r8,r6[0]
8001132a:	70 08       	ld.w	r8,r8[0x0]
8001132c:	30 09       	mov	r9,0
8001132e:	f1 49 01 6c 	st.w	r8[364],r9
			
			centralData->controls.tvel[X]=-10.0*centralData->controls.rpy[PITCH];
80011332:	ec f8 00 00 	ld.w	r8,r6[0]
80011336:	70 08       	ld.w	r8,r8[0x0]
80011338:	ec f9 00 00 	ld.w	r9,r6[0]
8001133c:	72 09       	ld.w	r9,r9[0x0]
8001133e:	f2 fa 01 4c 	ld.w	r10,r9[332]
80011342:	fc 19 c1 20 	movh	r9,0xc120
80011346:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001134a:	f1 49 01 58 	st.w	r8[344],r9
			centralData->controls.tvel[Y]= 10.0*centralData->controls.rpy[ROLL];
8001134e:	ec f8 00 00 	ld.w	r8,r6[0]
80011352:	70 08       	ld.w	r8,r8[0x0]
80011354:	ec f9 00 00 	ld.w	r9,r6[0]
80011358:	72 09       	ld.w	r9,r9[0x0]
8001135a:	f2 fa 01 48 	ld.w	r10,r9[328]
8001135e:	fc 19 41 20 	movh	r9,0x4120
80011362:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011366:	f1 49 01 5c 	st.w	r8[348],r9
			centralData->controls.tvel[Z]=- 1.5*centralData->controls.thrust;
8001136a:	ec f8 00 00 	ld.w	r8,r6[0]
8001136e:	70 08       	ld.w	r8,r8[0x0]
80011370:	ec f9 00 00 	ld.w	r9,r6[0]
80011374:	72 09       	ld.w	r9,r9[0x0]
80011376:	f2 fa 01 54 	ld.w	r10,r9[340]
8001137a:	fc 19 bf c0 	movh	r9,0xbfc0
8001137e:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
80011382:	f1 49 01 60 	st.w	r8[352],r9
			
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011386:	ec f8 00 00 	ld.w	r8,r6[0]
8001138a:	70 08       	ld.w	r8,r8[0x0]
8001138c:	f0 ca fe b8 	sub	r10,r8,-328
80011390:	ec f8 00 00 	ld.w	r8,r6[0]
80011394:	70 08       	ld.w	r8,r8[0x0]
80011396:	f0 c9 f6 7c 	sub	r9,r8,-2436
8001139a:	ec f8 00 00 	ld.w	r8,r6[0]
8001139e:	70 08       	ld.w	r8,r8[0x0]
800113a0:	12 9b       	mov	r11,r9
800113a2:	10 9c       	mov	r12,r8
800113a4:	f0 16 00 9c 	mcall	r6[624]
			
			break;
800113a8:	cb c8       	rjmp	80011520 <run_stabilisation+0x3fc>
		case MAV_MODE_GUIDED_ARMED:
			centralData->controls = centralData->controls_nav;
800113aa:	ec f8 00 00 	ld.w	r8,r6[0]
800113ae:	70 08       	ld.w	r8,r8[0x0]
800113b0:	ec f9 00 00 	ld.w	r9,r6[0]
800113b4:	72 09       	ld.w	r9,r9[0x0]
800113b6:	f0 c8 fe b8 	sub	r8,r8,-328
800113ba:	f2 c9 fe 8c 	sub	r9,r9,-372
800113be:	f0 ca 00 00 	sub	r10,r8,0
800113c2:	f2 cb 00 00 	sub	r11,r9,0
800113c6:	76 0c       	ld.w	r12,r11[0x0]
800113c8:	95 0c       	st.w	r10[0x0],r12
800113ca:	76 1c       	ld.w	r12,r11[0x4]
800113cc:	95 1c       	st.w	r10[0x4],r12
800113ce:	76 2c       	ld.w	r12,r11[0x8]
800113d0:	95 2c       	st.w	r10[0x8],r12
800113d2:	76 3b       	ld.w	r11,r11[0xc]
800113d4:	95 3b       	st.w	r10[0xc],r11
800113d6:	f0 ca ff f0 	sub	r10,r8,-16
800113da:	f2 cb ff f0 	sub	r11,r9,-16
800113de:	76 0c       	ld.w	r12,r11[0x0]
800113e0:	95 0c       	st.w	r10[0x0],r12
800113e2:	76 1c       	ld.w	r12,r11[0x4]
800113e4:	95 1c       	st.w	r10[0x4],r12
800113e6:	76 2c       	ld.w	r12,r11[0x8]
800113e8:	95 2c       	st.w	r10[0x8],r12
800113ea:	76 3b       	ld.w	r11,r11[0xc]
800113ec:	95 3b       	st.w	r10[0xc],r11
800113ee:	f2 ea 00 20 	ld.d	r10,r9[32]
800113f2:	f0 eb 00 20 	st.d	r8[32],r10
800113f6:	72 a9       	ld.w	r9,r9[0x28]
800113f8:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;
800113fa:	ec f8 00 00 	ld.w	r8,r6[0]
800113fe:	70 08       	ld.w	r8,r8[0x0]
80011400:	30 09       	mov	r9,0
80011402:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_ABSOLUTE;
80011406:	ec f8 00 00 	ld.w	r8,r6[0]
8001140a:	70 08       	ld.w	r8,r8[0x0]
8001140c:	30 19       	mov	r9,1
8001140e:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
80011412:	ec f8 00 00 	ld.w	r8,r6[0]
80011416:	70 08       	ld.w	r8,r8[0x0]
80011418:	f0 ca fe b8 	sub	r10,r8,-328
8001141c:	ec f8 00 00 	ld.w	r8,r6[0]
80011420:	70 08       	ld.w	r8,r8[0x0]
80011422:	f0 c9 f6 7c 	sub	r9,r8,-2436
80011426:	ec f8 00 00 	ld.w	r8,r6[0]
8001142a:	70 08       	ld.w	r8,r8[0x0]
8001142c:	12 9b       	mov	r11,r9
8001142e:	10 9c       	mov	r12,r8
80011430:	f0 16 00 9c 	mcall	r6[624]
			break;
80011434:	c7 68       	rjmp	80011520 <run_stabilisation+0x3fc>
		case MAV_MODE_AUTO_ARMED:
			centralData->controls = centralData->controls_nav;
80011436:	ec f8 00 00 	ld.w	r8,r6[0]
8001143a:	70 08       	ld.w	r8,r8[0x0]
8001143c:	ec f9 00 00 	ld.w	r9,r6[0]
80011440:	72 09       	ld.w	r9,r9[0x0]
80011442:	f0 c8 fe b8 	sub	r8,r8,-328
80011446:	f2 c9 fe 8c 	sub	r9,r9,-372
8001144a:	f0 ca 00 00 	sub	r10,r8,0
8001144e:	f2 cb 00 00 	sub	r11,r9,0
80011452:	76 0c       	ld.w	r12,r11[0x0]
80011454:	95 0c       	st.w	r10[0x0],r12
80011456:	76 1c       	ld.w	r12,r11[0x4]
80011458:	95 1c       	st.w	r10[0x4],r12
8001145a:	76 2c       	ld.w	r12,r11[0x8]
8001145c:	95 2c       	st.w	r10[0x8],r12
8001145e:	76 3b       	ld.w	r11,r11[0xc]
80011460:	95 3b       	st.w	r10[0xc],r11
80011462:	f0 ca ff f0 	sub	r10,r8,-16
80011466:	f2 cb ff f0 	sub	r11,r9,-16
8001146a:	76 0c       	ld.w	r12,r11[0x0]
8001146c:	95 0c       	st.w	r10[0x0],r12
8001146e:	76 1c       	ld.w	r12,r11[0x4]
80011470:	95 1c       	st.w	r10[0x4],r12
80011472:	76 2c       	ld.w	r12,r11[0x8]
80011474:	95 2c       	st.w	r10[0x8],r12
80011476:	76 3b       	ld.w	r11,r11[0xc]
80011478:	95 3b       	st.w	r10[0xc],r11
8001147a:	f2 ea 00 20 	ld.d	r10,r9[32]
8001147e:	f0 eb 00 20 	st.d	r8[32],r10
80011482:	72 a9       	ld.w	r9,r9[0x28]
80011484:	91 a9       	st.w	r8[0x28],r9
			//centralData->controls.thrust = f_min(get_thrust_from_remote()*100000.0,centralData->controls_nav.thrust*100000.0)/100000.0;
			//centralData->controls.thrust = get_thrust_from_remote();
			
			centralData->controls.control_mode = VELOCITY_COMMAND_MODE;	
80011486:	ec f8 00 00 	ld.w	r8,r6[0]
8001148a:	70 08       	ld.w	r8,r8[0x0]
8001148c:	30 09       	mov	r9,0
8001148e:	f1 49 01 68 	st.w	r8[360],r9
			centralData->controls.yaw_mode = YAW_COORDINATED;
80011492:	ec f8 00 00 	ld.w	r8,r6[0]
80011496:	70 08       	ld.w	r8,r8[0x0]
80011498:	30 29       	mov	r9,2
8001149a:	f1 49 01 6c 	st.w	r8[364],r9
			cascade_stabilise_copter(&(centralData->imu1), &centralData->position_estimator, &(centralData->controls));
8001149e:	ec f8 00 00 	ld.w	r8,r6[0]
800114a2:	70 08       	ld.w	r8,r8[0x0]
800114a4:	f0 ca fe b8 	sub	r10,r8,-328
800114a8:	ec f8 00 00 	ld.w	r8,r6[0]
800114ac:	70 08       	ld.w	r8,r8[0x0]
800114ae:	f0 c9 f6 7c 	sub	r9,r8,-2436
800114b2:	ec f8 00 00 	ld.w	r8,r6[0]
800114b6:	70 08       	ld.w	r8,r8[0x0]
800114b8:	12 9b       	mov	r11,r9
800114ba:	10 9c       	mov	r12,r8
800114bc:	f0 16 00 9c 	mcall	r6[624]
			break;
800114c0:	c3 08       	rjmp	80011520 <run_stabilisation+0x3fc>
		case MAV_MODE_PREFLIGHT:
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
800114c2:	ec f8 00 00 	ld.w	r8,r6[0]
800114c6:	70 08       	ld.w	r8,r8[0x0]
800114c8:	30 09       	mov	r9,0
800114ca:	f1 49 01 70 	st.w	r8[368],r9
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
800114ce:	30 08       	mov	r8,0
800114d0:	ef 48 ff fc 	st.w	r7[-4],r8
800114d4:	c2 18       	rjmp	80011516 <run_stabilisation+0x3f2>
				centralData->servos[i]=servo_failsafe[i];
800114d6:	ec f8 00 00 	ld.w	r8,r6[0]
800114da:	70 0a       	ld.w	r10,r8[0x0]
800114dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800114e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800114e4:	a5 68       	lsl	r8,0x4
800114e6:	f4 08 00 08 	add	r8,r10,r8
800114ea:	f0 c8 fc cc 	sub	r8,r8,-820
800114ee:	ec fa 09 20 	ld.w	r10,r6[2336]
800114f2:	a5 69       	lsl	r9,0x4
800114f4:	f4 09 00 09 	add	r9,r10,r9
800114f8:	20 08       	sub	r8,0
800114fa:	20 09       	sub	r9,0
800114fc:	72 0a       	ld.w	r10,r9[0x0]
800114fe:	91 0a       	st.w	r8[0x0],r10
80011500:	72 1a       	ld.w	r10,r9[0x4]
80011502:	91 1a       	st.w	r8[0x4],r10
80011504:	72 2a       	ld.w	r10,r9[0x8]
80011506:	91 2a       	st.w	r8[0x8],r10
80011508:	72 39       	ld.w	r9,r9[0xc]
8001150a:	91 39       	st.w	r8[0xc],r9
		case MAV_MODE_MANUAL_DISARMED:
		case MAV_MODE_STABILIZE_DISARMED:
		case MAV_MODE_GUIDED_DISARMED:
		case MAV_MODE_AUTO_DISARMED:
			centralData->controls.run_mode = MOTORS_OFF;
			for (i=0; i<NUMBER_OF_SERVO_OUTPUTS; i++) {
8001150c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011510:	2f f8       	sub	r8,-1
80011512:	ef 48 ff fc 	st.w	r7[-4],r8
80011516:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001151a:	58 78       	cp.w	r8,7
8001151c:	fe 9a ff dd 	brle	800114d6 <run_stabilisation+0x3b2>
			break;
		
	}
	
	// !!! -- for safety, this should remain the only place where values are written to the servo outputs! --- !!!
	if (centralData->simulation_mode!=1) {
80011520:	ec f8 00 00 	ld.w	r8,r6[0]
80011524:	70 08       	ld.w	r8,r8[0x0]
80011526:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8001152a:	58 18       	cp.w	r8,1
8001152c:	c0 90       	breq	8001153e <run_stabilisation+0x41a>
		set_servos(&(centralData->servos));
8001152e:	ec f8 00 00 	ld.w	r8,r6[0]
80011532:	70 08       	ld.w	r8,r8[0x0]
80011534:	f0 c8 fc cc 	sub	r8,r8,-820
80011538:	10 9c       	mov	r12,r8
8001153a:	f0 16 00 af 	mcall	r6[700]
	}
		

}
8001153e:	2f 4d       	sub	sp,-48
80011540:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80011544:	80 01       	ld.sh	r1,r0[0x0]
80011546:	0f b4       	ld.ub	r4,r7[0x3]

80011548 <gps_task>:

task_return_t gps_task() {
80011548:	eb cd 40 c0 	pushm	r6-r7,lr
8001154c:	1a 97       	mov	r7,sp
8001154e:	20 1d       	sub	sp,4
80011550:	49 16       	lddpc	r6,80011594 <gps_task+0x4c>
80011552:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_millis();	
80011554:	f0 16 00 0f 	mcall	r6[60]
80011558:	18 98       	mov	r8,r12
8001155a:	ef 48 ff fc 	st.w	r7[-4],r8
	if (centralData->simulation_mode==1) {
8001155e:	ec f8 00 00 	ld.w	r8,r6[0]
80011562:	70 08       	ld.w	r8,r8[0x0]
80011564:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80011568:	58 18       	cp.w	r8,1
8001156a:	c1 01       	brne	8001158a <gps_task+0x42>
		simulate_gps(&centralData->sim_model, &centralData->GPS_data);
8001156c:	ec f8 00 00 	ld.w	r8,r6[0]
80011570:	70 08       	ld.w	r8,r8[0x0]
80011572:	f0 c9 f8 b0 	sub	r9,r8,-1872
80011576:	ec f8 00 00 	ld.w	r8,r6[0]
8001157a:	70 08       	ld.w	r8,r8[0x0]
8001157c:	f0 c8 f8 10 	sub	r8,r8,-2032
80011580:	12 9b       	mov	r11,r9
80011582:	10 9c       	mov	r12,r8
80011584:	f0 16 01 50 	mcall	r6[1344]
80011588:	c0 38       	rjmp	8001158e <gps_task+0x46>
	} else {
		gps_update();
8001158a:	f0 16 02 06 	mcall	r6[2072]
	}
}
8001158e:	2f fd       	sub	sp,-4
80011590:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011594:	80 01       	ld.sh	r1,r0[0x0]
80011596:	13 d6       	ld.ub	r6,r9[0x5]

80011598 <run_estimator>:

task_return_t run_estimator()
{
80011598:	eb cd 40 c0 	pushm	r6-r7,lr
8001159c:	1a 97       	mov	r7,sp
8001159e:	48 46       	lddpc	r6,800115ac <run_estimator+0x14>
800115a0:	1e 26       	rsub	r6,pc
	estimator_loop();
800115a2:	f0 16 01 6d 	mcall	r6[1460]
}
800115a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800115aa:	00 00       	add	r0,r0
800115ac:	80 01       	ld.sh	r1,r0[0x0]
800115ae:	14 24       	rsub	r4,r10

800115b0 <run_navigation_task>:

task_return_t run_navigation_task()
{
800115b0:	eb cd 40 c0 	pushm	r6-r7,lr
800115b4:	1a 97       	mov	r7,sp
800115b6:	20 1d       	sub	sp,4
800115b8:	fe f6 02 20 	ld.w	r6,pc[544]
800115bc:	1e 26       	rsub	r6,pc
	int8_t i;
	
		switch (centralData->mav_state)
800115be:	ec f8 00 00 	ld.w	r8,r6[0]
800115c2:	70 08       	ld.w	r8,r8[0x0]
800115c4:	f1 38 0d 05 	ld.ub	r8,r8[3333]
800115c8:	58 48       	cp.w	r8,4
800115ca:	c0 50       	breq	800115d4 <run_navigation_task+0x24>
800115cc:	58 58       	cp.w	r8,5
800115ce:	e0 80 00 b5 	breq	80011738 <run_navigation_task+0x188>
800115d2:	cf f8       	rjmp	800117d0 <run_navigation_task+0x220>
		{
			case MAV_STATE_ACTIVE:
				switch (centralData->mav_mode)
800115d4:	ec f8 00 00 	ld.w	r8,r6[0]
800115d8:	70 08       	ld.w	r8,r8[0x0]
800115da:	f1 38 0d 04 	ld.ub	r8,r8[3332]
800115de:	e0 48 00 d8 	cp.w	r8,216
800115e2:	c7 40       	breq	800116ca <run_navigation_task+0x11a>
800115e4:	e0 48 00 dc 	cp.w	r8,220
800115e8:	e0 81 00 f1 	brne	800117ca <run_navigation_task+0x21a>
				{
					case MAV_MODE_AUTO_ARMED:
						if (centralData->waypoint_set)
800115ec:	ec f8 00 00 	ld.w	r8,r6[0]
800115f0:	70 08       	ld.w	r8,r8[0x0]
800115f2:	f1 38 0c fc 	ld.ub	r8,r8[3324]
800115f6:	58 08       	cp.w	r8,0
800115f8:	c3 10       	breq	8001165a <run_navigation_task+0xaa>
						{
							run_navigation(centralData->waypoint_coordinates);
800115fa:	ec f8 00 00 	ld.w	r8,r6[0]
800115fe:	70 08       	ld.w	r8,r8[0x0]
80011600:	20 cd       	sub	sp,48
80011602:	1a 99       	mov	r9,sp
80011604:	12 9b       	mov	r11,r9
80011606:	f0 ca f3 98 	sub	r10,r8,-3176
8001160a:	f6 c8 00 00 	sub	r8,r11,0
8001160e:	f4 c9 00 00 	sub	r9,r10,0
80011612:	72 0c       	ld.w	r12,r9[0x0]
80011614:	91 0c       	st.w	r8[0x0],r12
80011616:	72 1c       	ld.w	r12,r9[0x4]
80011618:	91 1c       	st.w	r8[0x4],r12
8001161a:	72 2c       	ld.w	r12,r9[0x8]
8001161c:	91 2c       	st.w	r8[0x8],r12
8001161e:	72 39       	ld.w	r9,r9[0xc]
80011620:	91 39       	st.w	r8[0xc],r9
80011622:	f6 c8 ff f0 	sub	r8,r11,-16
80011626:	f4 c9 ff f0 	sub	r9,r10,-16
8001162a:	72 0c       	ld.w	r12,r9[0x0]
8001162c:	91 0c       	st.w	r8[0x0],r12
8001162e:	72 1c       	ld.w	r12,r9[0x4]
80011630:	91 1c       	st.w	r8[0x4],r12
80011632:	72 2c       	ld.w	r12,r9[0x8]
80011634:	91 2c       	st.w	r8[0x8],r12
80011636:	72 39       	ld.w	r9,r9[0xc]
80011638:	91 39       	st.w	r8[0xc],r9
8001163a:	f6 c8 ff e0 	sub	r8,r11,-32
8001163e:	f4 c9 ff e0 	sub	r9,r10,-32
80011642:	72 0a       	ld.w	r10,r9[0x0]
80011644:	91 0a       	st.w	r8[0x0],r10
80011646:	72 1a       	ld.w	r10,r9[0x4]
80011648:	91 1a       	st.w	r8[0x4],r10
8001164a:	72 2a       	ld.w	r10,r9[0x8]
8001164c:	91 2a       	st.w	r8[0x8],r10
8001164e:	72 39       	ld.w	r9,r9[0xc]
80011650:	91 39       	st.w	r8[0xc],r9
80011652:	f0 16 00 8d 	mcall	r6[564]
80011656:	2f 4d       	sub	sp,-48
80011658:	c3 78       	rjmp	800116c6 <run_navigation_task+0x116>
					
							//computeNewVelocity(centralData->controls_nav.tvel,newVelocity);
						}else if(centralData->waypoint_hold_init)
8001165a:	ec f8 00 00 	ld.w	r8,r6[0]
8001165e:	70 08       	ld.w	r8,r8[0x0]
80011660:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80011664:	58 08       	cp.w	r8,0
80011666:	c3 00       	breq	800116c6 <run_navigation_task+0x116>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
80011668:	ec f8 00 00 	ld.w	r8,r6[0]
8001166c:	70 08       	ld.w	r8,r8[0x0]
8001166e:	20 cd       	sub	sp,48
80011670:	1a 99       	mov	r9,sp
80011672:	12 9b       	mov	r11,r9
80011674:	f0 ca f3 68 	sub	r10,r8,-3224
80011678:	f6 c8 00 00 	sub	r8,r11,0
8001167c:	f4 c9 00 00 	sub	r9,r10,0
80011680:	72 0c       	ld.w	r12,r9[0x0]
80011682:	91 0c       	st.w	r8[0x0],r12
80011684:	72 1c       	ld.w	r12,r9[0x4]
80011686:	91 1c       	st.w	r8[0x4],r12
80011688:	72 2c       	ld.w	r12,r9[0x8]
8001168a:	91 2c       	st.w	r8[0x8],r12
8001168c:	72 39       	ld.w	r9,r9[0xc]
8001168e:	91 39       	st.w	r8[0xc],r9
80011690:	f6 c8 ff f0 	sub	r8,r11,-16
80011694:	f4 c9 ff f0 	sub	r9,r10,-16
80011698:	72 0c       	ld.w	r12,r9[0x0]
8001169a:	91 0c       	st.w	r8[0x0],r12
8001169c:	72 1c       	ld.w	r12,r9[0x4]
8001169e:	91 1c       	st.w	r8[0x4],r12
800116a0:	72 2c       	ld.w	r12,r9[0x8]
800116a2:	91 2c       	st.w	r8[0x8],r12
800116a4:	72 39       	ld.w	r9,r9[0xc]
800116a6:	91 39       	st.w	r8[0xc],r9
800116a8:	f6 c8 ff e0 	sub	r8,r11,-32
800116ac:	f4 c9 ff e0 	sub	r9,r10,-32
800116b0:	72 0a       	ld.w	r10,r9[0x0]
800116b2:	91 0a       	st.w	r8[0x0],r10
800116b4:	72 1a       	ld.w	r10,r9[0x4]
800116b6:	91 1a       	st.w	r8[0x4],r10
800116b8:	72 2a       	ld.w	r10,r9[0x8]
800116ba:	91 2a       	st.w	r8[0x8],r10
800116bc:	72 39       	ld.w	r9,r9[0xc]
800116be:	91 39       	st.w	r8[0xc],r9
800116c0:	f0 16 00 8d 	mcall	r6[564]
800116c4:	2f 4d       	sub	sp,-48
						}
						break;
800116c6:	d7 03       	nop
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800116c8:	c8 48       	rjmp	800117d0 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
					case MAV_MODE_GUIDED_ARMED:
						if(centralData->waypoint_hold_init)
800116ca:	ec f8 00 00 	ld.w	r8,r6[0]
800116ce:	70 08       	ld.w	r8,r8[0x0]
800116d0:	f1 38 0c ff 	ld.ub	r8,r8[3327]
800116d4:	58 08       	cp.w	r8,0
800116d6:	c7 c0       	breq	800117ce <run_navigation_task+0x21e>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
800116d8:	ec f8 00 00 	ld.w	r8,r6[0]
800116dc:	70 08       	ld.w	r8,r8[0x0]
800116de:	20 cd       	sub	sp,48
800116e0:	1a 99       	mov	r9,sp
800116e2:	12 9b       	mov	r11,r9
800116e4:	f0 ca f3 68 	sub	r10,r8,-3224
800116e8:	f6 c8 00 00 	sub	r8,r11,0
800116ec:	f4 c9 00 00 	sub	r9,r10,0
800116f0:	72 0c       	ld.w	r12,r9[0x0]
800116f2:	91 0c       	st.w	r8[0x0],r12
800116f4:	72 1c       	ld.w	r12,r9[0x4]
800116f6:	91 1c       	st.w	r8[0x4],r12
800116f8:	72 2c       	ld.w	r12,r9[0x8]
800116fa:	91 2c       	st.w	r8[0x8],r12
800116fc:	72 39       	ld.w	r9,r9[0xc]
800116fe:	91 39       	st.w	r8[0xc],r9
80011700:	f6 c8 ff f0 	sub	r8,r11,-16
80011704:	f4 c9 ff f0 	sub	r9,r10,-16
80011708:	72 0c       	ld.w	r12,r9[0x0]
8001170a:	91 0c       	st.w	r8[0x0],r12
8001170c:	72 1c       	ld.w	r12,r9[0x4]
8001170e:	91 1c       	st.w	r8[0x4],r12
80011710:	72 2c       	ld.w	r12,r9[0x8]
80011712:	91 2c       	st.w	r8[0x8],r12
80011714:	72 39       	ld.w	r9,r9[0xc]
80011716:	91 39       	st.w	r8[0xc],r9
80011718:	f6 c8 ff e0 	sub	r8,r11,-32
8001171c:	f4 c9 ff e0 	sub	r9,r10,-32
80011720:	72 0a       	ld.w	r10,r9[0x0]
80011722:	91 0a       	st.w	r8[0x0],r10
80011724:	72 1a       	ld.w	r10,r9[0x4]
80011726:	91 1a       	st.w	r8[0x4],r10
80011728:	72 2a       	ld.w	r10,r9[0x8]
8001172a:	91 2a       	st.w	r8[0x8],r10
8001172c:	72 39       	ld.w	r9,r9[0xc]
8001172e:	91 39       	st.w	r8[0xc],r9
80011730:	f0 16 00 8d 	mcall	r6[564]
80011734:	2f 4d       	sub	sp,-48
						}
						break;
				}
				break;
80011736:	c4 d8       	rjmp	800117d0 <run_navigation_task+0x220>
			case MAV_STATE_CRITICAL:
				if ((centralData->mav_mode == MAV_MODE_GUIDED_ARMED)||(centralData->mav_mode == MAV_MODE_AUTO_ARMED))
80011738:	ec f8 00 00 	ld.w	r8,r6[0]
8001173c:	70 08       	ld.w	r8,r8[0x0]
8001173e:	f1 39 0d 04 	ld.ub	r9,r8[3332]
80011742:	3d 88       	mov	r8,-40
80011744:	f0 09 18 00 	cp.b	r9,r8
80011748:	c0 a0       	breq	8001175c <run_navigation_task+0x1ac>
8001174a:	ec f8 00 00 	ld.w	r8,r6[0]
8001174e:	70 08       	ld.w	r8,r8[0x0]
80011750:	f1 39 0d 04 	ld.ub	r9,r8[3332]
80011754:	3d c8       	mov	r8,-36
80011756:	f0 09 18 00 	cp.b	r9,r8
8001175a:	c3 b1       	brne	800117d0 <run_navigation_task+0x220>
				{
					if(centralData->critical_init)
8001175c:	ec f8 00 00 	ld.w	r8,r6[0]
80011760:	70 08       	ld.w	r8,r8[0x0]
80011762:	f1 38 0d 01 	ld.ub	r8,r8[3329]
80011766:	58 08       	cp.w	r8,0
80011768:	c3 40       	breq	800117d0 <run_navigation_task+0x220>
					{
						run_navigation(centralData->waypoint_critical_coordinates);
8001176a:	ec f8 00 00 	ld.w	r8,r6[0]
8001176e:	70 08       	ld.w	r8,r8[0x0]
80011770:	20 cd       	sub	sp,48
80011772:	1a 99       	mov	r9,sp
80011774:	12 9b       	mov	r11,r9
80011776:	f0 ca f3 38 	sub	r10,r8,-3272
8001177a:	f6 c8 00 00 	sub	r8,r11,0
8001177e:	f4 c9 00 00 	sub	r9,r10,0
80011782:	72 0c       	ld.w	r12,r9[0x0]
80011784:	91 0c       	st.w	r8[0x0],r12
80011786:	72 1c       	ld.w	r12,r9[0x4]
80011788:	91 1c       	st.w	r8[0x4],r12
8001178a:	72 2c       	ld.w	r12,r9[0x8]
8001178c:	91 2c       	st.w	r8[0x8],r12
8001178e:	72 39       	ld.w	r9,r9[0xc]
80011790:	91 39       	st.w	r8[0xc],r9
80011792:	f6 c8 ff f0 	sub	r8,r11,-16
80011796:	f4 c9 ff f0 	sub	r9,r10,-16
8001179a:	72 0c       	ld.w	r12,r9[0x0]
8001179c:	91 0c       	st.w	r8[0x0],r12
8001179e:	72 1c       	ld.w	r12,r9[0x4]
800117a0:	91 1c       	st.w	r8[0x4],r12
800117a2:	72 2c       	ld.w	r12,r9[0x8]
800117a4:	91 2c       	st.w	r8[0x8],r12
800117a6:	72 39       	ld.w	r9,r9[0xc]
800117a8:	91 39       	st.w	r8[0xc],r9
800117aa:	f6 c8 ff e0 	sub	r8,r11,-32
800117ae:	f4 c9 ff e0 	sub	r9,r10,-32
800117b2:	72 0a       	ld.w	r10,r9[0x0]
800117b4:	91 0a       	st.w	r8[0x0],r10
800117b6:	72 1a       	ld.w	r10,r9[0x4]
800117b8:	91 1a       	st.w	r8[0x4],r10
800117ba:	72 2a       	ld.w	r10,r9[0x8]
800117bc:	91 2a       	st.w	r8[0x8],r10
800117be:	72 39       	ld.w	r9,r9[0xc]
800117c0:	91 39       	st.w	r8[0xc],r9
800117c2:	f0 16 00 8d 	mcall	r6[564]
800117c6:	2f 4d       	sub	sp,-48
800117c8:	c0 48       	rjmp	800117d0 <run_navigation_task+0x220>
						{
							run_navigation(centralData->waypoint_hold_coordinates);
						}
						break;
				}
				break;
800117ca:	d7 03       	nop
800117cc:	c0 28       	rjmp	800117d0 <run_navigation_task+0x220>
800117ce:	d7 03       	nop
					}
				}
				break;
		}
	
}
800117d0:	2f fd       	sub	sp,-4
800117d2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800117d6:	00 00       	add	r0,r0
800117d8:	80 01       	ld.sh	r1,r0[0x0]
800117da:	14 40       	or	r0,r10

800117dc <run_barometer>:
uint32_t last_baro_update;
task_return_t run_barometer()
{
800117dc:	eb cd 40 c0 	pushm	r6-r7,lr
800117e0:	1a 97       	mov	r7,sp
800117e2:	20 3d       	sub	sp,12
800117e4:	4a d6       	lddpc	r6,80011898 <run_barometer+0xbc>
800117e6:	1e 26       	rsub	r6,pc
	uint32_t tnow = get_micros();
800117e8:	f0 16 00 29 	mcall	r6[164]
800117ec:	18 98       	mov	r8,r12
800117ee:	ef 48 ff f4 	st.w	r7[-12],r8
	central_data_t *central_data=get_central_data();
800117f2:	f0 16 00 33 	mcall	r6[204]
800117f6:	18 98       	mov	r8,r12
800117f8:	ef 48 ff f8 	st.w	r7[-8],r8
	
	pressure_data *pressure= get_pressure_data_slow(centralData->pressure.altitude_offset);
800117fc:	ec f8 00 00 	ld.w	r8,r6[0]
80011800:	70 08       	ld.w	r8,r8[0x0]
80011802:	f0 f8 0d 2c 	ld.w	r8,r8[3372]
80011806:	10 9c       	mov	r12,r8
80011808:	f0 16 01 c3 	mcall	r6[1804]
8001180c:	18 98       	mov	r8,r12
8001180e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (central_data->simulation_mode==1) {
80011812:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011816:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8001181a:	58 18       	cp.w	r8,1
8001181c:	c0 b1       	brne	80011832 <run_barometer+0x56>
		simulate_barometer(&centralData->sim_model, pressure);
8001181e:	ec f8 00 00 	ld.w	r8,r6[0]
80011822:	70 08       	ld.w	r8,r8[0x0]
80011824:	f0 c8 f8 10 	sub	r8,r8,-2032
80011828:	ee fb ff fc 	ld.w	r11,r7[-4]
8001182c:	10 9c       	mov	r12,r8
8001182e:	f0 16 01 9c 	mcall	r6[1648]
	} 
	centralData->pressure=*pressure;
80011832:	ec f8 00 00 	ld.w	r8,r6[0]
80011836:	70 08       	ld.w	r8,r8[0x0]
80011838:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001183c:	f0 c8 f2 f4 	sub	r8,r8,-3340
80011840:	f0 ca 00 00 	sub	r10,r8,0
80011844:	f2 cb 00 00 	sub	r11,r9,0
80011848:	76 0c       	ld.w	r12,r11[0x0]
8001184a:	95 0c       	st.w	r10[0x0],r12
8001184c:	76 1c       	ld.w	r12,r11[0x4]
8001184e:	95 1c       	st.w	r10[0x4],r12
80011850:	76 2c       	ld.w	r12,r11[0x8]
80011852:	95 2c       	st.w	r10[0x8],r12
80011854:	76 3b       	ld.w	r11,r11[0xc]
80011856:	95 3b       	st.w	r10[0xc],r11
80011858:	f0 ca ff f0 	sub	r10,r8,-16
8001185c:	f2 cb ff f0 	sub	r11,r9,-16
80011860:	76 0c       	ld.w	r12,r11[0x0]
80011862:	95 0c       	st.w	r10[0x0],r12
80011864:	76 1c       	ld.w	r12,r11[0x4]
80011866:	95 1c       	st.w	r10[0x4],r12
80011868:	76 2c       	ld.w	r12,r11[0x8]
8001186a:	95 2c       	st.w	r10[0x8],r12
8001186c:	76 3b       	ld.w	r11,r11[0xc]
8001186e:	95 3b       	st.w	r10[0xc],r11
80011870:	f0 ca ff e0 	sub	r10,r8,-32
80011874:	f2 cb ff e0 	sub	r11,r9,-32
80011878:	76 0c       	ld.w	r12,r11[0x0]
8001187a:	95 0c       	st.w	r10[0x0],r12
8001187c:	76 1c       	ld.w	r12,r11[0x4]
8001187e:	95 1c       	st.w	r10[0x4],r12
80011880:	76 2c       	ld.w	r12,r11[0x8]
80011882:	95 2c       	st.w	r10[0x8],r12
80011884:	76 3b       	ld.w	r11,r11[0xc]
80011886:	95 3b       	st.w	r10[0xc],r11
80011888:	f2 ea 00 30 	ld.d	r10,r9[48]
8001188c:	f0 eb 00 30 	st.d	r8[48],r10
	
}
80011890:	2f dd       	sub	sp,-12
80011892:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011896:	00 00       	add	r0,r0
80011898:	80 01       	ld.sh	r1,r0[0x0]
8001189a:	16 6a       	and	r10,r11

8001189c <create_tasks>:


void create_tasks() {
8001189c:	eb cd 40 c0 	pushm	r6-r7,lr
800118a0:	1a 97       	mov	r7,sp
800118a2:	4a 96       	lddpc	r6,80011944 <create_tasks+0xa8>
800118a4:	1e 26       	rsub	r6,pc
	
	init_scheduler(&main_tasks);
800118a6:	ec f8 01 30 	ld.w	r8,r6[304]
800118aa:	10 9c       	mov	r12,r8
800118ac:	f0 16 01 11 	mcall	r6[1092]
	
	centralData = get_central_data();
800118b0:	f0 16 00 33 	mcall	r6[204]
800118b4:	18 99       	mov	r9,r12
800118b6:	ec f8 00 00 	ld.w	r8,r6[0]
800118ba:	91 09       	st.w	r8[0x0],r9
	
	register_task(&main_tasks, 0, 4000, RUN_REGULAR, &run_stabilisation );
800118bc:	ec f8 08 90 	ld.w	r8,r6[2192]
800118c0:	ec fc 01 30 	ld.w	r12,r6[304]
800118c4:	30 29       	mov	r9,2
800118c6:	e0 6a 0f a0 	mov	r10,4000
800118ca:	30 0b       	mov	r11,0
800118cc:	f0 16 00 64 	mcall	r6[400]
	
	register_task(&main_tasks, 1, 15000, RUN_REGULAR, &run_barometer);
800118d0:	ec f8 07 50 	ld.w	r8,r6[1872]
800118d4:	ec fc 01 30 	ld.w	r12,r6[304]
800118d8:	30 29       	mov	r9,2
800118da:	e0 6a 3a 98 	mov	r10,15000
800118de:	30 1b       	mov	r11,1
800118e0:	f0 16 00 64 	mcall	r6[400]
	main_tasks.tasks[1].timing_mode=PERIODIC_RELATIVE;
800118e4:	ec f8 01 30 	ld.w	r8,r6[304]
800118e8:	30 19       	mov	r9,1
800118ea:	f1 49 00 44 	st.w	r8[68],r9

	register_task(&main_tasks, 2, 100000, RUN_REGULAR, &gps_task);
800118ee:	ec f8 07 d4 	ld.w	r8,r6[2004]
800118f2:	ec fc 01 30 	ld.w	r12,r6[304]
800118f6:	30 29       	mov	r9,2
800118f8:	e0 7a 86 a0 	mov	r10,100000
800118fc:	30 2b       	mov	r11,2
800118fe:	f0 16 00 64 	mcall	r6[400]
	//register_task(&main_tasks, 4, 4000, RUN_REGULAR, &run_estimator);
	//register_task(&main_tasks, , 100000, RUN_REGULAR, &read_radar);

	register_task(&main_tasks, 3, ORCA_TIME_STEP_MILLIS * 1000.0, RUN_REGULAR, &run_navigation_task);
80011902:	ec f8 06 dc 	ld.w	r8,r6[1756]
80011906:	ec fc 01 30 	ld.w	r12,r6[304]
8001190a:	30 29       	mov	r9,2
8001190c:	e0 6a 27 10 	mov	r10,10000
80011910:	30 3b       	mov	r11,3
80011912:	f0 16 00 64 	mcall	r6[400]

	register_task(&main_tasks, 4, 200000, RUN_REGULAR, &set_mav_mode_n_state);
80011916:	ec f8 07 2c 	ld.w	r8,r6[1836]
8001191a:	ec fc 01 30 	ld.w	r12,r6[304]
8001191e:	30 29       	mov	r9,2
80011920:	e2 7a 0d 40 	mov	r10,200000
80011924:	30 4b       	mov	r11,4
80011926:	f0 16 00 64 	mcall	r6[400]
	

	register_task(&main_tasks, 5, 4000, RUN_REGULAR, &mavlink_protocol_update);
8001192a:	ec f8 03 a4 	ld.w	r8,r6[932]
8001192e:	ec fc 01 30 	ld.w	r12,r6[304]
80011932:	30 29       	mov	r9,2
80011934:	e0 6a 0f a0 	mov	r10,4000
80011938:	30 5b       	mov	r11,5
8001193a:	f0 16 00 64 	mcall	r6[400]

8001193e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011942:	00 00       	add	r0,r0
80011944:	80 01       	ld.sh	r1,r0[0x0]
80011946:	17 28       	ld.uh	r8,r11++

80011948 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80011948:	eb cd 40 80 	pushm	r7,lr
8001194c:	1a 97       	mov	r7,sp
8001194e:	20 3d       	sub	sp,12
80011950:	18 98       	mov	r8,r12
80011952:	ef 4b ff f4 	st.w	r7[-12],r11
80011956:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001195a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001195e:	90 08       	ld.sh	r8,r8[0x0]
80011960:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80011964:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80011968:	f3 e8 20 08 	eor	r8,r9,r8
8001196c:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
80011970:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80011974:	a5 68       	lsl	r8,0x4
80011976:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001197a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001197e:	f3 e8 20 08 	eor	r8,r9,r8
80011982:	5c 58       	castu.b	r8
80011984:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
80011988:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001198c:	90 08       	ld.sh	r8,r8[0x0]
8001198e:	5c 78       	castu.h	r8
80011990:	a9 88       	lsr	r8,0x8
80011992:	5c 88       	casts.h	r8
80011994:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80011998:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001199c:	a9 68       	lsl	r8,0x8
8001199e:	5c 88       	casts.h	r8
800119a0:	f3 e8 20 08 	eor	r8,r9,r8
800119a4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800119a8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800119ac:	a3 78       	lsl	r8,0x3
800119ae:	5c 88       	casts.h	r8
800119b0:	f3 e8 20 08 	eor	r8,r9,r8
800119b4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800119b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800119bc:	a5 88       	lsr	r8,0x4
800119be:	5c 58       	castu.b	r8
800119c0:	f3 e8 20 08 	eor	r8,r9,r8
800119c4:	5c 88       	casts.h	r8
800119c6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800119ca:	b2 08       	st.h	r9[0x0],r8
}
800119cc:	2f dd       	sub	sp,-12
800119ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800119d2 <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
800119d2:	eb cd 40 80 	pushm	r7,lr
800119d6:	1a 97       	mov	r7,sp
800119d8:	20 1d       	sub	sp,4
800119da:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
800119de:	ee f9 ff fc 	ld.w	r9,r7[-4]
800119e2:	3f f8       	mov	r8,-1
800119e4:	b2 08       	st.h	r9[0x0],r8
}
800119e6:	2f fd       	sub	sp,-4
800119e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800119ec <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
800119ec:	eb cd 40 c0 	pushm	r6-r7,lr
800119f0:	1a 97       	mov	r7,sp
800119f2:	20 1d       	sub	sp,4
800119f4:	48 96       	lddpc	r6,80011a18 <mavlink_get_channel_status+0x2c>
800119f6:	1e 26       	rsub	r6,pc
800119f8:	18 98       	mov	r8,r12
800119fa:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
800119fe:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80011a02:	f0 09 15 04 	lsl	r9,r8,0x4
80011a06:	ec f8 09 1c 	ld.w	r8,r6[2332]
80011a0a:	f2 08 00 08 	add	r8,r9,r8
}
80011a0e:	10 9c       	mov	r12,r8
80011a10:	2f fd       	sub	sp,-4
80011a12:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a16:	00 00       	add	r0,r0
80011a18:	80 01       	ld.sh	r1,r0[0x0]
80011a1a:	18 7a       	tst	r10,r12

80011a1c <mavlink_get_channel_buffer>:
/*
 * Internal function to give access to the channel buffer for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_BUFFER
MAVLINK_HELPER mavlink_message_t* mavlink_get_channel_buffer(uint8_t chan)
{
80011a1c:	eb cd 40 c0 	pushm	r6-r7,lr
80011a20:	1a 97       	mov	r7,sp
80011a22:	20 1d       	sub	sp,4
80011a24:	48 a6       	lddpc	r6,80011a4c <mavlink_get_channel_buffer+0x30>
80011a26:	1e 26       	rsub	r6,pc
80011a28:	18 98       	mov	r8,r12
80011a2a:	ef 68 ff fc 	st.b	r7[-4],r8
#error ERROR: IF #define MAVLINK_EXTERNAL_RX_BUFFER IS SET, THE BUFFER HAS TO BE ALLOCATED OUTSIDE OF THIS FUNCTION (mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];)
#endif
#else
	static mavlink_message_t m_mavlink_buffer[MAVLINK_COMM_NUM_BUFFERS];
#endif
	return &m_mavlink_buffer[chan];
80011a2e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80011a32:	12 98       	mov	r8,r9
80011a34:	a5 68       	lsl	r8,0x4
80011a36:	12 08       	add	r8,r9
80011a38:	a5 68       	lsl	r8,0x4
80011a3a:	10 99       	mov	r9,r8
80011a3c:	ec f8 09 18 	ld.w	r8,r6[2328]
80011a40:	f2 08 00 08 	add	r8,r9,r8
}
80011a44:	10 9c       	mov	r12,r8
80011a46:	2f fd       	sub	sp,-4
80011a48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a4c:	80 01       	ld.sh	r1,r0[0x0]
80011a4e:	18 aa       	st.w	r12++,r10

80011a50 <mavlink_start_checksum>:
	int32_t int32;
};


MAVLINK_HELPER void mavlink_start_checksum(mavlink_message_t* msg)
{
80011a50:	eb cd 40 c0 	pushm	r6-r7,lr
80011a54:	1a 97       	mov	r7,sp
80011a56:	20 1d       	sub	sp,4
80011a58:	48 66       	lddpc	r6,80011a70 <mavlink_start_checksum+0x20>
80011a5a:	1e 26       	rsub	r6,pc
80011a5c:	ef 4c ff fc 	st.w	r7[-4],r12
	crc_init(&msg->checksum);
80011a60:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011a64:	10 9c       	mov	r12,r8
80011a66:	cb 6f       	rcall	800119d2 <crc_init>
}
80011a68:	2f fd       	sub	sp,-4
80011a6a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a6e:	00 00       	add	r0,r0
80011a70:	80 01       	ld.sh	r1,r0[0x0]
80011a72:	18 de       	st.w	--r12,lr

80011a74 <mavlink_update_checksum>:

MAVLINK_HELPER void mavlink_update_checksum(mavlink_message_t* msg, uint8_t c)
{
80011a74:	eb cd 40 c0 	pushm	r6-r7,lr
80011a78:	1a 97       	mov	r7,sp
80011a7a:	20 2d       	sub	sp,8
80011a7c:	48 96       	lddpc	r6,80011aa0 <mavlink_update_checksum+0x2c>
80011a7e:	1e 26       	rsub	r6,pc
80011a80:	ef 4c ff fc 	st.w	r7[-4],r12
80011a84:	16 98       	mov	r8,r11
80011a86:	ef 68 ff f8 	st.b	r7[-8],r8
	crc_accumulate(c, &msg->checksum);
80011a8a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011a8e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80011a92:	12 9b       	mov	r11,r9
80011a94:	10 9c       	mov	r12,r8
80011a96:	c5 9f       	rcall	80011948 <crc_accumulate>
}
80011a98:	2f ed       	sub	sp,-8
80011a9a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011a9e:	00 00       	add	r0,r0
80011aa0:	80 01       	ld.sh	r1,r0[0x0]
80011aa2:	19 02       	ld.w	r2,r12++

80011aa4 <mavlink_parse_char>:
 *
 *
 * @endcode
 */
MAVLINK_HELPER uint8_t mavlink_parse_char(uint8_t chan, uint8_t c, mavlink_message_t* r_message, mavlink_status_t* r_mavlink_status)
{
80011aa4:	eb cd 40 c0 	pushm	r6-r7,lr
80011aa8:	1a 97       	mov	r7,sp
80011aaa:	20 7d       	sub	sp,28
80011aac:	fe f6 03 b8 	ld.w	r6,pc[952]
80011ab0:	1e 26       	rsub	r6,pc
80011ab2:	16 98       	mov	r8,r11
80011ab4:	ef 4a ff e8 	st.w	r7[-24],r10
80011ab8:	ef 49 ff e4 	st.w	r7[-28],r9
80011abc:	18 99       	mov	r9,r12
80011abe:	ef 69 ff f0 	st.b	r7[-16],r9
80011ac2:	ef 68 ff ec 	st.b	r7[-20],r8
	static const uint8_t mavlink_message_lengths[256] = MAVLINK_MESSAGE_LENGTHS;
#define MAVLINK_MESSAGE_LENGTH(msgid) mavlink_message_lengths[msgid]
#endif
#endif

	mavlink_message_t* rxmsg = mavlink_get_channel_buffer(chan); ///< The currently decoded message
80011ac6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80011aca:	10 9c       	mov	r12,r8
80011acc:	ca 8f       	rcall	80011a1c <mavlink_get_channel_buffer>
80011ace:	18 98       	mov	r8,r12
80011ad0:	ef 48 ff f4 	st.w	r7[-12],r8
	mavlink_status_t* status = mavlink_get_channel_status(chan); ///< The current decode status
80011ad4:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80011ad8:	10 9c       	mov	r12,r8
80011ada:	c8 9f       	rcall	800119ec <mavlink_get_channel_status>
80011adc:	18 98       	mov	r8,r12
80011ade:	ef 48 ff f8 	st.w	r7[-8],r8
	int bufferIndex = 0;
80011ae2:	30 08       	mov	r8,0
80011ae4:	ef 48 ff fc 	st.w	r7[-4],r8

	status->msg_received = 0;
80011ae8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011aec:	30 08       	mov	r8,0
80011aee:	b2 88       	st.b	r9[0x0],r8

	switch (status->parse_state)
80011af0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011af4:	70 18       	ld.w	r8,r8[0x4]
80011af6:	58 98       	cp.w	r8,9
80011af8:	e0 8b 01 70 	brhi	80011dd8 <mavlink_parse_char+0x334>
80011afc:	fe c9 ff f8 	sub	r9,pc,-8
80011b00:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80011b04:	e0 8f 00 14 	bral	80011b2c <mavlink_parse_char+0x88>
80011b08:	e0 8f 00 12 	bral	80011b2c <mavlink_parse_char+0x88>
80011b0c:	e0 8f 00 28 	bral	80011b5c <mavlink_parse_char+0xb8>
80011b10:	e0 8f 00 69 	bral	80011be2 <mavlink_parse_char+0x13e>
80011b14:	e0 8f 00 57 	bral	80011bc2 <mavlink_parse_char+0x11e>
80011b18:	e0 8f 00 75 	bral	80011c02 <mavlink_parse_char+0x15e>
80011b1c:	e0 8f 00 83 	bral	80011c22 <mavlink_parse_char+0x17e>
80011b20:	e0 8f 00 9b 	bral	80011c56 <mavlink_parse_char+0x1b2>
80011b24:	e0 8f 00 c2 	bral	80011ca8 <mavlink_parse_char+0x204>
80011b28:	e0 8f 01 08 	bral	80011d38 <mavlink_parse_char+0x294>
	{
	case MAVLINK_PARSE_STATE_UNINIT:
	case MAVLINK_PARSE_STATE_IDLE:
		if (c == MAVLINK_STX)
80011b2c:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011b30:	3f e8       	mov	r8,-2
80011b32:	f0 09 18 00 	cp.b	r9,r8
80011b36:	e0 81 01 4c 	brne	80011dce <mavlink_parse_char+0x32a>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011b3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b3e:	30 29       	mov	r9,2
80011b40:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = 0;
80011b42:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b46:	30 08       	mov	r8,0
80011b48:	b2 b8       	st.b	r9[0x3],r8
			rxmsg->magic = c;
80011b4a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b4e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011b52:	b2 a8       	st.b	r9[0x2],r8
			mavlink_start_checksum(rxmsg);
80011b54:	ee fc ff f4 	ld.w	r12,r7[-12]
80011b58:	c7 cf       	rcall	80011a50 <mavlink_start_checksum>
		}
		break;
80011b5a:	c3 f9       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_STX:
			if (status->msg_received 
80011b5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b60:	11 88       	ld.ub	r8,r8[0x0]
80011b62:	58 08       	cp.w	r8,0
80011b64:	c1 a0       	breq	80011b98 <mavlink_parse_char+0xf4>
#if (MAVLINK_MAX_PAYLOAD_LEN < 255)
				|| c > MAVLINK_MAX_PAYLOAD_LEN
#endif
				)
		{
			status->buffer_overrun++;
80011b66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b6a:	11 98       	ld.ub	r8,r8[0x1]
80011b6c:	2f f8       	sub	r8,-1
80011b6e:	5c 58       	castu.b	r8
80011b70:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b74:	b2 98       	st.b	r9[0x1],r8
			status->parse_error++;
80011b76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b7a:	11 a8       	ld.ub	r8,r8[0x2]
80011b7c:	2f f8       	sub	r8,-1
80011b7e:	5c 58       	castu.b	r8
80011b80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b84:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011b86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011b8a:	30 08       	mov	r8,0
80011b8c:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011b8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011b92:	30 19       	mov	r9,1
80011b94:	91 19       	st.w	r8[0x4],r9
			rxmsg->len = c;
			status->packet_idx = 0;
			mavlink_update_checksum(rxmsg, c);
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
		}
		break;
80011b96:	c2 19       	rjmp	80011dd8 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
		}
		else
		{
			// NOT counting STX, LENGTH, SEQ, SYSID, COMPID, MSGID, CRC1 and CRC2
			rxmsg->len = c;
80011b98:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011b9c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011ba0:	b2 b8       	st.b	r9[0x3],r8
			status->packet_idx = 0;
80011ba2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011ba6:	30 08       	mov	r8,0
80011ba8:	f3 68 00 08 	st.b	r9[8],r8
			mavlink_update_checksum(rxmsg, c);
80011bac:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bb0:	10 9b       	mov	r11,r8
80011bb2:	ee fc ff f4 	ld.w	r12,r7[-12]
80011bb6:	c5 ff       	rcall	80011a74 <mavlink_update_checksum>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_LENGTH;
80011bb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bbc:	30 49       	mov	r9,4
80011bbe:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011bc0:	c0 c9       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_LENGTH:
		rxmsg->seq = c;
80011bc2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011bc6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bca:	b2 c8       	st.b	r9[0x4],r8
		mavlink_update_checksum(rxmsg, c);
80011bcc:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bd0:	10 9b       	mov	r11,r8
80011bd2:	ee fc ff f4 	ld.w	r12,r7[-12]
80011bd6:	c4 ff       	rcall	80011a74 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SEQ;
80011bd8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bdc:	30 39       	mov	r9,3
80011bde:	91 19       	st.w	r8[0x4],r9
		break;
80011be0:	cf c8       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SEQ:
		rxmsg->sysid = c;
80011be2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011be6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bea:	b2 d8       	st.b	r9[0x5],r8
		mavlink_update_checksum(rxmsg, c);
80011bec:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011bf0:	10 9b       	mov	r11,r8
80011bf2:	ee fc ff f4 	ld.w	r12,r7[-12]
80011bf6:	c3 ff       	rcall	80011a74 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_SYSID;
80011bf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011bfc:	30 59       	mov	r9,5
80011bfe:	91 19       	st.w	r8[0x4],r9
		break;
80011c00:	ce c8       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_SYSID:
		rxmsg->compid = c;
80011c02:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011c06:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c0a:	b2 e8       	st.b	r9[0x6],r8
		mavlink_update_checksum(rxmsg, c);
80011c0c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c10:	10 9b       	mov	r11,r8
80011c12:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c16:	c2 ff       	rcall	80011a74 <mavlink_update_checksum>
		status->parse_state = MAVLINK_PARSE_STATE_GOT_COMPID;
80011c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c1c:	30 69       	mov	r9,6
80011c1e:	91 19       	st.w	r8[0x4],r9
		break;
80011c20:	cd c8       	rjmp	80011dd8 <mavlink_parse_char+0x334>
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
				mavlink_start_checksum(rxmsg);
			}
	        }
#endif
		rxmsg->msgid = c;
80011c22:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011c26:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c2a:	b2 f8       	st.b	r9[0x7],r8
		mavlink_update_checksum(rxmsg, c);
80011c2c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c30:	10 9b       	mov	r11,r8
80011c32:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c36:	c1 ff       	rcall	80011a74 <mavlink_update_checksum>
		if (rxmsg->len == 0)
80011c38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011c3c:	11 b8       	ld.ub	r8,r8[0x3]
80011c3e:	58 08       	cp.w	r8,0
80011c40:	c0 61       	brne	80011c4c <mavlink_parse_char+0x1a8>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80011c42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c46:	30 89       	mov	r9,8
80011c48:	91 19       	st.w	r8[0x4],r9
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
		}
		break;
80011c4a:	cc 78       	rjmp	80011dd8 <mavlink_parse_char+0x334>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_MSGID;
80011c4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c50:	30 79       	mov	r9,7
80011c52:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011c54:	cc 28       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_MSGID:
		_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx++] = (char)c;
80011c56:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011c5a:	2f 88       	sub	r8,-8
80011c5c:	10 9a       	mov	r10,r8
80011c5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c62:	f1 38 00 08 	ld.ub	r8,r8[8]
80011c66:	10 99       	mov	r9,r8
80011c68:	12 0a       	add	r10,r9
80011c6a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011c6e:	b4 89       	st.b	r10[0x0],r9
80011c70:	2f f8       	sub	r8,-1
80011c72:	5c 58       	castu.b	r8
80011c74:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011c78:	f3 68 00 08 	st.b	r9[8],r8
		mavlink_update_checksum(rxmsg, c);
80011c7c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011c80:	10 9b       	mov	r11,r8
80011c82:	ee fc ff f4 	ld.w	r12,r7[-12]
80011c86:	cf 7e       	rcall	80011a74 <mavlink_update_checksum>
		if (status->packet_idx == rxmsg->len)
80011c88:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011c8c:	f1 39 00 08 	ld.ub	r9,r8[8]
80011c90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011c94:	11 b8       	ld.ub	r8,r8[0x3]
80011c96:	f0 09 18 00 	cp.b	r9,r8
80011c9a:	e0 81 00 9c 	brne	80011dd2 <mavlink_parse_char+0x32e>
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
80011c9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ca2:	30 89       	mov	r9,8
80011ca4:	91 19       	st.w	r8[0x4],r9
		}
		break;
80011ca6:	c9 98       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_PAYLOAD:
#if MAVLINK_CRC_EXTRA
		mavlink_update_checksum(rxmsg, MAVLINK_MESSAGE_CRC(rxmsg->msgid));
80011ca8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011cac:	11 f8       	ld.ub	r8,r8[0x7]
80011cae:	ec f9 09 14 	ld.w	r9,r6[2324]
80011cb2:	f2 08 07 08 	ld.ub	r8,r9[r8]
80011cb6:	10 9b       	mov	r11,r8
80011cb8:	ee fc ff f4 	ld.w	r12,r7[-12]
80011cbc:	cd ce       	rcall	80011a74 <mavlink_update_checksum>
#endif
		if (c != (rxmsg->checksum & 0xFF)) {
80011cbe:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011cc2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011cc6:	90 08       	ld.sh	r8,r8[0x0]
80011cc8:	5c 78       	castu.h	r8
80011cca:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80011cce:	10 39       	cp.w	r9,r8
80011cd0:	c2 30       	breq	80011d16 <mavlink_parse_char+0x272>
			// Check first checksum byte
			status->parse_error++;
80011cd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cd6:	11 a8       	ld.ub	r8,r8[0x2]
80011cd8:	2f f8       	sub	r8,-1
80011cda:	5c 58       	castu.b	r8
80011cdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011ce0:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011ce2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011ce6:	30 08       	mov	r8,0
80011ce8:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011cea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011cee:	30 19       	mov	r9,1
80011cf0:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011cf2:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011cf6:	3f e8       	mov	r8,-2
80011cf8:	f0 09 18 00 	cp.b	r9,r8
80011cfc:	c6 d1       	brne	80011dd6 <mavlink_parse_char+0x332>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011cfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d02:	30 29       	mov	r9,2
80011d04:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80011d06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011d0a:	30 08       	mov	r8,0
80011d0c:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80011d0e:	ee fc ff f4 	ld.w	r12,r7[-12]
80011d12:	c9 fe       	rcall	80011a50 <mavlink_start_checksum>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80011d14:	c6 28       	rjmp	80011dd8 <mavlink_parse_char+0x334>
				mavlink_start_checksum(rxmsg);
			}
		}
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
80011d16:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d1a:	30 99       	mov	r9,9
80011d1c:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
80011d1e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011d22:	2f 88       	sub	r8,-8
80011d24:	10 99       	mov	r9,r8
80011d26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d2a:	f1 38 00 08 	ld.ub	r8,r8[8]
80011d2e:	10 09       	add	r9,r8
80011d30:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011d34:	b2 88       	st.b	r9[0x0],r8
		}
		break;
80011d36:	c5 18       	rjmp	80011dd8 <mavlink_parse_char+0x334>

	case MAVLINK_PARSE_STATE_GOT_CRC1:
		if (c != (rxmsg->checksum >> 8)) {
80011d38:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011d3c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011d40:	90 08       	ld.sh	r8,r8[0x0]
80011d42:	5c 78       	castu.h	r8
80011d44:	a9 88       	lsr	r8,0x8
80011d46:	5c 88       	casts.h	r8
80011d48:	f0 09 19 00 	cp.h	r9,r8
80011d4c:	c2 30       	breq	80011d92 <mavlink_parse_char+0x2ee>
			// Check second checksum byte
			status->parse_error++;
80011d4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d52:	11 a8       	ld.ub	r8,r8[0x2]
80011d54:	2f f8       	sub	r8,-1
80011d56:	5c 58       	castu.b	r8
80011d58:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d5c:	b2 a8       	st.b	r9[0x2],r8
			status->msg_received = 0;
80011d5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d62:	30 08       	mov	r8,0
80011d64:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011d66:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d6a:	30 19       	mov	r9,1
80011d6c:	91 19       	st.w	r8[0x4],r9
			if (c == MAVLINK_STX)
80011d6e:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80011d72:	3f e8       	mov	r8,-2
80011d74:	f0 09 18 00 	cp.b	r9,r8
80011d78:	c3 01       	brne	80011dd8 <mavlink_parse_char+0x334>
			{
				status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
80011d7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d7e:	30 29       	mov	r9,2
80011d80:	91 19       	st.w	r8[0x4],r9
				rxmsg->len = 0;
80011d82:	ee f9 ff f4 	ld.w	r9,r7[-12]
80011d86:	30 08       	mov	r8,0
80011d88:	b2 b8       	st.b	r9[0x3],r8
				mavlink_start_checksum(rxmsg);
80011d8a:	ee fc ff f4 	ld.w	r12,r7[-12]
80011d8e:	c6 1e       	rcall	80011a50 <mavlink_start_checksum>
80011d90:	c2 48       	rjmp	80011dd8 <mavlink_parse_char+0x334>
			}
		}
		else
		{
			// Successfully got message
			status->msg_received = 1;
80011d92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011d96:	30 18       	mov	r8,1
80011d98:	b2 88       	st.b	r9[0x0],r8
			status->parse_state = MAVLINK_PARSE_STATE_IDLE;
80011d9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011d9e:	30 19       	mov	r9,1
80011da0:	91 19       	st.w	r8[0x4],r9
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx+1] = (char)c;
80011da2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011da6:	2f 88       	sub	r8,-8
80011da8:	10 99       	mov	r9,r8
80011daa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011dae:	f1 38 00 08 	ld.ub	r8,r8[8]
80011db2:	2f f8       	sub	r8,-1
80011db4:	10 09       	add	r9,r8
80011db6:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80011dba:	b2 88       	st.b	r9[0x0],r8
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
80011dbc:	e0 6a 01 10 	mov	r10,272
80011dc0:	ee fb ff f4 	ld.w	r11,r7[-12]
80011dc4:	ee fc ff e8 	ld.w	r12,r7[-24]
80011dc8:	f0 16 00 1b 	mcall	r6[108]
80011dcc:	c0 68       	rjmp	80011dd8 <mavlink_parse_char+0x334>
			status->parse_state = MAVLINK_PARSE_STATE_GOT_STX;
			rxmsg->len = 0;
			rxmsg->magic = c;
			mavlink_start_checksum(rxmsg);
		}
		break;
80011dce:	d7 03       	nop
80011dd0:	c0 48       	rjmp	80011dd8 <mavlink_parse_char+0x334>
		mavlink_update_checksum(rxmsg, c);
		if (status->packet_idx == rxmsg->len)
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_PAYLOAD;
		}
		break;
80011dd2:	d7 03       	nop
80011dd4:	c0 28       	rjmp	80011dd8 <mavlink_parse_char+0x334>
		else
		{
			status->parse_state = MAVLINK_PARSE_STATE_GOT_CRC1;
			_MAV_PAYLOAD_NON_CONST(rxmsg)[status->packet_idx] = (char)c;
		}
		break;
80011dd6:	d7 03       	nop
			memcpy(r_message, rxmsg, sizeof(mavlink_message_t));
		}
		break;
	}

	bufferIndex++;
80011dd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ddc:	2f f8       	sub	r8,-1
80011dde:	ef 48 ff fc 	st.w	r7[-4],r8
	// If a message has been sucessfully decoded, check index
	if (status->msg_received == 1)
80011de2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011de6:	11 89       	ld.ub	r9,r8[0x0]
80011de8:	30 18       	mov	r8,1
80011dea:	f0 09 18 00 	cp.b	r9,r8
80011dee:	c1 91       	brne	80011e20 <mavlink_parse_char+0x37c>
		//while(status->current_seq != rxmsg->seq)
		//{
		//	status->packet_rx_drop_count++;
		//               status->current_seq++;
		//}
		status->current_rx_seq = rxmsg->seq;
80011df0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80011df4:	11 c8       	ld.ub	r8,r8[0x4]
80011df6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011dfa:	f3 68 00 09 	st.b	r9[9],r8
		// Initial condition: If no packet has been received so far, drop count is undefined
		if (status->packet_rx_success_count == 0) status->packet_rx_drop_count = 0;
80011dfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e02:	90 68       	ld.sh	r8,r8[0xc]
80011e04:	58 08       	cp.w	r8,0
80011e06:	c0 51       	brne	80011e10 <mavlink_parse_char+0x36c>
80011e08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e0c:	30 08       	mov	r8,0
80011e0e:	b2 78       	st.h	r9[0xe],r8
		// Count this packet as received
		status->packet_rx_success_count++;
80011e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e14:	90 68       	ld.sh	r8,r8[0xc]
80011e16:	2f f8       	sub	r8,-1
80011e18:	5c 88       	casts.h	r8
80011e1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e1e:	b2 68       	st.h	r9[0xc],r8
	}

	r_mavlink_status->current_rx_seq = status->current_rx_seq+1;
80011e20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e24:	f1 38 00 09 	ld.ub	r8,r8[9]
80011e28:	2f f8       	sub	r8,-1
80011e2a:	5c 58       	castu.b	r8
80011e2c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e30:	f3 68 00 09 	st.b	r9[9],r8
	r_mavlink_status->packet_rx_success_count = status->packet_rx_success_count;
80011e34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e38:	90 68       	ld.sh	r8,r8[0xc]
80011e3a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e3e:	b2 68       	st.h	r9[0xc],r8
	r_mavlink_status->packet_rx_drop_count = status->parse_error;
80011e40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e44:	11 a8       	ld.ub	r8,r8[0x2]
80011e46:	ee f9 ff e4 	ld.w	r9,r7[-28]
80011e4a:	b2 78       	st.h	r9[0xe],r8
	status->parse_error = 0;
80011e4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80011e50:	30 08       	mov	r8,0
80011e52:	b2 a8       	st.b	r9[0x2],r8
	return status->msg_received;
80011e54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e58:	11 88       	ld.ub	r8,r8[0x0]
}
80011e5a:	10 9c       	mov	r12,r8
80011e5c:	2f 9d       	sub	sp,-28
80011e5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011e62:	00 00       	add	r0,r0
80011e64:	80 01       	ld.sh	r1,r0[0x0]
80011e66:	19 34       	ld.ub	r4,r12++

80011e68 <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
80011e68:	eb cd 40 80 	pushm	r7,lr
80011e6c:	1a 97       	mov	r7,sp
80011e6e:	20 2d       	sub	sp,8
80011e70:	ef 4c ff fc 	st.w	r7[-4],r12
80011e74:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
80011e78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e7c:	2f f8       	sub	r8,-1
80011e7e:	11 88       	ld.ub	r8,r8[0x0]
80011e80:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011e84:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
80011e86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011e8a:	f0 c9 ff ff 	sub	r9,r8,-1
80011e8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011e92:	11 88       	ld.ub	r8,r8[0x0]
80011e94:	b2 88       	st.b	r9[0x0],r8
}
80011e96:	2f ed       	sub	sp,-8
80011e98:	e3 cd 80 80 	ldm	sp++,r7,pc

80011e9c <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
80011e9c:	eb cd 40 80 	pushm	r7,lr
80011ea0:	1a 97       	mov	r7,sp
80011ea2:	20 2d       	sub	sp,8
80011ea4:	ef 4c ff fc 	st.w	r7[-4],r12
80011ea8:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
80011eac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011eb0:	2f d8       	sub	r8,-3
80011eb2:	11 88       	ld.ub	r8,r8[0x0]
80011eb4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80011eb8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
80011eba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ebe:	f0 c9 ff ff 	sub	r9,r8,-1
80011ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ec6:	2f e8       	sub	r8,-2
80011ec8:	11 88       	ld.ub	r8,r8[0x0]
80011eca:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
80011ecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ed0:	f0 c9 ff fe 	sub	r9,r8,-2
80011ed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011ed8:	2f f8       	sub	r8,-1
80011eda:	11 88       	ld.ub	r8,r8[0x0]
80011edc:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80011ede:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ee2:	f0 c9 ff fd 	sub	r9,r8,-3
80011ee6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011eea:	11 88       	ld.ub	r8,r8[0x0]
80011eec:	b2 88       	st.b	r9[0x0],r8
}
80011eee:	2f ed       	sub	sp,-8
80011ef0:	e3 cd 80 80 	ldm	sp++,r7,pc

80011ef4 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80011ef4:	eb cd 40 c0 	pushm	r6-r7,lr
80011ef8:	1a 97       	mov	r7,sp
80011efa:	20 3d       	sub	sp,12
80011efc:	49 06       	lddpc	r6,80011f3c <mav_array_memcpy+0x48>
80011efe:	1e 26       	rsub	r6,pc
80011f00:	ef 4c ff fc 	st.w	r7[-4],r12
80011f04:	ef 4b ff f8 	st.w	r7[-8],r11
80011f08:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80011f0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f10:	58 08       	cp.w	r8,0
80011f12:	c0 91       	brne	80011f24 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80011f14:	ee fa ff f4 	ld.w	r10,r7[-12]
80011f18:	30 0b       	mov	r11,0
80011f1a:	ee fc ff fc 	ld.w	r12,r7[-4]
80011f1e:	f0 16 00 31 	mcall	r6[196]
80011f22:	c0 98       	rjmp	80011f34 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80011f24:	ee fa ff f4 	ld.w	r10,r7[-12]
80011f28:	ee fb ff f8 	ld.w	r11,r7[-8]
80011f2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80011f30:	f0 16 00 1b 	mcall	r6[108]
	}
}
80011f34:	2f dd       	sub	sp,-12
80011f36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f3a:	00 00       	add	r0,r0
80011f3c:	80 01       	ld.sh	r1,r0[0x0]
80011f3e:	1d 82       	ld.ub	r2,lr[0x0]

80011f40 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
80011f40:	eb cd 40 c0 	pushm	r6-r7,lr
80011f44:	1a 97       	mov	r7,sp
80011f46:	20 3d       	sub	sp,12
80011f48:	48 d6       	lddpc	r6,80011f7c <_MAV_RETURN_uint16_t+0x3c>
80011f4a:	1e 26       	rsub	r6,pc
80011f4c:	ef 4c ff f8 	st.w	r7[-8],r12
80011f50:	16 98       	mov	r8,r11
80011f52:	ef 68 ff f4 	st.b	r7[-12],r8
80011f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f5a:	2f 88       	sub	r8,-8
80011f5c:	10 99       	mov	r9,r8
80011f5e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011f62:	10 09       	add	r9,r8
80011f64:	ee c8 00 02 	sub	r8,r7,2
80011f68:	12 9b       	mov	r11,r9
80011f6a:	10 9c       	mov	r12,r8
80011f6c:	c7 ef       	rcall	80011e68 <byte_swap_2>
80011f6e:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80011f72:	10 9c       	mov	r12,r8
80011f74:	2f dd       	sub	sp,-12
80011f76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011f7a:	00 00       	add	r0,r0
80011f7c:	80 01       	ld.sh	r1,r0[0x0]
80011f7e:	1d ce       	ld.ub	lr,lr[0x4]

80011f80 <_MAV_RETURN_int16_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
80011f80:	eb cd 40 c0 	pushm	r6-r7,lr
80011f84:	1a 97       	mov	r7,sp
80011f86:	20 3d       	sub	sp,12
80011f88:	48 d6       	lddpc	r6,80011fbc <_MAV_RETURN_int16_t+0x3c>
80011f8a:	1e 26       	rsub	r6,pc
80011f8c:	ef 4c ff f8 	st.w	r7[-8],r12
80011f90:	16 98       	mov	r8,r11
80011f92:	ef 68 ff f4 	st.b	r7[-12],r8
80011f96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011f9a:	2f 88       	sub	r8,-8
80011f9c:	10 99       	mov	r9,r8
80011f9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011fa2:	10 09       	add	r9,r8
80011fa4:	ee c8 00 02 	sub	r8,r7,2
80011fa8:	12 9b       	mov	r11,r9
80011faa:	10 9c       	mov	r12,r8
80011fac:	c5 ef       	rcall	80011e68 <byte_swap_2>
80011fae:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80011fb2:	10 9c       	mov	r12,r8
80011fb4:	2f dd       	sub	sp,-12
80011fb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011fba:	00 00       	add	r0,r0
80011fbc:	80 01       	ld.sh	r1,r0[0x0]
80011fbe:	1e 0e       	add	lr,pc

80011fc0 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
80011fc0:	eb cd 40 c0 	pushm	r6-r7,lr
80011fc4:	1a 97       	mov	r7,sp
80011fc6:	20 3d       	sub	sp,12
80011fc8:	48 d6       	lddpc	r6,80011ffc <_MAV_RETURN_float+0x3c>
80011fca:	1e 26       	rsub	r6,pc
80011fcc:	ef 4c ff f8 	st.w	r7[-8],r12
80011fd0:	16 98       	mov	r8,r11
80011fd2:	ef 68 ff f4 	st.b	r7[-12],r8
80011fd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80011fda:	2f 88       	sub	r8,-8
80011fdc:	10 99       	mov	r9,r8
80011fde:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80011fe2:	10 09       	add	r9,r8
80011fe4:	ee c8 00 04 	sub	r8,r7,4
80011fe8:	12 9b       	mov	r11,r9
80011fea:	10 9c       	mov	r12,r8
80011fec:	c5 8f       	rcall	80011e9c <byte_swap_4>
80011fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80011ff2:	10 9c       	mov	r12,r8
80011ff4:	2f dd       	sub	sp,-12
80011ff6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80011ffa:	00 00       	add	r0,r0
80011ffc:	80 01       	ld.sh	r1,r0[0x0]
80011ffe:	1e 4e       	or	lr,pc

80012000 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
80012000:	eb cd 40 c0 	pushm	r6-r7,lr
80012004:	1a 97       	mov	r7,sp
80012006:	20 4d       	sub	sp,16
80012008:	49 16       	lddpc	r6,8001204c <_MAV_RETURN_char_array+0x4c>
8001200a:	1e 26       	rsub	r6,pc
8001200c:	ef 4c ff fc 	st.w	r7[-4],r12
80012010:	ef 4b ff f8 	st.w	r7[-8],r11
80012014:	12 98       	mov	r8,r9
80012016:	14 99       	mov	r9,r10
80012018:	ef 69 ff f4 	st.b	r7[-12],r9
8001201c:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80012020:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80012024:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012028:	f0 ca ff f8 	sub	r10,r8,-8
8001202c:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80012030:	f4 08 00 08 	add	r8,r10,r8
80012034:	12 9a       	mov	r10,r9
80012036:	10 9b       	mov	r11,r8
80012038:	ee fc ff f8 	ld.w	r12,r7[-8]
8001203c:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
80012040:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
80012044:	10 9c       	mov	r12,r8
80012046:	2f cd       	sub	sp,-16
80012048:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001204c:	80 01       	ld.sh	r1,r0[0x0]
8001204e:	1e 8e       	andn	lr,pc

80012050 <mavlink_msg_param_request_read_get_target_system>:
 * @brief Get field target_system from param_request_read message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_system(const mavlink_message_t* msg)
{
80012050:	eb cd 40 80 	pushm	r7,lr
80012054:	1a 97       	mov	r7,sp
80012056:	20 1d       	sub	sp,4
80012058:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001205c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012060:	2f 88       	sub	r8,-8
80012062:	2f e8       	sub	r8,-2
80012064:	11 88       	ld.ub	r8,r8[0x0]
}
80012066:	10 9c       	mov	r12,r8
80012068:	2f fd       	sub	sp,-4
8001206a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001206e <mavlink_msg_param_request_read_get_target_component>:
 * @brief Get field target_component from param_request_read message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_read_get_target_component(const mavlink_message_t* msg)
{
8001206e:	eb cd 40 80 	pushm	r7,lr
80012072:	1a 97       	mov	r7,sp
80012074:	20 1d       	sub	sp,4
80012076:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001207a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001207e:	2f 88       	sub	r8,-8
80012080:	2f d8       	sub	r8,-3
80012082:	11 88       	ld.ub	r8,r8[0x0]
}
80012084:	10 9c       	mov	r12,r8
80012086:	2f fd       	sub	sp,-4
80012088:	e3 cd 80 80 	ldm	sp++,r7,pc

8001208c <mavlink_msg_param_request_read_get_param_id>:
 * @brief Get field param_id from param_request_read message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_request_read_get_param_id(const mavlink_message_t* msg, char *param_id)
{
8001208c:	eb cd 40 c0 	pushm	r6-r7,lr
80012090:	1a 97       	mov	r7,sp
80012092:	20 2d       	sub	sp,8
80012094:	48 a6       	lddpc	r6,800120bc <mavlink_msg_param_request_read_get_param_id+0x30>
80012096:	1e 26       	rsub	r6,pc
80012098:	ef 4c ff fc 	st.w	r7[-4],r12
8001209c:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  4);
800120a0:	30 49       	mov	r9,4
800120a2:	31 0a       	mov	r10,16
800120a4:	ee fb ff f8 	ld.w	r11,r7[-8]
800120a8:	ee fc ff fc 	ld.w	r12,r7[-4]
800120ac:	ca af       	rcall	80012000 <_MAV_RETURN_char_array>
800120ae:	18 98       	mov	r8,r12
800120b0:	5c 88       	casts.h	r8
800120b2:	5c 88       	casts.h	r8
}
800120b4:	10 9c       	mov	r12,r8
800120b6:	2f ed       	sub	sp,-8
800120b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120bc:	80 01       	ld.sh	r1,r0[0x0]
800120be:	1f 1a       	ld.sh	r10,pc++

800120c0 <mavlink_msg_param_request_read_get_param_index>:
 * @brief Get field param_index from param_request_read message
 *
 * @return Parameter index. Send -1 to use the param ID field as identifier (else the param id will be ignored)
 */
static inline int16_t mavlink_msg_param_request_read_get_param_index(const mavlink_message_t* msg)
{
800120c0:	eb cd 40 c0 	pushm	r6-r7,lr
800120c4:	1a 97       	mov	r7,sp
800120c6:	20 1d       	sub	sp,4
800120c8:	48 76       	lddpc	r6,800120e4 <mavlink_msg_param_request_read_get_param_index+0x24>
800120ca:	1e 26       	rsub	r6,pc
800120cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_int16_t(msg,  0);
800120d0:	30 0b       	mov	r11,0
800120d2:	ee fc ff fc 	ld.w	r12,r7[-4]
800120d6:	c5 5f       	rcall	80011f80 <_MAV_RETURN_int16_t>
800120d8:	18 98       	mov	r8,r12
}
800120da:	10 9c       	mov	r12,r8
800120dc:	2f fd       	sub	sp,-4
800120de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800120e2:	00 00       	add	r0,r0
800120e4:	80 01       	ld.sh	r1,r0[0x0]
800120e6:	1f 4e       	ld.w	lr,--pc

800120e8 <mavlink_msg_param_request_read_decode>:
 *
 * @param msg The message to decode
 * @param param_request_read C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_read_decode(const mavlink_message_t* msg, mavlink_param_request_read_t* param_request_read)
{
800120e8:	eb cd 40 c0 	pushm	r6-r7,lr
800120ec:	1a 97       	mov	r7,sp
800120ee:	20 2d       	sub	sp,8
800120f0:	49 36       	lddpc	r6,8001213c <mavlink_msg_param_request_read_decode+0x54>
800120f2:	1e 26       	rsub	r6,pc
800120f4:	ef 4c ff fc 	st.w	r7[-4],r12
800120f8:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_read->param_index = mavlink_msg_param_request_read_get_param_index(msg);
800120fc:	ee fc ff fc 	ld.w	r12,r7[-4]
80012100:	ce 0f       	rcall	800120c0 <mavlink_msg_param_request_read_get_param_index>
80012102:	18 98       	mov	r8,r12
80012104:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012108:	b2 08       	st.h	r9[0x0],r8
	param_request_read->target_system = mavlink_msg_param_request_read_get_target_system(msg);
8001210a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001210e:	ca 1f       	rcall	80012050 <mavlink_msg_param_request_read_get_target_system>
80012110:	18 98       	mov	r8,r12
80012112:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012116:	b2 a8       	st.b	r9[0x2],r8
	param_request_read->target_component = mavlink_msg_param_request_read_get_target_component(msg);
80012118:	ee fc ff fc 	ld.w	r12,r7[-4]
8001211c:	ca 9f       	rcall	8001206e <mavlink_msg_param_request_read_get_target_component>
8001211e:	18 98       	mov	r8,r12
80012120:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012124:	b2 b8       	st.b	r9[0x3],r8
	mavlink_msg_param_request_read_get_param_id(msg, param_request_read->param_id);
80012126:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001212a:	2f c8       	sub	r8,-4
8001212c:	10 9b       	mov	r11,r8
8001212e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012132:	ca df       	rcall	8001208c <mavlink_msg_param_request_read_get_param_id>
#else
	memcpy(param_request_read, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_READ_LEN);
#endif
}
80012134:	2f ed       	sub	sp,-8
80012136:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001213a:	00 00       	add	r0,r0
8001213c:	80 01       	ld.sh	r1,r0[0x0]
8001213e:	1f 76       	ld.ub	r6,--pc

80012140 <mavlink_msg_param_request_list_get_target_system>:
 * @brief Get field target_system from param_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_system(const mavlink_message_t* msg)
{
80012140:	eb cd 40 80 	pushm	r7,lr
80012144:	1a 97       	mov	r7,sp
80012146:	20 1d       	sub	sp,4
80012148:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001214c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012150:	2f 88       	sub	r8,-8
80012152:	11 88       	ld.ub	r8,r8[0x0]
}
80012154:	10 9c       	mov	r12,r8
80012156:	2f fd       	sub	sp,-4
80012158:	e3 cd 80 80 	ldm	sp++,r7,pc

8001215c <mavlink_msg_param_request_list_get_target_component>:
 * @brief Get field target_component from param_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_request_list_get_target_component(const mavlink_message_t* msg)
{
8001215c:	eb cd 40 80 	pushm	r7,lr
80012160:	1a 97       	mov	r7,sp
80012162:	20 1d       	sub	sp,4
80012164:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
80012168:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001216c:	2f 88       	sub	r8,-8
8001216e:	2f f8       	sub	r8,-1
80012170:	11 88       	ld.ub	r8,r8[0x0]
}
80012172:	10 9c       	mov	r12,r8
80012174:	2f fd       	sub	sp,-4
80012176:	e3 cd 80 80 	ldm	sp++,r7,pc

8001217a <mavlink_msg_param_request_list_decode>:
 *
 * @param msg The message to decode
 * @param param_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_request_list_decode(const mavlink_message_t* msg, mavlink_param_request_list_t* param_request_list)
{
8001217a:	eb cd 40 c0 	pushm	r6-r7,lr
8001217e:	1a 97       	mov	r7,sp
80012180:	20 2d       	sub	sp,8
80012182:	48 c6       	lddpc	r6,800121b0 <mavlink_msg_param_request_list_decode+0x36>
80012184:	1e 26       	rsub	r6,pc
80012186:	ef 4c ff fc 	st.w	r7[-4],r12
8001218a:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_request_list->target_system = mavlink_msg_param_request_list_get_target_system(msg);
8001218e:	ee fc ff fc 	ld.w	r12,r7[-4]
80012192:	cd 7f       	rcall	80012140 <mavlink_msg_param_request_list_get_target_system>
80012194:	18 98       	mov	r8,r12
80012196:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001219a:	b2 88       	st.b	r9[0x0],r8
	param_request_list->target_component = mavlink_msg_param_request_list_get_target_component(msg);
8001219c:	ee fc ff fc 	ld.w	r12,r7[-4]
800121a0:	cd ef       	rcall	8001215c <mavlink_msg_param_request_list_get_target_component>
800121a2:	18 98       	mov	r8,r12
800121a4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800121a8:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(param_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_REQUEST_LIST_LEN);
#endif
}
800121aa:	2f ed       	sub	sp,-8
800121ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800121b0:	80 01       	ld.sh	r1,r0[0x0]
800121b2:	20 08       	sub	r8,0

800121b4 <mavlink_msg_request_data_stream_get_target_system>:
 * @brief Get field target_system from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_system(const mavlink_message_t* msg)
{
800121b4:	eb cd 40 80 	pushm	r7,lr
800121b8:	1a 97       	mov	r7,sp
800121ba:	20 1d       	sub	sp,4
800121bc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
800121c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800121c4:	2f 88       	sub	r8,-8
800121c6:	2f e8       	sub	r8,-2
800121c8:	11 88       	ld.ub	r8,r8[0x0]
}
800121ca:	10 9c       	mov	r12,r8
800121cc:	2f fd       	sub	sp,-4
800121ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800121d2 <mavlink_msg_request_data_stream_get_target_component>:
 * @brief Get field target_component from request_data_stream message
 *
 * @return The target requested to send the message stream.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_target_component(const mavlink_message_t* msg)
{
800121d2:	eb cd 40 80 	pushm	r7,lr
800121d6:	1a 97       	mov	r7,sp
800121d8:	20 1d       	sub	sp,4
800121da:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
800121de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800121e2:	2f 88       	sub	r8,-8
800121e4:	2f d8       	sub	r8,-3
800121e6:	11 88       	ld.ub	r8,r8[0x0]
}
800121e8:	10 9c       	mov	r12,r8
800121ea:	2f fd       	sub	sp,-4
800121ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800121f0 <mavlink_msg_request_data_stream_get_req_stream_id>:
 * @brief Get field req_stream_id from request_data_stream message
 *
 * @return The ID of the requested data stream
 */
static inline uint8_t mavlink_msg_request_data_stream_get_req_stream_id(const mavlink_message_t* msg)
{
800121f0:	eb cd 40 80 	pushm	r7,lr
800121f4:	1a 97       	mov	r7,sp
800121f6:	20 1d       	sub	sp,4
800121f8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800121fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012200:	2f 88       	sub	r8,-8
80012202:	2f c8       	sub	r8,-4
80012204:	11 88       	ld.ub	r8,r8[0x0]
}
80012206:	10 9c       	mov	r12,r8
80012208:	2f fd       	sub	sp,-4
8001220a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001220e <mavlink_msg_request_data_stream_get_req_message_rate>:
 * @brief Get field req_message_rate from request_data_stream message
 *
 * @return The requested interval between two messages of this type
 */
static inline uint16_t mavlink_msg_request_data_stream_get_req_message_rate(const mavlink_message_t* msg)
{
8001220e:	eb cd 40 c0 	pushm	r6-r7,lr
80012212:	1a 97       	mov	r7,sp
80012214:	20 1d       	sub	sp,4
80012216:	48 86       	lddpc	r6,80012234 <mavlink_msg_request_data_stream_get_req_message_rate+0x26>
80012218:	1e 26       	rsub	r6,pc
8001221a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001221e:	30 0b       	mov	r11,0
80012220:	ee fc ff fc 	ld.w	r12,r7[-4]
80012224:	c8 ee       	rcall	80011f40 <_MAV_RETURN_uint16_t>
80012226:	18 98       	mov	r8,r12
80012228:	5c 88       	casts.h	r8
8001222a:	5c 88       	casts.h	r8
}
8001222c:	10 9c       	mov	r12,r8
8001222e:	2f fd       	sub	sp,-4
80012230:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012234:	80 01       	ld.sh	r1,r0[0x0]
80012236:	20 9c       	sub	r12,9

80012238 <mavlink_msg_request_data_stream_get_start_stop>:
 * @brief Get field start_stop from request_data_stream message
 *
 * @return 1 to start sending, 0 to stop sending.
 */
static inline uint8_t mavlink_msg_request_data_stream_get_start_stop(const mavlink_message_t* msg)
{
80012238:	eb cd 40 80 	pushm	r7,lr
8001223c:	1a 97       	mov	r7,sp
8001223e:	20 1d       	sub	sp,4
80012240:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
80012244:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012248:	2f 88       	sub	r8,-8
8001224a:	2f b8       	sub	r8,-5
8001224c:	11 88       	ld.ub	r8,r8[0x0]
}
8001224e:	10 9c       	mov	r12,r8
80012250:	2f fd       	sub	sp,-4
80012252:	e3 cd 80 80 	ldm	sp++,r7,pc

80012256 <mavlink_msg_request_data_stream_decode>:
 *
 * @param msg The message to decode
 * @param request_data_stream C-struct to decode the message contents into
 */
static inline void mavlink_msg_request_data_stream_decode(const mavlink_message_t* msg, mavlink_request_data_stream_t* request_data_stream)
{
80012256:	eb cd 40 c0 	pushm	r6-r7,lr
8001225a:	1a 97       	mov	r7,sp
8001225c:	20 2d       	sub	sp,8
8001225e:	49 76       	lddpc	r6,800122b8 <mavlink_msg_request_data_stream_decode+0x62>
80012260:	1e 26       	rsub	r6,pc
80012262:	ef 4c ff fc 	st.w	r7[-4],r12
80012266:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	request_data_stream->req_message_rate = mavlink_msg_request_data_stream_get_req_message_rate(msg);
8001226a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001226e:	cd 0f       	rcall	8001220e <mavlink_msg_request_data_stream_get_req_message_rate>
80012270:	18 98       	mov	r8,r12
80012272:	5c 88       	casts.h	r8
80012274:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012278:	b2 08       	st.h	r9[0x0],r8
	request_data_stream->target_system = mavlink_msg_request_data_stream_get_target_system(msg);
8001227a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001227e:	c9 bf       	rcall	800121b4 <mavlink_msg_request_data_stream_get_target_system>
80012280:	18 98       	mov	r8,r12
80012282:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012286:	b2 a8       	st.b	r9[0x2],r8
	request_data_stream->target_component = mavlink_msg_request_data_stream_get_target_component(msg);
80012288:	ee fc ff fc 	ld.w	r12,r7[-4]
8001228c:	ca 3f       	rcall	800121d2 <mavlink_msg_request_data_stream_get_target_component>
8001228e:	18 98       	mov	r8,r12
80012290:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012294:	b2 b8       	st.b	r9[0x3],r8
	request_data_stream->req_stream_id = mavlink_msg_request_data_stream_get_req_stream_id(msg);
80012296:	ee fc ff fc 	ld.w	r12,r7[-4]
8001229a:	ca bf       	rcall	800121f0 <mavlink_msg_request_data_stream_get_req_stream_id>
8001229c:	18 98       	mov	r8,r12
8001229e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122a2:	b2 c8       	st.b	r9[0x4],r8
	request_data_stream->start_stop = mavlink_msg_request_data_stream_get_start_stop(msg);
800122a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800122a8:	cc 8f       	rcall	80012238 <mavlink_msg_request_data_stream_get_start_stop>
800122aa:	18 98       	mov	r8,r12
800122ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800122b0:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(request_data_stream, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_REQUEST_DATA_STREAM_LEN);
#endif
}
800122b2:	2f ed       	sub	sp,-8
800122b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800122b8:	80 01       	ld.sh	r1,r0[0x0]
800122ba:	20 e4       	sub	r4,14

800122bc <mavlink_msg_command_long_get_target_system>:
 * @brief Get field target_system from command_long message
 *
 * @return System which should execute the command
 */
static inline uint8_t mavlink_msg_command_long_get_target_system(const mavlink_message_t* msg)
{
800122bc:	eb cd 40 80 	pushm	r7,lr
800122c0:	1a 97       	mov	r7,sp
800122c2:	20 1d       	sub	sp,4
800122c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  30);
800122c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800122cc:	2f 88       	sub	r8,-8
800122ce:	2e 28       	sub	r8,-30
800122d0:	11 88       	ld.ub	r8,r8[0x0]
}
800122d2:	10 9c       	mov	r12,r8
800122d4:	2f fd       	sub	sp,-4
800122d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800122da <mavlink_msg_command_long_get_target_component>:
 * @brief Get field target_component from command_long message
 *
 * @return Component which should execute the command, 0 for all components
 */
static inline uint8_t mavlink_msg_command_long_get_target_component(const mavlink_message_t* msg)
{
800122da:	eb cd 40 80 	pushm	r7,lr
800122de:	1a 97       	mov	r7,sp
800122e0:	20 1d       	sub	sp,4
800122e2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  31);
800122e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800122ea:	2f 88       	sub	r8,-8
800122ec:	2e 18       	sub	r8,-31
800122ee:	11 88       	ld.ub	r8,r8[0x0]
}
800122f0:	10 9c       	mov	r12,r8
800122f2:	2f fd       	sub	sp,-4
800122f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800122f8 <mavlink_msg_command_long_get_command>:
 * @brief Get field command from command_long message
 *
 * @return Command ID, as defined by MAV_CMD enum.
 */
static inline uint16_t mavlink_msg_command_long_get_command(const mavlink_message_t* msg)
{
800122f8:	eb cd 40 c0 	pushm	r6-r7,lr
800122fc:	1a 97       	mov	r7,sp
800122fe:	20 1d       	sub	sp,4
80012300:	48 86       	lddpc	r6,80012320 <mavlink_msg_command_long_get_command+0x28>
80012302:	1e 26       	rsub	r6,pc
80012304:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
80012308:	31 cb       	mov	r11,28
8001230a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001230e:	c1 9e       	rcall	80011f40 <_MAV_RETURN_uint16_t>
80012310:	18 98       	mov	r8,r12
80012312:	5c 88       	casts.h	r8
80012314:	5c 88       	casts.h	r8
}
80012316:	10 9c       	mov	r12,r8
80012318:	2f fd       	sub	sp,-4
8001231a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001231e:	00 00       	add	r0,r0
80012320:	80 01       	ld.sh	r1,r0[0x0]
80012322:	21 86       	sub	r6,24

80012324 <mavlink_msg_command_long_get_confirmation>:
 * @brief Get field confirmation from command_long message
 *
 * @return 0: First transmission of this command. 1-255: Confirmation transmissions (e.g. for kill command)
 */
static inline uint8_t mavlink_msg_command_long_get_confirmation(const mavlink_message_t* msg)
{
80012324:	eb cd 40 80 	pushm	r7,lr
80012328:	1a 97       	mov	r7,sp
8001232a:	20 1d       	sub	sp,4
8001232c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
80012330:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012334:	2f 88       	sub	r8,-8
80012336:	2e 08       	sub	r8,-32
80012338:	11 88       	ld.ub	r8,r8[0x0]
}
8001233a:	10 9c       	mov	r12,r8
8001233c:	2f fd       	sub	sp,-4
8001233e:	e3 cd 80 80 	ldm	sp++,r7,pc

80012342 <mavlink_msg_command_long_get_param1>:
 * @brief Get field param1 from command_long message
 *
 * @return Parameter 1, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param1(const mavlink_message_t* msg)
{
80012342:	eb cd 40 c0 	pushm	r6-r7,lr
80012346:	1a 97       	mov	r7,sp
80012348:	20 1d       	sub	sp,4
8001234a:	48 76       	lddpc	r6,80012364 <mavlink_msg_command_long_get_param1+0x22>
8001234c:	1e 26       	rsub	r6,pc
8001234e:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80012352:	30 0b       	mov	r11,0
80012354:	ee fc ff fc 	ld.w	r12,r7[-4]
80012358:	c3 4e       	rcall	80011fc0 <_MAV_RETURN_float>
8001235a:	18 98       	mov	r8,r12
}
8001235c:	10 9c       	mov	r12,r8
8001235e:	2f fd       	sub	sp,-4
80012360:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012364:	80 01       	ld.sh	r1,r0[0x0]
80012366:	21 d0       	sub	r0,29

80012368 <mavlink_msg_command_long_get_param2>:
 * @brief Get field param2 from command_long message
 *
 * @return Parameter 2, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param2(const mavlink_message_t* msg)
{
80012368:	eb cd 40 c0 	pushm	r6-r7,lr
8001236c:	1a 97       	mov	r7,sp
8001236e:	20 1d       	sub	sp,4
80012370:	48 76       	lddpc	r6,8001238c <mavlink_msg_command_long_get_param2+0x24>
80012372:	1e 26       	rsub	r6,pc
80012374:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
80012378:	30 4b       	mov	r11,4
8001237a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001237e:	c2 1e       	rcall	80011fc0 <_MAV_RETURN_float>
80012380:	18 98       	mov	r8,r12
}
80012382:	10 9c       	mov	r12,r8
80012384:	2f fd       	sub	sp,-4
80012386:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001238a:	00 00       	add	r0,r0
8001238c:	80 01       	ld.sh	r1,r0[0x0]
8001238e:	21 f6       	sub	r6,31

80012390 <mavlink_msg_command_long_get_param3>:
 * @brief Get field param3 from command_long message
 *
 * @return Parameter 3, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param3(const mavlink_message_t* msg)
{
80012390:	eb cd 40 c0 	pushm	r6-r7,lr
80012394:	1a 97       	mov	r7,sp
80012396:	20 1d       	sub	sp,4
80012398:	48 76       	lddpc	r6,800123b4 <mavlink_msg_command_long_get_param3+0x24>
8001239a:	1e 26       	rsub	r6,pc
8001239c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
800123a0:	30 8b       	mov	r11,8
800123a2:	ee fc ff fc 	ld.w	r12,r7[-4]
800123a6:	c0 de       	rcall	80011fc0 <_MAV_RETURN_float>
800123a8:	18 98       	mov	r8,r12
}
800123aa:	10 9c       	mov	r12,r8
800123ac:	2f fd       	sub	sp,-4
800123ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123b2:	00 00       	add	r0,r0
800123b4:	80 01       	ld.sh	r1,r0[0x0]
800123b6:	22 1e       	sub	lr,33

800123b8 <mavlink_msg_command_long_get_param4>:
 * @brief Get field param4 from command_long message
 *
 * @return Parameter 4, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param4(const mavlink_message_t* msg)
{
800123b8:	eb cd 40 c0 	pushm	r6-r7,lr
800123bc:	1a 97       	mov	r7,sp
800123be:	20 1d       	sub	sp,4
800123c0:	48 76       	lddpc	r6,800123dc <mavlink_msg_command_long_get_param4+0x24>
800123c2:	1e 26       	rsub	r6,pc
800123c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
800123c8:	30 cb       	mov	r11,12
800123ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800123ce:	fe b0 fd f9 	rcall	80011fc0 <_MAV_RETURN_float>
800123d2:	18 98       	mov	r8,r12
}
800123d4:	10 9c       	mov	r12,r8
800123d6:	2f fd       	sub	sp,-4
800123d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800123dc:	80 01       	ld.sh	r1,r0[0x0]
800123de:	22 46       	sub	r6,36

800123e0 <mavlink_msg_command_long_get_param5>:
 * @brief Get field param5 from command_long message
 *
 * @return Parameter 5, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param5(const mavlink_message_t* msg)
{
800123e0:	eb cd 40 c0 	pushm	r6-r7,lr
800123e4:	1a 97       	mov	r7,sp
800123e6:	20 1d       	sub	sp,4
800123e8:	48 76       	lddpc	r6,80012404 <mavlink_msg_command_long_get_param5+0x24>
800123ea:	1e 26       	rsub	r6,pc
800123ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
800123f0:	31 0b       	mov	r11,16
800123f2:	ee fc ff fc 	ld.w	r12,r7[-4]
800123f6:	fe b0 fd e5 	rcall	80011fc0 <_MAV_RETURN_float>
800123fa:	18 98       	mov	r8,r12
}
800123fc:	10 9c       	mov	r12,r8
800123fe:	2f fd       	sub	sp,-4
80012400:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012404:	80 01       	ld.sh	r1,r0[0x0]
80012406:	22 6e       	sub	lr,38

80012408 <mavlink_msg_command_long_get_param6>:
 * @brief Get field param6 from command_long message
 *
 * @return Parameter 6, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param6(const mavlink_message_t* msg)
{
80012408:	eb cd 40 c0 	pushm	r6-r7,lr
8001240c:	1a 97       	mov	r7,sp
8001240e:	20 1d       	sub	sp,4
80012410:	48 76       	lddpc	r6,8001242c <mavlink_msg_command_long_get_param6+0x24>
80012412:	1e 26       	rsub	r6,pc
80012414:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
80012418:	31 4b       	mov	r11,20
8001241a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001241e:	fe b0 fd d1 	rcall	80011fc0 <_MAV_RETURN_float>
80012422:	18 98       	mov	r8,r12
}
80012424:	10 9c       	mov	r12,r8
80012426:	2f fd       	sub	sp,-4
80012428:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001242c:	80 01       	ld.sh	r1,r0[0x0]
8001242e:	22 96       	sub	r6,41

80012430 <mavlink_msg_command_long_get_param7>:
 * @brief Get field param7 from command_long message
 *
 * @return Parameter 7, as defined by MAV_CMD enum.
 */
static inline float mavlink_msg_command_long_get_param7(const mavlink_message_t* msg)
{
80012430:	eb cd 40 c0 	pushm	r6-r7,lr
80012434:	1a 97       	mov	r7,sp
80012436:	20 1d       	sub	sp,4
80012438:	48 76       	lddpc	r6,80012454 <mavlink_msg_command_long_get_param7+0x24>
8001243a:	1e 26       	rsub	r6,pc
8001243c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
80012440:	31 8b       	mov	r11,24
80012442:	ee fc ff fc 	ld.w	r12,r7[-4]
80012446:	fe b0 fd bd 	rcall	80011fc0 <_MAV_RETURN_float>
8001244a:	18 98       	mov	r8,r12
}
8001244c:	10 9c       	mov	r12,r8
8001244e:	2f fd       	sub	sp,-4
80012450:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012454:	80 01       	ld.sh	r1,r0[0x0]
80012456:	22 be       	sub	lr,43

80012458 <mavlink_msg_command_long_decode>:
 *
 * @param msg The message to decode
 * @param command_long C-struct to decode the message contents into
 */
static inline void mavlink_msg_command_long_decode(const mavlink_message_t* msg, mavlink_command_long_t* command_long)
{
80012458:	eb cd 40 c0 	pushm	r6-r7,lr
8001245c:	1a 97       	mov	r7,sp
8001245e:	20 2d       	sub	sp,8
80012460:	4a e6       	lddpc	r6,80012518 <mavlink_msg_command_long_decode+0xc0>
80012462:	1e 26       	rsub	r6,pc
80012464:	ef 4c ff fc 	st.w	r7[-4],r12
80012468:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	command_long->param1 = mavlink_msg_command_long_get_param1(msg);
8001246c:	ee fc ff fc 	ld.w	r12,r7[-4]
80012470:	c6 9f       	rcall	80012342 <mavlink_msg_command_long_get_param1>
80012472:	18 99       	mov	r9,r12
80012474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012478:	91 09       	st.w	r8[0x0],r9
	command_long->param2 = mavlink_msg_command_long_get_param2(msg);
8001247a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001247e:	c7 5f       	rcall	80012368 <mavlink_msg_command_long_get_param2>
80012480:	18 99       	mov	r9,r12
80012482:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012486:	91 19       	st.w	r8[0x4],r9
	command_long->param3 = mavlink_msg_command_long_get_param3(msg);
80012488:	ee fc ff fc 	ld.w	r12,r7[-4]
8001248c:	c8 2f       	rcall	80012390 <mavlink_msg_command_long_get_param3>
8001248e:	18 99       	mov	r9,r12
80012490:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012494:	91 29       	st.w	r8[0x8],r9
	command_long->param4 = mavlink_msg_command_long_get_param4(msg);
80012496:	ee fc ff fc 	ld.w	r12,r7[-4]
8001249a:	c8 ff       	rcall	800123b8 <mavlink_msg_command_long_get_param4>
8001249c:	18 99       	mov	r9,r12
8001249e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124a2:	91 39       	st.w	r8[0xc],r9
	command_long->param5 = mavlink_msg_command_long_get_param5(msg);
800124a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800124a8:	c9 cf       	rcall	800123e0 <mavlink_msg_command_long_get_param5>
800124aa:	18 99       	mov	r9,r12
800124ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124b0:	91 49       	st.w	r8[0x10],r9
	command_long->param6 = mavlink_msg_command_long_get_param6(msg);
800124b2:	ee fc ff fc 	ld.w	r12,r7[-4]
800124b6:	ca 9f       	rcall	80012408 <mavlink_msg_command_long_get_param6>
800124b8:	18 99       	mov	r9,r12
800124ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124be:	91 59       	st.w	r8[0x14],r9
	command_long->param7 = mavlink_msg_command_long_get_param7(msg);
800124c0:	ee fc ff fc 	ld.w	r12,r7[-4]
800124c4:	cb 6f       	rcall	80012430 <mavlink_msg_command_long_get_param7>
800124c6:	18 99       	mov	r9,r12
800124c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800124cc:	91 69       	st.w	r8[0x18],r9
	command_long->command = mavlink_msg_command_long_get_command(msg);
800124ce:	ee fc ff fc 	ld.w	r12,r7[-4]
800124d2:	c1 3f       	rcall	800122f8 <mavlink_msg_command_long_get_command>
800124d4:	18 98       	mov	r8,r12
800124d6:	5c 88       	casts.h	r8
800124d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124dc:	f3 58 00 1c 	st.h	r9[28],r8
	command_long->target_system = mavlink_msg_command_long_get_target_system(msg);
800124e0:	ee fc ff fc 	ld.w	r12,r7[-4]
800124e4:	ce ce       	rcall	800122bc <mavlink_msg_command_long_get_target_system>
800124e6:	18 98       	mov	r8,r12
800124e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124ec:	f3 68 00 1e 	st.b	r9[30],r8
	command_long->target_component = mavlink_msg_command_long_get_target_component(msg);
800124f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800124f4:	cf 3e       	rcall	800122da <mavlink_msg_command_long_get_target_component>
800124f6:	18 98       	mov	r8,r12
800124f8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800124fc:	f3 68 00 1f 	st.b	r9[31],r8
	command_long->confirmation = mavlink_msg_command_long_get_confirmation(msg);
80012500:	ee fc ff fc 	ld.w	r12,r7[-4]
80012504:	c1 0f       	rcall	80012324 <mavlink_msg_command_long_get_confirmation>
80012506:	18 98       	mov	r8,r12
80012508:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001250c:	f3 68 00 20 	st.b	r9[32],r8
#else
	memcpy(command_long, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_COMMAND_LONG_LEN);
#endif
}
80012510:	2f ed       	sub	sp,-8
80012512:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012516:	00 00       	add	r0,r0
80012518:	80 01       	ld.sh	r1,r0[0x0]
8001251a:	22 e6       	sub	r6,46

8001251c <comm_send_ch>:
central_data_t *centralData;

NEW_TASK_SET (mavlink_tasks, 30)

void comm_send_ch(mavlink_channel_t chan, uint8_t ch)
{
8001251c:	eb cd 40 c0 	pushm	r6-r7,lr
80012520:	1a 97       	mov	r7,sp
80012522:	20 2d       	sub	sp,8
80012524:	48 e6       	lddpc	r6,8001255c <comm_send_ch+0x40>
80012526:	1e 26       	rsub	r6,pc
80012528:	ef 4c ff fc 	st.w	r7[-4],r12
8001252c:	16 98       	mov	r8,r11
8001252e:	ef 68 ff f8 	st.b	r7[-8],r8
	if (chan == MAVLINK_COMM_0)
80012532:	ee f8 ff fc 	ld.w	r8,r7[-4]
80012536:	58 08       	cp.w	r8,0
80012538:	c0 e1       	brne	80012554 <comm_send_ch+0x38>
	{
		//uart0_transmit(ch);
		mavlink_out_stream->put(mavlink_out_stream->data, ch);
8001253a:	ec f8 01 68 	ld.w	r8,r6[360]
8001253e:	70 08       	ld.w	r8,r8[0x0]
80012540:	70 18       	ld.w	r8,r8[0x4]
80012542:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80012546:	ec f9 01 68 	ld.w	r9,r6[360]
8001254a:	72 09       	ld.w	r9,r9[0x0]
8001254c:	72 59       	ld.w	r9,r9[0x14]
8001254e:	14 9b       	mov	r11,r10
80012550:	12 9c       	mov	r12,r9
80012552:	5d 18       	icall	r8
	}
	if (chan == MAVLINK_COMM_1)
	{
		//uart1_transmit(ch);
	}
}
80012554:	2f ed       	sub	sp,-8
80012556:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001255a:	00 00       	add	r0,r0
8001255c:	80 01       	ld.sh	r1,r0[0x0]
8001255e:	23 aa       	sub	r10,58
80012560:	0a 20       	rsub	r0,r5
80012562:	52 65       	stdsp	sp[0x98],r5
80012564:	63 65       	ld.w	r5,r1[0x58]
80012566:	69 76       	ld.w	r6,r4[0x5c]
80012568:	65 64       	ld.w	r4,r2[0x58]
8001256a:	20 6d       	sub	sp,24
8001256c:	65 73       	ld.w	r3,r2[0x5c]
8001256e:	73 61       	ld.w	r1,r9[0x58]
80012570:	67 65       	ld.w	r5,r3[0x58]
80012572:	20 77       	sub	r7,7
80012574:	69 74       	ld.w	r4,r4[0x5c]
80012576:	68 20       	ld.w	r0,r4[0x8]
80012578:	49 44       	lddpc	r4,800125c8 <mavlink_receive_handler+0x2a>
8001257a:	00 00       	add	r0,r0
8001257c:	20 66       	sub	r6,6
8001257e:	72 6f       	ld.w	pc,r9[0x18]
80012580:	6d 20       	ld.w	r0,r6[0x48]
80012582:	73 79       	ld.w	r9,r9[0x5c]
80012584:	73 74       	ld.w	r4,r9[0x5c]
80012586:	65 6d       	ld.w	sp,r2[0x58]
80012588:	00 00       	add	r0,r0
8001258a:	00 00       	add	r0,r0
8001258c:	20 66       	sub	r6,6
8001258e:	6f 72       	ld.w	r2,r7[0x5c]
80012590:	20 63       	sub	r3,6
80012592:	6f 6d       	ld.w	sp,r7[0x58]
80012594:	70 6f       	ld.w	pc,r8[0x18]
80012596:	6e 65       	ld.w	r5,r7[0x18]
80012598:	6e 74       	ld.w	r4,r7[0x1c]
8001259a:	00 00       	add	r0,r0
8001259c:	0a 00       	add	r0,r5

8001259e <mavlink_receive_handler>:

void mavlink_receive_handler() {
8001259e:	eb cd 40 c0 	pushm	r6-r7,lr
800125a2:	1a 97       	mov	r7,sp
800125a4:	fa cd 01 20 	sub	sp,sp,288
800125a8:	4a 56       	lddpc	r6,8001263c <mavlink_receive_handler+0x9e>
800125aa:	1e 26       	rsub	r6,pc
	Mavlink_Received_t rec;
	
	if(mavlink_receive(mavlink_in_stream, &rec)) {
800125ac:	ec f8 04 f8 	ld.w	r8,r6[1272]
800125b0:	70 08       	ld.w	r8,r8[0x0]
800125b2:	ee c9 01 20 	sub	r9,r7,288
800125b6:	12 9b       	mov	r11,r9
800125b8:	10 9c       	mov	r12,r8
800125ba:	f0 16 01 4c 	mcall	r6[1328]
800125be:	18 98       	mov	r8,r12
800125c0:	58 08       	cp.w	r8,0
800125c2:	c3 a0       	breq	80012636 <mavlink_receive_handler+0x98>
		dbg_print("\n Received message with ID");
800125c4:	fe cc 00 64 	sub	r12,pc,100
800125c8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.msgid, 10);
800125cc:	ef 38 fe e7 	ld.ub	r8,r7[-281]
800125d0:	30 ab       	mov	r11,10
800125d2:	10 9c       	mov	r12,r8
800125d4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" from system");
800125d8:	fe cc 00 5c 	sub	r12,pc,92
800125dc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.sysid, 10);
800125e0:	ef 38 fe e5 	ld.ub	r8,r7[-283]
800125e4:	30 ab       	mov	r11,10
800125e6:	10 9c       	mov	r12,r8
800125e8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" for component");
800125ec:	fe cc 00 60 	sub	r12,pc,96
800125f0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(rec.msg.compid,10);
800125f4:	ef 38 fe e6 	ld.ub	r8,r7[-282]
800125f8:	30 ab       	mov	r11,10
800125fa:	10 9c       	mov	r12,r8
800125fc:	f0 16 00 04 	mcall	r6[16]
			dbg_print( "\n");
80012600:	fe cc 00 64 	sub	r12,pc,100
80012604:	f0 16 00 01 	mcall	r6[4]
		if (rec.msg.sysid == MAVLINK_BASE_STATION_ID)
80012608:	ef 39 fe e5 	ld.ub	r9,r7[-283]
8001260c:	3f f8       	mov	r8,-1
8001260e:	f0 09 18 00 	cp.b	r9,r8
80012612:	c0 71       	brne	80012620 <mavlink_receive_handler+0x82>
		{
			handle_mavlink_message(&rec);
80012614:	ee c8 01 20 	sub	r8,r7,288
80012618:	10 9c       	mov	r12,r8
8001261a:	f0 16 01 81 	mcall	r6[1540]
8001261e:	c0 c8       	rjmp	80012636 <mavlink_receive_handler+0x98>
		}else if (rec.msg.msgid == MAVLINK_MSG_ID_GLOBAL_POSITION_INT)
80012620:	ef 39 fe e7 	ld.ub	r9,r7[-281]
80012624:	32 18       	mov	r8,33
80012626:	f0 09 18 00 	cp.b	r9,r8
8001262a:	c0 61       	brne	80012636 <mavlink_receive_handler+0x98>
			//dbg_print_num(rec.msg.sysid, 10);
			//dbg_print(" for component");
			//dbg_print_num(rec.msg.compid,10);
			//dbg_print( "\n");
			
			read_msg_from_neighbors(&rec);
8001262c:	ee c8 01 20 	sub	r8,r7,288
80012630:	10 9c       	mov	r12,r8
80012632:	f0 16 01 46 	mcall	r6[1304]
		}
		
	}
}
80012636:	2b 8d       	sub	sp,-288
80012638:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001263c:	80 01       	ld.sh	r1,r0[0x0]
8001263e:	24 2e       	sub	lr,66

80012640 <init_mavlink>:

void init_mavlink(byte_stream_t *transmit_stream, byte_stream_t *receive_stream, int sysid) {
80012640:	eb cd 40 c0 	pushm	r6-r7,lr
80012644:	1a 97       	mov	r7,sp
80012646:	20 3d       	sub	sp,12
80012648:	4a 36       	lddpc	r6,800126d4 <init_mavlink+0x94>
8001264a:	1e 26       	rsub	r6,pc
8001264c:	ef 4c ff fc 	st.w	r7[-4],r12
80012650:	ef 4b ff f8 	st.w	r7[-8],r11
80012654:	ef 4a ff f4 	st.w	r7[-12],r10
	mavlink_system.sysid = sysid; // System ID, 1-255
80012658:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001265c:	5c 58       	castu.b	r8
8001265e:	ec f9 00 74 	ld.w	r9,r6[116]
80012662:	b2 88       	st.b	r9[0x0],r8
	mavlink_system.compid = 50; // Component/Subsystem ID, 1-255
80012664:	ec f9 00 74 	ld.w	r9,r6[116]
80012668:	33 28       	mov	r8,50
8001266a:	b2 98       	st.b	r9[0x1],r8
	mavlink_system.type = MAV_TYPE_QUADROTOR;
8001266c:	ec f9 00 74 	ld.w	r9,r6[116]
80012670:	30 28       	mov	r8,2
80012672:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_mission_planner.sysid = mavlink_system.sysid;
80012674:	ec f8 00 74 	ld.w	r8,r6[116]
80012678:	11 88       	ld.ub	r8,r8[0x0]
8001267a:	ec f9 00 c8 	ld.w	r9,r6[200]
8001267e:	b2 88       	st.b	r9[0x0],r8
	mavlink_mission_planner.compid = MAV_COMP_ID_MISSIONPLANNER;
80012680:	ec f9 00 c8 	ld.w	r9,r6[200]
80012684:	3b e8       	mov	r8,-66
80012686:	b2 98       	st.b	r9[0x1],r8
	mavlink_mission_planner.type = MAV_TYPE_QUADROTOR;
80012688:	ec f9 00 c8 	ld.w	r9,r6[200]
8001268c:	30 28       	mov	r8,2
8001268e:	b2 a8       	st.b	r9[0x2],r8
	
	mavlink_out_stream = transmit_stream;
80012690:	ee f9 ff fc 	ld.w	r9,r7[-4]
80012694:	ec f8 01 68 	ld.w	r8,r6[360]
80012698:	91 09       	st.w	r8[0x0],r9
	mavlink_in_stream = receive_stream;
8001269a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001269e:	ec f8 04 f8 	ld.w	r8,r6[1272]
800126a2:	91 09       	st.w	r8[0x0],r9
	
	init_scheduler(&mavlink_tasks);
800126a4:	ec f8 01 2c 	ld.w	r8,r6[300]
800126a8:	10 9c       	mov	r12,r8
800126aa:	f0 16 01 11 	mcall	r6[1092]
	
	add_task(&mavlink_tasks, 100000, RUN_REGULAR, &send_scheduled_parameters, MAVLINK_MSG_ID_PARAM_VALUE);
800126ae:	ec f9 05 50 	ld.w	r9,r6[1360]
800126b2:	ec fc 01 2c 	ld.w	r12,r6[300]
800126b6:	31 68       	mov	r8,22
800126b8:	30 2a       	mov	r10,2
800126ba:	e0 7b 86 a0 	mov	r11,100000
800126be:	f0 16 00 25 	mcall	r6[148]

	centralData = get_central_data();
800126c2:	f0 16 00 33 	mcall	r6[204]
800126c6:	18 99       	mov	r9,r12
800126c8:	ec f8 00 00 	ld.w	r8,r6[0]
800126cc:	91 09       	st.w	r8[0x0],r9
}
800126ce:	2f dd       	sub	sp,-12
800126d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800126d4:	80 01       	ld.sh	r1,r0[0x0]
800126d6:	24 ce       	sub	lr,76

800126d8 <flush_mavlink>:

void flush_mavlink() {
800126d8:	eb cd 40 c0 	pushm	r6-r7,lr
800126dc:	1a 97       	mov	r7,sp
800126de:	48 b6       	lddpc	r6,80012708 <flush_mavlink+0x30>
800126e0:	1e 26       	rsub	r6,pc
	if (mavlink_out_stream->flush!=NULL) {
800126e2:	ec f8 01 68 	ld.w	r8,r6[360]
800126e6:	70 08       	ld.w	r8,r8[0x0]
800126e8:	70 28       	ld.w	r8,r8[0x8]
800126ea:	58 08       	cp.w	r8,0
800126ec:	c0 b0       	breq	80012702 <flush_mavlink+0x2a>
		//mavlink_out_stream->buffer_empty(mavlink_out_stream->data);
		mavlink_out_stream->flush(mavlink_out_stream->data);	
800126ee:	ec f8 01 68 	ld.w	r8,r6[360]
800126f2:	70 08       	ld.w	r8,r8[0x0]
800126f4:	70 28       	ld.w	r8,r8[0x8]
800126f6:	ec f9 01 68 	ld.w	r9,r6[360]
800126fa:	72 09       	ld.w	r9,r9[0x0]
800126fc:	72 59       	ld.w	r9,r9[0x14]
800126fe:	12 9c       	mov	r12,r9
80012700:	5d 18       	icall	r8
	
	}
}
80012702:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012706:	00 00       	add	r0,r0
80012708:	80 01       	ld.sh	r1,r0[0x0]
8001270a:	25 64       	sub	r4,86

8001270c <mavlink_protocol_update>:

task_return_t mavlink_protocol_update() {
8001270c:	eb cd 40 c0 	pushm	r6-r7,lr
80012710:	1a 97       	mov	r7,sp
80012712:	20 1d       	sub	sp,4
80012714:	49 c6       	lddpc	r6,80012784 <mavlink_protocol_update+0x78>
80012716:	1e 26       	rsub	r6,pc
	task_return_t result=0;
80012718:	30 08       	mov	r8,0
8001271a:	ef 48 ff fc 	st.w	r7[-4],r8
	mavlink_receive_handler();
8001271e:	f0 16 02 2d 	mcall	r6[2228]
	if ((mavlink_out_stream->buffer_empty(mavlink_out_stream->data))==true) {
80012722:	ec f8 01 68 	ld.w	r8,r6[360]
80012726:	70 08       	ld.w	r8,r8[0x0]
80012728:	70 38       	ld.w	r8,r8[0xc]
8001272a:	ec f9 01 68 	ld.w	r9,r6[360]
8001272e:	72 09       	ld.w	r9,r9[0x0]
80012730:	72 59       	ld.w	r9,r9[0x14]
80012732:	12 9c       	mov	r12,r9
80012734:	5d 18       	icall	r8
80012736:	18 98       	mov	r8,r12
80012738:	58 18       	cp.w	r8,1
8001273a:	c0 c1       	brne	80012752 <mavlink_protocol_update+0x46>
		result = run_scheduler_update(&mavlink_tasks, ROUND_ROBIN);
8001273c:	ec f8 01 2c 	ld.w	r8,r6[300]
80012740:	30 0b       	mov	r11,0
80012742:	10 9c       	mov	r12,r8
80012744:	f0 16 00 f4 	mcall	r6[976]
80012748:	18 98       	mov	r8,r12
8001274a:	ef 48 ff fc 	st.w	r7[-4],r8
		flush_mavlink();
8001274e:	f0 16 00 3c 	mcall	r6[240]
	}
	
	control_time_out_waypoint_msg(&(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012752:	ec f8 00 00 	ld.w	r8,r6[0]
80012756:	70 08       	ld.w	r8,r8[0x0]
80012758:	f0 ca f3 03 	sub	r10,r8,-3325
8001275c:	ec f8 00 00 	ld.w	r8,r6[0]
80012760:	70 08       	ld.w	r8,r8[0x0]
80012762:	f0 c9 f3 02 	sub	r9,r8,-3326
80012766:	ec f8 00 00 	ld.w	r8,r6[0]
8001276a:	70 08       	ld.w	r8,r8[0x0]
8001276c:	f0 c8 f3 9c 	sub	r8,r8,-3172
80012770:	12 9b       	mov	r11,r9
80012772:	10 9c       	mov	r12,r8
80012774:	f0 16 02 17 	mcall	r6[2140]
	
	
	return result;
80012778:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001277c:	10 9c       	mov	r12,r8
8001277e:	2f fd       	sub	sp,-4
80012780:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012784:	80 01       	ld.sh	r1,r0[0x0]
80012786:	25 9a       	sub	r10,89

80012788 <get_mavlink_taskset>:

task_set* get_mavlink_taskset() {
80012788:	eb cd 40 c0 	pushm	r6-r7,lr
8001278c:	1a 97       	mov	r7,sp
8001278e:	48 46       	lddpc	r6,8001279c <get_mavlink_taskset+0x14>
80012790:	1e 26       	rsub	r6,pc
	return &mavlink_tasks;
80012792:	ec f8 01 2c 	ld.w	r8,r6[300]
}
80012796:	10 9c       	mov	r12,r8
80012798:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001279c:	80 01       	ld.sh	r1,r0[0x0]
8001279e:	26 14       	sub	r4,97

800127a0 <suspend_downstream>:

void suspend_downstream(uint32_t delay) {
800127a0:	eb cd 40 c0 	pushm	r6-r7,lr
800127a4:	1a 97       	mov	r7,sp
800127a6:	20 2d       	sub	sp,8
800127a8:	49 56       	lddpc	r6,800127fc <suspend_downstream+0x5c>
800127aa:	1e 26       	rsub	r6,pc
800127ac:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800127b0:	30 08       	mov	r8,0
800127b2:	ef 48 ff fc 	st.w	r7[-4],r8
800127b6:	c1 78       	rjmp	800127e4 <suspend_downstream+0x44>
		suspend_task(&mavlink_tasks.tasks[i], delay);
800127b8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800127bc:	12 98       	mov	r8,r9
800127be:	a1 78       	lsl	r8,0x1
800127c0:	12 08       	add	r8,r9
800127c2:	a5 68       	lsl	r8,0x4
800127c4:	10 99       	mov	r9,r8
800127c6:	ec f8 01 2c 	ld.w	r8,r6[300]
800127ca:	2f c8       	sub	r8,-4
800127cc:	f2 08 00 08 	add	r8,r9,r8
800127d0:	ee fb ff f8 	ld.w	r11,r7[-8]
800127d4:	10 9c       	mov	r12,r8
800127d6:	f0 16 01 c6 	mcall	r6[1816]
	return &mavlink_tasks;
}

void suspend_downstream(uint32_t delay) {
	int i;
	for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
800127da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127de:	2f f8       	sub	r8,-1
800127e0:	ef 48 ff fc 	st.w	r7[-4],r8
800127e4:	ec f8 01 2c 	ld.w	r8,r6[300]
800127e8:	11 88       	ld.ub	r8,r8[0x0]
800127ea:	10 99       	mov	r9,r8
800127ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800127f0:	10 39       	cp.w	r9,r8
800127f2:	fe 99 ff e3 	brgt	800127b8 <suspend_downstream+0x18>
		suspend_task(&mavlink_tasks.tasks[i], delay);
	}	
}
800127f6:	2f ed       	sub	sp,-8
800127f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800127fc:	80 01       	ld.sh	r1,r0[0x0]
800127fe:	26 2e       	sub	lr,98

80012800 <mavlink_receive>:

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
80012800:	eb cd 40 c0 	pushm	r6-r7,lr
80012804:	1a 97       	mov	r7,sp
80012806:	20 3d       	sub	sp,12
80012808:	49 a6       	lddpc	r6,80012870 <mavlink_receive+0x70>
8001280a:	1e 26       	rsub	r6,pc
8001280c:	ef 4c ff f8 	st.w	r7[-8],r12
80012810:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
80012814:	c1 d8       	rjmp	8001284e <mavlink_receive+0x4e>
		byte = stream->get(stream->data);
80012816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001281a:	70 08       	ld.w	r8,r8[0x0]
8001281c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012820:	72 59       	ld.w	r9,r9[0x14]
80012822:	12 9c       	mov	r12,r9
80012824:	5d 18       	icall	r8
80012826:	18 98       	mov	r8,r12
80012828:	ef 68 ff ff 	st.b	r7[-1],r8
		//dbg_print(".");
		// dbg_print_num(byte, 16);
		// dbg_print(" ");
		if(mavlink_parse_char(MAVLINK_COMM_0, byte, &rec->msg, &rec->status)) {
8001282c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012830:	f0 c9 fe f0 	sub	r9,r8,-272
80012834:	ee fa ff f4 	ld.w	r10,r7[-12]
80012838:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001283c:	10 9b       	mov	r11,r8
8001283e:	30 0c       	mov	r12,0
80012840:	fe b0 f9 32 	rcall	80011aa4 <mavlink_parse_char>
80012844:	18 98       	mov	r8,r12
80012846:	58 08       	cp.w	r8,0
80012848:	c0 30       	breq	8001284e <mavlink_receive+0x4e>
			// dbg_print("\n");
			return 1;
8001284a:	30 18       	mov	r8,1
8001284c:	c0 e8       	rjmp	80012868 <mavlink_receive+0x68>
}

uint8_t mavlink_receive(byte_stream_t* stream, Mavlink_Received_t* rec) {
	uint8_t byte;
	//dbg_print(" ");
	while(stream->bytes_available(stream->data) > 0) {
8001284e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80012852:	70 48       	ld.w	r8,r8[0x10]
80012854:	ee f9 ff f8 	ld.w	r9,r7[-8]
80012858:	72 59       	ld.w	r9,r9[0x14]
8001285a:	12 9c       	mov	r12,r9
8001285c:	5d 18       	icall	r8
8001285e:	18 98       	mov	r8,r12
80012860:	58 08       	cp.w	r8,0
80012862:	fe 99 ff da 	brgt	80012816 <mavlink_receive+0x16>
			return 1;
		}
		// dbg_print_num(rec->status.parse_state, 16);
		// dbg_print("\n");
	}
	return 0;
80012866:	30 08       	mov	r8,0
}
80012868:	10 9c       	mov	r12,r8
8001286a:	2f dd       	sub	sp,-12
8001286c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012870:	80 01       	ld.sh	r1,r0[0x0]
80012872:	26 8e       	sub	lr,104
80012874:	6d 73       	ld.w	r3,r6[0x5c]
80012876:	67 20       	ld.w	r0,r3[0x48]
80012878:	63 6f       	ld.w	pc,r1[0x58]
8001287a:	6d 70       	ld.w	r0,r6[0x5c]
8001287c:	20 69       	sub	r9,6
8001287e:	64 3a       	ld.w	r10,r2[0xc]
80012880:	00 00       	add	r0,r0
80012882:	00 00       	add	r0,r0
80012884:	73 74       	ld.w	r4,r9[0x5c]
80012886:	72 65       	ld.w	r5,r9[0x18]
80012888:	61 6d       	ld.w	sp,r0[0x58]
8001288a:	20 72       	sub	r2,7
8001288c:	65 71       	ld.w	r1,r2[0x5c]
8001288e:	75 65       	ld.w	r5,r10[0x58]
80012890:	73 74       	ld.w	r4,r9[0x5c]
80012892:	3a 00       	mov	r0,-96
80012894:	73 65       	ld.w	r5,r9[0x58]
80012896:	6e 64       	ld.w	r4,r7[0x18]
80012898:	20 61       	sub	r1,6
8001289a:	6c 6c       	ld.w	r12,r6[0x18]
8001289c:	0a 00       	add	r0,r5
8001289e:	00 00       	add	r0,r0
800128a0:	20 73       	sub	r3,7
800128a2:	74 72       	ld.w	r2,r10[0x1c]
800128a4:	65 61       	ld.w	r1,r2[0x58]
800128a6:	6d 3d       	ld.w	sp,r6[0x4c]
800128a8:	00 00       	add	r0,r0
800128aa:	00 00       	add	r0,r0
800128ac:	20 73       	sub	r3,7
800128ae:	74 61       	ld.w	r1,r10[0x18]
800128b0:	72 74       	ld.w	r4,r9[0x1c]
800128b2:	5f 73       	srpl	r3
800128b4:	74 6f       	ld.w	pc,r10[0x18]
800128b6:	70 3d       	ld.w	sp,r8[0xc]
800128b8:	00 00       	add	r0,r0
800128ba:	00 00       	add	r0,r0
800128bc:	20 72       	sub	r2,7
800128be:	61 74       	ld.w	r4,r0[0x5c]
800128c0:	65 3d       	ld.w	sp,r2[0x4c]
	...

800128c4 <handle_mavlink_message>:

void handle_mavlink_message(Mavlink_Received_t* rec) {
800128c4:	eb cd 40 c0 	pushm	r6-r7,lr
800128c8:	1a 97       	mov	r7,sp
800128ca:	20 cd       	sub	sp,48
800128cc:	fe f6 04 90 	ld.w	r6,pc[1168]
800128d0:	1e 26       	rsub	r6,pc
800128d2:	ef 4c ff d0 	st.w	r7[-48],r12
	
	switch(rec->msg.msgid) {
800128d6:	ee f8 ff d0 	ld.w	r8,r7[-48]
800128da:	11 f8       	ld.ub	r8,r8[0x7]
800128dc:	20 b8       	sub	r8,11
800128de:	e0 48 00 41 	cp.w	r8,65
800128e2:	e0 8b 02 3a 	brhi	80012d56 <handle_mavlink_message+0x492>
800128e6:	fe c9 ff f6 	sub	r9,pc,-10
800128ea:	f2 08 00 2f 	add	pc,r9,r8<<0x2
800128ee:	00 00       	add	r0,r0
800128f0:	e0 8f 01 6b 	bral	80012bc6 <handle_mavlink_message+0x302>
800128f4:	e0 8f 02 31 	bral	80012d56 <handle_mavlink_message+0x492>
800128f8:	e0 8f 02 2f 	bral	80012d56 <handle_mavlink_message+0x492>
800128fc:	e0 8f 02 2d 	bral	80012d56 <handle_mavlink_message+0x492>
80012900:	e0 8f 02 2b 	bral	80012d56 <handle_mavlink_message+0x492>
80012904:	e0 8f 02 29 	bral	80012d56 <handle_mavlink_message+0x492>
80012908:	e0 8f 02 27 	bral	80012d56 <handle_mavlink_message+0x492>
8001290c:	e0 8f 02 25 	bral	80012d56 <handle_mavlink_message+0x492>
80012910:	e0 8f 02 23 	bral	80012d56 <handle_mavlink_message+0x492>
80012914:	e0 8f 00 95 	bral	80012a3e <handle_mavlink_message+0x17a>
80012918:	e0 8f 00 70 	bral	800129f8 <handle_mavlink_message+0x134>
8001291c:	e0 8f 02 1d 	bral	80012d56 <handle_mavlink_message+0x492>
80012920:	e0 8f 00 b0 	bral	80012a80 <handle_mavlink_message+0x1bc>
80012924:	e0 8f 02 19 	bral	80012d56 <handle_mavlink_message+0x492>
80012928:	e0 8f 02 17 	bral	80012d56 <handle_mavlink_message+0x492>
8001292c:	e0 8f 02 15 	bral	80012d56 <handle_mavlink_message+0x492>
80012930:	e0 8f 02 13 	bral	80012d56 <handle_mavlink_message+0x492>
80012934:	e0 8f 02 11 	bral	80012d56 <handle_mavlink_message+0x492>
80012938:	e0 8f 02 0f 	bral	80012d56 <handle_mavlink_message+0x492>
8001293c:	e0 8f 02 0d 	bral	80012d56 <handle_mavlink_message+0x492>
80012940:	e0 8f 02 0b 	bral	80012d56 <handle_mavlink_message+0x492>
80012944:	e0 8f 02 09 	bral	80012d56 <handle_mavlink_message+0x492>
80012948:	e0 8f 02 07 	bral	80012d56 <handle_mavlink_message+0x492>
8001294c:	e0 8f 02 05 	bral	80012d56 <handle_mavlink_message+0x492>
80012950:	e0 8f 02 03 	bral	80012d56 <handle_mavlink_message+0x492>
80012954:	e0 8f 02 01 	bral	80012d56 <handle_mavlink_message+0x492>
80012958:	e0 8f 01 ff 	bral	80012d56 <handle_mavlink_message+0x492>
8001295c:	e0 8f 01 fd 	bral	80012d56 <handle_mavlink_message+0x492>
80012960:	e0 8f 00 9a 	bral	80012a94 <handle_mavlink_message+0x1d0>
80012964:	e0 8f 00 b4 	bral	80012acc <handle_mavlink_message+0x208>
80012968:	e0 8f 00 cd 	bral	80012b02 <handle_mavlink_message+0x23e>
8001296c:	e0 8f 01 f5 	bral	80012d56 <handle_mavlink_message+0x492>
80012970:	e0 8f 00 dc 	bral	80012b28 <handle_mavlink_message+0x264>
80012974:	e0 8f 00 f4 	bral	80012b5c <handle_mavlink_message+0x298>
80012978:	e0 8f 01 0b 	bral	80012b8e <handle_mavlink_message+0x2ca>
8001297c:	e0 8f 01 ed 	bral	80012d56 <handle_mavlink_message+0x492>
80012980:	e0 8f 01 18 	bral	80012bb0 <handle_mavlink_message+0x2ec>
80012984:	e0 8f 01 e9 	bral	80012d56 <handle_mavlink_message+0x492>
80012988:	e0 8f 01 e7 	bral	80012d56 <handle_mavlink_message+0x492>
8001298c:	e0 8f 01 e5 	bral	80012d56 <handle_mavlink_message+0x492>
80012990:	e0 8f 01 e3 	bral	80012d56 <handle_mavlink_message+0x492>
80012994:	e0 8f 01 e1 	bral	80012d56 <handle_mavlink_message+0x492>
80012998:	e0 8f 01 df 	bral	80012d56 <handle_mavlink_message+0x492>
8001299c:	e0 8f 01 dd 	bral	80012d56 <handle_mavlink_message+0x492>
800129a0:	e0 8f 01 db 	bral	80012d56 <handle_mavlink_message+0x492>
800129a4:	e0 8f 01 d9 	bral	80012d56 <handle_mavlink_message+0x492>
800129a8:	e0 8f 01 d7 	bral	80012d56 <handle_mavlink_message+0x492>
800129ac:	e0 8f 01 d5 	bral	80012d56 <handle_mavlink_message+0x492>
800129b0:	e0 8f 01 d3 	bral	80012d56 <handle_mavlink_message+0x492>
800129b4:	e0 8f 01 d1 	bral	80012d56 <handle_mavlink_message+0x492>
800129b8:	e0 8f 01 cf 	bral	80012d56 <handle_mavlink_message+0x492>
800129bc:	e0 8f 01 cd 	bral	80012d56 <handle_mavlink_message+0x492>
800129c0:	e0 8f 01 cb 	bral	80012d56 <handle_mavlink_message+0x492>
800129c4:	e0 8f 01 c9 	bral	80012d56 <handle_mavlink_message+0x492>
800129c8:	e0 8f 01 c7 	bral	80012d56 <handle_mavlink_message+0x492>
800129cc:	e0 8f 01 19 	bral	80012bfe <handle_mavlink_message+0x33a>
800129d0:	e0 8f 01 c3 	bral	80012d56 <handle_mavlink_message+0x492>
800129d4:	e0 8f 01 c1 	bral	80012d56 <handle_mavlink_message+0x492>
800129d8:	e0 8f 01 bf 	bral	80012d56 <handle_mavlink_message+0x492>
800129dc:	e0 8f 01 bd 	bral	80012d56 <handle_mavlink_message+0x492>
800129e0:	e0 8f 01 bb 	bral	80012d56 <handle_mavlink_message+0x492>
800129e4:	e0 8f 01 b9 	bral	80012d56 <handle_mavlink_message+0x492>
800129e8:	e0 8f 01 b7 	bral	80012d56 <handle_mavlink_message+0x492>
800129ec:	e0 8f 01 b5 	bral	80012d56 <handle_mavlink_message+0x492>
800129f0:	e0 8f 01 b3 	bral	80012d56 <handle_mavlink_message+0x492>
800129f4:	e0 8f 01 00 	bral	80012bf4 <handle_mavlink_message+0x330>
		case MAVLINK_MSG_ID_PARAM_REQUEST_LIST: { // 21
			mavlink_param_request_list_t request;
			mavlink_msg_param_request_list_decode(&rec->msg, &request);
800129f8:	ee f8 ff d0 	ld.w	r8,r7[-48]
800129fc:	ee c9 00 12 	sub	r9,r7,18
80012a00:	12 9b       	mov	r11,r9
80012a02:	10 9c       	mov	r12,r8
80012a04:	fe b0 fb bb 	rcall	8001217a <mavlink_msg_param_request_list_decode>
			
			dbg_print("msg comp id:");
80012a08:	fe cc 01 94 	sub	r12,pc,404
80012a0c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(request.target_component,10);
80012a10:	ef 38 ff ef 	ld.ub	r8,r7[-17]
80012a14:	30 ab       	mov	r11,10
80012a16:	10 9c       	mov	r12,r8
80012a18:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80012a1c:	fe cc 04 80 	sub	r12,pc,1152
80012a20:	f0 16 00 01 	mcall	r6[4]
			
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
80012a24:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80012a28:	ec f8 00 74 	ld.w	r8,r6[116]
80012a2c:	11 88       	ld.ub	r8,r8[0x0]
80012a2e:	f0 09 18 00 	cp.b	r9,r8
80012a32:	e0 81 01 8d 	brne	80012d4c <handle_mavlink_message+0x488>
				send_all_parameters();
80012a36:	f0 16 01 5d 	mcall	r6[1396]
			}				
		}
		break;
80012a3a:	e0 8f 01 8e 	bral	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
80012a3e:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012a42:	ee c9 00 26 	sub	r9,r7,38
80012a46:	12 9b       	mov	r11,r9
80012a48:	10 9c       	mov	r12,r8
80012a4a:	fe b0 fb 4f 	rcall	800120e8 <mavlink_msg_param_request_read_decode>
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012a4e:	ef 39 ff dc 	ld.ub	r9,r7[-36]
80012a52:	ec f8 00 74 	ld.w	r8,r6[116]
80012a56:	11 88       	ld.ub	r8,r8[0x0]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012a58:	f0 09 18 00 	cp.b	r9,r8
80012a5c:	e0 81 01 7a 	brne	80012d50 <handle_mavlink_message+0x48c>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {
80012a60:	ef 39 ff dd 	ld.ub	r9,r7[-35]
80012a64:	ec f8 00 74 	ld.w	r8,r6[116]
80012a68:	11 98       	ld.ub	r8,r8[0x1]
		break;
		case MAVLINK_MSG_ID_PARAM_REQUEST_READ: { //20
			mavlink_param_request_read_t request;
			mavlink_msg_param_request_read_decode(&rec->msg, &request);
			// Check if this message is for this system and subsystem
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012a6a:	f0 09 18 00 	cp.b	r9,r8
80012a6e:	e0 81 01 73 	brne	80012d54 <handle_mavlink_message+0x490>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
80012a72:	ee c8 00 26 	sub	r8,r7,38
80012a76:	10 9c       	mov	r12,r8
80012a78:	f0 16 01 57 	mcall	r6[1372]
			}				
		}
		break;
80012a7c:	e0 8f 01 6d 	bral	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_PARAM_SET: { //23
			suspend_downstream(100000);
80012a80:	e0 7c 86 a0 	mov	r12,100000
80012a84:	f0 16 00 7b 	mcall	r6[492]
			receive_parameter(rec);
80012a88:	ee fc ff d0 	ld.w	r12,r7[-48]
80012a8c:	f0 16 01 80 	mcall	r6[1536]
		}
		break;
80012a90:	e0 8f 01 63 	bral	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ITEM: { // 39
			suspend_downstream(500000);
80012a94:	e6 7c a1 20 	mov	r12,500000
80012a98:	f0 16 00 7b 	mcall	r6[492]
			receive_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_receiving);
80012a9c:	ec f8 00 00 	ld.w	r8,r6[0]
80012aa0:	70 08       	ld.w	r8,r8[0x0]
80012aa2:	f0 c9 f3 02 	sub	r9,r8,-3326
80012aa6:	ec f8 00 00 	ld.w	r8,r6[0]
80012aaa:	70 08       	ld.w	r8,r8[0x0]
80012aac:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80012ab0:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80012ab4:	ec f8 00 00 	ld.w	r8,r6[0]
80012ab8:	70 08       	ld.w	r8,r8[0x0]
80012aba:	f0 c8 f5 ac 	sub	r8,r8,-2644
80012abe:	10 9b       	mov	r11,r8
80012ac0:	ee fc ff d0 	ld.w	r12,r7[-48]
80012ac4:	f0 16 01 70 	mcall	r6[1472]
		}
		break;
80012ac8:	e0 8f 01 47 	bral	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST : { // 40
			suspend_downstream(500000);
80012acc:	e6 7c a1 20 	mov	r12,500000
80012ad0:	f0 16 00 7b 	mcall	r6[492]
			send_waypoint(rec, centralData->waypoint_list, centralData->number_of_waypoints,&centralData->waypoint_sending);
80012ad4:	ec f8 00 00 	ld.w	r8,r6[0]
80012ad8:	70 08       	ld.w	r8,r8[0x0]
80012ada:	f0 c9 f3 03 	sub	r9,r8,-3325
80012ade:	ec f8 00 00 	ld.w	r8,r6[0]
80012ae2:	70 08       	ld.w	r8,r8[0x0]
80012ae4:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80012ae8:	f5 d8 c0 10 	bfextu	r10,r8,0x0,0x10
80012aec:	ec f8 00 00 	ld.w	r8,r6[0]
80012af0:	70 08       	ld.w	r8,r8[0x0]
80012af2:	f0 c8 f5 ac 	sub	r8,r8,-2644
80012af6:	10 9b       	mov	r11,r8
80012af8:	ee fc ff d0 	ld.w	r12,r7[-48]
80012afc:	f0 16 01 91 	mcall	r6[1604]
		}
		break;
80012b00:	c2 b9       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_SET_CURRENT : { // 41
			set_current_wp(rec, &(centralData->waypoint_list), centralData->number_of_waypoints);
80012b02:	ec f8 00 00 	ld.w	r8,r6[0]
80012b06:	70 08       	ld.w	r8,r8[0x0]
80012b08:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80012b0c:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012b10:	ec f8 00 00 	ld.w	r8,r6[0]
80012b14:	70 08       	ld.w	r8,r8[0x0]
80012b16:	f0 c8 f5 ac 	sub	r8,r8,-2644
80012b1a:	12 9a       	mov	r10,r9
80012b1c:	10 9b       	mov	r11,r8
80012b1e:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b22:	f0 16 01 7d 	mcall	r6[1524]
		}
		break;
80012b26:	c1 89       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_REQUEST_LIST: { // 43
			// this initiates all waypoints being sent to the base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80012b28:	e6 7c a1 20 	mov	r12,500000
80012b2c:	f0 16 00 7b 	mcall	r6[492]
			send_count(rec, centralData->number_of_waypoints,&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012b30:	ec f8 00 00 	ld.w	r8,r6[0]
80012b34:	70 08       	ld.w	r8,r8[0x0]
80012b36:	f0 c9 f3 03 	sub	r9,r8,-3325
80012b3a:	ec f8 00 00 	ld.w	r8,r6[0]
80012b3e:	70 08       	ld.w	r8,r8[0x0]
80012b40:	f0 ca f3 02 	sub	r10,r8,-3326
80012b44:	ec f8 00 00 	ld.w	r8,r6[0]
80012b48:	70 08       	ld.w	r8,r8[0x0]
80012b4a:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80012b4e:	5c 78       	castu.h	r8
80012b50:	10 9b       	mov	r11,r8
80012b52:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b56:	f0 16 01 b0 	mcall	r6[1728]
		}
		break;
80012b5a:	cf e8       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_COUNT : { // 44
			// this initiates all waypoints being sent from base-station - therefore, we pause the downstream telemetry to free the channel
			// (at least until we have a radio system with guaranteed bandwidth)
			suspend_downstream(500000);
80012b5c:	e6 7c a1 20 	mov	r12,500000
80012b60:	f0 16 00 7b 	mcall	r6[492]
			receive_count(rec, &(centralData->number_of_waypoints),&centralData->waypoint_receiving,&centralData->waypoint_sending);
80012b64:	ec f8 00 00 	ld.w	r8,r6[0]
80012b68:	70 08       	ld.w	r8,r8[0x0]
80012b6a:	f0 c9 f3 03 	sub	r9,r8,-3325
80012b6e:	ec f8 00 00 	ld.w	r8,r6[0]
80012b72:	70 08       	ld.w	r8,r8[0x0]
80012b74:	f0 ca f3 02 	sub	r10,r8,-3326
80012b78:	ec f8 00 00 	ld.w	r8,r6[0]
80012b7c:	70 08       	ld.w	r8,r8[0x0]
80012b7e:	f0 c8 f3 9c 	sub	r8,r8,-3172
80012b82:	10 9b       	mov	r11,r8
80012b84:	ee fc ff d0 	ld.w	r12,r7[-48]
80012b88:	f0 16 02 2a 	mcall	r6[2216]
		}
		break;
80012b8c:	ce 58       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_CLEAR_ALL : { // 45
			clear_waypoint_list(rec, &(centralData->number_of_waypoints),&centralData->waypoint_set);
80012b8e:	ec f8 00 00 	ld.w	r8,r6[0]
80012b92:	70 08       	ld.w	r8,r8[0x0]
80012b94:	f0 c9 f3 04 	sub	r9,r8,-3324
80012b98:	ec f8 00 00 	ld.w	r8,r6[0]
80012b9c:	70 08       	ld.w	r8,r8[0x0]
80012b9e:	f0 c8 f3 9c 	sub	r8,r8,-3172
80012ba2:	12 9a       	mov	r10,r9
80012ba4:	10 9b       	mov	r11,r8
80012ba6:	ee fc ff d0 	ld.w	r12,r7[-48]
80012baa:	f0 16 01 86 	mcall	r6[1560]
		}
		break;
80012bae:	cd 48       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_MISSION_ACK : { // 47
			receive_ack_msg(rec,&centralData->waypoint_sending);
80012bb0:	ec f8 00 00 	ld.w	r8,r6[0]
80012bb4:	70 08       	ld.w	r8,r8[0x0]
80012bb6:	f0 c8 f3 03 	sub	r8,r8,-3325
80012bba:	10 9b       	mov	r11,r8
80012bbc:	ee fc ff d0 	ld.w	r12,r7[-48]
80012bc0:	f0 16 01 f9 	mcall	r6[2020]
		}
		break;
80012bc4:	cc 98       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_SET_MODE : { // 11
			set_mav_mode(rec, &centralData->mav_mode, &(centralData->mav_state),centralData->simulation_mode);
80012bc6:	ec f8 00 00 	ld.w	r8,r6[0]
80012bca:	70 08       	ld.w	r8,r8[0x0]
80012bcc:	f0 f8 0d 08 	ld.w	r8,r8[3336]
80012bd0:	5c 58       	castu.b	r8
80012bd2:	10 99       	mov	r9,r8
80012bd4:	ec f8 00 00 	ld.w	r8,r6[0]
80012bd8:	70 08       	ld.w	r8,r8[0x0]
80012bda:	f0 ca f2 fb 	sub	r10,r8,-3333
80012bde:	ec f8 00 00 	ld.w	r8,r6[0]
80012be2:	70 08       	ld.w	r8,r8[0x0]
80012be4:	f0 c8 f2 fc 	sub	r8,r8,-3332
80012be8:	10 9b       	mov	r11,r8
80012bea:	ee fc ff d0 	ld.w	r12,r7[-48]
80012bee:	f0 16 01 d5 	mcall	r6[1876]
		}
		break;
80012bf2:	cb 28       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_COMMAND_LONG : { // 76
			receive_message_long(rec);
80012bf4:	ee fc ff d0 	ld.w	r12,r7[-48]
80012bf8:	f0 16 01 8c 	mcall	r6[1584]
		}
		break;		
80012bfc:	ca d8       	rjmp	80012d56 <handle_mavlink_message+0x492>
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
80012bfe:	ee f8 ff d0 	ld.w	r8,r7[-48]
80012c02:	ee c9 00 2c 	sub	r9,r7,44
80012c06:	12 9b       	mov	r11,r9
80012c08:	10 9c       	mov	r12,r8
80012c0a:	fe b0 fb 26 	rcall	80012256 <mavlink_msg_request_data_stream_decode>
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012c0e:	ef 39 ff d6 	ld.ub	r9,r7[-42]
80012c12:	ec f8 00 74 	ld.w	r8,r6[116]
80012c16:	11 88       	ld.ub	r8,r8[0x0]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012c18:	f0 09 18 00 	cp.b	r9,r8
80012c1c:	e0 81 00 9d 	brne	80012d56 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
80012c20:	ef 39 ff d7 	ld.ub	r9,r7[-41]
80012c24:	ec f8 00 74 	ld.w	r8,r6[116]
80012c28:	11 98       	ld.ub	r8,r8[0x1]
		break;		
		case MAVLINK_MSG_ID_REQUEST_DATA_STREAM: { // 66
			mavlink_request_data_stream_t request;
			mavlink_msg_request_data_stream_decode(&rec->msg, &request);
			// TODO: control target_component == compid!
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid
80012c2a:	f0 09 18 00 	cp.b	r9,r8
80012c2e:	e0 81 00 94 	brne	80012d56 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid)
			{
				dbg_print("stream request:");
80012c32:	fe cc 03 ae 	sub	r12,pc,942
80012c36:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(request.target_component,10);
80012c3a:	ef 38 ff d7 	ld.ub	r8,r7[-41]
80012c3e:	30 ab       	mov	r11,10
80012c40:	10 9c       	mov	r12,r8
80012c42:	f0 16 00 04 	mcall	r6[16]
				if (request.req_stream_id==255) {
80012c46:	ef 39 ff d8 	ld.ub	r9,r7[-40]
80012c4a:	3f f8       	mov	r8,-1
80012c4c:	f0 09 18 00 	cp.b	r9,r8
80012c50:	c2 a1       	brne	80012ca4 <handle_mavlink_message+0x3e0>
					int i;
					dbg_print("send all\n");
80012c52:	fe cc 03 be 	sub	r12,pc,958
80012c56:	f0 16 00 01 	mcall	r6[4]
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012c5a:	30 08       	mov	r8,0
80012c5c:	ef 48 ff f0 	st.w	r7[-16],r8
80012c60:	c1 88       	rjmp	80012c90 <handle_mavlink_message+0x3cc>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
80012c62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012c66:	5c 88       	casts.h	r8
80012c68:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012c6c:	ec f8 01 2c 	ld.w	r8,r6[300]
80012c70:	12 9b       	mov	r11,r9
80012c72:	10 9c       	mov	r12,r8
80012c74:	f0 16 01 bb 	mcall	r6[1772]
80012c78:	18 98       	mov	r8,r12
80012c7a:	ef 48 ff f4 	st.w	r7[-12],r8
						run_task_now(task);
80012c7e:	ee fc ff f4 	ld.w	r12,r7[-12]
80012c82:	f0 16 01 07 	mcall	r6[1052]
				dbg_print_num(request.target_component,10);
				if (request.req_stream_id==255) {
					int i;
					dbg_print("send all\n");
					// send full list of streams
					for (i=0; i<mavlink_tasks.number_of_tasks; i++) {
80012c86:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012c8a:	2f f8       	sub	r8,-1
80012c8c:	ef 48 ff f0 	st.w	r7[-16],r8
80012c90:	ec f8 01 2c 	ld.w	r8,r6[300]
80012c94:	11 88       	ld.ub	r8,r8[0x0]
80012c96:	10 99       	mov	r9,r8
80012c98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012c9c:	10 39       	cp.w	r9,r8
80012c9e:	fe 99 ff e2 	brgt	80012c62 <handle_mavlink_message+0x39e>
80012ca2:	c5 a8       	rjmp	80012d56 <handle_mavlink_message+0x492>
						task_entry *task=get_task_by_index(&mavlink_tasks, i);
						run_task_now(task);
					}					
				} else {
					int i;
					task_entry *task=get_task_by_id(&mavlink_tasks, request.req_stream_id);
80012ca4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012ca8:	10 99       	mov	r9,r8
80012caa:	ec f8 01 2c 	ld.w	r8,r6[300]
80012cae:	12 9b       	mov	r11,r9
80012cb0:	10 9c       	mov	r12,r8
80012cb2:	f0 16 01 bd 	mcall	r6[1780]
80012cb6:	18 98       	mov	r8,r12
80012cb8:	ef 48 ff fc 	st.w	r7[-4],r8
					dbg_print(" stream="); dbg_print_num(request.req_stream_id, 10);
80012cbc:	fe cc 04 1c 	sub	r12,pc,1052
80012cc0:	f0 16 00 01 	mcall	r6[4]
80012cc4:	ef 38 ff d8 	ld.ub	r8,r7[-40]
80012cc8:	30 ab       	mov	r11,10
80012cca:	10 9c       	mov	r12,r8
80012ccc:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" start_stop=");dbg_print_num(request.start_stop, 10);
80012cd0:	fe cc 04 24 	sub	r12,pc,1060
80012cd4:	f0 16 00 01 	mcall	r6[4]
80012cd8:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012cdc:	30 ab       	mov	r11,10
80012cde:	10 9c       	mov	r12,r8
80012ce0:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" rate=");dbg_print_num(request.req_message_rate,10);
80012ce4:	fe cc 04 28 	sub	r12,pc,1064
80012ce8:	f0 16 00 01 	mcall	r6[4]
80012cec:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012cf0:	5c 78       	castu.h	r8
80012cf2:	30 ab       	mov	r11,10
80012cf4:	10 9c       	mov	r12,r8
80012cf6:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
80012cfa:	fe cc 07 5e 	sub	r12,pc,1886
80012cfe:	f0 16 00 01 	mcall	r6[4]
					dbg_print("\n");
80012d02:	fe cc 07 66 	sub	r12,pc,1894
80012d06:	f0 16 00 01 	mcall	r6[4]
					if (request.start_stop) {
80012d0a:	ef 38 ff d9 	ld.ub	r8,r7[-39]
80012d0e:	58 08       	cp.w	r8,0
80012d10:	c0 70       	breq	80012d1e <handle_mavlink_message+0x45a>
						change_run_mode(task, RUN_REGULAR);
80012d12:	30 2b       	mov	r11,2
80012d14:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d18:	f0 16 00 b1 	mcall	r6[708]
80012d1c:	c0 68       	rjmp	80012d28 <handle_mavlink_message+0x464>
					}else {
						change_run_mode(task, RUN_NEVER);
80012d1e:	30 0b       	mov	r11,0
80012d20:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d24:	f0 16 00 b1 	mcall	r6[708]
					}
					if (request.req_message_rate>0) {
80012d28:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012d2c:	58 08       	cp.w	r8,0
80012d2e:	c1 40       	breq	80012d56 <handle_mavlink_message+0x492>
						change_task_period(task, SCHEDULER_TIMEBASE/(uint32_t)request.req_message_rate);
80012d30:	ef 08 ff d4 	ld.sh	r8,r7[-44]
80012d34:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80012d38:	ee 78 42 40 	mov	r8,1000000
80012d3c:	f0 09 0d 08 	divu	r8,r8,r9
80012d40:	10 9b       	mov	r11,r8
80012d42:	ee fc ff fc 	ld.w	r12,r7[-4]
80012d46:	f0 16 01 a4 	mcall	r6[1680]
80012d4a:	c0 68       	rjmp	80012d56 <handle_mavlink_message+0x492>
			// Check if this message is for this system
			if ((uint8_t)request.target_system == (uint8_t)mavlink_system.sysid) {
				send_all_parameters();
			}				
		}
		break;
80012d4c:	d7 03       	nop
80012d4e:	c0 48       	rjmp	80012d56 <handle_mavlink_message+0x492>
			&& (uint8_t)request.target_component == (uint8_t)mavlink_system.compid) {

				send_parameter(&request);
			}				
		}
		break;
80012d50:	d7 03       	nop
80012d52:	c0 28       	rjmp	80012d56 <handle_mavlink_message+0x492>
80012d54:	d7 03       	nop
		}		
		/* 
		TODO : add other cases
		*/
	}
}			
80012d56:	2f 4d       	sub	sp,-48
80012d58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80012d5c:	80 01       	ld.sh	r1,r0[0x0]
80012d5e:	27 54       	sub	r4,117
80012d60:	70 61       	ld.w	r1,r8[0x18]
80012d62:	72 61       	ld.w	r1,r9[0x18]
80012d64:	6d 65       	ld.w	r5,r6[0x58]
80012d66:	74 65       	ld.w	r5,r10[0x18]
80012d68:	72 73       	ld.w	r3,r9[0x1c]
80012d6a:	3a 00       	mov	r0,-96
80012d6c:	2c 20       	sub	r0,-62
80012d6e:	63 6f       	ld.w	pc,r1[0x58]
80012d70:	6d 6d       	ld.w	sp,r6[0x58]
80012d72:	61 6e       	ld.w	lr,r0[0x58]
80012d74:	64 20       	ld.w	r0,r2[0x8]
80012d76:	69 64       	ld.w	r4,r4[0x58]
80012d78:	3a 00       	mov	r0,-96
80012d7a:	00 00       	add	r0,r0
80012d7c:	2c 20       	sub	r0,-62
80012d7e:	63 6f       	ld.w	pc,r1[0x58]
80012d80:	6e 66       	ld.w	r6,r7[0x18]
80012d82:	69 72       	ld.w	r2,r4[0x5c]
80012d84:	6d 61       	ld.w	r1,r6[0x58]
80012d86:	74 69       	ld.w	r9,r10[0x18]
80012d88:	6f 6e       	ld.w	lr,r7[0x58]
80012d8a:	3a 00       	mov	r0,-96
80012d8c:	52 65       	stdsp	sp[0x98],r5
80012d8e:	61 64       	ld.w	r4,r0[0x58]
80012d90:	69 6e       	ld.w	lr,r4[0x58]
80012d92:	67 20       	ld.w	r0,r3[0x48]
80012d94:	66 72       	ld.w	r2,r3[0x1c]
80012d96:	6f 6d       	ld.w	sp,r7[0x58]
80012d98:	20 66       	sub	r6,6
80012d9a:	6c 61       	ld.w	r1,r6[0x18]
80012d9c:	73 68       	ld.w	r8,r9[0x58]
80012d9e:	63 2e       	ld.w	lr,r1[0x48]
80012da0:	2e 2e       	sub	lr,-30
80012da2:	0a 00       	add	r0,r5
80012da4:	57 72       	stdsp	sp[0x1dc],r2
80012da6:	69 74       	ld.w	r4,r4[0x5c]
80012da8:	74 69       	ld.w	r9,r10[0x18]
80012daa:	6e 67       	ld.w	r7,r7[0x18]
80012dac:	20 74       	sub	r4,7
80012dae:	6f 20       	ld.w	r0,r7[0x48]
80012db0:	66 6c       	ld.w	r12,r3[0x18]
80012db2:	61 73       	ld.w	r3,r0[0x5c]
80012db4:	68 63       	ld.w	r3,r4[0x18]
80012db6:	0a 00       	add	r0,r5

80012db8 <receive_message_long>:

void receive_message_long(Mavlink_Received_t* rec)
{
80012db8:	eb cd 40 c0 	pushm	r6-r7,lr
80012dbc:	1a 97       	mov	r7,sp
80012dbe:	20 ad       	sub	sp,40
80012dc0:	fe f6 04 cc 	ld.w	r6,pc[1228]
80012dc4:	1e 26       	rsub	r6,pc
80012dc6:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
80012dca:	ee f8 ff d8 	ld.w	r8,r7[-40]
80012dce:	ee c9 00 24 	sub	r9,r7,36
80012dd2:	12 9b       	mov	r11,r9
80012dd4:	10 9c       	mov	r12,r8
80012dd6:	fe b0 fb 41 	rcall	80012458 <mavlink_msg_command_long_decode>
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&&(uint8_t)packet.target_component == (uint8_t)0)
80012dda:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80012dde:	ec f8 00 74 	ld.w	r8,r6[116]
80012de2:	11 88       	ld.ub	r8,r8[0x0]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012de4:	f0 09 18 00 	cp.b	r9,r8
80012de8:	e0 81 02 4e 	brne	80013284 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
80012dec:	ef 38 ff fb 	ld.ub	r8,r7[-5]
	mavlink_command_long_t packet;
	mavlink_msg_command_long_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	// dbg_print("target_comp:");
	// dbg_print_num(packet.target_component,10);
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80012df0:	58 08       	cp.w	r8,0
80012df2:	e0 81 02 49 	brne	80013284 <receive_message_long+0x4cc>
	&&(uint8_t)packet.target_component == (uint8_t)0)
	{
		// print packet command and parameters for debug
		dbg_print("parameters:");
80012df6:	fe cc 00 96 	sub	r12,pc,150
80012dfa:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.param1,10);
80012dfe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80012e02:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e06:	30 ab       	mov	r11,10
80012e08:	10 9c       	mov	r12,r8
80012e0a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param2,10);
80012e0e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80012e12:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e16:	30 ab       	mov	r11,10
80012e18:	10 9c       	mov	r12,r8
80012e1a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param3,10);
80012e1e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80012e22:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e26:	30 ab       	mov	r11,10
80012e28:	10 9c       	mov	r12,r8
80012e2a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param4,10);
80012e2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80012e32:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e36:	30 ab       	mov	r11,10
80012e38:	10 9c       	mov	r12,r8
80012e3a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param5,10);
80012e3e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80012e42:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e46:	30 ab       	mov	r11,10
80012e48:	10 9c       	mov	r12,r8
80012e4a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param6,10);
80012e4e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80012e52:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e56:	30 ab       	mov	r11,10
80012e58:	10 9c       	mov	r12,r8
80012e5a:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(packet.param7,10);
80012e5e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80012e62:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80012e66:	30 ab       	mov	r11,10
80012e68:	10 9c       	mov	r12,r8
80012e6a:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", command id:");
80012e6e:	fe cc 01 02 	sub	r12,pc,258
80012e72:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.command,10);
80012e76:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80012e7a:	5c 78       	castu.h	r8
80012e7c:	30 ab       	mov	r11,10
80012e7e:	10 9c       	mov	r12,r8
80012e80:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", confirmation:");
80012e84:	fe cc 01 08 	sub	r12,pc,264
80012e88:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.confirmation,10);
80012e8c:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80012e90:	30 ab       	mov	r11,10
80012e92:	10 9c       	mov	r12,r8
80012e94:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80012e98:	fe cc 08 fc 	sub	r12,pc,2300
80012e9c:	f0 16 00 01 	mcall	r6[4]
		
		switch(packet.command) {
80012ea0:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80012ea4:	5c 78       	castu.h	r8
80012ea6:	21 08       	sub	r8,16
80012ea8:	e0 48 00 e5 	cp.w	r8,229
80012eac:	e0 8b 01 ec 	brhi	80013284 <receive_message_long+0x4cc>
80012eb0:	fe c9 ff f8 	sub	r9,pc,-8
80012eb4:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80012eb8:	e0 8f 01 e6 	bral	80013284 <receive_message_long+0x4cc>
80012ebc:	e0 8f 01 e4 	bral	80013284 <receive_message_long+0x4cc>
80012ec0:	e0 8f 01 e2 	bral	80013284 <receive_message_long+0x4cc>
80012ec4:	e0 8f 01 e0 	bral	80013284 <receive_message_long+0x4cc>
80012ec8:	e0 8f 01 de 	bral	80013284 <receive_message_long+0x4cc>
80012ecc:	e0 8f 01 dc 	bral	80013284 <receive_message_long+0x4cc>
80012ed0:	e0 8f 01 da 	bral	80013284 <receive_message_long+0x4cc>
80012ed4:	e0 8f 01 d8 	bral	80013284 <receive_message_long+0x4cc>
80012ed8:	e0 8f 01 d6 	bral	80013284 <receive_message_long+0x4cc>
80012edc:	e0 8f 01 d4 	bral	80013284 <receive_message_long+0x4cc>
80012ee0:	e0 8f 01 d2 	bral	80013284 <receive_message_long+0x4cc>
80012ee4:	e0 8f 01 d0 	bral	80013284 <receive_message_long+0x4cc>
80012ee8:	e0 8f 01 ce 	bral	80013284 <receive_message_long+0x4cc>
80012eec:	e0 8f 01 cc 	bral	80013284 <receive_message_long+0x4cc>
80012ef0:	e0 8f 01 ca 	bral	80013284 <receive_message_long+0x4cc>
80012ef4:	e0 8f 01 c8 	bral	80013284 <receive_message_long+0x4cc>
80012ef8:	e0 8f 01 c6 	bral	80013284 <receive_message_long+0x4cc>
80012efc:	e0 8f 01 c4 	bral	80013284 <receive_message_long+0x4cc>
80012f00:	e0 8f 01 c2 	bral	80013284 <receive_message_long+0x4cc>
80012f04:	e0 8f 01 c0 	bral	80013284 <receive_message_long+0x4cc>
80012f08:	e0 8f 01 be 	bral	80013284 <receive_message_long+0x4cc>
80012f0c:	e0 8f 01 bc 	bral	80013284 <receive_message_long+0x4cc>
80012f10:	e0 8f 01 ba 	bral	80013284 <receive_message_long+0x4cc>
80012f14:	e0 8f 01 b8 	bral	80013284 <receive_message_long+0x4cc>
80012f18:	e0 8f 01 b6 	bral	80013284 <receive_message_long+0x4cc>
80012f1c:	e0 8f 01 b4 	bral	80013284 <receive_message_long+0x4cc>
80012f20:	e0 8f 01 b2 	bral	80013284 <receive_message_long+0x4cc>
80012f24:	e0 8f 01 b0 	bral	80013284 <receive_message_long+0x4cc>
80012f28:	e0 8f 01 ae 	bral	80013284 <receive_message_long+0x4cc>
80012f2c:	e0 8f 01 ac 	bral	80013284 <receive_message_long+0x4cc>
80012f30:	e0 8f 01 aa 	bral	80013284 <receive_message_long+0x4cc>
80012f34:	e0 8f 01 a8 	bral	80013284 <receive_message_long+0x4cc>
80012f38:	e0 8f 01 a6 	bral	80013284 <receive_message_long+0x4cc>
80012f3c:	e0 8f 01 a4 	bral	80013284 <receive_message_long+0x4cc>
80012f40:	e0 8f 01 a2 	bral	80013284 <receive_message_long+0x4cc>
80012f44:	e0 8f 01 a0 	bral	80013284 <receive_message_long+0x4cc>
80012f48:	e0 8f 01 9e 	bral	80013284 <receive_message_long+0x4cc>
80012f4c:	e0 8f 01 9c 	bral	80013284 <receive_message_long+0x4cc>
80012f50:	e0 8f 01 9a 	bral	80013284 <receive_message_long+0x4cc>
80012f54:	e0 8f 01 98 	bral	80013284 <receive_message_long+0x4cc>
80012f58:	e0 8f 01 96 	bral	80013284 <receive_message_long+0x4cc>
80012f5c:	e0 8f 01 94 	bral	80013284 <receive_message_long+0x4cc>
80012f60:	e0 8f 01 92 	bral	80013284 <receive_message_long+0x4cc>
80012f64:	e0 8f 01 90 	bral	80013284 <receive_message_long+0x4cc>
80012f68:	e0 8f 01 8e 	bral	80013284 <receive_message_long+0x4cc>
80012f6c:	e0 8f 01 8c 	bral	80013284 <receive_message_long+0x4cc>
80012f70:	e0 8f 01 8a 	bral	80013284 <receive_message_long+0x4cc>
80012f74:	e0 8f 01 88 	bral	80013284 <receive_message_long+0x4cc>
80012f78:	e0 8f 01 86 	bral	80013284 <receive_message_long+0x4cc>
80012f7c:	e0 8f 01 84 	bral	80013284 <receive_message_long+0x4cc>
80012f80:	e0 8f 01 82 	bral	80013284 <receive_message_long+0x4cc>
80012f84:	e0 8f 01 80 	bral	80013284 <receive_message_long+0x4cc>
80012f88:	e0 8f 01 7e 	bral	80013284 <receive_message_long+0x4cc>
80012f8c:	e0 8f 01 7c 	bral	80013284 <receive_message_long+0x4cc>
80012f90:	e0 8f 01 7a 	bral	80013284 <receive_message_long+0x4cc>
80012f94:	e0 8f 01 78 	bral	80013284 <receive_message_long+0x4cc>
80012f98:	e0 8f 01 76 	bral	80013284 <receive_message_long+0x4cc>
80012f9c:	e0 8f 01 74 	bral	80013284 <receive_message_long+0x4cc>
80012fa0:	e0 8f 01 72 	bral	80013284 <receive_message_long+0x4cc>
80012fa4:	e0 8f 01 70 	bral	80013284 <receive_message_long+0x4cc>
80012fa8:	e0 8f 01 6e 	bral	80013284 <receive_message_long+0x4cc>
80012fac:	e0 8f 01 6c 	bral	80013284 <receive_message_long+0x4cc>
80012fb0:	e0 8f 01 6a 	bral	80013284 <receive_message_long+0x4cc>
80012fb4:	e0 8f 01 68 	bral	80013284 <receive_message_long+0x4cc>
80012fb8:	e0 8f 01 66 	bral	80013284 <receive_message_long+0x4cc>
80012fbc:	e0 8f 01 64 	bral	80013284 <receive_message_long+0x4cc>
80012fc0:	e0 8f 01 62 	bral	80013284 <receive_message_long+0x4cc>
80012fc4:	e0 8f 01 60 	bral	80013284 <receive_message_long+0x4cc>
80012fc8:	e0 8f 01 5e 	bral	80013284 <receive_message_long+0x4cc>
80012fcc:	e0 8f 01 5c 	bral	80013284 <receive_message_long+0x4cc>
80012fd0:	e0 8f 01 5a 	bral	80013284 <receive_message_long+0x4cc>
80012fd4:	e0 8f 01 58 	bral	80013284 <receive_message_long+0x4cc>
80012fd8:	e0 8f 01 56 	bral	80013284 <receive_message_long+0x4cc>
80012fdc:	e0 8f 01 54 	bral	80013284 <receive_message_long+0x4cc>
80012fe0:	e0 8f 01 52 	bral	80013284 <receive_message_long+0x4cc>
80012fe4:	e0 8f 01 50 	bral	80013284 <receive_message_long+0x4cc>
80012fe8:	e0 8f 01 4e 	bral	80013284 <receive_message_long+0x4cc>
80012fec:	e0 8f 01 4c 	bral	80013284 <receive_message_long+0x4cc>
80012ff0:	e0 8f 01 4a 	bral	80013284 <receive_message_long+0x4cc>
80012ff4:	e0 8f 01 48 	bral	80013284 <receive_message_long+0x4cc>
80012ff8:	e0 8f 01 46 	bral	80013284 <receive_message_long+0x4cc>
80012ffc:	e0 8f 01 44 	bral	80013284 <receive_message_long+0x4cc>
80013000:	e0 8f 01 42 	bral	80013284 <receive_message_long+0x4cc>
80013004:	e0 8f 01 40 	bral	80013284 <receive_message_long+0x4cc>
80013008:	e0 8f 01 3e 	bral	80013284 <receive_message_long+0x4cc>
8001300c:	e0 8f 01 3c 	bral	80013284 <receive_message_long+0x4cc>
80013010:	e0 8f 01 3a 	bral	80013284 <receive_message_long+0x4cc>
80013014:	e0 8f 01 38 	bral	80013284 <receive_message_long+0x4cc>
80013018:	e0 8f 01 36 	bral	80013284 <receive_message_long+0x4cc>
8001301c:	e0 8f 01 34 	bral	80013284 <receive_message_long+0x4cc>
80013020:	e0 8f 01 32 	bral	80013284 <receive_message_long+0x4cc>
80013024:	e0 8f 01 30 	bral	80013284 <receive_message_long+0x4cc>
80013028:	e0 8f 01 2e 	bral	80013284 <receive_message_long+0x4cc>
8001302c:	e0 8f 01 2c 	bral	80013284 <receive_message_long+0x4cc>
80013030:	e0 8f 01 2a 	bral	80013284 <receive_message_long+0x4cc>
80013034:	e0 8f 01 28 	bral	80013284 <receive_message_long+0x4cc>
80013038:	e0 8f 01 26 	bral	80013284 <receive_message_long+0x4cc>
8001303c:	e0 8f 01 24 	bral	80013284 <receive_message_long+0x4cc>
80013040:	e0 8f 01 22 	bral	80013284 <receive_message_long+0x4cc>
80013044:	e0 8f 01 20 	bral	80013284 <receive_message_long+0x4cc>
80013048:	e0 8f 01 1e 	bral	80013284 <receive_message_long+0x4cc>
8001304c:	e0 8f 01 1c 	bral	80013284 <receive_message_long+0x4cc>
80013050:	e0 8f 01 1a 	bral	80013284 <receive_message_long+0x4cc>
80013054:	e0 8f 01 18 	bral	80013284 <receive_message_long+0x4cc>
80013058:	e0 8f 01 16 	bral	80013284 <receive_message_long+0x4cc>
8001305c:	e0 8f 01 14 	bral	80013284 <receive_message_long+0x4cc>
80013060:	e0 8f 01 12 	bral	80013284 <receive_message_long+0x4cc>
80013064:	e0 8f 01 10 	bral	80013284 <receive_message_long+0x4cc>
80013068:	e0 8f 01 0e 	bral	80013284 <receive_message_long+0x4cc>
8001306c:	e0 8f 01 0c 	bral	80013284 <receive_message_long+0x4cc>
80013070:	e0 8f 01 0a 	bral	80013284 <receive_message_long+0x4cc>
80013074:	e0 8f 01 08 	bral	80013284 <receive_message_long+0x4cc>
80013078:	e0 8f 01 06 	bral	80013284 <receive_message_long+0x4cc>
8001307c:	e0 8f 01 04 	bral	80013284 <receive_message_long+0x4cc>
80013080:	e0 8f 01 02 	bral	80013284 <receive_message_long+0x4cc>
80013084:	e0 8f 01 00 	bral	80013284 <receive_message_long+0x4cc>
80013088:	e0 8f 00 fe 	bral	80013284 <receive_message_long+0x4cc>
8001308c:	e0 8f 00 fc 	bral	80013284 <receive_message_long+0x4cc>
80013090:	e0 8f 00 fa 	bral	80013284 <receive_message_long+0x4cc>
80013094:	e0 8f 00 f8 	bral	80013284 <receive_message_long+0x4cc>
80013098:	e0 8f 00 f6 	bral	80013284 <receive_message_long+0x4cc>
8001309c:	e0 8f 00 f4 	bral	80013284 <receive_message_long+0x4cc>
800130a0:	e0 8f 00 f2 	bral	80013284 <receive_message_long+0x4cc>
800130a4:	e0 8f 00 f0 	bral	80013284 <receive_message_long+0x4cc>
800130a8:	e0 8f 00 ee 	bral	80013284 <receive_message_long+0x4cc>
800130ac:	e0 8f 00 ec 	bral	80013284 <receive_message_long+0x4cc>
800130b0:	e0 8f 00 ea 	bral	80013284 <receive_message_long+0x4cc>
800130b4:	e0 8f 00 e8 	bral	80013284 <receive_message_long+0x4cc>
800130b8:	e0 8f 00 e6 	bral	80013284 <receive_message_long+0x4cc>
800130bc:	e0 8f 00 e4 	bral	80013284 <receive_message_long+0x4cc>
800130c0:	e0 8f 00 e2 	bral	80013284 <receive_message_long+0x4cc>
800130c4:	e0 8f 00 e0 	bral	80013284 <receive_message_long+0x4cc>
800130c8:	e0 8f 00 de 	bral	80013284 <receive_message_long+0x4cc>
800130cc:	e0 8f 00 dc 	bral	80013284 <receive_message_long+0x4cc>
800130d0:	e0 8f 00 da 	bral	80013284 <receive_message_long+0x4cc>
800130d4:	e0 8f 00 d8 	bral	80013284 <receive_message_long+0x4cc>
800130d8:	e0 8f 00 d6 	bral	80013284 <receive_message_long+0x4cc>
800130dc:	e0 8f 00 d4 	bral	80013284 <receive_message_long+0x4cc>
800130e0:	e0 8f 00 d2 	bral	80013284 <receive_message_long+0x4cc>
800130e4:	e0 8f 00 d0 	bral	80013284 <receive_message_long+0x4cc>
800130e8:	e0 8f 00 ce 	bral	80013284 <receive_message_long+0x4cc>
800130ec:	e0 8f 00 cc 	bral	80013284 <receive_message_long+0x4cc>
800130f0:	e0 8f 00 ca 	bral	80013284 <receive_message_long+0x4cc>
800130f4:	e0 8f 00 c8 	bral	80013284 <receive_message_long+0x4cc>
800130f8:	e0 8f 00 c6 	bral	80013284 <receive_message_long+0x4cc>
800130fc:	e0 8f 00 c4 	bral	80013284 <receive_message_long+0x4cc>
80013100:	e0 8f 00 c2 	bral	80013284 <receive_message_long+0x4cc>
80013104:	e0 8f 00 c0 	bral	80013284 <receive_message_long+0x4cc>
80013108:	e0 8f 00 be 	bral	80013284 <receive_message_long+0x4cc>
8001310c:	e0 8f 00 bc 	bral	80013284 <receive_message_long+0x4cc>
80013110:	e0 8f 00 ba 	bral	80013284 <receive_message_long+0x4cc>
80013114:	e0 8f 00 b8 	bral	80013284 <receive_message_long+0x4cc>
80013118:	e0 8f 00 b6 	bral	80013284 <receive_message_long+0x4cc>
8001311c:	e0 8f 00 b4 	bral	80013284 <receive_message_long+0x4cc>
80013120:	e0 8f 00 b2 	bral	80013284 <receive_message_long+0x4cc>
80013124:	e0 8f 00 b0 	bral	80013284 <receive_message_long+0x4cc>
80013128:	e0 8f 00 ae 	bral	80013284 <receive_message_long+0x4cc>
8001312c:	e0 8f 00 ac 	bral	80013284 <receive_message_long+0x4cc>
80013130:	e0 8f 00 aa 	bral	80013284 <receive_message_long+0x4cc>
80013134:	e0 8f 00 a8 	bral	80013284 <receive_message_long+0x4cc>
80013138:	e0 8f 00 a6 	bral	80013284 <receive_message_long+0x4cc>
8001313c:	e0 8f 00 a4 	bral	80013284 <receive_message_long+0x4cc>
80013140:	e0 8f 00 a2 	bral	80013284 <receive_message_long+0x4cc>
80013144:	e0 8f 00 a0 	bral	80013284 <receive_message_long+0x4cc>
80013148:	e0 8f 00 9e 	bral	80013284 <receive_message_long+0x4cc>
8001314c:	e0 8f 00 9c 	bral	80013284 <receive_message_long+0x4cc>
80013150:	e0 8f 00 9a 	bral	80013284 <receive_message_long+0x4cc>
80013154:	e0 8f 00 98 	bral	80013284 <receive_message_long+0x4cc>
80013158:	e0 8f 00 96 	bral	80013284 <receive_message_long+0x4cc>
8001315c:	e0 8f 00 94 	bral	80013284 <receive_message_long+0x4cc>
80013160:	e0 8f 00 92 	bral	80013284 <receive_message_long+0x4cc>
80013164:	e0 8f 00 90 	bral	80013284 <receive_message_long+0x4cc>
80013168:	e0 8f 00 8e 	bral	80013284 <receive_message_long+0x4cc>
8001316c:	e0 8f 00 8c 	bral	80013284 <receive_message_long+0x4cc>
80013170:	e0 8f 00 8a 	bral	80013284 <receive_message_long+0x4cc>
80013174:	e0 8f 00 88 	bral	80013284 <receive_message_long+0x4cc>
80013178:	e0 8f 00 86 	bral	80013284 <receive_message_long+0x4cc>
8001317c:	e0 8f 00 84 	bral	80013284 <receive_message_long+0x4cc>
80013180:	e0 8f 00 82 	bral	80013284 <receive_message_long+0x4cc>
80013184:	e0 8f 00 80 	bral	80013284 <receive_message_long+0x4cc>
80013188:	e0 8f 00 7e 	bral	80013284 <receive_message_long+0x4cc>
8001318c:	e0 8f 00 7c 	bral	80013284 <receive_message_long+0x4cc>
80013190:	e0 8f 00 7a 	bral	80013284 <receive_message_long+0x4cc>
80013194:	e0 8f 00 78 	bral	80013284 <receive_message_long+0x4cc>
80013198:	e0 8f 00 76 	bral	80013284 <receive_message_long+0x4cc>
8001319c:	e0 8f 00 74 	bral	80013284 <receive_message_long+0x4cc>
800131a0:	e0 8f 00 72 	bral	80013284 <receive_message_long+0x4cc>
800131a4:	e0 8f 00 70 	bral	80013284 <receive_message_long+0x4cc>
800131a8:	e0 8f 00 6e 	bral	80013284 <receive_message_long+0x4cc>
800131ac:	e0 8f 00 6c 	bral	80013284 <receive_message_long+0x4cc>
800131b0:	e0 8f 00 6a 	bral	80013284 <receive_message_long+0x4cc>
800131b4:	e0 8f 00 68 	bral	80013284 <receive_message_long+0x4cc>
800131b8:	e0 8f 00 66 	bral	80013284 <receive_message_long+0x4cc>
800131bc:	e0 8f 00 64 	bral	80013284 <receive_message_long+0x4cc>
800131c0:	e0 8f 00 62 	bral	80013284 <receive_message_long+0x4cc>
800131c4:	e0 8f 00 60 	bral	80013284 <receive_message_long+0x4cc>
800131c8:	e0 8f 00 5e 	bral	80013284 <receive_message_long+0x4cc>
800131cc:	e0 8f 00 5c 	bral	80013284 <receive_message_long+0x4cc>
800131d0:	e0 8f 00 5a 	bral	80013284 <receive_message_long+0x4cc>
800131d4:	e0 8f 00 58 	bral	80013284 <receive_message_long+0x4cc>
800131d8:	e0 8f 00 56 	bral	80013284 <receive_message_long+0x4cc>
800131dc:	e0 8f 00 54 	bral	80013284 <receive_message_long+0x4cc>
800131e0:	e0 8f 00 52 	bral	80013284 <receive_message_long+0x4cc>
800131e4:	e0 8f 00 50 	bral	80013284 <receive_message_long+0x4cc>
800131e8:	e0 8f 00 4e 	bral	80013284 <receive_message_long+0x4cc>
800131ec:	e0 8f 00 4c 	bral	80013284 <receive_message_long+0x4cc>
800131f0:	e0 8f 00 4a 	bral	80013284 <receive_message_long+0x4cc>
800131f4:	e0 8f 00 48 	bral	80013284 <receive_message_long+0x4cc>
800131f8:	e0 8f 00 46 	bral	80013284 <receive_message_long+0x4cc>
800131fc:	e0 8f 00 44 	bral	80013284 <receive_message_long+0x4cc>
80013200:	e0 8f 00 42 	bral	80013284 <receive_message_long+0x4cc>
80013204:	e0 8f 00 40 	bral	80013284 <receive_message_long+0x4cc>
80013208:	e0 8f 00 3e 	bral	80013284 <receive_message_long+0x4cc>
8001320c:	e0 8f 00 3c 	bral	80013284 <receive_message_long+0x4cc>
80013210:	e0 8f 00 3a 	bral	80013284 <receive_message_long+0x4cc>
80013214:	e0 8f 00 38 	bral	80013284 <receive_message_long+0x4cc>
80013218:	e0 8f 00 36 	bral	80013284 <receive_message_long+0x4cc>
8001321c:	e0 8f 00 34 	bral	80013284 <receive_message_long+0x4cc>
80013220:	e0 8f 00 32 	bral	80013284 <receive_message_long+0x4cc>
80013224:	e0 8f 00 30 	bral	80013284 <receive_message_long+0x4cc>
80013228:	e0 8f 00 2e 	bral	80013284 <receive_message_long+0x4cc>
8001322c:	e0 8f 00 2c 	bral	80013284 <receive_message_long+0x4cc>
80013230:	e0 8f 00 2a 	bral	80013284 <receive_message_long+0x4cc>
80013234:	e0 8f 00 28 	bral	80013284 <receive_message_long+0x4cc>
80013238:	e0 8f 00 26 	bral	80013284 <receive_message_long+0x4cc>
8001323c:	e0 8f 00 24 	bral	80013284 <receive_message_long+0x4cc>
80013240:	e0 8f 00 22 	bral	80013284 <receive_message_long+0x4cc>
80013244:	e0 8f 00 20 	bral	80013284 <receive_message_long+0x4cc>
80013248:	e0 8f 00 1e 	bral	80013284 <receive_message_long+0x4cc>
8001324c:	e0 8f 00 02 	bral	80013250 <receive_message_long+0x498>
			break;
			case MAV_CMD_PREFLIGHT_STORAGE: {
				/* Request storage of different parameter values and logs. This command will be only accepted if in pre-flight mode. |Parameter storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Mission storage: 0: READ FROM FLASH/EEPROM, 1: WRITE CURRENT TO FLASH/EEPROM| Reserved| Reserved| Empty| Empty| Empty|  */
				
				// Onboard parameters storage
				if (packet.param1 == 0) {
80013250:	ee f9 ff dc 	ld.w	r9,r7[-36]
80013254:	30 08       	mov	r8,0
80013256:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001325a:	c0 81       	brne	8001326a <receive_message_long+0x4b2>
					// read parameters from flash
					dbg_print("Reading from flashc...\n");
8001325c:	fe cc 04 d0 	sub	r12,pc,1232
80013260:	f0 16 00 01 	mcall	r6[4]
					read_parameters_from_flashc();
80013264:	f0 16 01 20 	mcall	r6[1152]
80013268:	c0 e8       	rjmp	80013284 <receive_message_long+0x4cc>
				}
				else if (packet.param1 == 1) {
8001326a:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001326e:	fc 18 3f 80 	movh	r8,0x3f80
80013272:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80013276:	c0 71       	brne	80013284 <receive_message_long+0x4cc>
					// write parameters to flash
					dbg_print("Writting to flashc\n");
80013278:	fe cc 04 d4 	sub	r12,pc,1236
8001327c:	f0 16 00 01 	mcall	r6[4]
					write_parameters_to_flashc();
80013280:	f0 16 01 cf 	mcall	r6[1852]
				/*  | */
			}
			break;
		}
	}
}
80013284:	2f 6d       	sub	sp,-40
80013286:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001328a:	00 00       	add	r0,r0
8001328c:	80 01       	ld.sh	r1,r0[0x0]
8001328e:	2c 48       	sub	r8,-60

80013290 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
80013290:	eb cd 40 80 	pushm	r7,lr
80013294:	1a 97       	mov	r7,sp
80013296:	20 3d       	sub	sp,12
80013298:	18 98       	mov	r8,r12
8001329a:	ef 4b ff f4 	st.w	r7[-12],r11
8001329e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
800132a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800132a6:	90 08       	ld.sh	r8,r8[0x0]
800132a8:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132ac:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800132b0:	f3 e8 20 08 	eor	r8,r9,r8
800132b4:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
800132b8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132bc:	a5 68       	lsl	r8,0x4
800132be:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800132c2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132c6:	f3 e8 20 08 	eor	r8,r9,r8
800132ca:	5c 58       	castu.b	r8
800132cc:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
800132d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800132d4:	90 08       	ld.sh	r8,r8[0x0]
800132d6:	5c 78       	castu.h	r8
800132d8:	a9 88       	lsr	r8,0x8
800132da:	5c 88       	casts.h	r8
800132dc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800132e0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132e4:	a9 68       	lsl	r8,0x8
800132e6:	5c 88       	casts.h	r8
800132e8:	f3 e8 20 08 	eor	r8,r9,r8
800132ec:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800132f0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800132f4:	a3 78       	lsl	r8,0x3
800132f6:	5c 88       	casts.h	r8
800132f8:	f3 e8 20 08 	eor	r8,r9,r8
800132fc:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80013300:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013304:	a5 88       	lsr	r8,0x4
80013306:	5c 58       	castu.b	r8
80013308:	f3 e8 20 08 	eor	r8,r9,r8
8001330c:	5c 88       	casts.h	r8
8001330e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80013312:	b2 08       	st.h	r9[0x0],r8
}
80013314:	2f dd       	sub	sp,-12
80013316:	e3 cd 80 80 	ldm	sp++,r7,pc

8001331a <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001331a:	eb cd 40 80 	pushm	r7,lr
8001331e:	1a 97       	mov	r7,sp
80013320:	20 1d       	sub	sp,4
80013322:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
80013326:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001332a:	3f f8       	mov	r8,-1
8001332c:	b2 08       	st.h	r9[0x0],r8
}
8001332e:	2f fd       	sub	sp,-4
80013330:	e3 cd 80 80 	ldm	sp++,r7,pc

80013334 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
80013334:	eb cd 40 c0 	pushm	r6-r7,lr
80013338:	1a 97       	mov	r7,sp
8001333a:	20 3d       	sub	sp,12
8001333c:	49 76       	lddpc	r6,80013398 <crc_calculate+0x64>
8001333e:	1e 26       	rsub	r6,pc
80013340:	ef 4c ff f8 	st.w	r7[-8],r12
80013344:	16 98       	mov	r8,r11
80013346:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001334a:	ee c8 00 02 	sub	r8,r7,2
8001334e:	10 9c       	mov	r12,r8
80013350:	ce 5f       	rcall	8001331a <crc_init>
	while (length--) {
80013352:	c0 e8       	rjmp	8001336e <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
80013354:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013358:	11 88       	ld.ub	r8,r8[0x0]
8001335a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001335e:	2f f9       	sub	r9,-1
80013360:	ef 49 ff f8 	st.w	r7[-8],r9
80013364:	ee c9 00 02 	sub	r9,r7,2
80013368:	12 9b       	mov	r11,r9
8001336a:	10 9c       	mov	r12,r8
8001336c:	c9 2f       	rcall	80013290 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001336e:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80013372:	30 08       	mov	r8,0
80013374:	f0 09 19 00 	cp.h	r9,r8
80013378:	5f 18       	srne	r8
8001337a:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001337e:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80013382:	20 18       	sub	r8,1
80013384:	ef 58 ff f4 	st.h	r7[-12],r8
80013388:	58 09       	cp.w	r9,0
8001338a:	ce 51       	brne	80013354 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001338c:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80013390:	10 9c       	mov	r12,r8
80013392:	2f dd       	sub	sp,-12
80013394:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013398:	80 01       	ld.sh	r1,r0[0x0]
8001339a:	31 c2       	mov	r2,28

8001339c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001339c:	eb cd 40 c0 	pushm	r6-r7,lr
800133a0:	1a 97       	mov	r7,sp
800133a2:	20 4d       	sub	sp,16
800133a4:	49 66       	lddpc	r6,800133fc <crc_accumulate_buffer+0x60>
800133a6:	1e 26       	rsub	r6,pc
800133a8:	ef 4c ff f8 	st.w	r7[-8],r12
800133ac:	ef 4b ff f4 	st.w	r7[-12],r11
800133b0:	14 98       	mov	r8,r10
800133b2:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
800133b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800133ba:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
800133be:	c0 d8       	rjmp	800133d8 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
800133c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800133c4:	11 88       	ld.ub	r8,r8[0x0]
800133c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800133ca:	2f f9       	sub	r9,-1
800133cc:	ef 49 ff fc 	st.w	r7[-4],r9
800133d0:	ee fb ff f8 	ld.w	r11,r7[-8]
800133d4:	10 9c       	mov	r12,r8
800133d6:	c5 df       	rcall	80013290 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
800133d8:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800133dc:	30 08       	mov	r8,0
800133de:	f0 09 18 00 	cp.b	r9,r8
800133e2:	5f 18       	srne	r8
800133e4:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800133e8:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800133ec:	20 18       	sub	r8,1
800133ee:	ef 68 ff f0 	st.b	r7[-16],r8
800133f2:	58 09       	cp.w	r9,0
800133f4:	ce 61       	brne	800133c0 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
800133f6:	2f cd       	sub	sp,-16
800133f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800133fc:	80 01       	ld.sh	r1,r0[0x0]
800133fe:	32 2a       	mov	r10,34

80013400 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
80013400:	eb cd 40 c0 	pushm	r6-r7,lr
80013404:	1a 97       	mov	r7,sp
80013406:	20 1d       	sub	sp,4
80013408:	48 96       	lddpc	r6,8001342c <mavlink_get_channel_status+0x2c>
8001340a:	1e 26       	rsub	r6,pc
8001340c:	18 98       	mov	r8,r12
8001340e:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
80013412:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80013416:	f0 09 15 04 	lsl	r9,r8,0x4
8001341a:	ec f8 09 10 	ld.w	r8,r6[2320]
8001341e:	f2 08 00 08 	add	r8,r9,r8
}
80013422:	10 9c       	mov	r12,r8
80013424:	2f fd       	sub	sp,-4
80013426:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001342a:	00 00       	add	r0,r0
8001342c:	80 01       	ld.sh	r1,r0[0x0]
8001342e:	32 8e       	mov	lr,40

80013430 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
80013430:	eb cd 40 c0 	pushm	r6-r7,lr
80013434:	1a 97       	mov	r7,sp
80013436:	20 9d       	sub	sp,36
80013438:	4b d6       	lddpc	r6,8001352c <_mav_finalize_message_chan_send+0xfc>
8001343a:	1e 26       	rsub	r6,pc
8001343c:	ef 4c ff ec 	st.w	r7[-20],r12
80013440:	ef 4a ff e4 	st.w	r7[-28],r10
80013444:	16 9a       	mov	r10,r11
80013446:	ef 6a ff e8 	st.b	r7[-24],r10
8001344a:	ef 69 ff e0 	st.b	r7[-32],r9
8001344e:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
80013452:	ee f8 ff ec 	ld.w	r8,r7[-20]
80013456:	5c 58       	castu.b	r8
80013458:	10 9c       	mov	r12,r8
8001345a:	cd 3f       	rcall	80013400 <mavlink_get_channel_status>
8001345c:	18 98       	mov	r8,r12
8001345e:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
80013462:	3f e8       	mov	r8,-2
80013464:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
80013468:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001346c:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
80013470:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013474:	f1 38 00 0a 	ld.ub	r8,r8[10]
80013478:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001347c:	ec f8 00 74 	ld.w	r8,r6[116]
80013480:	11 88       	ld.ub	r8,r8[0x0]
80013482:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
80013486:	ec f8 00 74 	ld.w	r8,r6[116]
8001348a:	11 98       	ld.ub	r8,r8[0x1]
8001348c:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
80013490:	ef 38 ff e8 	ld.ub	r8,r7[-24]
80013494:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
80013498:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001349c:	f1 38 00 0a 	ld.ub	r8,r8[10]
800134a0:	2f f8       	sub	r8,-1
800134a2:	5c 58       	castu.b	r8
800134a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800134a8:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
800134ac:	ee c8 00 0c 	sub	r8,r7,12
800134b0:	2f f8       	sub	r8,-1
800134b2:	30 5b       	mov	r11,5
800134b4:	10 9c       	mov	r12,r8
800134b6:	c3 ff       	rcall	80013334 <crc_calculate>
800134b8:	18 98       	mov	r8,r12
800134ba:	5c 88       	casts.h	r8
800134bc:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
800134c0:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800134c4:	ee c8 00 06 	sub	r8,r7,6
800134c8:	12 9a       	mov	r10,r9
800134ca:	ee fb ff e4 	ld.w	r11,r7[-28]
800134ce:	10 9c       	mov	r12,r8
800134d0:	c6 6f       	rcall	8001339c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
800134d2:	ef 38 ff dc 	ld.ub	r8,r7[-36]
800134d6:	ee c9 00 06 	sub	r9,r7,6
800134da:	12 9b       	mov	r11,r9
800134dc:	10 9c       	mov	r12,r8
800134de:	cd 9e       	rcall	80013290 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
800134e0:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800134e4:	5c 58       	castu.b	r8
800134e6:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
800134ea:	ef 08 ff fa 	ld.sh	r8,r7[-6]
800134ee:	5c 78       	castu.h	r8
800134f0:	a9 88       	lsr	r8,0x8
800134f2:	5c 88       	casts.h	r8
800134f4:	5c 58       	castu.b	r8
800134f6:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
800134fa:	ee c8 00 0c 	sub	r8,r7,12
800134fe:	30 6a       	mov	r10,6
80013500:	10 9b       	mov	r11,r8
80013502:	ee fc ff ec 	ld.w	r12,r7[-20]
80013506:	c1 5c       	rcall	80013530 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
80013508:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001350c:	10 9a       	mov	r10,r8
8001350e:	ee fb ff e4 	ld.w	r11,r7[-28]
80013512:	ee fc ff ec 	ld.w	r12,r7[-20]
80013516:	c0 dc       	rcall	80013530 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
80013518:	ee c8 00 10 	sub	r8,r7,16
8001351c:	30 2a       	mov	r10,2
8001351e:	10 9b       	mov	r11,r8
80013520:	ee fc ff ec 	ld.w	r12,r7[-20]
80013524:	c0 6c       	rcall	80013530 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
80013526:	2f 7d       	sub	sp,-36
80013528:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001352c:	80 01       	ld.sh	r1,r0[0x0]
8001352e:	32 be       	mov	lr,43

80013530 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
80013530:	eb cd 40 c0 	pushm	r6-r7,lr
80013534:	1a 97       	mov	r7,sp
80013536:	20 4d       	sub	sp,16
80013538:	49 46       	lddpc	r6,80013588 <_mavlink_send_uart+0x58>
8001353a:	1e 26       	rsub	r6,pc
8001353c:	ef 4c ff f8 	st.w	r7[-8],r12
80013540:	ef 4b ff f4 	st.w	r7[-12],r11
80013544:	14 98       	mov	r8,r10
80013546:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001354a:	30 08       	mov	r8,0
8001354c:	ef 58 ff fe 	st.h	r7[-2],r8
80013550:	c1 28       	rjmp	80013574 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
80013552:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013556:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001355a:	f2 08 00 08 	add	r8,r9,r8
8001355e:	11 88       	ld.ub	r8,r8[0x0]
80013560:	10 9b       	mov	r11,r8
80013562:	ee fc ff f8 	ld.w	r12,r7[-8]
80013566:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001356a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001356e:	2f f8       	sub	r8,-1
80013570:	ef 58 ff fe 	st.h	r7[-2],r8
80013574:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013578:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001357c:	f0 09 19 00 	cp.h	r9,r8
80013580:	ce 93       	brcs	80013552 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
80013582:	2f cd       	sub	sp,-16
80013584:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013588:	80 01       	ld.sh	r1,r0[0x0]
8001358a:	33 be       	mov	lr,59

8001358c <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001358c:	eb cd 40 80 	pushm	r7,lr
80013590:	1a 97       	mov	r7,sp
80013592:	20 2d       	sub	sp,8
80013594:	ef 4c ff fc 	st.w	r7[-4],r12
80013598:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001359c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135a0:	2f f8       	sub	r8,-1
800135a2:	11 88       	ld.ub	r8,r8[0x0]
800135a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800135a8:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
800135aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135ae:	f0 c9 ff ff 	sub	r9,r8,-1
800135b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135b6:	11 88       	ld.ub	r8,r8[0x0]
800135b8:	b2 88       	st.b	r9[0x0],r8
}
800135ba:	2f ed       	sub	sp,-8
800135bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800135c0 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
800135c0:	eb cd 40 80 	pushm	r7,lr
800135c4:	1a 97       	mov	r7,sp
800135c6:	20 2d       	sub	sp,8
800135c8:	ef 4c ff fc 	st.w	r7[-4],r12
800135cc:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
800135d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135d4:	2f d8       	sub	r8,-3
800135d6:	11 88       	ld.ub	r8,r8[0x0]
800135d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800135dc:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
800135de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135e2:	f0 c9 ff ff 	sub	r9,r8,-1
800135e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135ea:	2f e8       	sub	r8,-2
800135ec:	11 88       	ld.ub	r8,r8[0x0]
800135ee:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
800135f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800135f4:	f0 c9 ff fe 	sub	r9,r8,-2
800135f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800135fc:	2f f8       	sub	r8,-1
800135fe:	11 88       	ld.ub	r8,r8[0x0]
80013600:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
80013602:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013606:	f0 c9 ff fd 	sub	r9,r8,-3
8001360a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001360e:	11 88       	ld.ub	r8,r8[0x0]
80013610:	b2 88       	st.b	r9[0x0],r8
}
80013612:	2f ed       	sub	sp,-8
80013614:	e3 cd 80 80 	ldm	sp++,r7,pc

80013618 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
80013618:	eb cd 40 c0 	pushm	r6-r7,lr
8001361c:	1a 97       	mov	r7,sp
8001361e:	20 3d       	sub	sp,12
80013620:	49 06       	lddpc	r6,80013660 <mav_array_memcpy+0x48>
80013622:	1e 26       	rsub	r6,pc
80013624:	ef 4c ff fc 	st.w	r7[-4],r12
80013628:	ef 4b ff f8 	st.w	r7[-8],r11
8001362c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
80013630:	ee f8 ff f8 	ld.w	r8,r7[-8]
80013634:	58 08       	cp.w	r8,0
80013636:	c0 91       	brne	80013648 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
80013638:	ee fa ff f4 	ld.w	r10,r7[-12]
8001363c:	30 0b       	mov	r11,0
8001363e:	ee fc ff fc 	ld.w	r12,r7[-4]
80013642:	f0 16 00 31 	mcall	r6[196]
80013646:	c0 98       	rjmp	80013658 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
80013648:	ee fa ff f4 	ld.w	r10,r7[-12]
8001364c:	ee fb ff f8 	ld.w	r11,r7[-8]
80013650:	ee fc ff fc 	ld.w	r12,r7[-4]
80013654:	f0 16 00 1b 	mcall	r6[108]
	}
}
80013658:	2f dd       	sub	sp,-12
8001365a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001365e:	00 00       	add	r0,r0
80013660:	80 01       	ld.sh	r1,r0[0x0]
80013662:	34 a6       	mov	r6,74

80013664 <_mav_put_char_array>:

/*
 * Place a char array into a buffer
 */
static inline void _mav_put_char_array(char *buf, uint8_t wire_offset, const char *b, uint8_t array_length)
{
80013664:	eb cd 40 c0 	pushm	r6-r7,lr
80013668:	1a 97       	mov	r7,sp
8001366a:	20 4d       	sub	sp,16
8001366c:	48 e6       	lddpc	r6,800136a4 <_mav_put_char_array+0x40>
8001366e:	1e 26       	rsub	r6,pc
80013670:	ef 4c ff fc 	st.w	r7[-4],r12
80013674:	ef 4a ff f4 	st.w	r7[-12],r10
80013678:	12 98       	mov	r8,r9
8001367a:	16 99       	mov	r9,r11
8001367c:	ef 69 ff f8 	st.b	r7[-8],r9
80013680:	ef 68 ff f0 	st.b	r7[-16],r8
	mav_array_memcpy(&buf[wire_offset], b, array_length);
80013684:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80013688:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001368c:	ee fa ff fc 	ld.w	r10,r7[-4]
80013690:	f4 08 00 08 	add	r8,r10,r8
80013694:	12 9a       	mov	r10,r9
80013696:	ee fb ff f4 	ld.w	r11,r7[-12]
8001369a:	10 9c       	mov	r12,r8
8001369c:	cb ef       	rcall	80013618 <mav_array_memcpy>

}
8001369e:	2f cd       	sub	sp,-16
800136a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136a4:	80 01       	ld.sh	r1,r0[0x0]
800136a6:	34 f2       	mov	r2,79

800136a8 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
800136a8:	eb cd 40 c0 	pushm	r6-r7,lr
800136ac:	1a 97       	mov	r7,sp
800136ae:	20 3d       	sub	sp,12
800136b0:	48 d6       	lddpc	r6,800136e4 <_MAV_RETURN_float+0x3c>
800136b2:	1e 26       	rsub	r6,pc
800136b4:	ef 4c ff f8 	st.w	r7[-8],r12
800136b8:	16 98       	mov	r8,r11
800136ba:	ef 68 ff f4 	st.b	r7[-12],r8
800136be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800136c2:	2f 88       	sub	r8,-8
800136c4:	10 99       	mov	r9,r8
800136c6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800136ca:	10 09       	add	r9,r8
800136cc:	ee c8 00 04 	sub	r8,r7,4
800136d0:	12 9b       	mov	r11,r9
800136d2:	10 9c       	mov	r12,r8
800136d4:	c7 6f       	rcall	800135c0 <byte_swap_4>
800136d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800136da:	10 9c       	mov	r12,r8
800136dc:	2f dd       	sub	sp,-12
800136de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800136e2:	00 00       	add	r0,r0
800136e4:	80 01       	ld.sh	r1,r0[0x0]
800136e6:	35 36       	mov	r6,83

800136e8 <_MAV_RETURN_char_array>:
_MAV_MSG_RETURN_TYPE(double)
#endif // MAVLINK_NEED_BYTE_SWAP

static inline uint16_t _MAV_RETURN_char_array(const mavlink_message_t *msg, char *value, 
						     uint8_t array_length, uint8_t wire_offset)
{
800136e8:	eb cd 40 c0 	pushm	r6-r7,lr
800136ec:	1a 97       	mov	r7,sp
800136ee:	20 4d       	sub	sp,16
800136f0:	49 16       	lddpc	r6,80013734 <_MAV_RETURN_char_array+0x4c>
800136f2:	1e 26       	rsub	r6,pc
800136f4:	ef 4c ff fc 	st.w	r7[-4],r12
800136f8:	ef 4b ff f8 	st.w	r7[-8],r11
800136fc:	12 98       	mov	r8,r9
800136fe:	14 99       	mov	r9,r10
80013700:	ef 69 ff f4 	st.b	r7[-12],r9
80013704:	ef 68 ff f0 	st.b	r7[-16],r8
	memcpy(value, &_MAV_PAYLOAD(msg)[wire_offset], array_length);
80013708:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8001370c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013710:	f0 ca ff f8 	sub	r10,r8,-8
80013714:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80013718:	f4 08 00 08 	add	r8,r10,r8
8001371c:	12 9a       	mov	r10,r9
8001371e:	10 9b       	mov	r11,r8
80013720:	ee fc ff f8 	ld.w	r12,r7[-8]
80013724:	f0 16 00 1b 	mcall	r6[108]
	return array_length;
80013728:	ef 38 ff f4 	ld.ub	r8,r7[-12]
}
8001372c:	10 9c       	mov	r12,r8
8001372e:	2f cd       	sub	sp,-16
80013730:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013734:	80 01       	ld.sh	r1,r0[0x0]
80013736:	35 76       	mov	r6,87

80013738 <mavlink_msg_param_value_send>:
 * @param param_index Index of this onboard parameter
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_param_value_send(mavlink_channel_t chan, const char *param_id, float param_value, uint8_t param_type, uint16_t param_count, uint16_t param_index)
{
80013738:	eb cd 40 c0 	pushm	r6-r7,lr
8001373c:	1a 97       	mov	r7,sp
8001373e:	20 dd       	sub	sp,52
80013740:	4a 16       	lddpc	r6,800137c4 <mavlink_msg_param_value_send+0x8c>
80013742:	1e 26       	rsub	r6,pc
80013744:	ee ce ff f4 	sub	lr,r7,-12
80013748:	ef 4c ff e0 	st.w	r7[-32],r12
8001374c:	ef 4b ff dc 	st.w	r7[-36],r11
80013750:	ef 4a ff d8 	st.w	r7[-40],r10
80013754:	12 9a       	mov	r10,r9
80013756:	10 99       	mov	r9,r8
80013758:	7c 08       	ld.w	r8,lr[0x0]
8001375a:	ef 6a ff d4 	st.b	r7[-44],r10
8001375e:	ef 59 ff d0 	st.h	r7[-48],r9
80013762:	ef 58 ff cc 	st.h	r7[-52],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_PARAM_VALUE_LEN];
	_mav_put_float(buf, 0, param_value);
80013766:	ee c9 00 28 	sub	r9,r7,40
8001376a:	ee c8 00 1c 	sub	r8,r7,28
8001376e:	12 9b       	mov	r11,r9
80013770:	10 9c       	mov	r12,r8
80013772:	c2 7f       	rcall	800135c0 <byte_swap_4>
	_mav_put_uint16_t(buf, 4, param_count);
80013774:	ee c9 00 30 	sub	r9,r7,48
80013778:	ee c8 00 1c 	sub	r8,r7,28
8001377c:	2f c8       	sub	r8,-4
8001377e:	12 9b       	mov	r11,r9
80013780:	10 9c       	mov	r12,r8
80013782:	c0 5f       	rcall	8001358c <byte_swap_2>
	_mav_put_uint16_t(buf, 6, param_index);
80013784:	ee c9 00 34 	sub	r9,r7,52
80013788:	ee c8 00 1c 	sub	r8,r7,28
8001378c:	2f a8       	sub	r8,-6
8001378e:	12 9b       	mov	r11,r9
80013790:	10 9c       	mov	r12,r8
80013792:	cf de       	rcall	8001358c <byte_swap_2>
	_mav_put_uint8_t(buf, 24, param_type);
80013794:	ef 38 ff d4 	ld.ub	r8,r7[-44]
80013798:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_char_array(buf, 8, param_id, 16);
8001379c:	ee c8 00 1c 	sub	r8,r7,28
800137a0:	31 09       	mov	r9,16
800137a2:	ee fa ff dc 	ld.w	r10,r7[-36]
800137a6:	30 8b       	mov	r11,8
800137a8:	10 9c       	mov	r12,r8
800137aa:	c5 df       	rcall	80013664 <_mav_put_char_array>
#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, buf, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
800137ac:	ee ca 00 1c 	sub	r10,r7,28
800137b0:	e0 68 00 dc 	mov	r8,220
800137b4:	31 99       	mov	r9,25
800137b6:	31 6b       	mov	r11,22
800137b8:	ee fc ff e0 	ld.w	r12,r7[-32]
800137bc:	c3 ae       	rcall	80013430 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN, MAVLINK_MSG_ID_PARAM_VALUE_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_PARAM_VALUE, (const char *)&packet, MAVLINK_MSG_ID_PARAM_VALUE_LEN);
#endif
#endif
}
800137be:	2f 3d       	sub	sp,-52
800137c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800137c4:	80 01       	ld.sh	r1,r0[0x0]
800137c6:	35 c6       	mov	r6,92

800137c8 <mavlink_msg_param_set_get_target_system>:
 * @brief Get field target_system from param_set message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_system(const mavlink_message_t* msg)
{
800137c8:	eb cd 40 80 	pushm	r7,lr
800137cc:	1a 97       	mov	r7,sp
800137ce:	20 1d       	sub	sp,4
800137d0:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
800137d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800137d8:	2f 88       	sub	r8,-8
800137da:	2f c8       	sub	r8,-4
800137dc:	11 88       	ld.ub	r8,r8[0x0]
}
800137de:	10 9c       	mov	r12,r8
800137e0:	2f fd       	sub	sp,-4
800137e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800137e6 <mavlink_msg_param_set_get_target_component>:
 * @brief Get field target_component from param_set message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_param_set_get_target_component(const mavlink_message_t* msg)
{
800137e6:	eb cd 40 80 	pushm	r7,lr
800137ea:	1a 97       	mov	r7,sp
800137ec:	20 1d       	sub	sp,4
800137ee:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
800137f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800137f6:	2f 88       	sub	r8,-8
800137f8:	2f b8       	sub	r8,-5
800137fa:	11 88       	ld.ub	r8,r8[0x0]
}
800137fc:	10 9c       	mov	r12,r8
800137fe:	2f fd       	sub	sp,-4
80013800:	e3 cd 80 80 	ldm	sp++,r7,pc

80013804 <mavlink_msg_param_set_get_param_id>:
 * @brief Get field param_id from param_set message
 *
 * @return Onboard parameter id, terminated by NULL if the length is less than 16 human-readable chars and WITHOUT null termination (NULL) byte if the length is exactly 16 chars - applications have to provide 16+1 bytes storage if the ID is stored as string
 */
static inline uint16_t mavlink_msg_param_set_get_param_id(const mavlink_message_t* msg, char *param_id)
{
80013804:	eb cd 40 c0 	pushm	r6-r7,lr
80013808:	1a 97       	mov	r7,sp
8001380a:	20 2d       	sub	sp,8
8001380c:	48 a6       	lddpc	r6,80013834 <mavlink_msg_param_set_get_param_id+0x30>
8001380e:	1e 26       	rsub	r6,pc
80013810:	ef 4c ff fc 	st.w	r7[-4],r12
80013814:	ef 4b ff f8 	st.w	r7[-8],r11
	return _MAV_RETURN_char_array(msg, param_id, 16,  6);
80013818:	30 69       	mov	r9,6
8001381a:	31 0a       	mov	r10,16
8001381c:	ee fb ff f8 	ld.w	r11,r7[-8]
80013820:	ee fc ff fc 	ld.w	r12,r7[-4]
80013824:	c6 2f       	rcall	800136e8 <_MAV_RETURN_char_array>
80013826:	18 98       	mov	r8,r12
80013828:	5c 88       	casts.h	r8
8001382a:	5c 88       	casts.h	r8
}
8001382c:	10 9c       	mov	r12,r8
8001382e:	2f ed       	sub	sp,-8
80013830:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013834:	80 01       	ld.sh	r1,r0[0x0]
80013836:	36 92       	mov	r2,105

80013838 <mavlink_msg_param_set_get_param_value>:
 * @brief Get field param_value from param_set message
 *
 * @return Onboard parameter value
 */
static inline float mavlink_msg_param_set_get_param_value(const mavlink_message_t* msg)
{
80013838:	eb cd 40 c0 	pushm	r6-r7,lr
8001383c:	1a 97       	mov	r7,sp
8001383e:	20 1d       	sub	sp,4
80013840:	48 76       	lddpc	r6,8001385c <mavlink_msg_param_set_get_param_value+0x24>
80013842:	1e 26       	rsub	r6,pc
80013844:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
80013848:	30 0b       	mov	r11,0
8001384a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001384e:	c2 df       	rcall	800136a8 <_MAV_RETURN_float>
80013850:	18 98       	mov	r8,r12
}
80013852:	10 9c       	mov	r12,r8
80013854:	2f fd       	sub	sp,-4
80013856:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001385a:	00 00       	add	r0,r0
8001385c:	80 01       	ld.sh	r1,r0[0x0]
8001385e:	36 c6       	mov	r6,108

80013860 <mavlink_msg_param_set_get_param_type>:
 * @brief Get field param_type from param_set message
 *
 * @return Onboard parameter type: see the MAV_PARAM_TYPE enum for supported data types.
 */
static inline uint8_t mavlink_msg_param_set_get_param_type(const mavlink_message_t* msg)
{
80013860:	eb cd 40 80 	pushm	r7,lr
80013864:	1a 97       	mov	r7,sp
80013866:	20 1d       	sub	sp,4
80013868:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  22);
8001386c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80013870:	2f 88       	sub	r8,-8
80013872:	2e a8       	sub	r8,-22
80013874:	11 88       	ld.ub	r8,r8[0x0]
}
80013876:	10 9c       	mov	r12,r8
80013878:	2f fd       	sub	sp,-4
8001387a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001387e <mavlink_msg_param_set_decode>:
 *
 * @param msg The message to decode
 * @param param_set C-struct to decode the message contents into
 */
static inline void mavlink_msg_param_set_decode(const mavlink_message_t* msg, mavlink_param_set_t* param_set)
{
8001387e:	eb cd 40 c0 	pushm	r6-r7,lr
80013882:	1a 97       	mov	r7,sp
80013884:	20 2d       	sub	sp,8
80013886:	49 76       	lddpc	r6,800138e0 <mavlink_msg_param_set_decode+0x62>
80013888:	1e 26       	rsub	r6,pc
8001388a:	ef 4c ff fc 	st.w	r7[-4],r12
8001388e:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	param_set->param_value = mavlink_msg_param_set_get_param_value(msg);
80013892:	ee fc ff fc 	ld.w	r12,r7[-4]
80013896:	cd 1f       	rcall	80013838 <mavlink_msg_param_set_get_param_value>
80013898:	18 99       	mov	r9,r12
8001389a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001389e:	91 09       	st.w	r8[0x0],r9
	param_set->target_system = mavlink_msg_param_set_get_target_system(msg);
800138a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800138a4:	c9 2f       	rcall	800137c8 <mavlink_msg_param_set_get_target_system>
800138a6:	18 98       	mov	r8,r12
800138a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138ac:	b2 c8       	st.b	r9[0x4],r8
	param_set->target_component = mavlink_msg_param_set_get_target_component(msg);
800138ae:	ee fc ff fc 	ld.w	r12,r7[-4]
800138b2:	c9 af       	rcall	800137e6 <mavlink_msg_param_set_get_target_component>
800138b4:	18 98       	mov	r8,r12
800138b6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138ba:	b2 d8       	st.b	r9[0x5],r8
	mavlink_msg_param_set_get_param_id(msg, param_set->param_id);
800138bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800138c0:	2f a8       	sub	r8,-6
800138c2:	10 9b       	mov	r11,r8
800138c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800138c8:	c9 ef       	rcall	80013804 <mavlink_msg_param_set_get_param_id>
	param_set->param_type = mavlink_msg_param_set_get_param_type(msg);
800138ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800138ce:	cc 9f       	rcall	80013860 <mavlink_msg_param_set_get_param_type>
800138d0:	18 98       	mov	r8,r12
800138d2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800138d6:	f3 68 00 16 	st.b	r9[22],r8
#else
	memcpy(param_set, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_PARAM_SET_LEN);
#endif
}
800138da:	2f ed       	sub	sp,-8
800138dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800138e0:	80 01       	ld.sh	r1,r0[0x0]
800138e2:	37 0c       	mov	r12,112

800138e4 <init_onboard_parameters>:
#include "flashc.h"
#include "print_util.h"

Parameter_Set_t param_set;

void init_onboard_parameters(void) {
800138e4:	eb cd 40 c0 	pushm	r6-r7,lr
800138e8:	1a 97       	mov	r7,sp
800138ea:	48 a6       	lddpc	r6,80013910 <init_onboard_parameters+0x2c>
800138ec:	1e 26       	rsub	r6,pc
	param_set.param_count = 0;
800138ee:	ec f8 00 24 	ld.w	r8,r6[36]
800138f2:	30 09       	mov	r9,0
800138f4:	f1 49 0d 20 	st.w	r8[3360],r9
	param_set.enumerate=false;
800138f8:	ec f9 00 24 	ld.w	r9,r6[36]
800138fc:	30 08       	mov	r8,0
800138fe:	f3 68 0d 24 	st.b	r9[3364],r8
	param_set.transmit_parameter_index=0;
80013902:	ec f8 00 24 	ld.w	r8,r6[36]
80013906:	30 09       	mov	r9,0
80013908:	f1 49 0d 28 	st.w	r8[3368],r9
	
}
8001390c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013910:	80 01       	ld.sh	r1,r0[0x0]
80013912:	37 70       	mov	r0,119

80013914 <add_parameter_uint8>:

void add_parameter_uint8(uint8_t* val, const char* param_name) {
80013914:	eb cd 40 e0 	pushm	r5-r7,lr
80013918:	1a 97       	mov	r7,sp
8001391a:	20 2d       	sub	sp,8
8001391c:	4b 66       	lddpc	r6,800139f4 <add_parameter_uint8+0xe0>
8001391e:	1e 26       	rsub	r6,pc
80013920:	ef 4c ff fc 	st.w	r7[-4],r12
80013924:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013928:	ec f8 00 24 	ld.w	r8,r6[36]
8001392c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013930:	ee fa ff fc 	ld.w	r10,r7[-4]
80013934:	ec fb 00 24 	ld.w	r11,r6[36]
80013938:	12 98       	mov	r8,r9
8001393a:	a3 78       	lsl	r8,0x3
8001393c:	12 18       	sub	r8,r9
8001393e:	a3 68       	lsl	r8,0x2
80013940:	f6 08 00 08 	add	r8,r11,r8
80013944:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013946:	ec f8 00 24 	ld.w	r8,r6[36]
8001394a:	f0 f9 0d 20 	ld.w	r9,r8[3360]
8001394e:	12 98       	mov	r8,r9
80013950:	a3 78       	lsl	r8,0x3
80013952:	12 18       	sub	r8,r9
80013954:	2f f8       	sub	r8,-1
80013956:	f0 09 15 02 	lsl	r9,r8,0x2
8001395a:	ec f8 00 24 	ld.w	r8,r6[36]
8001395e:	f2 08 00 08 	add	r8,r9,r8
80013962:	ee fb ff f8 	ld.w	r11,r7[-8]
80013966:	10 9c       	mov	r12,r8
80013968:	f0 16 00 a2 	mcall	r6[648]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT8_T;
8001396c:	ec f8 00 24 	ld.w	r8,r6[36]
80013970:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013974:	ec fa 00 24 	ld.w	r10,r6[36]
80013978:	12 98       	mov	r8,r9
8001397a:	a3 78       	lsl	r8,0x3
8001397c:	12 18       	sub	r8,r9
8001397e:	a3 68       	lsl	r8,0x2
80013980:	f4 08 00 08 	add	r8,r10,r8
80013984:	2e c8       	sub	r8,-20
80013986:	30 19       	mov	r9,1
80013988:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
8001398a:	ec f8 00 24 	ld.w	r8,r6[36]
8001398e:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013992:	ee fc ff f8 	ld.w	r12,r7[-8]
80013996:	f0 16 00 88 	mcall	r6[544]
8001399a:	18 98       	mov	r8,r12
8001399c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800139a0:	ec fa 00 24 	ld.w	r10,r6[36]
800139a4:	0a 98       	mov	r8,r5
800139a6:	a3 78       	lsl	r8,0x3
800139a8:	0a 18       	sub	r8,r5
800139aa:	a3 68       	lsl	r8,0x2
800139ac:	f4 08 00 08 	add	r8,r10,r8
800139b0:	f0 ca ff e8 	sub	r10,r8,-24
800139b4:	12 98       	mov	r8,r9
800139b6:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
800139b8:	ec f8 00 24 	ld.w	r8,r6[36]
800139bc:	f0 f9 0d 20 	ld.w	r9,r8[3360]
800139c0:	ec fa 00 24 	ld.w	r10,r6[36]
800139c4:	12 98       	mov	r8,r9
800139c6:	a3 78       	lsl	r8,0x3
800139c8:	12 18       	sub	r8,r9
800139ca:	a3 68       	lsl	r8,0x2
800139cc:	f4 08 00 08 	add	r8,r10,r8
800139d0:	f0 c9 ff e8 	sub	r9,r8,-24
800139d4:	30 18       	mov	r8,1
800139d6:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
800139d8:	ec f8 00 24 	ld.w	r8,r6[36]
800139dc:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800139e0:	f0 c9 ff ff 	sub	r9,r8,-1
800139e4:	ec f8 00 24 	ld.w	r8,r6[36]
800139e8:	f1 49 0d 20 	st.w	r8[3360],r9
}
800139ec:	2f ed       	sub	sp,-8
800139ee:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800139f2:	00 00       	add	r0,r0
800139f4:	80 01       	ld.sh	r1,r0[0x0]
800139f6:	37 a2       	mov	r2,122

800139f8 <add_parameter_uint32>:

void add_parameter_uint32(uint32_t* val, const char* param_name) {
800139f8:	eb cd 40 e0 	pushm	r5-r7,lr
800139fc:	1a 97       	mov	r7,sp
800139fe:	20 2d       	sub	sp,8
80013a00:	4b 66       	lddpc	r6,80013ad8 <add_parameter_uint32+0xe0>
80013a02:	1e 26       	rsub	r6,pc
80013a04:	ef 4c ff fc 	st.w	r7[-4],r12
80013a08:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013a0c:	ec f8 00 24 	ld.w	r8,r6[36]
80013a10:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a14:	ee fa ff fc 	ld.w	r10,r7[-4]
80013a18:	ec fb 00 24 	ld.w	r11,r6[36]
80013a1c:	12 98       	mov	r8,r9
80013a1e:	a3 78       	lsl	r8,0x3
80013a20:	12 18       	sub	r8,r9
80013a22:	a3 68       	lsl	r8,0x2
80013a24:	f6 08 00 08 	add	r8,r11,r8
80013a28:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013a2a:	ec f8 00 24 	ld.w	r8,r6[36]
80013a2e:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a32:	12 98       	mov	r8,r9
80013a34:	a3 78       	lsl	r8,0x3
80013a36:	12 18       	sub	r8,r9
80013a38:	2f f8       	sub	r8,-1
80013a3a:	f0 09 15 02 	lsl	r9,r8,0x2
80013a3e:	ec f8 00 24 	ld.w	r8,r6[36]
80013a42:	f2 08 00 08 	add	r8,r9,r8
80013a46:	ee fb ff f8 	ld.w	r11,r7[-8]
80013a4a:	10 9c       	mov	r12,r8
80013a4c:	f0 16 00 a2 	mcall	r6[648]
	param_set.parameters[param_set.param_count].data_type= MAVLINK_TYPE_UINT32_T;
80013a50:	ec f8 00 24 	ld.w	r8,r6[36]
80013a54:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013a58:	ec fa 00 24 	ld.w	r10,r6[36]
80013a5c:	12 98       	mov	r8,r9
80013a5e:	a3 78       	lsl	r8,0x3
80013a60:	12 18       	sub	r8,r9
80013a62:	a3 68       	lsl	r8,0x2
80013a64:	f4 08 00 08 	add	r8,r10,r8
80013a68:	2e c8       	sub	r8,-20
80013a6a:	30 59       	mov	r9,5
80013a6c:	91 09       	st.w	r8[0x0],r9
    param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013a6e:	ec f8 00 24 	ld.w	r8,r6[36]
80013a72:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013a76:	ee fc ff f8 	ld.w	r12,r7[-8]
80013a7a:	f0 16 00 88 	mcall	r6[544]
80013a7e:	18 98       	mov	r8,r12
80013a80:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013a84:	ec fa 00 24 	ld.w	r10,r6[36]
80013a88:	0a 98       	mov	r8,r5
80013a8a:	a3 78       	lsl	r8,0x3
80013a8c:	0a 18       	sub	r8,r5
80013a8e:	a3 68       	lsl	r8,0x2
80013a90:	f4 08 00 08 	add	r8,r10,r8
80013a94:	f0 ca ff e8 	sub	r10,r8,-24
80013a98:	12 98       	mov	r8,r9
80013a9a:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013a9c:	ec f8 00 24 	ld.w	r8,r6[36]
80013aa0:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013aa4:	ec fa 00 24 	ld.w	r10,r6[36]
80013aa8:	12 98       	mov	r8,r9
80013aaa:	a3 78       	lsl	r8,0x3
80013aac:	12 18       	sub	r8,r9
80013aae:	a3 68       	lsl	r8,0x2
80013ab0:	f4 08 00 08 	add	r8,r10,r8
80013ab4:	f0 c9 ff e8 	sub	r9,r8,-24
80013ab8:	30 18       	mov	r8,1
80013aba:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013abc:	ec f8 00 24 	ld.w	r8,r6[36]
80013ac0:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ac4:	f0 c9 ff ff 	sub	r9,r8,-1
80013ac8:	ec f8 00 24 	ld.w	r8,r6[36]
80013acc:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013ad0:	2f ed       	sub	sp,-8
80013ad2:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013ad6:	00 00       	add	r0,r0
80013ad8:	80 01       	ld.sh	r1,r0[0x0]
80013ada:	38 86       	mov	r6,-120

80013adc <add_parameter_int32>:

void add_parameter_int32(int32_t* val, const char* param_name) {
80013adc:	eb cd 40 e0 	pushm	r5-r7,lr
80013ae0:	1a 97       	mov	r7,sp
80013ae2:	20 2d       	sub	sp,8
80013ae4:	4b 66       	lddpc	r6,80013bbc <add_parameter_int32+0xe0>
80013ae6:	1e 26       	rsub	r6,pc
80013ae8:	ef 4c ff fc 	st.w	r7[-4],r12
80013aec:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013af0:	ec f8 00 24 	ld.w	r8,r6[36]
80013af4:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013af8:	ee fa ff fc 	ld.w	r10,r7[-4]
80013afc:	ec fb 00 24 	ld.w	r11,r6[36]
80013b00:	12 98       	mov	r8,r9
80013b02:	a3 78       	lsl	r8,0x3
80013b04:	12 18       	sub	r8,r9
80013b06:	a3 68       	lsl	r8,0x2
80013b08:	f6 08 00 08 	add	r8,r11,r8
80013b0c:	91 0a       	st.w	r8[0x0],r10
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013b0e:	ec f8 00 24 	ld.w	r8,r6[36]
80013b12:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b16:	12 98       	mov	r8,r9
80013b18:	a3 78       	lsl	r8,0x3
80013b1a:	12 18       	sub	r8,r9
80013b1c:	2f f8       	sub	r8,-1
80013b1e:	f0 09 15 02 	lsl	r9,r8,0x2
80013b22:	ec f8 00 24 	ld.w	r8,r6[36]
80013b26:	f2 08 00 08 	add	r8,r9,r8
80013b2a:	ee fb ff f8 	ld.w	r11,r7[-8]
80013b2e:	10 9c       	mov	r12,r8
80013b30:	f0 16 00 a2 	mcall	r6[648]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_INT32_T;
80013b34:	ec f8 00 24 	ld.w	r8,r6[36]
80013b38:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b3c:	ec fa 00 24 	ld.w	r10,r6[36]
80013b40:	12 98       	mov	r8,r9
80013b42:	a3 78       	lsl	r8,0x3
80013b44:	12 18       	sub	r8,r9
80013b46:	a3 68       	lsl	r8,0x2
80013b48:	f4 08 00 08 	add	r8,r10,r8
80013b4c:	2e c8       	sub	r8,-20
80013b4e:	30 69       	mov	r9,6
80013b50:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013b52:	ec f8 00 24 	ld.w	r8,r6[36]
80013b56:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013b5a:	ee fc ff f8 	ld.w	r12,r7[-8]
80013b5e:	f0 16 00 88 	mcall	r6[544]
80013b62:	18 98       	mov	r8,r12
80013b64:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013b68:	ec fa 00 24 	ld.w	r10,r6[36]
80013b6c:	0a 98       	mov	r8,r5
80013b6e:	a3 78       	lsl	r8,0x3
80013b70:	0a 18       	sub	r8,r5
80013b72:	a3 68       	lsl	r8,0x2
80013b74:	f4 08 00 08 	add	r8,r10,r8
80013b78:	f0 ca ff e8 	sub	r10,r8,-24
80013b7c:	12 98       	mov	r8,r9
80013b7e:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013b80:	ec f8 00 24 	ld.w	r8,r6[36]
80013b84:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013b88:	ec fa 00 24 	ld.w	r10,r6[36]
80013b8c:	12 98       	mov	r8,r9
80013b8e:	a3 78       	lsl	r8,0x3
80013b90:	12 18       	sub	r8,r9
80013b92:	a3 68       	lsl	r8,0x2
80013b94:	f4 08 00 08 	add	r8,r10,r8
80013b98:	f0 c9 ff e8 	sub	r9,r8,-24
80013b9c:	30 18       	mov	r8,1
80013b9e:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013ba0:	ec f8 00 24 	ld.w	r8,r6[36]
80013ba4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ba8:	f0 c9 ff ff 	sub	r9,r8,-1
80013bac:	ec f8 00 24 	ld.w	r8,r6[36]
80013bb0:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013bb4:	2f ed       	sub	sp,-8
80013bb6:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013bba:	00 00       	add	r0,r0
80013bbc:	80 01       	ld.sh	r1,r0[0x0]
80013bbe:	39 6a       	mov	r10,-106

80013bc0 <add_parameter_float>:

void add_parameter_float(float* val, const char* param_name) {
80013bc0:	eb cd 40 e0 	pushm	r5-r7,lr
80013bc4:	1a 97       	mov	r7,sp
80013bc6:	20 2d       	sub	sp,8
80013bc8:	4b 66       	lddpc	r6,80013ca0 <add_parameter_float+0xe0>
80013bca:	1e 26       	rsub	r6,pc
80013bcc:	ef 4c ff fc 	st.w	r7[-4],r12
80013bd0:	ef 4b ff f8 	st.w	r7[-8],r11
	param_set.parameters[param_set.param_count].param = val;
80013bd4:	ec f8 00 24 	ld.w	r8,r6[36]
80013bd8:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013bdc:	ec fa 00 24 	ld.w	r10,r6[36]
80013be0:	12 98       	mov	r8,r9
80013be2:	a3 78       	lsl	r8,0x3
80013be4:	12 18       	sub	r8,r9
80013be6:	a3 68       	lsl	r8,0x2
80013be8:	f4 08 00 08 	add	r8,r10,r8
80013bec:	ee f9 ff fc 	ld.w	r9,r7[-4]
80013bf0:	91 09       	st.w	r8[0x0],r9
	strcpy(param_set.parameters[param_set.param_count].param_name, param_name);
80013bf2:	ec f8 00 24 	ld.w	r8,r6[36]
80013bf6:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013bfa:	12 98       	mov	r8,r9
80013bfc:	a3 78       	lsl	r8,0x3
80013bfe:	12 18       	sub	r8,r9
80013c00:	2f f8       	sub	r8,-1
80013c02:	f0 09 15 02 	lsl	r9,r8,0x2
80013c06:	ec f8 00 24 	ld.w	r8,r6[36]
80013c0a:	f2 08 00 08 	add	r8,r9,r8
80013c0e:	ee fb ff f8 	ld.w	r11,r7[-8]
80013c12:	10 9c       	mov	r12,r8
80013c14:	f0 16 00 a2 	mcall	r6[648]
	param_set.parameters[param_set.param_count].data_type = MAVLINK_TYPE_FLOAT;
80013c18:	ec f8 00 24 	ld.w	r8,r6[36]
80013c1c:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c20:	ec fa 00 24 	ld.w	r10,r6[36]
80013c24:	12 98       	mov	r8,r9
80013c26:	a3 78       	lsl	r8,0x3
80013c28:	12 18       	sub	r8,r9
80013c2a:	a3 68       	lsl	r8,0x2
80013c2c:	f4 08 00 08 	add	r8,r10,r8
80013c30:	2e c8       	sub	r8,-20
80013c32:	30 99       	mov	r9,9
80013c34:	91 09       	st.w	r8[0x0],r9
	param_set.parameters[param_set.param_count].param_name_length = strlen(param_name);
80013c36:	ec f8 00 24 	ld.w	r8,r6[36]
80013c3a:	f0 f5 0d 20 	ld.w	r5,r8[3360]
80013c3e:	ee fc ff f8 	ld.w	r12,r7[-8]
80013c42:	f0 16 00 88 	mcall	r6[544]
80013c46:	18 98       	mov	r8,r12
80013c48:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80013c4c:	ec fa 00 24 	ld.w	r10,r6[36]
80013c50:	0a 98       	mov	r8,r5
80013c52:	a3 78       	lsl	r8,0x3
80013c54:	0a 18       	sub	r8,r5
80013c56:	a3 68       	lsl	r8,0x2
80013c58:	f4 08 00 08 	add	r8,r10,r8
80013c5c:	f0 ca ff e8 	sub	r10,r8,-24
80013c60:	12 98       	mov	r8,r9
80013c62:	b4 88       	st.b	r10[0x0],r8
	param_set.parameters[param_set.param_count].schedule_for_transmission=true;
80013c64:	ec f8 00 24 	ld.w	r8,r6[36]
80013c68:	f0 f9 0d 20 	ld.w	r9,r8[3360]
80013c6c:	ec fa 00 24 	ld.w	r10,r6[36]
80013c70:	12 98       	mov	r8,r9
80013c72:	a3 78       	lsl	r8,0x3
80013c74:	12 18       	sub	r8,r9
80013c76:	a3 68       	lsl	r8,0x2
80013c78:	f4 08 00 08 	add	r8,r10,r8
80013c7c:	f0 c9 ff e8 	sub	r9,r8,-24
80013c80:	30 18       	mov	r8,1
80013c82:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
80013c84:	ec f8 00 24 	ld.w	r8,r6[36]
80013c88:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013c8c:	f0 c9 ff ff 	sub	r9,r8,-1
80013c90:	ec f8 00 24 	ld.w	r8,r6[36]
80013c94:	f1 49 0d 20 	st.w	r8[3360],r9
}
80013c98:	2f ed       	sub	sp,-8
80013c9a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013c9e:	00 00       	add	r0,r0
80013ca0:	80 01       	ld.sh	r1,r0[0x0]
80013ca2:	3a 4e       	mov	lr,-92

80013ca4 <send_all_parameters>:

void send_all_parameters() {
80013ca4:	eb cd 40 c0 	pushm	r6-r7,lr
80013ca8:	1a 97       	mov	r7,sp
80013caa:	20 1d       	sub	sp,4
80013cac:	49 26       	lddpc	r6,80013cf4 <send_all_parameters+0x50>
80013cae:	1e 26       	rsub	r6,pc
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cb0:	30 08       	mov	r8,0
80013cb2:	ef 68 ff ff 	st.b	r7[-1],r8
80013cb6:	c1 48       	rjmp	80013cde <send_all_parameters+0x3a>
		param_set.parameters[i].schedule_for_transmission=true;
80013cb8:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013cbc:	ec fa 00 24 	ld.w	r10,r6[36]
80013cc0:	12 98       	mov	r8,r9
80013cc2:	a3 78       	lsl	r8,0x3
80013cc4:	12 18       	sub	r8,r9
80013cc6:	a3 68       	lsl	r8,0x2
80013cc8:	f4 08 00 08 	add	r8,r10,r8
80013ccc:	f0 c9 ff e8 	sub	r9,r8,-24
80013cd0:	30 18       	mov	r8,1
80013cd2:	b2 a8       	st.b	r9[0x2],r8
	param_set.param_count++;
}

void send_all_parameters() {
	// schedule all parameters for transmission
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013cd4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013cd8:	2f f8       	sub	r8,-1
80013cda:	ef 68 ff ff 	st.b	r7[-1],r8
80013cde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013ce2:	ec f8 00 24 	ld.w	r8,r6[36]
80013ce6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013cea:	10 39       	cp.w	r9,r8
80013cec:	ce 65       	brlt	80013cb8 <send_all_parameters+0x14>
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}
80013cee:	2f fd       	sub	sp,-4
80013cf0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013cf4:	80 01       	ld.sh	r1,r0[0x0]
80013cf6:	3b 32       	mov	r2,-77

80013cf8 <send_all_parameters_now>:

void send_all_parameters_now() {
80013cf8:	eb cd 40 e0 	pushm	r5-r7,lr
80013cfc:	1a 97       	mov	r7,sp
80013cfe:	20 1d       	sub	sp,4
80013d00:	4a d6       	lddpc	r6,80013db4 <send_all_parameters_now+0xbc>
80013d02:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013d04:	30 08       	mov	r8,0
80013d06:	ef 68 ff ff 	st.b	r7[-1],r8
80013d0a:	c4 a8       	rjmp	80013d9e <send_all_parameters_now+0xa6>
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d0c:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013d10:	ec f8 00 24 	ld.w	r8,r6[36]
80013d14:	f0 f8 0d 20 	ld.w	r8,r8[3360]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d18:	5c 88       	casts.h	r8
80013d1a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013d1e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d22:	ec fa 00 24 	ld.w	r10,r6[36]
80013d26:	12 98       	mov	r8,r9
80013d28:	a3 78       	lsl	r8,0x3
80013d2a:	12 18       	sub	r8,r9
80013d2c:	a3 68       	lsl	r8,0x2
80013d2e:	f4 08 00 08 	add	r8,r10,r8
80013d32:	2e c8       	sub	r8,-20
80013d34:	70 08       	ld.w	r8,r8[0x0]
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013d36:	5c 58       	castu.b	r8
80013d38:	10 9c       	mov	r12,r8
80013d3a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d3e:	ec fa 00 24 	ld.w	r10,r6[36]
80013d42:	12 98       	mov	r8,r9
80013d44:	a3 78       	lsl	r8,0x3
80013d46:	12 18       	sub	r8,r9
80013d48:	a3 68       	lsl	r8,0x2
80013d4a:	f4 08 00 08 	add	r8,r10,r8
80013d4e:	70 08       	ld.w	r8,r8[0x0]
80013d50:	70 0a       	ld.w	r10,r8[0x0]
80013d52:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d56:	12 98       	mov	r8,r9
80013d58:	a3 78       	lsl	r8,0x3
80013d5a:	12 18       	sub	r8,r9
80013d5c:	2f f8       	sub	r8,-1
80013d5e:	f0 09 15 02 	lsl	r9,r8,0x2
80013d62:	ec f8 00 24 	ld.w	r8,r6[36]
80013d66:	f2 08 00 0b 	add	r11,r9,r8
80013d6a:	1a d5       	st.w	--sp,r5
80013d6c:	1c 98       	mov	r8,lr
80013d6e:	18 99       	mov	r9,r12
80013d70:	30 0c       	mov	r12,0
80013d72:	fe b0 fc e3 	rcall	80013738 <mavlink_msg_param_value_send>
80013d76:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
		param_set.parameters[i].schedule_for_transmission=false;
80013d78:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013d7c:	ec fa 00 24 	ld.w	r10,r6[36]
80013d80:	12 98       	mov	r8,r9
80013d82:	a3 78       	lsl	r8,0x3
80013d84:	12 18       	sub	r8,r9
80013d86:	a3 68       	lsl	r8,0x2
80013d88:	f4 08 00 08 	add	r8,r10,r8
80013d8c:	f0 c9 ff e8 	sub	r9,r8,-24
80013d90:	30 08       	mov	r8,0
80013d92:	b2 a8       	st.b	r9[0x2],r8
		param_set.parameters[i].schedule_for_transmission=true;
	}		
}

void send_all_parameters_now() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013d94:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013d98:	2f f8       	sub	r8,-1
80013d9a:	ef 68 ff ff 	st.b	r7[-1],r8
80013d9e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013da2:	ec f8 00 24 	ld.w	r8,r6[36]
80013da6:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013daa:	10 39       	cp.w	r9,r8
80013dac:	cb 05       	brlt	80013d0c <send_all_parameters_now+0x14>
										i);
		param_set.parameters[i].schedule_for_transmission=false;

	}

}
80013dae:	2f fd       	sub	sp,-4
80013db0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013db4:	80 01       	ld.sh	r1,r0[0x0]
80013db6:	3b 86       	mov	r6,-72

80013db8 <send_scheduled_parameters>:


void send_scheduled_parameters() {
80013db8:	eb cd 40 e0 	pushm	r5-r7,lr
80013dbc:	1a 97       	mov	r7,sp
80013dbe:	20 1d       	sub	sp,4
80013dc0:	4b 56       	lddpc	r6,80013e94 <send_scheduled_parameters+0xdc>
80013dc2:	1e 26       	rsub	r6,pc
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013dc4:	30 08       	mov	r8,0
80013dc6:	ef 68 ff ff 	st.b	r7[-1],r8
80013dca:	c5 98       	rjmp	80013e7c <send_scheduled_parameters+0xc4>
		if (param_set.parameters[i].schedule_for_transmission) {
80013dcc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dd0:	ec fa 00 24 	ld.w	r10,r6[36]
80013dd4:	12 98       	mov	r8,r9
80013dd6:	a3 78       	lsl	r8,0x3
80013dd8:	12 18       	sub	r8,r9
80013dda:	a3 68       	lsl	r8,0x2
80013ddc:	f4 08 00 08 	add	r8,r10,r8
80013de0:	2e 88       	sub	r8,-24
80013de2:	11 a8       	ld.ub	r8,r8[0x2]
80013de4:	58 08       	cp.w	r8,0
80013de6:	c4 60       	breq	80013e72 <send_scheduled_parameters+0xba>
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013de8:	ef 35 ff ff 	ld.ub	r5,r7[-1]
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
80013dec:	ec f8 00 24 	ld.w	r8,r6[36]
80013df0:	f0 f8 0d 20 	ld.w	r8,r8[3360]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013df4:	5c 88       	casts.h	r8
80013df6:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
80013dfa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013dfe:	ec fa 00 24 	ld.w	r10,r6[36]
80013e02:	12 98       	mov	r8,r9
80013e04:	a3 78       	lsl	r8,0x3
80013e06:	12 18       	sub	r8,r9
80013e08:	a3 68       	lsl	r8,0x2
80013e0a:	f4 08 00 08 	add	r8,r10,r8
80013e0e:	2e c8       	sub	r8,-20
80013e10:	70 08       	ld.w	r8,r8[0x0]


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
		if (param_set.parameters[i].schedule_for_transmission) {
			mavlink_msg_param_value_send(MAVLINK_COMM_0,
80013e12:	5c 58       	castu.b	r8
80013e14:	10 9c       	mov	r12,r8
80013e16:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e1a:	ec fa 00 24 	ld.w	r10,r6[36]
80013e1e:	12 98       	mov	r8,r9
80013e20:	a3 78       	lsl	r8,0x3
80013e22:	12 18       	sub	r8,r9
80013e24:	a3 68       	lsl	r8,0x2
80013e26:	f4 08 00 08 	add	r8,r10,r8
80013e2a:	70 08       	ld.w	r8,r8[0x0]
80013e2c:	70 0a       	ld.w	r10,r8[0x0]
80013e2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e32:	12 98       	mov	r8,r9
80013e34:	a3 78       	lsl	r8,0x3
80013e36:	12 18       	sub	r8,r9
80013e38:	2f f8       	sub	r8,-1
80013e3a:	f0 09 15 02 	lsl	r9,r8,0x2
80013e3e:	ec f8 00 24 	ld.w	r8,r6[36]
80013e42:	f2 08 00 0b 	add	r11,r9,r8
80013e46:	1a d5       	st.w	--sp,r5
80013e48:	1c 98       	mov	r8,lr
80013e4a:	18 99       	mov	r9,r12
80013e4c:	30 0c       	mov	r12,0
80013e4e:	fe b0 fc 75 	rcall	80013738 <mavlink_msg_param_value_send>
80013e52:	2f fd       	sub	sp,-4
										(int8_t*)param_set.parameters[i].param_name,
										*param_set.parameters[i].param,
										param_set.parameters[i].data_type,
										param_set.param_count,
										i);
			param_set.parameters[i].schedule_for_transmission=false;
80013e54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e58:	ec fa 00 24 	ld.w	r10,r6[36]
80013e5c:	12 98       	mov	r8,r9
80013e5e:	a3 78       	lsl	r8,0x3
80013e60:	12 18       	sub	r8,r9
80013e62:	a3 68       	lsl	r8,0x2
80013e64:	f4 08 00 08 	add	r8,r10,r8
80013e68:	f0 c9 ff e8 	sub	r9,r8,-24
80013e6c:	30 08       	mov	r8,0
80013e6e:	b2 a8       	st.b	r9[0x2],r8
			return;
80013e70:	c0 e8       	rjmp	80013e8c <send_scheduled_parameters+0xd4>

}


void send_scheduled_parameters() {
	for (uint8_t i = 0; i < param_set.param_count; i++) {
80013e72:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80013e76:	2f f8       	sub	r8,-1
80013e78:	ef 68 ff ff 	st.b	r7[-1],r8
80013e7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80013e80:	ec f8 00 24 	ld.w	r8,r6[36]
80013e84:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013e88:	10 39       	cp.w	r9,r8
80013e8a:	ca 15       	brlt	80013dcc <send_scheduled_parameters+0x14>
			param_set.parameters[i].schedule_for_transmission=false;
			return;
		}			

	}
}
80013e8c:	2f fd       	sub	sp,-4
80013e8e:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80013e92:	00 00       	add	r0,r0
80013e94:	80 01       	ld.sh	r1,r0[0x0]
80013e96:	3c 46       	mov	r6,-60

80013e98 <send_parameter>:


void send_parameter(mavlink_param_request_read_t* request) {
80013e98:	eb cd 40 c0 	pushm	r6-r7,lr
80013e9c:	1a 97       	mov	r7,sp
80013e9e:	20 4d       	sub	sp,16
80013ea0:	4d 26       	lddpc	r6,80013fe8 <send_parameter+0x150>
80013ea2:	1e 26       	rsub	r6,pc
80013ea4:	ef 4c ff f0 	st.w	r7[-16],r12
	if(request->param_index!=-1) {
80013ea8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013eac:	90 09       	ld.sh	r9,r8[0x0]
80013eae:	3f f8       	mov	r8,-1
80013eb0:	f0 09 19 00 	cp.h	r9,r8
80013eb4:	c1 d0       	breq	80013eee <send_parameter+0x56>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013eb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013eba:	90 08       	ld.sh	r8,r8[0x0]
80013ebc:	10 99       	mov	r9,r8
80013ebe:	ec f8 00 24 	ld.w	r8,r6[36]
80013ec2:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013ec6:	10 39       	cp.w	r9,r8
80013ec8:	e0 89 00 8b 	brgt	80013fde <send_parameter+0x146>
		param_set.parameters[request->param_index].schedule_for_transmission=true;
80013ecc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ed0:	90 08       	ld.sh	r8,r8[0x0]
80013ed2:	10 99       	mov	r9,r8
80013ed4:	ec fa 00 24 	ld.w	r10,r6[36]
80013ed8:	12 98       	mov	r8,r9
80013eda:	a3 78       	lsl	r8,0x3
80013edc:	12 18       	sub	r8,r9
80013ede:	a3 68       	lsl	r8,0x2
80013ee0:	f4 08 00 08 	add	r8,r10,r8
80013ee4:	f0 c9 ff e8 	sub	r9,r8,-24
80013ee8:	30 18       	mov	r8,1
80013eea:	b2 a8       	st.b	r9[0x2],r8
80013eec:	c7 a8       	rjmp	80013fe0 <send_parameter+0x148>

	}
	else {
		char* key = (char*) request->param_id;		
80013eee:	ee f8 ff f0 	ld.w	r8,r7[-16]
80013ef2:	2f c8       	sub	r8,-4
80013ef4:	ef 48 ff f4 	st.w	r7[-12],r8
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013ef8:	30 08       	mov	r8,0
80013efa:	ef 58 ff fa 	st.h	r7[-6],r8
80013efe:	c6 78       	rjmp	80013fcc <send_parameter+0x134>
			bool match = true;
80013f00:	30 18       	mov	r8,1
80013f02:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f06:	30 08       	mov	r8,0
80013f08:	ef 58 ff fe 	st.h	r7[-2],r8
80013f0c:	c3 38       	rjmp	80013f72 <send_parameter+0xda>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80013f0e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f12:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f16:	ec fb 00 24 	ld.w	r11,r6[36]
80013f1a:	12 98       	mov	r8,r9
80013f1c:	a3 78       	lsl	r8,0x3
80013f1e:	12 18       	sub	r8,r9
80013f20:	a3 68       	lsl	r8,0x2
80013f22:	f6 08 00 08 	add	r8,r11,r8
80013f26:	14 08       	add	r8,r10
80013f28:	2f c8       	sub	r8,-4
80013f2a:	11 89       	ld.ub	r9,r8[0x0]
80013f2c:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80013f30:	ee fa ff f4 	ld.w	r10,r7[-12]
80013f34:	f4 08 00 08 	add	r8,r10,r8
80013f38:	11 88       	ld.ub	r8,r8[0x0]
80013f3a:	f0 09 18 00 	cp.b	r9,r8
80013f3e:	c0 40       	breq	80013f46 <send_parameter+0xae>
					match = false;
80013f40:	30 08       	mov	r8,0
80013f42:	ef 68 ff fd 	st.b	r7[-3],r8
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80013f46:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f4a:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80013f4e:	ec fb 00 24 	ld.w	r11,r6[36]
80013f52:	12 98       	mov	r8,r9
80013f54:	a3 78       	lsl	r8,0x3
80013f56:	12 18       	sub	r8,r9
80013f58:	a3 68       	lsl	r8,0x2
80013f5a:	f6 08 00 08 	add	r8,r11,r8
80013f5e:	14 08       	add	r8,r10
80013f60:	2f c8       	sub	r8,-4
80013f62:	11 88       	ld.ub	r8,r8[0x0]
80013f64:	58 08       	cp.w	r8,0
80013f66:	c1 80       	breq	80013f96 <send_parameter+0xfe>
	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80013f68:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80013f6c:	2f f8       	sub	r8,-1
80013f6e:	ef 58 ff fe 	st.h	r7[-2],r8
80013f72:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013f76:	ec fa 00 24 	ld.w	r10,r6[36]
80013f7a:	12 98       	mov	r8,r9
80013f7c:	a3 78       	lsl	r8,0x3
80013f7e:	12 18       	sub	r8,r9
80013f80:	a3 68       	lsl	r8,0x2
80013f82:	f4 08 00 08 	add	r8,r10,r8
80013f86:	2e 88       	sub	r8,-24
80013f88:	11 88       	ld.ub	r8,r8[0x0]
80013f8a:	ef 09 ff fe 	ld.sh	r9,r7[-2]
80013f8e:	f0 09 19 00 	cp.h	r9,r8
80013f92:	cb e3       	brcs	80013f0e <send_parameter+0x76>
80013f94:	c0 28       	rjmp	80013f98 <send_parameter+0x100>
					match = false;
				}
 
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
80013f96:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
80013f98:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80013f9c:	30 08       	mov	r8,0
80013f9e:	f0 09 18 00 	cp.b	r9,r8
80013fa2:	c1 00       	breq	80013fc2 <send_parameter+0x12a>
				/*
				mavlink_msg_param_value_send(MAVLINK_COMM_0,
											(int8_t*)param_set.parameters[i].param_name,
											*param_set.parameters[i].param, param_set.parameters[i].data_type, 
											param_set.param_count, i);*/
				param_set.parameters[i].schedule_for_transmission=true;
80013fa4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fa8:	ec fa 00 24 	ld.w	r10,r6[36]
80013fac:	12 98       	mov	r8,r9
80013fae:	a3 78       	lsl	r8,0x3
80013fb0:	12 18       	sub	r8,r9
80013fb2:	a3 68       	lsl	r8,0x2
80013fb4:	f4 08 00 08 	add	r8,r10,r8
80013fb8:	f0 c9 ff e8 	sub	r9,r8,-24
80013fbc:	30 18       	mov	r8,1
80013fbe:	b2 a8       	st.b	r9[0x2],r8

				break;
80013fc0:	c1 08       	rjmp	80013fe0 <send_parameter+0x148>
		param_set.parameters[request->param_index].schedule_for_transmission=true;

	}
	else {
		char* key = (char*) request->param_id;		
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80013fc2:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80013fc6:	2f f8       	sub	r8,-1
80013fc8:	ef 58 ff fa 	st.h	r7[-6],r8
80013fcc:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80013fd0:	ec f8 00 24 	ld.w	r8,r6[36]
80013fd4:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80013fd8:	10 39       	cp.w	r9,r8
80013fda:	c9 35       	brlt	80013f00 <send_parameter+0x68>
80013fdc:	c0 28       	rjmp	80013fe0 <send_parameter+0x148>
									(int8_t*)param_set.parameters[request->param_index].param_name,
									*param_set.parameters[request->param_index].param,
									param_set.parameters[request->param_index].data_type,
									param_set.param_count,
									request->param_index);*/
		if (request->param_index>param_set.param_count) return;
80013fde:	d7 03       	nop

				break;
			}					
		}
	}
}
80013fe0:	2f cd       	sub	sp,-16
80013fe2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80013fe6:	00 00       	add	r0,r0
80013fe8:	80 01       	ld.sh	r1,r0[0x0]
80013fea:	3d 26       	mov	r6,-46

80013fec <receive_parameter>:

void receive_parameter(Mavlink_Received_t* rec) {
80013fec:	eb cd 40 c0 	pushm	r6-r7,lr
80013ff0:	1a 97       	mov	r7,sp
80013ff2:	20 ad       	sub	sp,40
80013ff4:	4e 76       	lddpc	r6,80014190 <receive_parameter+0x1a4>
80013ff6:	1e 26       	rsub	r6,pc
80013ff8:	ef 4c ff d8 	st.w	r7[-40],r12
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
80013ffc:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014000:	ee c9 00 24 	sub	r9,r7,36
80014004:	12 9b       	mov	r11,r9
80014006:	10 9c       	mov	r12,r8
80014008:	fe b0 fc 3b 	rcall	8001387e <mavlink_msg_param_set_decode>
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
8001400c:	ef 39 ff e0 	ld.ub	r9,r7[-32]
80014010:	ec f8 00 74 	ld.w	r8,r6[116]
80014014:	11 88       	ld.ub	r8,r8[0x0]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014016:	f0 09 18 00 	cp.b	r9,r8
8001401a:	e0 81 00 b7 	brne	80014188 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
8001401e:	ef 39 ff e1 	ld.ub	r9,r7[-31]
80014022:	ec f8 00 74 	ld.w	r8,r6[116]
80014026:	11 98       	ld.ub	r8,r8[0x1]
void receive_parameter(Mavlink_Received_t* rec) {
	mavlink_param_set_t set;
	mavlink_msg_param_set_decode(&rec->msg, &set);
 
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
80014028:	f0 09 18 00 	cp.b	r9,r8
8001402c:	e0 81 00 ae 	brne	80014188 <receive_parameter+0x19c>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
80014030:	ee c8 00 24 	sub	r8,r7,36
80014034:	2f a8       	sub	r8,-6
80014036:	ef 48 ff f4 	st.w	r7[-12],r8
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
8001403a:	30 08       	mov	r8,0
8001403c:	ef 58 ff fa 	st.h	r7[-6],r8
80014040:	c9 78       	rjmp	8001416e <receive_parameter+0x182>
			bool match = true;
80014042:	30 18       	mov	r8,1
80014044:	ef 68 ff fd 	st.b	r7[-3],r8
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
80014048:	30 08       	mov	r8,0
8001404a:	ef 58 ff fe 	st.h	r7[-2],r8
8001404e:	c3 38       	rjmp	800140b4 <receive_parameter+0xc8>
				// Compare
				if ((char)param_set.parameters[i].param_name[j] != (char)key[j]) {
80014050:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014054:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80014058:	ec fb 00 24 	ld.w	r11,r6[36]
8001405c:	12 98       	mov	r8,r9
8001405e:	a3 78       	lsl	r8,0x3
80014060:	12 18       	sub	r8,r9
80014062:	a3 68       	lsl	r8,0x2
80014064:	f6 08 00 08 	add	r8,r11,r8
80014068:	14 08       	add	r8,r10
8001406a:	2f c8       	sub	r8,-4
8001406c:	11 89       	ld.ub	r9,r8[0x0]
8001406e:	ef 18 ff fe 	ld.uh	r8,r7[-2]
80014072:	ee fa ff f4 	ld.w	r10,r7[-12]
80014076:	f4 08 00 08 	add	r8,r10,r8
8001407a:	11 88       	ld.ub	r8,r8[0x0]
8001407c:	f0 09 18 00 	cp.b	r9,r8
80014080:	c0 40       	breq	80014088 <receive_parameter+0x9c>
					match = false;
80014082:	30 08       	mov	r8,0
80014084:	ef 68 ff fd 	st.b	r7[-3],r8
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
80014088:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001408c:	ef 1a ff fe 	ld.uh	r10,r7[-2]
80014090:	ec fb 00 24 	ld.w	r11,r6[36]
80014094:	12 98       	mov	r8,r9
80014096:	a3 78       	lsl	r8,0x3
80014098:	12 18       	sub	r8,r9
8001409a:	a3 68       	lsl	r8,0x2
8001409c:	f6 08 00 08 	add	r8,r11,r8
800140a0:	14 08       	add	r8,r10
800140a2:	2f c8       	sub	r8,-4
800140a4:	11 88       	ld.ub	r8,r8[0x0]
800140a6:	58 08       	cp.w	r8,0
800140a8:	c1 80       	breq	800140d8 <receive_parameter+0xec>
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
			bool match = true;
			for (uint16_t j = 0; j < param_set.parameters[i].param_name_length; j++) {
800140aa:	ef 08 ff fe 	ld.sh	r8,r7[-2]
800140ae:	2f f8       	sub	r8,-1
800140b0:	ef 58 ff fe 	st.h	r7[-2],r8
800140b4:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140b8:	ec fa 00 24 	ld.w	r10,r6[36]
800140bc:	12 98       	mov	r8,r9
800140be:	a3 78       	lsl	r8,0x3
800140c0:	12 18       	sub	r8,r9
800140c2:	a3 68       	lsl	r8,0x2
800140c4:	f4 08 00 08 	add	r8,r10,r8
800140c8:	2e 88       	sub	r8,-24
800140ca:	11 88       	ld.ub	r8,r8[0x0]
800140cc:	ef 09 ff fe 	ld.sh	r9,r7[-2]
800140d0:	f0 09 19 00 	cp.h	r9,r8
800140d4:	cb e3       	brcs	80014050 <receive_parameter+0x64>
800140d6:	c0 28       	rjmp	800140da <receive_parameter+0xee>
					match = false;
				}
		
				// End matching if null termination is reached
				if (((char)param_set.parameters[i].param_name[j]) == '\0') {
					break;
800140d8:	d7 03       	nop
				}
			}
 
			// Check if matched
			if (match) {
800140da:	ef 39 ff fd 	ld.ub	r9,r7[-3]
800140de:	30 08       	mov	r8,0
800140e0:	f0 09 18 00 	cp.b	r9,r8
800140e4:	c4 00       	breq	80014164 <receive_parameter+0x178>
				// Only write and emit changes if there is actually a difference
				if (*param_set.parameters[i].param != set.param_value && set.param_type == param_set.parameters[i].data_type) {
800140e6:	ef 19 ff fa 	ld.uh	r9,r7[-6]
800140ea:	ec fa 00 24 	ld.w	r10,r6[36]
800140ee:	12 98       	mov	r8,r9
800140f0:	a3 78       	lsl	r8,0x3
800140f2:	12 18       	sub	r8,r9
800140f4:	a3 68       	lsl	r8,0x2
800140f6:	f4 08 00 08 	add	r8,r10,r8
800140fa:	70 08       	ld.w	r8,r8[0x0]
800140fc:	70 09       	ld.w	r9,r8[0x0]
800140fe:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014102:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
80014106:	c3 e0       	breq	80014182 <receive_parameter+0x196>
80014108:	ef 38 ff f2 	ld.ub	r8,r7[-14]
8001410c:	10 9a       	mov	r10,r8
8001410e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014112:	ec fb 00 24 	ld.w	r11,r6[36]
80014116:	12 98       	mov	r8,r9
80014118:	a3 78       	lsl	r8,0x3
8001411a:	12 18       	sub	r8,r9
8001411c:	a3 68       	lsl	r8,0x2
8001411e:	f6 08 00 08 	add	r8,r11,r8
80014122:	2e c8       	sub	r8,-20
80014124:	70 08       	ld.w	r8,r8[0x0]
80014126:	10 3a       	cp.w	r10,r8
80014128:	c2 f1       	brne	80014186 <receive_parameter+0x19a>
					*param_set.parameters[i].param = set.param_value;
8001412a:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001412e:	ec fa 00 24 	ld.w	r10,r6[36]
80014132:	12 98       	mov	r8,r9
80014134:	a3 78       	lsl	r8,0x3
80014136:	12 18       	sub	r8,r9
80014138:	a3 68       	lsl	r8,0x2
8001413a:	f4 08 00 08 	add	r8,r10,r8
8001413e:	70 08       	ld.w	r8,r8[0x0]
80014140:	ee f9 ff dc 	ld.w	r9,r7[-36]
80014144:	91 09       	st.w	r8[0x0],r9
//					mavlink_msg_param_value_send(MAVLINK_COMM_0,
//												(int8_t*)param_set.parameters[i].param_name,
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
80014146:	ef 19 ff fa 	ld.uh	r9,r7[-6]
8001414a:	ec fa 00 24 	ld.w	r10,r6[36]
8001414e:	12 98       	mov	r8,r9
80014150:	a3 78       	lsl	r8,0x3
80014152:	12 18       	sub	r8,r9
80014154:	a3 68       	lsl	r8,0x2
80014156:	f4 08 00 08 	add	r8,r10,r8
8001415a:	f0 c9 ff e8 	sub	r9,r8,-24
8001415e:	30 18       	mov	r8,1
80014160:	b2 a8       	st.b	r9[0x2],r8
				}
				break;
80014162:	c1 38       	rjmp	80014188 <receive_parameter+0x19c>
	// Check if this message is for this system and subsystem
	if ((uint8_t)set.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)set.target_component == (uint8_t)mavlink_system.compid) {
		char* key = (char*) set.param_id;
				
		for (uint16_t i = 0; i < param_set.param_count; i++) {
80014164:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80014168:	2f f8       	sub	r8,-1
8001416a:	ef 58 ff fa 	st.h	r7[-6],r8
8001416e:	ef 19 ff fa 	ld.uh	r9,r7[-6]
80014172:	ec f8 00 24 	ld.w	r8,r6[36]
80014176:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001417a:	10 39       	cp.w	r9,r8
8001417c:	fe 95 ff 63 	brlt	80014042 <receive_parameter+0x56>
80014180:	c0 48       	rjmp	80014188 <receive_parameter+0x19c>
//												*param_set.parameters[i].param, param_set.parameters[i].data_type, 
//												param_set.param_count, i);
					// schedule parameter for transmission downstream
					param_set.parameters[i].schedule_for_transmission=true;
				}
				break;
80014182:	d7 03       	nop
80014184:	c0 28       	rjmp	80014188 <receive_parameter+0x19c>
80014186:	d7 03       	nop
			}
		}
	}
}
80014188:	2f 6d       	sub	sp,-40
8001418a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001418e:	00 00       	add	r0,r0
80014190:	80 01       	ld.sh	r1,r0[0x0]
80014192:	3e 7a       	mov	r10,-25
80014194:	46 6c       	lddsp	r12,sp[0x198]
80014196:	61 73       	ld.w	r3,r0[0x5c]
80014198:	68 20       	ld.w	r0,r4[0x8]
8001419a:	72 65       	ld.w	r5,r9[0x18]
8001419c:	61 64       	ld.w	r4,r0[0x58]
8001419e:	20 73       	sub	r3,7
800141a0:	75 63       	ld.w	r3,r10[0x58]
800141a2:	63 65       	ld.w	r5,r1[0x58]
800141a4:	73 73       	ld.w	r3,r9[0x5c]
800141a6:	66 75       	ld.w	r5,r3[0x1c]
800141a8:	6c 21       	ld.w	r1,r6[0x8]
800141aa:	20 4e       	sub	lr,4
800141ac:	65 77       	ld.w	r7,r2[0x5c]
800141ae:	20 50       	sub	r0,5
800141b0:	61 72       	ld.w	r2,r0[0x5c]
800141b2:	61 6d       	ld.w	sp,r0[0x58]
800141b4:	65 74       	ld.w	r4,r2[0x5c]
800141b6:	65 72       	ld.w	r2,r2[0x5c]
800141b8:	73 20       	ld.w	r0,r9[0x48]
800141ba:	69 6e       	ld.w	lr,r4[0x58]
800141bc:	73 65       	ld.w	r5,r9[0x58]
800141be:	72 74       	ld.w	r4,r9[0x1c]
800141c0:	65 64       	ld.w	r4,r2[0x58]
800141c2:	2e 20       	sub	r0,-30
800141c4:	0a 00       	add	r0,r5
800141c6:	00 00       	add	r0,r0
800141c8:	46 6c       	lddsp	r12,sp[0x198]
800141ca:	61 73       	ld.w	r3,r0[0x5c]
800141cc:	68 20       	ld.w	r0,r4[0x8]
800141ce:	6d 65       	ld.w	r5,r6[0x58]
800141d0:	6d 6f       	ld.w	pc,r6[0x58]
800141d2:	72 79       	ld.w	r9,r9[0x1c]
800141d4:	20 63       	sub	r3,6
800141d6:	6f 72       	ld.w	r2,r7[0x5c]
800141d8:	72 75       	ld.w	r5,r9[0x1c]
800141da:	70 74       	ld.w	r4,r8[0x1c]
800141dc:	65 64       	ld.w	r4,r2[0x58]
800141de:	21 20       	sub	r0,18
800141e0:	48 61       	lddpc	r1,800141f8 <receive_parameter+0x20c>
800141e2:	72 64       	ld.w	r4,r9[0x18]
800141e4:	63 6f       	ld.w	pc,r1[0x58]
800141e6:	64 65       	ld.w	r5,r2[0x18]
800141e8:	64 20       	ld.w	r0,r2[0x8]
800141ea:	76 61       	ld.w	r1,r11[0x18]
800141ec:	6c 75       	ld.w	r5,r6[0x1c]
800141ee:	65 73       	ld.w	r3,r2[0x5c]
800141f0:	20 74       	sub	r4,7
800141f2:	61 6b       	ld.w	r11,r0[0x58]
800141f4:	65 6e       	ld.w	lr,r2[0x58]
800141f6:	2e 0a       	sub	r10,-32
	...

800141fa <read_parameters_from_flashc>:

void read_parameters_from_flashc()
{
800141fa:	eb cd 40 c0 	pushm	r6-r7,lr
800141fe:	1a 97       	mov	r7,sp
80014200:	fa cd 01 f8 	sub	sp,sp,504
80014204:	4d 06       	lddpc	r6,80014344 <read_parameters_from_flashc+0x14a>
80014206:	1e 26       	rsub	r6,pc
	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
80014208:	ec f8 01 a0 	ld.w	r8,r6[416]
8001420c:	30 49       	mov	r9,4
8001420e:	ea 19 80 80 	orh	r9,0x8080
80014212:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	float cksum1, cksum2;
	cksum1 = 0;
80014214:	30 08       	mov	r8,0
80014216:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum2 = 0;
8001421a:	30 08       	mov	r8,0
8001421c:	ef 48 ff fc 	st.w	r7[-4],r8
	
	for (i=0;i<(param_set.param_count+1);i++)
80014220:	30 08       	mov	r8,0
80014222:	ef 68 ff f7 	st.b	r7[-9],r8
80014226:	c2 98       	rjmp	80014278 <read_parameters_from_flashc+0x7e>
	{
		local_array.values[i] = nvram_array->values[i];
80014228:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001422c:	ec f9 01 a0 	ld.w	r9,r6[416]
80014230:	72 09       	ld.w	r9,r9[0x0]
80014232:	ef 3a ff f7 	ld.ub	r10,r7[-9]
80014236:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001423a:	a3 68       	lsl	r8,0x2
8001423c:	ee 08 00 08 	add	r8,r7,r8
80014240:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014244:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014248:	a3 68       	lsl	r8,0x2
8001424a:	ee 08 00 08 	add	r8,r7,r8
8001424e:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014252:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014256:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001425a:	ef 48 ff f8 	st.w	r7[-8],r8
		cksum2 += cksum1;
8001425e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014262:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014266:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001426a:	ef 48 ff fc 	st.w	r7[-4],r8
	
	float cksum1, cksum2;
	cksum1 = 0;
	cksum2 = 0;
	
	for (i=0;i<(param_set.param_count+1);i++)
8001426e:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80014272:	2f f8       	sub	r8,-1
80014274:	ef 68 ff f7 	st.b	r7[-9],r8
80014278:	ef 39 ff f7 	ld.ub	r9,r7[-9]
8001427c:	ec f8 00 24 	ld.w	r8,r6[36]
80014280:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014284:	2f f8       	sub	r8,-1
80014286:	10 39       	cp.w	r9,r8
80014288:	cd 05       	brlt	80014228 <read_parameters_from_flashc+0x2e>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
8001428a:	ec f8 00 24 	ld.w	r8,r6[36]
8001428e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014292:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80014296:	ee f8 fe 08 	ld.w	r8,r7[-504]
8001429a:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
8001429e:	c4 b1       	brne	80014334 <read_parameters_from_flashc+0x13a>
800142a0:	ec f8 01 a0 	ld.w	r8,r6[416]
800142a4:	70 08       	ld.w	r8,r8[0x0]
800142a6:	ec f9 00 24 	ld.w	r9,r6[36]
800142aa:	f2 f9 0d 20 	ld.w	r9,r9[3360]
800142ae:	2f f9       	sub	r9,-1
800142b0:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800142b8:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142bc:	c3 c1       	brne	80014334 <read_parameters_from_flashc+0x13a>
800142be:	ec f8 01 a0 	ld.w	r8,r6[416]
800142c2:	70 08       	ld.w	r8,r8[0x0]
800142c4:	ec f9 00 24 	ld.w	r9,r6[36]
800142c8:	f2 f9 0d 20 	ld.w	r9,r9[3360]
800142cc:	2f e9       	sub	r9,-2
800142ce:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800142d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800142d6:	e5 ac 00 98 	cop	cp0,cr0,cr9,cr8,0x58
800142da:	c2 d1       	brne	80014334 <read_parameters_from_flashc+0x13a>
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
800142dc:	fe cc 01 48 	sub	r12,pc,328
800142e0:	f0 16 00 01 	mcall	r6[4]
		for (i=1;i<(param_set.param_count+1);i++)
800142e4:	30 18       	mov	r8,1
800142e6:	ef 68 ff f7 	st.b	r7[-9],r8
800142ea:	c1 b8       	rjmp	80014320 <read_parameters_from_flashc+0x126>
		{
			*param_set.parameters[i-1].param = local_array.values[i];
800142ec:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800142f0:	f0 c9 00 01 	sub	r9,r8,1
800142f4:	ec fa 00 24 	ld.w	r10,r6[36]
800142f8:	12 98       	mov	r8,r9
800142fa:	a3 78       	lsl	r8,0x3
800142fc:	12 18       	sub	r8,r9
800142fe:	a3 68       	lsl	r8,0x2
80014300:	f4 08 00 08 	add	r8,r10,r8
80014304:	70 09       	ld.w	r9,r8[0x0]
80014306:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001430a:	a3 68       	lsl	r8,0x2
8001430c:	ee 08 00 08 	add	r8,r7,r8
80014310:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014314:	93 08       	st.w	r9[0x0],r8
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
	{
		dbg_print("Flash read successful! New Parameters inserted. \n");
		for (i=1;i<(param_set.param_count+1);i++)
80014316:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001431a:	2f f8       	sub	r8,-1
8001431c:	ef 68 ff f7 	st.b	r7[-9],r8
80014320:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80014324:	ec f8 00 24 	ld.w	r8,r6[36]
80014328:	f0 f8 0d 20 	ld.w	r8,r8[3360]
8001432c:	2f f8       	sub	r8,-1
8001432e:	10 39       	cp.w	r9,r8
80014330:	cd e5       	brlt	800142ec <read_parameters_from_flashc+0xf2>
		local_array.values[i] = nvram_array->values[i];
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	
	if ((param_set.param_count==local_array.values[0])&&(cksum1 == nvram_array->values[param_set.param_count+1])&&(cksum2 == nvram_array->values[param_set.param_count+2]))
80014332:	c0 58       	rjmp	8001433c <read_parameters_from_flashc+0x142>
		for (i=1;i<(param_set.param_count+1);i++)
		{
			*param_set.parameters[i-1].param = local_array.values[i];
		}
	}else{
		dbg_print("Flash memory corrupted! Hardcoded values taken.\n");
80014334:	fe cc 01 6c 	sub	r12,pc,364
80014338:	f0 16 00 01 	mcall	r6[4]
	}
}
8001433c:	28 2d       	sub	sp,-504
8001433e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014342:	00 00       	add	r0,r0
80014344:	80 01       	ld.sh	r1,r0[0x0]
80014346:	40 8a       	lddsp	r10,sp[0x20]
80014348:	42 65       	lddsp	r5,sp[0x98]
8001434a:	67 69       	ld.w	r9,r3[0x58]
8001434c:	6e 20       	ld.w	r0,r7[0x8]
8001434e:	77 72       	ld.w	r2,r11[0x5c]
80014350:	69 74       	ld.w	r4,r4[0x5c]
80014352:	65 20       	ld.w	r0,r2[0x48]
80014354:	74 6f       	ld.w	pc,r10[0x18]
80014356:	20 66       	sub	r6,6
80014358:	6c 61       	ld.w	r1,r6[0x18]
8001435a:	73 68       	ld.w	r8,r9[0x58]
8001435c:	63 2e       	ld.w	lr,r1[0x48]
8001435e:	2e 2e       	sub	lr,-30
80014360:	0a 00       	add	r0,r5
80014362:	00 00       	add	r0,r0
80014364:	57 72       	stdsp	sp[0x1dc],r2
80014366:	69 74       	ld.w	r4,r4[0x5c]
80014368:	65 20       	ld.w	r0,r2[0x48]
8001436a:	74 6f       	ld.w	pc,r10[0x18]
8001436c:	20 66       	sub	r6,6
8001436e:	61 6c       	ld.w	r12,r0[0x58]
80014370:	73 68       	ld.w	r8,r9[0x58]
80014372:	63 20       	ld.w	r0,r1[0x48]
80014374:	63 6f       	ld.w	pc,r1[0x58]
80014376:	6d 70       	ld.w	r0,r6[0x5c]
80014378:	6c 65       	ld.w	r5,r6[0x18]
8001437a:	74 65       	ld.w	r5,r10[0x18]
8001437c:	64 2e       	ld.w	lr,r2[0x8]
8001437e:	0a 00       	add	r0,r5

80014380 <write_parameters_to_flashc>:

void write_parameters_to_flashc()
{
80014380:	eb cd 40 c0 	pushm	r6-r7,lr
80014384:	1a 97       	mov	r7,sp
80014386:	fa cd 01 f8 	sub	sp,sp,504
8001438a:	4c 96       	lddpc	r6,800144ac <write_parameters_to_flashc+0x12c>
8001438c:	1e 26       	rsub	r6,pc
	float cksum1, cksum2;
	cksum1 = 0;
8001438e:	30 08       	mov	r8,0
80014390:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 = 0;
80014394:	30 08       	mov	r8,0
80014396:	ef 48 ff f8 	st.w	r7[-8],r8

	uint8_t i;
	nvram_array = AVR32_FLASHC_USER_PAGE_ADDRESS + 0x04;
8001439a:	ec f8 01 a0 	ld.w	r8,r6[416]
8001439e:	30 49       	mov	r9,4
800143a0:	ea 19 80 80 	orh	r9,0x8080
800143a4:	91 09       	st.w	r8[0x0],r9
	
	nvram_data_ttt local_array;
	
	local_array.values[0] = param_set.param_count;
800143a6:	ec f8 00 24 	ld.w	r8,r6[36]
800143aa:	f0 f8 0d 20 	ld.w	r8,r8[3360]
800143ae:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800143b2:	ef 48 fe 08 	st.w	r7[-504],r8
	cksum1 += local_array.values[0];
800143b6:	ee f8 fe 08 	ld.w	r8,r7[-504]
800143ba:	ee f9 ff f4 	ld.w	r9,r7[-12]
800143be:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143c2:	ef 48 ff f4 	st.w	r7[-12],r8
	cksum2 += cksum1;
800143c6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800143ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
800143ce:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800143d2:	ef 48 ff f8 	st.w	r7[-8],r8
	
	dbg_print("Begin write to flashc...\n");
800143d6:	fe cc 00 8e 	sub	r12,pc,142
800143da:	f0 16 00 01 	mcall	r6[4]
	
	for (i=1;i<(param_set.param_count+1);i++)
800143de:	30 18       	mov	r8,1
800143e0:	ef 68 ff ff 	st.b	r7[-1],r8
800143e4:	c3 18       	rjmp	80014446 <write_parameters_to_flashc+0xc6>
	{
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
800143e6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800143ea:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800143ee:	f0 c9 00 01 	sub	r9,r8,1
800143f2:	ec fb 00 24 	ld.w	r11,r6[36]
800143f6:	12 98       	mov	r8,r9
800143f8:	a3 78       	lsl	r8,0x3
800143fa:	12 18       	sub	r8,r9
800143fc:	a3 68       	lsl	r8,0x2
800143fe:	f6 08 00 08 	add	r8,r11,r8
80014402:	70 08       	ld.w	r8,r8[0x0]
80014404:	70 09       	ld.w	r9,r8[0x0]
80014406:	f4 08 15 02 	lsl	r8,r10,0x2
8001440a:	ee 08 00 08 	add	r8,r7,r8
8001440e:	f1 49 fe 08 	st.w	r8[-504],r9
		cksum1 += local_array.values[i];
80014412:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014416:	a3 68       	lsl	r8,0x2
80014418:	ee 08 00 08 	add	r8,r7,r8
8001441c:	f0 f8 fe 08 	ld.w	r8,r8[-504]
80014420:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014424:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014428:	ef 48 ff f4 	st.w	r7[-12],r8
		cksum2 += cksum1;
8001442c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014430:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014434:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014438:	ef 48 ff f8 	st.w	r7[-8],r8
	cksum1 += local_array.values[0];
	cksum2 += cksum1;
	
	dbg_print("Begin write to flashc...\n");
	
	for (i=1;i<(param_set.param_count+1);i++)
8001443c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80014440:	2f f8       	sub	r8,-1
80014442:	ef 68 ff ff 	st.b	r7[-1],r8
80014446:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001444a:	ec f8 00 24 	ld.w	r8,r6[36]
8001444e:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014452:	2f f8       	sub	r8,-1
80014454:	10 39       	cp.w	r9,r8
80014456:	cc 85       	brlt	800143e6 <write_parameters_to_flashc+0x66>
		//flashc_memcpy((void *)&(nvram_array->values[i]),   param_set.parameters[i].param, sizeof((nvram_array->values[i])),   true);
		local_array.values[i] = *param_set.parameters[i-1].param;
		cksum1 += local_array.values[i];
		cksum2 += cksum1;
	}
	local_array.values[param_set.param_count+1] = cksum1;
80014458:	ec f8 00 24 	ld.w	r8,r6[36]
8001445c:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014460:	2f f8       	sub	r8,-1
80014462:	a3 68       	lsl	r8,0x2
80014464:	ee 08 00 08 	add	r8,r7,r8
80014468:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001446c:	f1 49 fe 08 	st.w	r8[-504],r9
	local_array.values[param_set.param_count+2] = cksum2;
80014470:	ec f8 00 24 	ld.w	r8,r6[36]
80014474:	f0 f8 0d 20 	ld.w	r8,r8[3360]
80014478:	2f e8       	sub	r8,-2
8001447a:	a3 68       	lsl	r8,0x2
8001447c:	ee 08 00 08 	add	r8,r7,r8
80014480:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014484:	f1 49 fe 08 	st.w	r8[-504],r9
	
	flashc_memcpy((void *)nvram_array, &local_array, sizeof(*nvram_array) ,   true);
80014488:	ec f8 01 a0 	ld.w	r8,r6[416]
8001448c:	70 08       	ld.w	r8,r8[0x0]
8001448e:	ee cb 01 f8 	sub	r11,r7,504
80014492:	30 19       	mov	r9,1
80014494:	e0 6a 01 ec 	mov	r10,492
80014498:	10 9c       	mov	r12,r8
8001449a:	f0 16 01 62 	mcall	r6[1416]
	dbg_print("Write to falshc completed.\n");
8001449e:	fe cc 01 3a 	sub	r12,pc,314
800144a2:	f0 16 00 01 	mcall	r6[4]
800144a6:	28 2d       	sub	sp,-504
800144a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800144ac:	80 01       	ld.sh	r1,r0[0x0]
800144ae:	42 10       	lddsp	r0,sp[0x84]

800144b0 <quat_from_vector>:
	out.v[2] = -q.v[2];

#define QUAT(q, s, v0, v1, v2) \
	q.s=s; q.v[0]=v0; q.v[1]=v1; q.v[2]=v2;

UQuat_t static inline quat_from_vector(float *v) {
800144b0:	eb cd 40 80 	pushm	r7,lr
800144b4:	1a 97       	mov	r7,sp
800144b6:	20 5d       	sub	sp,20
800144b8:	18 9a       	mov	r10,r12
800144ba:	ef 4b ff ec 	st.w	r7[-20],r11
	UQuat_t q;	
	q.s=0; 
800144be:	30 08       	mov	r8,0
800144c0:	ef 48 ff f0 	st.w	r7[-16],r8
	q.v[0]=v[0]; 
800144c4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144c8:	70 08       	ld.w	r8,r8[0x0]
800144ca:	ef 48 ff f4 	st.w	r7[-12],r8
	q.v[1]=v[1]; 
800144ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144d2:	2f c8       	sub	r8,-4
800144d4:	70 08       	ld.w	r8,r8[0x0]
800144d6:	ef 48 ff f8 	st.w	r7[-8],r8
	q.v[2]=v[2];
800144da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800144de:	2f 88       	sub	r8,-8
800144e0:	70 08       	ld.w	r8,r8[0x0]
800144e2:	ef 48 ff fc 	st.w	r7[-4],r8
	return q;
800144e6:	14 98       	mov	r8,r10
800144e8:	ee c9 00 10 	sub	r9,r7,16
800144ec:	20 08       	sub	r8,0
800144ee:	20 09       	sub	r9,0
800144f0:	72 0b       	ld.w	r11,r9[0x0]
800144f2:	91 0b       	st.w	r8[0x0],r11
800144f4:	72 1b       	ld.w	r11,r9[0x4]
800144f6:	91 1b       	st.w	r8[0x4],r11
800144f8:	72 2b       	ld.w	r11,r9[0x8]
800144fa:	91 2b       	st.w	r8[0x8],r11
800144fc:	72 39       	ld.w	r9,r9[0xc]
800144fe:	91 39       	st.w	r8[0xc],r9
}
80014500:	14 9c       	mov	r12,r10
80014502:	2f bd       	sub	sp,-20
80014504:	e3 cd 80 80 	ldm	sp++,r7,pc

80014508 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
80014508:	eb cd 40 80 	pushm	r7,lr
8001450c:	1a 97       	mov	r7,sp
8001450e:	20 3d       	sub	sp,12
80014510:	ef 4c ff f8 	st.w	r7[-8],r12
80014514:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
80014518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001451c:	70 09       	ld.w	r9,r8[0x0]
8001451e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014522:	70 08       	ld.w	r8,r8[0x0]
80014524:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001452c:	2f c8       	sub	r8,-4
8001452e:	70 0a       	ld.w	r10,r8[0x0]
80014530:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014534:	2f c8       	sub	r8,-4
80014536:	70 08       	ld.w	r8,r8[0x0]
80014538:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001453c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80014540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014544:	2f 88       	sub	r8,-8
80014546:	70 0a       	ld.w	r10,r8[0x0]
80014548:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001454c:	2f 88       	sub	r8,-8
8001454e:	70 08       	ld.w	r8,r8[0x0]
80014550:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80014554:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80014558:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001455c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014560:	10 9c       	mov	r12,r8
80014562:	2f dd       	sub	sp,-12
80014564:	e3 cd 80 80 	ldm	sp++,r7,pc

80014568 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
80014568:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001456c:	1a 97       	mov	r7,sp
8001456e:	20 7d       	sub	sp,28
80014570:	4b d6       	lddpc	r6,80014664 <quat_multi+0xfc>
80014572:	1e 26       	rsub	r6,pc
80014574:	ee c8 ff ec 	sub	r8,r7,-20
80014578:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001457a:	70 2a       	ld.w	r10,r8[0x8]
8001457c:	70 79       	ld.w	r9,r8[0x1c]
8001457e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
80014582:	70 3b       	ld.w	r11,r8[0xc]
80014584:	70 69       	ld.w	r9,r8[0x18]
80014586:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001458a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001458e:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
80014592:	70 3a       	ld.w	r10,r8[0xc]
80014594:	70 59       	ld.w	r9,r8[0x14]
80014596:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001459a:	70 1b       	ld.w	r11,r8[0x4]
8001459c:	70 79       	ld.w	r9,r8[0x1c]
8001459e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145a2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145a6:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
800145aa:	70 1a       	ld.w	r10,r8[0x4]
800145ac:	70 69       	ld.w	r9,r8[0x18]
800145ae:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145b2:	70 2b       	ld.w	r11,r8[0x8]
800145b4:	70 59       	ld.w	r9,r8[0x14]
800145b6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145ba:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800145be:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
800145c2:	70 4a       	ld.w	r10,r8[0x10]
800145c4:	70 19       	ld.w	r9,r8[0x4]
800145c6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145ca:	70 0b       	ld.w	r11,r8[0x0]
800145cc:	70 59       	ld.w	r9,r8[0x14]
800145ce:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145d2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800145d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800145da:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800145de:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
800145e2:	70 4a       	ld.w	r10,r8[0x10]
800145e4:	70 29       	ld.w	r9,r8[0x8]
800145e6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
800145ea:	70 0b       	ld.w	r11,r8[0x0]
800145ec:	70 69       	ld.w	r9,r8[0x18]
800145ee:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
800145f2:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
800145f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800145fa:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
800145fe:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
80014602:	70 4a       	ld.w	r10,r8[0x10]
80014604:	70 39       	ld.w	r9,r8[0xc]
80014606:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001460a:	70 0b       	ld.w	r11,r8[0x0]
8001460c:	70 79       	ld.w	r9,r8[0x1c]
8001460e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
80014612:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
80014616:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001461a:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001461e:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
80014622:	70 0a       	ld.w	r10,r8[0x0]
80014624:	70 49       	ld.w	r9,r8[0x10]
80014626:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001462a:	f0 c9 ff f0 	sub	r9,r8,-16
8001462e:	2f c9       	sub	r9,-4
80014630:	2f c8       	sub	r8,-4
80014632:	12 9b       	mov	r11,r9
80014634:	10 9c       	mov	r12,r8
80014636:	c6 9f       	rcall	80014508 <scalar_product>
80014638:	18 98       	mov	r8,r12
8001463a:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001463e:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
80014642:	0a 98       	mov	r8,r5
80014644:	ee c9 00 1c 	sub	r9,r7,28
80014648:	20 08       	sub	r8,0
8001464a:	20 09       	sub	r9,0
8001464c:	72 0a       	ld.w	r10,r9[0x0]
8001464e:	91 0a       	st.w	r8[0x0],r10
80014650:	72 1a       	ld.w	r10,r9[0x4]
80014652:	91 1a       	st.w	r8[0x4],r10
80014654:	72 2a       	ld.w	r10,r9[0x8]
80014656:	91 2a       	st.w	r8[0x8],r10
80014658:	72 39       	ld.w	r9,r9[0xc]
8001465a:	91 39       	st.w	r8[0xc],r9
}
8001465c:	0a 9c       	mov	r12,r5
8001465e:	2f 9d       	sub	sp,-28
80014660:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80014664:	80 01       	ld.sh	r1,r0[0x0]
80014666:	43 f6       	lddsp	r6,sp[0xfc]

80014668 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
80014668:	eb cd 40 80 	pushm	r7,lr
8001466c:	1a 97       	mov	r7,sp
8001466e:	20 5d       	sub	sp,20
80014670:	ee c9 ff f8 	sub	r9,r7,-8
80014674:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
80014676:	72 08       	ld.w	r8,r9[0x0]
80014678:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001467c:	30 08       	mov	r8,0
8001467e:	ef 48 ff fc 	st.w	r7[-4],r8
80014682:	c1 58       	rjmp	800146ac <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
80014684:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014688:	ee fb ff fc 	ld.w	r11,r7[-4]
8001468c:	2f fb       	sub	r11,-1
8001468e:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
80014692:	ee 1b 80 00 	eorh	r11,0x8000
80014696:	2f f8       	sub	r8,-1
80014698:	a3 68       	lsl	r8,0x2
8001469a:	ee 08 00 08 	add	r8,r7,r8
8001469e:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
800146a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146a6:	2f f8       	sub	r8,-1
800146a8:	ef 48 ff fc 	st.w	r7[-4],r8
800146ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800146b0:	58 28       	cp.w	r8,2
800146b2:	fe 9a ff e9 	brle	80014684 <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
800146b6:	14 98       	mov	r8,r10
800146b8:	ee c9 00 14 	sub	r9,r7,20
800146bc:	20 08       	sub	r8,0
800146be:	20 09       	sub	r9,0
800146c0:	72 0b       	ld.w	r11,r9[0x0]
800146c2:	91 0b       	st.w	r8[0x0],r11
800146c4:	72 1b       	ld.w	r11,r9[0x4]
800146c6:	91 1b       	st.w	r8[0x4],r11
800146c8:	72 2b       	ld.w	r11,r9[0x8]
800146ca:	91 2b       	st.w	r8[0x8],r11
800146cc:	72 39       	ld.w	r9,r9[0xc]
800146ce:	91 39       	st.w	r8[0xc],r9
}
800146d0:	14 9c       	mov	r12,r10
800146d2:	2f bd       	sub	sp,-20
800146d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800146d8 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
800146d8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800146dc:	1a 97       	mov	r7,sp
800146de:	20 cd       	sub	sp,48
800146e0:	4b c6       	lddpc	r6,800147d0 <quat_global_to_local+0xf8>
800146e2:	1e 26       	rsub	r6,pc
800146e4:	ee c5 ff ec 	sub	r5,r7,-20
800146e8:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
800146ea:	ee ca 00 10 	sub	r10,r7,16
800146ee:	20 4d       	sub	sp,16
800146f0:	1a 98       	mov	r8,sp
800146f2:	0a 99       	mov	r9,r5
800146f4:	20 08       	sub	r8,0
800146f6:	20 09       	sub	r9,0
800146f8:	72 0b       	ld.w	r11,r9[0x0]
800146fa:	91 0b       	st.w	r8[0x0],r11
800146fc:	72 1b       	ld.w	r11,r9[0x4]
800146fe:	91 1b       	st.w	r8[0x4],r11
80014700:	72 2b       	ld.w	r11,r9[0x8]
80014702:	91 2b       	st.w	r8[0x8],r11
80014704:	72 39       	ld.w	r9,r9[0xc]
80014706:	91 39       	st.w	r8[0xc],r9
80014708:	14 9c       	mov	r12,r10
8001470a:	ca ff       	rcall	80014668 <quat_inv>
8001470c:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001470e:	ee ca 00 20 	sub	r10,r7,32
80014712:	20 4d       	sub	sp,16
80014714:	1a 98       	mov	r8,sp
80014716:	ea c9 ff f0 	sub	r9,r5,-16
8001471a:	20 08       	sub	r8,0
8001471c:	20 09       	sub	r9,0
8001471e:	72 0b       	ld.w	r11,r9[0x0]
80014720:	91 0b       	st.w	r8[0x0],r11
80014722:	72 1b       	ld.w	r11,r9[0x4]
80014724:	91 1b       	st.w	r8[0x4],r11
80014726:	72 2b       	ld.w	r11,r9[0x8]
80014728:	91 2b       	st.w	r8[0x8],r11
8001472a:	72 39       	ld.w	r9,r9[0xc]
8001472c:	91 39       	st.w	r8[0xc],r9
8001472e:	20 4d       	sub	sp,16
80014730:	1a 98       	mov	r8,sp
80014732:	ee c9 00 10 	sub	r9,r7,16
80014736:	20 08       	sub	r8,0
80014738:	20 09       	sub	r9,0
8001473a:	72 0b       	ld.w	r11,r9[0x0]
8001473c:	91 0b       	st.w	r8[0x0],r11
8001473e:	72 1b       	ld.w	r11,r9[0x4]
80014740:	91 1b       	st.w	r8[0x4],r11
80014742:	72 2b       	ld.w	r11,r9[0x8]
80014744:	91 2b       	st.w	r8[0x8],r11
80014746:	72 39       	ld.w	r9,r9[0xc]
80014748:	91 39       	st.w	r8[0xc],r9
8001474a:	14 9c       	mov	r12,r10
8001474c:	c0 ef       	rcall	80014568 <quat_multi>
8001474e:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
80014750:	ee ca 00 30 	sub	r10,r7,48
80014754:	20 4d       	sub	sp,16
80014756:	1a 98       	mov	r8,sp
80014758:	0a 99       	mov	r9,r5
8001475a:	20 08       	sub	r8,0
8001475c:	20 09       	sub	r9,0
8001475e:	72 0b       	ld.w	r11,r9[0x0]
80014760:	91 0b       	st.w	r8[0x0],r11
80014762:	72 1b       	ld.w	r11,r9[0x4]
80014764:	91 1b       	st.w	r8[0x4],r11
80014766:	72 2b       	ld.w	r11,r9[0x8]
80014768:	91 2b       	st.w	r8[0x8],r11
8001476a:	72 39       	ld.w	r9,r9[0xc]
8001476c:	91 39       	st.w	r8[0xc],r9
8001476e:	20 4d       	sub	sp,16
80014770:	1a 98       	mov	r8,sp
80014772:	ee c9 00 20 	sub	r9,r7,32
80014776:	20 08       	sub	r8,0
80014778:	20 09       	sub	r9,0
8001477a:	72 0b       	ld.w	r11,r9[0x0]
8001477c:	91 0b       	st.w	r8[0x0],r11
8001477e:	72 1b       	ld.w	r11,r9[0x4]
80014780:	91 1b       	st.w	r8[0x4],r11
80014782:	72 2b       	ld.w	r11,r9[0x8]
80014784:	91 2b       	st.w	r8[0x8],r11
80014786:	72 39       	ld.w	r9,r9[0xc]
80014788:	91 39       	st.w	r8[0xc],r9
8001478a:	14 9c       	mov	r12,r10
8001478c:	ce ee       	rcall	80014568 <quat_multi>
8001478e:	2f 8d       	sub	sp,-32
80014790:	ee c8 00 20 	sub	r8,r7,32
80014794:	ee c9 00 30 	sub	r9,r7,48
80014798:	20 08       	sub	r8,0
8001479a:	20 09       	sub	r9,0
8001479c:	72 0a       	ld.w	r10,r9[0x0]
8001479e:	91 0a       	st.w	r8[0x0],r10
800147a0:	72 1a       	ld.w	r10,r9[0x4]
800147a2:	91 1a       	st.w	r8[0x4],r10
800147a4:	72 2a       	ld.w	r10,r9[0x8]
800147a6:	91 2a       	st.w	r8[0x8],r10
800147a8:	72 39       	ld.w	r9,r9[0xc]
800147aa:	91 39       	st.w	r8[0xc],r9

	return qtmp;
800147ac:	06 98       	mov	r8,r3
800147ae:	ee c9 00 20 	sub	r9,r7,32
800147b2:	20 08       	sub	r8,0
800147b4:	20 09       	sub	r9,0
800147b6:	72 0a       	ld.w	r10,r9[0x0]
800147b8:	91 0a       	st.w	r8[0x0],r10
800147ba:	72 1a       	ld.w	r10,r9[0x4]
800147bc:	91 1a       	st.w	r8[0x4],r10
800147be:	72 2a       	ld.w	r10,r9[0x8]
800147c0:	91 2a       	st.w	r8[0x8],r10
800147c2:	72 39       	ld.w	r9,r9[0xc]
800147c4:	91 39       	st.w	r8[0xc],r9
}
800147c6:	06 9c       	mov	r12,r3
800147c8:	2f 4d       	sub	sp,-48
800147ca:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800147ce:	00 00       	add	r0,r0
800147d0:	80 01       	ld.sh	r1,r0[0x0]
800147d2:	45 66       	lddsp	r6,sp[0x158]

800147d4 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
800147d4:	eb cd 40 c0 	pushm	r6-r7,lr
800147d8:	1a 97       	mov	r7,sp
800147da:	20 2d       	sub	sp,8
800147dc:	48 96       	lddpc	r6,80014800 <vector_norm_sqr+0x2c>
800147de:	1e 26       	rsub	r6,pc
800147e0:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
800147e4:	ee fb ff f8 	ld.w	r11,r7[-8]
800147e8:	ee fc ff f8 	ld.w	r12,r7[-8]
800147ec:	c8 ee       	rcall	80014508 <scalar_product>
800147ee:	18 98       	mov	r8,r12
800147f0:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
800147f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800147f8:	10 9c       	mov	r12,r8
800147fa:	2f ed       	sub	sp,-8
800147fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014800:	80 01       	ld.sh	r1,r0[0x0]
80014802:	46 62       	lddsp	r2,sp[0x198]

80014804 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80014804:	eb cd 40 80 	pushm	r7,lr
80014808:	1a 97       	mov	r7,sp
8001480a:	20 1d       	sub	sp,4
8001480c:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80014810:	30 18       	mov	r8,1
80014812:	ee fa ff fc 	ld.w	r10,r7[-4]
80014816:	30 09       	mov	r9,0
80014818:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001481c:	e0 8c 00 03 	brvs	80014822 <f_abs+0x1e>
80014820:	c0 24       	brge	80014824 <f_abs+0x20>
80014822:	30 08       	mov	r8,0
80014824:	5c 58       	castu.b	r8
80014826:	c0 40       	breq	8001482e <f_abs+0x2a>
	{
		return a;
80014828:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001482c:	c0 58       	rjmp	80014836 <f_abs+0x32>
	}else{
		return -a;
8001482e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014832:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80014836:	10 9c       	mov	r12,r8
80014838:	2f fd       	sub	sp,-4
8001483a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001483e <f_min>:

static inline float f_min(const float a, const float b){
8001483e:	eb cd 40 80 	pushm	r7,lr
80014842:	1a 97       	mov	r7,sp
80014844:	20 2d       	sub	sp,8
80014846:	ef 4c ff fc 	st.w	r7[-4],r12
8001484a:	ef 4b ff f8 	st.w	r7[-8],r11
	if (a <= b)
8001484e:	30 18       	mov	r8,1
80014850:	ee fa ff fc 	ld.w	r10,r7[-4]
80014854:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014858:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001485c:	e0 8c 00 04 	brvs	80014864 <f_min+0x26>
80014860:	e0 8a 00 03 	brle	80014866 <f_min+0x28>
80014864:	30 08       	mov	r8,0
80014866:	5c 58       	castu.b	r8
80014868:	c0 40       	breq	80014870 <f_min+0x32>
	{
		return a;
8001486a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001486e:	c0 38       	rjmp	80014874 <f_min+0x36>
	}else{
		return b;
80014870:	ee f8 ff f8 	ld.w	r8,r7[-8]
	}
}
80014874:	10 9c       	mov	r12,r8
80014876:	2f ed       	sub	sp,-8
80014878:	e3 cd 80 80 	ldm	sp++,r7,pc

8001487c <center_window_2>:

static float inline sigmoid(float x) {
	return (x/fast_sqrt(1+SQR(x)));
};

static float inline center_window_2(float x) {
8001487c:	eb cd 40 c0 	pushm	r6-r7,lr
80014880:	1a 97       	mov	r7,sp
80014882:	20 1d       	sub	sp,4
80014884:	48 c6       	lddpc	r6,800148b4 <center_window_2+0x38>
80014886:	1e 26       	rsub	r6,pc
80014888:	ef 4c ff fc 	st.w	r7[-4],r12
	return 1.0/(1+SQR(x));
8001488c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014890:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014894:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80014898:	fc 18 3f 80 	movh	r8,0x3f80
8001489c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800148a0:	10 9b       	mov	r11,r8
800148a2:	fc 1c 3f 80 	movh	r12,0x3f80
800148a6:	f0 16 00 0a 	mcall	r6[40]
800148aa:	18 98       	mov	r8,r12
}
800148ac:	10 9c       	mov	r12,r8
800148ae:	2f fd       	sub	sp,-4
800148b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800148b4:	80 01       	ld.sh	r1,r0[0x0]
800148b6:	47 0a       	lddsp	r10,sp[0x1c0]

800148b8 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
800148b8:	eb cd 40 c0 	pushm	r6-r7,lr
800148bc:	1a 97       	mov	r7,sp
800148be:	20 3d       	sub	sp,12
800148c0:	49 06       	lddpc	r6,80014900 <mav_array_memcpy+0x48>
800148c2:	1e 26       	rsub	r6,pc
800148c4:	ef 4c ff fc 	st.w	r7[-4],r12
800148c8:	ef 4b ff f8 	st.w	r7[-8],r11
800148cc:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
800148d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800148d4:	58 08       	cp.w	r8,0
800148d6:	c0 91       	brne	800148e8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
800148d8:	ee fa ff f4 	ld.w	r10,r7[-12]
800148dc:	30 0b       	mov	r11,0
800148de:	ee fc ff fc 	ld.w	r12,r7[-4]
800148e2:	f0 16 00 31 	mcall	r6[196]
800148e6:	c0 98       	rjmp	800148f8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
800148e8:	ee fa ff f4 	ld.w	r10,r7[-12]
800148ec:	ee fb ff f8 	ld.w	r11,r7[-8]
800148f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800148f4:	f0 16 00 1b 	mcall	r6[108]
	}
}
800148f8:	2f dd       	sub	sp,-12
800148fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800148fe:	00 00       	add	r0,r0
80014900:	80 01       	ld.sh	r1,r0[0x0]
80014902:	47 46       	lddsp	r6,sp[0x1d0]

80014904 <init_nav>:

central_data_t *centralData;
float alt_integrator;

void init_nav()
{
80014904:	eb cd 40 c0 	pushm	r6-r7,lr
80014908:	1a 97       	mov	r7,sp
8001490a:	20 1d       	sub	sp,4
8001490c:	49 46       	lddpc	r6,8001495c <init_nav+0x58>
8001490e:	1e 26       	rsub	r6,pc
	int8_t i;
	
	centralData = get_central_data();
80014910:	f0 16 00 33 	mcall	r6[204]
80014914:	18 99       	mov	r9,r12
80014916:	ec f8 00 00 	ld.w	r8,r6[0]
8001491a:	91 09       	st.w	r8[0x0],r9
	
	centralData->controls_nav.tvel[X] = 0.0;
8001491c:	ec f8 00 00 	ld.w	r8,r6[0]
80014920:	70 08       	ld.w	r8,r8[0x0]
80014922:	30 09       	mov	r9,0
80014924:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = 0.0;
80014928:	ec f8 00 00 	ld.w	r8,r6[0]
8001492c:	70 08       	ld.w	r8,r8[0x0]
8001492e:	30 09       	mov	r9,0
80014930:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.rpy[YAW] = 0.0;
80014934:	ec f8 00 00 	ld.w	r8,r6[0]
80014938:	70 08       	ld.w	r8,r8[0x0]
8001493a:	30 09       	mov	r9,0
8001493c:	f1 49 01 7c 	st.w	r8[380],r9
	centralData->controls_nav.tvel[Z] = 0.0; //centralData->controls.thrust;
80014940:	ec f8 00 00 	ld.w	r8,r6[0]
80014944:	70 08       	ld.w	r8,r8[0x0]
80014946:	30 09       	mov	r9,0
80014948:	f1 49 01 8c 	st.w	r8[396],r9
	
	alt_integrator = 0.0;
8001494c:	ec f8 07 a0 	ld.w	r8,r6[1952]
80014950:	30 09       	mov	r9,0
80014952:	91 09       	st.w	r8[0x0],r9
}
80014954:	2f fd       	sub	sp,-4
80014956:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001495a:	00 00       	add	r0,r0
8001495c:	80 01       	ld.sh	r1,r0[0x0]
8001495e:	47 92       	lddsp	r2,sp[0x1e4]

80014960 <run_navigation>:


void run_navigation(local_coordinates_t waypoint_input)
{
80014960:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80014964:	1a 97       	mov	r7,sp
80014966:	20 8d       	sub	sp,32
80014968:	49 26       	lddpc	r6,800149b0 <run_navigation+0x50>
8001496a:	1e 26       	rsub	r6,pc
8001496c:	ee c5 ff ec 	sub	r5,r7,-20
	float newVelocity[3];
	
	float rel_pos[3], dist2wp_sqr;
	
	// Control in translational speed of the platform
	centralData->dist2wp_sqr = set_rel_pos_n_dist2wp(waypoint_input.pos, rel_pos);
80014970:	ec f8 00 00 	ld.w	r8,r6[0]
80014974:	70 03       	ld.w	r3,r8[0x0]
80014976:	ee c8 00 20 	sub	r8,r7,32
8001497a:	10 9b       	mov	r11,r8
8001497c:	0a 9c       	mov	r12,r5
8001497e:	f0 16 01 aa 	mcall	r6[1704]
80014982:	18 98       	mov	r8,r12
80014984:	e7 48 0c f8 	st.w	r3[3320],r8
	set_speed_command(rel_pos,centralData->dist2wp_sqr);
80014988:	ec f8 00 00 	ld.w	r8,r6[0]
8001498c:	70 08       	ld.w	r8,r8[0x0]
8001498e:	f0 f9 0c f8 	ld.w	r9,r8[3320]
80014992:	ee c8 00 20 	sub	r8,r7,32
80014996:	12 9b       	mov	r11,r9
80014998:	10 9c       	mov	r12,r8
8001499a:	f0 16 01 59 	mcall	r6[1380]
	
	centralData->controls_nav.theading=waypoint_input.heading;
8001499e:	ec f8 00 00 	ld.w	r8,r6[0]
800149a2:	70 08       	ld.w	r8,r8[0x0]
800149a4:	6a 39       	ld.w	r9,r5[0xc]
800149a6:	f1 49 01 90 	st.w	r8[400],r9
}
800149aa:	2f 8d       	sub	sp,-32
800149ac:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800149b0:	80 01       	ld.sh	r1,r0[0x0]
800149b2:	47 ee       	lddsp	lr,sp[0x1f8]

800149b4 <set_rel_pos_n_dist2wp>:

float set_rel_pos_n_dist2wp(float waypointPos[], float rel_pos[])
{
800149b4:	eb cd 40 c0 	pushm	r6-r7,lr
800149b8:	1a 97       	mov	r7,sp
800149ba:	20 3d       	sub	sp,12
800149bc:	49 f6       	lddpc	r6,80014a38 <set_rel_pos_n_dist2wp+0x84>
800149be:	1e 26       	rsub	r6,pc
800149c0:	ef 4c ff f8 	st.w	r7[-8],r12
800149c4:	ef 4b ff f4 	st.w	r7[-12],r11
	float dist2wp_sqr;
	
	rel_pos[X] = (float)(waypointPos[X] - centralData->position_estimator.localPosition.pos[X]);
800149c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800149cc:	70 09       	ld.w	r9,r8[0x0]
800149ce:	ec f8 00 00 	ld.w	r8,r6[0]
800149d2:	70 08       	ld.w	r8,r8[0x0]
800149d4:	f0 f8 09 e4 	ld.w	r8,r8[2532]
800149d8:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800149dc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800149e0:	91 09       	st.w	r8[0x0],r9
	rel_pos[Y] = (float)(waypointPos[Y] - centralData->position_estimator.localPosition.pos[Y]);
800149e2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800149e6:	2f c8       	sub	r8,-4
800149e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800149ec:	2f c9       	sub	r9,-4
800149ee:	72 0a       	ld.w	r10,r9[0x0]
800149f0:	ec f9 00 00 	ld.w	r9,r6[0]
800149f4:	72 09       	ld.w	r9,r9[0x0]
800149f6:	f2 f9 09 e8 	ld.w	r9,r9[2536]
800149fa:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
800149fe:	91 09       	st.w	r8[0x0],r9
	rel_pos[Z] = (float)(waypointPos[Z] - centralData->position_estimator.localPosition.pos[Z]);
80014a00:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014a04:	2f 88       	sub	r8,-8
80014a06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014a0a:	2f 89       	sub	r9,-8
80014a0c:	72 0a       	ld.w	r10,r9[0x0]
80014a0e:	ec f9 00 00 	ld.w	r9,r6[0]
80014a12:	72 09       	ld.w	r9,r9[0x0]
80014a14:	f2 f9 09 ec 	ld.w	r9,r9[2540]
80014a18:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80014a1c:	91 09       	st.w	r8[0x0],r9
	
	dist2wp_sqr = vector_norm_sqr(rel_pos);
80014a1e:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a22:	cd 9e       	rcall	800147d4 <vector_norm_sqr>
80014a24:	18 98       	mov	r8,r12
80014a26:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return dist2wp_sqr;
80014a2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80014a2e:	10 9c       	mov	r12,r8
80014a30:	2f dd       	sub	sp,-12
80014a32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80014a36:	00 00       	add	r0,r0
80014a38:	80 01       	ld.sh	r1,r0[0x0]
80014a3a:	48 42       	lddpc	r2,80014a48 <set_speed_command+0xc>

80014a3c <set_speed_command>:

void set_speed_command(float rel_pos[], float dist2wpSqr)
{
80014a3c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014a40:	1a 97       	mov	r7,sp
80014a42:	21 7d       	sub	sp,92
80014a44:	fe f6 02 ec 	ld.w	r6,pc[748]
80014a48:	1e 26       	rsub	r6,pc
80014a4a:	ef 4c ff a8 	st.w	r7[-88],r12
80014a4e:	ef 4b ff a4 	st.w	r7[-92],r11
	
	float dir_desired_bf[3], dir_desired[3], new_velocity[3];
	
	float rel_heading;
	
	norm_rel_dist = sqrt(dist2wpSqr);
80014a52:	ee fc ff a4 	ld.w	r12,r7[-92]
80014a56:	f0 16 00 02 	mcall	r6[8]
80014a5a:	14 98       	mov	r8,r10
80014a5c:	16 99       	mov	r9,r11
80014a5e:	10 9a       	mov	r10,r8
80014a60:	12 9b       	mov	r11,r9
80014a62:	f0 16 00 6e 	mcall	r6[440]
80014a66:	14 98       	mov	r8,r10
80014a68:	16 99       	mov	r9,r11
80014a6a:	10 9a       	mov	r10,r8
80014a6c:	12 9b       	mov	r11,r9
80014a6e:	f0 16 00 08 	mcall	r6[32]
80014a72:	18 98       	mov	r8,r12
80014a74:	ef 48 ff f4 	st.w	r7[-12],r8
	
	if (norm_rel_dist < 0.0005)
80014a78:	ee fc ff f4 	ld.w	r12,r7[-12]
80014a7c:	f0 16 00 02 	mcall	r6[8]
80014a80:	30 05       	mov	r5,0
80014a82:	e0 68 a9 fc 	mov	r8,43516
80014a86:	ea 18 d2 f1 	orh	r8,0xd2f1
80014a8a:	e0 69 62 4d 	mov	r9,25165
80014a8e:	ea 19 3f 40 	orh	r9,0x3f40
80014a92:	f0 16 00 1e 	mcall	r6[120]
80014a96:	18 98       	mov	r8,r12
80014a98:	58 08       	cp.w	r8,0
80014a9a:	c0 20       	breq	80014a9e <set_speed_command+0x62>
80014a9c:	30 15       	mov	r5,1
80014a9e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014aa2:	c1 80       	breq	80014ad2 <set_speed_command+0x96>
	{
		norm_rel_dist += 0.0005;
80014aa4:	ee fc ff f4 	ld.w	r12,r7[-12]
80014aa8:	f0 16 00 02 	mcall	r6[8]
80014aac:	e0 68 a9 fc 	mov	r8,43516
80014ab0:	ea 18 d2 f1 	orh	r8,0xd2f1
80014ab4:	e0 69 62 4d 	mov	r9,25165
80014ab8:	ea 19 3f 40 	orh	r9,0x3f40
80014abc:	f0 16 00 05 	mcall	r6[20]
80014ac0:	14 98       	mov	r8,r10
80014ac2:	16 99       	mov	r9,r11
80014ac4:	10 9a       	mov	r10,r8
80014ac6:	12 9b       	mov	r11,r9
80014ac8:	f0 16 00 08 	mcall	r6[32]
80014acc:	18 98       	mov	r8,r12
80014ace:	ef 48 ff f4 	st.w	r7[-12],r8
	

	
	// calculate dir_desired in local frame
	// vel = qe-1 * rel_pos * qe
	qtmp1 = quat_from_vector(rel_pos);
80014ad2:	ee c8 00 20 	sub	r8,r7,32
80014ad6:	ee fb ff a8 	ld.w	r11,r7[-88]
80014ada:	10 9c       	mov	r12,r8
80014adc:	fe b0 fc ea 	rcall	800144b0 <quat_from_vector>
	//qtmp1.s= 0.0; qtmp1.v[0]=dir_desired[0]; qtmp1.v[1]=dir_desired[1]; qtmp1.v[2]=dir_desired[2];
	qtmp2 = quat_global_to_local(centralData->imu1.attitude.qe,qtmp1);
80014ae0:	ec f8 00 00 	ld.w	r8,r6[0]
80014ae4:	70 0b       	ld.w	r11,r8[0x0]
80014ae6:	ee ca 00 30 	sub	r10,r7,48
80014aea:	20 4d       	sub	sp,16
80014aec:	1a 98       	mov	r8,sp
80014aee:	ee c9 00 20 	sub	r9,r7,32
80014af2:	20 08       	sub	r8,0
80014af4:	20 09       	sub	r9,0
80014af6:	72 0c       	ld.w	r12,r9[0x0]
80014af8:	91 0c       	st.w	r8[0x0],r12
80014afa:	72 1c       	ld.w	r12,r9[0x4]
80014afc:	91 1c       	st.w	r8[0x4],r12
80014afe:	72 2c       	ld.w	r12,r9[0x8]
80014b00:	91 2c       	st.w	r8[0x8],r12
80014b02:	72 39       	ld.w	r9,r9[0xc]
80014b04:	91 39       	st.w	r8[0xc],r9
80014b06:	20 4d       	sub	sp,16
80014b08:	1a 98       	mov	r8,sp
80014b0a:	16 99       	mov	r9,r11
80014b0c:	20 08       	sub	r8,0
80014b0e:	20 09       	sub	r9,0
80014b10:	72 0b       	ld.w	r11,r9[0x0]
80014b12:	91 0b       	st.w	r8[0x0],r11
80014b14:	72 1b       	ld.w	r11,r9[0x4]
80014b16:	91 1b       	st.w	r8[0x4],r11
80014b18:	72 2b       	ld.w	r11,r9[0x8]
80014b1a:	91 2b       	st.w	r8[0x8],r11
80014b1c:	72 39       	ld.w	r9,r9[0xc]
80014b1e:	91 39       	st.w	r8[0xc],r9
80014b20:	14 9c       	mov	r12,r10
80014b22:	fe b0 fd db 	rcall	800146d8 <quat_global_to_local>
80014b26:	2f 8d       	sub	sp,-32
	dir_desired_bf[0] = qtmp2.v[0]; dir_desired_bf[1] = qtmp2.v[1]; dir_desired_bf[2] = qtmp2.v[2];
80014b28:	ee f8 ff d4 	ld.w	r8,r7[-44]
80014b2c:	ef 48 ff c4 	st.w	r7[-60],r8
80014b30:	ee f8 ff d8 	ld.w	r8,r7[-40]
80014b34:	ef 48 ff c8 	st.w	r7[-56],r8
80014b38:	ee f8 ff dc 	ld.w	r8,r7[-36]
80014b3c:	ef 48 ff cc 	st.w	r7[-52],r8
	
	// experimental: Z-axis in velocity mode is in global frame...
	dir_desired_bf[2] = rel_pos[2];
80014b40:	ee f8 ff a8 	ld.w	r8,r7[-88]
80014b44:	2f 88       	sub	r8,-8
80014b46:	70 08       	ld.w	r8,r8[0x0]
80014b48:	ef 48 ff cc 	st.w	r7[-52],r8
	
	v_desired = f_min(V_CRUISE,(center_window_2(rel_heading) * DIST_2_VEL_GAIN * norm_rel_dist));
80014b4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80014b50:	c9 6e       	rcall	8001487c <center_window_2>
80014b52:	18 98       	mov	r8,r12
80014b54:	10 9c       	mov	r12,r8
80014b56:	f0 16 00 02 	mcall	r6[8]
80014b5a:	e0 68 33 33 	mov	r8,13107
80014b5e:	ea 18 33 33 	orh	r8,0x3333
80014b62:	e0 69 33 33 	mov	r9,13107
80014b66:	ea 19 3f d3 	orh	r9,0x3fd3
80014b6a:	f0 16 00 03 	mcall	r6[12]
80014b6e:	14 98       	mov	r8,r10
80014b70:	16 99       	mov	r9,r11
80014b72:	10 92       	mov	r2,r8
80014b74:	12 93       	mov	r3,r9
80014b76:	ee fc ff f4 	ld.w	r12,r7[-12]
80014b7a:	f0 16 00 02 	mcall	r6[8]
80014b7e:	14 98       	mov	r8,r10
80014b80:	16 99       	mov	r9,r11
80014b82:	04 9a       	mov	r10,r2
80014b84:	06 9b       	mov	r11,r3
80014b86:	f0 16 00 03 	mcall	r6[12]
80014b8a:	14 98       	mov	r8,r10
80014b8c:	16 99       	mov	r9,r11
80014b8e:	10 9a       	mov	r10,r8
80014b90:	12 9b       	mov	r11,r9
80014b92:	f0 16 00 08 	mcall	r6[32]
80014b96:	18 98       	mov	r8,r12
80014b98:	10 9b       	mov	r11,r8
80014b9a:	fc 1c 40 40 	movh	r12,0x4040
80014b9e:	c5 0e       	rcall	8001483e <f_min>
80014ba0:	18 98       	mov	r8,r12
80014ba2:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if (v_desired *  f_abs(dir_desired_bf[Z]) > MAX_CLIMB_RATE * norm_rel_dist ) {
80014ba6:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014baa:	10 9c       	mov	r12,r8
80014bac:	c2 ce       	rcall	80014804 <f_abs>
80014bae:	18 99       	mov	r9,r12
80014bb0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014bb4:	e5 a2 0a 98 	cop	cp0,cr10,cr9,cr8,0x44
80014bb8:	30 18       	mov	r8,1
80014bba:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014bbe:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014bc2:	e0 8c 00 04 	brvs	80014bca <set_speed_command+0x18e>
80014bc6:	e0 89 00 03 	brgt	80014bcc <set_speed_command+0x190>
80014bca:	30 08       	mov	r8,0
80014bcc:	5c 58       	castu.b	r8
80014bce:	c0 e0       	breq	80014bea <set_speed_command+0x1ae>
		v_desired = MAX_CLIMB_RATE * norm_rel_dist /f_abs(dir_desired_bf[Z]);
80014bd0:	ee f8 ff cc 	ld.w	r8,r7[-52]
80014bd4:	10 9c       	mov	r12,r8
80014bd6:	c1 7e       	rcall	80014804 <f_abs>
80014bd8:	18 98       	mov	r8,r12
80014bda:	10 9b       	mov	r11,r8
80014bdc:	ee fc ff f4 	ld.w	r12,r7[-12]
80014be0:	f0 16 00 0a 	mcall	r6[40]
80014be4:	18 98       	mov	r8,r12
80014be6:	ef 48 ff f8 	st.w	r7[-8],r8
	}
	
	dir_desired_bf[X] = v_desired * dir_desired_bf[X] / norm_rel_dist;
80014bea:	ee f9 ff c4 	ld.w	r9,r7[-60]
80014bee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014bf2:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014bf6:	ee fb ff f4 	ld.w	r11,r7[-12]
80014bfa:	10 9c       	mov	r12,r8
80014bfc:	f0 16 00 0a 	mcall	r6[40]
80014c00:	18 98       	mov	r8,r12
80014c02:	ef 48 ff c4 	st.w	r7[-60],r8
	dir_desired_bf[Y] = v_desired * dir_desired_bf[Y] / norm_rel_dist;
80014c06:	ee f9 ff c8 	ld.w	r9,r7[-56]
80014c0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c0e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c12:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c16:	10 9c       	mov	r12,r8
80014c18:	f0 16 00 0a 	mcall	r6[40]
80014c1c:	18 98       	mov	r8,r12
80014c1e:	ef 48 ff c8 	st.w	r7[-56],r8
	dir_desired_bf[Z] = v_desired * dir_desired_bf[Z] / norm_rel_dist;
80014c22:	ee f9 ff cc 	ld.w	r9,r7[-52]
80014c26:	ee f8 ff f8 	ld.w	r8,r7[-8]
80014c2a:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80014c2e:	ee fb ff f4 	ld.w	r11,r7[-12]
80014c32:	10 9c       	mov	r12,r8
80014c34:	f0 16 00 0a 	mcall	r6[40]
80014c38:	18 98       	mov	r8,r12
80014c3a:	ef 48 ff cc 	st.w	r7[-52],r8
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014c3e:	30 08       	mov	r8,0
80014c40:	ef 68 ff f3 	st.b	r7[-13],r8
80014c44:	c1 58       	rjmp	80014c6e <set_speed_command+0x232>
	{
		new_velocity[i] = dir_desired_bf[i];
80014c46:	ef 3a ff f3 	ld.ub	r10,r7[-13]
80014c4a:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014c4e:	a3 68       	lsl	r8,0x2
80014c50:	ee 08 00 08 	add	r8,r7,r8
80014c54:	f0 f9 ff c4 	ld.w	r9,r8[-60]
80014c58:	f4 08 15 02 	lsl	r8,r10,0x2
80014c5c:	ee 08 00 08 	add	r8,r7,r8
80014c60:	f1 49 ff ac 	st.w	r8[-84],r9
	//}else{
		//high_speed_nav(dir_desired_bf,centralData->imu1.attitude);
	//}
	
	
	for (i=0;i<3;i++)
80014c64:	ef 38 ff f3 	ld.ub	r8,r7[-13]
80014c68:	2f f8       	sub	r8,-1
80014c6a:	ef 68 ff f3 	st.b	r7[-13],r8
80014c6e:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80014c72:	30 28       	mov	r8,2
80014c74:	f0 09 18 00 	cp.b	r9,r8
80014c78:	fe 98 ff e7 	brls	80014c46 <set_speed_command+0x20a>
	{
		new_velocity[i] = dir_desired_bf[i];
	}
	if (centralData->collision_avoidance)
80014c7c:	ec f8 00 00 	ld.w	r8,r6[0]
80014c80:	70 08       	ld.w	r8,r8[0x0]
80014c82:	f1 38 0d 03 	ld.ub	r8,r8[3331]
80014c86:	58 08       	cp.w	r8,0
80014c88:	c0 90       	breq	80014c9a <set_speed_command+0x25e>
	{
		computeNewVelocity(dir_desired_bf,new_velocity);
80014c8a:	ee c9 00 54 	sub	r9,r7,84
80014c8e:	ee c8 00 3c 	sub	r8,r7,60
80014c92:	12 9b       	mov	r11,r9
80014c94:	10 9c       	mov	r12,r8
80014c96:	f0 16 01 a2 	mcall	r6[1672]
	}

	rel_heading= atan2(new_velocity[Y],new_velocity[X]);
80014c9a:	ee f8 ff ac 	ld.w	r8,r7[-84]
80014c9e:	10 9c       	mov	r12,r8
80014ca0:	f0 16 00 02 	mcall	r6[8]
80014ca4:	14 92       	mov	r2,r10
80014ca6:	16 93       	mov	r3,r11
80014ca8:	ee f8 ff b0 	ld.w	r8,r7[-80]
80014cac:	10 9c       	mov	r12,r8
80014cae:	f0 16 00 02 	mcall	r6[8]
80014cb2:	04 98       	mov	r8,r2
80014cb4:	06 99       	mov	r9,r3
80014cb6:	f0 16 00 54 	mcall	r6[336]
80014cba:	14 98       	mov	r8,r10
80014cbc:	16 99       	mov	r9,r11
80014cbe:	10 9a       	mov	r10,r8
80014cc0:	12 9b       	mov	r11,r9
80014cc2:	f0 16 00 08 	mcall	r6[32]
80014cc6:	18 98       	mov	r8,r12
80014cc8:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData->controls_nav.tvel[X] = new_velocity[X];
80014ccc:	ec f8 00 00 	ld.w	r8,r6[0]
80014cd0:	70 08       	ld.w	r8,r8[0x0]
80014cd2:	ee f9 ff ac 	ld.w	r9,r7[-84]
80014cd6:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = new_velocity[Y];
80014cda:	ec f8 00 00 	ld.w	r8,r6[0]
80014cde:	70 08       	ld.w	r8,r8[0x0]
80014ce0:	ee f9 ff b0 	ld.w	r9,r7[-80]
80014ce4:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = new_velocity[Z];		
80014ce8:	ec f8 00 00 	ld.w	r8,r6[0]
80014cec:	70 08       	ld.w	r8,r8[0x0]
80014cee:	ee f9 ff b4 	ld.w	r9,r7[-76]
80014cf2:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014cf6:	ec f8 00 00 	ld.w	r8,r6[0]
80014cfa:	70 05       	ld.w	r5,r8[0x0]
80014cfc:	ee fc ff fc 	ld.w	r12,r7[-4]
80014d00:	f0 16 00 02 	mcall	r6[8]
80014d04:	e0 68 99 9a 	mov	r8,39322
80014d08:	ea 18 99 99 	orh	r8,0x9999
80014d0c:	e0 69 99 99 	mov	r9,39321
80014d10:	ea 19 3f c9 	orh	r9,0x3fc9
80014d14:	f0 16 00 03 	mcall	r6[12]
80014d18:	14 98       	mov	r8,r10
80014d1a:	16 99       	mov	r9,r11
80014d1c:	10 9a       	mov	r10,r8
80014d1e:	12 9b       	mov	r11,r9
80014d20:	f0 16 00 08 	mcall	r6[32]
80014d24:	18 98       	mov	r8,r12
80014d26:	eb 48 01 7c 	st.w	r5[380],r8

	//low_speed_nav(dir_desired_bf,centralData->imu1.attitude,norm_rel_dist);

}
80014d2a:	2e 9d       	sub	sp,-92
80014d2c:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014d30:	80 01       	ld.sh	r1,r0[0x0]
80014d32:	48 cc       	lddpc	r12,80014d60 <low_speed_nav+0x2c>

80014d34 <low_speed_nav>:

void low_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude, float rel_distance)
{
80014d34:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014d38:	1a 97       	mov	r7,sp
80014d3a:	20 4d       	sub	sp,16
80014d3c:	4f 06       	lddpc	r6,80014efc <low_speed_nav+0x1c8>
80014d3e:	1e 26       	rsub	r6,pc
80014d40:	ef 4c ff f4 	st.w	r7[-12],r12
80014d44:	ef 4b ff f0 	st.w	r7[-16],r11
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
80014d48:	e0 68 d9 7c 	mov	r8,55676
80014d4c:	ea 18 3e a0 	orh	r8,0x3ea0
80014d50:	ef 48 ff f8 	st.w	r7[-8],r8
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014d54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014d58:	70 08       	ld.w	r8,r8[0x0]
80014d5a:	10 9c       	mov	r12,r8
80014d5c:	fe b0 fd 54 	rcall	80014804 <f_abs>
80014d60:	18 98       	mov	r8,r12
80014d62:	10 9c       	mov	r12,r8
80014d64:	f0 16 00 02 	mcall	r6[8]
80014d68:	30 05       	mov	r5,0
80014d6a:	e0 68 a9 fc 	mov	r8,43516
80014d6e:	ea 18 d2 f1 	orh	r8,0xd2f1
80014d72:	e0 69 62 4d 	mov	r9,25165
80014d76:	ea 19 3f 50 	orh	r9,0x3f50
80014d7a:	f0 16 00 1e 	mcall	r6[120]
80014d7e:	18 98       	mov	r8,r12
80014d80:	58 08       	cp.w	r8,0
80014d82:	c0 20       	breq	80014d86 <low_speed_nav+0x52>
80014d84:	30 15       	mov	r5,1
80014d86:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014d8a:	c1 e0       	breq	80014dc6 <low_speed_nav+0x92>
80014d8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014d90:	2f c8       	sub	r8,-4
80014d92:	70 08       	ld.w	r8,r8[0x0]
80014d94:	10 9c       	mov	r12,r8
80014d96:	fe b0 fd 37 	rcall	80014804 <f_abs>
80014d9a:	18 98       	mov	r8,r12
80014d9c:	10 9c       	mov	r12,r8
80014d9e:	f0 16 00 02 	mcall	r6[8]
80014da2:	30 05       	mov	r5,0
80014da4:	e0 68 a9 fc 	mov	r8,43516
80014da8:	ea 18 d2 f1 	orh	r8,0xd2f1
80014dac:	e0 69 62 4d 	mov	r9,25165
80014db0:	ea 19 3f 50 	orh	r9,0x3f50
80014db4:	f0 16 00 1e 	mcall	r6[120]
80014db8:	18 98       	mov	r8,r12
80014dba:	58 08       	cp.w	r8,0
80014dbc:	c0 20       	breq	80014dc0 <low_speed_nav+0x8c>
80014dbe:	30 15       	mov	r5,1
80014dc0:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80014dc4:	c1 61       	brne	80014df0 <low_speed_nav+0xbc>
80014dc6:	ec f8 00 00 	ld.w	r8,r6[0]
80014dca:	70 08       	ld.w	r8,r8[0x0]
80014dcc:	f1 38 0c ff 	ld.ub	r8,r8[3327]
80014dd0:	58 08       	cp.w	r8,0
80014dd2:	c0 f1       	brne	80014df0 <low_speed_nav+0xbc>
80014dd4:	30 18       	mov	r8,1
80014dd6:	ee fa ff f0 	ld.w	r10,r7[-16]
80014dda:	fc 19 40 a0 	movh	r9,0x40a0
80014dde:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014de2:	e0 8c 00 04 	brvs	80014dea <low_speed_nav+0xb6>
80014de6:	e0 8a 00 03 	brle	80014dec <low_speed_nav+0xb8>
80014dea:	30 08       	mov	r8,0
80014dec:	5c 58       	castu.b	r8
80014dee:	c1 90       	breq	80014e20 <low_speed_nav+0xec>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
80014df0:	ec f8 00 00 	ld.w	r8,r6[0]
80014df4:	70 08       	ld.w	r8,r8[0x0]
80014df6:	30 09       	mov	r9,0
80014df8:	f1 49 01 7c 	st.w	r8[380],r9
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014dfc:	ec f8 00 00 	ld.w	r8,r6[0]
80014e00:	70 08       	ld.w	r8,r8[0x0]
80014e02:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e06:	72 09       	ld.w	r9,r9[0x0]
80014e08:	f1 49 01 84 	st.w	r8[388],r9
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014e0c:	ec f8 00 00 	ld.w	r8,r6[0]
80014e10:	70 08       	ld.w	r8,r8[0x0]
80014e12:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e16:	2f c9       	sub	r9,-4
80014e18:	72 09       	ld.w	r9,r9[0x0]
80014e1a:	f1 49 01 88 	st.w	r8[392],r9
{
	// dbg_print("Low speed nav\n");
	
	float yaw_angle_tolerance = PI/10.0;
	
	if ((f_abs(dir_desired_bf[X]) < 0.001 && f_abs(dir_desired_bf[Y]) < 0.001) || centralData->waypoint_hold_init || (rel_distance<=5.0))
80014e1e:	c6 28       	rjmp	80014ee2 <low_speed_nav+0x1ae>
	{
		centralData->controls_nav.rpy[YAW] = 0.0;
		centralData->controls_nav.tvel[X] = dir_desired_bf[X];
		centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
	}else{
		float rel_heading = atan2(dir_desired_bf[Y],dir_desired_bf[X]);
80014e20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e24:	70 08       	ld.w	r8,r8[0x0]
80014e26:	10 9c       	mov	r12,r8
80014e28:	f0 16 00 02 	mcall	r6[8]
80014e2c:	14 92       	mov	r2,r10
80014e2e:	16 93       	mov	r3,r11
80014e30:	ee f8 ff f4 	ld.w	r8,r7[-12]
80014e34:	2f c8       	sub	r8,-4
80014e36:	70 08       	ld.w	r8,r8[0x0]
80014e38:	10 9c       	mov	r12,r8
80014e3a:	f0 16 00 02 	mcall	r6[8]
80014e3e:	04 98       	mov	r8,r2
80014e40:	06 99       	mov	r9,r3
80014e42:	f0 16 00 54 	mcall	r6[336]
80014e46:	14 98       	mov	r8,r10
80014e48:	16 99       	mov	r9,r11
80014e4a:	10 9a       	mov	r10,r8
80014e4c:	12 9b       	mov	r11,r9
80014e4e:	f0 16 00 08 	mcall	r6[32]
80014e52:	18 98       	mov	r8,r12
80014e54:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (rel_heading >= yaw_angle_tolerance)
80014e58:	30 18       	mov	r8,1
80014e5a:	ee fa ff fc 	ld.w	r10,r7[-4]
80014e5e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80014e62:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80014e66:	e0 8c 00 03 	brvs	80014e6c <low_speed_nav+0x138>
80014e6a:	c0 24       	brge	80014e6e <low_speed_nav+0x13a>
80014e6c:	30 08       	mov	r8,0
80014e6e:	5c 58       	castu.b	r8
80014e70:	c0 e0       	breq	80014e8c <low_speed_nav+0x158>
		{
			centralData->controls_nav.tvel[X] = 0.0;
80014e72:	ec f8 00 00 	ld.w	r8,r6[0]
80014e76:	70 08       	ld.w	r8,r8[0x0]
80014e78:	30 09       	mov	r9,0
80014e7a:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = 0.0;
80014e7e:	ec f8 00 00 	ld.w	r8,r6[0]
80014e82:	70 08       	ld.w	r8,r8[0x0]
80014e84:	30 09       	mov	r9,0
80014e86:	f1 49 01 88 	st.w	r8[392],r9
80014e8a:	c1 28       	rjmp	80014eae <low_speed_nav+0x17a>
		}else{
			centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014e8c:	ec f8 00 00 	ld.w	r8,r6[0]
80014e90:	70 08       	ld.w	r8,r8[0x0]
80014e92:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014e96:	72 09       	ld.w	r9,r9[0x0]
80014e98:	f1 49 01 84 	st.w	r8[388],r9
			centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014e9c:	ec f8 00 00 	ld.w	r8,r6[0]
80014ea0:	70 08       	ld.w	r8,r8[0x0]
80014ea2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014ea6:	2f c9       	sub	r9,-4
80014ea8:	72 09       	ld.w	r9,r9[0x0]
80014eaa:	f1 49 01 88 	st.w	r8[392],r9
		}
		
		centralData->controls_nav.rpy[YAW] = KP_YAW * rel_heading;
80014eae:	ec f8 00 00 	ld.w	r8,r6[0]
80014eb2:	70 05       	ld.w	r5,r8[0x0]
80014eb4:	ee fc ff fc 	ld.w	r12,r7[-4]
80014eb8:	f0 16 00 02 	mcall	r6[8]
80014ebc:	e0 68 99 9a 	mov	r8,39322
80014ec0:	ea 18 99 99 	orh	r8,0x9999
80014ec4:	e0 69 99 99 	mov	r9,39321
80014ec8:	ea 19 3f c9 	orh	r9,0x3fc9
80014ecc:	f0 16 00 03 	mcall	r6[12]
80014ed0:	14 98       	mov	r8,r10
80014ed2:	16 99       	mov	r9,r11
80014ed4:	10 9a       	mov	r10,r8
80014ed6:	12 9b       	mov	r11,r9
80014ed8:	f0 16 00 08 	mcall	r6[32]
80014edc:	18 98       	mov	r8,r12
80014ede:	eb 48 01 7c 	st.w	r5[380],r8
	}

	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014ee2:	ec f8 00 00 	ld.w	r8,r6[0]
80014ee6:	70 08       	ld.w	r8,r8[0x0]
80014ee8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80014eec:	2f 89       	sub	r9,-8
80014eee:	72 09       	ld.w	r9,r9[0x0]
80014ef0:	f1 49 01 8c 	st.w	r8[396],r9
}
80014ef4:	2f cd       	sub	sp,-16
80014ef6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014efa:	00 00       	add	r0,r0
80014efc:	80 01       	ld.sh	r1,r0[0x0]
80014efe:	4b c2       	lddpc	r2,80014fec <stabilise+0x44>

80014f00 <high_speed_nav>:

void high_speed_nav(float dir_desired_bf[], Quat_Attitude_t attitude)
{
80014f00:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80014f04:	1a 97       	mov	r7,sp
80014f06:	20 1d       	sub	sp,4
80014f08:	4a 76       	lddpc	r6,80014fa4 <high_speed_nav+0xa4>
80014f0a:	1e 26       	rsub	r6,pc
80014f0c:	ef 4c ff fc 	st.w	r7[-4],r12
	//dbg_print("High speed nav\n");
	
	centralData->controls_nav.tvel[X] = dir_desired_bf[X];
80014f10:	ec f8 00 00 	ld.w	r8,r6[0]
80014f14:	70 08       	ld.w	r8,r8[0x0]
80014f16:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f1a:	72 09       	ld.w	r9,r9[0x0]
80014f1c:	f1 49 01 84 	st.w	r8[388],r9
	centralData->controls_nav.tvel[Y] = dir_desired_bf[Y];
80014f20:	ec f8 00 00 	ld.w	r8,r6[0]
80014f24:	70 08       	ld.w	r8,r8[0x0]
80014f26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f2a:	2f c9       	sub	r9,-4
80014f2c:	72 09       	ld.w	r9,r9[0x0]
80014f2e:	f1 49 01 88 	st.w	r8[392],r9
	centralData->controls_nav.tvel[Z] = dir_desired_bf[Z];
80014f32:	ec f8 00 00 	ld.w	r8,r6[0]
80014f36:	70 08       	ld.w	r8,r8[0x0]
80014f38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014f3c:	2f 89       	sub	r9,-8
80014f3e:	72 09       	ld.w	r9,r9[0x0]
80014f40:	f1 49 01 8c 	st.w	r8[396],r9
	centralData->controls_nav.rpy[YAW] = KP_YAW * atan2(centralData->position_estimator.vel_bf[Y], centralData->position_estimator.vel_bf[X]);
80014f44:	ec f8 00 00 	ld.w	r8,r6[0]
80014f48:	70 05       	ld.w	r5,r8[0x0]
80014f4a:	ec f8 00 00 	ld.w	r8,r6[0]
80014f4e:	70 08       	ld.w	r8,r8[0x0]
80014f50:	f0 f8 09 b0 	ld.w	r8,r8[2480]
80014f54:	10 9c       	mov	r12,r8
80014f56:	f0 16 00 02 	mcall	r6[8]
80014f5a:	14 92       	mov	r2,r10
80014f5c:	16 93       	mov	r3,r11
80014f5e:	ec f8 00 00 	ld.w	r8,r6[0]
80014f62:	70 08       	ld.w	r8,r8[0x0]
80014f64:	f0 f8 09 b4 	ld.w	r8,r8[2484]
80014f68:	10 9c       	mov	r12,r8
80014f6a:	f0 16 00 02 	mcall	r6[8]
80014f6e:	04 98       	mov	r8,r2
80014f70:	06 99       	mov	r9,r3
80014f72:	f0 16 00 54 	mcall	r6[336]
80014f76:	e0 68 99 9a 	mov	r8,39322
80014f7a:	ea 18 99 99 	orh	r8,0x9999
80014f7e:	e0 69 99 99 	mov	r9,39321
80014f82:	ea 19 3f c9 	orh	r9,0x3fc9
80014f86:	f0 16 00 03 	mcall	r6[12]
80014f8a:	14 98       	mov	r8,r10
80014f8c:	16 99       	mov	r9,r11
80014f8e:	10 9a       	mov	r10,r8
80014f90:	12 9b       	mov	r11,r9
80014f92:	f0 16 00 08 	mcall	r6[32]
80014f96:	18 98       	mov	r8,r12
80014f98:	eb 48 01 7c 	st.w	r5[380],r8
80014f9c:	2f fd       	sub	sp,-4
80014f9e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80014fa2:	00 00       	add	r0,r0
80014fa4:	80 01       	ld.sh	r1,r0[0x0]
80014fa6:	4d 8e       	lddpc	lr,80015104 <processData+0xb8>

80014fa8 <stabilise>:
#include "stabilisation.h"
#include "stabilisation_copter.h"
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
80014fa8:	eb cd 40 e0 	pushm	r5-r7,lr
80014fac:	1a 97       	mov	r7,sp
80014fae:	20 4d       	sub	sp,16
80014fb0:	4a 66       	lddpc	r6,80015048 <stabilise+0xa0>
80014fb2:	1e 26       	rsub	r6,pc
80014fb4:	ef 4c ff f8 	st.w	r7[-8],r12
80014fb8:	ef 4b ff f4 	st.w	r7[-12],r11
80014fbc:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i=0; i<3; i++) 
80014fc0:	30 08       	mov	r8,0
80014fc2:	ef 48 ff fc 	st.w	r7[-4],r8
80014fc6:	c2 68       	rjmp	80015012 <stabilise+0x6a>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
80014fc8:	ee f5 ff fc 	ld.w	r5,r7[-4]
80014fcc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80014fd0:	a3 68       	lsl	r8,0x2
80014fd2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80014fd6:	f2 08 00 08 	add	r8,r9,r8
80014fda:	70 0b       	ld.w	r11,r8[0x0]
80014fdc:	ee fa ff f8 	ld.w	r10,r7[-8]
80014fe0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80014fe4:	12 98       	mov	r8,r9
80014fe6:	a5 68       	lsl	r8,0x4
80014fe8:	12 08       	add	r8,r9
80014fea:	a3 68       	lsl	r8,0x2
80014fec:	f4 08 00 08 	add	r8,r10,r8
80014ff0:	ee fa ff f4 	ld.w	r10,r7[-12]
80014ff4:	10 9c       	mov	r12,r8
80014ff6:	f0 16 01 28 	mcall	r6[1184]
80014ffa:	18 9a       	mov	r10,r12
80014ffc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015000:	ea c9 ff bc 	sub	r9,r5,-68
80015004:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "stabilisation_hybrid.h"

void stabilise(Stabiliser_t *stabiliser, float dt, float errors[]) 
{
	int i;
	for (i=0; i<3; i++) 
80015008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001500c:	2f f8       	sub	r8,-1
8001500e:	ef 48 ff fc 	st.w	r7[-4],r8
80015012:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015016:	58 28       	cp.w	r8,2
80015018:	fe 9a ff d8 	brle	80014fc8 <stabilise+0x20>
	{
		stabiliser->output.rpy[i]=	pid_update_dt(&(stabiliser->rpy_controller[i]),  errors[i], dt);
	}		
	stabiliser->output.thrust= pid_update_dt(&(stabiliser->thrust_controller),  errors[3], dt);
8001501c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015020:	2f 48       	sub	r8,-12
80015022:	70 09       	ld.w	r9,r8[0x0]
80015024:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015028:	f0 c8 ff 34 	sub	r8,r8,-204
8001502c:	ee fa ff f4 	ld.w	r10,r7[-12]
80015030:	12 9b       	mov	r11,r9
80015032:	10 9c       	mov	r12,r8
80015034:	f0 16 01 28 	mcall	r6[1184]
80015038:	18 99       	mov	r9,r12
8001503a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001503e:	f1 49 01 1c 	st.w	r8[284],r9
80015042:	2f cd       	sub	sp,-16
80015044:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80015048:	80 01       	ld.sh	r1,r0[0x0]
8001504a:	4e 36       	lddpc	r6,800151d4 <processData+0x188>

8001504c <processData>:
adcifa_sequencer_conversion_opt_t adcifa_sequencer0_conversion_opt[SLOTS_PER_SEQUENCER];
			
			
			
__attribute__((__interrupt__))
static void processData() {
8001504c:	eb cd 40 c0 	pushm	r6-r7,lr
80015050:	1a 97       	mov	r7,sp
80015052:	20 2d       	sub	sp,8
80015054:	4f 96       	lddpc	r6,80015238 <processData+0x1ec>
80015056:	1e 26       	rsub	r6,pc
	int ch;
	int16_t value;

	if (sample_counter>=number_of_samples)  {
80015058:	ec f8 01 20 	ld.w	r8,r6[288]
8001505c:	70 09       	ld.w	r9,r8[0x0]
8001505e:	ec f8 03 84 	ld.w	r8,r6[900]
80015062:	70 08       	ld.w	r8,r8[0x0]
80015064:	10 39       	cp.w	r9,r8
80015066:	c2 15       	brlt	800150a8 <processData+0x5c>
		if (continuous_mode) {
80015068:	ec f8 03 58 	ld.w	r8,r6[856]
8001506c:	11 88       	ld.ub	r8,r8[0x0]
8001506e:	58 08       	cp.w	r8,0
80015070:	c0 e0       	breq	8001508c <processData+0x40>
			sample_counter=0;
80015072:	ec f8 01 20 	ld.w	r8,r6[288]
80015076:	30 09       	mov	r9,0
80015078:	91 09       	st.w	r8[0x0],r9
			oversampling_counter=0;
8001507a:	ec f8 01 9c 	ld.w	r8,r6[412]
8001507e:	30 09       	mov	r9,0
80015080:	91 09       	st.w	r8[0x0],r9
			channel_index=0;
80015082:	ec f8 01 3c 	ld.w	r8,r6[316]
80015086:	30 09       	mov	r9,0
80015088:	91 09       	st.w	r8[0x0],r9
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
		}
		return;
8001508a:	cd 38       	rjmp	80015230 <processData+0x1e4>
		if (continuous_mode) {
			sample_counter=0;
			oversampling_counter=0;
			channel_index=0;
		} else {
			adcifa_disable_interrupt(adcifa, ADC_INT_SEOS0);
8001508c:	ec f8 01 1c 	ld.w	r8,r6[284]
80015090:	70 08       	ld.w	r8,r8[0x0]
80015092:	30 1b       	mov	r11,1
80015094:	10 9c       	mov	r12,r8
80015096:	f0 16 01 24 	mcall	r6[1168]
			//adcifa_disable_interrupt(adcifa, ADC_INT_SEOS1);
			adcifa_stop_itimer(adcifa);
8001509a:	ec f8 01 1c 	ld.w	r8,r6[284]
8001509e:	70 08       	ld.w	r8,r8[0x0]
800150a0:	10 9c       	mov	r12,r8
800150a2:	f0 16 01 01 	mcall	r6[1028]
		}
		return;
800150a6:	cc 58       	rjmp	80015230 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
800150a8:	ec f8 01 1c 	ld.w	r8,r6[284]
800150ac:	70 08       	ld.w	r8,r8[0x0]
800150ae:	70 28       	ld.w	r8,r8[0x8]
800150b0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800150b4:	e0 80 00 bd 	breq	8001522e <processData+0x1e2>
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
800150b8:	ec f8 01 20 	ld.w	r8,r6[288]
800150bc:	70 08       	ld.w	r8,r8[0x0]
800150be:	58 08       	cp.w	r8,0
800150c0:	c4 85       	brlt	80015150 <processData+0x104>
		for (ch=0; ch<sequencer_item_count; ch++) {
800150c2:	30 08       	mov	r8,0
800150c4:	ef 48 ff f8 	st.w	r7[-8],r8
800150c8:	c3 88       	rjmp	80015138 <processData+0xec>
			value=adcifa->resx[ch];
800150ca:	ec f8 01 1c 	ld.w	r8,r6[284]
800150ce:	70 08       	ld.w	r8,r8[0x0]
800150d0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800150d4:	2d f9       	sub	r9,-33
800150d6:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800150da:	ef 58 ff fe 	st.h	r7[-2],r8
			if (oversampling_counter<=0) {
800150de:	ec f8 01 9c 	ld.w	r8,r6[412]
800150e2:	70 08       	ld.w	r8,r8[0x0]
800150e4:	58 08       	cp.w	r8,0
800150e6:	e0 89 00 0c 	brgt	800150fe <processData+0xb2>
				internal_buffer[channel_index]=  value ;
800150ea:	ec f8 01 3c 	ld.w	r8,r6[316]
800150ee:	70 09       	ld.w	r9,r8[0x0]
800150f0:	ef 0a ff fe 	ld.sh	r10,r7[-2]
800150f4:	ec f8 02 38 	ld.w	r8,r6[568]
800150f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
800150fc:	c1 18       	rjmp	8001511e <processData+0xd2>
			}else {			
				internal_buffer[channel_index]+= value ;
800150fe:	ec f8 01 3c 	ld.w	r8,r6[316]
80015102:	70 08       	ld.w	r8,r8[0x0]
80015104:	10 99       	mov	r9,r8
80015106:	10 9a       	mov	r10,r8
80015108:	ec f8 02 38 	ld.w	r8,r6[568]
8001510c:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
80015110:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80015114:	10 0a       	add	r10,r8
80015116:	ec f8 02 38 	ld.w	r8,r6[568]
8001511a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
8001511e:	ec f8 01 3c 	ld.w	r8,r6[316]
80015122:	70 08       	ld.w	r8,r8[0x0]
80015124:	f0 c9 ff ff 	sub	r9,r8,-1
80015128:	ec f8 01 3c 	ld.w	r8,r6[316]
8001512c:	91 09       	st.w	r8[0x0],r9
	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
		
	if (sample_counter>=0) {
		for (ch=0; ch<sequencer_item_count; ch++) {
8001512e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015132:	2f f8       	sub	r8,-1
80015134:	ef 48 ff f8 	st.w	r7[-8],r8
80015138:	ec f8 01 24 	ld.w	r8,r6[292]
8001513c:	11 88       	ld.ub	r8,r8[0x0]
8001513e:	5c 58       	castu.b	r8
80015140:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015144:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015148:	10 39       	cp.w	r9,r8
8001514a:	fe 99 ff c0 	brgt	800150ca <processData+0x7e>
8001514e:	c0 a8       	rjmp	80015162 <processData+0x116>
				//adci_buffer[ch][even_odd][sample_counter]+=value;
			}			
			channel_index++;
		
		}
	}	else {sample_counter++; return;}
80015150:	ec f8 01 20 	ld.w	r8,r6[288]
80015154:	70 08       	ld.w	r8,r8[0x0]
80015156:	f0 c9 ff ff 	sub	r9,r8,-1
8001515a:	ec f8 01 20 	ld.w	r8,r6[288]
8001515e:	91 09       	st.w	r8[0x0],r9
80015160:	c6 88       	rjmp	80015230 <processData+0x1e4>
	//if (function_generator!=NULL) {
	//	DAC_set_value((*function_generator)(sampleCounter));
	//}
	if (channel_index>=channel_count) {
80015162:	ec f8 02 1c 	ld.w	r8,r6[540]
80015166:	11 88       	ld.ub	r8,r8[0x0]
80015168:	5c 58       	castu.b	r8
8001516a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001516e:	ec f8 01 3c 	ld.w	r8,r6[316]
80015172:	70 08       	ld.w	r8,r8[0x0]
80015174:	10 39       	cp.w	r9,r8
80015176:	e0 89 00 0e 	brgt	80015192 <processData+0x146>
		oversampling_counter++;
8001517a:	ec f8 01 9c 	ld.w	r8,r6[412]
8001517e:	70 08       	ld.w	r8,r8[0x0]
80015180:	f0 c9 ff ff 	sub	r9,r8,-1
80015184:	ec f8 01 9c 	ld.w	r8,r6[412]
80015188:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
8001518a:	ec f8 01 3c 	ld.w	r8,r6[316]
8001518e:	30 09       	mov	r9,0
80015190:	91 09       	st.w	r8[0x0],r9
	}
	if (oversampling_counter>= oversampling) {
80015192:	ec f8 01 9c 	ld.w	r8,r6[412]
80015196:	70 09       	ld.w	r9,r8[0x0]
80015198:	ec f8 03 80 	ld.w	r8,r6[896]
8001519c:	70 08       	ld.w	r8,r8[0x0]
8001519e:	10 39       	cp.w	r9,r8
800151a0:	c4 85       	brlt	80015230 <processData+0x1e4>
		oversampling_counter=0;
800151a2:	ec f8 01 9c 	ld.w	r8,r6[412]
800151a6:	30 09       	mov	r9,0
800151a8:	91 09       	st.w	r8[0x0],r9
		channel_index=0;
800151aa:	ec f8 01 3c 	ld.w	r8,r6[316]
800151ae:	30 09       	mov	r9,0
800151b0:	91 09       	st.w	r8[0x0],r9
		for (ch=0; ch<channel_count; ch++) {
800151b2:	30 08       	mov	r8,0
800151b4:	ef 48 ff f8 	st.w	r7[-8],r8
800151b8:	c2 78       	rjmp	80015206 <processData+0x1ba>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
800151ba:	ec f8 02 8c 	ld.w	r8,r6[652]
800151be:	70 09       	ld.w	r9,r8[0x0]
800151c0:	ec f8 02 1c 	ld.w	r8,r6[540]
800151c4:	11 88       	ld.ub	r8,r8[0x0]
800151c6:	5c 58       	castu.b	r8
800151c8:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
800151cc:	ec f8 01 20 	ld.w	r8,r6[288]
800151d0:	70 08       	ld.w	r8,r8[0x0]
800151d2:	b1 3a       	mul	r10,r8
800151d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800151d8:	f4 08 00 08 	add	r8,r10,r8
800151dc:	a1 78       	lsl	r8,0x1
800151de:	f2 08 00 0a 	add	r10,r9,r8
800151e2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800151e6:	ec f8 02 38 	ld.w	r8,r6[568]
800151ea:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
800151ee:	ec f9 04 f4 	ld.w	r9,r6[1268]
800151f2:	72 09       	ld.w	r9,r9[0x0]
800151f4:	f0 09 0c 08 	divs	r8,r8,r9
800151f8:	5c 88       	casts.h	r8
800151fa:	b4 08       	st.h	r10[0x0],r8
		channel_index=0;
	}
	if (oversampling_counter>= oversampling) {
		oversampling_counter=0;
		channel_index=0;
		for (ch=0; ch<channel_count; ch++) {
800151fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015200:	2f f8       	sub	r8,-1
80015202:	ef 48 ff f8 	st.w	r7[-8],r8
80015206:	ec f8 02 1c 	ld.w	r8,r6[540]
8001520a:	11 88       	ld.ub	r8,r8[0x0]
8001520c:	5c 58       	castu.b	r8
8001520e:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015212:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015216:	10 39       	cp.w	r9,r8
80015218:	fe 99 ff d1 	brgt	800151ba <processData+0x16e>
			adci_buffer[ch + sample_counter*channel_count]=internal_buffer[ch] / oversampling_divider;
		}
		sample_counter++;
8001521c:	ec f8 01 20 	ld.w	r8,r6[288]
80015220:	70 08       	ld.w	r8,r8[0x0]
80015222:	f0 c9 ff ff 	sub	r9,r8,-1
80015226:	ec f8 01 20 	ld.w	r8,r6[288]
8001522a:	91 09       	st.w	r8[0x0],r9
8001522c:	c0 28       	rjmp	80015230 <processData+0x1e4>
	}
	

	if (((adcifa->sr&ADC_INT_SEOS0) ==0) 
	//|| ((adcifa->sr&ADC_INT_SEOS1) ==0) 
	) {return;}
8001522e:	d7 03       	nop
	
	}		
	//DAC_set_value(even_odd*400);
	// acknowledge processing finished
	//adcifa->scr=ADC_INT_SEOS0 | ADC_INT_SEOS1;
}
80015230:	2f ed       	sub	sp,-8
80015232:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80015236:	d6 03       	rete
80015238:	80 01       	ld.sh	r1,r0[0x0]
8001523a:	4e da       	lddpc	r10,800153ec <adc_sequencer_add+0x94>

8001523c <Init_ADCI>:


// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADCI(uint32_t adc_frequency, uint8_t reference_source, int set_oversampling, int set_oversampling_divider){
8001523c:	eb cd 40 c0 	pushm	r6-r7,lr
80015240:	1a 97       	mov	r7,sp
80015242:	20 4d       	sub	sp,16
80015244:	4b 96       	lddpc	r6,80015328 <Init_ADCI+0xec>
80015246:	1e 26       	rsub	r6,pc
80015248:	ef 4c ff fc 	st.w	r7[-4],r12
8001524c:	16 98       	mov	r8,r11
8001524e:	ef 4a ff f4 	st.w	r7[-12],r10
80015252:	ef 49 ff f0 	st.w	r7[-16],r9
80015256:	ef 68 ff f8 	st.b	r7[-8],r8

		// Assign and enable GPIO pins to the ADC function.
		gpio_enable_module(ADCIFA_GPIO_MAP, sizeof(ADCIFA_GPIO_MAP) / sizeof(ADCIFA_GPIO_MAP[0]));
8001525a:	31 3b       	mov	r11,19
8001525c:	ec fc 09 0c 	ld.w	r12,r6[2316]
80015260:	f0 16 00 96 	mcall	r6[600]

		adc_config_options.frequency=adc_frequency;
80015264:	ec f8 01 0c 	ld.w	r8,r6[268]
80015268:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001526c:	91 09       	st.w	r8[0x0],r9
		adc_config_options.reference_source=reference_source;
8001526e:	ec f9 01 0c 	ld.w	r9,r6[268]
80015272:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80015276:	b2 c8       	st.b	r9[0x4],r8

		// Get ADCIFA Factory Configuration
		adcifa_get_calibration_data(adcifa, &adc_config_options);
80015278:	ec f8 01 1c 	ld.w	r8,r6[284]
8001527c:	70 08       	ld.w	r8,r8[0x0]
8001527e:	ec fb 01 0c 	ld.w	r11,r6[268]
80015282:	10 9c       	mov	r12,r8
80015284:	f0 16 02 0c 	mcall	r6[2096]
		if ((uint16_t)adc_config_options.offset_calibration_value == 0xFFFF){
80015288:	ec f8 01 0c 	ld.w	r8,r6[268]
8001528c:	90 68       	ld.sh	r8,r8[0xc]
8001528e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015292:	3f f8       	mov	r8,-1
80015294:	f0 09 19 00 	cp.h	r9,r8
80015298:	c1 51       	brne	800152c2 <Init_ADCI+0x86>
			// Set default calibration if Engineering samples and part is not programmed
			adc_config_options.offset_calibration_value = 0x3B;
8001529a:	ec f9 01 0c 	ld.w	r9,r6[268]
8001529e:	33 b8       	mov	r8,59
800152a0:	b2 68       	st.h	r9[0xc],r8
			adc_config_options.gain_calibration_value = 0x4210;
800152a2:	ec f9 01 0c 	ld.w	r9,r6[268]
800152a6:	e0 68 42 10 	mov	r8,16912
800152aa:	b2 58       	st.h	r9[0xa],r8
			adc_config_options.sh0_calibration_value = 0x210;
800152ac:	ec f9 01 0c 	ld.w	r9,r6[268]
800152b0:	e0 68 02 10 	mov	r8,528
800152b4:	b2 78       	st.h	r9[0xe],r8
			adc_config_options.sh1_calibration_value = 0x210;
800152b6:	ec f9 01 0c 	ld.w	r9,r6[268]
800152ba:	e0 68 02 10 	mov	r8,528
800152be:	f3 58 00 10 	st.h	r9[16],r8
		}
		adc_config_options.offset_calibration_value = 0x3B; // offset correction
800152c2:	ec f9 01 0c 	ld.w	r9,r6[268]
800152c6:	33 b8       	mov	r8,59
800152c8:	b2 68       	st.h	r9[0xc],r8

		// Configure ADCIFA core
		adcifa_configure(adcifa, &adc_config_options, FOSC0);
800152ca:	ec f8 01 1c 	ld.w	r8,r6[284]
800152ce:	70 08       	ld.w	r8,r8[0x0]
800152d0:	e0 6a 24 00 	mov	r10,9216
800152d4:	ea 1a 00 f4 	orh	r10,0xf4
800152d8:	ec fb 01 0c 	ld.w	r11,r6[268]
800152dc:	10 9c       	mov	r12,r8
800152de:	f0 16 02 27 	mcall	r6[2204]

		clear_adc_sequencer();
800152e2:	f0 16 02 04 	mcall	r6[2064]
		continuous_mode=false;
800152e6:	ec f9 03 58 	ld.w	r9,r6[856]
800152ea:	30 08       	mov	r8,0
800152ec:	b2 88       	st.b	r9[0x0],r8
		// Configure ADCIFA sequencer 1
		//adcifa_configure_sequencer(adcifa, 1, &adcifa_sequence_opt, adcifa_sequencer1_conversion_opt);
		
		adcifa_disable_interrupt(adcifa, 0xffffffff);
800152ee:	ec f8 01 1c 	ld.w	r8,r6[284]
800152f2:	70 08       	ld.w	r8,r8[0x0]
800152f4:	3f fb       	mov	r11,-1
800152f6:	10 9c       	mov	r12,r8
800152f8:	f0 16 01 24 	mcall	r6[1168]
		INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER0_IRQ, AVR32_INTC_INT1);
800152fc:	fe c8 02 b0 	sub	r8,pc,688
80015300:	30 1a       	mov	r10,1
80015302:	e0 6b 04 80 	mov	r11,1152
80015306:	10 9c       	mov	r12,r8
80015308:	f0 16 00 3b 	mcall	r6[236]
		//INTC_register_interrupt( (__int_handler) &processData, AVR32_ADCIFA_SEQUENCER1_IRQ, AVR32_INTC_INT1);
		oversampling=set_oversampling;
8001530c:	ec f8 03 80 	ld.w	r8,r6[896]
80015310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015314:	91 09       	st.w	r8[0x0],r9
		oversampling_divider=set_oversampling_divider;
80015316:	ec f8 04 f4 	ld.w	r8,r6[1268]
8001531a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001531e:	91 09       	st.w	r8[0x0],r9
//	int period_us=1000000/samplingrate;
}
80015320:	2f cd       	sub	sp,-16
80015322:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015326:	00 00       	add	r0,r0
80015328:	80 01       	ld.sh	r1,r0[0x0]
8001532a:	50 ca       	stdsp	sp[0x30],r10

8001532c <clear_adc_sequencer>:
void clear_adc_sequencer() {
8001532c:	eb cd 40 c0 	pushm	r6-r7,lr
80015330:	1a 97       	mov	r7,sp
80015332:	48 96       	lddpc	r6,80015354 <clear_adc_sequencer+0x28>
80015334:	1e 26       	rsub	r6,pc
	sequencer_item_count=0;
80015336:	ec f9 01 24 	ld.w	r9,r6[292]
8001533a:	30 08       	mov	r8,0
8001533c:	b2 88       	st.b	r9[0x0],r8
	adcifa_sequence_opt.convnb=sequencer_item_count;
8001533e:	ec f8 01 24 	ld.w	r8,r6[292]
80015342:	11 88       	ld.ub	r8,r8[0x0]
80015344:	5c 58       	castu.b	r8
80015346:	5c 58       	castu.b	r8
80015348:	ec f9 02 d4 	ld.w	r9,r6[724]
8001534c:	b2 88       	st.b	r9[0x0],r8
}
8001534e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015352:	00 00       	add	r0,r0
80015354:	80 01       	ld.sh	r1,r0[0x0]
80015356:	51 b8       	stdsp	sp[0x6c],r8

80015358 <adc_sequencer_add>:

int8_t adc_sequencer_add(uint8_t input_p, uint8_t input_n, uint8_t gain) {
80015358:	eb cd 40 c0 	pushm	r6-r7,lr
8001535c:	1a 97       	mov	r7,sp
8001535e:	20 3d       	sub	sp,12
80015360:	4b 36       	lddpc	r6,8001542c <adc_sequencer_add+0xd4>
80015362:	1e 26       	rsub	r6,pc
80015364:	16 99       	mov	r9,r11
80015366:	14 98       	mov	r8,r10
80015368:	18 9a       	mov	r10,r12
8001536a:	ef 6a ff fc 	st.b	r7[-4],r10
8001536e:	ef 69 ff f8 	st.b	r7[-8],r9
80015372:	ef 68 ff f4 	st.b	r7[-12],r8
	
	if (sequencer_item_count<SLOTS_PER_SEQUENCER-1) {
80015376:	ec f8 01 24 	ld.w	r8,r6[292]
8001537a:	11 88       	ld.ub	r8,r8[0x0]
8001537c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80015380:	30 68       	mov	r8,6
80015382:	f0 09 18 00 	cp.b	r9,r8
80015386:	e0 89 00 4c 	brgt	8001541e <adc_sequencer_add+0xc6>
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_p=input_p;
8001538a:	ec f8 01 24 	ld.w	r8,r6[292]
8001538e:	11 88       	ld.ub	r8,r8[0x0]
80015390:	5c 58       	castu.b	r8
80015392:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
80015396:	ec fa 02 4c 	ld.w	r10,r6[588]
8001539a:	12 98       	mov	r8,r9
8001539c:	a1 78       	lsl	r8,0x1
8001539e:	12 08       	add	r8,r9
800153a0:	f4 08 00 09 	add	r9,r10,r8
800153a4:	ef 38 ff fc 	ld.ub	r8,r7[-4]
800153a8:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].channel_n=input_n;
800153aa:	ec f8 01 24 	ld.w	r8,r6[292]
800153ae:	11 88       	ld.ub	r8,r8[0x0]
800153b0:	5c 58       	castu.b	r8
800153b2:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800153b6:	ec fa 02 4c 	ld.w	r10,r6[588]
800153ba:	12 98       	mov	r8,r9
800153bc:	a1 78       	lsl	r8,0x1
800153be:	12 08       	add	r8,r9
800153c0:	f4 08 00 08 	add	r8,r10,r8
800153c4:	f0 c9 ff ff 	sub	r9,r8,-1
800153c8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800153cc:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequencer0_conversion_opt[sequencer_item_count].gain=gain;
800153ce:	ec f8 01 24 	ld.w	r8,r6[292]
800153d2:	11 88       	ld.ub	r8,r8[0x0]
800153d4:	5c 58       	castu.b	r8
800153d6:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800153da:	ec fa 02 4c 	ld.w	r10,r6[588]
800153de:	12 98       	mov	r8,r9
800153e0:	a1 78       	lsl	r8,0x1
800153e2:	12 08       	add	r8,r9
800153e4:	f4 08 00 08 	add	r8,r10,r8
800153e8:	f0 c9 ff fe 	sub	r9,r8,-2
800153ec:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800153f0:	b2 88       	st.b	r9[0x0],r8
		sequencer_item_count++;
800153f2:	ec f8 01 24 	ld.w	r8,r6[292]
800153f6:	11 88       	ld.ub	r8,r8[0x0]
800153f8:	5c 58       	castu.b	r8
800153fa:	2f f8       	sub	r8,-1
800153fc:	5c 58       	castu.b	r8
800153fe:	ec f9 01 24 	ld.w	r9,r6[292]
80015402:	b2 88       	st.b	r9[0x0],r8
		adcifa_sequence_opt.convnb=sequencer_item_count;
80015404:	ec f8 01 24 	ld.w	r8,r6[292]
80015408:	11 88       	ld.ub	r8,r8[0x0]
8001540a:	5c 58       	castu.b	r8
8001540c:	5c 58       	castu.b	r8
8001540e:	ec f9 02 d4 	ld.w	r9,r6[724]
80015412:	b2 88       	st.b	r9[0x0],r8
		return sequencer_item_count;
80015414:	ec f8 01 24 	ld.w	r8,r6[292]
80015418:	11 88       	ld.ub	r8,r8[0x0]
8001541a:	5c 58       	castu.b	r8
8001541c:	c0 38       	rjmp	80015422 <adc_sequencer_add+0xca>
	} else {
		return -1;
8001541e:	e0 68 00 ff 	mov	r8,255
	}
}
80015422:	10 9c       	mov	r12,r8
80015424:	2f dd       	sub	sp,-12
80015426:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001542a:	00 00       	add	r0,r0
8001542c:	80 01       	ld.sh	r1,r0[0x0]
8001542e:	51 e6       	stdsp	sp[0x78],r6

80015430 <ADCI_Start_Sampling>:

// starts sampling, captures one buffer length and then stops
void ADCI_Start_Sampling(int16_t *buffer, int8_t channels, int length, int samplingrate, bool continuous){
80015430:	eb cd 40 c0 	pushm	r6-r7,lr
80015434:	1a 97       	mov	r7,sp
80015436:	20 6d       	sub	sp,24
80015438:	4a d6       	lddpc	r6,800154ec <ADCI_Start_Sampling+0xbc>
8001543a:	1e 26       	rsub	r6,pc
8001543c:	ef 4c ff f8 	st.w	r7[-8],r12
80015440:	ef 4a ff f0 	st.w	r7[-16],r10
80015444:	ef 49 ff ec 	st.w	r7[-20],r9
80015448:	16 99       	mov	r9,r11
8001544a:	ef 69 ff f4 	st.b	r7[-12],r9
8001544e:	ef 68 ff e8 	st.b	r7[-24],r8

	// Configure ADCIFA sequencer 0
	adcifa_configure_sequencer(adcifa, 0, &adcifa_sequence_opt, adcifa_sequencer0_conversion_opt);
80015452:	ec f8 01 1c 	ld.w	r8,r6[284]
80015456:	70 08       	ld.w	r8,r8[0x0]
80015458:	ec f9 02 4c 	ld.w	r9,r6[588]
8001545c:	ec fa 02 d4 	ld.w	r10,r6[724]
80015460:	30 0b       	mov	r11,0
80015462:	10 9c       	mov	r12,r8
80015464:	f0 16 01 ca 	mcall	r6[1832]
	adci_buffer=buffer;
80015468:	ec f8 02 8c 	ld.w	r8,r6[652]
8001546c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015470:	91 09       	st.w	r8[0x0],r9
	
	int period_us=adc_config_options.frequency/(samplingrate*oversampling);	
80015472:	ec f8 01 0c 	ld.w	r8,r6[268]
80015476:	70 08       	ld.w	r8,r8[0x0]
80015478:	ec f9 03 80 	ld.w	r9,r6[896]
8001547c:	72 0a       	ld.w	r10,r9[0x0]
8001547e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80015482:	f4 09 02 49 	mul	r9,r10,r9
80015486:	f0 09 0d 08 	divu	r8,r8,r9
8001548a:	ef 48 ff fc 	st.w	r7[-4],r8
	oversampling_counter=0;
8001548e:	ec f8 01 9c 	ld.w	r8,r6[412]
80015492:	30 09       	mov	r9,0
80015494:	91 09       	st.w	r8[0x0],r9
	sample_counter=-10;
80015496:	ec f8 01 20 	ld.w	r8,r6[288]
8001549a:	3f 69       	mov	r9,-10
8001549c:	91 09       	st.w	r8[0x0],r9
	number_of_samples=length;
8001549e:	ec f8 03 84 	ld.w	r8,r6[900]
800154a2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800154a6:	91 09       	st.w	r8[0x0],r9
	continuous_mode=continuous;
800154a8:	ec f9 03 58 	ld.w	r9,r6[856]
800154ac:	ef 38 ff e8 	ld.ub	r8,r7[-24]
800154b0:	b2 88       	st.b	r9[0x0],r8
	channel_count=channels;
800154b2:	ec f9 02 1c 	ld.w	r9,r6[540]
800154b6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800154ba:	b2 88       	st.b	r9[0x0],r8
	channel_index=0;
800154bc:	ec f8 01 3c 	ld.w	r8,r6[316]
800154c0:	30 09       	mov	r9,0
800154c2:	91 09       	st.w	r8[0x0],r9
	
	adcifa_enable_interrupt(adcifa, ADC_INT_SEOS0);
800154c4:	ec f8 01 1c 	ld.w	r8,r6[284]
800154c8:	70 08       	ld.w	r8,r8[0x0]
800154ca:	30 1b       	mov	r11,1
800154cc:	10 9c       	mov	r12,r8
800154ce:	f0 16 01 56 	mcall	r6[1368]
	//adcifa_enable_interrupt(adcifa, ADC_INT_SEOS1);
	adcifa_start_itimer(adcifa, period_us);
800154d2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800154d6:	ec f8 01 1c 	ld.w	r8,r6[284]
800154da:	70 08       	ld.w	r8,r8[0x0]
800154dc:	12 9b       	mov	r11,r9
800154de:	10 9c       	mov	r12,r8
800154e0:	f0 16 01 e5 	mcall	r6[1940]
}
800154e4:	2f ad       	sub	sp,-24
800154e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800154ea:	00 00       	add	r0,r0
800154ec:	80 01       	ld.sh	r1,r0[0x0]
800154ee:	52 be       	stdsp	sp[0xac],lr

800154f0 <ADCI_Stop_Sampling>:

// stops sampling immediately
void ADCI_Stop_Sampling(){
800154f0:	eb cd 40 c0 	pushm	r6-r7,lr
800154f4:	1a 97       	mov	r7,sp
800154f6:	48 66       	lddpc	r6,8001550c <ADCI_Stop_Sampling+0x1c>
800154f8:	1e 26       	rsub	r6,pc
	adcifa_stop_itimer(adcifa);
800154fa:	ec f8 01 1c 	ld.w	r8,r6[284]
800154fe:	70 08       	ld.w	r8,r8[0x0]
80015500:	10 9c       	mov	r12,r8
80015502:	f0 16 01 01 	mcall	r6[1028]
	
}
80015506:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001550a:	00 00       	add	r0,r0
8001550c:	80 01       	ld.sh	r1,r0[0x0]
8001550e:	53 7c       	stdsp	sp[0xdc],r12

80015510 <ADCI_Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool ADCI_Sampling_Complete(){
80015510:	eb cd 40 c0 	pushm	r6-r7,lr
80015514:	1a 97       	mov	r7,sp
80015516:	48 86       	lddpc	r6,80015534 <ADCI_Sampling_Complete+0x24>
80015518:	1e 26       	rsub	r6,pc
	return (sample_counter>=number_of_samples);
8001551a:	ec f8 01 20 	ld.w	r8,r6[288]
8001551e:	70 0a       	ld.w	r10,r8[0x0]
80015520:	ec f8 03 84 	ld.w	r8,r6[900]
80015524:	70 09       	ld.w	r9,r8[0x0]
80015526:	30 18       	mov	r8,1
80015528:	12 3a       	cp.w	r10,r9
8001552a:	c0 24       	brge	8001552e <ADCI_Sampling_Complete+0x1e>
8001552c:	30 08       	mov	r8,0
}
8001552e:	10 9c       	mov	r12,r8
80015530:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015534:	80 01       	ld.sh	r1,r0[0x0]
80015536:	53 9c       	stdsp	sp[0xe4],r12

80015538 <ADCI_get_sample>:
//void set_DAC_generator_function(generatorfunction new_function_generator ) {
//	function_generator=new_function_generator;
	
//}

int16_t ADCI_get_sample(int channel, int sample) {
80015538:	eb cd 40 c0 	pushm	r6-r7,lr
8001553c:	1a 97       	mov	r7,sp
8001553e:	20 2d       	sub	sp,8
80015540:	48 f6       	lddpc	r6,8001557c <ADCI_get_sample+0x44>
80015542:	1e 26       	rsub	r6,pc
80015544:	ef 4c ff fc 	st.w	r7[-4],r12
80015548:	ef 4b ff f8 	st.w	r7[-8],r11
	return adci_buffer[channel + channel_count*sample];
8001554c:	ec f8 02 8c 	ld.w	r8,r6[652]
80015550:	70 09       	ld.w	r9,r8[0x0]
80015552:	ec f8 02 1c 	ld.w	r8,r6[540]
80015556:	11 88       	ld.ub	r8,r8[0x0]
80015558:	5c 58       	castu.b	r8
8001555a:	f5 d8 b0 08 	bfexts	r10,r8,0x0,0x8
8001555e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015562:	b1 3a       	mul	r10,r8
80015564:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015568:	f4 08 00 08 	add	r8,r10,r8
8001556c:	a1 78       	lsl	r8,0x1
8001556e:	f2 08 00 08 	add	r8,r9,r8
80015572:	90 08       	ld.sh	r8,r8[0x0]
}
80015574:	10 9c       	mov	r12,r8
80015576:	2f ed       	sub	sp,-8
80015578:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001557c:	80 01       	ld.sh	r1,r0[0x0]
8001557e:	53 c6       	stdsp	sp[0xf0],r6

80015580 <ADCI_get_buffer>:

int16_t* ADCI_get_buffer() {
80015580:	eb cd 40 c0 	pushm	r6-r7,lr
80015584:	1a 97       	mov	r7,sp
80015586:	48 56       	lddpc	r6,80015598 <ADCI_get_buffer+0x18>
80015588:	1e 26       	rsub	r6,pc
	return adci_buffer;
8001558a:	ec f8 02 8c 	ld.w	r8,r6[652]
8001558e:	70 08       	ld.w	r8,r8[0x0]
}
80015590:	10 9c       	mov	r12,r8
80015592:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015596:	00 00       	add	r0,r0
80015598:	80 01       	ld.sh	r1,r0[0x0]
8001559a:	54 0c       	stdsp	sp[0x100],r12

8001559c <ADCI_get_sampling_status>:
	
int ADCI_get_sampling_status() {
8001559c:	eb cd 40 c0 	pushm	r6-r7,lr
800155a0:	1a 97       	mov	r7,sp
800155a2:	48 56       	lddpc	r6,800155b4 <ADCI_get_sampling_status+0x18>
800155a4:	1e 26       	rsub	r6,pc
	return sample_counter;
800155a6:	ec f8 01 20 	ld.w	r8,r6[288]
800155aa:	70 08       	ld.w	r8,r8[0x0]
}
800155ac:	10 9c       	mov	r12,r8
800155ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800155b2:	00 00       	add	r0,r0
800155b4:	80 01       	ld.sh	r1,r0[0x0]
800155b6:	54 28       	stdsp	sp[0x108],r8

800155b8 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
800155b8:	eb cd 40 80 	pushm	r7,lr
800155bc:	1a 97       	mov	r7,sp
800155be:	20 2d       	sub	sp,8
800155c0:	ef 4c ff fc 	st.w	r7[-4],r12
800155c4:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
800155c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155cc:	30 09       	mov	r9,0
800155ce:	91 09       	st.w	r8[0x0],r9
}
800155d0:	2f ed       	sub	sp,-8
800155d2:	e3 cd 80 80 	ldm	sp++,r7,pc

800155d6 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
800155d6:	eb cd 40 80 	pushm	r7,lr
800155da:	1a 97       	mov	r7,sp
800155dc:	20 2d       	sub	sp,8
800155de:	ef 4c ff fc 	st.w	r7[-4],r12
800155e2:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800155e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155ea:	70 08       	ld.w	r8,r8[0x0]
800155ec:	10 99       	mov	r9,r8
800155ee:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
800155f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800155f6:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
800155f8:	10 49       	or	r9,r8
800155fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800155fe:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
80015600:	2f ed       	sub	sp,-8
80015602:	e3 cd 80 80 	ldm	sp++,r7,pc

80015606 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
80015606:	eb cd 40 80 	pushm	r7,lr
8001560a:	1a 97       	mov	r7,sp
8001560c:	20 2d       	sub	sp,8
8001560e:	ef 4c ff fc 	st.w	r7[-4],r12
80015612:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
80015616:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001561a:	70 08       	ld.w	r8,r8[0x0]
8001561c:	10 99       	mov	r9,r8
8001561e:	e4 19 ff 00 	andh	r9,0xff00
80015622:	e0 19 ff fd 	andl	r9,0xfffd
80015626:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001562a:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8001562c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015630:	58 18       	cp.w	r8,1
80015632:	e0 88 00 17 	brls	80015660 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
80015636:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001563a:	70 08       	ld.w	r8,r8[0x0]
8001563c:	10 99       	mov	r9,r8
8001563e:	a1 b9       	sbr	r9,0x1
80015640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015644:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
80015646:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001564a:	70 09       	ld.w	r9,r8[0x0]
8001564c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015650:	2f f8       	sub	r8,-1
80015652:	a1 98       	lsr	r8,0x1
80015654:	20 18       	sub	r8,1
80015656:	b1 68       	lsl	r8,0x10
80015658:	10 49       	or	r9,r8
8001565a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001565e:	91 09       	st.w	r8[0x0],r9
	}
}
80015660:	2f ed       	sub	sp,-8
80015662:	e3 cd 80 80 	ldm	sp++,r7,pc

80015666 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
80015666:	eb cd 40 80 	pushm	r7,lr
8001566a:	1a 97       	mov	r7,sp
8001566c:	20 2d       	sub	sp,8
8001566e:	ef 4c ff fc 	st.w	r7[-4],r12
80015672:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
80015676:	fe 78 08 00 	mov	r8,-63488
8001567a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001567e:	ee fa ff fc 	ld.w	r10,r7[-4]
80015682:	74 0a       	ld.w	r10,r10[0x0]
80015684:	a1 aa       	sbr	r10,0x0
80015686:	2e 79       	sub	r9,-25
80015688:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8001568c:	2f ed       	sub	sp,-8
8001568e:	e3 cd 80 80 	ldm	sp++,r7,pc

80015692 <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
80015692:	eb cd 40 80 	pushm	r7,lr
80015696:	1a 97       	mov	r7,sp
80015698:	20 1d       	sub	sp,4
8001569a:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8001569e:	fe 78 08 00 	mov	r8,-63488
800156a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800156a6:	2e 79       	sub	r9,-25
800156a8:	30 0a       	mov	r10,0
800156aa:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800156ae:	2f fd       	sub	sp,-4
800156b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800156b4 <get_interrupt_counter>:
#define EXT_INT_LINES 1
eic_options_t eic_options[EXT_INT_LINES];  
 
 

int get_interrupt_counter(void) {
800156b4:	eb cd 40 c0 	pushm	r6-r7,lr
800156b8:	1a 97       	mov	r7,sp
800156ba:	48 56       	lddpc	r6,800156cc <get_interrupt_counter+0x18>
800156bc:	1e 26       	rsub	r6,pc
	return interrupt_counter;
800156be:	ec f8 09 08 	ld.w	r8,r6[2312]
800156c2:	70 08       	ld.w	r8,r8[0x0]
}
800156c4:	10 9c       	mov	r12,r8
800156c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800156ca:	00 00       	add	r0,r0
800156cc:	80 01       	ld.sh	r1,r0[0x0]
800156ce:	55 40       	stdsp	sp[0x150],r0

800156d0 <processData>:


void processData(void) {
800156d0:	eb cd 40 c0 	pushm	r6-r7,lr
800156d4:	1a 97       	mov	r7,sp
800156d6:	20 3d       	sub	sp,12
800156d8:	4b e6       	lddpc	r6,800157d0 <processData+0x100>
800156da:	1e 26       	rsub	r6,pc
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
800156dc:	ec f8 01 64 	ld.w	r8,r6[356]
800156e0:	70 08       	ld.w	r8,r8[0x0]
800156e2:	e0 48 03 ff 	cp.w	r8,1023
800156e6:	e0 89 00 70 	brgt	800157c6 <processData+0xf6>
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
800156ea:	30 0c       	mov	r12,0
800156ec:	f0 16 01 d3 	mcall	r6[1868]
800156f0:	18 98       	mov	r8,r12
800156f2:	ef 48 ff fc 	st.w	r7[-4],r8
	for (ch=0; ch<4; ch++) {
800156f6:	30 08       	mov	r8,0
800156f8:	ef 48 ff f4 	st.w	r7[-12],r8
800156fc:	c4 48       	rjmp	80015784 <processData+0xb4>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
800156fe:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015702:	12 98       	mov	r8,r9
80015704:	a1 78       	lsl	r8,0x1
80015706:	12 08       	add	r8,r9
80015708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001570c:	f2 08 00 08 	add	r8,r9,r8
80015710:	11 88       	ld.ub	r8,r8[0x0]
80015712:	f0 0a 15 18 	lsl	r10,r8,0x18
80015716:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001571a:	12 98       	mov	r8,r9
8001571c:	a1 78       	lsl	r8,0x1
8001571e:	12 08       	add	r8,r9
80015720:	2f f8       	sub	r8,-1
80015722:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015726:	f2 08 00 08 	add	r8,r9,r8
8001572a:	11 88       	ld.ub	r8,r8[0x0]
8001572c:	b1 68       	lsl	r8,0x10
8001572e:	10 0a       	add	r10,r8
80015730:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015734:	12 98       	mov	r8,r9
80015736:	a1 78       	lsl	r8,0x1
80015738:	12 08       	add	r8,r9
8001573a:	2f e8       	sub	r8,-2
8001573c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015740:	f2 08 00 08 	add	r8,r9,r8
80015744:	11 88       	ld.ub	r8,r8[0x0]
80015746:	a9 68       	lsl	r8,0x8
80015748:	f4 08 00 08 	add	r8,r10,r8
8001574c:	ef 48 ff f8 	st.w	r7[-8],r8
		adc_buffer[ch][sampleCounter]=(value/256);
80015750:	ee fb ff f4 	ld.w	r11,r7[-12]
80015754:	ec f8 01 64 	ld.w	r8,r6[356]
80015758:	70 09       	ld.w	r9,r8[0x0]
8001575a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001575e:	f0 ca ff 01 	sub	r10,r8,-255
80015762:	58 08       	cp.w	r8,0
80015764:	f4 08 17 50 	movlt	r8,r10
80015768:	a9 48       	asr	r8,0x8
8001576a:	10 9a       	mov	r10,r8
8001576c:	ec f8 04 f0 	ld.w	r8,r6[1264]
80015770:	ab 6b       	lsl	r11,0xa
80015772:	f6 09 00 09 	add	r9,r11,r9
80015776:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
	}	
	uint8_t* buffer =get_spi_in_buffer(ADC_SPI_INDEX);
	for (ch=0; ch<4; ch++) {
8001577a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001577e:	2f f8       	sub	r8,-1
80015780:	ef 48 ff f4 	st.w	r7[-12],r8
80015784:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015788:	58 38       	cp.w	r8,3
8001578a:	fe 9a ff ba 	brle	800156fe <processData+0x2e>
		value=(buffer[3*ch]<<24) + (buffer[3*ch+1]<<16)+(buffer[3*ch+2]<<8);
		adc_buffer[ch][sampleCounter]=(value/256);
		
	}
	
	if (function_generator!=NULL) {
8001578e:	ec f8 02 9c 	ld.w	r8,r6[668]
80015792:	70 08       	ld.w	r8,r8[0x0]
80015794:	58 08       	cp.w	r8,0
80015796:	c0 f0       	breq	800157b4 <processData+0xe4>
		DAC_set_value((*function_generator)(sampleCounter));
80015798:	ec f8 02 9c 	ld.w	r8,r6[668]
8001579c:	70 08       	ld.w	r8,r8[0x0]
8001579e:	ec f9 01 64 	ld.w	r9,r6[356]
800157a2:	72 09       	ld.w	r9,r9[0x0]
800157a4:	12 9c       	mov	r12,r9
800157a6:	5d 18       	icall	r8
800157a8:	18 98       	mov	r8,r12
800157aa:	5c 88       	casts.h	r8
800157ac:	5c 78       	castu.h	r8
800157ae:	10 9c       	mov	r12,r8
800157b0:	f0 16 01 c2 	mcall	r6[1800]
	}		
	
	sampleCounter++;	
800157b4:	ec f8 01 64 	ld.w	r8,r6[356]
800157b8:	70 08       	ld.w	r8,r8[0x0]
800157ba:	f0 c9 ff ff 	sub	r9,r8,-1
800157be:	ec f8 01 64 	ld.w	r8,r6[356]
800157c2:	91 09       	st.w	r8[0x0],r9
800157c4:	c0 28       	rjmp	800157c8 <processData+0xf8>

void processData(void) {
	int ch;
	int32_t value;
	if (sampleCounter>=ADC_BUFFER_SIZE) {
		return;
800157c6:	d7 03       	nop
		DAC_set_value((*function_generator)(sampleCounter));
	}		
	
	sampleCounter++;	
	
}  
800157c8:	2f dd       	sub	sp,-12
800157ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800157ce:	00 00       	add	r0,r0
800157d0:	80 01       	ld.sh	r1,r0[0x0]
800157d2:	55 5e       	stdsp	sp[0x154],lr

800157d4 <set_DAC_generator_function>:

void set_DAC_generator_function(generatorfunction new_function_generator ) {
800157d4:	eb cd 40 c0 	pushm	r6-r7,lr
800157d8:	1a 97       	mov	r7,sp
800157da:	20 1d       	sub	sp,4
800157dc:	48 66       	lddpc	r6,800157f4 <set_DAC_generator_function+0x20>
800157de:	1e 26       	rsub	r6,pc
800157e0:	ef 4c ff fc 	st.w	r7[-4],r12
	function_generator=new_function_generator;
800157e4:	ec f8 02 9c 	ld.w	r8,r6[668]
800157e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800157ec:	91 09       	st.w	r8[0x0],r9
	
}
800157ee:	2f fd       	sub	sp,-4
800157f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800157f4:	80 01       	ld.sh	r1,r0[0x0]
800157f6:	56 62       	stdsp	sp[0x198],r2

800157f8 <get_sample>:

float get_sample(int channel, int sample) {
800157f8:	eb cd 40 c0 	pushm	r6-r7,lr
800157fc:	1a 97       	mov	r7,sp
800157fe:	20 2d       	sub	sp,8
80015800:	48 c6       	lddpc	r6,80015830 <get_sample+0x38>
80015802:	1e 26       	rsub	r6,pc
80015804:	ef 4c ff fc 	st.w	r7[-4],r12
80015808:	ef 4b ff f8 	st.w	r7[-8],r11
	return adc_buffer[channel][sample];
8001580c:	ee fa ff fc 	ld.w	r10,r7[-4]
80015810:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015814:	ec f8 04 f0 	ld.w	r8,r6[1264]
80015818:	ab 6a       	lsl	r10,0xa
8001581a:	f4 09 00 09 	add	r9,r10,r9
8001581e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80015822:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
}
80015826:	10 9c       	mov	r12,r8
80015828:	2f ed       	sub	sp,-8
8001582a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001582e:	00 00       	add	r0,r0
80015830:	80 01       	ld.sh	r1,r0[0x0]
80015832:	56 86       	stdsp	sp[0x1a0],r6

80015834 <get_sampling_status>:

int get_sampling_status(void) {
80015834:	eb cd 40 c0 	pushm	r6-r7,lr
80015838:	1a 97       	mov	r7,sp
8001583a:	48 56       	lddpc	r6,8001584c <get_sampling_status+0x18>
8001583c:	1e 26       	rsub	r6,pc
	return sampleCounter;
8001583e:	ec f8 01 64 	ld.w	r8,r6[356]
80015842:	70 08       	ld.w	r8,r8[0x0]
}
80015844:	10 9c       	mov	r12,r8
80015846:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001584a:	00 00       	add	r0,r0
8001584c:	80 01       	ld.sh	r1,r0[0x0]
8001584e:	56 c0       	stdsp	sp[0x1b0],r0

80015850 <Init_ADC>:

// Initializes ADC (configures Pins, starts Clock, sets defaults)
void Init_ADC(void) {
80015850:	eb cd 40 c0 	pushm	r6-r7,lr
80015854:	1a 97       	mov	r7,sp
80015856:	4b 96       	lddpc	r6,80015938 <Init_ADC+0xe8>
80015858:	1e 26       	rsub	r6,pc
	function_generator=NULL;
8001585a:	ec f8 02 9c 	ld.w	r8,r6[668]
8001585e:	30 09       	mov	r9,0
80015860:	91 09       	st.w	r8[0x0],r9
	// set mode to "high resolution"
	gpio_configure_pin(ADC_MODE0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015862:	30 3b       	mov	r11,3
80015864:	32 3c       	mov	r12,35
80015866:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_MODE1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
8001586a:	30 1b       	mov	r11,1
8001586c:	32 4c       	mov	r12,36
8001586e:	f0 16 00 3d 	mcall	r6[244]
	// set Format to Fixed-position TDM via SPI
	gpio_configure_pin(ADC_FORMAT0,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015872:	30 3b       	mov	r11,3
80015874:	32 2c       	mov	r12,34
80015876:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_FORMAT1,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
8001587a:	30 1b       	mov	r11,1
8001587c:	32 1c       	mov	r12,33
8001587e:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_FORMAT2,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);	
80015882:	30 1b       	mov	r11,1
80015884:	32 0c       	mov	r12,32
80015886:	f0 16 00 3d 	mcall	r6[244]
	
	// configure the four channels
	gpio_configure_pin(ADC_PWDN1,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001588a:	30 3b       	mov	r11,3
8001588c:	34 0c       	mov	r12,64
8001588e:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN2,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015892:	30 3b       	mov	r11,3
80015894:	34 1c       	mov	r12,65
80015896:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN3,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001589a:	30 3b       	mov	r11,3
8001589c:	34 2c       	mov	r12,66
8001589e:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(ADC_PWDN4,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
800158a2:	30 3b       	mov	r11,3
800158a4:	34 3c       	mov	r12,67
800158a6:	f0 16 00 3d 	mcall	r6[244]

	
	//gpio_configure_pin(AVR32_TC1_B0_0_0_PIN,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
	//gpio_configure_pin(AVR32_PIN_PC19, GPIO_DIR_OUTPUT| GPIO_INIT_HIGH);	

	ADC_Switch_Clock(true);	
800158aa:	30 1c       	mov	r12,1
800158ac:	f0 16 01 60 	mcall	r6[1408]
	//tc_write_rc(tc, EXAMPLE_TC_CHANNEL_ID, 0x2);     // Set RC value.
	// Start the timer/counter.
	//tc_start(tc, EXAMPLE_TC_CHANNEL_ID);
	
	// Enable edge-triggered interrupt.
	eic_options[0].eic_mode   = EIC_MODE_EDGE_TRIGGERED;
800158b0:	ec f9 01 80 	ld.w	r9,r6[384]
800158b4:	30 08       	mov	r8,0
800158b6:	b2 98       	st.b	r9[0x1],r8
	// Interrupt will trigger on falling edge.
	eic_options[0].eic_edge  = EIC_EDGE_FALLING_EDGE;
800158b8:	ec f9 01 80 	ld.w	r9,r6[384]
800158bc:	30 08       	mov	r8,0
800158be:	b2 a8       	st.b	r9[0x2],r8
	// Initialize in synchronous mode : interrupt is synchronized to the clock
	eic_options[0].eic_async  = EIC_SYNCH_MODE;
800158c0:	ec f9 01 80 	ld.w	r9,r6[384]
800158c4:	30 08       	mov	r8,0
800158c6:	b2 d8       	st.b	r9[0x5],r8
	// Set the interrupt line number.
	eic_options[0].eic_line   = EXT_NMI;
800158c8:	ec f9 01 80 	ld.w	r9,r6[384]
800158cc:	30 08       	mov	r8,0
800158ce:	b2 88       	st.b	r9[0x0],r8
	
	gpio_enable_module_pin(AVR32_EIC_EXTINT_0_1_PIN, AVR32_EIC_EXTINT_0_1_FUNCTION);
800158d0:	30 1b       	mov	r11,1
800158d2:	37 5c       	mov	r12,117
800158d4:	f0 16 00 3f 	mcall	r6[252]
	
	//Disable_global_interrupt();
// Initialize interrupt vectors.
	
	eic_init(&AVR32_EIC, eic_options, 1);
800158d8:	30 1a       	mov	r10,1
800158da:	ec fb 01 80 	ld.w	r11,r6[384]
800158de:	fe 7c 14 00 	mov	r12,-60416
800158e2:	f0 16 01 ba 	mcall	r6[1768]

	//INTC_init_interrupts();
	// initialise SPI0 interface
	initSPI(&AVR32_SPI0, ADC_SPI_INDEX);
800158e6:	30 0b       	mov	r11,0
800158e8:	fc 7c 18 00 	mov	r12,-190464
800158ec:	f0 16 01 49 	mcall	r6[1316]
	spiInitDMA(0, 12);
800158f0:	30 cb       	mov	r11,12
800158f2:	30 0c       	mov	r12,0
800158f4:	f0 16 01 ab 	mcall	r6[1708]
	setSPIcallBack(ADC_SPI_INDEX, &processData);
800158f8:	ec fb 06 d0 	ld.w	r11,r6[1744]
800158fc:	30 0c       	mov	r12,0
800158fe:	f0 16 01 8d 	mcall	r6[1588]
	// Register the EIC interrupt handlers to the interrupt controller.
	//INTC_register_interrupt(&eic_int_handler1, AVR32_EIC_IRQ_1, AVR32_INTC_INT1);
	// Enable the chosen lines and their corresponding interrupt feature.
	eic_enable_line(&AVR32_EIC, eic_options[0].eic_line);
80015902:	ec f8 01 80 	ld.w	r8,r6[384]
80015906:	11 88       	ld.ub	r8,r8[0x0]
80015908:	10 9b       	mov	r11,r8
8001590a:	fe 7c 14 00 	mov	r12,-60416
8001590e:	f0 16 01 db 	mcall	r6[1900]
	eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
80015912:	ec f8 01 80 	ld.w	r8,r6[384]
80015916:	11 88       	ld.ub	r8,r8[0x0]
80015918:	10 9b       	mov	r11,r8
8001591a:	fe 7c 14 00 	mov	r12,-60416
8001591e:	f0 16 01 87 	mcall	r6[1564]
	
	
	//Enable_global_interrupt();
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015922:	30 0b       	mov	r11,0
80015924:	fe 7c 14 00 	mov	r12,-60416
80015928:	f0 16 00 e3 	mcall	r6[908]
	
	// activate sync and clkdiv
	gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
8001592c:	30 3b       	mov	r11,3
8001592e:	32 5c       	mov	r12,37
80015930:	f0 16 00 3d 	mcall	r6[244]

}
80015934:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015938:	80 01       	ld.sh	r1,r0[0x0]
8001593a:	56 dc       	stdsp	sp[0x1b4],r12

8001593c <ADC_Switch_Clock>:

// Enable/Disable the clock to the ADC
void ADC_Switch_Clock(Bool on_off) {
8001593c:	eb cd 40 c0 	pushm	r6-r7,lr
80015940:	1a 97       	mov	r7,sp
80015942:	20 1d       	sub	sp,4
80015944:	49 56       	lddpc	r6,80015998 <ADC_Switch_Clock+0x5c>
80015946:	1e 26       	rsub	r6,pc
80015948:	18 98       	mov	r8,r12
8001594a:	ef 68 ff fc 	st.b	r7[-4],r8
	if (on_off==true) {
8001594e:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80015952:	30 18       	mov	r8,1
80015954:	f0 09 18 00 	cp.b	r9,r8
80015958:	c1 a1       	brne	8001598c <ADC_Switch_Clock+0x50>
		gpio_enable_module_pin(AVR32_SCIF_GCLK_1_1_PIN, AVR32_SCIF_GCLK_1_1_FUNCTION);	
8001595a:	30 1b       	mov	r11,1
8001595c:	35 4c       	mov	r12,84
8001595e:	f0 16 00 3f 	mcall	r6[252]

		gpio_configure_pin(ADC_CLKDIV,GPIO_DIR_OUTPUT | GPIO_INIT_HIGH);	
80015962:	30 3b       	mov	r11,3
80015964:	32 5c       	mov	r12,37
80015966:	f0 16 00 3d 	mcall	r6[244]
	
	
		//scif_gc_setup(AVR32_SCIF_GCLK_GCLK0PIN, SCIF_GCCTRL_CPUCLOCK, 1, 1);
		//scif_gc_enable(AVR32_SCIF_GCLK_GCLK0PIN);
		genclk_config_defaults(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
8001596a:	30 ab       	mov	r11,10
8001596c:	ec fc 02 30 	ld.w	r12,r6[560]
80015970:	c2 4e       	rcall	800155b8 <genclk_config_defaults>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
80015972:	30 6b       	mov	r11,6
80015974:	ec fc 02 30 	ld.w	r12,r6[560]
80015978:	c2 fe       	rcall	800155d6 <genclk_config_set_source>
		genclk_config_set_divider(&gcfg, 2);
8001597a:	30 2b       	mov	r11,2
8001597c:	ec fc 02 30 	ld.w	r12,r6[560]
80015980:	c4 3e       	rcall	80015606 <genclk_config_set_divider>
		genclk_enable(&gcfg, AVR32_SCIF_GCLK_GCLK1PIN);
80015982:	30 ab       	mov	r11,10
80015984:	ec fc 02 30 	ld.w	r12,r6[560]
80015988:	c6 fe       	rcall	80015666 <genclk_enable>
8001598a:	c0 38       	rjmp	80015990 <ADC_Switch_Clock+0x54>
	} else {
		genclk_disable(AVR32_SCIF_GCLK_GCLK1PIN);
8001598c:	30 ac       	mov	r12,10
8001598e:	c8 2e       	rcall	80015692 <genclk_disable>
		
	}
}
80015990:	2f fd       	sub	sp,-4
80015992:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015996:	00 00       	add	r0,r0
80015998:	80 01       	ld.sh	r1,r0[0x0]
8001599a:	57 ca       	stdsp	sp[0x1f0],r10

8001599c <ADC_Switch_Channel>:

// Switch the four input channels on or off
void ADC_Switch_Channel(int channel, Bool on_off){
8001599c:	eb cd 40 80 	pushm	r7,lr
800159a0:	1a 97       	mov	r7,sp
800159a2:	20 2d       	sub	sp,8
800159a4:	ef 4c ff fc 	st.w	r7[-4],r12
800159a8:	16 98       	mov	r8,r11
800159aa:	ef 68 ff f8 	st.b	r7[-8],r8
	
}
800159ae:	2f ed       	sub	sp,-8
800159b0:	e3 cd 80 80 	ldm	sp++,r7,pc

800159b4 <ADC_Set_Mode>:

// configures the ADC mode (refer to datasheet for options)
void ADC_Set_Mode(int mode){};
800159b4:	eb cd 40 80 	pushm	r7,lr
800159b8:	1a 97       	mov	r7,sp
800159ba:	20 1d       	sub	sp,4
800159bc:	ef 4c ff fc 	st.w	r7[-4],r12
800159c0:	2f fd       	sub	sp,-4
800159c2:	e3 cd 80 80 	ldm	sp++,r7,pc

800159c6 <ADC_Start_Oneshot>:

// enables continuous sampling  -- not implemented yet
//void ADC_Start_Sampling(void){}

// starts sampling, captures one buffer length and then stops
void ADC_Start_Oneshot(void){
800159c6:	eb cd 40 c0 	pushm	r6-r7,lr
800159ca:	1a 97       	mov	r7,sp
800159cc:	48 46       	lddpc	r6,800159dc <ADC_Start_Oneshot+0x16>
800159ce:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	//eic_enable_interrupt_line(&AVR32_EIC, eic_options[0].eic_line);
	sampleCounter=0;
800159d0:	ec f8 01 64 	ld.w	r8,r6[356]
800159d4:	30 09       	mov	r9,0
800159d6:	91 09       	st.w	r8[0x0],r9
	//Enable_global_interrupt();
};
800159d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800159dc:	80 01       	ld.sh	r1,r0[0x0]
800159de:	58 52       	cp.w	r2,5

800159e0 <ADC_Stop_Sampling>:

// stops sampling immediately
void ADC_Stop_Sampling(void){};
800159e0:	eb cd 40 80 	pushm	r7,lr
800159e4:	1a 97       	mov	r7,sp
800159e6:	e3 cd 80 80 	ldm	sp++,r7,pc

800159ea <Sampling_Complete>:

// Returns true if one-shot sampling has finished
Bool Sampling_Complete(void){};
800159ea:	eb cd 40 80 	pushm	r7,lr
800159ee:	1a 97       	mov	r7,sp
800159f0:	e3 cd 80 80 	ldm	sp++,r7,pc

800159f4 <eic_nmi_handler>:
__attribute__((__naked__))

void eic_nmi_handler( void )
{
//	int i=0;
	__asm__ __volatile__ (
800159f4:	d7 f1       	pushm	r0-r12,lr
			/* Save registers not saved upon NMI exception. */
			"pushm   r0-r12, lr\n\t"
			);
	//interrupt_counter++;
	
	if (sampleCounter<ADC_BUFFER_SIZE) {
800159f6:	ec f8 01 64 	ld.w	r8,r6[356]
800159fa:	70 08       	ld.w	r8,r8[0x0]
800159fc:	e0 48 03 ff 	cp.w	r8,1023
80015a00:	e0 89 00 06 	brgt	80015a0c <eic_nmi_handler+0x18>
		spiTriggerDMA(0, 12);
80015a04:	30 cb       	mov	r11,12
80015a06:	30 0c       	mov	r12,0
80015a08:	f0 16 01 8f 	mcall	r6[1596]
	} else {
		//eic_disable_interrupt_line(&AVR32_EIC,eic_options[0].eic_line);

	}
	eic_clear_interrupt_line(&AVR32_EIC, EXT_NMI);
80015a0c:	30 0b       	mov	r11,0
80015a0e:	fe 7c 14 00 	mov	r12,-60416
80015a12:	f0 16 00 e3 	mcall	r6[908]
	__asm__ __volatile__ (
80015a16:	d7 f2       	popm	r0-r12,lr
80015a18:	d6 03       	rete
	...

80015a1c <init_adxl345>:

uint8_t data_configuration[2] ={
DATA_SETTING_ADDRESS, FULL_RES | RANGE_16G};


void init_adxl345(void) {
80015a1c:	eb cd 40 c0 	pushm	r6-r7,lr
80015a20:	1a 97       	mov	r7,sp
80015a22:	4b 06       	lddpc	r6,80015ae0 <init_adxl345+0xc4>
80015a24:	1e 26       	rsub	r6,pc
	

	gyro_event.callback=0;
80015a26:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a2a:	30 09       	mov	r9,0
80015a2c:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
80015a2e:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a32:	30 59       	mov	r9,5
80015a34:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
80015a36:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a3a:	3f f8       	mov	r8,-1
80015a3c:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ADXL_ALT_SLAVE_ADDRESS;
80015a40:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a44:	35 38       	mov	r8,83
80015a46:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
80015a48:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a4c:	30 18       	mov	r8,1
80015a4e:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&acc_outputs.raw_data;
80015a52:	ec f9 01 60 	ld.w	r9,r6[352]
80015a56:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a5a:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015a5c:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a60:	30 69       	mov	r9,6
80015a62:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
80015a64:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a68:	ec f9 01 40 	ld.w	r9,r6[320]
80015a6c:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=2;
80015a6e:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a72:	30 29       	mov	r9,2
80015a74:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=400000;
80015a76:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a7a:	e6 69 1a 80 	mov	r9,400000
80015a7e:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80015a80:	ec fb 00 8c 	ld.w	r11,r6[140]
80015a84:	30 0c       	mov	r12,0
80015a86:	f0 16 01 18 	mcall	r6[1120]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015a8a:	ec f8 00 8c 	ld.w	r8,r6[140]
80015a8e:	f1 38 00 24 	ld.ub	r8,r8[36]
80015a92:	10 9b       	mov	r11,r8
80015a94:	30 0c       	mov	r12,0
80015a96:	f0 16 00 63 	mcall	r6[396]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
80015a9a:	ec f9 00 8c 	ld.w	r9,r6[140]
80015a9e:	30 28       	mov	r8,2
80015aa0:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015aa4:	ec f9 00 8c 	ld.w	r9,r6[140]
80015aa8:	33 28       	mov	r8,50
80015aaa:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.read_data=&acc_outputs;
80015aae:	ec f8 00 8c 	ld.w	r8,r6[140]
80015ab2:	ec f9 01 60 	ld.w	r9,r6[352]
80015ab6:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=6;
80015ab8:	ec f8 00 8c 	ld.w	r8,r6[140]
80015abc:	30 69       	mov	r9,6
80015abe:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80015ac0:	ec fb 00 8c 	ld.w	r11,r6[140]
80015ac4:	30 0c       	mov	r12,0
80015ac6:	f0 16 01 19 	mcall	r6[1124]
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015aca:	ec f8 00 8c 	ld.w	r8,r6[140]
80015ace:	f1 38 00 24 	ld.ub	r8,r8[36]
80015ad2:	10 9b       	mov	r11,r8
80015ad4:	30 0c       	mov	r12,0
80015ad6:	f0 16 00 63 	mcall	r6[396]
	/**/
}
80015ada:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015ade:	00 00       	add	r0,r0
80015ae0:	80 01       	ld.sh	r1,r0[0x0]
80015ae2:	58 a8       	cp.w	r8,10

80015ae4 <init_adxl345_slow>:

void init_adxl345_slow(void) {
80015ae4:	eb cd 40 c0 	pushm	r6-r7,lr
80015ae8:	1a 97       	mov	r7,sp
80015aea:	48 f6       	lddpc	r6,80015b24 <init_adxl345_slow+0x40>
80015aec:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ADXL_ALT_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015aee:	ec fb 09 04 	ld.w	r11,r6[2308]
80015af2:	fe 7c 38 00 	mov	r12,-51200
80015af6:	f0 16 00 73 	mcall	r6[460]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015afa:	30 08       	mov	r8,0
80015afc:	35 39       	mov	r9,83
80015afe:	30 2a       	mov	r10,2
80015b00:	ec fb 01 40 	ld.w	r11,r6[320]
80015b04:	fe 7c 38 00 	mov	r12,-51200
80015b08:	f0 16 00 36 	mcall	r6[216]
	twim_write(&AVR32_TWIM0, (uint8_t*)&data_configuration, 2, ADXL_ALT_SLAVE_ADDRESS, false);
80015b0c:	30 08       	mov	r8,0
80015b0e:	35 39       	mov	r9,83
80015b10:	30 2a       	mov	r10,2
80015b12:	ec fb 08 98 	ld.w	r11,r6[2200]
80015b16:	fe 7c 38 00 	mov	r12,-51200
80015b1a:	f0 16 00 36 	mcall	r6[216]
}
80015b1e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b22:	00 00       	add	r0,r0
80015b24:	80 01       	ld.sh	r1,r0[0x0]
80015b26:	59 70       	cp.w	r0,23

80015b28 <get_acc_data>:

acc_data* get_acc_data(void) {
80015b28:	eb cd 40 c0 	pushm	r6-r7,lr
80015b2c:	1a 97       	mov	r7,sp
80015b2e:	48 86       	lddpc	r6,80015b4c <get_acc_data+0x24>
80015b30:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
80015b32:	ec f8 00 8c 	ld.w	r8,r6[140]
80015b36:	f1 38 00 24 	ld.ub	r8,r8[36]
80015b3a:	10 9b       	mov	r11,r8
80015b3c:	30 0c       	mov	r12,0
80015b3e:	f0 16 00 63 	mcall	r6[396]
	return &acc_outputs;
80015b42:	ec f8 01 60 	ld.w	r8,r6[352]
}
80015b46:	10 9c       	mov	r12,r8
80015b48:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015b4c:	80 01       	ld.sh	r1,r0[0x0]
80015b4e:	59 b4       	cp.w	r4,27

80015b50 <get_acc_data_slow>:

acc_data* get_acc_data_slow(void) {
80015b50:	eb cd 40 c0 	pushm	r6-r7,lr
80015b54:	1a 97       	mov	r7,sp
80015b56:	20 1d       	sub	sp,4
80015b58:	4a 96       	lddpc	r6,80015bfc <get_acc_data_slow+0xac>
80015b5a:	1e 26       	rsub	r6,pc
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80015b5c:	ec f9 00 8c 	ld.w	r9,r6[140]
80015b60:	33 28       	mov	r8,50
80015b62:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
80015b66:	ec f8 00 8c 	ld.w	r8,r6[140]
80015b6a:	f0 cb ff f7 	sub	r11,r8,-9
80015b6e:	30 08       	mov	r8,0
80015b70:	35 39       	mov	r9,83
80015b72:	30 1a       	mov	r10,1
80015b74:	fe 7c 38 00 	mov	r12,-51200
80015b78:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
80015b7c:	30 08       	mov	r8,0
80015b7e:	35 39       	mov	r9,83
80015b80:	30 6a       	mov	r10,6
80015b82:	ec fb 01 60 	ld.w	r11,r6[352]
80015b86:	fe 7c 38 00 	mov	r12,-51200
80015b8a:	f0 16 00 62 	mcall	r6[392]
	
	for (i=0; i<3; i++) {
80015b8e:	30 08       	mov	r8,0
80015b90:	ef 48 ff fc 	st.w	r7[-4],r8
80015b94:	c2 98       	rjmp	80015be6 <get_acc_data_slow+0x96>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
80015b96:	ee fb ff fc 	ld.w	r11,r7[-4]
80015b9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015b9e:	a1 78       	lsl	r8,0x1
80015ba0:	ec f9 01 60 	ld.w	r9,r6[352]
80015ba4:	f2 08 07 08 	ld.ub	r8,r9[r8]
80015ba8:	5c 58       	castu.b	r8
80015baa:	10 99       	mov	r9,r8
80015bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bb0:	a1 78       	lsl	r8,0x1
80015bb2:	2f f8       	sub	r8,-1
80015bb4:	ec fa 01 60 	ld.w	r10,r6[352]
80015bb8:	f4 08 07 08 	ld.ub	r8,r10[r8]
80015bbc:	5c 58       	castu.b	r8
80015bbe:	a9 68       	lsl	r8,0x8
80015bc0:	5c 88       	casts.h	r8
80015bc2:	f2 08 00 08 	add	r8,r9,r8
80015bc6:	5c 88       	casts.h	r8
80015bc8:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80015bcc:	ec fa 01 60 	ld.w	r10,r6[352]
80015bd0:	f6 c8 ff fe 	sub	r8,r11,-2
80015bd4:	a1 78       	lsl	r8,0x1
80015bd6:	f4 08 00 08 	add	r8,r10,r8
80015bda:	b0 19       	st.h	r8[0x2],r9
	int i;
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ADXL_ALT_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&acc_outputs, 6, ADXL_ALT_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
80015bdc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015be0:	2f f8       	sub	r8,-1
80015be2:	ef 48 ff fc 	st.w	r7[-4],r8
80015be6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015bea:	58 28       	cp.w	r8,2
80015bec:	fe 9a ff d5 	brle	80015b96 <get_acc_data_slow+0x46>
		acc_outputs.axes[i]=(int16_t)(acc_outputs.raw_data[2*i])+(int16_t)(acc_outputs.raw_data[2*i+1]<<8);
	}			
	return &acc_outputs;
80015bf0:	ec f8 01 60 	ld.w	r8,r6[352]
80015bf4:	10 9c       	mov	r12,r8
80015bf6:	2f fd       	sub	sp,-4
80015bf8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015bfc:	80 01       	ld.sh	r1,r0[0x0]
80015bfe:	59 de       	cp.w	lr,29

80015c00 <f_abs>:

	}
	return result;
}

static inline float f_abs(const float a){
80015c00:	eb cd 40 80 	pushm	r7,lr
80015c04:	1a 97       	mov	r7,sp
80015c06:	20 1d       	sub	sp,4
80015c08:	ef 4c ff fc 	st.w	r7[-4],r12
	if (a >= 0.0)
80015c0c:	30 18       	mov	r8,1
80015c0e:	ee fa ff fc 	ld.w	r10,r7[-4]
80015c12:	30 09       	mov	r9,0
80015c14:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c18:	e0 8c 00 03 	brvs	80015c1e <f_abs+0x1e>
80015c1c:	c0 24       	brge	80015c20 <f_abs+0x20>
80015c1e:	30 08       	mov	r8,0
80015c20:	5c 58       	castu.b	r8
80015c22:	c0 40       	breq	80015c2a <f_abs+0x2a>
	{
		return a;
80015c24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c28:	c0 58       	rjmp	80015c32 <f_abs+0x32>
	}else{
		return -a;
80015c2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015c2e:	ee 18 80 00 	eorh	r8,0x8000
	}
}
80015c32:	10 9c       	mov	r12,r8
80015c34:	2f fd       	sub	sp,-4
80015c36:	e3 cd 80 80 	ldm	sp++,r7,pc

80015c3a <median_filter_3x>:
static float inline center_window_4(float x) {
	return 1.0/(1+SQR(SQR(x)));
}


static float inline median_filter_3x(float a, float b, float c) {
80015c3a:	eb cd 40 80 	pushm	r7,lr
80015c3e:	1a 97       	mov	r7,sp
80015c40:	20 4d       	sub	sp,16
80015c42:	ef 4c ff f8 	st.w	r7[-8],r12
80015c46:	ef 4b ff f4 	st.w	r7[-12],r11
80015c4a:	ef 4a ff f0 	st.w	r7[-16],r10
	float middle;
	if ((a <= b) && (a <= c)) {
80015c4e:	30 18       	mov	r8,1
80015c50:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c54:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015c58:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c5c:	e0 8c 00 04 	brvs	80015c64 <median_filter_3x+0x2a>
80015c60:	e0 8a 00 03 	brle	80015c66 <median_filter_3x+0x2c>
80015c64:	30 08       	mov	r8,0
80015c66:	5c 58       	castu.b	r8
80015c68:	c2 50       	breq	80015cb2 <median_filter_3x+0x78>
80015c6a:	30 18       	mov	r8,1
80015c6c:	ee fa ff f8 	ld.w	r10,r7[-8]
80015c70:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015c74:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c78:	e0 8c 00 04 	brvs	80015c80 <median_filter_3x+0x46>
80015c7c:	e0 8a 00 03 	brle	80015c82 <median_filter_3x+0x48>
80015c80:	30 08       	mov	r8,0
80015c82:	5c 58       	castu.b	r8
80015c84:	c1 70       	breq	80015cb2 <median_filter_3x+0x78>
		middle = (b <= c) ? b : c;
80015c86:	30 18       	mov	r8,1
80015c88:	ee fa ff f4 	ld.w	r10,r7[-12]
80015c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015c90:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015c94:	e0 8c 00 04 	brvs	80015c9c <median_filter_3x+0x62>
80015c98:	e0 8a 00 03 	brle	80015c9e <median_filter_3x+0x64>
80015c9c:	30 08       	mov	r8,0
80015c9e:	5c 58       	castu.b	r8
80015ca0:	c0 40       	breq	80015ca8 <median_filter_3x+0x6e>
80015ca2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015ca6:	c0 38       	rjmp	80015cac <median_filter_3x+0x72>
80015ca8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015cac:	ef 48 ff fc 	st.w	r7[-4],r8
}


static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
80015cb0:	c4 88       	rjmp	80015d40 <median_filter_3x+0x106>
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015cb2:	30 18       	mov	r8,1
80015cb4:	ee fa ff f4 	ld.w	r10,r7[-12]
80015cb8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80015cbc:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cc0:	e0 8c 00 04 	brvs	80015cc8 <median_filter_3x+0x8e>
80015cc4:	e0 8a 00 03 	brle	80015cca <median_filter_3x+0x90>
80015cc8:	30 08       	mov	r8,0
80015cca:	5c 58       	castu.b	r8
80015ccc:	c2 50       	breq	80015d16 <median_filter_3x+0xdc>
80015cce:	30 18       	mov	r8,1
80015cd0:	ee fa ff f4 	ld.w	r10,r7[-12]
80015cd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015cd8:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cdc:	e0 8c 00 04 	brvs	80015ce4 <median_filter_3x+0xaa>
80015ce0:	e0 8a 00 03 	brle	80015ce6 <median_filter_3x+0xac>
80015ce4:	30 08       	mov	r8,0
80015ce6:	5c 58       	castu.b	r8
80015ce8:	c1 70       	breq	80015d16 <median_filter_3x+0xdc>
	{
		middle = (a <= c) ? a : c;
80015cea:	30 18       	mov	r8,1
80015cec:	ee fa ff f8 	ld.w	r10,r7[-8]
80015cf0:	ee f9 ff f0 	ld.w	r9,r7[-16]
80015cf4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015cf8:	e0 8c 00 04 	brvs	80015d00 <median_filter_3x+0xc6>
80015cfc:	e0 8a 00 03 	brle	80015d02 <median_filter_3x+0xc8>
80015d00:	30 08       	mov	r8,0
80015d02:	5c 58       	castu.b	r8
80015d04:	c0 40       	breq	80015d0c <median_filter_3x+0xd2>
80015d06:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015d0a:	c0 38       	rjmp	80015d10 <median_filter_3x+0xd6>
80015d0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80015d10:	ef 48 ff fc 	st.w	r7[-4],r8
static float inline median_filter_3x(float a, float b, float c) {
	float middle;
	if ((a <= b) && (a <= c)) {
		middle = (b <= c) ? b : c;
	}
	else if ((b <= a) && (b <= c))
80015d14:	c1 68       	rjmp	80015d40 <median_filter_3x+0x106>
	{
		middle = (a <= c) ? a : c;
	} else {
	   middle = (a <= b) ? a : b;
80015d16:	30 18       	mov	r8,1
80015d18:	ee fa ff f8 	ld.w	r10,r7[-8]
80015d1c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80015d20:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80015d24:	e0 8c 00 04 	brvs	80015d2c <median_filter_3x+0xf2>
80015d28:	e0 8a 00 03 	brle	80015d2e <median_filter_3x+0xf4>
80015d2c:	30 08       	mov	r8,0
80015d2e:	5c 58       	castu.b	r8
80015d30:	c0 40       	breq	80015d38 <median_filter_3x+0xfe>
80015d32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80015d36:	c0 38       	rjmp	80015d3c <median_filter_3x+0x102>
80015d38:	ee f8 ff f4 	ld.w	r8,r7[-12]
80015d3c:	ef 48 ff fc 	st.w	r7[-4],r8
	}
	return middle;
80015d40:	ee f8 ff fc 	ld.w	r8,r7[-4]

}
80015d44:	10 9c       	mov	r12,r8
80015d46:	2f cd       	sub	sp,-16
80015d48:	e3 cd 80 80 	ldm	sp++,r7,pc

80015d4c <bmp085_read_int>:
#include <stdbool.h>
#include "print_util.h"

pressure_data pressure_outputs;

int16_t bmp085_read_int(unsigned char address) {
80015d4c:	eb cd 40 c0 	pushm	r6-r7,lr
80015d50:	1a 97       	mov	r7,sp
80015d52:	20 2d       	sub	sp,8
80015d54:	48 f6       	lddpc	r6,80015d90 <bmp085_read_int+0x44>
80015d56:	1e 26       	rsub	r6,pc
80015d58:	18 98       	mov	r8,r12
80015d5a:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t result;
	twim_write(&AVR32_TWIM0, (uint8_t*) &address, 1, BMP085_SLAVE_ADDRESS, false);
80015d5e:	ee cb 00 08 	sub	r11,r7,8
80015d62:	30 08       	mov	r8,0
80015d64:	37 79       	mov	r9,119
80015d66:	30 1a       	mov	r10,1
80015d68:	fe 7c 38 00 	mov	r12,-51200
80015d6c:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(result), 2, BMP085_SLAVE_ADDRESS, false);
80015d70:	ee cb 00 02 	sub	r11,r7,2
80015d74:	30 08       	mov	r8,0
80015d76:	37 79       	mov	r9,119
80015d78:	30 2a       	mov	r10,2
80015d7a:	fe 7c 38 00 	mov	r12,-51200
80015d7e:	f0 16 00 62 	mcall	r6[392]
	return result;
80015d82:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80015d86:	10 9c       	mov	r12,r8
80015d88:	2f ed       	sub	sp,-8
80015d8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015d8e:	00 00       	add	r0,r0
80015d90:	80 01       	ld.sh	r1,r0[0x0]
80015d92:	5b da       	cp.w	r10,-3

80015d94 <init_bmp085>:

void init_bmp085(){
80015d94:	eb cd 40 c0 	pushm	r6-r7,lr
80015d98:	1a 97       	mov	r7,sp
80015d9a:	20 1d       	sub	sp,4
80015d9c:	49 36       	lddpc	r6,80015de8 <init_bmp085+0x54>
80015d9e:	1e 26       	rsub	r6,pc
	int i;
	pressure_outputs.altitude_offset=0.0;
80015da0:	ec f8 00 48 	ld.w	r8,r6[72]
80015da4:	30 09       	mov	r9,0
80015da6:	91 89       	st.w	r8[0x20],r9
	for (i=0; i<3; i++) pressure_outputs.last_altitudes[i]=0.0;
80015da8:	30 08       	mov	r8,0
80015daa:	ef 48 ff fc 	st.w	r7[-4],r8
80015dae:	c0 e8       	rjmp	80015dca <init_bmp085+0x36>
80015db0:	ee f9 ff fc 	ld.w	r9,r7[-4]
80015db4:	ec f8 00 48 	ld.w	r8,r6[72]
80015db8:	2f c9       	sub	r9,-4
80015dba:	30 0a       	mov	r10,0
80015dbc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
80015dc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015dc4:	2f f8       	sub	r8,-1
80015dc6:	ef 48 ff fc 	st.w	r7[-4],r8
80015dca:	ee f8 ff fc 	ld.w	r8,r7[-4]
80015dce:	58 28       	cp.w	r8,2
80015dd0:	fe 9a ff f0 	brle	80015db0 <init_bmp085+0x1c>
	pressure_outputs.vario_vz=0.0;
80015dd4:	ec f8 00 48 	ld.w	r8,r6[72]
80015dd8:	30 09       	mov	r9,0
80015dda:	91 99       	st.w	r8[0x24],r9
	init_bmp085_slow();
80015ddc:	f0 16 01 fa 	mcall	r6[2024]
}
80015de0:	2f fd       	sub	sp,-4
80015de2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015de6:	00 00       	add	r0,r0
80015de8:	80 01       	ld.sh	r1,r0[0x0]
80015dea:	5c 22       	cpc	r2
80015dec:	42 4d       	lddsp	sp,sp[0x90]
80015dee:	50 38       	stdsp	sp[0xc],r8
80015df0:	35 2f       	mov	pc,82
80015df2:	31 38       	mov	r8,19
80015df4:	30 20       	mov	r0,2
80015df6:	70 72       	ld.w	r2,r8[0x1c]
80015df8:	65 73       	ld.w	r3,r2[0x5c]
80015dfa:	73 75       	ld.w	r5,r9[0x5c]
80015dfc:	72 65       	ld.w	r5,r9[0x18]
80015dfe:	20 73       	sub	r3,7
80015e00:	65 6e       	ld.w	lr,r2[0x58]
80015e02:	73 6f       	ld.w	pc,r9[0x58]
80015e04:	72 20       	ld.w	r0,r9[0x8]
80015e06:	66 6f       	ld.w	pc,r3[0x18]
80015e08:	75 6e       	ld.w	lr,r10[0x58]
80015e0a:	64 20       	ld.w	r0,r2[0x8]
80015e0c:	28 30       	sub	r0,-125
80015e0e:	78 37       	ld.w	r7,r12[0xc]
80015e10:	37 29       	mov	r9,114
80015e12:	0a 00       	add	r0,r5
80015e14:	42 4d       	lddsp	sp,sp[0x90]
80015e16:	50 38       	stdsp	sp[0xc],r8
80015e18:	35 2f       	mov	pc,82
80015e1a:	31 38       	mov	r8,19
80015e1c:	30 20       	mov	r0,2
80015e1e:	70 72       	ld.w	r2,r8[0x1c]
80015e20:	65 73       	ld.w	r3,r2[0x5c]
80015e22:	73 75       	ld.w	r5,r9[0x5c]
80015e24:	72 65       	ld.w	r5,r9[0x18]
80015e26:	20 73       	sub	r3,7
80015e28:	65 6e       	ld.w	lr,r2[0x58]
80015e2a:	73 6f       	ld.w	pc,r9[0x58]
80015e2c:	72 20       	ld.w	r0,r9[0x8]
80015e2e:	6e 6f       	ld.w	pc,r7[0x18]
80015e30:	74 20       	ld.w	r0,r10[0x8]
80015e32:	72 65       	ld.w	r5,r9[0x18]
80015e34:	73 70       	ld.w	r0,r9[0x5c]
80015e36:	6f 6e       	ld.w	lr,r7[0x58]
80015e38:	64 69       	ld.w	r9,r2[0x18]
80015e3a:	6e 67       	ld.w	r7,r7[0x18]
80015e3c:	20 28       	sub	r8,2
80015e3e:	30 78       	mov	r8,7
80015e40:	37 37       	mov	r7,115
80015e42:	29 0a       	sub	r10,-112
	...

80015e46 <init_bmp085_slow>:

  int16_t ac1, ac2, ac3, b1, b2, mb, mc, md;
  uint16_t ac4, ac5, ac6;


void init_bmp085_slow(){
80015e46:	eb cd 40 c0 	pushm	r6-r7,lr
80015e4a:	1a 97       	mov	r7,sp
80015e4c:	4d 36       	lddpc	r6,80015f98 <init_bmp085_slow+0x152>
80015e4e:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = BMP085_SLAVE_ADDRESS,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
80015e50:	ec fb 09 00 	ld.w	r11,r6[2304]
80015e54:	fe 7c 38 00 	mov	r12,-51200
80015e58:	f0 16 00 73 	mcall	r6[460]

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
80015e5c:	37 7b       	mov	r11,119
80015e5e:	fe 7c 38 00 	mov	r12,-51200
80015e62:	f0 16 01 0f 	mcall	r6[1084]
80015e66:	18 98       	mov	r8,r12
80015e68:	58 08       	cp.w	r8,0
80015e6a:	e0 81 00 8f 	brne	80015f88 <init_bmp085_slow+0x142>
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
80015e6e:	fe cc 00 82 	sub	r12,pc,130
80015e72:	f0 16 00 01 	mcall	r6[4]
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
		return;
	}
	ac1 = 408;
80015e76:	ec f9 03 54 	ld.w	r9,r6[852]
80015e7a:	e0 68 01 98 	mov	r8,408
80015e7e:	b2 08       	st.h	r9[0x0],r8
	ac2 = -72;
80015e80:	ec f9 03 2c 	ld.w	r9,r6[812]
80015e84:	3b 88       	mov	r8,-72
80015e86:	b2 08       	st.h	r9[0x0],r8
	ac3 = -14383;
80015e88:	ec f9 02 b0 	ld.w	r9,r6[688]
80015e8c:	fe 78 c7 d1 	mov	r8,-14383
80015e90:	b2 08       	st.h	r9[0x0],r8
	ac4 = 32741;
80015e92:	ec f9 03 10 	ld.w	r9,r6[784]
80015e96:	e0 68 7f e5 	mov	r8,32741
80015e9a:	b2 08       	st.h	r9[0x0],r8
	ac5 = 32757;
80015e9c:	ec f9 03 30 	ld.w	r9,r6[816]
80015ea0:	e0 68 7f f5 	mov	r8,32757
80015ea4:	b2 08       	st.h	r9[0x0],r8
	ac6 = 23153;
80015ea6:	ec f9 03 40 	ld.w	r9,r6[832]
80015eaa:	e0 68 5a 71 	mov	r8,23153
80015eae:	b2 08       	st.h	r9[0x0],r8
	mc = -8711;
80015eb0:	ec f9 02 e8 	ld.w	r9,r6[744]
80015eb4:	fe 78 dd f9 	mov	r8,-8711
80015eb8:	b2 08       	st.h	r9[0x0],r8
	md = 2868;
80015eba:	ec f9 03 1c 	ld.w	r9,r6[796]
80015ebe:	e0 68 0b 34 	mov	r8,2868
80015ec2:	b2 08       	st.h	r9[0x0],r8
	b1 = 6190;
80015ec4:	ec f9 03 48 	ld.w	r9,r6[840]
80015ec8:	e0 68 18 2e 	mov	r8,6190
80015ecc:	b2 08       	st.h	r9[0x0],r8
	b2 = 4;
80015ece:	ec f9 03 68 	ld.w	r9,r6[872]
80015ed2:	30 48       	mov	r8,4
80015ed4:	b2 08       	st.h	r9[0x0],r8

	
	ac1=bmp085_read_int(0xAA);
80015ed6:	e0 6c 00 aa 	mov	r12,170
80015eda:	f0 16 00 46 	mcall	r6[280]
80015ede:	18 98       	mov	r8,r12
80015ee0:	ec f9 03 54 	ld.w	r9,r6[852]
80015ee4:	b2 08       	st.h	r9[0x0],r8
	ac2=bmp085_read_int(0xAC);
80015ee6:	e0 6c 00 ac 	mov	r12,172
80015eea:	f0 16 00 46 	mcall	r6[280]
80015eee:	18 98       	mov	r8,r12
80015ef0:	ec f9 03 2c 	ld.w	r9,r6[812]
80015ef4:	b2 08       	st.h	r9[0x0],r8
	ac3=bmp085_read_int(0xAE);
80015ef6:	e0 6c 00 ae 	mov	r12,174
80015efa:	f0 16 00 46 	mcall	r6[280]
80015efe:	18 98       	mov	r8,r12
80015f00:	ec f9 02 b0 	ld.w	r9,r6[688]
80015f04:	b2 08       	st.h	r9[0x0],r8
	ac4=bmp085_read_int(0xB0);
80015f06:	e0 6c 00 b0 	mov	r12,176
80015f0a:	f0 16 00 46 	mcall	r6[280]
80015f0e:	18 98       	mov	r8,r12
80015f10:	ec f9 03 10 	ld.w	r9,r6[784]
80015f14:	b2 08       	st.h	r9[0x0],r8
	ac5=bmp085_read_int(0xB2);
80015f16:	e0 6c 00 b2 	mov	r12,178
80015f1a:	f0 16 00 46 	mcall	r6[280]
80015f1e:	18 98       	mov	r8,r12
80015f20:	ec f9 03 30 	ld.w	r9,r6[816]
80015f24:	b2 08       	st.h	r9[0x0],r8
	ac6=bmp085_read_int(0xB4);
80015f26:	e0 6c 00 b4 	mov	r12,180
80015f2a:	f0 16 00 46 	mcall	r6[280]
80015f2e:	18 98       	mov	r8,r12
80015f30:	ec f9 03 40 	ld.w	r9,r6[832]
80015f34:	b2 08       	st.h	r9[0x0],r8
	b1=bmp085_read_int(0xB6);
80015f36:	e0 6c 00 b6 	mov	r12,182
80015f3a:	f0 16 00 46 	mcall	r6[280]
80015f3e:	18 98       	mov	r8,r12
80015f40:	ec f9 03 48 	ld.w	r9,r6[840]
80015f44:	b2 08       	st.h	r9[0x0],r8
	b2=bmp085_read_int(0xB8);
80015f46:	e0 6c 00 b8 	mov	r12,184
80015f4a:	f0 16 00 46 	mcall	r6[280]
80015f4e:	18 98       	mov	r8,r12
80015f50:	ec f9 03 68 	ld.w	r9,r6[872]
80015f54:	b2 08       	st.h	r9[0x0],r8
	mb=bmp085_read_int(0xBA);
80015f56:	e0 6c 00 ba 	mov	r12,186
80015f5a:	f0 16 00 46 	mcall	r6[280]
80015f5e:	18 98       	mov	r8,r12
80015f60:	ec f9 08 3c 	ld.w	r9,r6[2108]
80015f64:	b2 08       	st.h	r9[0x0],r8
	mc=bmp085_read_int(0xBC);
80015f66:	e0 6c 00 bc 	mov	r12,188
80015f6a:	f0 16 00 46 	mcall	r6[280]
80015f6e:	18 98       	mov	r8,r12
80015f70:	ec f9 02 e8 	ld.w	r9,r6[744]
80015f74:	b2 08       	st.h	r9[0x0],r8
	md=bmp085_read_int(0xBE);
80015f76:	e0 6c 00 be 	mov	r12,190
80015f7a:	f0 16 00 46 	mcall	r6[280]
80015f7e:	18 98       	mov	r8,r12
80015f80:	ec f9 03 1c 	ld.w	r9,r6[796]
80015f84:	b2 08       	st.h	r9[0x0],r8
80015f86:	c0 68       	rjmp	80015f92 <init_bmp085_slow+0x14c>
	twim_master_init(&AVR32_TWIM0, &twi_opt);

	if (twim_probe(&AVR32_TWIM0, BMP085_SLAVE_ADDRESS)==STATUS_OK) {
		dbg_print("BMP85/180 pressure sensor found (0x77)\n");
	} else {
		dbg_print("BMP85/180 pressure sensor not responding (0x77)\n");
80015f88:	fe cc 01 74 	sub	r12,pc,372
80015f8c:	f0 16 00 01 	mcall	r6[4]
		return;
80015f90:	d7 03       	nop
	mb=bmp085_read_int(0xBA);
	mc=bmp085_read_int(0xBC);
	md=bmp085_read_int(0xBE);
	
	
}
80015f92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80015f96:	00 00       	add	r0,r0
80015f98:	80 01       	ld.sh	r1,r0[0x0]
80015f9a:	5c d2       	com	r2

80015f9c <get_pressure_data_slow>:

 


pressure_data* get_pressure_data_slow(float offset) {
80015f9c:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
80015fa0:	1a 97       	mov	r7,sp
80015fa2:	21 4d       	sub	sp,80
80015fa4:	fe f6 06 2c 	ld.w	r6,pc[1580]
80015fa8:	1e 26       	rsub	r6,pc
80015faa:	ef 4c ff b0 	st.w	r7[-80],r12
		int32_t UT, UP, B3, B5, B6, X1, X2, X3, p;
		uint32_t B4, B7;
			
		uint8_t start_address;
		
		uint8_t start_command_temp []={BMP085_CONTROL, BMP085_READTEMPCMD};
80015fae:	ec f8 08 fc 	ld.w	r8,r6[2300]
80015fb2:	90 08       	ld.sh	r8,r8[0x0]
80015fb4:	ef 58 ff b8 	st.h	r7[-72],r8
		uint8_t start_command_pressure []={BMP085_CONTROL, BMP085_READPRESSURECMD+ (BMP085_OVERSAMPLING_MODE << 6)};
80015fb8:	ec f8 08 f8 	ld.w	r8,r6[2296]
80015fbc:	90 08       	ld.sh	r8,r8[0x0]
80015fbe:	ef 58 ff b4 	st.h	r7[-76],r8
		int32_t sealevelPressure=101325;
80015fc2:	e0 78 8b cd 	mov	r8,101325
80015fc6:	ef 48 ff f4 	st.w	r7[-12],r8
		float dt;
		// calibration: use datasheet numbers!

		switch (pressure_outputs.state) {
80015fca:	ec f8 00 48 	ld.w	r8,r6[72]
80015fce:	70 c8       	ld.w	r8,r8[0x30]
80015fd0:	58 18       	cp.w	r8,1
80015fd2:	c1 50       	breq	80015ffc <get_pressure_data_slow+0x60>
80015fd4:	c0 53       	brcs	80015fde <get_pressure_data_slow+0x42>
80015fd6:	58 28       	cp.w	r8,2
80015fd8:	c3 80       	breq	80016048 <get_pressure_data_slow+0xac>
80015fda:	e0 8f 02 e9 	bral	800165ac <get_pressure_data_slow+0x610>
		case IDLE:
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_temp, 2, BMP085_SLAVE_ADDRESS, false);
80015fde:	ee cb 00 48 	sub	r11,r7,72
80015fe2:	30 08       	mov	r8,0
80015fe4:	37 79       	mov	r9,119
80015fe6:	30 2a       	mov	r10,2
80015fe8:	fe 7c 38 00 	mov	r12,-51200
80015fec:	f0 16 00 36 	mcall	r6[216]
		    //delay_ms(7);
			pressure_outputs.state=GET_TEMP;
80015ff0:	ec f8 00 48 	ld.w	r8,r6[72]
80015ff4:	30 19       	mov	r9,1
80015ff6:	91 c9       	st.w	r8[0x30],r9
			break;
80015ff8:	e0 8f 02 da 	bral	800165ac <get_pressure_data_slow+0x610>
		case GET_TEMP:
			start_address=BMP085_TEMPDATA;
80015ffc:	3f 68       	mov	r8,-10
80015ffe:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
80016002:	ee cb 00 45 	sub	r11,r7,69
80016006:	30 08       	mov	r8,0
80016008:	37 79       	mov	r9,119
8001600a:	30 1a       	mov	r10,1
8001600c:	fe 7c 38 00 	mov	r12,-51200
80016010:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_temperature), 2, BMP085_SLAVE_ADDRESS, false);
80016014:	ec f8 00 48 	ld.w	r8,r6[72]
80016018:	f0 cb ff fd 	sub	r11,r8,-3
8001601c:	30 08       	mov	r8,0
8001601e:	37 79       	mov	r9,119
80016020:	30 2a       	mov	r10,2
80016022:	fe 7c 38 00 	mov	r12,-51200
80016026:	f0 16 00 62 	mcall	r6[392]
		
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_command_pressure, 2, BMP085_SLAVE_ADDRESS, false);
8001602a:	ee cb 00 4c 	sub	r11,r7,76
8001602e:	30 08       	mov	r8,0
80016030:	37 79       	mov	r9,119
80016032:	30 2a       	mov	r10,2
80016034:	fe 7c 38 00 	mov	r12,-51200
80016038:	f0 16 00 36 	mcall	r6[216]
			pressure_outputs.state=GET_PRESSURE;
8001603c:	ec f8 00 48 	ld.w	r8,r6[72]
80016040:	30 29       	mov	r9,2
80016042:	91 c9       	st.w	r8[0x30],r9
			//delay_ms(15);
			break;
80016044:	e0 8f 02 b4 	bral	800165ac <get_pressure_data_slow+0x610>
		case GET_PRESSURE:
			start_address=BMP085_PRESSUREDATA;
80016048:	3f 68       	mov	r8,-10
8001604a:	ef 68 ff bb 	st.b	r7[-69],r8
			twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, BMP085_SLAVE_ADDRESS, false);
8001604e:	ee cb 00 45 	sub	r11,r7,69
80016052:	30 08       	mov	r8,0
80016054:	37 79       	mov	r9,119
80016056:	30 1a       	mov	r10,1
80016058:	fe 7c 38 00 	mov	r12,-51200
8001605c:	f0 16 00 36 	mcall	r6[216]
			twim_read(&AVR32_TWIM0, (uint8_t*)&(pressure_outputs.raw_pressure), 3, BMP085_SLAVE_ADDRESS, false);
80016060:	30 08       	mov	r8,0
80016062:	37 79       	mov	r9,119
80016064:	30 3a       	mov	r10,3
80016066:	ec fb 00 48 	ld.w	r11,r6[72]
8001606a:	fe 7c 38 00 	mov	r12,-51200
8001606e:	f0 16 00 62 	mcall	r6[392]
		
			UP= ((uint32_t)pressure_outputs.raw_pressure[0]<<16 |(uint32_t)pressure_outputs.raw_pressure[1]<<8 | (uint32_t)pressure_outputs.raw_pressure[2]) >> (8-BMP085_OVERSAMPLING_MODE);
80016072:	ec f8 00 48 	ld.w	r8,r6[72]
80016076:	11 88       	ld.ub	r8,r8[0x0]
80016078:	f0 09 15 10 	lsl	r9,r8,0x10
8001607c:	ec f8 00 48 	ld.w	r8,r6[72]
80016080:	11 98       	ld.ub	r8,r8[0x1]
80016082:	a9 68       	lsl	r8,0x8
80016084:	10 49       	or	r9,r8
80016086:	ec f8 00 48 	ld.w	r8,r6[72]
8001608a:	11 a8       	ld.ub	r8,r8[0x2]
8001608c:	f3 e8 10 08 	or	r8,r9,r8
80016090:	a7 88       	lsr	r8,0x6
80016092:	ef 48 ff cc 	st.w	r7[-52],r8
 
			UT=pressure_outputs.raw_temperature[0]<<8 |pressure_outputs.raw_temperature[1];
80016096:	ec f8 00 48 	ld.w	r8,r6[72]
8001609a:	11 b8       	ld.ub	r8,r8[0x3]
8001609c:	f0 09 15 08 	lsl	r9,r8,0x8
800160a0:	ec f8 00 48 	ld.w	r8,r6[72]
800160a4:	11 c8       	ld.ub	r8,r8[0x4]
800160a6:	f3 e8 10 08 	or	r8,r9,r8
800160aa:	ef 48 ff c8 	st.w	r7[-56],r8
			// step 1
			X1 = (UT - (int32_t)ac6) * ((int32_t)ac5) / pow(2,15);
800160ae:	ec f8 03 40 	ld.w	r8,r6[832]
800160b2:	90 08       	ld.sh	r8,r8[0x0]
800160b4:	5c 78       	castu.h	r8
800160b6:	ee f9 ff c8 	ld.w	r9,r7[-56]
800160ba:	10 19       	sub	r9,r8
800160bc:	ec f8 03 30 	ld.w	r8,r6[816]
800160c0:	90 08       	ld.sh	r8,r8[0x0]
800160c2:	5c 78       	castu.h	r8
800160c4:	f2 08 02 48 	mul	r8,r9,r8
800160c8:	10 9c       	mov	r12,r8
800160ca:	f0 16 00 1a 	mcall	r6[104]
800160ce:	30 08       	mov	r8,0
800160d0:	fc 19 40 e0 	movh	r9,0x40e0
800160d4:	f0 16 00 0c 	mcall	r6[48]
800160d8:	14 98       	mov	r8,r10
800160da:	16 99       	mov	r9,r11
800160dc:	10 9a       	mov	r10,r8
800160de:	12 9b       	mov	r11,r9
800160e0:	f0 16 00 14 	mcall	r6[80]
800160e4:	18 98       	mov	r8,r12
800160e6:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)mc * pow(2,11)) / (X1+(int32_t)md);
800160ea:	ec f8 02 e8 	ld.w	r8,r6[744]
800160ee:	90 08       	ld.sh	r8,r8[0x0]
800160f0:	10 9c       	mov	r12,r8
800160f2:	f0 16 00 1a 	mcall	r6[104]
800160f6:	30 08       	mov	r8,0
800160f8:	fc 19 40 a0 	movh	r9,0x40a0
800160fc:	f0 16 00 03 	mcall	r6[12]
80016100:	14 98       	mov	r8,r10
80016102:	16 99       	mov	r9,r11
80016104:	10 92       	mov	r2,r8
80016106:	12 93       	mov	r3,r9
80016108:	ec f8 03 1c 	ld.w	r8,r6[796]
8001610c:	90 08       	ld.sh	r8,r8[0x0]
8001610e:	10 99       	mov	r9,r8
80016110:	ee f8 ff dc 	ld.w	r8,r7[-36]
80016114:	f2 08 00 08 	add	r8,r9,r8
80016118:	10 9c       	mov	r12,r8
8001611a:	f0 16 00 1a 	mcall	r6[104]
8001611e:	14 98       	mov	r8,r10
80016120:	16 99       	mov	r9,r11
80016122:	04 9a       	mov	r10,r2
80016124:	06 9b       	mov	r11,r3
80016126:	f0 16 00 0c 	mcall	r6[48]
8001612a:	14 98       	mov	r8,r10
8001612c:	16 99       	mov	r9,r11
8001612e:	10 9a       	mov	r10,r8
80016130:	12 9b       	mov	r11,r9
80016132:	f0 16 00 14 	mcall	r6[80]
80016136:	18 98       	mov	r8,r12
80016138:	ef 48 ff e0 	st.w	r7[-32],r8
			B5 = X1 + X2;
8001613c:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016140:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016144:	f2 08 00 08 	add	r8,r9,r8
80016148:	ef 48 ff d4 	st.w	r7[-44],r8
			pressure_outputs.temperature = (B5+8)/pow(2,4);
8001614c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016150:	2f 88       	sub	r8,-8
80016152:	10 9c       	mov	r12,r8
80016154:	f0 16 00 1a 	mcall	r6[104]
80016158:	30 08       	mov	r8,0
8001615a:	fc 19 40 30 	movh	r9,0x4030
8001615e:	f0 16 00 0c 	mcall	r6[48]
80016162:	14 98       	mov	r8,r10
80016164:	16 99       	mov	r9,r11
80016166:	10 9a       	mov	r10,r8
80016168:	12 9b       	mov	r11,r9
8001616a:	f0 16 00 08 	mcall	r6[32]
8001616e:	18 99       	mov	r9,r12
80016170:	ec f8 00 48 	ld.w	r8,r6[72]
80016174:	91 39       	st.w	r8[0xc],r9
			pressure_outputs.temperature /= 10;
80016176:	ec f8 00 48 	ld.w	r8,r6[72]
8001617a:	70 38       	ld.w	r8,r8[0xc]
8001617c:	fc 1b 41 20 	movh	r11,0x4120
80016180:	10 9c       	mov	r12,r8
80016182:	f0 16 00 0a 	mcall	r6[40]
80016186:	18 98       	mov	r8,r12
80016188:	10 99       	mov	r9,r8
8001618a:	ec f8 00 48 	ld.w	r8,r6[72]
8001618e:	91 39       	st.w	r8[0xc],r9
	
			// do pressure calcs
			B6 = B5 - 4000;
80016190:	ee f8 ff d4 	ld.w	r8,r7[-44]
80016194:	f0 c8 0f a0 	sub	r8,r8,4000
80016198:	ef 48 ff d8 	st.w	r7[-40],r8
			X1 = ((int32_t)b2 * ( (B6 * B6)>>12 )) >> 11;
8001619c:	ec f8 03 68 	ld.w	r8,r6[872]
800161a0:	90 08       	ld.sh	r8,r8[0x0]
800161a2:	10 99       	mov	r9,r8
800161a4:	ee fa ff d8 	ld.w	r10,r7[-40]
800161a8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800161ac:	f4 08 02 48 	mul	r8,r10,r8
800161b0:	ad 48       	asr	r8,0xc
800161b2:	f2 08 02 48 	mul	r8,r9,r8
800161b6:	ab 58       	asr	r8,0xb
800161b8:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)ac2 * B6) >> 11;
800161bc:	ec f8 03 2c 	ld.w	r8,r6[812]
800161c0:	90 08       	ld.sh	r8,r8[0x0]
800161c2:	10 99       	mov	r9,r8
800161c4:	ee f8 ff d8 	ld.w	r8,r7[-40]
800161c8:	f2 08 02 48 	mul	r8,r9,r8
800161cc:	ab 58       	asr	r8,0xb
800161ce:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = X1 + X2;
800161d2:	ee f9 ff dc 	ld.w	r9,r7[-36]
800161d6:	ee f8 ff e0 	ld.w	r8,r7[-32]
800161da:	f2 08 00 08 	add	r8,r9,r8
800161de:	ef 48 ff e4 	st.w	r7[-28],r8
			B3 = ((((int32_t)ac1*4 + X3) << BMP085_OVERSAMPLING_MODE) + 2) / 4;
800161e2:	ec f8 03 54 	ld.w	r8,r6[852]
800161e6:	90 08       	ld.sh	r8,r8[0x0]
800161e8:	f0 09 15 02 	lsl	r9,r8,0x2
800161ec:	ee f8 ff e4 	ld.w	r8,r7[-28]
800161f0:	f2 08 00 08 	add	r8,r9,r8
800161f4:	a3 68       	lsl	r8,0x2
800161f6:	2f e8       	sub	r8,-2
800161f8:	f0 c9 ff fd 	sub	r9,r8,-3
800161fc:	58 08       	cp.w	r8,0
800161fe:	f2 08 17 50 	movlt	r8,r9
80016202:	a3 48       	asr	r8,0x2
80016204:	ef 48 ff d0 	st.w	r7[-48],r8


			X1 = ((int32_t)ac3 * B6) >> 13;
80016208:	ec f8 02 b0 	ld.w	r8,r6[688]
8001620c:	90 08       	ld.sh	r8,r8[0x0]
8001620e:	10 99       	mov	r9,r8
80016210:	ee f8 ff d8 	ld.w	r8,r7[-40]
80016214:	f2 08 02 48 	mul	r8,r9,r8
80016218:	ad 58       	asr	r8,0xd
8001621a:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = ((int32_t)b1 * ((B6 * B6) >> 12)) >> 16;
8001621e:	ec f8 03 48 	ld.w	r8,r6[840]
80016222:	90 08       	ld.sh	r8,r8[0x0]
80016224:	10 99       	mov	r9,r8
80016226:	ee fa ff d8 	ld.w	r10,r7[-40]
8001622a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001622e:	f4 08 02 48 	mul	r8,r10,r8
80016232:	ad 48       	asr	r8,0xc
80016234:	f2 08 02 48 	mul	r8,r9,r8
80016238:	b1 48       	asr	r8,0x10
8001623a:	ef 48 ff e0 	st.w	r7[-32],r8
			X3 = ((X1 + X2) + 2) >> 2;
8001623e:	ee f9 ff dc 	ld.w	r9,r7[-36]
80016242:	ee f8 ff e0 	ld.w	r8,r7[-32]
80016246:	f2 08 00 08 	add	r8,r9,r8
8001624a:	2f e8       	sub	r8,-2
8001624c:	a3 48       	asr	r8,0x2
8001624e:	ef 48 ff e4 	st.w	r7[-28],r8
			B4 = ((uint32_t)ac4 * (uint32_t)(X3 + 32768)) >> 15;
80016252:	ec f8 03 10 	ld.w	r8,r6[784]
80016256:	90 08       	ld.sh	r8,r8[0x0]
80016258:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8001625c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80016260:	f0 c8 80 00 	sub	r8,r8,-32768
80016264:	f2 08 02 48 	mul	r8,r9,r8
80016268:	af 98       	lsr	r8,0xf
8001626a:	ef 48 ff ec 	st.w	r7[-20],r8
			B7 = ((uint32_t)UP - B3) * (uint32_t)( 50000UL >> BMP085_OVERSAMPLING_MODE );
8001626e:	ee f9 ff cc 	ld.w	r9,r7[-52]
80016272:	ee f8 ff d0 	ld.w	r8,r7[-48]
80016276:	10 19       	sub	r9,r8
80016278:	e0 68 30 d4 	mov	r8,12500
8001627c:	f2 08 02 48 	mul	r8,r9,r8
80016280:	ef 48 ff f0 	st.w	r7[-16],r8


			if (B7 < 0x80000000) {
80016284:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016288:	58 08       	cp.w	r8,0
8001628a:	c0 b5       	brlt	800162a0 <get_pressure_data_slow+0x304>
				p = (B7 * 2) / B4;
8001628c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80016290:	a1 78       	lsl	r8,0x1
80016292:	ee f9 ff ec 	ld.w	r9,r7[-20]
80016296:	f0 09 0d 08 	divu	r8,r8,r9
8001629a:	ef 48 ff e8 	st.w	r7[-24],r8
8001629e:	c0 a8       	rjmp	800162b2 <get_pressure_data_slow+0x316>
			} else {
				p = (B7 / B4) * 2;
800162a0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800162a4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800162a8:	f0 09 0d 08 	divu	r8,r8,r9
800162ac:	a1 78       	lsl	r8,0x1
800162ae:	ef 48 ff e8 	st.w	r7[-24],r8
			}
			X1 = (p >> 8) * (p >> 8);
800162b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800162b6:	f0 09 14 08 	asr	r9,r8,0x8
800162ba:	ee f8 ff e8 	ld.w	r8,r7[-24]
800162be:	a9 48       	asr	r8,0x8
800162c0:	f2 08 02 48 	mul	r8,r9,r8
800162c4:	ef 48 ff dc 	st.w	r7[-36],r8
			X1 = (X1 * 3038) >> 16;
800162c8:	ee f9 ff dc 	ld.w	r9,r7[-36]
800162cc:	e0 68 0b de 	mov	r8,3038
800162d0:	f2 08 02 48 	mul	r8,r9,r8
800162d4:	b1 48       	asr	r8,0x10
800162d6:	ef 48 ff dc 	st.w	r7[-36],r8
			X2 = (-7357 * p) >> 16;
800162da:	ee f9 ff e8 	ld.w	r9,r7[-24]
800162de:	fe 78 e3 43 	mov	r8,-7357
800162e2:	f2 08 02 48 	mul	r8,r9,r8
800162e6:	b1 48       	asr	r8,0x10
800162e8:	ef 48 ff e0 	st.w	r7[-32],r8

			p = p + ((X1 + X2 + (int32_t)3791)>>4);
800162ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
800162f0:	ee f8 ff e0 	ld.w	r8,r7[-32]
800162f4:	f2 08 00 08 	add	r8,r9,r8
800162f8:	f0 c8 f1 31 	sub	r8,r8,-3791
800162fc:	a5 48       	asr	r8,0x4
800162fe:	ee f9 ff e8 	ld.w	r9,r7[-24]
80016302:	f2 08 00 08 	add	r8,r9,r8
80016306:	ef 48 ff e8 	st.w	r7[-24],r8

			pressure_outputs.pressure=p;
8001630a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001630e:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
80016312:	ec f8 00 48 	ld.w	r8,r6[72]
80016316:	91 29       	st.w	r8[0x8],r9
		
			vertical_speed=pressure_outputs.altitude;
80016318:	ec f8 00 48 	ld.w	r8,r6[72]
8001631c:	70 78       	ld.w	r8,r8[0x1c]
8001631e:	ef 48 ff c4 	st.w	r7[-60],r8
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
80016322:	ec f8 00 48 	ld.w	r8,r6[72]
80016326:	70 28       	ld.w	r8,r8[0x8]
80016328:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001632c:	e5 a6 09 09 	cop	cp0,cr9,cr0,cr9,0x4c
80016330:	12 9b       	mov	r11,r9
80016332:	10 9c       	mov	r12,r8
80016334:	f0 16 00 0a 	mcall	r6[40]
80016338:	18 98       	mov	r8,r12
8001633a:	10 9c       	mov	r12,r8
8001633c:	f0 16 00 02 	mcall	r6[8]
80016340:	e0 68 d1 24 	mov	r8,53540
80016344:	ea 18 28 cb 	orh	r8,0x28cb
80016348:	e0 69 5b 96 	mov	r9,23446
8001634c:	ea 19 3f c8 	orh	r9,0x3fc8
80016350:	f0 16 01 b9 	mcall	r6[1764]
80016354:	14 98       	mov	r8,r10
80016356:	16 99       	mov	r9,r11
80016358:	30 0a       	mov	r10,0
8001635a:	fc 1b 3f f0 	movh	r11,0x3ff0
8001635e:	f0 16 00 11 	mcall	r6[68]
80016362:	14 98       	mov	r8,r10
80016364:	16 99       	mov	r9,r11
80016366:	10 9a       	mov	r10,r8
80016368:	12 9b       	mov	r11,r9
8001636a:	30 08       	mov	r8,0
8001636c:	e0 69 a5 40 	mov	r9,42304
80016370:	ea 19 40 e5 	orh	r9,0x40e5
80016374:	f0 16 00 03 	mcall	r6[12]
80016378:	14 98       	mov	r8,r10
8001637a:	16 99       	mov	r9,r11
8001637c:	10 92       	mov	r2,r8
8001637e:	12 93       	mov	r3,r9
80016380:	ec f8 00 48 	ld.w	r8,r6[72]
80016384:	70 88       	ld.w	r8,r8[0x20]
80016386:	10 9c       	mov	r12,r8
80016388:	f0 16 00 02 	mcall	r6[8]
8001638c:	14 98       	mov	r8,r10
8001638e:	16 99       	mov	r9,r11
80016390:	04 9a       	mov	r10,r2
80016392:	06 9b       	mov	r11,r3
80016394:	f0 16 00 05 	mcall	r6[20]
80016398:	14 98       	mov	r8,r10
8001639a:	16 99       	mov	r9,r11
8001639c:	10 9a       	mov	r10,r8
8001639e:	12 9b       	mov	r11,r9
800163a0:	f0 16 00 08 	mcall	r6[32]
800163a4:	18 98       	mov	r8,r12
800163a6:	ef 48 ff c0 	st.w	r7[-64],r8
			
			for (i=0; i<2; i++) {
800163aa:	30 08       	mov	r8,0
800163ac:	ef 48 ff bc 	st.w	r7[-68],r8
800163b0:	c1 68       	rjmp	800163dc <get_pressure_data_slow+0x440>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
800163b2:	ee f9 ff bc 	ld.w	r9,r7[-68]
800163b6:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163ba:	f0 ca ff ff 	sub	r10,r8,-1
800163be:	ec f8 00 48 	ld.w	r8,r6[72]
800163c2:	2f ca       	sub	r10,-4
800163c4:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
800163c8:	ec f8 00 48 	ld.w	r8,r6[72]
800163cc:	2f c9       	sub	r9,-4
800163ce:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			pressure_outputs.pressure=p;
		
			vertical_speed=pressure_outputs.altitude;
			altitude=44330.0 * (1.0 - pow(pressure_outputs.pressure /sealevelPressure,0.190295)) + pressure_outputs.altitude_offset;
			
			for (i=0; i<2; i++) {
800163d2:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163d6:	2f f8       	sub	r8,-1
800163d8:	ef 48 ff bc 	st.w	r7[-68],r8
800163dc:	ee f8 ff bc 	ld.w	r8,r7[-68]
800163e0:	58 18       	cp.w	r8,1
800163e2:	fe 9a ff e8 	brle	800163b2 <get_pressure_data_slow+0x416>
				pressure_outputs.last_altitudes[i]=pressure_outputs.last_altitudes[i+1];
			}
			pressure_outputs.last_altitudes[2]=altitude;
800163e6:	ec f8 00 48 	ld.w	r8,r6[72]
800163ea:	ee f9 ff c0 	ld.w	r9,r7[-64]
800163ee:	91 69       	st.w	r8[0x18],r9
			altitude=median_filter_3x(pressure_outputs.last_altitudes[0], pressure_outputs.last_altitudes[1], pressure_outputs.last_altitudes[2]);
800163f0:	ec f8 00 48 	ld.w	r8,r6[72]
800163f4:	70 6a       	ld.w	r10,r8[0x18]
800163f6:	ec f8 00 48 	ld.w	r8,r6[72]
800163fa:	70 59       	ld.w	r9,r8[0x14]
800163fc:	ec f8 00 48 	ld.w	r8,r6[72]
80016400:	70 48       	ld.w	r8,r8[0x10]
80016402:	12 9b       	mov	r11,r9
80016404:	10 9c       	mov	r12,r8
80016406:	fe b0 fc 1a 	rcall	80015c3a <median_filter_3x>
8001640a:	18 98       	mov	r8,r12
8001640c:	ef 48 ff c0 	st.w	r7[-64],r8
			
			if (f_abs(altitude-pressure_outputs.altitude)<15.0) {
80016410:	ec f8 00 48 	ld.w	r8,r6[72]
80016414:	70 78       	ld.w	r8,r8[0x1c]
80016416:	ee f9 ff c0 	ld.w	r9,r7[-64]
8001641a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001641e:	10 9c       	mov	r12,r8
80016420:	fe b0 fb f0 	rcall	80015c00 <f_abs>
80016424:	18 9a       	mov	r10,r12
80016426:	30 18       	mov	r8,1
80016428:	fc 19 41 70 	movh	r9,0x4170
8001642c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80016430:	e0 8c 00 03 	brvs	80016436 <get_pressure_data_slow+0x49a>
80016434:	c0 25       	brlt	80016438 <get_pressure_data_slow+0x49c>
80016436:	30 08       	mov	r8,0
80016438:	5c 58       	castu.b	r8
8001643a:	c3 40       	breq	800164a2 <get_pressure_data_slow+0x506>
				pressure_outputs.altitude = (BARO_ALT_LPF*pressure_outputs.altitude) + (1.0-BARO_ALT_LPF)*altitude;
8001643c:	ec f8 00 48 	ld.w	r8,r6[72]
80016440:	70 78       	ld.w	r8,r8[0x1c]
80016442:	10 9c       	mov	r12,r8
80016444:	f0 16 00 02 	mcall	r6[8]
80016448:	e0 68 66 66 	mov	r8,26214
8001644c:	ea 18 66 66 	orh	r8,0x6666
80016450:	e0 69 66 66 	mov	r9,26214
80016454:	ea 19 3f ee 	orh	r9,0x3fee
80016458:	f0 16 00 03 	mcall	r6[12]
8001645c:	14 98       	mov	r8,r10
8001645e:	16 99       	mov	r9,r11
80016460:	10 92       	mov	r2,r8
80016462:	12 93       	mov	r3,r9
80016464:	ee fc ff c0 	ld.w	r12,r7[-64]
80016468:	f0 16 00 02 	mcall	r6[8]
8001646c:	e0 68 99 a0 	mov	r8,39328
80016470:	ea 18 99 99 	orh	r8,0x9999
80016474:	e0 69 99 99 	mov	r9,39321
80016478:	ea 19 3f a9 	orh	r9,0x3fa9
8001647c:	f0 16 00 03 	mcall	r6[12]
80016480:	14 98       	mov	r8,r10
80016482:	16 99       	mov	r9,r11
80016484:	04 9a       	mov	r10,r2
80016486:	06 9b       	mov	r11,r3
80016488:	f0 16 00 05 	mcall	r6[20]
8001648c:	14 98       	mov	r8,r10
8001648e:	16 99       	mov	r9,r11
80016490:	10 9a       	mov	r10,r8
80016492:	12 9b       	mov	r11,r9
80016494:	f0 16 00 08 	mcall	r6[32]
80016498:	18 99       	mov	r9,r12
8001649a:	ec f8 00 48 	ld.w	r8,r6[72]
8001649e:	91 79       	st.w	r8[0x1c],r9
800164a0:	c0 68       	rjmp	800164ac <get_pressure_data_slow+0x510>
			}else {
				pressure_outputs.altitude = altitude;
800164a2:	ec f8 00 48 	ld.w	r8,r6[72]
800164a6:	ee f9 ff c0 	ld.w	r9,r7[-64]
800164aa:	91 79       	st.w	r8[0x1c],r9
			}
			
			dt = (get_micros()-pressure_outputs.last_update)/1000000.0;
800164ac:	f0 16 00 29 	mcall	r6[164]
800164b0:	18 99       	mov	r9,r12
800164b2:	ec f8 00 48 	ld.w	r8,r6[72]
800164b6:	70 a8       	ld.w	r8,r8[0x28]
800164b8:	f2 08 01 08 	sub	r8,r9,r8
800164bc:	10 9c       	mov	r12,r8
800164be:	f0 16 00 52 	mcall	r6[328]
800164c2:	30 08       	mov	r8,0
800164c4:	e0 69 84 80 	mov	r9,33920
800164c8:	ea 19 41 2e 	orh	r9,0x412e
800164cc:	f0 16 00 0c 	mcall	r6[48]
800164d0:	14 98       	mov	r8,r10
800164d2:	16 99       	mov	r9,r11
800164d4:	10 9a       	mov	r10,r8
800164d6:	12 9b       	mov	r11,r9
800164d8:	f0 16 00 08 	mcall	r6[32]
800164dc:	18 98       	mov	r8,r12
800164de:	ef 48 ff f8 	st.w	r7[-8],r8
			pressure_outputs.dt=dt;
800164e2:	ec f8 00 48 	ld.w	r8,r6[72]
800164e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800164ea:	91 d9       	st.w	r8[0x34],r9
			vertical_speed=-(pressure_outputs.altitude-vertical_speed)/dt;
800164ec:	ec f8 00 48 	ld.w	r8,r6[72]
800164f0:	70 79       	ld.w	r9,r8[0x1c]
800164f2:	ee f8 ff c4 	ld.w	r8,r7[-60]
800164f6:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800164fa:	ee 18 80 00 	eorh	r8,0x8000
800164fe:	ee fb ff f8 	ld.w	r11,r7[-8]
80016502:	10 9c       	mov	r12,r8
80016504:	f0 16 00 0a 	mcall	r6[40]
80016508:	18 98       	mov	r8,r12
8001650a:	ef 48 ff c4 	st.w	r7[-60],r8
			
			if (abs(vertical_speed)>20) vertical_speed=0.0;
8001650e:	ee f8 ff c4 	ld.w	r8,r7[-60]
80016512:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80016516:	ef 48 ff fc 	st.w	r7[-4],r8
8001651a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001651e:	5c 48       	abs	r8
80016520:	ef 48 ff fc 	st.w	r7[-4],r8
80016524:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016528:	59 48       	cp.w	r8,20
8001652a:	e0 8a 00 05 	brle	80016534 <get_pressure_data_slow+0x598>
8001652e:	30 08       	mov	r8,0
80016530:	ef 48 ff c4 	st.w	r7[-60],r8
			pressure_outputs.vario_vz=(VARIO_LPF)*pressure_outputs.vario_vz + (1.0-VARIO_LPF) * (vertical_speed);
80016534:	ec f8 00 48 	ld.w	r8,r6[72]
80016538:	70 98       	ld.w	r8,r8[0x24]
8001653a:	10 9c       	mov	r12,r8
8001653c:	f0 16 00 02 	mcall	r6[8]
80016540:	e0 68 66 66 	mov	r8,26214
80016544:	ea 18 66 66 	orh	r8,0x6666
80016548:	e0 69 66 66 	mov	r9,26214
8001654c:	ea 19 3f ee 	orh	r9,0x3fee
80016550:	f0 16 00 03 	mcall	r6[12]
80016554:	14 98       	mov	r8,r10
80016556:	16 99       	mov	r9,r11
80016558:	10 92       	mov	r2,r8
8001655a:	12 93       	mov	r3,r9
8001655c:	ee fc ff c4 	ld.w	r12,r7[-60]
80016560:	f0 16 00 02 	mcall	r6[8]
80016564:	e0 68 99 a0 	mov	r8,39328
80016568:	ea 18 99 99 	orh	r8,0x9999
8001656c:	e0 69 99 99 	mov	r9,39321
80016570:	ea 19 3f a9 	orh	r9,0x3fa9
80016574:	f0 16 00 03 	mcall	r6[12]
80016578:	14 98       	mov	r8,r10
8001657a:	16 99       	mov	r9,r11
8001657c:	04 9a       	mov	r10,r2
8001657e:	06 9b       	mov	r11,r3
80016580:	f0 16 00 05 	mcall	r6[20]
80016584:	14 98       	mov	r8,r10
80016586:	16 99       	mov	r9,r11
80016588:	10 9a       	mov	r10,r8
8001658a:	12 9b       	mov	r11,r9
8001658c:	f0 16 00 08 	mcall	r6[32]
80016590:	18 99       	mov	r9,r12
80016592:	ec f8 00 48 	ld.w	r8,r6[72]
80016596:	91 99       	st.w	r8[0x24],r9
			
			pressure_outputs.last_update=get_micros();
80016598:	f0 16 00 29 	mcall	r6[164]
8001659c:	18 99       	mov	r9,r12
8001659e:	ec f8 00 48 	ld.w	r8,r6[72]
800165a2:	91 a9       	st.w	r8[0x28],r9
			pressure_outputs.state=IDLE;
800165a4:	ec f8 00 48 	ld.w	r8,r6[72]
800165a8:	30 09       	mov	r9,0
800165aa:	91 c9       	st.w	r8[0x30],r9
			break;
			
		}
		pressure_outputs.last_state_update=get_micros();
800165ac:	f0 16 00 29 	mcall	r6[164]
800165b0:	18 99       	mov	r9,r12
800165b2:	ec f8 00 48 	ld.w	r8,r6[72]
800165b6:	91 b9       	st.w	r8[0x2c],r9
		pressure_outputs.altitude_offset = offset;
800165b8:	ec f8 00 48 	ld.w	r8,r6[72]
800165bc:	ee f9 ff b0 	ld.w	r9,r7[-80]
800165c0:	91 89       	st.w	r8[0x20],r9
		
		return &pressure_outputs;
800165c2:	ec f8 00 48 	ld.w	r8,r6[72]
}
800165c6:	10 9c       	mov	r12,r8
800165c8:	2e cd       	sub	sp,-80
800165ca:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
800165ce:	00 00       	add	r0,r0
800165d0:	80 01       	ld.sh	r1,r0[0x0]
800165d2:	5e 2c       	reths	r12

800165d4 <newValidBarometer>:

bool newValidBarometer(uint32_t *timePrevBarometer)
{
800165d4:	eb cd 40 c0 	pushm	r6-r7,lr
800165d8:	1a 97       	mov	r7,sp
800165da:	20 1d       	sub	sp,4
800165dc:	48 d6       	lddpc	r6,80016610 <newValidBarometer+0x3c>
800165de:	1e 26       	rsub	r6,pc
800165e0:	ef 4c ff fc 	st.w	r7[-4],r12
	if (*timePrevBarometer < pressure_outputs.last_update) 
800165e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165e8:	70 09       	ld.w	r9,r8[0x0]
800165ea:	ec f8 00 48 	ld.w	r8,r6[72]
800165ee:	70 a8       	ld.w	r8,r8[0x28]
800165f0:	10 39       	cp.w	r9,r8
800165f2:	c0 92       	brcc	80016604 <newValidBarometer+0x30>
	{
		*timePrevBarometer = pressure_outputs.last_update;
800165f4:	ec f8 00 48 	ld.w	r8,r6[72]
800165f8:	70 a9       	ld.w	r9,r8[0x28]
800165fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800165fe:	91 09       	st.w	r8[0x0],r9
		return true;
80016600:	30 18       	mov	r8,1
80016602:	c0 28       	rjmp	80016606 <newValidBarometer+0x32>
	}else{
		return false;
80016604:	30 08       	mov	r8,0
	}
	
80016606:	10 9c       	mov	r12,r8
80016608:	2f fd       	sub	sp,-4
8001660a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001660e:	00 00       	add	r0,r0
80016610:	80 01       	ld.sh	r1,r0[0x0]
80016612:	64 62       	ld.w	r2,r2[0x18]

80016614 <init_hmc5883_slow>:
static volatile compass_data compass_outputs;




void init_hmc5883_slow() {
80016614:	eb cd 40 c0 	pushm	r6-r7,lr
80016618:	1a 97       	mov	r7,sp
8001661a:	48 a6       	lddpc	r6,80016640 <init_hmc5883_slow+0x2c>
8001661c:	1e 26       	rsub	r6,pc
	ConfRegA,
	(HMC_SAMPLE_AVG)<<5 | (HMC_RATE) <<2 | HMC_MODE,
	(HMC_RANGE) <<5,
	(HMC_MODE)
	};
	twim_master_init(&AVR32_TWIM0, &twi_opt);
8001661e:	ec fb 08 f4 	ld.w	r11,r6[2292]
80016622:	fe 7c 38 00 	mov	r12,-51200
80016626:	f0 16 00 73 	mcall	r6[460]
	twim_write(&AVR32_TWIM0, (uint8_t*)&compass_default_configuration, 4, HMC5883_SLAVE_ADDRESS, false);
8001662a:	30 08       	mov	r8,0
8001662c:	31 e9       	mov	r9,30
8001662e:	30 4a       	mov	r10,4
80016630:	ec fb 08 f0 	ld.w	r11,r6[2288]
80016634:	fe 7c 38 00 	mov	r12,-51200
80016638:	f0 16 00 36 	mcall	r6[216]
}
8001663c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016640:	80 01       	ld.sh	r1,r0[0x0]
80016642:	64 a0       	ld.w	r0,r2[0x28]

80016644 <get_compass_data_slow>:


compass_data* get_compass_data_slow() {
80016644:	eb cd 40 c0 	pushm	r6-r7,lr
80016648:	1a 97       	mov	r7,sp
8001664a:	20 2d       	sub	sp,8
8001664c:	4a 76       	lddpc	r6,800166e8 <get_compass_data_slow+0xa4>
8001664e:	1e 26       	rsub	r6,pc
	int i;
	uint8_t start_address=DataRegBegin;
80016650:	30 38       	mov	r8,3
80016652:	ef 68 ff fb 	st.b	r7[-5],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
80016656:	ee cb 00 05 	sub	r11,r7,5
8001665a:	30 08       	mov	r8,0
8001665c:	31 e9       	mov	r9,30
8001665e:	30 1a       	mov	r10,1
80016660:	fe 7c 38 00 	mov	r12,-51200
80016664:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
80016668:	ec fb 02 18 	ld.w	r11,r6[536]
8001666c:	30 08       	mov	r8,0
8001666e:	31 e9       	mov	r9,30
80016670:	30 6a       	mov	r10,6
80016672:	fe 7c 38 00 	mov	r12,-51200
80016676:	f0 16 00 62 	mcall	r6[392]
	
	for (i=0; i<3; i++) {
8001667a:	30 08       	mov	r8,0
8001667c:	ef 48 ff fc 	st.w	r7[-4],r8
80016680:	c2 98       	rjmp	800166d2 <get_compass_data_slow+0x8e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
80016682:	ee fb ff fc 	ld.w	r11,r7[-4]
80016686:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001668a:	a1 78       	lsl	r8,0x1
8001668c:	ec f9 02 18 	ld.w	r9,r6[536]
80016690:	f2 08 07 08 	ld.ub	r8,r9[r8]
80016694:	5c 58       	castu.b	r8
80016696:	a9 68       	lsl	r8,0x8
80016698:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001669c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166a0:	a1 78       	lsl	r8,0x1
800166a2:	2f f8       	sub	r8,-1
800166a4:	ec fa 02 18 	ld.w	r10,r6[536]
800166a8:	f4 08 07 08 	ld.ub	r8,r10[r8]
800166ac:	5c 58       	castu.b	r8
800166ae:	f2 08 00 08 	add	r8,r9,r8
800166b2:	5c 88       	casts.h	r8
800166b4:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
800166b8:	ec fa 02 18 	ld.w	r10,r6[536]
800166bc:	f6 c8 ff fe 	sub	r8,r11,-2
800166c0:	a1 78       	lsl	r8,0x1
800166c2:	f4 08 00 08 	add	r8,r10,r8
800166c6:	b0 19       	st.h	r8[0x2],r9
	int i;
	uint8_t start_address=DataRegBegin;
	twim_write(&AVR32_TWIM0, (uint8_t*) &start_address, 1, HMC5883_SLAVE_ADDRESS, false);
	twim_read(&AVR32_TWIM0, (uint8_t*)&(compass_outputs.raw_data), 6, HMC5883_SLAVE_ADDRESS, false);
	
	for (i=0; i<3; i++) {
800166c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166cc:	2f f8       	sub	r8,-1
800166ce:	ef 48 ff fc 	st.w	r7[-4],r8
800166d2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800166d6:	58 28       	cp.w	r8,2
800166d8:	fe 9a ff d5 	brle	80016682 <get_compass_data_slow+0x3e>
		compass_outputs.axes[i]=(int16_t)(compass_outputs.raw_data[2*i]<<8)+(int16_t)(compass_outputs.raw_data[2*i+1]);
	}
	return &compass_outputs;
800166dc:	ec f8 02 18 	ld.w	r8,r6[536]
800166e0:	10 9c       	mov	r12,r8
800166e2:	2f ed       	sub	sp,-8
800166e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800166e8:	80 01       	ld.sh	r1,r0[0x0]
800166ea:	64 d2       	ld.w	r2,r2[0x34]

800166ec <pdca_int_handler_dac>:
 U8 dac_channel_audio = DAC_AUDIO_CHANNEL;


__attribute__((__interrupt__))
static void pdca_int_handler_dac(void)
{
800166ec:	eb cd 40 c0 	pushm	r6-r7,lr
800166f0:	1a 97       	mov	r7,sp
800166f2:	49 a6       	lddpc	r6,80016758 <pdca_int_handler_dac+0x6c>
800166f4:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[PDCA_CHANNEL_DAC].isr;
800166f6:	fc 78 00 00 	mov	r8,-196608
800166fa:	f0 f8 01 2c 	ld.w	r8,r8[300]
	if (autoplay==0) {
800166fe:	ec f8 04 ec 	ld.w	r8,r6[1260]
80016702:	70 08       	ld.w	r8,r8[0x0]
80016704:	58 08       	cp.w	r8,0
80016706:	c0 81       	brne	80016716 <pdca_int_handler_dac+0x2a>
		pdca_disable(PDCA_CHANNEL_DAC);
80016708:	30 4c       	mov	r12,4
8001670a:	f0 16 00 81 	mcall	r6[516]
	    pdca_disable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
8001670e:	30 4c       	mov	r12,4
80016710:	f0 16 00 9e 	mcall	r6[632]
80016714:	c1 f8       	rjmp	80016752 <pdca_int_handler_dac+0x66>

	}	else {	
       // Set PDCA channel reload values with address where data to load are stored, and size of the data block to load.
       pdca_reload_channel(PDCA_CHANNEL_DAC, (char *)buffer+2*from, to-from);
80016716:	ec f8 02 98 	ld.w	r8,r6[664]
8001671a:	90 08       	ld.sh	r8,r8[0x0]
8001671c:	5c 88       	casts.h	r8
8001671e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016722:	ec f8 01 98 	ld.w	r8,r6[408]
80016726:	90 08       	ld.sh	r8,r8[0x0]
80016728:	5c 88       	casts.h	r8
8001672a:	5c 78       	castu.h	r8
8001672c:	f2 08 01 08 	sub	r8,r9,r8
80016730:	10 99       	mov	r9,r8
80016732:	ec f8 03 7c 	ld.w	r8,r6[892]
80016736:	70 0a       	ld.w	r10,r8[0x0]
80016738:	ec f8 01 98 	ld.w	r8,r6[408]
8001673c:	90 08       	ld.sh	r8,r8[0x0]
8001673e:	5c 88       	casts.h	r8
80016740:	5c 78       	castu.h	r8
80016742:	a1 78       	lsl	r8,0x1
80016744:	f4 08 00 08 	add	r8,r10,r8
80016748:	12 9a       	mov	r10,r9
8001674a:	10 9b       	mov	r11,r8
8001674c:	30 4c       	mov	r12,4
8001674e:	f0 16 01 09 	mcall	r6[1060]
	}	   
		
}
80016752:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016756:	d6 03       	rete
80016758:	80 01       	ld.sh	r1,r0[0x0]
8001675a:	65 78       	ld.w	r8,r2[0x5c]

8001675c <init_pevc>:


void init_pevc(void)
{
8001675c:	eb cd 40 c0 	pushm	r6-r7,lr
80016760:	1a 97       	mov	r7,sp
80016762:	48 c6       	lddpc	r6,80016790 <init_pevc+0x34>
80016764:	1e 26       	rsub	r6,pc
  
  // PEVC Init.
  // Configuring the PEVC path: input is the generic clock, each clock cycle, the PEVC trigger a new DAC sample
  // The sinus samples are sent through the PDCA.  
  // a change on PEVC input pin0 event will trigger the PDCA channel 0/1 transfer
  pevc_channel_configure(ppevc,     AVR32_PEVC_ID_USER_DACIFB0_CHA, 
80016766:	ec f8 03 b4 	ld.w	r8,r6[948]
8001676a:	70 08       	ld.w	r8,r8[0x0]
8001676c:	ec f9 08 ec 	ld.w	r9,r6[2284]
80016770:	31 0a       	mov	r10,16
80016772:	30 2b       	mov	r11,2
80016774:	10 9c       	mov	r12,r8
80016776:	f0 16 01 af 	mcall	r6[1724]
                                    AVR32_PEVC_ID_GEN_GCLK_0, 
                                    &PEVC_EVS_OPTIONS);
									  
  // Enable the PEVC channel 0.
  pevc_channels_enable(ppevc, 1<<AVR32_PEVC_ID_USER_DACIFB0_CHA);
8001677a:	ec f8 03 b4 	ld.w	r8,r6[948]
8001677e:	70 08       	ld.w	r8,r8[0x0]
80016780:	30 4a       	mov	r10,4
80016782:	30 0b       	mov	r11,0
80016784:	10 9c       	mov	r12,r8
80016786:	f0 16 01 48 	mcall	r6[1312]
}
8001678a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001678e:	00 00       	add	r0,r0
80016790:	80 01       	ld.sh	r1,r0[0x0]
80016792:	65 e8       	ld.w	r8,r2[0x78]

80016794 <init_gclk>:

void init_gclk(void)
{
80016794:	eb cd 40 c0 	pushm	r6-r7,lr
80016798:	1a 97       	mov	r7,sp
8001679a:	48 76       	lddpc	r6,800167b4 <init_gclk+0x20>
8001679c:	1e 26       	rsub	r6,pc
  // Setup Sampling Rate
 
  // Setup the generic clock for EVENT
  scif_gc_setup(AVR32_SCIF_GCLK_GCLK2_EVENT, 
8001679e:	30 a9       	mov	r9,10
800167a0:	30 1a       	mov	r10,1
800167a2:	30 0b       	mov	r11,0
800167a4:	30 7c       	mov	r12,7
800167a6:	f0 16 02 0b 	mcall	r6[2092]
                SCIF_GCCTRL_SLOWCLOCK, 
                AVR32_SCIF_GC_DIV_CLOCK, 
                DAC_SAMPLE_CLOCK_DIVIDER);  
  // Now enable the generic clock
  scif_gc_enable(AVR32_SCIF_GCLK_GCLK2_EVENT);
800167aa:	30 7c       	mov	r12,7
800167ac:	f0 16 01 ff 	mcall	r6[2044]
}
800167b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800167b4:	80 01       	ld.sh	r1,r0[0x0]
800167b6:	66 20       	ld.w	r0,r3[0x8]
800167b8:	65 72       	ld.w	r2,r2[0x5c]
800167ba:	72 6f       	ld.w	pc,r9[0x18]
800167bc:	72 20       	ld.w	r0,r9[0x8]
800167be:	63 6f       	ld.w	pc,r1[0x58]
800167c0:	6e 66       	ld.w	r6,r7[0x18]
800167c2:	69 67       	ld.w	r7,r4[0x58]
800167c4:	75 72       	ld.w	r2,r10[0x5c]
800167c6:	69 6e       	ld.w	lr,r4[0x58]
800167c8:	67 20       	ld.w	r0,r3[0x48]
800167ca:	44 41       	lddsp	r1,sp[0x110]
800167cc:	43 00       	lddsp	r0,sp[0xc0]
800167ce:	00 00       	add	r0,r0
800167d0:	65 72       	ld.w	r2,r2[0x5c]
800167d2:	72 6f       	ld.w	pc,r9[0x18]
800167d4:	72 20       	ld.w	r0,r9[0x8]
800167d6:	63 6f       	ld.w	pc,r1[0x58]
800167d8:	6e 66       	ld.w	r6,r7[0x18]
800167da:	69 67       	ld.w	r7,r4[0x58]
800167dc:	75 72       	ld.w	r2,r10[0x5c]
800167de:	69 6e       	ld.w	lr,r4[0x58]
800167e0:	67 20       	ld.w	r0,r3[0x48]
800167e2:	44 41       	lddsp	r1,sp[0x110]
800167e4:	43 20       	lddsp	r0,sp[0xc8]
800167e6:	63 68       	ld.w	r8,r1[0x58]
800167e8:	61 6e       	ld.w	lr,r0[0x58]
800167ea:	6e 65       	ld.w	r5,r7[0x18]
800167ec:	6c 00       	ld.w	r0,r6[0x0]

800167ee <Init_DAC>:



void Init_DAC(int trigger_mode) {
800167ee:	eb cd 40 c0 	pushm	r6-r7,lr
800167f2:	1a 97       	mov	r7,sp
800167f4:	20 6d       	sub	sp,24
800167f6:	4b 36       	lddpc	r6,800168c0 <Init_DAC+0xd2>
800167f8:	1e 26       	rsub	r6,pc
800167fa:	ef 4c ff e8 	st.w	r7[-24],r12
                            .low_power                  = false,                          // Low Power Mode     
                            .dual                       = false,                          // Dual Mode
                            .prescaler_clock_hz         = DAC_PRESCALER_CLOCK,             // Prescaler Clock (Should be 500Khz)             
							.offset_calibration_value   = 0,
							.gain_calibration_value     = 1                 
};
800167fe:	ec f8 08 e8 	ld.w	r8,r6[2280]
80016802:	ee ca 00 0c 	sub	r10,r7,12
80016806:	10 9b       	mov	r11,r8
80016808:	f6 e8 00 00 	ld.d	r8,r11[0]
8001680c:	f4 e9 00 00 	st.d	r10[0],r8
80016810:	76 28       	ld.w	r8,r11[0x8]
80016812:	95 28       	st.w	r10[0x8],r8
                                                .auto_refresh_mode    = true,                       // Auto Refresh Mode 
                                                .trigger_mode         = trigger_mode,               // Trigger selection
                                                .left_adjustment      = false,                      // Right Adjustment
                                                .data_shift           = 0,                          // Number of Data Shift 
                                                .data_round_enable    = false                       // Data Rouding Mode                                              };
};
80016814:	ee f8 ff e8 	ld.w	r8,r7[-24]
80016818:	5c 58       	castu.b	r8
8001681a:	30 19       	mov	r9,1
8001681c:	ef 69 ff ef 	st.b	r7[-17],r9
80016820:	ef 68 ff f0 	st.b	r7[-16],r8
80016824:	30 08       	mov	r8,0
80016826:	ef 68 ff f1 	st.b	r7[-15],r8
8001682a:	30 08       	mov	r8,0
8001682c:	ef 68 ff f2 	st.b	r7[-14],r8
80016830:	30 08       	mov	r8,0
80016832:	ef 68 ff f3 	st.b	r7[-13],r8

    // Assign and enable GPIO pins to the DAC function.
  gpio_enable_module(DACIFB_GPIO_MAP, sizeof(DACIFB_GPIO_MAP) / sizeof(DACIFB_GPIO_MAP[0]));
80016836:	30 4b       	mov	r11,4
80016838:	ec fc 08 e4 	ld.w	r12,r6[2276]
8001683c:	f0 16 00 96 	mcall	r6[600]

  // Get DACIFB Factory Configuration
  //dacifb_get_calibration_data(dacifb, &dacifb_opt, DAC_AUDIO_INSTANCE);
                              
  // configure DACIFB
  if (dacifb_configure(dacifb,
80016840:	ec f8 02 7c 	ld.w	r8,r6[636]
80016844:	70 08       	ld.w	r8,r8[0x0]
80016846:	ee c9 00 0c 	sub	r9,r7,12
8001684a:	e0 6a 24 00 	mov	r10,9216
8001684e:	ea 1a 00 f4 	orh	r10,0xf4
80016852:	12 9b       	mov	r11,r9
80016854:	10 9c       	mov	r12,r8
80016856:	f0 16 01 7c 	mcall	r6[1520]
8001685a:	18 98       	mov	r8,r12
8001685c:	58 08       	cp.w	r8,0
8001685e:	c0 61       	brne	8001686a <Init_DAC+0x7c>
                   &dacifb_opt,
                   FOSC0) ==0) {
				dbg_print("error configuring DAC");
80016860:	fe cc 00 a8 	sub	r12,pc,168
80016864:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016868:	c0 08       	rjmp	80016868 <Init_DAC+0x7a>
  }
  
  // Enable the DACIFB channels.

  // configure channel DACIFB
  if (dacifb_configure_channel(dacifb,
8001686a:	ec f8 03 c0 	ld.w	r8,r6[960]
8001686e:	11 88       	ld.ub	r8,r8[0x0]
80016870:	10 9b       	mov	r11,r8
80016872:	ec f8 02 7c 	ld.w	r8,r6[636]
80016876:	70 08       	ld.w	r8,r8[0x0]
80016878:	ee ca 00 11 	sub	r10,r7,17
8001687c:	e0 69 4b 40 	mov	r9,19264
80016880:	ea 19 00 4c 	orh	r9,0x4c
80016884:	10 9c       	mov	r12,r8
80016886:	f0 16 01 bc 	mcall	r6[1776]
8001688a:	18 98       	mov	r8,r12
8001688c:	58 08       	cp.w	r8,0
8001688e:	c0 61       	brne	8001689a <Init_DAC+0xac>
                           dac_channel_audio,
                           &dacifb_channel_opt,
                           DAC_PRESCALER_CLOCK) ==0) {
				dbg_print("error configuring DAC channel");
80016890:	fe cc 00 c0 	sub	r12,pc,192
80016894:	f0 16 00 01 	mcall	r6[4]
				while (1);
80016898:	c0 08       	rjmp	80016898 <Init_DAC+0xaa>
  }
  
  dacifb_start_channel(dacifb,
8001689a:	ec f8 03 c0 	ld.w	r8,r6[960]
8001689e:	11 88       	ld.ub	r8,r8[0x0]
800168a0:	10 99       	mov	r9,r8
800168a2:	ec f8 02 7c 	ld.w	r8,r6[636]
800168a6:	70 08       	ld.w	r8,r8[0x0]
800168a8:	e0 6a 24 00 	mov	r10,9216
800168ac:	ea 1a 00 f4 	orh	r10,0xf4
800168b0:	12 9b       	mov	r11,r9
800168b2:	10 9c       	mov	r12,r8
800168b4:	f0 16 01 53 	mcall	r6[1356]
                       dac_channel_audio,
                       FOSC0);


}
800168b8:	2f ad       	sub	sp,-24
800168ba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800168be:	00 00       	add	r0,r0
800168c0:	80 01       	ld.sh	r1,r0[0x0]
800168c2:	66 7c       	ld.w	r12,r3[0x1c]

800168c4 <DAC_load_buffer>:

void DAC_load_buffer(uint16_t* samples, int from_sample, int to_sample, int repeat) {
800168c4:	eb cd 40 c0 	pushm	r6-r7,lr
800168c8:	1a 97       	mov	r7,sp
800168ca:	20 4d       	sub	sp,16
800168cc:	4a a6       	lddpc	r6,80016974 <DAC_load_buffer+0xb0>
800168ce:	1e 26       	rsub	r6,pc
800168d0:	ef 4c ff fc 	st.w	r7[-4],r12
800168d4:	ef 4b ff f8 	st.w	r7[-8],r11
800168d8:	ef 4a ff f4 	st.w	r7[-12],r10
800168dc:	ef 49 ff f0 	st.w	r7[-16],r9
  // PDCA channel options
  buffer=samples;
800168e0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800168e4:	ec f8 03 7c 	ld.w	r8,r6[892]
800168e8:	91 09       	st.w	r8[0x0],r9
  from=from_sample;
800168ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800168ee:	5c 88       	casts.h	r8
800168f0:	ec f9 01 98 	ld.w	r9,r6[408]
800168f4:	b2 08       	st.h	r9[0x0],r8
  to=to_sample;
800168f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800168fa:	5c 88       	casts.h	r8
800168fc:	ec f9 02 98 	ld.w	r9,r6[664]
80016900:	b2 08       	st.h	r9[0x0],r8
    .size = 0,                         // transfer counter
    .r_addr = NULL,                                // next memory address
    .r_size = 0,                                   // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_HALF_WORD  // select size of the transfer      
  };
  PDCA_OPTIONS.addr=(char *)samples + 2*from;
80016902:	ec f8 01 98 	ld.w	r8,r6[408]
80016906:	90 08       	ld.sh	r8,r8[0x0]
80016908:	5c 88       	casts.h	r8
8001690a:	5c 78       	castu.h	r8
8001690c:	a1 78       	lsl	r8,0x1
8001690e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016912:	10 09       	add	r9,r8
80016914:	ec f8 03 78 	ld.w	r8,r6[888]
80016918:	91 09       	st.w	r8[0x0],r9
  PDCA_OPTIONS.size=to-from;
8001691a:	ec f8 02 98 	ld.w	r8,r6[664]
8001691e:	90 08       	ld.sh	r8,r8[0x0]
80016920:	5c 88       	casts.h	r8
80016922:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016926:	ec f8 01 98 	ld.w	r8,r6[408]
8001692a:	90 08       	ld.sh	r8,r8[0x0]
8001692c:	5c 88       	casts.h	r8
8001692e:	5c 78       	castu.h	r8
80016930:	f2 08 01 08 	sub	r8,r9,r8
80016934:	10 99       	mov	r9,r8
80016936:	ec f8 03 78 	ld.w	r8,r6[888]
8001693a:	91 19       	st.w	r8[0x4],r9

  // Initialize Event Controller
  init_pevc();
8001693c:	f0 16 01 df 	mcall	r6[1916]
  // Initialize Generic Clock
  init_gclk();
80016940:	f0 16 01 d2 	mcall	r6[1864]

  // Init PDCA channel with the pdca_options.
  pdca_init_channel(PDCA_CHANNEL_DAC, &PDCA_OPTIONS); // init PDCA channel with options.
80016944:	ec fb 03 78 	ld.w	r11,r6[888]
80016948:	30 4c       	mov	r12,4
8001694a:	f0 16 00 78 	mcall	r6[480]

  autoplay=repeat;
8001694e:	ec f8 04 ec 	ld.w	r8,r6[1260]
80016952:	ee f9 ff f0 	ld.w	r9,r7[-16]
80016956:	91 09       	st.w	r8[0x0],r9
  //if (repeat==1) {
	  // TODO: for some reason having this interrupt tends to crash occasionally
      INTC_register_interrupt( (__int_handler) &pdca_int_handler_dac, AVR32_PDCA_IRQ_4, AVR32_INTC_INT0);
80016958:	30 0a       	mov	r10,0
8001695a:	e0 6b 00 80 	mov	r11,128
8001695e:	fe cc 02 72 	sub	r12,pc,626
80016962:	f0 16 00 3b 	mcall	r6[236]
	  pdca_enable_interrupt_transfer_complete(PDCA_CHANNEL_DAC);
80016966:	30 4c       	mov	r12,4
80016968:	f0 16 00 bd 	mcall	r6[756]
  //}  
} 
8001696c:	2f cd       	sub	sp,-16
8001696e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016972:	00 00       	add	r0,r0
80016974:	80 01       	ld.sh	r1,r0[0x0]
80016976:	67 52       	ld.w	r2,r3[0x54]

80016978 <DAC_play>:

void DAC_play() {
80016978:	eb cd 40 c0 	pushm	r6-r7,lr
8001697c:	1a 97       	mov	r7,sp
8001697e:	49 56       	lddpc	r6,800169d0 <DAC_play+0x58>
80016980:	1e 26       	rsub	r6,pc
	//Disable_global_interrupt();
	pdca_disable(PDCA_CHANNEL_DAC);
80016982:	30 4c       	mov	r12,4
80016984:	f0 16 00 81 	mcall	r6[516]
	pdca_reload_channel(PDCA_CHANNEL_DAC, (void *)buffer+2*from, to-from);
80016988:	ec f8 02 98 	ld.w	r8,r6[664]
8001698c:	90 08       	ld.sh	r8,r8[0x0]
8001698e:	5c 88       	casts.h	r8
80016990:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80016994:	ec f8 01 98 	ld.w	r8,r6[408]
80016998:	90 08       	ld.sh	r8,r8[0x0]
8001699a:	5c 88       	casts.h	r8
8001699c:	5c 78       	castu.h	r8
8001699e:	f2 08 01 08 	sub	r8,r9,r8
800169a2:	10 99       	mov	r9,r8
800169a4:	ec f8 03 7c 	ld.w	r8,r6[892]
800169a8:	70 0a       	ld.w	r10,r8[0x0]
800169aa:	ec f8 01 98 	ld.w	r8,r6[408]
800169ae:	90 08       	ld.sh	r8,r8[0x0]
800169b0:	5c 88       	casts.h	r8
800169b2:	5c 78       	castu.h	r8
800169b4:	a1 78       	lsl	r8,0x1
800169b6:	f4 08 00 08 	add	r8,r10,r8
800169ba:	12 9a       	mov	r10,r9
800169bc:	10 9b       	mov	r11,r8
800169be:	30 4c       	mov	r12,4
800169c0:	f0 16 01 09 	mcall	r6[1060]
  // Enable now the transfer.
    //Enable_global_interrupt();
    pdca_enable(PDCA_CHANNEL_DAC);
800169c4:	30 4c       	mov	r12,4
800169c6:	f0 16 00 94 	mcall	r6[592]

  
}
800169ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800169ce:	00 00       	add	r0,r0
800169d0:	80 01       	ld.sh	r1,r0[0x0]
800169d2:	68 04       	ld.w	r4,r4[0x0]

800169d4 <DAC_pause>:

void DAC_pause(void) {
800169d4:	eb cd 40 80 	pushm	r7,lr
800169d8:	1a 97       	mov	r7,sp

}
800169da:	e3 cd 80 80 	ldm	sp++,r7,pc

800169de <DAC_resume>:

void DAC_resume(void) {
800169de:	eb cd 40 80 	pushm	r7,lr
800169e2:	1a 97       	mov	r7,sp

}
800169e4:	e3 cd 80 80 	ldm	sp++,r7,pc

800169e8 <DAC_is_finished>:

int  DAC_is_finished(void) {
800169e8:	eb cd 40 80 	pushm	r7,lr
800169ec:	1a 97       	mov	r7,sp
	return 0;
800169ee:	30 08       	mov	r8,0
}
800169f0:	10 9c       	mov	r12,r8
800169f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800169f6 <DAC_set_value>:

void DAC_set_value(int32_t output) {
800169f6:	eb cd 40 c0 	pushm	r6-r7,lr
800169fa:	1a 97       	mov	r7,sp
800169fc:	20 1d       	sub	sp,4
800169fe:	48 76       	lddpc	r6,80016a18 <DAC_set_value+0x22>
80016a00:	1e 26       	rsub	r6,pc
80016a02:	ef 4c ff fc 	st.w	r7[-4],r12
	dacifb->dr0 = (output); 
80016a06:	ec f8 02 7c 	ld.w	r8,r6[636]
80016a0a:	70 08       	ld.w	r8,r8[0x0]
80016a0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016a10:	91 b9       	st.w	r8[0x2c],r9
}
80016a12:	2f fd       	sub	sp,-4
80016a14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016a18:	80 01       	ld.sh	r1,r0[0x0]
80016a1a:	68 84       	ld.w	r4,r4[0x20]

80016a1c <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80016a1c:	eb cd 40 80 	pushm	r7,lr
80016a20:	1a 97       	mov	r7,sp
80016a22:	20 1d       	sub	sp,4
80016a24:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
80016a28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016a2c:	e6 18 00 01 	andh	r8,0x1,COH
80016a30:	5f 08       	sreq	r8
80016a32:	5c 58       	castu.b	r8
}
80016a34:	10 9c       	mov	r12,r8
80016a36:	2f fd       	sub	sp,-4
80016a38:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a3c <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80016a3c:	eb cd 40 80 	pushm	r7,lr
80016a40:	1a 97       	mov	r7,sp
80016a42:	20 1d       	sub	sp,4
80016a44:	18 98       	mov	r8,r12
80016a46:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80016a4a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80016a4e:	58 38       	cp.w	r8,3
80016a50:	c1 20       	breq	80016a74 <osc_get_rate+0x38>
80016a52:	e0 89 00 07 	brgt	80016a60 <osc_get_rate+0x24>
80016a56:	58 08       	cp.w	r8,0
80016a58:	c0 90       	breq	80016a6a <osc_get_rate+0x2e>
80016a5a:	58 28       	cp.w	r8,2
80016a5c:	c0 f0       	breq	80016a7a <osc_get_rate+0x3e>
80016a5e:	c1 b8       	rjmp	80016a94 <osc_get_rate+0x58>
80016a60:	58 48       	cp.w	r8,4
80016a62:	c1 10       	breq	80016a84 <osc_get_rate+0x48>
80016a64:	58 58       	cp.w	r8,5
80016a66:	c1 40       	breq	80016a8e <osc_get_rate+0x52>
80016a68:	c1 68       	rjmp	80016a94 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80016a6a:	e0 68 24 00 	mov	r8,9216
80016a6e:	ea 18 00 f4 	orh	r8,0xf4
80016a72:	c1 28       	rjmp	80016a96 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80016a74:	e0 68 80 00 	mov	r8,32768
80016a78:	c0 f8       	rjmp	80016a96 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80016a7a:	e0 68 12 00 	mov	r8,4608
80016a7e:	ea 18 00 7a 	orh	r8,0x7a
80016a82:	c0 a8       	rjmp	80016a96 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80016a84:	e0 68 0e 00 	mov	r8,3584
80016a88:	ea 18 07 27 	orh	r8,0x727
80016a8c:	c0 58       	rjmp	80016a96 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80016a8e:	e0 78 c1 38 	mov	r8,115000
80016a92:	c0 28       	rjmp	80016a96 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80016a94:	30 08       	mov	r8,0
	}
}
80016a96:	10 9c       	mov	r12,r8
80016a98:	2f fd       	sub	sp,-4
80016a9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80016a9e <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80016a9e:	eb cd 40 c0 	pushm	r6-r7,lr
80016aa2:	1a 97       	mov	r7,sp
80016aa4:	48 56       	lddpc	r6,80016ab8 <sysclk_get_main_hz+0x1a>
80016aa6:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80016aa8:	30 0c       	mov	r12,0
80016aaa:	cc 9f       	rcall	80016a3c <osc_get_rate>
80016aac:	18 98       	mov	r8,r12
80016aae:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80016ab0:	10 9c       	mov	r12,r8
80016ab2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ab6:	00 00       	add	r0,r0
80016ab8:	80 01       	ld.sh	r1,r0[0x0]
80016aba:	69 2a       	ld.w	r10,r4[0x48]

80016abc <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
80016abc:	eb cd 40 c0 	pushm	r6-r7,lr
80016ac0:	1a 97       	mov	r7,sp
80016ac2:	48 46       	lddpc	r6,80016ad0 <sysclk_get_pba_hz+0x14>
80016ac4:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
80016ac6:	ce cf       	rcall	80016a9e <sysclk_get_main_hz>
80016ac8:	18 98       	mov	r8,r12
}
80016aca:	10 9c       	mov	r12,r8
80016acc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016ad0:	80 01       	ld.sh	r1,r0[0x0]
80016ad2:	69 48       	ld.w	r8,r4[0x50]
80016ad4:	21 00       	sub	r0,16

80016ad6 <pdca_int_handler_i2c0>:

/*!  The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_i2c0(void)
{
80016ad6:	eb cd 40 c0 	pushm	r6-r7,lr
80016ada:	1a 97       	mov	r7,sp
80016adc:	4a 26       	lddpc	r6,80016b64 <pdca_int_handler_i2c0+0x8e>
80016ade:	1e 26       	rsub	r6,pc
	AVR32_TWIM0.cr = AVR32_TWIM_CR_MDIS_MASK;
80016ae0:	fe 78 38 00 	mov	r8,-51200
80016ae4:	30 29       	mov	r9,2
80016ae6:	91 09       	st.w	r8[0x0],r9
	pdca_disable(TWI0_DMA_CH);
80016ae8:	30 2c       	mov	r12,2
80016aea:	f0 16 00 81 	mcall	r6[516]
	
	pdca_disable_interrupt_transfer_complete(TWI0_DMA_CH);
80016aee:	30 2c       	mov	r12,2
80016af0:	f0 16 00 9e 	mcall	r6[632]
	
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   schedule[0][current_schedule_slot[0]].transfer_in_progress=0;
80016af4:	ec f8 02 94 	ld.w	r8,r6[660]
80016af8:	11 88       	ld.ub	r8,r8[0x0]
80016afa:	5c 58       	castu.b	r8
80016afc:	10 99       	mov	r9,r8
80016afe:	ec fa 01 38 	ld.w	r10,r6[312]
80016b02:	12 98       	mov	r8,r9
80016b04:	a3 68       	lsl	r8,0x2
80016b06:	12 08       	add	r8,r9
80016b08:	a3 78       	lsl	r8,0x3
80016b0a:	f4 08 00 08 	add	r8,r10,r8
80016b0e:	f0 c9 ff e0 	sub	r9,r8,-32
80016b12:	30 08       	mov	r8,0
80016b14:	b2 a8       	st.b	r9[0x2],r8
   
   if (schedule[0][current_schedule_slot[0]].callback) schedule[0][current_schedule_slot[0]].callback;
80016b16:	ec f8 02 94 	ld.w	r8,r6[660]
80016b1a:	11 88       	ld.ub	r8,r8[0x0]
80016b1c:	5c 58       	castu.b	r8
80016b1e:	10 99       	mov	r9,r8
80016b20:	ec fa 01 38 	ld.w	r10,r6[312]
80016b24:	12 98       	mov	r8,r9
80016b26:	a3 68       	lsl	r8,0x2
80016b28:	12 08       	add	r8,r9
80016b2a:	a3 78       	lsl	r8,0x3
80016b2c:	f4 08 00 08 	add	r8,r10,r8
80016b30:	2d c8       	sub	r8,-36
80016b32:	70 08       	ld.w	r8,r8[0x0]
80016b34:	58 08       	cp.w	r8,0
80016b36:	c1 00       	breq	80016b56 <pdca_int_handler_i2c0+0x80>
80016b38:	ec f8 02 94 	ld.w	r8,r6[660]
80016b3c:	11 88       	ld.ub	r8,r8[0x0]
80016b3e:	5c 58       	castu.b	r8
80016b40:	10 99       	mov	r9,r8
80016b42:	ec fa 01 38 	ld.w	r10,r6[312]
80016b46:	12 98       	mov	r8,r9
80016b48:	a3 68       	lsl	r8,0x2
80016b4a:	12 08       	add	r8,r9
80016b4c:	a3 78       	lsl	r8,0x3
80016b4e:	f4 08 00 08 	add	r8,r10,r8
80016b52:	2d c8       	sub	r8,-36
80016b54:	70 08       	ld.w	r8,r8[0x0]
   dbg_print( "!");
80016b56:	fe cc 00 82 	sub	r12,pc,130
80016b5a:	f0 16 00 01 	mcall	r6[4]
}
80016b5e:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80016b62:	d6 03       	rete
80016b64:	80 01       	ld.sh	r1,r0[0x0]
80016b66:	69 62       	ld.w	r2,r4[0x58]

80016b68 <init_i2c>:




int init_i2c(unsigned char i2c_device) {
80016b68:	eb cd 40 c0 	pushm	r6-r7,lr
80016b6c:	1a 97       	mov	r7,sp
80016b6e:	20 4d       	sub	sp,16
80016b70:	4c b6       	lddpc	r6,80016c9c <init_i2c+0x134>
80016b72:	1e 26       	rsub	r6,pc
80016b74:	18 98       	mov	r8,r12
80016b76:	ef 68 ff f0 	st.b	r7[-16],r8
	int i;
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016b7a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80016b7e:	58 08       	cp.w	r8,0
80016b80:	c0 40       	breq	80016b88 <init_i2c+0x20>
80016b82:	58 18       	cp.w	r8,1
80016b84:	c1 50       	breq	80016bae <init_i2c+0x46>
80016b86:	c2 d8       	rjmp	80016be0 <init_i2c+0x78>
	case 0: 
		twim=&AVR32_TWIM0;
80016b88:	fe 78 38 00 	mov	r8,-51200
80016b8c:	ef 48 ff f8 	st.w	r7[-8],r8
		// Register PDCA IRQ interrupt.
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI0_DMA_IRQ, AVR32_INTC_INT0);
80016b90:	30 0a       	mov	r10,0
80016b92:	36 2b       	mov	r11,98
80016b94:	fe cc 00 be 	sub	r12,pc,190
80016b98:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS0_TWCK_0_0_PIN, AVR32_TWIMS0_TWCK_0_0_FUNCTION);
80016b9c:	30 0b       	mov	r11,0
80016b9e:	34 3c       	mov	r12,67
80016ba0:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS0_TWD_0_0_PIN, AVR32_TWIMS0_TWD_0_0_FUNCTION);
80016ba4:	30 0b       	mov	r11,0
80016ba6:	34 2c       	mov	r12,66
80016ba8:	f0 16 00 3f 	mcall	r6[252]

	break;
80016bac:	c1 c8       	rjmp	80016be4 <init_i2c+0x7c>
	case 1:
		twim=&AVR32_TWIM1;// Register PDCA IRQ interrupt.
80016bae:	fe 78 3c 00 	mov	r8,-50176
80016bb2:	ef 48 ff f8 	st.w	r7[-8],r8
		INTC_register_interrupt( (__int_handler) &pdca_int_handler_i2c0, TWI1_DMA_IRQ, AVR32_INTC_INT0);
80016bb6:	30 0a       	mov	r10,0
80016bb8:	36 3b       	mov	r11,99
80016bba:	fe cc 00 e4 	sub	r12,pc,228
80016bbe:	f0 16 00 3b 	mcall	r6[236]
		gpio_enable_module_pin(AVR32_TWIMS1_TWCK_0_0_PIN, AVR32_TWIMS1_TWCK_0_0_FUNCTION);
80016bc2:	30 0b       	mov	r11,0
80016bc4:	34 5c       	mov	r12,69
80016bc6:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_module_pin(AVR32_TWIMS1_TWD_0_0_PIN, AVR32_TWIMS1_TWD_0_0_FUNCTION);
80016bca:	30 0b       	mov	r11,0
80016bcc:	34 4c       	mov	r12,68
80016bce:	f0 16 00 3f 	mcall	r6[252]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWCK_0_0_PIN);
80016bd2:	34 5c       	mov	r12,69
80016bd4:	f0 16 00 ff 	mcall	r6[1020]
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
80016bd8:	34 4c       	mov	r12,68
80016bda:	f0 16 00 ff 	mcall	r6[1020]
	break;
80016bde:	c0 38       	rjmp	80016be4 <init_i2c+0x7c>
	default: // invalid device ID
		return -1;
80016be0:	3f f8       	mov	r8,-1
80016be2:	c5 98       	rjmp	80016c94 <init_i2c+0x12c>
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016be4:	30 08       	mov	r8,0
80016be6:	ef 48 ff f4 	st.w	r7[-12],r8
80016bea:	c1 b8       	rjmp	80016c20 <init_i2c+0xb8>
		schedule[i2c_device][i].active=-1;
80016bec:	ef 3b ff f0 	ld.ub	r11,r7[-16]
80016bf0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016bf4:	ec fa 01 38 	ld.w	r10,r6[312]
80016bf8:	12 98       	mov	r8,r9
80016bfa:	a3 68       	lsl	r8,0x2
80016bfc:	12 08       	add	r8,r9
80016bfe:	a3 78       	lsl	r8,0x3
80016c00:	e0 69 01 90 	mov	r9,400
80016c04:	f6 09 02 49 	mul	r9,r11,r9
80016c08:	12 08       	add	r8,r9
80016c0a:	f4 08 00 08 	add	r8,r10,r8
80016c0e:	f0 c9 ff e0 	sub	r9,r8,-32
80016c12:	3f f8       	mov	r8,-1
80016c14:	b2 98       	st.b	r9[0x1],r8
		gpio_enable_pin_pull_up(AVR32_TWIMS1_TWD_0_0_PIN);
	break;
	default: // invalid device ID
		return -1;
	}		
	for (i=0; i<I2C_SCHEDULE_SLOTS; i++) {
80016c16:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c1a:	2f f8       	sub	r8,-1
80016c1c:	ef 48 ff f4 	st.w	r7[-12],r8
80016c20:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016c24:	58 98       	cp.w	r8,9
80016c26:	fe 9a ff e3 	brle	80016bec <init_i2c+0x84>
		schedule[i2c_device][i].active=-1;
	}
				
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016c2a:	e1 b8 00 00 	mfsr	r8,0x0
80016c2e:	10 9c       	mov	r12,r8
80016c30:	cf 6e       	rcall	80016a1c <cpu_irq_is_enabled_flags>
80016c32:	18 98       	mov	r8,r12
80016c34:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016c38:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016c3c:	30 08       	mov	r8,0
80016c3e:	f0 09 18 00 	cp.b	r9,r8
80016c42:	c0 20       	breq	80016c46 <init_i2c+0xde>
		cpu_irq_disable ();
80016c44:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016c46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c4a:	3f f9       	mov	r9,-1
80016c4c:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016c4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c52:	30 19       	mov	r9,1
80016c54:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016c56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c5a:	e0 69 00 80 	mov	r9,128
80016c5e:	91 09       	st.w	r8[0x0],r9
	
	
	if (global_interrupt_enabled) {
80016c60:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016c64:	30 08       	mov	r8,0
80016c66:	f0 09 18 00 	cp.b	r9,r8
80016c6a:	c0 20       	breq	80016c6e <init_i2c+0x106>
		cpu_irq_enable ();
80016c6c:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016c6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016c72:	3f f9       	mov	r9,-1
80016c74:	91 b9       	st.w	r8[0x2c],r9
//	irq_register_handler(twim_master_interrupt_handler,
//			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
//	cpu_irq_restore(flags);
	
	// Select the speed
	if (twim_set_speed(twim, 100000, sysclk_get_pba_hz()) == 
80016c76:	c2 3f       	rcall	80016abc <sysclk_get_pba_hz>
80016c78:	18 98       	mov	r8,r12
80016c7a:	10 9a       	mov	r10,r8
80016c7c:	e0 7b 86 a0 	mov	r11,100000
80016c80:	ee fc ff f8 	ld.w	r12,r7[-8]
80016c84:	f0 16 01 37 	mcall	r6[1244]
80016c88:	18 98       	mov	r8,r12
80016c8a:	5b 88       	cp.w	r8,-8
80016c8c:	c0 31       	brne	80016c92 <init_i2c+0x12a>
			ERR_INVALID_ARG) {
		
		return ERR_INVALID_ARG;
80016c8e:	3f 88       	mov	r8,-8
80016c90:	c0 28       	rjmp	80016c94 <init_i2c+0x12c>
	}
	return STATUS_OK;				
80016c92:	30 08       	mov	r8,0

}
80016c94:	10 9c       	mov	r12,r8
80016c96:	2f cd       	sub	sp,-16
80016c98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016c9c:	80 01       	ld.sh	r1,r0[0x0]
80016c9e:	69 f6       	ld.w	r6,r4[0x7c]

80016ca0 <i2c_reset>:



char i2c_reset(unsigned char i2c_device) {
80016ca0:	eb cd 40 c0 	pushm	r6-r7,lr
80016ca4:	1a 97       	mov	r7,sp
80016ca6:	20 3d       	sub	sp,12
80016ca8:	4a 26       	lddpc	r6,80016d30 <i2c_reset+0x90>
80016caa:	1e 26       	rsub	r6,pc
80016cac:	18 98       	mov	r8,r12
80016cae:	ef 68 ff f4 	st.b	r7[-12],r8
	volatile avr32_twim_t *twim;
	switch (i2c_device) {
80016cb2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016cb6:	58 08       	cp.w	r8,0
80016cb8:	c0 40       	breq	80016cc0 <i2c_reset+0x20>
80016cba:	58 18       	cp.w	r8,1
80016cbc:	c0 70       	breq	80016cca <i2c_reset+0x2a>
80016cbe:	c0 b8       	rjmp	80016cd4 <i2c_reset+0x34>
	case 0: 
		twim=&AVR32_TWIM0;
80016cc0:	fe 78 38 00 	mov	r8,-51200
80016cc4:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016cc8:	c0 a8       	rjmp	80016cdc <i2c_reset+0x3c>
	case 1:
		twim=&AVR32_TWIM1;
80016cca:	fe 78 3c 00 	mov	r8,-50176
80016cce:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016cd2:	c0 58       	rjmp	80016cdc <i2c_reset+0x3c>
	default: // invalid device ID
		return -1;
80016cd4:	e0 68 00 ff 	mov	r8,255
	if (global_interrupt_enabled) {
		cpu_irq_enable ();
	}
	// Clear SR
	twim->scr = ~0UL;
}
80016cd8:	10 9c       	mov	r12,r8
80016cda:	c2 78       	rjmp	80016d28 <i2c_reset+0x88>
		twim=&AVR32_TWIM1;
	break;
	default: // invalid device ID
		return -1;
	}		
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80016cdc:	e1 b8 00 00 	mfsr	r8,0x0
80016ce0:	10 9c       	mov	r12,r8
80016ce2:	c9 de       	rcall	80016a1c <cpu_irq_is_enabled_flags>
80016ce4:	18 98       	mov	r8,r12
80016ce6:	ef 68 ff ff 	st.b	r7[-1],r8
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80016cea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016cee:	30 08       	mov	r8,0
80016cf0:	f0 09 18 00 	cp.b	r9,r8
80016cf4:	c0 20       	breq	80016cf8 <i2c_reset+0x58>
		cpu_irq_disable ();
80016cf6:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80016cf8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016cfc:	3f f9       	mov	r9,-1
80016cfe:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016d00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d04:	30 19       	mov	r9,1
80016d06:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d0c:	e0 69 00 80 	mov	r9,128
80016d10:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80016d12:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80016d16:	30 08       	mov	r8,0
80016d18:	f0 09 18 00 	cp.b	r9,r8
80016d1c:	c0 20       	breq	80016d20 <i2c_reset+0x80>
		cpu_irq_enable ();
80016d1e:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80016d20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016d24:	3f f9       	mov	r9,-1
80016d26:	91 b9       	st.w	r8[0x2c],r9
}
80016d28:	2f dd       	sub	sp,-12
80016d2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016d2e:	00 00       	add	r0,r0
80016d30:	80 01       	ld.sh	r1,r0[0x0]
80016d32:	6b 2e       	ld.w	lr,r5[0x48]

80016d34 <i2c_add_request>:
char i2c_add_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016d34:	eb cd 40 c0 	pushm	r6-r7,lr
80016d38:	1a 97       	mov	r7,sp
80016d3a:	20 3d       	sub	sp,12
80016d3c:	4b f6       	lddpc	r6,80016e38 <i2c_add_request+0x104>
80016d3e:	1e 26       	rsub	r6,pc
80016d40:	18 98       	mov	r8,r12
80016d42:	ef 4b ff f4 	st.w	r7[-12],r11
80016d46:	ef 68 ff f8 	st.b	r7[-8],r8
	// find free schedule slot
	int i=0;
80016d4a:	30 08       	mov	r8,0
80016d4c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; (i<I2C_SCHEDULE_SLOTS)&& (schedule[i2c_device][i].active>=0); i++) {
80016d50:	30 08       	mov	r8,0
80016d52:	ef 48 ff fc 	st.w	r7[-4],r8
80016d56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d5a:	58 98       	cp.w	r8,9
80016d5c:	e0 89 00 1b 	brgt	80016d92 <i2c_add_request+0x5e>
80016d60:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016d64:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016d68:	ec fa 01 38 	ld.w	r10,r6[312]
80016d6c:	12 98       	mov	r8,r9
80016d6e:	a3 68       	lsl	r8,0x2
80016d70:	12 08       	add	r8,r9
80016d72:	a3 78       	lsl	r8,0x3
80016d74:	e0 69 01 90 	mov	r9,400
80016d78:	f6 09 02 49 	mul	r9,r11,r9
80016d7c:	12 08       	add	r8,r9
80016d7e:	f4 08 00 08 	add	r8,r10,r8
80016d82:	2e 08       	sub	r8,-32
80016d84:	11 98       	ld.ub	r8,r8[0x1]
80016d86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d8a:	2f f8       	sub	r8,-1
80016d8c:	ef 48 ff fc 	st.w	r7[-4],r8
80016d90:	ce 3b       	rjmp	80016d56 <i2c_add_request+0x22>
	}
	// add request to schedule
	if (i<I2C_SCHEDULE_SLOTS) {
80016d92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016d96:	58 98       	cp.w	r8,9
80016d98:	e0 89 00 45 	brgt	80016e22 <i2c_add_request+0xee>
		new_event->schedule_slot=i;
80016d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016da0:	5c 58       	castu.b	r8
80016da2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016da6:	f3 68 00 18 	st.b	r9[24],r8
		new_event->transfer_in_progress=0;
80016daa:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016dae:	30 08       	mov	r8,0
80016db0:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016db4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016db8:	30 18       	mov	r8,1
80016dba:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016dbe:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016dc2:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016dc6:	ec fa 01 38 	ld.w	r10,r6[312]
80016dca:	12 98       	mov	r8,r9
80016dcc:	a3 68       	lsl	r8,0x2
80016dce:	12 08       	add	r8,r9
80016dd0:	a3 78       	lsl	r8,0x3
80016dd2:	e0 69 01 90 	mov	r9,400
80016dd6:	f6 09 02 49 	mul	r9,r11,r9
80016dda:	12 08       	add	r8,r9
80016ddc:	f4 08 00 09 	add	r9,r10,r8
80016de0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016de4:	12 9a       	mov	r10,r9
80016de6:	10 9b       	mov	r11,r8
80016de8:	f4 c8 00 00 	sub	r8,r10,0
80016dec:	f6 c9 00 00 	sub	r9,r11,0
80016df0:	72 0c       	ld.w	r12,r9[0x0]
80016df2:	91 0c       	st.w	r8[0x0],r12
80016df4:	72 1c       	ld.w	r12,r9[0x4]
80016df6:	91 1c       	st.w	r8[0x4],r12
80016df8:	72 2c       	ld.w	r12,r9[0x8]
80016dfa:	91 2c       	st.w	r8[0x8],r12
80016dfc:	72 39       	ld.w	r9,r9[0xc]
80016dfe:	91 39       	st.w	r8[0xc],r9
80016e00:	f4 c8 ff f0 	sub	r8,r10,-16
80016e04:	f6 c9 ff f0 	sub	r9,r11,-16
80016e08:	72 0c       	ld.w	r12,r9[0x0]
80016e0a:	91 0c       	st.w	r8[0x0],r12
80016e0c:	72 1c       	ld.w	r12,r9[0x4]
80016e0e:	91 1c       	st.w	r8[0x4],r12
80016e10:	72 2c       	ld.w	r12,r9[0x8]
80016e12:	91 2c       	st.w	r8[0x8],r12
80016e14:	72 39       	ld.w	r9,r9[0xc]
80016e16:	91 39       	st.w	r8[0xc],r9
80016e18:	f6 e8 00 20 	ld.d	r8,r11[32]
80016e1c:	f4 e9 00 20 	st.d	r10[32],r8
80016e20:	c0 48       	rjmp	80016e28 <i2c_add_request+0xf4>
	} else i=-1;
80016e22:	3f f8       	mov	r8,-1
80016e24:	ef 48 ff fc 	st.w	r7[-4],r8
	// return assigned schedule slot
	return i;
80016e28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e2c:	5c 58       	castu.b	r8
}
80016e2e:	10 9c       	mov	r12,r8
80016e30:	2f dd       	sub	sp,-12
80016e32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016e36:	00 00       	add	r0,r0
80016e38:	80 01       	ld.sh	r1,r0[0x0]
80016e3a:	6b c2       	ld.w	r2,r5[0x70]

80016e3c <i2c_change_request>:
char i2c_change_request(unsigned char i2c_device, i2c_schedule_event* new_event){
80016e3c:	eb cd 40 c0 	pushm	r6-r7,lr
80016e40:	1a 97       	mov	r7,sp
80016e42:	20 3d       	sub	sp,12
80016e44:	4a a6       	lddpc	r6,80016eec <i2c_change_request+0xb0>
80016e46:	1e 26       	rsub	r6,pc
80016e48:	18 98       	mov	r8,r12
80016e4a:	ef 4b ff f4 	st.w	r7[-12],r11
80016e4e:	ef 68 ff f8 	st.b	r7[-8],r8
	int i=new_event->schedule_slot;
80016e52:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016e56:	f1 38 00 18 	ld.ub	r8,r8[24]
80016e5a:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((i>=0) && (i<I2C_SCHEDULE_SLOTS)) {
80016e5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e62:	58 08       	cp.w	r8,0
80016e64:	c4 15       	brlt	80016ee6 <i2c_change_request+0xaa>
80016e66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016e6a:	58 98       	cp.w	r8,9
80016e6c:	e0 89 00 3d 	brgt	80016ee6 <i2c_change_request+0xaa>
		new_event->transfer_in_progress=0;
80016e70:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e74:	30 08       	mov	r8,0
80016e76:	f3 68 00 22 	st.b	r9[34],r8
		new_event->active=1;
80016e7a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80016e7e:	30 18       	mov	r8,1
80016e80:	f3 68 00 21 	st.b	r9[33],r8
		schedule[i2c_device][i]=*new_event;
80016e84:	ef 3b ff f8 	ld.ub	r11,r7[-8]
80016e88:	ee f9 ff fc 	ld.w	r9,r7[-4]
80016e8c:	ec fa 01 38 	ld.w	r10,r6[312]
80016e90:	12 98       	mov	r8,r9
80016e92:	a3 68       	lsl	r8,0x2
80016e94:	12 08       	add	r8,r9
80016e96:	a3 78       	lsl	r8,0x3
80016e98:	e0 69 01 90 	mov	r9,400
80016e9c:	f6 09 02 49 	mul	r9,r11,r9
80016ea0:	12 08       	add	r8,r9
80016ea2:	f4 08 00 09 	add	r9,r10,r8
80016ea6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80016eaa:	12 9a       	mov	r10,r9
80016eac:	10 9b       	mov	r11,r8
80016eae:	f4 c8 00 00 	sub	r8,r10,0
80016eb2:	f6 c9 00 00 	sub	r9,r11,0
80016eb6:	72 0c       	ld.w	r12,r9[0x0]
80016eb8:	91 0c       	st.w	r8[0x0],r12
80016eba:	72 1c       	ld.w	r12,r9[0x4]
80016ebc:	91 1c       	st.w	r8[0x4],r12
80016ebe:	72 2c       	ld.w	r12,r9[0x8]
80016ec0:	91 2c       	st.w	r8[0x8],r12
80016ec2:	72 39       	ld.w	r9,r9[0xc]
80016ec4:	91 39       	st.w	r8[0xc],r9
80016ec6:	f4 c8 ff f0 	sub	r8,r10,-16
80016eca:	f6 c9 ff f0 	sub	r9,r11,-16
80016ece:	72 0c       	ld.w	r12,r9[0x0]
80016ed0:	91 0c       	st.w	r8[0x0],r12
80016ed2:	72 1c       	ld.w	r12,r9[0x4]
80016ed4:	91 1c       	st.w	r8[0x4],r12
80016ed6:	72 2c       	ld.w	r12,r9[0x8]
80016ed8:	91 2c       	st.w	r8[0x8],r12
80016eda:	72 39       	ld.w	r9,r9[0xc]
80016edc:	91 39       	st.w	r8[0xc],r9
80016ede:	f6 e8 00 20 	ld.d	r8,r11[32]
80016ee2:	f4 e9 00 20 	st.d	r10[32],r8
	};
}
80016ee6:	2f dd       	sub	sp,-12
80016ee8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80016eec:	80 01       	ld.sh	r1,r0[0x0]
80016eee:	6c ca       	ld.w	r10,r6[0x30]
80016ef0:	77 72       	ld.w	r2,r11[0x5c]
80016ef2:	00 00       	add	r0,r0
80016ef4:	77 00       	ld.w	r0,r11[0x40]

80016ef6 <i2c_trigger_request>:


char i2c_trigger_request(unsigned char i2c_device, unsigned char schedule_slot) {
80016ef6:	eb cd 40 c0 	pushm	r6-r7,lr
80016efa:	1a 97       	mov	r7,sp
80016efc:	20 4d       	sub	sp,16
80016efe:	fe f6 02 32 	ld.w	r6,pc[562]
80016f02:	1e 26       	rsub	r6,pc
80016f04:	18 99       	mov	r9,r12
80016f06:	16 98       	mov	r8,r11
80016f08:	ef 69 ff f4 	st.b	r7[-12],r9
80016f0c:	ef 68 ff f0 	st.b	r7[-16],r8
	// initiate transfer of given request
	// set up DMA channel
	volatile avr32_twim_t *twim;
	i2c_packet_conf* conf=&schedule[i2c_device][schedule_slot].config;
80016f10:	ef 3a ff f4 	ld.ub	r10,r7[-12]
80016f14:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80016f18:	12 98       	mov	r8,r9
80016f1a:	a3 68       	lsl	r8,0x2
80016f1c:	12 08       	add	r8,r9
80016f1e:	a3 78       	lsl	r8,0x3
80016f20:	e0 69 01 90 	mov	r9,400
80016f24:	f4 09 02 49 	mul	r9,r10,r9
80016f28:	f0 09 00 09 	add	r9,r8,r9
80016f2c:	ec f8 01 38 	ld.w	r8,r6[312]
80016f30:	f2 08 00 08 	add	r8,r9,r8
80016f34:	ef 48 ff fc 	st.w	r7[-4],r8
				.size = 4,	                              // transfer counter
				.r_addr = NULL,                           // next memory address
				.r_size = 0,                              // next transfer counter
				.transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
			};
	switch (i2c_device) {
80016f38:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80016f3c:	58 08       	cp.w	r8,0
80016f3e:	c0 40       	breq	80016f46 <i2c_trigger_request+0x50>
80016f40:	58 18       	cp.w	r8,1
80016f42:	c5 90       	breq	80016ff4 <i2c_trigger_request+0xfe>
80016f44:	c5 d8       	rjmp	80016ffe <i2c_trigger_request+0x108>
	case 0: 
		twim=&AVR32_TWIM0;
80016f46:	fe 78 38 00 	mov	r8,-51200
80016f4a:	ef 48 ff f8 	st.w	r7[-8],r8
		twim->cr = AVR32_TWIM_CR_MEN_MASK;
80016f4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f52:	30 19       	mov	r9,1
80016f54:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80016f56:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f5a:	e0 69 00 80 	mov	r9,128
80016f5e:	91 09       	st.w	r8[0x0],r9
		twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80016f60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80016f64:	30 29       	mov	r9,2
80016f66:	91 09       	st.w	r8[0x0],r9
		switch (conf->direction)  {
80016f68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f6c:	11 c8       	ld.ub	r8,r8[0x4]
80016f6e:	58 18       	cp.w	r8,1
80016f70:	c1 b0       	breq	80016fa6 <i2c_trigger_request+0xb0>
80016f72:	58 28       	cp.w	r8,2
80016f74:	c0 30       	breq	80016f7a <i2c_trigger_request+0x84>
80016f76:	58 08       	cp.w	r8,0
80016f78:	c3 71       	brne	80016fe6 <i2c_trigger_request+0xf0>
		case I2C_WRITE1_THEN_READ:
		case I2C_READ:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_RX;
80016f7a:	ec f8 01 5c 	ld.w	r8,r6[348]
80016f7e:	30 69       	mov	r9,6
80016f80:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->read_data;
80016f82:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f86:	70 49       	ld.w	r9,r8[0x10]
80016f88:	ec f8 01 5c 	ld.w	r8,r6[348]
80016f8c:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->read_count;
80016f8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016f92:	70 59       	ld.w	r9,r8[0x14]
80016f94:	ec f8 01 5c 	ld.w	r8,r6[348]
80016f98:	91 19       	st.w	r8[0x4],r9
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80016f9a:	ec fb 01 5c 	ld.w	r11,r6[348]
80016f9e:	30 2c       	mov	r12,2
80016fa0:	f0 16 00 78 	mcall	r6[480]
			break;
80016fa4:	c2 18       	rjmp	80016fe6 <i2c_trigger_request+0xf0>
		case I2C_WRITE:
			PDCA_OPTIONS.pid=AVR32_TWIM0_PDCA_ID_TX;
80016fa6:	ec f8 01 5c 	ld.w	r8,r6[348]
80016faa:	31 19       	mov	r9,17
80016fac:	91 49       	st.w	r8[0x10],r9
			PDCA_OPTIONS.addr=(void *)conf->write_data;
80016fae:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fb2:	70 29       	ld.w	r9,r8[0x8]
80016fb4:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fb8:	91 09       	st.w	r8[0x0],r9
			PDCA_OPTIONS.size=conf->write_count;
80016fba:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fbe:	70 39       	ld.w	r9,r8[0xc]
80016fc0:	ec f8 01 5c 	ld.w	r8,r6[348]
80016fc4:	91 19       	st.w	r8[0x4],r9
			
			// Init PDCA channel with the pdca_options.
			pdca_init_channel(TWI0_DMA_CH, &PDCA_OPTIONS); // init PDCA channel with options.
80016fc6:	ec fb 01 5c 	ld.w	r11,r6[348]
80016fca:	30 2c       	mov	r12,2
80016fcc:	f0 16 00 78 	mcall	r6[480]
			pdca_load_channel(TWI0_DMA_CH, (void *)conf->write_data, conf->write_count);
80016fd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fd4:	70 39       	ld.w	r9,r8[0xc]
80016fd6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80016fda:	70 28       	ld.w	r8,r8[0x8]
80016fdc:	12 9a       	mov	r10,r9
80016fde:	10 9b       	mov	r11,r8
80016fe0:	30 2c       	mov	r12,2
80016fe2:	f0 16 00 be 	mcall	r6[760]
		}
		
//		pdca_load_channel(TWI0_DMA_CH, (void *)schedule[i2c_device][schedule_slot].config.write_data, schedule[i2c_device][schedule_slot].config.write_count);
		// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
		// the whole block was received
		pdca_enable_interrupt_transfer_complete(TWI0_DMA_CH);
80016fe6:	30 2c       	mov	r12,2
80016fe8:	f0 16 00 bd 	mcall	r6[756]
		pdca_enable_interrupt_transfer_error(TWI0_DMA_CH);
80016fec:	30 2c       	mov	r12,2
80016fee:	f0 16 02 28 	mcall	r6[2208]
		
		
		break;
80016ff2:	c0 98       	rjmp	80017004 <i2c_trigger_request+0x10e>
	case 1:
		twim=&AVR32_TWIM1;
80016ff4:	fe 78 3c 00 	mov	r8,-50176
80016ff8:	ef 48 ff f8 	st.w	r7[-8],r8
	break;
80016ffc:	c0 48       	rjmp	80017004 <i2c_trigger_request+0x10e>
	default: // invalid device ID
		return -1;
80016ffe:	e0 68 00 ff 	mov	r8,255
80017002:	c9 38       	rjmp	80017128 <i2c_trigger_request+0x232>
	}		

	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
80017004:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017008:	11 c8       	ld.ub	r8,r8[0x4]
8001700a:	58 18       	cp.w	r8,1
8001700c:	c4 40       	breq	80017094 <i2c_trigger_request+0x19e>
8001700e:	58 28       	cp.w	r8,2
80017010:	c1 50       	breq	8001703a <i2c_trigger_request+0x144>
80017012:	58 08       	cp.w	r8,0
80017014:	c6 51       	brne	800170de <i2c_trigger_request+0x1e8>
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017016:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001701a:	11 88       	ld.ub	r8,r8[0x0]
8001701c:	a1 78       	lsl	r8,0x1
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001701e:	10 99       	mov	r9,r8
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80017020:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017024:	70 58       	ld.w	r8,r8[0x14]
80017026:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017028:	f3 e8 10 08 	or	r8,r9,r8
	// set up I2C speed and mode
//	twim_set_speed(twim, 100000, sysclk_get_pba_hz());
    
	switch (conf->direction)  {
		case I2C_READ:
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001702c:	10 99       	mov	r9,r8
8001702e:	e8 19 a0 00 	orl	r9,0xa000
80017032:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017036:	91 39       	st.w	r8[0xc],r9
						| (conf->read_count << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			break;	
80017038:	c5 38       	rjmp	800170de <i2c_trigger_request+0x1e8>
		case I2C_WRITE1_THEN_READ:
			dbg_print( "wr");
8001703a:	fe cc 01 4a 	sub	r12,pc,330
8001703e:	f0 16 00 01 	mcall	r6[4]
			
			// set up next command register for the burst read transfer
			// set up command register to initiate the write transfer. The DMA will take care of the reading once this is done.
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017042:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017046:	11 88       	ld.ub	r8,r8[0x0]
80017048:	a1 78       	lsl	r8,0x1
8001704a:	ea 18 00 01 	orh	r8,0x1
8001704e:	e8 18 a0 00 	orl	r8,0xa000
80017052:	10 99       	mov	r9,r8
80017054:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017058:	91 39       	st.w	r8[0xc],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001705a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001705e:	11 88       	ld.ub	r8,r8[0x0]
80017060:	a1 78       	lsl	r8,0x1
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
80017062:	10 99       	mov	r9,r8
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->read_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80017064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017068:	70 58       	ld.w	r8,r8[0x14]
8001706a:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
8001706c:	f3 e8 10 08 	or	r8,r9,r8
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			

			twim->ncmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
80017070:	10 99       	mov	r9,r8
80017072:	e8 19 a0 00 	orl	r9,0xa000
80017076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001707a:	91 49       	st.w	r8[0x10],r9
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
			// set up writing of one byte (usually a slave register index)
			//twim->cr = AVR32_TWIM_CR_MEN_MASK;
			twim->thr=conf->write_then_read_preamble;
8001707c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017080:	11 d8       	ld.ub	r8,r8[0x5]
80017082:	10 99       	mov	r9,r8
80017084:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017088:	91 69       	st.w	r8[0x18],r9
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
8001708a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001708e:	30 19       	mov	r9,1
80017090:	91 09       	st.w	r8[0x0],r9
			
			break;	
80017092:	c2 68       	rjmp	800170de <i2c_trigger_request+0x1e8>
		case I2C_WRITE:
			dbg_print( "w");
80017094:	fe cc 01 a0 	sub	r12,pc,416
80017098:	f0 16 00 01 	mcall	r6[4]
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
8001709c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170a0:	11 88       	ld.ub	r8,r8[0x0]
800170a2:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170a4:	10 99       	mov	r9,r8
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800170a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170aa:	70 38       	ld.w	r8,r8[0xc]
800170ac:	b1 68       	lsl	r8,0x10
						| (AVR32_TWIM_CMDR_VALID_MASK)
800170ae:	f3 e8 10 08 	or	r8,r9,r8
			twim->cr = AVR32_TWIM_CR_MEN_MASK;
			
			break;	
		case I2C_WRITE:
			dbg_print( "w");
			twim->cmdr = (conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170b2:	10 99       	mov	r9,r8
800170b4:	e8 19 a0 00 	orl	r9,0xa000
800170b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170bc:	91 39       	st.w	r8[0xc],r9
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170c2:	11 88       	ld.ub	r8,r8[0x0]
800170c4:	a1 78       	lsl	r8,0x1
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800170c6:	10 99       	mov	r9,r8
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
800170c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800170cc:	70 38       	ld.w	r8,r8[0xc]
800170ce:	b1 68       	lsl	r8,0x10
						//| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
800170d0:	f3 e8 10 08 	or	r8,r9,r8
						| ((conf->write_count) << AVR32_TWIM_CMDR_NBYTES_OFFSET)
						| (AVR32_TWIM_CMDR_VALID_MASK)
						| (AVR32_TWIM_CMDR_START_MASK)
						| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
						;
			twim->ncmdr=(conf->slave_address << AVR32_TWIM_CMDR_SADR_OFFSET)
800170d4:	10 99       	mov	r9,r8
800170d6:	ad b9       	sbr	r9,0xd
800170d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800170dc:	91 49       	st.w	r8[0x10],r9
		break;	
	}		
	// start transfer
	

	current_schedule_slot[i2c_device]=schedule_slot;
800170de:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800170e2:	ec fa 02 94 	ld.w	r10,r6[660]
800170e6:	ef 38 ff f0 	ld.ub	r8,r7[-16]
800170ea:	f4 09 0b 08 	st.b	r10[r9],r8
	schedule[i2c_device][schedule_slot].transfer_in_progress=1;
800170ee:	ef 3b ff f4 	ld.ub	r11,r7[-12]
800170f2:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800170f6:	ec fa 01 38 	ld.w	r10,r6[312]
800170fa:	12 98       	mov	r8,r9
800170fc:	a3 68       	lsl	r8,0x2
800170fe:	12 08       	add	r8,r9
80017100:	a3 78       	lsl	r8,0x3
80017102:	e0 69 01 90 	mov	r9,400
80017106:	f6 09 02 49 	mul	r9,r11,r9
8001710a:	12 08       	add	r8,r9
8001710c:	f4 08 00 08 	add	r8,r10,r8
80017110:	f0 c9 ff e0 	sub	r9,r8,-32
80017114:	30 18       	mov	r8,1
80017116:	b2 a8       	st.b	r9[0x2],r8
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80017118:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001711c:	30 19       	mov	r9,1
8001711e:	91 09       	st.w	r8[0x0],r9
	pdca_enable(TWI0_DMA_CH);
80017120:	30 2c       	mov	r12,2
80017122:	f0 16 00 94 	mcall	r6[592]
	return 0;
80017126:	30 08       	mov	r8,0
}
80017128:	10 9c       	mov	r12,r8
8001712a:	2f cd       	sub	sp,-16
8001712c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017130:	80 01       	ld.sh	r1,r0[0x0]
80017132:	6d 86       	ld.w	r6,r6[0x60]

80017134 <i2c_pause_request>:

char i2c_pause_request(unsigned char i2c_device, unsigned char schedule_slot){
80017134:	eb cd 40 80 	pushm	r7,lr
80017138:	1a 97       	mov	r7,sp
8001713a:	20 2d       	sub	sp,8
8001713c:	18 99       	mov	r9,r12
8001713e:	16 98       	mov	r8,r11
80017140:	ef 69 ff fc 	st.b	r7[-4],r9
80017144:	ef 68 ff f8 	st.b	r7[-8],r8
	// pause scheduler
	// if this request currently active, wait for current transfer to finish
	// deactivate request
	// resume scheduler
}
80017148:	2f ed       	sub	sp,-8
8001714a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001714e <i2c_enable_request>:

char i2c_enable_request(unsigned char i2c_device, unsigned char schedule_slot){
8001714e:	eb cd 40 80 	pushm	r7,lr
80017152:	1a 97       	mov	r7,sp
80017154:	20 2d       	sub	sp,8
80017156:	18 99       	mov	r9,r12
80017158:	16 98       	mov	r8,r11
8001715a:	ef 69 ff fc 	st.b	r7[-4],r9
8001715e:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
80017162:	30 08       	mov	r8,0
}
80017164:	10 9c       	mov	r12,r8
80017166:	2f ed       	sub	sp,-8
80017168:	e3 cd 80 80 	ldm	sp++,r7,pc

8001716c <i2c_remove_request>:

char i2c_remove_request(unsigned char i2c_device, unsigned char schedule_slot){
8001716c:	eb cd 40 80 	pushm	r7,lr
80017170:	1a 97       	mov	r7,sp
80017172:	20 2d       	sub	sp,8
80017174:	18 99       	mov	r9,r12
80017176:	16 98       	mov	r8,r11
80017178:	ef 69 ff fc 	st.b	r7[-4],r9
8001717c:	ef 68 ff f8 	st.b	r7[-8],r8
	return 0;
80017180:	30 08       	mov	r8,0
}
80017182:	10 9c       	mov	r12,r8
80017184:	2f ed       	sub	sp,-8
80017186:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001718c <init_itg3200>:
} gyro_config;

gyro_config default_configuration;
uint8_t read_preamble=SENSOR_REG_ADDRESS;

void init_itg3200(void) {
8001718c:	eb cd 40 c0 	pushm	r6-r7,lr
80017190:	1a 97       	mov	r7,sp
80017192:	4b c6       	lddpc	r6,80017280 <init_itg3200+0xf4>
80017194:	1e 26       	rsub	r6,pc
	default_configuration.conf_start_reg_address=CONFIG_REG_ADDRESS;
80017196:	ec f9 01 40 	ld.w	r9,r6[320]
8001719a:	31 58       	mov	r8,21
8001719c:	b2 88       	st.b	r9[0x0],r8

	default_configuration.sample_div=4; //output frequency after filtering: 1khz/8khz /(sample_div +1)
8001719e:	ec f9 01 40 	ld.w	r9,r6[320]
800171a2:	30 48       	mov	r8,4
800171a4:	b2 98       	st.b	r9[0x1],r8
	default_configuration.DLPF=DLPF_42HZ;
800171a6:	ec f9 01 40 	ld.w	r9,r6[320]
800171aa:	30 38       	mov	r8,3
800171ac:	b2 a8       	st.b	r9[0x2],r8
	default_configuration.interrupts=0;
800171ae:	ec f9 01 40 	ld.w	r9,r6[320]
800171b2:	30 08       	mov	r8,0
800171b4:	b2 b8       	st.b	r9[0x3],r8

	gyro_event.callback=0;
800171b6:	ec f8 00 80 	ld.w	r8,r6[128]
800171ba:	30 09       	mov	r9,0
800171bc:	91 c9       	st.w	r8[0x30],r9
	gyro_event.repetition_rate_ms=5;
800171be:	ec f8 00 80 	ld.w	r8,r6[128]
800171c2:	30 59       	mov	r9,5
800171c4:	91 a9       	st.w	r8[0x28],r9
	gyro_event.trigger_next_event=-1;
800171c6:	ec f9 00 80 	ld.w	r9,r6[128]
800171ca:	3f f8       	mov	r8,-1
800171cc:	f3 68 00 2c 	st.b	r9[44],r8

	gyro_event.config.slave_address=ITG3200_SLAVE_ADDRESS;
800171d0:	ec f9 00 80 	ld.w	r9,r6[128]
800171d4:	36 88       	mov	r8,104
800171d6:	b2 88       	st.b	r9[0x0],r8
	gyro_event.config.direction=I2C_WRITE;
800171d8:	ec f9 00 80 	ld.w	r9,r6[128]
800171dc:	30 18       	mov	r8,1
800171de:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.read_data=&gyro_outputs;
800171e2:	ec f9 02 14 	ld.w	r9,r6[532]
800171e6:	ec f8 00 80 	ld.w	r8,r6[128]
800171ea:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
800171ec:	ec f8 00 80 	ld.w	r8,r6[128]
800171f0:	30 89       	mov	r9,8
800171f2:	91 69       	st.w	r8[0x18],r9
	gyro_event.config.write_data=&default_configuration;
800171f4:	ec f8 00 80 	ld.w	r8,r6[128]
800171f8:	ec f9 01 40 	ld.w	r9,r6[320]
800171fc:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=4;
800171fe:	ec f8 00 80 	ld.w	r8,r6[128]
80017202:	30 49       	mov	r9,4
80017204:	91 49       	st.w	r8[0x10],r9
	gyro_event.config.i2c_speed=100000;
80017206:	ec f8 00 80 	ld.w	r8,r6[128]
8001720a:	e0 79 86 a0 	mov	r9,100000
8001720e:	91 19       	st.w	r8[0x4],r9
	
	i2c_add_request(0, &gyro_event);
80017210:	ec fb 00 80 	ld.w	r11,r6[128]
80017214:	30 0c       	mov	r12,0
80017216:	f0 16 01 18 	mcall	r6[1120]
	i2c_trigger_request(0, gyro_event.schedule_slot);
8001721a:	ec f8 00 80 	ld.w	r8,r6[128]
8001721e:	f1 38 00 24 	ld.ub	r8,r8[36]
80017222:	10 9b       	mov	r11,r8
80017224:	30 0c       	mov	r12,0
80017226:	f0 16 00 63 	mcall	r6[396]
	
	
	gyro_event.config.direction=I2C_WRITE1_THEN_READ;
8001722a:	ec f9 00 80 	ld.w	r9,r6[128]
8001722e:	30 28       	mov	r8,2
80017230:	f3 68 00 08 	st.b	r9[8],r8
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
80017234:	ec f9 00 80 	ld.w	r9,r6[128]
80017238:	31 b8       	mov	r8,27
8001723a:	f3 68 00 09 	st.b	r9[9],r8
	gyro_event.config.write_data=&read_preamble;
8001723e:	ec f8 00 80 	ld.w	r8,r6[128]
80017242:	ec f9 07 c8 	ld.w	r9,r6[1992]
80017246:	91 39       	st.w	r8[0xc],r9
	gyro_event.config.write_count=1;
80017248:	ec f8 00 80 	ld.w	r8,r6[128]
8001724c:	30 19       	mov	r9,1
8001724e:	91 49       	st.w	r8[0x10],r9
	
	gyro_event.config.read_data=&gyro_outputs;
80017250:	ec f9 02 14 	ld.w	r9,r6[532]
80017254:	ec f8 00 80 	ld.w	r8,r6[128]
80017258:	91 59       	st.w	r8[0x14],r9
	gyro_event.config.read_count=8;
8001725a:	ec f8 00 80 	ld.w	r8,r6[128]
8001725e:	30 89       	mov	r9,8
80017260:	91 69       	st.w	r8[0x18],r9
	i2c_change_request(0, &gyro_event);
80017262:	ec fb 00 80 	ld.w	r11,r6[128]
80017266:	30 0c       	mov	r12,0
80017268:	f0 16 01 19 	mcall	r6[1124]
	i2c_trigger_request(0, gyro_event.schedule_slot);
8001726c:	ec f8 00 80 	ld.w	r8,r6[128]
80017270:	f1 38 00 24 	ld.ub	r8,r8[36]
80017274:	10 9b       	mov	r11,r8
80017276:	30 0c       	mov	r12,0
80017278:	f0 16 00 63 	mcall	r6[396]
	/**/
}
8001727c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017280:	80 01       	ld.sh	r1,r0[0x0]
80017282:	70 18       	ld.w	r8,r8[0x4]

80017284 <reconfigure_gyro>:

void reconfigure_gyro(void) {
80017284:	eb cd 40 c0 	pushm	r6-r7,lr
80017288:	1a 97       	mov	r7,sp
8001728a:	48 76       	lddpc	r6,800172a4 <reconfigure_gyro+0x20>
8001728c:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
8001728e:	ec f8 00 80 	ld.w	r8,r6[128]
80017292:	f1 38 00 24 	ld.ub	r8,r8[36]
80017296:	10 9b       	mov	r11,r8
80017298:	30 0c       	mov	r12,0
8001729a:	f0 16 00 63 	mcall	r6[396]
}
8001729e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172a2:	00 00       	add	r0,r0
800172a4:	80 01       	ld.sh	r1,r0[0x0]
800172a6:	71 10       	ld.w	r0,r8[0x44]

800172a8 <init_itg3200_slow>:

void init_itg3200_slow(void) {
800172a8:	eb cd 40 c0 	pushm	r6-r7,lr
800172ac:	1a 97       	mov	r7,sp
800172ae:	48 a6       	lddpc	r6,800172d4 <init_itg3200_slow+0x2c>
800172b0:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = ITG3200_SLAVE_ADDRESS, 
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM0, &twi_opt);
800172b2:	ec fb 08 e0 	ld.w	r11,r6[2272]
800172b6:	fe 7c 38 00 	mov	r12,-51200
800172ba:	f0 16 00 73 	mcall	r6[460]
	twim_write(&AVR32_TWIM0, (uint8_t*)&default_configuration, 4, ITG3200_SLAVE_ADDRESS, false);
800172be:	30 08       	mov	r8,0
800172c0:	36 89       	mov	r9,104
800172c2:	30 4a       	mov	r10,4
800172c4:	ec fb 01 40 	ld.w	r11,r6[320]
800172c8:	fe 7c 38 00 	mov	r12,-51200
800172cc:	f0 16 00 36 	mcall	r6[216]
}
800172d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172d4:	80 01       	ld.sh	r1,r0[0x0]
800172d6:	71 34       	ld.w	r4,r8[0x4c]

800172d8 <get_gyro_data>:

gyro_data* get_gyro_data(void) {
800172d8:	eb cd 40 c0 	pushm	r6-r7,lr
800172dc:	1a 97       	mov	r7,sp
800172de:	48 86       	lddpc	r6,800172fc <get_gyro_data+0x24>
800172e0:	1e 26       	rsub	r6,pc
	i2c_trigger_request(0, gyro_event.schedule_slot);
800172e2:	ec f8 00 80 	ld.w	r8,r6[128]
800172e6:	f1 38 00 24 	ld.ub	r8,r8[36]
800172ea:	10 9b       	mov	r11,r8
800172ec:	30 0c       	mov	r12,0
800172ee:	f0 16 00 63 	mcall	r6[396]
	return &gyro_outputs;
800172f2:	ec f8 02 14 	ld.w	r8,r6[532]
}
800172f6:	10 9c       	mov	r12,r8
800172f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800172fc:	80 01       	ld.sh	r1,r0[0x0]
800172fe:	71 64       	ld.w	r4,r8[0x58]

80017300 <get_gyro_data_slow>:

gyro_data* get_gyro_data_slow(void) {
80017300:	eb cd 40 c0 	pushm	r6-r7,lr
80017304:	1a 97       	mov	r7,sp
80017306:	49 16       	lddpc	r6,80017348 <get_gyro_data_slow+0x48>
80017308:	1e 26       	rsub	r6,pc
	gyro_event.config.write_then_read_preamble=SENSOR_REG_ADDRESS;
8001730a:	ec f9 00 80 	ld.w	r9,r6[128]
8001730e:	31 b8       	mov	r8,27
80017310:	f3 68 00 09 	st.b	r9[9],r8
	twim_write(&AVR32_TWIM0, (uint8_t*) &gyro_event.config.write_then_read_preamble, 1, ITG3200_SLAVE_ADDRESS, false);
80017314:	ec f8 00 80 	ld.w	r8,r6[128]
80017318:	f0 cb ff f7 	sub	r11,r8,-9
8001731c:	30 08       	mov	r8,0
8001731e:	36 89       	mov	r9,104
80017320:	30 1a       	mov	r10,1
80017322:	fe 7c 38 00 	mov	r12,-51200
80017326:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM0, (uint8_t*)&gyro_outputs, 8, ITG3200_SLAVE_ADDRESS, false);
8001732a:	ec fb 02 14 	ld.w	r11,r6[532]
8001732e:	30 08       	mov	r8,0
80017330:	36 89       	mov	r9,104
80017332:	30 8a       	mov	r10,8
80017334:	fe 7c 38 00 	mov	r12,-51200
80017338:	f0 16 00 62 	mcall	r6[392]
	
	
	return &gyro_outputs;
8001733c:	ec f8 02 14 	ld.w	r8,r6[532]
80017340:	10 9c       	mov	r12,r8
80017342:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017346:	00 00       	add	r0,r0
80017348:	80 01       	ld.sh	r1,r0[0x0]
8001734a:	71 8c       	ld.w	r12,r8[0x60]

8001734c <LED_Read_Display>:
//! Saved state of all LEDs.
static volatile U32 LED_State = (1 << LED_COUNT) - 1;


U32 LED_Read_Display(void)
{
8001734c:	eb cd 40 c0 	pushm	r6-r7,lr
80017350:	1a 97       	mov	r7,sp
80017352:	48 56       	lddpc	r6,80017364 <LED_Read_Display+0x18>
80017354:	1e 26       	rsub	r6,pc
  return LED_State;
80017356:	ec f8 00 f8 	ld.w	r8,r6[248]
8001735a:	70 08       	ld.w	r8,r8[0x0]
}
8001735c:	10 9c       	mov	r12,r8
8001735e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017362:	00 00       	add	r0,r0
80017364:	80 01       	ld.sh	r1,r0[0x0]
80017366:	71 d8       	ld.w	r8,r8[0x74]

80017368 <LED_Display>:


void LED_Display(U32 leds)
{
80017368:	eb cd 40 c0 	pushm	r6-r7,lr
8001736c:	1a 97       	mov	r7,sp
8001736e:	20 3d       	sub	sp,12
80017370:	4a 96       	lddpc	r6,80017414 <LED_Display+0xac>
80017372:	1e 26       	rsub	r6,pc
80017374:	ef 4c ff f4 	st.w	r7[-12],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor;
  volatile avr32_gpio_port_t *led_gpio_port;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017378:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001737c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017380:	ef 48 ff f4 	st.w	r7[-12],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;
80017384:	ec f8 00 f8 	ld.w	r8,r6[248]
80017388:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001738c:	91 09       	st.w	r8[0x0],r9

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
8001738e:	ec f8 01 bc 	ld.w	r8,r6[444]
80017392:	ef 48 ff f8 	st.w	r7[-8],r8
80017396:	c3 58       	rjmp	80017400 <LED_Display+0x98>
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
  {
    // Set the LED to the requested state.
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017398:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001739c:	70 08       	ld.w	r8,r8[0x0]
8001739e:	a9 78       	lsl	r8,0x9
800173a0:	e0 28 e0 00 	sub	r8,57344
800173a4:	ef 48 ff fc 	st.w	r7[-4],r8
    if (leds & 1)
800173a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800173ac:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800173b0:	5c 58       	castu.b	r8
800173b2:	c0 90       	breq	800173c4 <LED_Display+0x5c>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800173b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173b8:	70 19       	ld.w	r9,r8[0x4]
800173ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173be:	f1 49 00 58 	st.w	r8[88],r9
800173c2:	c0 88       	rjmp	800173d2 <LED_Display+0x6a>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800173c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173c8:	70 19       	ld.w	r9,r8[0x4]
800173ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173ce:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800173d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173d6:	70 19       	ld.w	r9,r8[0x4]
800173d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173dc:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800173e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173e4:	70 19       	ld.w	r9,r8[0x4]
800173e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800173ea:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
800173ec:	ee f8 ff f4 	ld.w	r8,r7[-12]
800173f0:	a1 98       	lsr	r8,0x1
800173f2:	ef 48 ff f4 	st.w	r7[-12],r8
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
       led_descriptor < LED_DESCRIPTOR + LED_COUNT;
       led_descriptor++)
800173f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800173fa:	2f 08       	sub	r8,-16
800173fc:	ef 48 ff f8 	st.w	r7[-8],r8

  // Update the saved state of all LEDs with the requested changes.
  LED_State = leds;

  // For all LEDs...
  for (led_descriptor = &LED_DESCRIPTOR[0];
80017400:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017404:	ec f8 01 bc 	ld.w	r8,r6[444]
80017408:	2e 08       	sub	r8,-32
8001740a:	10 39       	cp.w	r9,r8
8001740c:	cc 63       	brcs	80017398 <LED_Display+0x30>
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
  }
}
8001740e:	2f dd       	sub	sp,-12
80017410:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017414:	80 01       	ld.sh	r1,r0[0x0]
80017416:	71 f6       	ld.w	r6,r8[0x7c]

80017418 <LED_Read_Display_Mask>:


U32 LED_Read_Display_Mask(U32 mask)
{
80017418:	eb cd 40 c0 	pushm	r6-r7,lr
8001741c:	1a 97       	mov	r7,sp
8001741e:	20 1d       	sub	sp,4
80017420:	48 86       	lddpc	r6,80017440 <LED_Read_Display_Mask+0x28>
80017422:	1e 26       	rsub	r6,pc
80017424:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bits(LED_State, mask);
80017428:	ec f8 00 f8 	ld.w	r8,r6[248]
8001742c:	70 09       	ld.w	r9,r8[0x0]
8001742e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017432:	f3 e8 00 08 	and	r8,r9,r8
}
80017436:	10 9c       	mov	r12,r8
80017438:	2f fd       	sub	sp,-4
8001743a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001743e:	00 00       	add	r0,r0
80017440:	80 01       	ld.sh	r1,r0[0x0]
80017442:	72 a6       	ld.w	r6,r9[0x28]

80017444 <LED_Display_Mask>:


void LED_Display_Mask(U32 mask, U32 leds)
{
80017444:	eb cd 40 c0 	pushm	r6-r7,lr
80017448:	1a 97       	mov	r7,sp
8001744a:	20 5d       	sub	sp,20
8001744c:	4b f6       	lddpc	r6,80017548 <LED_Display_Mask+0x104>
8001744e:	1e 26       	rsub	r6,pc
80017450:	ef 4c ff f0 	st.w	r7[-16],r12
80017454:	ef 4b ff ec 	st.w	r7[-20],r11
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80017458:	ec f8 01 bc 	ld.w	r8,r6[444]
8001745c:	21 08       	sub	r8,16
8001745e:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  mask &= (1 << LED_COUNT) - 1;
80017462:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017466:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001746a:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);
8001746e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017472:	f0 09 11 ff 	rsub	r9,r8,-1
80017476:	ec f8 00 f8 	ld.w	r8,r6[248]
8001747a:	70 08       	ld.w	r8,r8[0x0]
8001747c:	10 69       	and	r9,r8
8001747e:	ee fa ff ec 	ld.w	r10,r7[-20]
80017482:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017486:	f5 e8 00 08 	and	r8,r10,r8
8001748a:	10 49       	or	r9,r8
8001748c:	ec f8 00 f8 	ld.w	r8,r6[248]
80017490:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (mask)
80017492:	c5 38       	rjmp	80017538 <LED_Display_Mask+0xf4>
  {
    // Select the next specified LED and set it to the requested state.
    led_shift = 1 + ctz(mask);
80017494:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017498:	5c 98       	brev	r8
8001749a:	f0 08 12 00 	clz	r8,r8
8001749e:	5c 58       	castu.b	r8
800174a0:	2f f8       	sub	r8,-1
800174a2:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800174a6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174aa:	a5 68       	lsl	r8,0x4
800174ac:	ee f9 ff f4 	ld.w	r9,r7[-12]
800174b0:	f2 08 00 08 	add	r8,r9,r8
800174b4:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800174b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174bc:	70 08       	ld.w	r8,r8[0x0]
800174be:	a9 78       	lsl	r8,0x9
800174c0:	e0 28 e0 00 	sub	r8,57344
800174c4:	ef 48 ff f8 	st.w	r7[-8],r8
    leds >>= led_shift - 1;
800174c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800174cc:	20 18       	sub	r8,1
800174ce:	ee f9 ff ec 	ld.w	r9,r7[-20]
800174d2:	f2 08 0a 48 	lsr	r8,r9,r8
800174d6:	ef 48 ff ec 	st.w	r7[-20],r8
    if (leds & 1)
800174da:	ee f8 ff ec 	ld.w	r8,r7[-20]
800174de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800174e2:	5c 58       	castu.b	r8
800174e4:	c0 90       	breq	800174f6 <LED_Display_Mask+0xb2>
    {
      led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800174e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174ea:	70 19       	ld.w	r9,r8[0x4]
800174ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
800174f0:	f1 49 00 58 	st.w	r8[88],r9
800174f4:	c0 88       	rjmp	80017504 <LED_Display_Mask+0xc0>
    }
    else
    {
      led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800174f6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800174fa:	70 19       	ld.w	r9,r8[0x4]
800174fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017500:	f1 49 00 54 	st.w	r8[84],r9
    }
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
80017504:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017508:	70 19       	ld.w	r9,r8[0x4]
8001750a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001750e:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017512:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017516:	70 19       	ld.w	r9,r8[0x4]
80017518:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001751c:	91 19       	st.w	r8[0x4],r9
    leds >>= 1;
8001751e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017522:	a1 98       	lsr	r8,0x1
80017524:	ef 48 ff ec 	st.w	r7[-20],r8
    mask >>= led_shift;
80017528:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001752c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80017530:	f2 08 0a 48 	lsr	r8,r9,r8
80017534:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Wr_bits(LED_State, mask, leds);

  // While there are specified LEDs left to manage...
  while (mask)
80017538:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001753c:	58 08       	cp.w	r8,0
8001753e:	ca b1       	brne	80017494 <LED_Display_Mask+0x50>
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= 1;
    mask >>= led_shift;
  }
}
80017540:	2f bd       	sub	sp,-20
80017542:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017546:	00 00       	add	r0,r0
80017548:	80 01       	ld.sh	r1,r0[0x0]
8001754a:	72 d2       	ld.w	r2,r9[0x34]

8001754c <LED_Test>:


bool LED_Test(U32 leds)
{
8001754c:	eb cd 40 c0 	pushm	r6-r7,lr
80017550:	1a 97       	mov	r7,sp
80017552:	20 1d       	sub	sp,4
80017554:	48 96       	lddpc	r6,80017578 <LED_Test+0x2c>
80017556:	1e 26       	rsub	r6,pc
80017558:	ef 4c ff fc 	st.w	r7[-4],r12
  return Tst_bits(LED_State, leds);
8001755c:	ec f8 00 f8 	ld.w	r8,r6[248]
80017560:	70 09       	ld.w	r9,r8[0x0]
80017562:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017566:	f3 e8 00 08 	and	r8,r9,r8
8001756a:	5f 18       	srne	r8
8001756c:	5c 58       	castu.b	r8
}
8001756e:	10 9c       	mov	r12,r8
80017570:	2f fd       	sub	sp,-4
80017572:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017576:	00 00       	add	r0,r0
80017578:	80 01       	ld.sh	r1,r0[0x0]
8001757a:	73 da       	ld.w	r10,r9[0x74]

8001757c <LED_Off>:


void LED_Off(U32 leds)
{
8001757c:	eb cd 40 c0 	pushm	r6-r7,lr
80017580:	1a 97       	mov	r7,sp
80017582:	20 4d       	sub	sp,16
80017584:	4a b6       	lddpc	r6,80017630 <LED_Off+0xb4>
80017586:	1e 26       	rsub	r6,pc
80017588:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
8001758c:	ec f8 01 bc 	ld.w	r8,r6[444]
80017590:	21 08       	sub	r8,16
80017592:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
80017596:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001759a:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
8001759e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
800175a2:	ec f8 00 f8 	ld.w	r8,r6[248]
800175a6:	70 09       	ld.w	r9,r8[0x0]
800175a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175ac:	10 49       	or	r9,r8
800175ae:	ec f8 00 f8 	ld.w	r8,r6[248]
800175b2:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
800175b4:	c3 78       	rjmp	80017622 <LED_Off+0xa6>
  {
    // Select the next specified LED and turn it off.
    led_shift = 1 + ctz(leds);
800175b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800175ba:	5c 98       	brev	r8
800175bc:	f0 08 12 00 	clz	r8,r8
800175c0:	5c 58       	castu.b	r8
800175c2:	2f f8       	sub	r8,-1
800175c4:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
800175c8:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800175cc:	a5 68       	lsl	r8,0x4
800175ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
800175d2:	f2 08 00 08 	add	r8,r9,r8
800175d6:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
800175da:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175de:	70 08       	ld.w	r8,r8[0x0]
800175e0:	a9 78       	lsl	r8,0x9
800175e2:	e0 28 e0 00 	sub	r8,57344
800175e6:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
800175ea:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175ee:	70 19       	ld.w	r9,r8[0x4]
800175f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800175f4:	f1 49 00 54 	st.w	r8[84],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800175f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800175fc:	70 19       	ld.w	r9,r8[0x4]
800175fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017602:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
80017606:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001760a:	70 19       	ld.w	r9,r8[0x4]
8001760c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017610:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017612:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017616:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001761a:	f2 08 0a 48 	lsr	r8,r9,r8
8001761e:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Clr_bits(LED_State, leds);
  Set_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
80017622:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017626:	58 08       	cp.w	r8,0
80017628:	cc 71       	brne	800175b6 <LED_Off+0x3a>
    led_gpio_port->ovrs  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001762a:	2f cd       	sub	sp,-16
8001762c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017630:	80 01       	ld.sh	r1,r0[0x0]
80017632:	74 0a       	ld.w	r10,r10[0x0]

80017634 <LED_On>:


void LED_On(U32 leds)
{
80017634:	eb cd 40 c0 	pushm	r6-r7,lr
80017638:	1a 97       	mov	r7,sp
8001763a:	20 4d       	sub	sp,16
8001763c:	4a c6       	lddpc	r6,800176ec <LED_On+0xb8>
8001763e:	1e 26       	rsub	r6,pc
80017640:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80017644:	ec f8 01 bc 	ld.w	r8,r6[444]
80017648:	21 08       	sub	r8,16
8001764a:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001764e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017652:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017656:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
8001765a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001765e:	f0 09 11 ff 	rsub	r9,r8,-1
80017662:	ec f8 00 f8 	ld.w	r8,r6[248]
80017666:	70 08       	ld.w	r8,r8[0x0]
80017668:	10 69       	and	r9,r8
8001766a:	ec f8 00 f8 	ld.w	r8,r6[248]
8001766e:	91 09       	st.w	r8[0x0],r9
  // While there are specified LEDs left to manage...
  while (leds)
80017670:	c3 78       	rjmp	800176de <LED_On+0xaa>
  {
    // Select the next specified LED and turn it on.
    led_shift = 1 + ctz(leds);
80017672:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017676:	5c 98       	brev	r8
80017678:	f0 08 12 00 	clz	r8,r8
8001767c:	5c 58       	castu.b	r8
8001767e:	2f f8       	sub	r8,-1
80017680:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
80017684:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017688:	a5 68       	lsl	r8,0x4
8001768a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001768e:	f2 08 00 08 	add	r8,r9,r8
80017692:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
80017696:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001769a:	70 08       	ld.w	r8,r8[0x0]
8001769c:	a9 78       	lsl	r8,0x9
8001769e:	e0 28 e0 00 	sub	r8,57344
800176a2:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
800176a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176aa:	70 19       	ld.w	r9,r8[0x4]
800176ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176b0:	f1 49 00 58 	st.w	r8[88],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
800176b4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176b8:	70 19       	ld.w	r9,r8[0x4]
800176ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176be:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
800176c2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800176c6:	70 19       	ld.w	r9,r8[0x4]
800176c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800176cc:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
800176ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800176d2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800176d6:	f2 08 0a 48 	lsr	r8,r9,r8
800176da:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  //Set_bits(LED_State, leds);
  Clr_bits(LED_State, leds);
  // While there are specified LEDs left to manage...
  while (leds)
800176de:	ee f8 ff f0 	ld.w	r8,r7[-16]
800176e2:	58 08       	cp.w	r8,0
800176e4:	cc 71       	brne	80017672 <LED_On+0x3e>
    led_gpio_port->ovrc  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
800176e6:	2f cd       	sub	sp,-16
800176e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800176ec:	80 01       	ld.sh	r1,r0[0x0]
800176ee:	74 c2       	ld.w	r2,r10[0x30]

800176f0 <LED_Toggle>:


void LED_Toggle(U32 leds)
{
800176f0:	eb cd 40 c0 	pushm	r6-r7,lr
800176f4:	1a 97       	mov	r7,sp
800176f6:	20 4d       	sub	sp,16
800176f8:	4a b6       	lddpc	r6,800177a4 <LED_Toggle+0xb4>
800176fa:	1e 26       	rsub	r6,pc
800176fc:	ef 4c ff f0 	st.w	r7[-16],r12
  // Use the LED descriptors to get the connections of a given LED to the MCU.
  tLED_DESCRIPTOR *led_descriptor = &LED_DESCRIPTOR[0] - 1;
80017700:	ec f8 01 bc 	ld.w	r8,r6[444]
80017704:	21 08       	sub	r8,16
80017706:	ef 48 ff f4 	st.w	r7[-12],r8
  volatile avr32_gpio_port_t *led_gpio_port;
  U8 led_shift;

  // Make sure only existing LEDs are specified.
  leds &= (1 << LED_COUNT) - 1;
8001770a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001770e:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017712:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);
80017716:	ec f8 00 f8 	ld.w	r8,r6[248]
8001771a:	70 09       	ld.w	r9,r8[0x0]
8001771c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017720:	10 59       	eor	r9,r8
80017722:	ec f8 00 f8 	ld.w	r8,r6[248]
80017726:	91 09       	st.w	r8[0x0],r9

  // While there are specified LEDs left to manage...
  while (leds)
80017728:	c3 78       	rjmp	80017796 <LED_Toggle+0xa6>
  {
    // Select the next specified LED and toggle it.
    led_shift = 1 + ctz(leds);
8001772a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001772e:	5c 98       	brev	r8
80017730:	f0 08 12 00 	clz	r8,r8
80017734:	5c 58       	castu.b	r8
80017736:	2f f8       	sub	r8,-1
80017738:	ef 68 ff ff 	st.b	r7[-1],r8
    led_descriptor += led_shift;
8001773c:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80017740:	a5 68       	lsl	r8,0x4
80017742:	ee f9 ff f4 	ld.w	r9,r7[-12]
80017746:	f2 08 00 08 	add	r8,r9,r8
8001774a:	ef 48 ff f4 	st.w	r7[-12],r8
    led_gpio_port = &AVR32_GPIO.port[led_descriptor->GPIO.PORT];
8001774e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017752:	70 08       	ld.w	r8,r8[0x0]
80017754:	a9 78       	lsl	r8,0x9
80017756:	e0 28 e0 00 	sub	r8,57344
8001775a:	ef 48 ff f8 	st.w	r7[-8],r8
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
8001775e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017762:	70 19       	ld.w	r9,r8[0x4]
80017764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017768:	f1 49 00 5c 	st.w	r8[92],r9
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
8001776c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017770:	70 19       	ld.w	r9,r8[0x4]
80017772:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017776:	f1 49 00 44 	st.w	r8[68],r9
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
8001777a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001777e:	70 19       	ld.w	r9,r8[0x4]
80017780:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017784:	91 19       	st.w	r8[0x4],r9
    leds >>= led_shift;
80017786:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001778a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001778e:	f2 08 0a 48 	lsr	r8,r9,r8
80017792:	ef 48 ff f0 	st.w	r7[-16],r8

  // Update the saved state of all LEDs with the requested changes.
  Tgl_bits(LED_State, leds);

  // While there are specified LEDs left to manage...
  while (leds)
80017796:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001779a:	58 08       	cp.w	r8,0
8001779c:	cc 71       	brne	8001772a <LED_Toggle+0x3a>
    led_gpio_port->ovrt  = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->oders = led_descriptor->GPIO.PIN_MASK;
    led_gpio_port->gpers = led_descriptor->GPIO.PIN_MASK;
    leds >>= led_shift;
  }
}
8001779e:	2f cd       	sub	sp,-16
800177a0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177a4:	80 01       	ld.sh	r1,r0[0x0]
800177a6:	75 7e       	ld.w	lr,r10[0x5c]

800177a8 <LED_Read_Display_Field>:


U32 LED_Read_Display_Field(U32 field)
{
800177a8:	eb cd 40 c0 	pushm	r6-r7,lr
800177ac:	1a 97       	mov	r7,sp
800177ae:	20 1d       	sub	sp,4
800177b0:	48 b6       	lddpc	r6,800177dc <LED_Read_Display_Field+0x34>
800177b2:	1e 26       	rsub	r6,pc
800177b4:	ef 4c ff fc 	st.w	r7[-4],r12
  return Rd_bitfield(LED_State, field);
800177b8:	ec f8 00 f8 	ld.w	r8,r6[248]
800177bc:	70 09       	ld.w	r9,r8[0x0]
800177be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177c2:	10 69       	and	r9,r8
800177c4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177c8:	5c 98       	brev	r8
800177ca:	f0 08 12 00 	clz	r8,r8
800177ce:	f2 08 0a 48 	lsr	r8,r9,r8
}
800177d2:	10 9c       	mov	r12,r8
800177d4:	2f fd       	sub	sp,-4
800177d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800177da:	00 00       	add	r0,r0
800177dc:	80 01       	ld.sh	r1,r0[0x0]
800177de:	76 36       	ld.w	r6,r11[0xc]

800177e0 <LED_Display_Field>:


void LED_Display_Field(U32 field, U32 leds)
{
800177e0:	eb cd 40 c0 	pushm	r6-r7,lr
800177e4:	1a 97       	mov	r7,sp
800177e6:	20 2d       	sub	sp,8
800177e8:	48 c6       	lddpc	r6,80017818 <LED_Display_Field+0x38>
800177ea:	1e 26       	rsub	r6,pc
800177ec:	ef 4c ff fc 	st.w	r7[-4],r12
800177f0:	ef 4b ff f8 	st.w	r7[-8],r11
  // Move the bit-field to the appropriate position for the bit-mask.
  LED_Display_Mask(field, leds << ctz(field));
800177f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800177f8:	5c 98       	brev	r8
800177fa:	f0 08 12 00 	clz	r8,r8
800177fe:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017802:	f2 08 09 48 	lsl	r8,r9,r8
80017806:	10 9b       	mov	r11,r8
80017808:	ee fc ff fc 	ld.w	r12,r7[-4]
8001780c:	f0 16 01 8b 	mcall	r6[1580]
}
80017810:	2f ed       	sub	sp,-8
80017812:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017816:	00 00       	add	r0,r0
80017818:	80 01       	ld.sh	r1,r0[0x0]
8001781a:	76 6e       	ld.w	lr,r11[0x18]

8001781c <LED_Get_Intensity>:


U8 LED_Get_Intensity(U32 led)
{
8001781c:	eb cd 40 80 	pushm	r7,lr
80017820:	1a 97       	mov	r7,sp
80017822:	20 1d       	sub	sp,4
80017824:	ef 4c ff fc 	st.w	r7[-4],r12
 // always return 0, UC3C don't have PWM connected to LED
 return 0;
80017828:	30 08       	mov	r8,0
}
8001782a:	10 9c       	mov	r12,r8
8001782c:	2f fd       	sub	sp,-4
8001782e:	e3 cd 80 80 	ldm	sp++,r7,pc

80017832 <LED_Set_Intensity>:


void LED_Set_Intensity(U32 leds, U8 intensity)
{
80017832:	eb cd 40 80 	pushm	r7,lr
80017836:	1a 97       	mov	r7,sp
80017838:	20 2d       	sub	sp,8
8001783a:	ef 4c ff fc 	st.w	r7[-4],r12
8001783e:	16 98       	mov	r8,r11
80017840:	ef 68 ff f8 	st.b	r7[-8],r8
 // always return, UC3C don't have PWM to modulate led intensity.
 return;
}
80017844:	2f ed       	sub	sp,-8
80017846:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

8001784c <init_radar_modules>:
#include "i2c_driver_int.h"
#include "print_util.h"

radar_target main_target;

void init_radar_modules() {
8001784c:	eb cd 40 c0 	pushm	r6-r7,lr
80017850:	1a 97       	mov	r7,sp
80017852:	48 66       	lddpc	r6,80017868 <init_radar_modules+0x1c>
80017854:	1e 26       	rsub	r6,pc
		.speed = 400000,
		.chip = 1,
		.smbus=false
	};

	twim_master_init(&AVR32_TWIM1, &twi_opt);
80017856:	ec fb 08 dc 	ld.w	r11,r6[2268]
8001785a:	fe 7c 3c 00 	mov	r12,-50176
8001785e:	f0 16 00 73 	mcall	r6[460]
}
80017862:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017866:	00 00       	add	r0,r0
80017868:	80 01       	ld.sh	r1,r0[0x0]
8001786a:	76 d8       	ld.w	r8,r11[0x34]
8001786c:	0a 00       	add	r0,r5

8001786e <read_radar>:


void read_radar() {
8001786e:	eb cd 40 c0 	pushm	r6-r7,lr
80017872:	1a 97       	mov	r7,sp
80017874:	20 1d       	sub	sp,4
80017876:	49 f6       	lddpc	r6,800178f0 <read_radar+0x82>
80017878:	1e 26       	rsub	r6,pc
	uint8_t output = 0;
8001787a:	30 08       	mov	r8,0
8001787c:	ef 68 ff ff 	st.b	r7[-1],r8
//	uint8_t input [8];
	twim_write(&AVR32_TWIM1, (uint8_t*) &output, 1, 1, false);
80017880:	ee cb 00 01 	sub	r11,r7,1
80017884:	30 08       	mov	r8,0
80017886:	30 19       	mov	r9,1
80017888:	30 1a       	mov	r10,1
8001788a:	fe 7c 3c 00 	mov	r12,-50176
8001788e:	f0 16 00 36 	mcall	r6[216]
	twim_read(&AVR32_TWIM1, (uint8_t*)&main_target, sizeof(main_target), 1, false);
80017892:	ec fb 02 80 	ld.w	r11,r6[640]
80017896:	30 08       	mov	r8,0
80017898:	30 19       	mov	r9,1
8001789a:	30 ca       	mov	r10,12
8001789c:	fe 7c 3c 00 	mov	r12,-50176
800178a0:	f0 16 00 62 	mcall	r6[392]
	
	dbg_print_num(main_target.velocity*100.0,10);
800178a4:	ec f8 02 80 	ld.w	r8,r6[640]
800178a8:	70 08       	ld.w	r8,r8[0x0]
800178aa:	10 9c       	mov	r12,r8
800178ac:	f0 16 00 02 	mcall	r6[8]
800178b0:	30 08       	mov	r8,0
800178b2:	fc 19 40 59 	movh	r9,0x4059
800178b6:	f0 16 00 03 	mcall	r6[12]
800178ba:	14 98       	mov	r8,r10
800178bc:	16 99       	mov	r9,r11
800178be:	10 9a       	mov	r10,r8
800178c0:	12 9b       	mov	r11,r9
800178c2:	f0 16 00 14 	mcall	r6[80]
800178c6:	18 98       	mov	r8,r12
800178c8:	30 ab       	mov	r11,10
800178ca:	10 9c       	mov	r12,r8
800178cc:	f0 16 00 04 	mcall	r6[16]
	dbg_print_num(main_target.amplitude,10);
800178d0:	ec f8 02 80 	ld.w	r8,r6[640]
800178d4:	70 18       	ld.w	r8,r8[0x4]
800178d6:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800178da:	30 ab       	mov	r11,10
800178dc:	10 9c       	mov	r12,r8
800178de:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
800178e2:	fe cc 00 76 	sub	r12,pc,118
800178e6:	f0 16 00 01 	mcall	r6[4]
	
}
800178ea:	2f fd       	sub	sp,-4
800178ec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800178f0:	80 01       	ld.sh	r1,r0[0x0]
800178f2:	76 fc       	ld.w	r12,r11[0x3c]

800178f4 <get_radar_main_target>:

radar_target* get_radar_main_target() {
800178f4:	eb cd 40 c0 	pushm	r6-r7,lr
800178f8:	1a 97       	mov	r7,sp
800178fa:	48 46       	lddpc	r6,80017908 <get_radar_main_target+0x14>
800178fc:	1e 26       	rsub	r6,pc
	return &main_target;
800178fe:	ec f8 02 80 	ld.w	r8,r6[640]
	
}
80017902:	10 9c       	mov	r12,r8
80017904:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017908:	80 01       	ld.sh	r1,r0[0x0]
8001790a:	77 80       	ld.w	r0,r11[0x60]

8001790c <init_Servos>:
#define SERVO_PERIOD (SERVO_TIMER_FREQ/SERVO_REPEAT_FREQ)
#define SERVO_CENTER_DUTY_TICKS 1500//(SERVO_CENTER_DUTY_MICROSEC*SERVO_TIMER_FREQ/1000000)



void init_Servos(void){
8001790c:	eb cd 40 c0 	pushm	r6-r7,lr
80017910:	1a 97       	mov	r7,sp
80017912:	20 1d       	sub	sp,4
80017914:	4c b6       	lddpc	r6,80017a40 <init_Servos+0x134>
80017916:	1e 26       	rsub	r6,pc
      int i;
	  // unlock registers
	  AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017918:	fe 78 4c 00 	mov	r8,-46080
8001791c:	e0 69 4d 04 	mov	r9,19716
80017920:	ea 19 50 57 	orh	r9,0x5057
80017924:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG0_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017928:	fe 78 4c 00 	mov	r8,-46080
8001792c:	e0 69 4d 08 	mov	r9,19720
80017930:	ea 19 50 57 	orh	r9,0x5057
80017934:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG1_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017938:	fe 78 4c 00 	mov	r8,-46080
8001793c:	e0 69 4d 10 	mov	r9,19728
80017940:	ea 19 50 57 	orh	r9,0x5057
80017944:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG2_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
      AVR32_PWM.wpcr = (AVR32_PWM_WPCR_WPKEY_KEY   << AVR32_PWM_WPCR_WPKEY) |
80017948:	fe 78 4c 00 	mov	r8,-46080
8001794c:	e0 69 4d 20 	mov	r9,19744
80017950:	ea 19 50 57 	orh	r9,0x5057
80017954:	f1 49 00 e4 	st.w	r8[228],r9
	          AVR32_PWM_WPCR_WPRG3_MASK                            |
	          (AVR32_PWM_WPCR_WPCMD_SWDIS << AVR32_PWM_WPCR_WPCMD);      
    // clock setup  
	AVR32_PWM.clk =
80017958:	fe 78 4c 00 	mov	r8,-46080
8001795c:	e0 69 06 01 	mov	r9,1537
80017960:	ea 19 06 01 	orh	r9,0x601
80017964:	91 09       	st.w	r8[0x0],r9
    ( 6 <<AVR32_PWM_PREA_OFFSET) |  // /64
    ( 6 <<AVR32_PWM_PREB_OFFSET) |  // /64
    ( 0 <<AVR32_PWM_CLKSEL_OFFSET);

	// output override for low and high side
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80017966:	fe 78 4c 00 	mov	r8,-46080
8001796a:	30 fa       	mov	r10,15
8001796c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017970:	f4 09 09 4a 	lsl	r10,r10,r9
80017974:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017978:	2f 09       	sub	r9,-16
8001797a:	30 fb       	mov	r11,15
8001797c:	f6 09 09 49 	lsl	r9,r11,r9
80017980:	f5 e9 10 09 	or	r9,r10,r9
80017984:	f1 49 00 44 	st.w	r8[68],r9
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
80017988:	fe 78 4c 00 	mov	r8,-46080
8001798c:	30 fa       	mov	r10,15
8001798e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017992:	f4 09 09 4a 	lsl	r10,r10,r9
80017996:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001799a:	2f 09       	sub	r9,-16
8001799c:	30 fb       	mov	r11,15
8001799e:	f6 09 09 49 	lsl	r9,r11,r9
800179a2:	f5 e9 10 09 	or	r9,r10,r9
800179a6:	f1 49 00 50 	st.w	r8[80],r9
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
800179aa:	30 08       	mov	r8,0
800179ac:	ef 48 ff fc 	st.w	r7[-4],r8
800179b0:	c3 78       	rjmp	80017a1e <init_Servos+0x112>
		// enable dead time, set channel clock to CLKA
		AVR32_PWM.channel[i].cmr=AVR32_PWM_CMR0_DTE_MASK | 11;
800179b2:	fe 79 4c 00 	mov	r9,-46080
800179b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179ba:	2f 08       	sub	r8,-16
800179bc:	a5 78       	lsl	r8,0x5
800179be:	f2 08 00 08 	add	r8,r9,r8
800179c2:	e0 79 00 0b 	mov	r9,65547
800179c6:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cprd=10000;
800179c8:	fe 79 4c 00 	mov	r9,-46080
800179cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179d0:	a5 78       	lsl	r8,0x5
800179d2:	f2 08 00 08 	add	r8,r9,r8
800179d6:	f0 c8 fd f4 	sub	r8,r8,-524
800179da:	e0 69 27 10 	mov	r9,10000
800179de:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].cdty=4000;
800179e0:	fe 79 4c 00 	mov	r9,-46080
800179e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800179e8:	a5 78       	lsl	r8,0x5
800179ea:	f2 08 00 08 	add	r8,r9,r8
800179ee:	f0 c8 fd fc 	sub	r8,r8,-516
800179f2:	e0 69 0f a0 	mov	r9,4000
800179f6:	91 09       	st.w	r8[0x0],r9
		AVR32_PWM.channel[i].dt= 1000<<16 | 1000;
800179f8:	fe 79 4c 00 	mov	r9,-46080
800179fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a00:	a5 78       	lsl	r8,0x5
80017a02:	f2 08 00 08 	add	r8,r9,r8
80017a06:	f0 c8 fd e8 	sub	r8,r8,-536
80017a0a:	e0 69 03 e8 	mov	r9,1000
80017a0e:	ea 19 03 e8 	orh	r9,0x3e8
80017a12:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.oov  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	// output selection clear: dead time generator (0)
	AVR32_PWM.osc  = ( 0b1111 <<(AVR32_PWM_OOVH0_OFFSET+i))|( 0b1111 <<(AVR32_PWM_OOVL0_OFFSET+i)); 
	
	// set up channels: enable dead time insertion
	for (i=0; i<4; i++) {
80017a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a18:	2f f8       	sub	r8,-1
80017a1a:	ef 48 ff fc 	st.w	r7[-4],r8
80017a1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017a22:	58 38       	cp.w	r8,3
80017a24:	fe 9a ff c7 	brle	800179b2 <init_Servos+0xa6>
    {AVR32_PWM_PWML_3_0_PIN, AVR32_PWM_PWML_3_0_FUNCTION},
    {AVR32_PWM_PWMH_1_0_PIN, AVR32_PWM_PWMH_1_0_FUNCTION},
    {AVR32_PWM_PWMH_2_0_PIN, AVR32_PWM_PWMH_2_0_FUNCTION},
    {AVR32_PWM_PWMH_3_0_PIN, AVR32_PWM_PWMH_3_0_FUNCTION}
    };			
	gpio_enable_module(PWM_GPIO_MAP, sizeof(PWM_GPIO_MAP) / sizeof(PWM_GPIO_MAP[0]));
80017a28:	30 6b       	mov	r11,6
80017a2a:	ec fc 08 d8 	ld.w	r12,r6[2264]
80017a2e:	f0 16 00 96 	mcall	r6[600]
	// enable
	AVR32_PWM.ena=0b1111;
80017a32:	fe 78 4c 00 	mov	r8,-46080
80017a36:	30 f9       	mov	r9,15
80017a38:	91 19       	st.w	r8[0x4],r9
	
	
}
80017a3a:	2f fd       	sub	sp,-4
80017a3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017a40:	80 01       	ld.sh	r1,r0[0x0]
80017a42:	77 9a       	ld.w	r10,r11[0x64]

80017a44 <set_servo>:

void set_servo(int channel, int val_a, int val_b){
80017a44:	eb cd 40 80 	pushm	r7,lr
80017a48:	1a 97       	mov	r7,sp
80017a4a:	20 6d       	sub	sp,24
80017a4c:	ef 4c ff f0 	st.w	r7[-16],r12
80017a50:	ef 4b ff ec 	st.w	r7[-20],r11
80017a54:	ef 4a ff e8 	st.w	r7[-24],r10
	int duty_a=val_a+SERVO_CENTER_DUTY_TICKS;
80017a58:	ee f8 ff ec 	ld.w	r8,r7[-20]
80017a5c:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a60:	ef 48 ff f4 	st.w	r7[-12],r8
	int duty_b=val_b+SERVO_CENTER_DUTY_TICKS;
80017a64:	ee f8 ff e8 	ld.w	r8,r7[-24]
80017a68:	f0 c8 fa 24 	sub	r8,r8,-1500
80017a6c:	ef 48 ff f8 	st.w	r7[-8],r8
	int deadtime=(SERVO_PERIOD-duty_a-duty_b)/2;
80017a70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80017a74:	e0 69 13 88 	mov	r9,5000
80017a78:	10 19       	sub	r9,r8
80017a7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80017a7e:	f2 08 01 08 	sub	r8,r9,r8
80017a82:	f0 09 16 1f 	lsr	r9,r8,0x1f
80017a86:	f2 08 00 08 	add	r8,r9,r8
80017a8a:	a1 58       	asr	r8,0x1
80017a8c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PWM.channel[channel &0b11].cprdupd=SERVO_PERIOD;
80017a90:	fe 79 4c 00 	mov	r9,-46080
80017a94:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017a98:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017a9c:	a5 78       	lsl	r8,0x5
80017a9e:	f2 08 00 08 	add	r8,r9,r8
80017aa2:	f0 c8 fd f0 	sub	r8,r8,-528
80017aa6:	e0 69 13 88 	mov	r9,5000
80017aaa:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].cdtyupd=duty_a+deadtime;
80017aac:	fe 7a 4c 00 	mov	r10,-46080
80017ab0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ab4:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017ab8:	ee fb ff f4 	ld.w	r11,r7[-12]
80017abc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ac0:	f6 09 00 09 	add	r9,r11,r9
80017ac4:	a5 78       	lsl	r8,0x5
80017ac6:	f4 08 00 08 	add	r8,r10,r8
80017aca:	f0 c8 fd f8 	sub	r8,r8,-520
80017ace:	91 09       	st.w	r8[0x0],r9
	AVR32_PWM.channel[channel &0b11].dtupd= deadtime<<16 | deadtime;	
80017ad0:	fe 7a 4c 00 	mov	r10,-46080
80017ad4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80017ad8:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80017adc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ae0:	f2 0b 15 10 	lsl	r11,r9,0x10
80017ae4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017ae8:	f7 e9 10 09 	or	r9,r11,r9
80017aec:	a5 78       	lsl	r8,0x5
80017aee:	f4 08 00 08 	add	r8,r10,r8
80017af2:	f0 c8 fd e4 	sub	r8,r8,-540
80017af6:	91 09       	st.w	r8[0x0],r9
}
80017af8:	2f ad       	sub	sp,-24
80017afa:	e3 cd 80 80 	ldm	sp++,r7,pc

80017afe <set_servos>:


void set_servos(servo_output *servo_outputs) {
80017afe:	eb cd 40 c0 	pushm	r6-r7,lr
80017b02:	1a 97       	mov	r7,sp
80017b04:	20 1d       	sub	sp,4
80017b06:	49 76       	lddpc	r6,80017b60 <set_servos+0x62>
80017b08:	1e 26       	rsub	r6,pc
80017b0a:	ef 4c ff fc 	st.w	r7[-4],r12
		set_servo(0, servo_outputs[0].value, servo_outputs[1].value);
		set_servo(1, servo_outputs[2].value, servo_outputs[3].value);
		set_servo(2, servo_outputs[4].value, servo_outputs[5].value);
		set_servo(3, servo_outputs[6].value, servo_outputs[7].value);
	#else
		set_servo(1, servo_outputs[0].value, servo_outputs[1].value);
80017b0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b12:	2f 08       	sub	r8,-16
80017b14:	70 09       	ld.w	r9,r8[0x0]
80017b16:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b1a:	70 08       	ld.w	r8,r8[0x0]
80017b1c:	12 9a       	mov	r10,r9
80017b1e:	10 9b       	mov	r11,r8
80017b20:	30 1c       	mov	r12,1
80017b22:	f0 16 00 c8 	mcall	r6[800]
		set_servo(2, servo_outputs[2].value, servo_outputs[3].value);
80017b26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b2a:	2d 08       	sub	r8,-48
80017b2c:	70 09       	ld.w	r9,r8[0x0]
80017b2e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b32:	2e 08       	sub	r8,-32
80017b34:	70 08       	ld.w	r8,r8[0x0]
80017b36:	12 9a       	mov	r10,r9
80017b38:	10 9b       	mov	r11,r8
80017b3a:	30 2c       	mov	r12,2
80017b3c:	f0 16 00 c8 	mcall	r6[800]
		set_servo(3, servo_outputs[4].value, servo_outputs[5].value);
80017b40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b44:	2b 08       	sub	r8,-80
80017b46:	70 09       	ld.w	r9,r8[0x0]
80017b48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017b4c:	2c 08       	sub	r8,-64
80017b4e:	70 08       	ld.w	r8,r8[0x0]
80017b50:	12 9a       	mov	r10,r9
80017b52:	10 9b       	mov	r11,r8
80017b54:	30 3c       	mov	r12,3
80017b56:	f0 16 00 c8 	mcall	r6[800]
	#endif
	
}
80017b5a:	2f fd       	sub	sp,-4
80017b5c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017b60:	80 01       	ld.sh	r1,r0[0x0]
80017b62:	79 8c       	ld.w	r12,r12[0x60]

80017b64 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80017b64:	eb cd 40 80 	pushm	r7,lr
80017b68:	1a 97       	mov	r7,sp
80017b6a:	20 1d       	sub	sp,4
80017b6c:	18 98       	mov	r8,r12
80017b6e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80017b72:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017b76:	58 38       	cp.w	r8,3
80017b78:	c1 20       	breq	80017b9c <osc_get_rate+0x38>
80017b7a:	e0 89 00 07 	brgt	80017b88 <osc_get_rate+0x24>
80017b7e:	58 08       	cp.w	r8,0
80017b80:	c0 90       	breq	80017b92 <osc_get_rate+0x2e>
80017b82:	58 28       	cp.w	r8,2
80017b84:	c0 f0       	breq	80017ba2 <osc_get_rate+0x3e>
80017b86:	c1 b8       	rjmp	80017bbc <osc_get_rate+0x58>
80017b88:	58 48       	cp.w	r8,4
80017b8a:	c1 10       	breq	80017bac <osc_get_rate+0x48>
80017b8c:	58 58       	cp.w	r8,5
80017b8e:	c1 40       	breq	80017bb6 <osc_get_rate+0x52>
80017b90:	c1 68       	rjmp	80017bbc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80017b92:	e0 68 24 00 	mov	r8,9216
80017b96:	ea 18 00 f4 	orh	r8,0xf4
80017b9a:	c1 28       	rjmp	80017bbe <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80017b9c:	e0 68 80 00 	mov	r8,32768
80017ba0:	c0 f8       	rjmp	80017bbe <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80017ba2:	e0 68 12 00 	mov	r8,4608
80017ba6:	ea 18 00 7a 	orh	r8,0x7a
80017baa:	c0 a8       	rjmp	80017bbe <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80017bac:	e0 68 0e 00 	mov	r8,3584
80017bb0:	ea 18 07 27 	orh	r8,0x727
80017bb4:	c0 58       	rjmp	80017bbe <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80017bb6:	e0 78 c1 38 	mov	r8,115000
80017bba:	c0 28       	rjmp	80017bbe <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80017bbc:	30 08       	mov	r8,0
	}
}
80017bbe:	10 9c       	mov	r12,r8
80017bc0:	2f fd       	sub	sp,-4
80017bc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80017bc6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80017bc6:	eb cd 40 c0 	pushm	r6-r7,lr
80017bca:	1a 97       	mov	r7,sp
80017bcc:	48 56       	lddpc	r6,80017be0 <sysclk_get_main_hz+0x1a>
80017bce:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80017bd0:	30 0c       	mov	r12,0
80017bd2:	cc 9f       	rcall	80017b64 <osc_get_rate>
80017bd4:	18 98       	mov	r8,r12
80017bd6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80017bd8:	10 9c       	mov	r12,r8
80017bda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bde:	00 00       	add	r0,r0
80017be0:	80 01       	ld.sh	r1,r0[0x0]
80017be2:	7a 52       	ld.w	r2,sp[0x14]

80017be4 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80017be4:	eb cd 40 c0 	pushm	r6-r7,lr
80017be8:	1a 97       	mov	r7,sp
80017bea:	48 46       	lddpc	r6,80017bf8 <sysclk_get_cpu_hz+0x14>
80017bec:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80017bee:	ce cf       	rcall	80017bc6 <sysclk_get_main_hz>
80017bf0:	18 98       	mov	r8,r12
}
80017bf2:	10 9c       	mov	r12,r8
80017bf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017bf8:	80 01       	ld.sh	r1,r0[0x0]
80017bfa:	7a 70       	ld.w	r0,sp[0x1c]

80017bfc <spectrum_handler>:
Spektrum_Receiver_t spRec2;

int16_t channelCenter[16];


ISR(spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INTLEV_INT1) {
80017bfc:	eb cd 40 c0 	pushm	r6-r7,lr
80017c00:	1a 97       	mov	r7,sp
80017c02:	20 3d       	sub	sp,12
80017c04:	4c 36       	lddpc	r6,80017d10 <spectrum_handler+0x114>
80017c06:	1e 26       	rsub	r6,pc
	uint8_t c1, c2, i;
	uint16_t sw;
	uint32_t now =get_time_ticks() ;
80017c08:	f0 16 00 2d 	mcall	r6[180]
80017c0c:	18 98       	mov	r8,r12
80017c0e:	ef 48 ff fc 	st.w	r7[-4],r8
	if (REMOTE_UART.csr & AVR32_USART_CSR_RXRDY_MASK) {
80017c12:	fc 78 14 00 	mov	r8,-191488
80017c16:	70 58       	ld.w	r8,r8[0x14]
80017c18:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80017c1c:	5c 58       	castu.b	r8
80017c1e:	c7 50       	breq	80017d08 <spectrum_handler+0x10c>
		spRec1.duration=now-spRec1.last_time;
80017c20:	ec f8 00 84 	ld.w	r8,r6[132]
80017c24:	f0 f8 01 2c 	ld.w	r8,r8[300]
80017c28:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017c2c:	10 19       	sub	r9,r8
80017c2e:	ec f8 00 84 	ld.w	r8,r6[132]
80017c32:	f1 49 01 30 	st.w	r8[304],r9
		spRec1.last_time=now;
80017c36:	ec f8 00 84 	ld.w	r8,r6[132]
80017c3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017c3e:	f1 49 01 2c 	st.w	r8[300],r9
//		putstring(STDOUT, "!");
		//receiveInterruptHandler(&spRec1.receiver);
		if ((spRec1.duration>2500)) {
80017c42:	ec f8 00 84 	ld.w	r8,r6[132]
80017c46:	f0 f8 01 30 	ld.w	r8,r8[304]
80017c4a:	e0 48 09 c4 	cp.w	r8,2500
80017c4e:	e0 88 00 06 	brls	80017c5a <spectrum_handler+0x5e>
			buffer_clear(&spRec1.receiver);
80017c52:	ec fc 00 84 	ld.w	r12,r6[132]
80017c56:	f0 16 02 0a 	mcall	r6[2088]
		}
		c1=(uint8_t)REMOTE_UART.rhr;
80017c5a:	fc 78 14 00 	mov	r8,-191488
80017c5e:	70 68       	ld.w	r8,r8[0x18]
80017c60:	ef 68 ff f7 	st.b	r7[-9],r8
		buffer_put(&spRec1.receiver, c1);
80017c64:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017c68:	10 9b       	mov	r11,r8
80017c6a:	ec fc 00 84 	ld.w	r12,r6[132]
80017c6e:	f0 16 00 55 	mcall	r6[340]
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
80017c72:	ec fc 00 84 	ld.w	r12,r6[132]
80017c76:	f0 16 00 2e 	mcall	r6[184]
80017c7a:	18 98       	mov	r8,r12
80017c7c:	59 08       	cp.w	r8,16
80017c7e:	c4 51       	brne	80017d08 <spectrum_handler+0x10c>
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017c80:	30 08       	mov	r8,0
80017c82:	ef 68 ff f9 	st.b	r7[-7],r8
80017c86:	c3 a8       	rjmp	80017cfa <spectrum_handler+0xfe>
				c1=buffer_get(&spRec1.receiver);
80017c88:	ec fc 00 84 	ld.w	r12,r6[132]
80017c8c:	f0 16 00 45 	mcall	r6[276]
80017c90:	18 98       	mov	r8,r12
80017c92:	ef 68 ff f7 	st.b	r7[-9],r8
				c2=buffer_get(&spRec1.receiver);
80017c96:	ec fc 00 84 	ld.w	r12,r6[132]
80017c9a:	f0 16 00 45 	mcall	r6[276]
80017c9e:	18 98       	mov	r8,r12
80017ca0:	ef 68 ff f8 	st.b	r7[-8],r8
				sw=((uint16_t)c1)*256 +((uint16_t)c2);
80017ca4:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017ca8:	a9 68       	lsl	r8,0x8
80017caa:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80017cae:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017cb2:	f2 08 00 08 	add	r8,r9,r8
80017cb6:	ef 58 ff fa 	st.h	r7[-6],r8
				//if (c1 & 0x80==0)
				spRec1.channels[(c1 & 0x3c)>>2]=sw&0x3ff;
80017cba:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017cbe:	e2 18 00 3c 	andl	r8,0x3c,COH
80017cc2:	f0 0a 14 02 	asr	r10,r8,0x2
80017cc6:	ef 08 ff fa 	ld.sh	r8,r7[-6]
80017cca:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80017cce:	ec f9 00 84 	ld.w	r9,r6[132]
80017cd2:	f4 ca ff 7e 	sub	r10,r10,-130
80017cd6:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
				//spRec1.channels[i]=sw&0x3ff;
				spRec1.valid=1;
80017cda:	ec f9 00 84 	ld.w	r9,r6[132]
80017cde:	30 18       	mov	r8,1
80017ce0:	f3 68 01 28 	st.b	r9[296],r8
				spRec1.last_update=now;
80017ce4:	ec f8 00 84 	ld.w	r8,r6[132]
80017ce8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80017cec:	f1 49 01 24 	st.w	r8[292],r9
		

		if (buffer_bytes_available(&spRec1.receiver)==16) {
			//PORTC.OUT = _BV(5);
			//putstring(STDOUT, "!");
			for (i=0; i<8; i++) {
80017cf0:	ef 38 ff f9 	ld.ub	r8,r7[-7]
80017cf4:	2f f8       	sub	r8,-1
80017cf6:	ef 68 ff f9 	st.b	r7[-7],r8
80017cfa:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80017cfe:	30 78       	mov	r8,7
80017d00:	f0 09 18 00 	cp.b	r9,r8
80017d04:	fe 98 ff c2 	brls	80017c88 <spectrum_handler+0x8c>
				spRec1.valid=1;
				spRec1.last_update=now;
			}
		}
	}		
}
80017d08:	2f dd       	sub	sp,-12
80017d0a:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80017d0e:	d6 03       	rete
80017d10:	80 01       	ld.sh	r1,r0[0x0]
80017d12:	7a 8a       	ld.w	r10,sp[0x20]

80017d14 <rc_init>:

void rc_init (void) {
80017d14:	eb cd 40 c0 	pushm	r6-r7,lr
80017d18:	1a 97       	mov	r7,sp
80017d1a:	20 1d       	sub	sp,4
80017d1c:	4a 96       	lddpc	r6,80017dc0 <rc_init+0xac>
80017d1e:	1e 26       	rsub	r6,pc
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017d20:	30 08       	mov	r8,0
80017d22:	ef 48 ff fc 	st.w	r7[-4],r8
80017d26:	c2 18       	rjmp	80017d68 <rc_init+0x54>
		spRec1.channels[i]=500;
80017d28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d2c:	ec f9 00 84 	ld.w	r9,r6[132]
80017d30:	f0 ca ff 7e 	sub	r10,r8,-130
80017d34:	e0 68 01 f4 	mov	r8,500
80017d38:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec2.channels[i]=500;
80017d3c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d40:	ec f9 01 78 	ld.w	r9,r6[376]
80017d44:	f0 ca ff 7e 	sub	r10,r8,-130
80017d48:	e0 68 01 f4 	mov	r8,500
80017d4c:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		channelCenter[i]=0;
80017d50:	ee fa ff fc 	ld.w	r10,r7[-4]
80017d54:	ec f9 02 d8 	ld.w	r9,r6[728]
80017d58:	30 08       	mov	r8,0
80017d5a:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
   {
    {AVR32_USART1_RXD_0_1_PIN, AVR32_USART1_RXD_0_1_FUNCTION}
   ,{AVR32_USART1_TXD_0_1_PIN, AVR32_USART1_TXD_0_1_FUNCTION}
   };
	int i;
	for (i=0; i<16; i++) {
80017d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d62:	2f f8       	sub	r8,-1
80017d64:	ef 48 ff fc 	st.w	r7[-4],r8
80017d68:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017d6c:	58 f8       	cp.w	r8,15
80017d6e:	fe 9a ff dd 	brle	80017d28 <rc_init+0x14>
		spRec1.channels[i]=500;
		spRec2.channels[i]=500;
		channelCenter[i]=0;
	}
	spRec1.channels[RC_THROTTLE]=0;
80017d72:	ec f9 00 84 	ld.w	r9,r6[132]
80017d76:	30 08       	mov	r8,0
80017d78:	f3 58 01 04 	st.h	r9[260],r8
	spRec2.channels[RC_THROTTLE]=0;
80017d7c:	ec f9 01 78 	ld.w	r9,r6[376]
80017d80:	30 08       	mov	r8,0
80017d82:	f3 58 01 04 	st.h	r9[260],r8
	 // USART options.
	 
    // Assign GPIO pins to USART_0.
    gpio_enable_module(USART_GPIO_MAP,
80017d86:	30 2b       	mov	r11,2
80017d88:	ec fc 08 d4 	ld.w	r12,r6[2260]
80017d8c:	f0 16 00 96 	mcall	r6[600]
                     sizeof(USART_GPIO_MAP) / sizeof(USART_GPIO_MAP[0]));
	
    // Initialize the USART in RS232 mode.
    usart_init_rs232( (&REMOTE_UART), &usart_opt, sysclk_get_cpu_hz());
80017d90:	c2 af       	rcall	80017be4 <sysclk_get_cpu_hz>
80017d92:	18 98       	mov	r8,r12
80017d94:	10 9a       	mov	r10,r8
80017d96:	ec fb 08 d0 	ld.w	r11,r6[2256]
80017d9a:	fc 7c 14 00 	mov	r12,-191488
80017d9e:	f0 16 00 6b 	mcall	r6[428]
	INTC_register_interrupt( (__int_handler) &spectrum_handler, AVR32_USART1_IRQ, AVR32_INTC_INT1);
80017da2:	30 1a       	mov	r10,1
80017da4:	e0 6b 02 80 	mov	r11,640
80017da8:	fe cc 01 ac 	sub	r12,pc,428
80017dac:	f0 16 00 3b 	mcall	r6[236]
	REMOTE_UART.ier=AVR32_USART_IER_RXRDY_MASK;
80017db0:	fc 78 14 00 	mov	r8,-191488
80017db4:	30 19       	mov	r9,1
80017db6:	91 29       	st.w	r8[0x8],r9
	//initUART_RX(&spRec1.receiver,  &USARTC1, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);
	//initUART_RX(&spRec2.receiver,  &USARTD0, USART_RXCINTLVL_LO_gc, BSEL_SPEKTRUM);

}
80017db8:	2f fd       	sub	sp,-4
80017dba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017dbe:	00 00       	add	r0,r0
80017dc0:	80 01       	ld.sh	r1,r0[0x0]
80017dc2:	7b a2       	ld.w	r2,sp[0x68]

80017dc4 <rc_get_channel>:
/**/
int16_t rc_get_channel(uint8_t index) {
80017dc4:	eb cd 40 c0 	pushm	r6-r7,lr
80017dc8:	1a 97       	mov	r7,sp
80017dca:	20 1d       	sub	sp,4
80017dcc:	48 b6       	lddpc	r6,80017df8 <rc_get_channel+0x34>
80017dce:	1e 26       	rsub	r6,pc
80017dd0:	18 98       	mov	r8,r12
80017dd2:	ef 68 ff fc 	st.b	r7[-4],r8
	//if (checkReceiver1()<checkReceiver2()) {
		return spRec1.channels[index]-500;
80017dd6:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80017dda:	ec f8 00 84 	ld.w	r8,r6[132]
80017dde:	f2 c9 ff 7e 	sub	r9,r9,-130
80017de2:	f0 09 04 18 	ld.sh	r8,r8[r9<<0x1]
80017de6:	f0 c8 01 f4 	sub	r8,r8,500
80017dea:	5c 88       	casts.h	r8
80017dec:	5c 88       	casts.h	r8
	//} else {
	//	return spRec2.channels[index]-500;
	//}
}
80017dee:	10 9c       	mov	r12,r8
80017df0:	2f fd       	sub	sp,-4
80017df2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017df6:	00 00       	add	r0,r0
80017df8:	80 01       	ld.sh	r1,r0[0x0]
80017dfa:	7c 52       	ld.w	r2,lr[0x14]

80017dfc <rc_get_channel_neutral>:

int16_t rc_get_channel_neutral(uint8_t index) {
80017dfc:	eb cd 40 e0 	pushm	r5-r7,lr
80017e00:	1a 97       	mov	r7,sp
80017e02:	20 2d       	sub	sp,8
80017e04:	4a 36       	lddpc	r6,80017e90 <rc_get_channel_neutral+0x94>
80017e06:	1e 26       	rsub	r6,pc
80017e08:	18 98       	mov	r8,r12
80017e0a:	ef 68 ff f8 	st.b	r7[-8],r8
	int16_t value=rc_get_channel(index)-channelCenter[index];
80017e0e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80017e12:	10 9c       	mov	r12,r8
80017e14:	f0 16 00 1c 	mcall	r6[112]
80017e18:	18 98       	mov	r8,r12
80017e1a:	10 99       	mov	r9,r8
80017e1c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80017e20:	ec f8 02 d8 	ld.w	r8,r6[728]
80017e24:	f0 0a 04 18 	ld.sh	r8,r8[r10<<0x1]
80017e28:	f2 08 01 08 	sub	r8,r9,r8
80017e2c:	5c 88       	casts.h	r8
80017e2e:	ef 58 ff fe 	st.h	r7[-2],r8
	// clamp to dead zone
	if ((value>-DEADZONE)&&(value<DEADZONE)) value=0;
80017e32:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017e36:	10 9c       	mov	r12,r8
80017e38:	f0 16 00 1a 	mcall	r6[104]
80017e3c:	14 98       	mov	r8,r10
80017e3e:	16 99       	mov	r9,r11
80017e40:	30 05       	mov	r5,0
80017e42:	30 0a       	mov	r10,0
80017e44:	fc 1b c0 3e 	movh	r11,0xc03e
80017e48:	f0 16 00 1e 	mcall	r6[120]
80017e4c:	18 98       	mov	r8,r12
80017e4e:	58 08       	cp.w	r8,0
80017e50:	c0 20       	breq	80017e54 <rc_get_channel_neutral+0x58>
80017e52:	30 15       	mov	r5,1
80017e54:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e58:	c1 60       	breq	80017e84 <rc_get_channel_neutral+0x88>
80017e5a:	ef 08 ff fe 	ld.sh	r8,r7[-2]
80017e5e:	10 9c       	mov	r12,r8
80017e60:	f0 16 00 1a 	mcall	r6[104]
80017e64:	30 05       	mov	r5,0
80017e66:	30 08       	mov	r8,0
80017e68:	fc 19 40 3e 	movh	r9,0x403e
80017e6c:	f0 16 00 1e 	mcall	r6[120]
80017e70:	18 98       	mov	r8,r12
80017e72:	58 08       	cp.w	r8,0
80017e74:	c0 20       	breq	80017e78 <rc_get_channel_neutral+0x7c>
80017e76:	30 15       	mov	r5,1
80017e78:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80017e7c:	c0 40       	breq	80017e84 <rc_get_channel_neutral+0x88>
80017e7e:	30 08       	mov	r8,0
80017e80:	ef 58 ff fe 	st.h	r7[-2],r8
	return value;
80017e84:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
80017e88:	10 9c       	mov	r12,r8
80017e8a:	2f ed       	sub	sp,-8
80017e8c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017e90:	80 01       	ld.sh	r1,r0[0x0]
80017e92:	7c 8a       	ld.w	r10,lr[0x20]

80017e94 <rc_center_channel>:

void rc_center_channel(uint8_t index){
80017e94:	eb cd 40 e0 	pushm	r5-r7,lr
80017e98:	1a 97       	mov	r7,sp
80017e9a:	20 1d       	sub	sp,4
80017e9c:	48 a6       	lddpc	r6,80017ec4 <rc_center_channel+0x30>
80017e9e:	1e 26       	rsub	r6,pc
80017ea0:	18 98       	mov	r8,r12
80017ea2:	ef 68 ff fc 	st.b	r7[-4],r8
	channelCenter[index]=rc_get_channel(index);
80017ea6:	ef 35 ff fc 	ld.ub	r5,r7[-4]
80017eaa:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80017eae:	10 9c       	mov	r12,r8
80017eb0:	f0 16 00 1c 	mcall	r6[112]
80017eb4:	18 98       	mov	r8,r12
80017eb6:	ec f9 02 d8 	ld.w	r9,r6[728]
80017eba:	f2 05 0a 18 	st.h	r9[r5<<0x1],r8
}
80017ebe:	2f fd       	sub	sp,-4
80017ec0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80017ec4:	80 01       	ld.sh	r1,r0[0x0]
80017ec6:	7d 22       	ld.w	r2,lr[0x48]

80017ec8 <checkReceiver1>:

int8_t checkReceiver1() {
80017ec8:	eb cd 40 c0 	pushm	r6-r7,lr
80017ecc:	1a 97       	mov	r7,sp
80017ece:	20 3d       	sub	sp,12
80017ed0:	4b 56       	lddpc	r6,80017fa4 <checkReceiver1+0xdc>
80017ed2:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = get_time_ticks();
80017ed4:	f0 16 00 2d 	mcall	r6[180]
80017ed8:	18 98       	mov	r8,r12
80017eda:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration=now-spRec1.last_update;
80017ede:	ec f8 00 84 	ld.w	r8,r6[132]
80017ee2:	f0 f8 01 24 	ld.w	r8,r8[292]
80017ee6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017eea:	10 19       	sub	r9,r8
80017eec:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec1.valid==0) return -2;
80017ef0:	ec f8 00 84 	ld.w	r8,r6[132]
80017ef4:	f1 38 01 28 	ld.ub	r8,r8[296]
80017ef8:	58 08       	cp.w	r8,0
80017efa:	c0 41       	brne	80017f02 <checkReceiver1+0x3a>
80017efc:	e0 68 00 fe 	mov	r8,254
80017f00:	c4 d8       	rjmp	80017f9a <checkReceiver1+0xd2>
	if (duration<100000) {
80017f02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f06:	e0 58 86 9f 	cp.w	r8,99999
80017f0a:	e0 8b 00 04 	brhi	80017f12 <checkReceiver1+0x4a>
		return 1;
80017f0e:	30 18       	mov	r8,1
80017f10:	c4 58       	rjmp	80017f9a <checkReceiver1+0xd2>
	} else
	if (duration<1500000) {
80017f12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017f16:	e0 69 e3 5f 	mov	r9,58207
80017f1a:	ea 19 00 16 	orh	r9,0x16
80017f1e:	12 38       	cp.w	r8,r9
80017f20:	e0 8b 00 17 	brhi	80017f4e <checkReceiver1+0x86>
		spRec1.channels[RC_ROLL]=500;	
80017f24:	ec f9 00 84 	ld.w	r9,r6[132]
80017f28:	e0 68 01 f4 	mov	r8,500
80017f2c:	f3 58 01 06 	st.h	r9[262],r8
		spRec1.channels[RC_PITCH]=500;	
80017f30:	ec f9 00 84 	ld.w	r9,r6[132]
80017f34:	e0 68 01 f4 	mov	r8,500
80017f38:	f3 58 01 08 	st.h	r9[264],r8
		spRec1.channels[RC_YAW]=500;	
80017f3c:	ec f9 00 84 	ld.w	r9,r6[132]
80017f40:	e0 68 01 f4 	mov	r8,500
80017f44:	f3 58 01 0a 	st.h	r9[266],r8
		return -1; // brief drop out - hold pattern
80017f48:	e0 68 00 ff 	mov	r8,255
80017f4c:	c2 78       	rjmp	80017f9a <checkReceiver1+0xd2>
		
	} else {
		spRec1.valid = 0;
80017f4e:	ec f9 00 84 	ld.w	r9,r6[132]
80017f52:	30 08       	mov	r8,0
80017f54:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
80017f58:	30 18       	mov	r8,1
80017f5a:	ef 68 ff f7 	st.b	r7[-9],r8
80017f5e:	c1 08       	rjmp	80017f7e <checkReceiver1+0xb6>
			spRec1.channels[i]=500;			
80017f60:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80017f64:	ec f9 00 84 	ld.w	r9,r6[132]
80017f68:	f0 ca ff 7e 	sub	r10,r8,-130
80017f6c:	e0 68 01 f4 	mov	r8,500
80017f70:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		spRec1.channels[RC_YAW]=500;	
		return -1; // brief drop out - hold pattern
		
	} else {
		spRec1.valid = 0;
		for (i=1; i<8; i++) {
80017f74:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80017f78:	2f f8       	sub	r8,-1
80017f7a:	ef 68 ff f7 	st.b	r7[-9],r8
80017f7e:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80017f82:	30 78       	mov	r8,7
80017f84:	f0 09 18 00 	cp.b	r9,r8
80017f88:	fe 9a ff ec 	brle	80017f60 <checkReceiver1+0x98>
			spRec1.channels[i]=500;			
		}
		spRec1.channels[RC_THROTTLE]=0;
80017f8c:	ec f9 00 84 	ld.w	r9,r6[132]
80017f90:	30 08       	mov	r8,0
80017f92:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80017f96:	e0 68 00 fe 	mov	r8,254

	}

}
80017f9a:	10 9c       	mov	r12,r8
80017f9c:	2f dd       	sub	sp,-12
80017f9e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80017fa2:	00 00       	add	r0,r0
80017fa4:	80 01       	ld.sh	r1,r0[0x0]
80017fa6:	7d 56       	ld.w	r6,lr[0x54]

80017fa8 <checkReceiver2>:

int8_t checkReceiver2(){
80017fa8:	eb cd 40 c0 	pushm	r6-r7,lr
80017fac:	1a 97       	mov	r7,sp
80017fae:	20 3d       	sub	sp,12
80017fb0:	4a 96       	lddpc	r6,80018054 <checkReceiver2+0xac>
80017fb2:	1e 26       	rsub	r6,pc
	int8_t i;
	uint32_t now = 0; //TCC0.CNT;
80017fb4:	30 08       	mov	r8,0
80017fb6:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t duration = now - spRec2.last_update;
80017fba:	ec f8 01 78 	ld.w	r8,r6[376]
80017fbe:	f0 f8 01 24 	ld.w	r8,r8[292]
80017fc2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80017fc6:	10 19       	sub	r9,r8
80017fc8:	ef 49 ff fc 	st.w	r7[-4],r9
	if (spRec2.valid==0) return -2;
80017fcc:	ec f8 01 78 	ld.w	r8,r6[376]
80017fd0:	f1 38 01 28 	ld.ub	r8,r8[296]
80017fd4:	58 08       	cp.w	r8,0
80017fd6:	c0 41       	brne	80017fde <checkReceiver2+0x36>
80017fd8:	e0 68 00 fe 	mov	r8,254
80017fdc:	c3 88       	rjmp	8001804c <checkReceiver2+0xa4>
	if (duration < 200000) {
80017fde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017fe2:	e2 58 0d 3f 	cp.w	r8,199999
80017fe6:	e0 8b 00 04 	brhi	80017fee <checkReceiver2+0x46>
		return 1;
80017fea:	30 18       	mov	r8,1
80017fec:	c3 08       	rjmp	8001804c <checkReceiver2+0xa4>
	} else if (duration < 500000) {
80017fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80017ff2:	e6 58 a1 1f 	cp.w	r8,499999
80017ff6:	e0 8b 00 05 	brhi	80018000 <checkReceiver2+0x58>
		return -1; // brief drop out - hold pattern
80017ffa:	e0 68 00 ff 	mov	r8,255
80017ffe:	c2 78       	rjmp	8001804c <checkReceiver2+0xa4>
	} else {
		spRec2.valid = 0;
80018000:	ec f9 01 78 	ld.w	r9,r6[376]
80018004:	30 08       	mov	r8,0
80018006:	f3 68 01 28 	st.b	r9[296],r8
		for (i=1; i<8; i++) {
8001800a:	30 18       	mov	r8,1
8001800c:	ef 68 ff f7 	st.b	r7[-9],r8
80018010:	c1 08       	rjmp	80018030 <checkReceiver2+0x88>
			spRec2.channels[i]=500;
80018012:	ef 28 ff f7 	ld.sb	r8,r7[-9]
80018016:	ec f9 01 78 	ld.w	r9,r6[376]
8001801a:	f0 ca ff 7e 	sub	r10,r8,-130
8001801e:	e0 68 01 f4 	mov	r8,500
80018022:	f2 0a 0a 18 	st.h	r9[r10<<0x1],r8
		return 1;
	} else if (duration < 500000) {
		return -1; // brief drop out - hold pattern
	} else {
		spRec2.valid = 0;
		for (i=1; i<8; i++) {
80018026:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8001802a:	2f f8       	sub	r8,-1
8001802c:	ef 68 ff f7 	st.b	r7[-9],r8
80018030:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80018034:	30 78       	mov	r8,7
80018036:	f0 09 18 00 	cp.b	r9,r8
8001803a:	fe 9a ff ec 	brle	80018012 <checkReceiver2+0x6a>
			spRec2.channels[i]=500;
		}
		spRec2.channels[RC_THROTTLE]=0;
8001803e:	ec f9 01 78 	ld.w	r9,r6[376]
80018042:	30 08       	mov	r8,0
80018044:	f3 58 01 04 	st.h	r9[260],r8
		return -2; // fade - fail safe
80018048:	e0 68 00 fe 	mov	r8,254

	}

}
8001804c:	10 9c       	mov	r12,r8
8001804e:	2f dd       	sub	sp,-12
80018050:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018054:	80 01       	ld.sh	r1,r0[0x0]
80018056:	7e 36       	ld.w	r6,pc[0xc]

80018058 <rc_check_receivers>:

int8_t rc_check_receivers() {
80018058:	eb cd 40 c0 	pushm	r6-r7,lr
8001805c:	1a 97       	mov	r7,sp
8001805e:	48 66       	lddpc	r6,80018074 <rc_check_receivers+0x1c>
80018060:	1e 26       	rsub	r6,pc
	return checkReceiver1();// + checkReceiver2();
80018062:	f0 16 01 9d 	mcall	r6[1652]
80018066:	18 98       	mov	r8,r12
80018068:	5c 58       	castu.b	r8
8001806a:	5c 58       	castu.b	r8
}
8001806c:	10 9c       	mov	r12,r8
8001806e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018072:	00 00       	add	r0,r0
80018074:	80 01       	ld.sh	r1,r0[0x0]
80018076:	7e e4       	ld.w	r4,pc[0x38]

80018078 <sysclk_enable_pba_module>:
/**
 * \brief Enable a module clock derived from the PBA clock
 * \param index Index of the module clock in the PBAMASK register
 */
static inline void sysclk_enable_pba_module(unsigned int index)
{
80018078:	eb cd 40 c0 	pushm	r6-r7,lr
8001807c:	1a 97       	mov	r7,sp
8001807e:	20 1d       	sub	sp,4
80018080:	48 66       	lddpc	r6,80018098 <sysclk_enable_pba_module+0x20>
80018082:	1e 26       	rsub	r6,pc
80018084:	ef 4c ff fc 	st.w	r7[-4],r12
	sysclk_priv_enable_module(AVR32_PM_CLK_GRP_PBA, index);
80018088:	ee fb ff fc 	ld.w	r11,r7[-4]
8001808c:	30 2c       	mov	r12,2
8001808e:	f0 16 01 f8 	mcall	r6[2016]
}
80018092:	2f fd       	sub	sp,-4
80018094:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018098:	80 01       	ld.sh	r1,r0[0x0]
8001809a:	7f 06       	ld.w	r6,pc[0x40]

8001809c <spi_reset>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_reset(volatile avr32_spi_t *spi)
{
8001809c:	eb cd 40 80 	pushm	r7,lr
800180a0:	1a 97       	mov	r7,sp
800180a2:	20 1d       	sub	sp,4
800180a4:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->cr = AVR32_SPI_CR_SWRST_MASK;
800180a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800180ac:	e0 69 00 80 	mov	r9,128
800180b0:	91 09       	st.w	r8[0x0],r9
}
800180b2:	2f fd       	sub	sp,-4
800180b4:	e3 cd 80 80 	ldm	sp++,r7,pc

800180b8 <spi_set_master_mode>:
/*! \brief Set Master Mode of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_set_master_mode(volatile avr32_spi_t *spi)
{
800180b8:	eb cd 40 80 	pushm	r7,lr
800180bc:	1a 97       	mov	r7,sp
800180be:	20 1d       	sub	sp,4
800180c0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.mstr = 1;
800180c4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180c8:	72 18       	ld.w	r8,r9[0x4]
800180ca:	30 1a       	mov	r10,1
800180cc:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
800180d0:	93 18       	st.w	r9[0x4],r8
}
800180d2:	2f fd       	sub	sp,-4
800180d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800180d8 <spi_disable_modfault>:
/*! \brief Disable Modfault of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_modfault(volatile avr32_spi_t *spi)
{
800180d8:	eb cd 40 80 	pushm	r7,lr
800180dc:	1a 97       	mov	r7,sp
800180de:	20 1d       	sub	sp,4
800180e0:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.modfdis = 1;
800180e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800180e8:	72 18       	ld.w	r8,r9[0x4]
800180ea:	30 1a       	mov	r10,1
800180ec:	f1 da d0 81 	bfins	r8,r10,0x4,0x1
800180f0:	93 18       	st.w	r9[0x4],r8
}
800180f2:	2f fd       	sub	sp,-4
800180f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800180f8 <spi_disable_loopback>:
/*! \brief Disable Loopback of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_loopback(volatile avr32_spi_t *spi)
{
800180f8:	eb cd 40 80 	pushm	r7,lr
800180fc:	1a 97       	mov	r7,sp
800180fe:	20 1d       	sub	sp,4
80018100:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.llb = 0;
80018104:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018108:	72 18       	ld.w	r8,r9[0x4]
8001810a:	30 0a       	mov	r10,0
8001810c:	f1 da d0 e1 	bfins	r8,r10,0x7,0x1
80018110:	93 18       	st.w	r9[0x4],r8
}
80018112:	2f fd       	sub	sp,-4
80018114:	e3 cd 80 80 	ldm	sp++,r7,pc

80018118 <spi_disable_chipselect_decoding>:
/*! \brief Disable Chip Select Decoding of the SPI.
 *
 * \param spi Base address of the SPI instance.
 */
static inline void spi_disable_chipselect_decoding(volatile avr32_spi_t *spi)
{
80018118:	eb cd 40 80 	pushm	r7,lr
8001811c:	1a 97       	mov	r7,sp
8001811e:	20 1d       	sub	sp,4
80018120:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.pcsdec = 0;
80018124:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018128:	72 18       	ld.w	r8,r9[0x4]
8001812a:	30 0a       	mov	r10,0
8001812c:	f1 da d0 41 	bfins	r8,r10,0x2,0x1
80018130:	93 18       	st.w	r9[0x4],r8
}
80018132:	2f fd       	sub	sp,-4
80018134:	e3 cd 80 80 	ldm	sp++,r7,pc

80018138 <spi_set_chipselect>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_set_chipselect(volatile avr32_spi_t *spi,uint8_t chip_select)
{
80018138:	eb cd 40 80 	pushm	r7,lr
8001813c:	1a 97       	mov	r7,sp
8001813e:	20 2d       	sub	sp,8
80018140:	ef 4c ff fc 	st.w	r7[-4],r12
80018144:	16 98       	mov	r8,r11
80018146:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.pcs = chip_select;
8001814a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001814e:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80018152:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80018156:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001815a:	72 18       	ld.w	r8,r9[0x4]
8001815c:	f1 da d2 04 	bfins	r8,r10,0x10,0x4
80018160:	93 18       	st.w	r9[0x4],r8
}
80018162:	2f ed       	sub	sp,-8
80018164:	e3 cd 80 80 	ldm	sp++,r7,pc

80018168 <spi_disable_variable_chipselect>:
/*! \brief Disable Variable Chip Select of the SPI.
 *
 * \param spi         Base address of the SPI instance.
 */
static inline void spi_disable_variable_chipselect(volatile avr32_spi_t *spi)
{
80018168:	eb cd 40 80 	pushm	r7,lr
8001816c:	1a 97       	mov	r7,sp
8001816e:	20 1d       	sub	sp,4
80018170:	ef 4c ff fc 	st.w	r7[-4],r12
	spi->MR.ps = 0;
80018174:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018178:	72 18       	ld.w	r8,r9[0x4]
8001817a:	30 0a       	mov	r10,0
8001817c:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
80018180:	93 18       	st.w	r9[0x4],r8
}
80018182:	2f fd       	sub	sp,-4
80018184:	e3 cd 80 80 	ldm	sp++,r7,pc

80018188 <spi_set_delay>:
 *
 * \param spi         Base address of the SPI instance.
 * \param delay       Delay.
 */
static inline void spi_set_delay(volatile avr32_spi_t *spi,uint8_t delay)
{
80018188:	eb cd 40 80 	pushm	r7,lr
8001818c:	1a 97       	mov	r7,sp
8001818e:	20 2d       	sub	sp,8
80018190:	ef 4c ff fc 	st.w	r7[-4],r12
80018194:	16 98       	mov	r8,r11
80018196:	ef 68 ff f8 	st.b	r7[-8],r8
	spi->MR.dlybcs = delay;
8001819a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001819e:	72 18       	ld.w	r8,r9[0x4]
800181a0:	ef 3a ff f8 	ld.ub	r10,r7[-8]
800181a4:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
800181a8:	93 18       	st.w	r9[0x4],r8
}
800181aa:	2f ed       	sub	sp,-8
800181ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800181b0 <spi_master_init>:
 *
 * \param spi       Base address of the SPI instance.
 *
 */
static inline void spi_master_init(volatile avr32_spi_t *spi)
{
800181b0:	eb cd 40 c0 	pushm	r6-r7,lr
800181b4:	1a 97       	mov	r7,sp
800181b6:	20 1d       	sub	sp,4
800181b8:	49 86       	lddpc	r6,80018218 <spi_master_init+0x68>
800181ba:	1e 26       	rsub	r6,pc
800181bc:	ef 4c ff fc 	st.w	r7[-4],r12
#ifdef AVR32_SPI
	sysclk_enable_pba_module(SYSCLK_SPI);	
#else
	if ((uint32_t)spi == AVR32_SPI0_ADDRESS)
800181c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181c4:	fc 58 18 00 	cp.w	r8,-190464
800181c8:	c0 41       	brne	800181d0 <spi_master_init+0x20>
	{
	sysclk_enable_pba_module(SYSCLK_SPI0);	
800181ca:	30 3c       	mov	r12,3
800181cc:	c5 6f       	rcall	80018078 <sysclk_enable_pba_module>
800181ce:	c0 88       	rjmp	800181de <spi_master_init+0x2e>
	}
#ifdef AVR32_SPI1
	else if ((uint32_t)spi == AVR32_SPI1_ADDRESS)
800181d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800181d4:	fe 58 34 00 	cp.w	r8,-52224
800181d8:	c0 31       	brne	800181de <spi_master_init+0x2e>
	{
	sysclk_enable_pba_module(SYSCLK_SPI1);	
800181da:	30 bc       	mov	r12,11
800181dc:	c4 ef       	rcall	80018078 <sysclk_enable_pba_module>
	}
#endif
#endif
  
  spi_reset(spi);
800181de:	ee fc ff fc 	ld.w	r12,r7[-4]
800181e2:	c5 df       	rcall	8001809c <spi_reset>
  spi_set_master_mode(spi);
800181e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800181e8:	c6 8f       	rcall	800180b8 <spi_set_master_mode>
  spi_disable_modfault(spi);
800181ea:	ee fc ff fc 	ld.w	r12,r7[-4]
800181ee:	c7 5f       	rcall	800180d8 <spi_disable_modfault>
  spi_disable_loopback(spi);
800181f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800181f4:	c8 2f       	rcall	800180f8 <spi_disable_loopback>
  spi_set_chipselect(spi,(1 << AVR32_SPI_MR_PCS_SIZE) - 1);
800181f6:	30 fb       	mov	r11,15
800181f8:	ee fc ff fc 	ld.w	r12,r7[-4]
800181fc:	c9 ef       	rcall	80018138 <spi_set_chipselect>
  spi_disable_variable_chipselect(spi);
800181fe:	ee fc ff fc 	ld.w	r12,r7[-4]
80018202:	cb 3f       	rcall	80018168 <spi_disable_variable_chipselect>
  spi_disable_chipselect_decoding(spi);
80018204:	ee fc ff fc 	ld.w	r12,r7[-4]
80018208:	c8 8f       	rcall	80018118 <spi_disable_chipselect_decoding>
  spi_set_delay(spi,CONFIG_SPI_MASTER_DELAY_BCS);
8001820a:	30 0b       	mov	r11,0
8001820c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018210:	cb cf       	rcall	80018188 <spi_set_delay>
}
80018212:	2f fd       	sub	sp,-4
80018214:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018218:	80 01       	ld.sh	r1,r0[0x0]
8001821a:	80 3e       	ld.sh	lr,r0[0x6]

8001821c <spi_select_device>:
 * \param spi Base address of the SPI instance.
 * \param device SPI device
 *
 */
static inline void spi_select_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
8001821c:	eb cd 40 c0 	pushm	r6-r7,lr
80018220:	1a 97       	mov	r7,sp
80018222:	20 2d       	sub	sp,8
80018224:	48 96       	lddpc	r6,80018248 <spi_select_device+0x2c>
80018226:	1e 26       	rsub	r6,pc
80018228:	ef 4c ff fc 	st.w	r7[-4],r12
8001822c:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_selectChip(spi,device->id);
80018230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018234:	11 88       	ld.ub	r8,r8[0x0]
80018236:	10 9b       	mov	r11,r8
80018238:	ee fc ff fc 	ld.w	r12,r7[-4]
8001823c:	f0 16 02 03 	mcall	r6[2060]
}
80018240:	2f ed       	sub	sp,-8
80018242:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018246:	00 00       	add	r0,r0
80018248:	80 01       	ld.sh	r1,r0[0x0]
8001824a:	80 aa       	ld.uh	r10,r0[0x4]

8001824c <spi_deselect_device>:
 * \param device SPI device
 *
 * \pre SPI device must be selected with spi_select_device() first
 */
static inline void spi_deselect_device(volatile avr32_spi_t *spi, struct spi_device *device)
{
8001824c:	eb cd 40 c0 	pushm	r6-r7,lr
80018250:	1a 97       	mov	r7,sp
80018252:	20 2d       	sub	sp,8
80018254:	48 96       	lddpc	r6,80018278 <spi_deselect_device+0x2c>
80018256:	1e 26       	rsub	r6,pc
80018258:	ef 4c ff fc 	st.w	r7[-4],r12
8001825c:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_unselectChip(spi,device->id);
80018260:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018264:	11 88       	ld.ub	r8,r8[0x0]
80018266:	10 9b       	mov	r11,r8
80018268:	ee fc ff fc 	ld.w	r12,r7[-4]
8001826c:	f0 16 01 4f 	mcall	r6[1340]
}
80018270:	2f ed       	sub	sp,-8
80018272:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018276:	00 00       	add	r0,r0
80018278:	80 01       	ld.sh	r1,r0[0x0]
8001827a:	80 da       	ld.uh	r10,r0[0xa]

8001827c <get_spi_in_buffer>:
#include "led.h"


static volatile spi_buffer_t spi_buffers[SPI_NUMBER];

uint8_t* get_spi_in_buffer(int spi_index) {
8001827c:	eb cd 40 c0 	pushm	r6-r7,lr
80018280:	1a 97       	mov	r7,sp
80018282:	20 1d       	sub	sp,4
80018284:	48 96       	lddpc	r6,800182a8 <get_spi_in_buffer+0x2c>
80018286:	1e 26       	rsub	r6,pc
80018288:	ef 4c ff fc 	st.w	r7[-4],r12
	return spi_buffers[spi_index].SPIInBuffer;
8001828c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018290:	f0 08 10 54 	mul	r8,r8,84
80018294:	f0 c9 ff dc 	sub	r9,r8,-36
80018298:	ec f8 00 2c 	ld.w	r8,r6[44]
8001829c:	f2 08 00 08 	add	r8,r9,r8
}
800182a0:	10 9c       	mov	r12,r8
800182a2:	2f fd       	sub	sp,-4
800182a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800182a8:	80 01       	ld.sh	r1,r0[0x0]
800182aa:	81 0a       	st.w	r0[0x0],r10

800182ac <spi0_int_handler>:

/** interrupt handler
  * manages sending and receiving data
*/
__attribute__((__interrupt__))
void spi0_int_handler() {
800182ac:	eb cd 40 c0 	pushm	r6-r7,lr
800182b0:	1a 97       	mov	r7,sp
800182b2:	48 56       	lddpc	r6,800182c4 <spi0_int_handler+0x18>
800182b4:	1e 26       	rsub	r6,pc
	//LED_On(LED1);
	spi_handler(0);
800182b6:	30 0c       	mov	r12,0
800182b8:	f0 16 01 2b 	mcall	r6[1196]
}
800182bc:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800182c0:	d6 03       	rete
800182c2:	00 00       	add	r0,r0
800182c4:	80 01       	ld.sh	r1,r0[0x0]
800182c6:	81 38       	st.w	r0[0xc],r8

800182c8 <spi1_int_handler>:

__attribute__((__interrupt__))
void spi1_int_handler() {
800182c8:	eb cd 40 c0 	pushm	r6-r7,lr
800182cc:	1a 97       	mov	r7,sp
800182ce:	48 56       	lddpc	r6,800182e0 <spi1_int_handler+0x18>
800182d0:	1e 26       	rsub	r6,pc
	spi_handler(1);
800182d2:	30 1c       	mov	r12,1
800182d4:	f0 16 01 2b 	mcall	r6[1196]
}
800182d8:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
800182dc:	d6 03       	rete
800182de:	00 00       	add	r0,r0
800182e0:	80 01       	ld.sh	r1,r0[0x0]
800182e2:	81 54       	st.w	r0[0x14],r4

800182e4 <pdca_int_handler_spi0>:

/*! \brief The PDCA interrupt handler.
 */
__attribute__((__interrupt__))
static void pdca_int_handler_spi0(void)
{
800182e4:	eb cd 40 c0 	pushm	r6-r7,lr
800182e8:	1a 97       	mov	r7,sp
800182ea:	49 b6       	lddpc	r6,80018354 <pdca_int_handler_spi0+0x70>
800182ec:	1e 26       	rsub	r6,pc
	AVR32_PDCA.channel[SPI0_DMA_CH_RECEIVE].isr;
800182ee:	fc 78 00 00 	mov	r8,-196608
800182f2:	71 b8       	ld.w	r8,r8[0x6c]
	AVR32_PDCA.channel[SPI0_DMA_CH_TRANSMIT].isr;
800182f4:	fc 78 00 00 	mov	r8,-196608
800182f8:	70 b8       	ld.w	r8,r8[0x2c]
	pdca_disable(SPI0_DMA_CH_RECEIVE);
800182fa:	30 1c       	mov	r12,1
800182fc:	f0 16 00 81 	mcall	r6[516]
	pdca_disable(SPI0_DMA_CH_TRANSMIT);
80018300:	30 0c       	mov	r12,0
80018302:	f0 16 00 81 	mcall	r6[516]
	pdca_disable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
80018306:	30 1c       	mov	r12,1
80018308:	f0 16 00 9e 	mcall	r6[632]
	spi_deselect_device(spi_buffers[0].spi, &spi_buffers[0].adc_spi);
8001830c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018310:	70 08       	ld.w	r8,r8[0x0]
80018312:	ec f9 00 2c 	ld.w	r9,r6[44]
80018316:	2b 09       	sub	r9,-80
80018318:	12 9b       	mov	r11,r9
8001831a:	10 9c       	mov	r12,r8
8001831c:	c9 8f       	rcall	8001824c <spi_deselect_device>
   // call callback function to process data, at end of transfer
   // to process data, and maybe add some more data
   spi_buffers[0].SPIinBufferTail=spi_buffers[0].transmission_in_progress;
8001831e:	ec f8 00 2c 	ld.w	r8,r6[44]
80018322:	f1 38 00 4a 	ld.ub	r8,r8[74]
80018326:	5c 58       	castu.b	r8
80018328:	ec f9 00 2c 	ld.w	r9,r6[44]
8001832c:	f3 68 00 45 	st.b	r9[69],r8
   spi_buffers[0].transmission_in_progress=0;
80018330:	ec f9 00 2c 	ld.w	r9,r6[44]
80018334:	30 08       	mov	r8,0
80018336:	f3 68 00 4a 	st.b	r9[74],r8
   //spi_buffers[0].traffic++;
   
   if ((spi_buffers[0].callbackFunction)) spi_buffers[0].callbackFunction();
8001833a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001833e:	71 38       	ld.w	r8,r8[0x4c]
80018340:	58 08       	cp.w	r8,0
80018342:	c0 50       	breq	8001834c <pdca_int_handler_spi0+0x68>
80018344:	ec f8 00 2c 	ld.w	r8,r6[44]
80018348:	71 38       	ld.w	r8,r8[0x4c]
8001834a:	5d 18       	icall	r8
   
}
8001834c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018350:	d6 03       	rete
80018352:	00 00       	add	r0,r0
80018354:	80 01       	ld.sh	r1,r0[0x0]
80018356:	81 70       	st.w	r0[0x1c],r0

80018358 <initSPI>:
/** initialises SPI interface
 *  this interface uses internal buffers and interrupts. 
 *  bytes in the outgoing buffer are sent automatically via interrupt
 */

void initSPI(volatile avr32_spi_t *spi, int spi_index){
80018358:	eb cd 40 c0 	pushm	r6-r7,lr
8001835c:	1a 97       	mov	r7,sp
8001835e:	20 2d       	sub	sp,8
80018360:	4e 16       	lddpc	r6,800184e4 <initSPI+0x18c>
80018362:	1e 26       	rsub	r6,pc
80018364:	ef 4c ff fc 	st.w	r7[-4],r12
80018368:	ef 4b ff f8 	st.w	r7[-8],r11
	// init SPI
	spi_buffers[spi_index].spi= spi;
8001836c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018370:	ec f9 00 2c 	ld.w	r9,r6[44]
80018374:	f0 08 10 54 	mul	r8,r8,84
80018378:	f2 08 00 08 	add	r8,r9,r8
8001837c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018380:	91 09       	st.w	r8[0x0],r9
	
	spi_buffers[spi_index].adc_spi.id=0;
80018382:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018386:	ec f9 00 2c 	ld.w	r9,r6[44]
8001838a:	f0 08 10 54 	mul	r8,r8,84
8001838e:	f2 08 00 08 	add	r8,r9,r8
80018392:	f0 c9 ff b0 	sub	r9,r8,-80
80018396:	30 08       	mov	r8,0
80018398:	b2 88       	st.b	r9[0x0],r8
	
	spi_master_init(spi_buffers[spi_index].spi);
8001839a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001839e:	ec f9 00 2c 	ld.w	r9,r6[44]
800183a2:	f0 08 10 54 	mul	r8,r8,84
800183a6:	f2 08 00 08 	add	r8,r9,r8
800183aa:	70 08       	ld.w	r8,r8[0x0]
800183ac:	10 9c       	mov	r12,r8
800183ae:	c0 1f       	rcall	800181b0 <spi_master_init>
	spi_master_setup_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi, SPI_MODE_0, 20000000, 0);
800183b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183b4:	f0 08 10 54 	mul	r8,r8,84
800183b8:	f0 c9 ff b0 	sub	r9,r8,-80
800183bc:	ec f8 00 2c 	ld.w	r8,r6[44]
800183c0:	f2 08 00 0b 	add	r11,r9,r8
800183c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800183c8:	ec f9 00 2c 	ld.w	r9,r6[44]
800183cc:	f0 08 10 54 	mul	r8,r8,84
800183d0:	f2 08 00 08 	add	r8,r9,r8
800183d4:	70 0c       	ld.w	r12,r8[0x0]
800183d6:	30 08       	mov	r8,0
800183d8:	e0 69 2d 00 	mov	r9,11520
800183dc:	ea 19 01 31 	orh	r9,0x131
800183e0:	30 0a       	mov	r10,0
800183e2:	f0 16 01 71 	mcall	r6[1476]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SWRST_MASK;
	
	//spi_buffers[spi_index].spi->mr=AVR32_SPI_MSTR_MASK;

	
	gpio_enable_module_pin(AVR32_SPI0_MOSI_0_0_PIN, AVR32_SPI0_MOSI_0_0_FUNCTION);
800183e6:	30 0b       	mov	r11,0
800183e8:	36 0c       	mov	r12,96
800183ea:	f0 16 00 3f 	mcall	r6[252]
	//gpio_configure_pin(AVR32_SPI0_MOSI_0_0_PIN, GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	gpio_enable_module_pin(AVR32_SPI0_MISO_0_0_PIN, AVR32_SPI0_MISO_0_0_FUNCTION);
800183ee:	30 0b       	mov	r11,0
800183f0:	36 1c       	mov	r12,97
800183f2:	f0 16 00 3f 	mcall	r6[252]
	gpio_enable_module_pin(AVR32_SPI0_SCK_0_0_PIN, AVR32_SPI0_SCK_0_0_FUNCTION);
800183f6:	30 0b       	mov	r11,0
800183f8:	36 2c       	mov	r12,98
800183fa:	f0 16 00 3f 	mcall	r6[252]

	spi_buffers[spi_index].SPIinBufferHead=0;
800183fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018402:	ec f9 00 2c 	ld.w	r9,r6[44]
80018406:	f0 08 10 54 	mul	r8,r8,84
8001840a:	f2 08 00 08 	add	r8,r9,r8
8001840e:	f0 c9 ff bc 	sub	r9,r8,-68
80018412:	30 08       	mov	r8,0
80018414:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].SPIinBufferTail=0;
80018416:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001841a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001841e:	f0 08 10 54 	mul	r8,r8,84
80018422:	f2 08 00 08 	add	r8,r9,r8
80018426:	f0 c9 ff bc 	sub	r9,r8,-68
8001842a:	30 08       	mov	r8,0
8001842c:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].SPIoutBufferHead=0;
8001842e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018432:	ec f9 00 2c 	ld.w	r9,r6[44]
80018436:	f0 08 10 54 	mul	r8,r8,84
8001843a:	f2 08 00 08 	add	r8,r9,r8
8001843e:	f0 c9 ff bc 	sub	r9,r8,-68
80018442:	30 08       	mov	r8,0
80018444:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].SPIoutBufferTail=0;
80018446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001844a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001844e:	f0 08 10 54 	mul	r8,r8,84
80018452:	f2 08 00 08 	add	r8,r9,r8
80018456:	f0 c9 ff bc 	sub	r9,r8,-68
8001845a:	30 08       	mov	r8,0
8001845c:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].spiReceiverOn=1;
8001845e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018462:	ec f9 00 2c 	ld.w	r9,r6[44]
80018466:	f0 08 10 54 	mul	r8,r8,84
8001846a:	f2 08 00 08 	add	r8,r9,r8
8001846e:	f0 c9 ff b8 	sub	r9,r8,-72
80018472:	30 18       	mov	r8,1
80018474:	b2 88       	st.b	r9[0x0],r8
	spi_buffers[spi_index].traffic=0;
80018476:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001847a:	ec f9 00 2c 	ld.w	r9,r6[44]
8001847e:	f0 08 10 54 	mul	r8,r8,84
80018482:	f2 08 00 08 	add	r8,r9,r8
80018486:	f0 c9 ff b8 	sub	r9,r8,-72
8001848a:	30 08       	mov	r8,0
8001848c:	b2 98       	st.b	r9[0x1],r8
	spi_buffers[spi_index].automatic=1;
8001848e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018492:	ec f9 00 2c 	ld.w	r9,r6[44]
80018496:	f0 08 10 54 	mul	r8,r8,84
8001849a:	f2 08 00 08 	add	r8,r9,r8
8001849e:	f0 c9 ff b8 	sub	r9,r8,-72
800184a2:	30 18       	mov	r8,1
800184a4:	b2 b8       	st.b	r9[0x3],r8
	spi_buffers[spi_index].callbackFunction=0;
800184a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184aa:	ec f9 00 2c 	ld.w	r9,r6[44]
800184ae:	f0 08 10 54 	mul	r8,r8,84
800184b2:	f2 08 00 08 	add	r8,r9,r8
800184b6:	2b 48       	sub	r8,-76
800184b8:	30 09       	mov	r9,0
800184ba:	91 09       	st.w	r8[0x0],r9
	spi_buffers[spi_index].transmission_in_progress=0;
800184bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800184c0:	ec f9 00 2c 	ld.w	r9,r6[44]
800184c4:	f0 08 10 54 	mul	r8,r8,84
800184c8:	f2 08 00 08 	add	r8,r9,r8
800184cc:	f0 c9 ff b8 	sub	r9,r8,-72
800184d0:	30 08       	mov	r8,0
800184d2:	b2 a8       	st.b	r9[0x2],r8
    //INTC_register_interrupt(&spi0_int_handler, AVR32_SPI0_IRQ, AVR32_INTC_INT0);
	
    //INTC_register_interrupt(&spi1_int_handler, AVR32_SPI1_IRQ, AVR32_INTC_INT0);
	//spi_buffers[spi_index].spi->imr = AVR32_SPI_RDRF;

	enableSPI(spi_index);
800184d4:	ee fc ff f8 	ld.w	r12,r7[-8]
800184d8:	f0 16 01 b3 	mcall	r6[1740]
	//spi_buffers[spi_index].spi->cr=AVR32_SPI_SPIEN_MASK;	
}
800184dc:	2f ed       	sub	sp,-8
800184de:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800184e2:	00 00       	add	r0,r0
800184e4:	80 01       	ld.sh	r1,r0[0x0]
800184e6:	81 e6       	st.w	r0[0x38],r6

800184e8 <enableSPI>:

void enableSPI(int spi_index) {
800184e8:	eb cd 40 c0 	pushm	r6-r7,lr
800184ec:	1a 97       	mov	r7,sp
800184ee:	20 1d       	sub	sp,4
800184f0:	48 a6       	lddpc	r6,80018518 <enableSPI+0x30>
800184f2:	1e 26       	rsub	r6,pc
800184f4:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_enable(spi_buffers[spi_index].spi);
800184f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800184fc:	ec f9 00 2c 	ld.w	r9,r6[44]
80018500:	f0 08 10 54 	mul	r8,r8,84
80018504:	f2 08 00 08 	add	r8,r9,r8
80018508:	70 08       	ld.w	r8,r8[0x0]
8001850a:	10 9c       	mov	r12,r8
8001850c:	f0 16 01 b5 	mcall	r6[1748]
}
80018510:	2f fd       	sub	sp,-4
80018512:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018516:	00 00       	add	r0,r0
80018518:	80 01       	ld.sh	r1,r0[0x0]
8001851a:	83 76       	st.w	r1[0x1c],r6

8001851c <disableSPI>:

void disableSPI(int spi_index) {
8001851c:	eb cd 40 c0 	pushm	r6-r7,lr
80018520:	1a 97       	mov	r7,sp
80018522:	20 1d       	sub	sp,4
80018524:	48 a6       	lddpc	r6,8001854c <disableSPI+0x30>
80018526:	1e 26       	rsub	r6,pc
80018528:	ef 4c ff fc 	st.w	r7[-4],r12
	spi_disable(spi_buffers[spi_index].spi);
8001852c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018530:	ec f9 00 2c 	ld.w	r9,r6[44]
80018534:	f0 08 10 54 	mul	r8,r8,84
80018538:	f2 08 00 08 	add	r8,r9,r8
8001853c:	70 08       	ld.w	r8,r8[0x0]
8001853e:	10 9c       	mov	r12,r8
80018540:	f0 16 01 58 	mcall	r6[1376]
}
80018544:	2f fd       	sub	sp,-4
80018546:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001854a:	00 00       	add	r0,r0
8001854c:	80 01       	ld.sh	r1,r0[0x0]
8001854e:	83 aa       	st.w	r1[0x28],r10

80018550 <spiInitDMA>:


// initialise DMA for SPI transfers
  // PDCA channel options
  
void spiInitDMA(int spi_index, int block_size) {
80018550:	eb cd 40 c0 	pushm	r6-r7,lr
80018554:	1a 97       	mov	r7,sp
80018556:	20 2d       	sub	sp,8
80018558:	49 c6       	lddpc	r6,800185c8 <spiInitDMA+0x78>
8001855a:	1e 26       	rsub	r6,pc
8001855c:	ef 4c ff fc 	st.w	r7[-4],r12
80018560:	ef 4b ff f8 	st.w	r7[-8],r11
    .size = 12,                               // transfer counter
    .r_addr = NULL,                           // next memory address
    .r_size = 0,                              // next transfer counter
    .transfer_size = PDCA_TRANSFER_SIZE_BYTE  // select size of the transfer
  };
  PDCA_TX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIOutBuffer;
80018564:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018568:	12 98       	mov	r8,r9
8001856a:	a1 78       	lsl	r8,0x1
8001856c:	12 08       	add	r8,r9
8001856e:	f0 09 15 03 	lsl	r9,r8,0x3
80018572:	10 19       	sub	r9,r8
80018574:	f2 c8 ff ff 	sub	r8,r9,-1
80018578:	f0 09 15 02 	lsl	r9,r8,0x2
8001857c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018580:	10 09       	add	r9,r8
80018582:	ec f8 04 e8 	ld.w	r8,r6[1256]
80018586:	91 09       	st.w	r8[0x0],r9
  PDCA_RX_OPTIONS.addr=(void *) spi_buffers[spi_index].SPIInBuffer;
80018588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001858c:	f0 08 10 54 	mul	r8,r8,84
80018590:	f0 c9 ff dc 	sub	r9,r8,-36
80018594:	ec f8 00 2c 	ld.w	r8,r6[44]
80018598:	10 09       	add	r9,r8
8001859a:	ec f8 04 e4 	ld.w	r8,r6[1252]
8001859e:	91 09       	st.w	r8[0x0],r9
  // Init PDCA channel with the pdca_options.
  pdca_init_channel(SPI0_DMA_CH_TRANSMIT, &PDCA_TX_OPTIONS); // init PDCA channel with options.
800185a0:	ec fb 04 e8 	ld.w	r11,r6[1256]
800185a4:	30 0c       	mov	r12,0
800185a6:	f0 16 00 78 	mcall	r6[480]
  pdca_init_channel(SPI0_DMA_CH_RECEIVE, &PDCA_RX_OPTIONS); // init PDCA channel with options.
800185aa:	ec fb 04 e4 	ld.w	r11,r6[1252]
800185ae:	30 1c       	mov	r12,1
800185b0:	f0 16 00 78 	mcall	r6[480]

  // Register PDCA IRQ interrupt.

  INTC_register_interrupt( (__int_handler) &pdca_int_handler_spi0, SPI0_DMA_IRQ, AVR32_INTC_INT0);
800185b4:	30 0a       	mov	r10,0
800185b6:	36 1b       	mov	r11,97
800185b8:	fe cc 02 d4 	sub	r12,pc,724
800185bc:	f0 16 00 3b 	mcall	r6[236]
  
  
}
800185c0:	2f ed       	sub	sp,-8
800185c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800185c6:	00 00       	add	r0,r0
800185c8:	80 01       	ld.sh	r1,r0[0x0]
800185ca:	83 de       	st.w	r1[0x34],lr

800185cc <spiTriggerDMA>:

void spiTriggerDMA(int spi_index, int block_size){
800185cc:	eb cd 40 c0 	pushm	r6-r7,lr
800185d0:	1a 97       	mov	r7,sp
800185d2:	20 2d       	sub	sp,8
800185d4:	4a 86       	lddpc	r6,80018674 <spiTriggerDMA+0xa8>
800185d6:	1e 26       	rsub	r6,pc
800185d8:	ef 4c ff fc 	st.w	r7[-4],r12
800185dc:	ef 4b ff f8 	st.w	r7[-8],r11
	//spi_buffers[spi_index].transmission_in_progress=block_size;
	//spi_buffers[spi_index].SPIInBuffer[0]=42;
	//spi_buffers[spi_index].SPIInBuffer[3]=42;
	//spi_buffers[spi_index].SPIInBuffer[6]=42;
	//spi_buffers[spi_index].SPIInBuffer[9]=42;
	pdca_load_channel(SPI0_DMA_CH_TRANSMIT, (void *)spi_buffers[spi_index].SPIOutBuffer, block_size);
800185e0:	ee fa ff f8 	ld.w	r10,r7[-8]
800185e4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800185e8:	12 98       	mov	r8,r9
800185ea:	a1 78       	lsl	r8,0x1
800185ec:	12 08       	add	r8,r9
800185ee:	f0 09 15 03 	lsl	r9,r8,0x3
800185f2:	10 19       	sub	r9,r8
800185f4:	f2 c8 ff ff 	sub	r8,r9,-1
800185f8:	f0 09 15 02 	lsl	r9,r8,0x2
800185fc:	ec f8 00 2c 	ld.w	r8,r6[44]
80018600:	f2 08 00 08 	add	r8,r9,r8
80018604:	10 9b       	mov	r11,r8
80018606:	30 0c       	mov	r12,0
80018608:	f0 16 00 be 	mcall	r6[760]
	pdca_load_channel(SPI0_DMA_CH_RECEIVE,  (void *)(spi_buffers[spi_index].SPIInBuffer), block_size);
8001860c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018610:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018614:	f0 08 10 54 	mul	r8,r8,84
80018618:	f0 ca ff dc 	sub	r10,r8,-36
8001861c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018620:	f4 08 00 08 	add	r8,r10,r8
80018624:	12 9a       	mov	r10,r9
80018626:	10 9b       	mov	r11,r8
80018628:	30 1c       	mov	r12,1
8001862a:	f0 16 00 be 	mcall	r6[760]

	
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
8001862e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018632:	f0 08 10 54 	mul	r8,r8,84
80018636:	f0 c9 ff b0 	sub	r9,r8,-80
8001863a:	ec f8 00 2c 	ld.w	r8,r6[44]
8001863e:	10 09       	add	r9,r8
80018640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018644:	ec fa 00 2c 	ld.w	r10,r6[44]
80018648:	f0 08 10 54 	mul	r8,r8,84
8001864c:	f4 08 00 08 	add	r8,r10,r8
80018650:	70 08       	ld.w	r8,r8[0x0]
80018652:	12 9b       	mov	r11,r9
80018654:	10 9c       	mov	r12,r8
80018656:	fe b0 fd e3 	rcall	8001821c <spi_select_device>
	// Enable pdca interrupt each time the reload counter reaches zero, i.e. each time
    // the whole block was received
	pdca_enable_interrupt_transfer_complete(SPI0_DMA_CH_RECEIVE);
8001865a:	30 1c       	mov	r12,1
8001865c:	f0 16 00 bd 	mcall	r6[756]
	
	pdca_enable(SPI0_DMA_CH_RECEIVE);
80018660:	30 1c       	mov	r12,1
80018662:	f0 16 00 94 	mcall	r6[592]
	pdca_enable(SPI0_DMA_CH_TRANSMIT);
80018666:	30 0c       	mov	r12,0
80018668:	f0 16 00 94 	mcall	r6[592]
    
}
8001866c:	2f ed       	sub	sp,-8
8001866e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018672:	00 00       	add	r0,r0
80018674:	80 01       	ld.sh	r1,r0[0x0]
80018676:	84 5a       	ld.sh	r10,r2[0xa]

80018678 <setSPIcallBack>:

/** specify a callback function, that gets called when the SPI buffer is empty
 */
void setSPIcallBack(int spi_index, functionpointer* functionPointer) {
80018678:	eb cd 40 c0 	pushm	r6-r7,lr
8001867c:	1a 97       	mov	r7,sp
8001867e:	20 2d       	sub	sp,8
80018680:	48 b6       	lddpc	r6,800186ac <setSPIcallBack+0x34>
80018682:	1e 26       	rsub	r6,pc
80018684:	ef 4c ff fc 	st.w	r7[-4],r12
80018688:	ef 4b ff f8 	st.w	r7[-8],r11
	spi_buffers[spi_index].callbackFunction=functionPointer;
8001868c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018690:	ec f9 00 2c 	ld.w	r9,r6[44]
80018694:	f0 08 10 54 	mul	r8,r8,84
80018698:	f2 08 00 08 	add	r8,r9,r8
8001869c:	2b 48       	sub	r8,-76
8001869e:	ee f9 ff f8 	ld.w	r9,r7[-8]
800186a2:	91 09       	st.w	r8[0x0],r9
}
800186a4:	2f ed       	sub	sp,-8
800186a6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186aa:	00 00       	add	r0,r0
800186ac:	80 01       	ld.sh	r1,r0[0x0]
800186ae:	85 06       	st.w	r2[0x0],r6

800186b0 <pauseSPI>:

/** pauses sending 
  * be careful not to overfill the buffer - deadlock may occur  
  */
void pauseSPI(int spi_index){
800186b0:	eb cd 40 c0 	pushm	r6-r7,lr
800186b4:	1a 97       	mov	r7,sp
800186b6:	20 1d       	sub	sp,4
800186b8:	48 a6       	lddpc	r6,800186e0 <pauseSPI+0x30>
800186ba:	1e 26       	rsub	r6,pc
800186bc:	ef 4c ff fc 	st.w	r7[-4],r12
   spi_buffers[spi_index].automatic=0;
800186c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186c4:	ec f9 00 2c 	ld.w	r9,r6[44]
800186c8:	f0 08 10 54 	mul	r8,r8,84
800186cc:	f2 08 00 08 	add	r8,r9,r8
800186d0:	f0 c9 ff b8 	sub	r9,r8,-72
800186d4:	30 08       	mov	r8,0
800186d6:	b2 b8       	st.b	r9[0x3],r8
}
800186d8:	2f fd       	sub	sp,-4
800186da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800186de:	00 00       	add	r0,r0
800186e0:	80 01       	ld.sh	r1,r0[0x0]
800186e2:	85 3e       	st.w	r2[0xc],lr

800186e4 <resumeSPI>:

/** resumes automatic sending
 */
void resumeSPI(int spi_index){
800186e4:	eb cd 40 c0 	pushm	r6-r7,lr
800186e8:	1a 97       	mov	r7,sp
800186ea:	20 1d       	sub	sp,4
800186ec:	48 c6       	lddpc	r6,8001871c <resumeSPI+0x38>
800186ee:	1e 26       	rsub	r6,pc
800186f0:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].automatic=1;
800186f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800186f8:	ec f9 00 2c 	ld.w	r9,r6[44]
800186fc:	f0 08 10 54 	mul	r8,r8,84
80018700:	f2 08 00 08 	add	r8,r9,r8
80018704:	f0 c9 ff b8 	sub	r9,r8,-72
80018708:	30 18       	mov	r8,1
8001870a:	b2 b8       	st.b	r9[0x3],r8
  startSPI(spi_index);
8001870c:	ee fc ff fc 	ld.w	r12,r7[-4]
80018710:	f0 16 00 f3 	mcall	r6[972]
}
80018714:	2f fd       	sub	sp,-4
80018716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001871a:	00 00       	add	r0,r0
8001871c:	80 01       	ld.sh	r1,r0[0x0]
8001871e:	85 72       	st.w	r2[0x1c],r2

80018720 <activateReceiveSPI>:

void activateReceiveSPI(int spi_index){
80018720:	eb cd 40 c0 	pushm	r6-r7,lr
80018724:	1a 97       	mov	r7,sp
80018726:	20 1d       	sub	sp,4
80018728:	48 a6       	lddpc	r6,80018750 <activateReceiveSPI+0x30>
8001872a:	1e 26       	rsub	r6,pc
8001872c:	ef 4c ff fc 	st.w	r7[-4],r12

  spi_buffers[spi_index].spiReceiverOn=1;
80018730:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018734:	ec f9 00 2c 	ld.w	r9,r6[44]
80018738:	f0 08 10 54 	mul	r8,r8,84
8001873c:	f2 08 00 08 	add	r8,r9,r8
80018740:	f0 c9 ff b8 	sub	r9,r8,-72
80018744:	30 18       	mov	r8,1
80018746:	b2 88       	st.b	r9[0x0],r8
}
80018748:	2f fd       	sub	sp,-4
8001874a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001874e:	00 00       	add	r0,r0
80018750:	80 01       	ld.sh	r1,r0[0x0]
80018752:	85 ae       	st.w	r2[0x28],lr

80018754 <deactivateReceiveSPI>:

void deactivateReceiveSPI(int spi_index){
80018754:	eb cd 40 c0 	pushm	r6-r7,lr
80018758:	1a 97       	mov	r7,sp
8001875a:	20 1d       	sub	sp,4
8001875c:	48 a6       	lddpc	r6,80018784 <deactivateReceiveSPI+0x30>
8001875e:	1e 26       	rsub	r6,pc
80018760:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].spiReceiverOn=0;
80018764:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018768:	ec f9 00 2c 	ld.w	r9,r6[44]
8001876c:	f0 08 10 54 	mul	r8,r8,84
80018770:	f2 08 00 08 	add	r8,r9,r8
80018774:	f0 c9 ff b8 	sub	r9,r8,-72
80018778:	30 08       	mov	r8,0
8001877a:	b2 88       	st.b	r9[0x0],r8
}
8001877c:	2f fd       	sub	sp,-4
8001877e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018782:	00 00       	add	r0,r0
80018784:	80 01       	ld.sh	r1,r0[0x0]
80018786:	85 e2       	st.w	r2[0x38],r2

80018788 <getTraffic>:
uint8_t getTraffic(int spi_index) {return spi_buffers[spi_index].traffic;}
80018788:	eb cd 40 c0 	pushm	r6-r7,lr
8001878c:	1a 97       	mov	r7,sp
8001878e:	20 1d       	sub	sp,4
80018790:	48 a6       	lddpc	r6,800187b8 <getTraffic+0x30>
80018792:	1e 26       	rsub	r6,pc
80018794:	ef 4c ff fc 	st.w	r7[-4],r12
80018798:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001879c:	ec f9 00 2c 	ld.w	r9,r6[44]
800187a0:	f0 08 10 54 	mul	r8,r8,84
800187a4:	f2 08 00 08 	add	r8,r9,r8
800187a8:	2b 88       	sub	r8,-72
800187aa:	11 98       	ld.ub	r8,r8[0x1]
800187ac:	5c 58       	castu.b	r8
800187ae:	10 9c       	mov	r12,r8
800187b0:	2f fd       	sub	sp,-4
800187b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800187b6:	00 00       	add	r0,r0
800187b8:	80 01       	ld.sh	r1,r0[0x0]
800187ba:	86 16       	ld.sh	r6,r3[0x2]

800187bc <readSPI>:


/** reads one byte from the incoming SPI buffer
 */
uint8_t readSPI(int spi_index){
800187bc:	eb cd 40 c0 	pushm	r6-r7,lr
800187c0:	1a 97       	mov	r7,sp
800187c2:	20 2d       	sub	sp,8
800187c4:	4a b6       	lddpc	r6,80018870 <readSPI+0xb4>
800187c6:	1e 26       	rsub	r6,pc
800187c8:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t byte;
  // if buffer empty, wait for incoming data
  while (spi_buffers[spi_index].SPIinBufferHead==spi_buffers[spi_index].SPIinBufferTail);
800187cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187d0:	ec f9 00 2c 	ld.w	r9,r6[44]
800187d4:	f0 08 10 54 	mul	r8,r8,84
800187d8:	f2 08 00 08 	add	r8,r9,r8
800187dc:	2b c8       	sub	r8,-68
800187de:	11 88       	ld.ub	r8,r8[0x0]
800187e0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800187e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800187e8:	ec fa 00 2c 	ld.w	r10,r6[44]
800187ec:	f0 08 10 54 	mul	r8,r8,84
800187f0:	f4 08 00 08 	add	r8,r10,r8
800187f4:	2b c8       	sub	r8,-68
800187f6:	11 98       	ld.ub	r8,r8[0x1]
800187f8:	5c 58       	castu.b	r8
800187fa:	f0 09 18 00 	cp.b	r9,r8
800187fe:	ce 70       	breq	800187cc <readSPI+0x10>
  byte=spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferTail];
80018800:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018804:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018808:	ec fa 00 2c 	ld.w	r10,r6[44]
8001880c:	f0 08 10 54 	mul	r8,r8,84
80018810:	f4 08 00 08 	add	r8,r10,r8
80018814:	2b c8       	sub	r8,-68
80018816:	11 98       	ld.ub	r8,r8[0x1]
80018818:	5c 58       	castu.b	r8
8001881a:	ec fa 00 2c 	ld.w	r10,r6[44]
8001881e:	f2 09 10 54 	mul	r9,r9,84
80018822:	f4 09 00 09 	add	r9,r10,r9
80018826:	f2 08 00 08 	add	r8,r9,r8
8001882a:	2d c8       	sub	r8,-36
8001882c:	11 88       	ld.ub	r8,r8[0x0]
8001882e:	ef 68 ff ff 	st.b	r7[-1],r8
  spi_buffers[spi_index].SPIinBufferTail=  (spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80018832:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018836:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001883a:	ec fa 00 2c 	ld.w	r10,r6[44]
8001883e:	f0 08 10 54 	mul	r8,r8,84
80018842:	f4 08 00 08 	add	r8,r10,r8
80018846:	2b c8       	sub	r8,-68
80018848:	11 98       	ld.ub	r8,r8[0x1]
8001884a:	5c 58       	castu.b	r8
8001884c:	2f f8       	sub	r8,-1
8001884e:	5c 58       	castu.b	r8
80018850:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018854:	ec fa 00 2c 	ld.w	r10,r6[44]
80018858:	f2 09 10 54 	mul	r9,r9,84
8001885c:	f4 09 00 09 	add	r9,r10,r9
80018860:	2b c9       	sub	r9,-68
80018862:	b2 98       	st.b	r9[0x1],r8
  return byte;
80018864:	ef 38 ff ff 	ld.ub	r8,r7[-1]

}
80018868:	10 9c       	mov	r12,r8
8001886a:	2f ed       	sub	sp,-8
8001886c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018870:	80 01       	ld.sh	r1,r0[0x0]
80018872:	86 4a       	ld.sh	r10,r3[0x8]

80018874 <clearSPIReadBuffer>:

void clearSPIReadBuffer(int spi_index){
80018874:	eb cd 40 c0 	pushm	r6-r7,lr
80018878:	1a 97       	mov	r7,sp
8001887a:	20 1d       	sub	sp,4
8001887c:	48 e6       	lddpc	r6,800188b4 <clearSPIReadBuffer+0x40>
8001887e:	1e 26       	rsub	r6,pc
80018880:	ef 4c ff fc 	st.w	r7[-4],r12
  spi_buffers[spi_index].SPIinBufferTail=spi_buffers[spi_index].SPIinBufferHead;
80018884:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018888:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001888c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018890:	f0 08 10 54 	mul	r8,r8,84
80018894:	f4 08 00 08 	add	r8,r10,r8
80018898:	2b c8       	sub	r8,-68
8001889a:	11 88       	ld.ub	r8,r8[0x0]
8001889c:	5c 58       	castu.b	r8
8001889e:	ec fa 00 2c 	ld.w	r10,r6[44]
800188a2:	f2 09 10 54 	mul	r9,r9,84
800188a6:	f4 09 00 09 	add	r9,r10,r9
800188aa:	2b c9       	sub	r9,-68
800188ac:	b2 98       	st.b	r9[0x1],r8
}
800188ae:	2f fd       	sub	sp,-4
800188b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800188b4:	80 01       	ld.sh	r1,r0[0x0]
800188b6:	87 02       	st.w	r3[0x0],r2

800188b8 <writeSPI>:

/** writes one byte to the outgoing SPI buffer
 *  if buffer is full, this method blocks
 *  if sending is paused and buffer runs full, sending is automatically resumed!!
 */
void writeSPI(int spi_index, uint8_t value){
800188b8:	eb cd 40 c0 	pushm	r6-r7,lr
800188bc:	1a 97       	mov	r7,sp
800188be:	20 3d       	sub	sp,12
800188c0:	4a b6       	lddpc	r6,8001896c <writeSPI+0xb4>
800188c2:	1e 26       	rsub	r6,pc
800188c4:	ef 4c ff f8 	st.w	r7[-8],r12
800188c8:	16 98       	mov	r8,r11
800188ca:	ef 68 ff f4 	st.b	r7[-12],r8
  uint8_t newIndex;

  newIndex=(spi_buffers[spi_index].SPIoutBufferHead+1)&SPI_BUFFER_MASK;
800188ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188d2:	ec f9 00 2c 	ld.w	r9,r6[44]
800188d6:	f0 08 10 54 	mul	r8,r8,84
800188da:	f2 08 00 08 	add	r8,r9,r8
800188de:	2b c8       	sub	r8,-68
800188e0:	11 a8       	ld.ub	r8,r8[0x2]
800188e2:	5c 58       	castu.b	r8
800188e4:	2f f8       	sub	r8,-1
800188e6:	5c 58       	castu.b	r8
800188e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800188ec:	ef 68 ff ff 	st.b	r7[-1],r8
  // check if buffer is already full and wait
  //while (newIndex==spi_buffers[spi_index].SPIoutBufferTail) 
  //{
    //if (spi_buffers[spi_index].automatic==0) resumeSPI(spi_index);
  //}
  spi_buffers[spi_index].SPIOutBuffer[(spi_buffers[spi_index].SPIoutBufferHead)]=value;
800188f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800188f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800188f8:	ec fa 00 2c 	ld.w	r10,r6[44]
800188fc:	f0 08 10 54 	mul	r8,r8,84
80018900:	f4 08 00 08 	add	r8,r10,r8
80018904:	2b c8       	sub	r8,-68
80018906:	11 a8       	ld.ub	r8,r8[0x2]
80018908:	5c 58       	castu.b	r8
8001890a:	ec fa 00 2c 	ld.w	r10,r6[44]
8001890e:	f2 09 10 54 	mul	r9,r9,84
80018912:	f4 09 00 09 	add	r9,r10,r9
80018916:	f2 08 00 08 	add	r8,r9,r8
8001891a:	f0 c9 ff fc 	sub	r9,r8,-4
8001891e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80018922:	b2 88       	st.b	r9[0x0],r8
  spi_buffers[spi_index].SPIoutBufferHead = newIndex;
80018924:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018928:	ec f9 00 2c 	ld.w	r9,r6[44]
8001892c:	f0 08 10 54 	mul	r8,r8,84
80018930:	f2 08 00 08 	add	r8,r9,r8
80018934:	f0 c9 ff bc 	sub	r9,r8,-68
80018938:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001893c:	b2 a8       	st.b	r9[0x2],r8


  if (spi_buffers[spi_index].automatic==1) startSPI(spi_index);
8001893e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018942:	ec f9 00 2c 	ld.w	r9,r6[44]
80018946:	f0 08 10 54 	mul	r8,r8,84
8001894a:	f2 08 00 08 	add	r8,r9,r8
8001894e:	2b 88       	sub	r8,-72
80018950:	11 b8       	ld.ub	r8,r8[0x3]
80018952:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018956:	30 18       	mov	r8,1
80018958:	f0 09 18 00 	cp.b	r9,r8
8001895c:	c0 51       	brne	80018966 <writeSPI+0xae>
8001895e:	ee fc ff f8 	ld.w	r12,r7[-8]
80018962:	f0 16 00 f3 	mcall	r6[972]
}
80018966:	2f dd       	sub	sp,-12
80018968:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001896c:	80 01       	ld.sh	r1,r0[0x0]
8001896e:	87 46       	st.w	r3[0x10],r6

80018970 <SPItransmit>:

void SPItransmit(int spi_index) {
80018970:	eb cd 40 c0 	pushm	r6-r7,lr
80018974:	1a 97       	mov	r7,sp
80018976:	20 1d       	sub	sp,4
80018978:	4d 66       	lddpc	r6,80018ad0 <SPItransmit+0x160>
8001897a:	1e 26       	rsub	r6,pc
8001897c:	ef 4c ff fc 	st.w	r7[-4],r12
 if (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail) 
80018980:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018984:	ec f9 00 2c 	ld.w	r9,r6[44]
80018988:	f0 08 10 54 	mul	r8,r8,84
8001898c:	f2 08 00 08 	add	r8,r9,r8
80018990:	2b c8       	sub	r8,-68
80018992:	11 a8       	ld.ub	r8,r8[0x2]
80018994:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001899c:	ec fa 00 2c 	ld.w	r10,r6[44]
800189a0:	f0 08 10 54 	mul	r8,r8,84
800189a4:	f4 08 00 08 	add	r8,r10,r8
800189a8:	2b c8       	sub	r8,-68
800189aa:	11 b8       	ld.ub	r8,r8[0x3]
800189ac:	5c 58       	castu.b	r8
800189ae:	f0 09 18 00 	cp.b	r9,r8
800189b2:	c4 90       	breq	80018a44 <SPItransmit+0xd4>
 {
    // read data from buffer and copy it to SPI unit
	spi_buffers[spi_index].spi->tdr = spi_buffers[spi_index].SPIOutBuffer[spi_buffers[spi_index].SPIoutBufferTail];
800189b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189b8:	ec f9 00 2c 	ld.w	r9,r6[44]
800189bc:	f0 08 10 54 	mul	r8,r8,84
800189c0:	f2 08 00 08 	add	r8,r9,r8
800189c4:	70 09       	ld.w	r9,r8[0x0]
800189c6:	ee fa ff fc 	ld.w	r10,r7[-4]
800189ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189ce:	ec fb 00 2c 	ld.w	r11,r6[44]
800189d2:	f0 08 10 54 	mul	r8,r8,84
800189d6:	f6 08 00 08 	add	r8,r11,r8
800189da:	2b c8       	sub	r8,-68
800189dc:	11 b8       	ld.ub	r8,r8[0x3]
800189de:	5c 58       	castu.b	r8
800189e0:	ec fb 00 2c 	ld.w	r11,r6[44]
800189e4:	f4 0a 10 54 	mul	r10,r10,84
800189e8:	f6 0a 00 0a 	add	r10,r11,r10
800189ec:	f4 08 00 08 	add	r8,r10,r8
800189f0:	2f c8       	sub	r8,-4
800189f2:	11 88       	ld.ub	r8,r8[0x0]
800189f4:	5c 58       	castu.b	r8
800189f6:	93 38       	st.w	r9[0xc],r8
    spi_buffers[spi_index].transmission_in_progress=1;    
800189f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800189fc:	ec f9 00 2c 	ld.w	r9,r6[44]
80018a00:	f0 08 10 54 	mul	r8,r8,84
80018a04:	f2 08 00 08 	add	r8,r9,r8
80018a08:	f0 c9 ff b8 	sub	r9,r8,-72
80018a0c:	30 18       	mov	r8,1
80018a0e:	b2 a8       	st.b	r9[0x2],r8
    // update buffer index
    spi_buffers[spi_index].SPIoutBufferTail=  (spi_buffers[spi_index].SPIoutBufferTail+1)&SPI_BUFFER_MASK;
80018a10:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a18:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a1c:	f0 08 10 54 	mul	r8,r8,84
80018a20:	f4 08 00 08 	add	r8,r10,r8
80018a24:	2b c8       	sub	r8,-68
80018a26:	11 b8       	ld.ub	r8,r8[0x3]
80018a28:	5c 58       	castu.b	r8
80018a2a:	2f f8       	sub	r8,-1
80018a2c:	5c 58       	castu.b	r8
80018a2e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018a32:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a36:	f2 09 10 54 	mul	r9,r9,84
80018a3a:	f4 09 00 09 	add	r9,r10,r9
80018a3e:	2b c9       	sub	r9,-68
80018a40:	b2 b8       	st.b	r9[0x3],r8
80018a42:	c4 38       	rjmp	80018ac8 <SPItransmit+0x158>
	//spi_enable(spi_buffers[spi_index].spi);

  } else {
    spi_buffers[spi_index].SPIoutBufferTail=spi_buffers[spi_index].SPIoutBufferHead;
80018a44:	ee f9 ff fc 	ld.w	r9,r7[-4]
80018a48:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a4c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a50:	f0 08 10 54 	mul	r8,r8,84
80018a54:	f4 08 00 08 	add	r8,r10,r8
80018a58:	2b c8       	sub	r8,-68
80018a5a:	11 a8       	ld.ub	r8,r8[0x2]
80018a5c:	5c 58       	castu.b	r8
80018a5e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a62:	f2 09 10 54 	mul	r9,r9,84
80018a66:	f4 09 00 09 	add	r9,r10,r9
80018a6a:	2b c9       	sub	r9,-68
80018a6c:	b2 b8       	st.b	r9[0x3],r8
    //PORTB |= _BV(SPI_CS);	// pull chip select high to end transmission
	spi_deselect_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018a6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a72:	f0 08 10 54 	mul	r8,r8,84
80018a76:	f0 c9 ff b0 	sub	r9,r8,-80
80018a7a:	ec f8 00 2c 	ld.w	r8,r6[44]
80018a7e:	10 09       	add	r9,r8
80018a80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a84:	ec fa 00 2c 	ld.w	r10,r6[44]
80018a88:	f0 08 10 54 	mul	r8,r8,84
80018a8c:	f4 08 00 08 	add	r8,r10,r8
80018a90:	70 08       	ld.w	r8,r8[0x0]
80018a92:	12 9b       	mov	r11,r9
80018a94:	10 9c       	mov	r12,r8
80018a96:	fe b0 fb db 	rcall	8001824c <spi_deselect_device>
    spi_buffers[spi_index].transmission_in_progress=0;
80018a9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018a9e:	ec f9 00 2c 	ld.w	r9,r6[44]
80018aa2:	f0 08 10 54 	mul	r8,r8,84
80018aa6:	f2 08 00 08 	add	r8,r9,r8
80018aaa:	f0 c9 ff b8 	sub	r9,r8,-72
80018aae:	30 08       	mov	r8,0
80018ab0:	b2 a8       	st.b	r9[0x2],r8
	spi_buffers[spi_index].spi->idr =AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018ab2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ab6:	ec f9 00 2c 	ld.w	r9,r6[44]
80018aba:	f0 08 10 54 	mul	r8,r8,84
80018abe:	f2 08 00 08 	add	r8,r9,r8
80018ac2:	70 08       	ld.w	r8,r8[0x0]
80018ac4:	30 39       	mov	r9,3
80018ac6:	91 69       	st.w	r8[0x18],r9
    //SPCR&=~_BV(SPIE);
 }
}
80018ac8:	2f fd       	sub	sp,-4
80018aca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018ace:	00 00       	add	r0,r0
80018ad0:	80 01       	ld.sh	r1,r0[0x0]
80018ad2:	87 fe       	st.w	r3[0x3c],lr

80018ad4 <startSPI>:

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
80018ad4:	eb cd 40 c0 	pushm	r6-r7,lr
80018ad8:	1a 97       	mov	r7,sp
80018ada:	20 1d       	sub	sp,4
80018adc:	4a f6       	lddpc	r6,80018b98 <startSPI+0xc4>
80018ade:	1e 26       	rsub	r6,pc
80018ae0:	ef 4c ff fc 	st.w	r7[-4],r12
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018ae4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ae8:	ec f9 00 2c 	ld.w	r9,r6[44]
80018aec:	f0 08 10 54 	mul	r8,r8,84
80018af0:	f2 08 00 08 	add	r8,r9,r8
80018af4:	2b 88       	sub	r8,-72
80018af6:	11 a8       	ld.ub	r8,r8[0x2]
80018af8:	5c 58       	castu.b	r8
80018afa:	c4 c1       	brne	80018b92 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
80018afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b00:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b04:	f0 08 10 54 	mul	r8,r8,84
80018b08:	f2 08 00 08 	add	r8,r9,r8
80018b0c:	2b c8       	sub	r8,-68
80018b0e:	11 a8       	ld.ub	r8,r8[0x2]
80018b10:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018b14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b18:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b1c:	f0 08 10 54 	mul	r8,r8,84
80018b20:	f4 08 00 08 	add	r8,r10,r8
80018b24:	2b c8       	sub	r8,-68
80018b26:	11 b8       	ld.ub	r8,r8[0x3]
80018b28:	5c 58       	castu.b	r8

/** initiates SPI transmission by sending first byte
*/
void startSPI(int spi_index) {
  // check flag if transmission is in progress
  if ((spi_buffers[spi_index].transmission_in_progress==0)
80018b2a:	f0 09 18 00 	cp.b	r9,r8
80018b2e:	c3 20       	breq	80018b92 <startSPI+0xbe>
	&&(spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail)) {
    // if not, initiate transmission by sending first byte
    //!!!!PORTB &= ~_BV(SPI_CS);	// pull chip select low to start transmission
	spi_select_device(spi_buffers[spi_index].spi, &spi_buffers[spi_index].adc_spi);
80018b30:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b34:	f0 08 10 54 	mul	r8,r8,84
80018b38:	f0 c9 ff b0 	sub	r9,r8,-80
80018b3c:	ec f8 00 2c 	ld.w	r8,r6[44]
80018b40:	10 09       	add	r9,r8
80018b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b46:	ec fa 00 2c 	ld.w	r10,r6[44]
80018b4a:	f0 08 10 54 	mul	r8,r8,84
80018b4e:	f4 08 00 08 	add	r8,r10,r8
80018b52:	70 08       	ld.w	r8,r8[0x0]
80018b54:	12 9b       	mov	r11,r9
80018b56:	10 9c       	mov	r12,r8
80018b58:	fe b0 fb 62 	rcall	8001821c <spi_select_device>

    spi_buffers[spi_index].transmission_in_progress=1;
80018b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b60:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b64:	f0 08 10 54 	mul	r8,r8,84
80018b68:	f2 08 00 08 	add	r8,r9,r8
80018b6c:	f0 c9 ff b8 	sub	r9,r8,-72
80018b70:	30 18       	mov	r8,1
80018b72:	b2 a8       	st.b	r9[0x2],r8
    // activate interrupt to initiate transmission
    //!!!!SPCR|=_BV(SPIE);
 	spi_buffers[spi_index].spi->ier = AVR32_SPI_IER_RDRF_MASK | AVR32_SPI_IER_TDRE_MASK;
80018b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018b78:	ec f9 00 2c 	ld.w	r9,r6[44]
80018b7c:	f0 08 10 54 	mul	r8,r8,84
80018b80:	f2 08 00 08 	add	r8,r9,r8
80018b84:	70 08       	ld.w	r8,r8[0x0]
80018b86:	30 39       	mov	r9,3
80018b88:	91 59       	st.w	r8[0x14],r9

    SPItransmit(spi_index);
80018b8a:	ee fc ff fc 	ld.w	r12,r7[-4]
80018b8e:	f0 16 01 35 	mcall	r6[1236]
  }
}
80018b92:	2f fd       	sub	sp,-4
80018b94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018b98:	80 01       	ld.sh	r1,r0[0x0]
80018b9a:	89 62       	st.w	r4[0x18],r2

80018b9c <SPITransferFinished>:

int8_t SPITransferFinished(int spi_index) {
80018b9c:	eb cd 40 c0 	pushm	r6-r7,lr
80018ba0:	1a 97       	mov	r7,sp
80018ba2:	20 1d       	sub	sp,4
80018ba4:	49 16       	lddpc	r6,80018be8 <SPITransferFinished+0x4c>
80018ba6:	1e 26       	rsub	r6,pc
80018ba8:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi_buffers[spi_index].SPIoutBufferHead==spi_buffers[spi_index].SPIoutBufferTail);
80018bac:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bb0:	ec f9 00 2c 	ld.w	r9,r6[44]
80018bb4:	f0 08 10 54 	mul	r8,r8,84
80018bb8:	f2 08 00 08 	add	r8,r9,r8
80018bbc:	2b c8       	sub	r8,-68
80018bbe:	11 a8       	ld.ub	r8,r8[0x2]
80018bc0:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018bc4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018bc8:	ec fa 00 2c 	ld.w	r10,r6[44]
80018bcc:	f0 08 10 54 	mul	r8,r8,84
80018bd0:	f4 08 00 08 	add	r8,r10,r8
80018bd4:	2b c8       	sub	r8,-68
80018bd6:	11 b8       	ld.ub	r8,r8[0x3]
80018bd8:	5c 58       	castu.b	r8
80018bda:	f0 09 18 00 	cp.b	r9,r8
80018bde:	5f 08       	sreq	r8
}
80018be0:	10 9c       	mov	r12,r8
80018be2:	2f fd       	sub	sp,-4
80018be4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018be8:	80 01       	ld.sh	r1,r0[0x0]
80018bea:	8a 2a       	ld.sh	r10,r5[0x4]

80018bec <SPIFlushBuffer>:

/** waits until whole buffer is written to SPI bus
 *  automatically resumes sending if SPI interface was paused */
void SPIFlushBuffer(int spi_index) {
80018bec:	eb cd 40 c0 	pushm	r6-r7,lr
80018bf0:	1a 97       	mov	r7,sp
80018bf2:	20 1d       	sub	sp,4
80018bf4:	49 36       	lddpc	r6,80018c40 <SPIFlushBuffer+0x54>
80018bf6:	1e 26       	rsub	r6,pc
80018bf8:	ef 4c ff fc 	st.w	r7[-4],r12
 	resumeSPI(spi_index);
80018bfc:	ee fc ff fc 	ld.w	r12,r7[-4]
80018c00:	f0 16 01 f4 	mcall	r6[2000]
	while (spi_buffers[spi_index].SPIoutBufferHead!=spi_buffers[spi_index].SPIoutBufferTail);
80018c04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c08:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c0c:	f0 08 10 54 	mul	r8,r8,84
80018c10:	f2 08 00 08 	add	r8,r9,r8
80018c14:	2b c8       	sub	r8,-68
80018c16:	11 a8       	ld.ub	r8,r8[0x2]
80018c18:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c20:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c24:	f0 08 10 54 	mul	r8,r8,84
80018c28:	f4 08 00 08 	add	r8,r10,r8
80018c2c:	2b c8       	sub	r8,-68
80018c2e:	11 b8       	ld.ub	r8,r8[0x3]
80018c30:	5c 58       	castu.b	r8
80018c32:	f0 09 18 00 	cp.b	r9,r8
80018c36:	ce 71       	brne	80018c04 <SPIFlushBuffer+0x18>
}
80018c38:	2f fd       	sub	sp,-4
80018c3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c3e:	00 00       	add	r0,r0
80018c40:	80 01       	ld.sh	r1,r0[0x0]
80018c42:	8a 7a       	ld.sh	r10,r5[0xe]

80018c44 <SPIBytesAvailable>:

/** returns the number of bytes in the incoming buffer
 */
uint8_t SPIBytesAvailable(int spi_index){
80018c44:	eb cd 40 c0 	pushm	r6-r7,lr
80018c48:	1a 97       	mov	r7,sp
80018c4a:	20 1d       	sub	sp,4
80018c4c:	49 36       	lddpc	r6,80018c98 <SPIBytesAvailable+0x54>
80018c4e:	1e 26       	rsub	r6,pc
80018c50:	ef 4c ff fc 	st.w	r7[-4],r12
  return (SPI_BUFFER_SIZE + spi_buffers[spi_index].SPIinBufferHead - spi_buffers[spi_index].SPIinBufferTail)&SPI_BUFFER_MASK;
80018c54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c58:	ec f9 00 2c 	ld.w	r9,r6[44]
80018c5c:	f0 08 10 54 	mul	r8,r8,84
80018c60:	f2 08 00 08 	add	r8,r9,r8
80018c64:	2b c8       	sub	r8,-68
80018c66:	11 88       	ld.ub	r8,r8[0x0]
80018c68:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018c6c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018c70:	ec fa 00 2c 	ld.w	r10,r6[44]
80018c74:	f0 08 10 54 	mul	r8,r8,84
80018c78:	f4 08 00 08 	add	r8,r10,r8
80018c7c:	2b c8       	sub	r8,-68
80018c7e:	11 98       	ld.ub	r8,r8[0x1]
80018c80:	5c 58       	castu.b	r8
80018c82:	f2 08 01 08 	sub	r8,r9,r8
80018c86:	5c 58       	castu.b	r8
80018c88:	2e 08       	sub	r8,-32
80018c8a:	5c 58       	castu.b	r8
80018c8c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
}
80018c90:	10 9c       	mov	r12,r8
80018c92:	2f fd       	sub	sp,-4
80018c94:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018c98:	80 01       	ld.sh	r1,r0[0x0]
80018c9a:	8a d2       	ld.uh	r2,r5[0xa]

80018c9c <spi_handler>:





void spi_handler(int spi_index) {
80018c9c:	eb cd 40 c0 	pushm	r6-r7,lr
80018ca0:	1a 97       	mov	r7,sp
80018ca2:	20 2d       	sub	sp,8
80018ca4:	4d e6       	lddpc	r6,80018e1c <spi_handler+0x180>
80018ca6:	1e 26       	rsub	r6,pc
80018ca8:	ef 4c ff f8 	st.w	r7[-8],r12
  uint8_t inData;
  uint8_t tmp;
  inData=spi_buffers[spi_index].spi->rdr;
80018cac:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cb0:	ec f9 00 2c 	ld.w	r9,r6[44]
80018cb4:	f0 08 10 54 	mul	r8,r8,84
80018cb8:	f2 08 00 08 	add	r8,r9,r8
80018cbc:	70 08       	ld.w	r8,r8[0x0]
80018cbe:	70 28       	ld.w	r8,r8[0x8]
80018cc0:	ef 68 ff fe 	st.b	r7[-2],r8

  if ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_TDRE_MASK)!=0) {
80018cc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cc8:	ec f9 00 2c 	ld.w	r9,r6[44]
80018ccc:	f0 08 10 54 	mul	r8,r8,84
80018cd0:	f2 08 00 08 	add	r8,r9,r8
80018cd4:	70 08       	ld.w	r8,r8[0x0]
80018cd6:	70 48       	ld.w	r8,r8[0x10]
80018cd8:	e2 18 00 02 	andl	r8,0x2,COH
80018cdc:	c0 50       	breq	80018ce6 <spi_handler+0x4a>
	// initiate transfer if necessary
	SPItransmit(spi_index);
80018cde:	ee fc ff f8 	ld.w	r12,r7[-8]
80018ce2:	f0 16 01 35 	mcall	r6[1236]
  }	
  // only process received data when receiver is activated
  if ((spi_buffers[spi_index].spiReceiverOn==1)&& ((spi_buffers[spi_index].spi->sr & AVR32_SPI_SR_RDRF_MASK)!=0)) {
80018ce6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018cea:	ec f9 00 2c 	ld.w	r9,r6[44]
80018cee:	f0 08 10 54 	mul	r8,r8,84
80018cf2:	f2 08 00 08 	add	r8,r9,r8
80018cf6:	2b 88       	sub	r8,-72
80018cf8:	11 88       	ld.ub	r8,r8[0x0]
80018cfa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80018cfe:	30 18       	mov	r8,1
80018d00:	f0 09 18 00 	cp.b	r9,r8
80018d04:	e0 81 00 88 	brne	80018e14 <spi_handler+0x178>
80018d08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d0c:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d10:	f0 08 10 54 	mul	r8,r8,84
80018d14:	f2 08 00 08 	add	r8,r9,r8
80018d18:	70 08       	ld.w	r8,r8[0x0]
80018d1a:	70 48       	ld.w	r8,r8[0x10]
80018d1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018d20:	5c 58       	castu.b	r8
80018d22:	c7 90       	breq	80018e14 <spi_handler+0x178>
	 // read incoming data from SPI port
	spi_buffers[spi_index].traffic++;
80018d24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d28:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d2c:	f0 09 10 54 	mul	r9,r8,84
80018d30:	f4 09 00 09 	add	r9,r10,r9
80018d34:	2b 89       	sub	r9,-72
80018d36:	13 99       	ld.ub	r9,r9[0x1]
80018d38:	5c 59       	castu.b	r9
80018d3a:	2f f9       	sub	r9,-1
80018d3c:	5c 59       	castu.b	r9
80018d3e:	ec fa 00 2c 	ld.w	r10,r6[44]
80018d42:	f0 08 10 54 	mul	r8,r8,84
80018d46:	f4 08 00 08 	add	r8,r10,r8
80018d4a:	f0 ca ff b8 	sub	r10,r8,-72
80018d4e:	12 98       	mov	r8,r9
80018d50:	b4 98       	st.b	r10[0x1],r8

    tmp=(spi_buffers[spi_index].SPIinBufferHead+1)&SPI_BUFFER_MASK;
80018d52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d56:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d5a:	f0 08 10 54 	mul	r8,r8,84
80018d5e:	f2 08 00 08 	add	r8,r9,r8
80018d62:	2b c8       	sub	r8,-68
80018d64:	11 88       	ld.ub	r8,r8[0x0]
80018d66:	5c 58       	castu.b	r8
80018d68:	2f f8       	sub	r8,-1
80018d6a:	5c 58       	castu.b	r8
80018d6c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018d70:	ef 68 ff ff 	st.b	r7[-1],r8
    
    if (tmp==spi_buffers[spi_index].SPIinBufferTail) {
80018d74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d78:	ec f9 00 2c 	ld.w	r9,r6[44]
80018d7c:	f0 08 10 54 	mul	r8,r8,84
80018d80:	f2 08 00 08 	add	r8,r9,r8
80018d84:	2b c8       	sub	r8,-68
80018d86:	11 98       	ld.ub	r8,r8[0x1]
80018d88:	5c 58       	castu.b	r8
80018d8a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80018d8e:	f0 09 18 00 	cp.b	r9,r8
80018d92:	c1 a1       	brne	80018dc6 <spi_handler+0x12a>
      //error: receive buffer overflow!!
      // lose old incoming data at the end of the buffer
      spi_buffers[spi_index].SPIinBufferTail=(spi_buffers[spi_index].SPIinBufferTail+1)&SPI_BUFFER_MASK;
80018d94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018d98:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018d9c:	ec fa 00 2c 	ld.w	r10,r6[44]
80018da0:	f0 08 10 54 	mul	r8,r8,84
80018da4:	f4 08 00 08 	add	r8,r10,r8
80018da8:	2b c8       	sub	r8,-68
80018daa:	11 98       	ld.ub	r8,r8[0x1]
80018dac:	5c 58       	castu.b	r8
80018dae:	2f f8       	sub	r8,-1
80018db0:	5c 58       	castu.b	r8
80018db2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80018db6:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dba:	f2 09 10 54 	mul	r9,r9,84
80018dbe:	f4 09 00 09 	add	r9,r10,r9
80018dc2:	2b c9       	sub	r9,-68
80018dc4:	b2 98       	st.b	r9[0x1],r8
    } 
    // store incoming data in buffer
    spi_buffers[spi_index].SPIInBuffer[spi_buffers[spi_index].SPIinBufferHead] = inData;
80018dc6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80018dca:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dce:	ec fa 00 2c 	ld.w	r10,r6[44]
80018dd2:	f0 08 10 54 	mul	r8,r8,84
80018dd6:	f4 08 00 08 	add	r8,r10,r8
80018dda:	2b c8       	sub	r8,-68
80018ddc:	11 88       	ld.ub	r8,r8[0x0]
80018dde:	5c 58       	castu.b	r8
80018de0:	ec fa 00 2c 	ld.w	r10,r6[44]
80018de4:	f2 09 10 54 	mul	r9,r9,84
80018de8:	f4 09 00 09 	add	r9,r10,r9
80018dec:	f2 08 00 08 	add	r8,r9,r8
80018df0:	f0 c9 ff dc 	sub	r9,r8,-36
80018df4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
80018df8:	b2 88       	st.b	r9[0x0],r8
    // move head pointer forward
    spi_buffers[spi_index].SPIinBufferHead=tmp;
80018dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80018dfe:	ec f9 00 2c 	ld.w	r9,r6[44]
80018e02:	f0 08 10 54 	mul	r8,r8,84
80018e06:	f2 08 00 08 	add	r8,r9,r8
80018e0a:	f0 c9 ff bc 	sub	r9,r8,-68
80018e0e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80018e12:	b2 88       	st.b	r9[0x0],r8
  
  }
    
}
80018e14:	2f ed       	sub	sp,-8
80018e16:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e1a:	00 00       	add	r0,r0
80018e1c:	80 01       	ld.sh	r1,r0[0x0]
80018e1e:	8b 2a       	st.w	r5[0x8],r10

80018e20 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
80018e20:	eb cd 40 80 	pushm	r7,lr
80018e24:	1a 97       	mov	r7,sp
80018e26:	20 1d       	sub	sp,4
80018e28:	18 98       	mov	r8,r12
80018e2a:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
80018e2e:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80018e32:	58 38       	cp.w	r8,3
80018e34:	c1 20       	breq	80018e58 <osc_get_rate+0x38>
80018e36:	e0 89 00 07 	brgt	80018e44 <osc_get_rate+0x24>
80018e3a:	58 08       	cp.w	r8,0
80018e3c:	c0 90       	breq	80018e4e <osc_get_rate+0x2e>
80018e3e:	58 28       	cp.w	r8,2
80018e40:	c0 f0       	breq	80018e5e <osc_get_rate+0x3e>
80018e42:	c1 b8       	rjmp	80018e78 <osc_get_rate+0x58>
80018e44:	58 48       	cp.w	r8,4
80018e46:	c1 10       	breq	80018e68 <osc_get_rate+0x48>
80018e48:	58 58       	cp.w	r8,5
80018e4a:	c1 40       	breq	80018e72 <osc_get_rate+0x52>
80018e4c:	c1 68       	rjmp	80018e78 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
80018e4e:	e0 68 24 00 	mov	r8,9216
80018e52:	ea 18 00 f4 	orh	r8,0xf4
80018e56:	c1 28       	rjmp	80018e7a <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
80018e58:	e0 68 80 00 	mov	r8,32768
80018e5c:	c0 f8       	rjmp	80018e7a <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
80018e5e:	e0 68 12 00 	mov	r8,4608
80018e62:	ea 18 00 7a 	orh	r8,0x7a
80018e66:	c0 a8       	rjmp	80018e7a <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
80018e68:	e0 68 0e 00 	mov	r8,3584
80018e6c:	ea 18 07 27 	orh	r8,0x727
80018e70:	c0 58       	rjmp	80018e7a <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
80018e72:	e0 78 c1 38 	mov	r8,115000
80018e76:	c0 28       	rjmp	80018e7a <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
80018e78:	30 08       	mov	r8,0
	}
}
80018e7a:	10 9c       	mov	r12,r8
80018e7c:	2f fd       	sub	sp,-4
80018e7e:	e3 cd 80 80 	ldm	sp++,r7,pc

80018e82 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
80018e82:	eb cd 40 c0 	pushm	r6-r7,lr
80018e86:	1a 97       	mov	r7,sp
80018e88:	48 56       	lddpc	r6,80018e9c <sysclk_get_main_hz+0x1a>
80018e8a:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
80018e8c:	30 0c       	mov	r12,0
80018e8e:	cc 9f       	rcall	80018e20 <osc_get_rate>
80018e90:	18 98       	mov	r8,r12
80018e92:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
80018e94:	10 9c       	mov	r12,r8
80018e96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018e9a:	00 00       	add	r0,r0
80018e9c:	80 01       	ld.sh	r1,r0[0x0]
80018e9e:	8d 0e       	st.w	r6[0x0],lr

80018ea0 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
80018ea0:	eb cd 40 c0 	pushm	r6-r7,lr
80018ea4:	1a 97       	mov	r7,sp
80018ea6:	48 46       	lddpc	r6,80018eb4 <sysclk_get_cpu_hz+0x14>
80018ea8:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
80018eaa:	ce cf       	rcall	80018e82 <sysclk_get_main_hz>
80018eac:	18 98       	mov	r8,r12
}
80018eae:	10 9c       	mov	r12,r8
80018eb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80018eb4:	80 01       	ld.sh	r1,r0[0x0]
80018eb6:	8d 2c       	st.w	r6[0x8],r12

80018eb8 <uart_handler_0>:
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018eb8:	eb cd 40 c0 	pushm	r6-r7,lr
80018ebc:	1a 97       	mov	r7,sp
80018ebe:	20 2d       	sub	sp,8
80018ec0:	4b 26       	lddpc	r6,80018f88 <uart_handler_0+0xd0>
80018ec2:	1e 26       	rsub	r6,pc
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
80018ec4:	ec f8 00 34 	ld.w	r8,r6[52]
80018ec8:	70 18       	ld.w	r8,r8[0x4]
80018eca:	70 58       	ld.w	r8,r8[0x14]
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018ecc:	ef 48 ff fc 	st.w	r7[-4],r8
	uint8_t c1;\
	int csr=usart_opt[0].uart_device.uart->csr;\
	if (csr & AVR32_USART_CSR_RXRDY_MASK) {\
80018ed0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018ed4:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018ed8:	5c 58       	castu.b	r8
80018eda:	c2 70       	breq	80018f28 <uart_handler_0+0x70>
		c1=(uint8_t)usart_opt[0].uart_device.uart->rhr;\
80018edc:	ec f8 00 34 	ld.w	r8,r6[52]
80018ee0:	70 18       	ld.w	r8,r8[0x4]
80018ee2:	70 68       	ld.w	r8,r8[0x18]
80018ee4:	ef 68 ff fb 	st.b	r7[-5],r8
		if (usart_opt[0].uart_device.receive_stream==NULL) {\
80018ee8:	ec f8 00 34 	ld.w	r8,r6[52]
80018eec:	f0 f8 02 14 	ld.w	r8,r8[532]
80018ef0:	58 08       	cp.w	r8,0
80018ef2:	c0 c1       	brne	80018f0a <uart_handler_0+0x52>
			buffer_put(&(usart_opt[0].uart_device.receive_buffer), c1);\
80018ef4:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018ef8:	ec f8 00 34 	ld.w	r8,r6[52]
80018efc:	f0 c8 fe f1 	sub	r8,r8,-271
80018f00:	12 9b       	mov	r11,r9
80018f02:	10 9c       	mov	r12,r8
80018f04:	f0 16 00 55 	mcall	r6[340]
80018f08:	c1 08       	rjmp	80018f28 <uart_handler_0+0x70>
		} else {\
			usart_opt[0].uart_device.receive_stream->put(usart_opt[0].uart_device.receive_stream->data, c1);\
80018f0a:	ec f8 00 34 	ld.w	r8,r6[52]
80018f0e:	f0 f8 02 14 	ld.w	r8,r8[532]
80018f12:	70 18       	ld.w	r8,r8[0x4]
80018f14:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018f18:	ec f9 00 34 	ld.w	r9,r6[52]
80018f1c:	f2 f9 02 14 	ld.w	r9,r9[532]
80018f20:	72 59       	ld.w	r9,r9[0x14]
80018f22:	14 9b       	mov	r11,r10
80018f24:	12 9c       	mov	r12,r9
80018f26:	5d 18       	icall	r8
		}\
	}\
	if (csr & AVR32_USART_CSR_TXRDY_MASK) {\
80018f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018f2c:	e2 18 00 02 	andl	r8,0x2,COH
80018f30:	c2 80       	breq	80018f80 <uart_handler_0+0xc8>
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))>0) {\
80018f32:	ec f8 00 34 	ld.w	r8,r6[52]
80018f36:	2f 48       	sub	r8,-12
80018f38:	10 9c       	mov	r12,r8
80018f3a:	f0 16 00 2e 	mcall	r6[184]
80018f3e:	18 98       	mov	r8,r12
80018f40:	58 08       	cp.w	r8,0
80018f42:	e0 8a 00 11 	brle	80018f64 <uart_handler_0+0xac>
			c1=buffer_get(&(usart_opt[0].uart_device.transmit_buffer));\
80018f46:	ec f8 00 34 	ld.w	r8,r6[52]
80018f4a:	2f 48       	sub	r8,-12
80018f4c:	10 9c       	mov	r12,r8
80018f4e:	f0 16 00 45 	mcall	r6[276]
80018f52:	18 98       	mov	r8,r12
80018f54:	ef 68 ff fb 	st.b	r7[-5],r8
			usart_opt[0].uart_device.uart->thr=c1;\
80018f58:	ec f8 00 34 	ld.w	r8,r6[52]
80018f5c:	70 18       	ld.w	r8,r8[0x4]
80018f5e:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018f62:	91 79       	st.w	r8[0x1c],r9
		}\
		if (buffer_bytes_available(&(usart_opt[0].uart_device.transmit_buffer))==0) {\
80018f64:	ec f8 00 34 	ld.w	r8,r6[52]
80018f68:	2f 48       	sub	r8,-12
80018f6a:	10 9c       	mov	r12,r8
80018f6c:	f0 16 00 2e 	mcall	r6[184]
80018f70:	18 98       	mov	r8,r12
80018f72:	58 08       	cp.w	r8,0
80018f74:	c0 61       	brne	80018f80 <uart_handler_0+0xc8>
				usart_opt[0].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
80018f76:	ec f8 00 34 	ld.w	r8,r6[52]
80018f7a:	70 18       	ld.w	r8,r8[0x4]
80018f7c:	30 29       	mov	r9,2
80018f7e:	91 39       	st.w	r8[0xc],r9
				usart_opt[UID].uart_device.uart->idr=AVR32_USART_IDR_TXRDY_MASK;\
		}\
	}\
}			

ISR(uart_handler_0, usart_opt[0].uart_device.IRQ, AVR32_INTC_INTLEV_INT1) {\
80018f80:	2f ed       	sub	sp,-8
80018f82:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80018f86:	d6 03       	rete
80018f88:	80 01       	ld.sh	r1,r0[0x0]
80018f8a:	8d 46       	st.w	r6[0x10],r6

80018f8c <uart_handler_1>:
	}\
}			

// define interrupt handlers using above macro
//UART_HANDLER(0);
UART_HANDLER(1);
80018f8c:	eb cd 40 c0 	pushm	r6-r7,lr
80018f90:	1a 97       	mov	r7,sp
80018f92:	20 2d       	sub	sp,8
80018f94:	4b 66       	lddpc	r6,8001906c <uart_handler_1+0xe0>
80018f96:	1e 26       	rsub	r6,pc
80018f98:	ec f8 00 34 	ld.w	r8,r6[52]
80018f9c:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018fa0:	70 58       	ld.w	r8,r8[0x14]
80018fa2:	ef 48 ff fc 	st.w	r7[-4],r8
80018fa6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80018faa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80018fae:	5c 58       	castu.b	r8
80018fb0:	c2 80       	breq	80019000 <uart_handler_1+0x74>
80018fb2:	ec f8 00 34 	ld.w	r8,r6[52]
80018fb6:	f0 f8 02 2c 	ld.w	r8,r8[556]
80018fba:	70 68       	ld.w	r8,r8[0x18]
80018fbc:	ef 68 ff fb 	st.b	r7[-5],r8
80018fc0:	ec f8 00 34 	ld.w	r8,r6[52]
80018fc4:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80018fc8:	58 08       	cp.w	r8,0
80018fca:	c0 c1       	brne	80018fe2 <uart_handler_1+0x56>
80018fcc:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80018fd0:	ec f8 00 34 	ld.w	r8,r6[52]
80018fd4:	f0 c8 fc c9 	sub	r8,r8,-823
80018fd8:	12 9b       	mov	r11,r9
80018fda:	10 9c       	mov	r12,r8
80018fdc:	f0 16 00 55 	mcall	r6[340]
80018fe0:	c1 08       	rjmp	80019000 <uart_handler_1+0x74>
80018fe2:	ec f8 00 34 	ld.w	r8,r6[52]
80018fe6:	f0 f8 04 3c 	ld.w	r8,r8[1084]
80018fea:	70 18       	ld.w	r8,r8[0x4]
80018fec:	ef 3a ff fb 	ld.ub	r10,r7[-5]
80018ff0:	ec f9 00 34 	ld.w	r9,r6[52]
80018ff4:	f2 f9 04 3c 	ld.w	r9,r9[1084]
80018ff8:	72 59       	ld.w	r9,r9[0x14]
80018ffa:	14 9b       	mov	r11,r10
80018ffc:	12 9c       	mov	r12,r9
80018ffe:	5d 18       	icall	r8
80019000:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019004:	e2 18 00 02 	andl	r8,0x2,COH
80019008:	c2 d0       	breq	80019062 <uart_handler_1+0xd6>
8001900a:	ec f8 00 34 	ld.w	r8,r6[52]
8001900e:	f0 c8 fd cc 	sub	r8,r8,-564
80019012:	10 9c       	mov	r12,r8
80019014:	f0 16 00 2e 	mcall	r6[184]
80019018:	18 98       	mov	r8,r12
8001901a:	58 08       	cp.w	r8,0
8001901c:	e0 8a 00 13 	brle	80019042 <uart_handler_1+0xb6>
80019020:	ec f8 00 34 	ld.w	r8,r6[52]
80019024:	f0 c8 fd cc 	sub	r8,r8,-564
80019028:	10 9c       	mov	r12,r8
8001902a:	f0 16 00 45 	mcall	r6[276]
8001902e:	18 98       	mov	r8,r12
80019030:	ef 68 ff fb 	st.b	r7[-5],r8
80019034:	ec f8 00 34 	ld.w	r8,r6[52]
80019038:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001903c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019040:	91 79       	st.w	r8[0x1c],r9
80019042:	ec f8 00 34 	ld.w	r8,r6[52]
80019046:	f0 c8 fd cc 	sub	r8,r8,-564
8001904a:	10 9c       	mov	r12,r8
8001904c:	f0 16 00 2e 	mcall	r6[184]
80019050:	18 98       	mov	r8,r12
80019052:	58 08       	cp.w	r8,0
80019054:	c0 71       	brne	80019062 <uart_handler_1+0xd6>
80019056:	ec f8 00 34 	ld.w	r8,r6[52]
8001905a:	f0 f8 02 2c 	ld.w	r8,r8[556]
8001905e:	30 29       	mov	r9,2
80019060:	91 39       	st.w	r8[0xc],r9
80019062:	2f ed       	sub	sp,-8
80019064:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019068:	d6 03       	rete
8001906a:	00 00       	add	r0,r0
8001906c:	80 01       	ld.sh	r1,r0[0x0]
8001906e:	8e 1a       	ld.sh	r10,r7[0x2]

80019070 <uart_handler_2>:
UART_HANDLER(2);
80019070:	eb cd 40 c0 	pushm	r6-r7,lr
80019074:	1a 97       	mov	r7,sp
80019076:	20 2d       	sub	sp,8
80019078:	4b 66       	lddpc	r6,80019150 <uart_handler_2+0xe0>
8001907a:	1e 26       	rsub	r6,pc
8001907c:	ec f8 00 34 	ld.w	r8,r6[52]
80019080:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019084:	70 58       	ld.w	r8,r8[0x14]
80019086:	ef 48 ff fc 	st.w	r7[-4],r8
8001908a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001908e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019092:	5c 58       	castu.b	r8
80019094:	c2 80       	breq	800190e4 <uart_handler_2+0x74>
80019096:	ec f8 00 34 	ld.w	r8,r6[52]
8001909a:	f0 f8 04 54 	ld.w	r8,r8[1108]
8001909e:	70 68       	ld.w	r8,r8[0x18]
800190a0:	ef 68 ff fb 	st.b	r7[-5],r8
800190a4:	ec f8 00 34 	ld.w	r8,r6[52]
800190a8:	f0 f8 06 64 	ld.w	r8,r8[1636]
800190ac:	58 08       	cp.w	r8,0
800190ae:	c0 c1       	brne	800190c6 <uart_handler_2+0x56>
800190b0:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800190b4:	ec f8 00 34 	ld.w	r8,r6[52]
800190b8:	f0 c8 fa a1 	sub	r8,r8,-1375
800190bc:	12 9b       	mov	r11,r9
800190be:	10 9c       	mov	r12,r8
800190c0:	f0 16 00 55 	mcall	r6[340]
800190c4:	c1 08       	rjmp	800190e4 <uart_handler_2+0x74>
800190c6:	ec f8 00 34 	ld.w	r8,r6[52]
800190ca:	f0 f8 06 64 	ld.w	r8,r8[1636]
800190ce:	70 18       	ld.w	r8,r8[0x4]
800190d0:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800190d4:	ec f9 00 34 	ld.w	r9,r6[52]
800190d8:	f2 f9 06 64 	ld.w	r9,r9[1636]
800190dc:	72 59       	ld.w	r9,r9[0x14]
800190de:	14 9b       	mov	r11,r10
800190e0:	12 9c       	mov	r12,r9
800190e2:	5d 18       	icall	r8
800190e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800190e8:	e2 18 00 02 	andl	r8,0x2,COH
800190ec:	c2 d0       	breq	80019146 <uart_handler_2+0xd6>
800190ee:	ec f8 00 34 	ld.w	r8,r6[52]
800190f2:	f0 c8 fb a4 	sub	r8,r8,-1116
800190f6:	10 9c       	mov	r12,r8
800190f8:	f0 16 00 2e 	mcall	r6[184]
800190fc:	18 98       	mov	r8,r12
800190fe:	58 08       	cp.w	r8,0
80019100:	e0 8a 00 13 	brle	80019126 <uart_handler_2+0xb6>
80019104:	ec f8 00 34 	ld.w	r8,r6[52]
80019108:	f0 c8 fb a4 	sub	r8,r8,-1116
8001910c:	10 9c       	mov	r12,r8
8001910e:	f0 16 00 45 	mcall	r6[276]
80019112:	18 98       	mov	r8,r12
80019114:	ef 68 ff fb 	st.b	r7[-5],r8
80019118:	ec f8 00 34 	ld.w	r8,r6[52]
8001911c:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019120:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019124:	91 79       	st.w	r8[0x1c],r9
80019126:	ec f8 00 34 	ld.w	r8,r6[52]
8001912a:	f0 c8 fb a4 	sub	r8,r8,-1116
8001912e:	10 9c       	mov	r12,r8
80019130:	f0 16 00 2e 	mcall	r6[184]
80019134:	18 98       	mov	r8,r12
80019136:	58 08       	cp.w	r8,0
80019138:	c0 71       	brne	80019146 <uart_handler_2+0xd6>
8001913a:	ec f8 00 34 	ld.w	r8,r6[52]
8001913e:	f0 f8 04 54 	ld.w	r8,r8[1108]
80019142:	30 29       	mov	r9,2
80019144:	91 39       	st.w	r8[0xc],r9
80019146:	2f ed       	sub	sp,-8
80019148:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
8001914c:	d6 03       	rete
8001914e:	00 00       	add	r0,r0
80019150:	80 01       	ld.sh	r1,r0[0x0]
80019152:	8e fe       	ld.uh	lr,r7[0xe]

80019154 <uart_handler_3>:
UART_HANDLER(3);
80019154:	eb cd 40 c0 	pushm	r6-r7,lr
80019158:	1a 97       	mov	r7,sp
8001915a:	20 2d       	sub	sp,8
8001915c:	4b 66       	lddpc	r6,80019234 <uart_handler_3+0xe0>
8001915e:	1e 26       	rsub	r6,pc
80019160:	ec f8 00 34 	ld.w	r8,r6[52]
80019164:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019168:	70 58       	ld.w	r8,r8[0x14]
8001916a:	ef 48 ff fc 	st.w	r7[-4],r8
8001916e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019172:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019176:	5c 58       	castu.b	r8
80019178:	c2 80       	breq	800191c8 <uart_handler_3+0x74>
8001917a:	ec f8 00 34 	ld.w	r8,r6[52]
8001917e:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019182:	70 68       	ld.w	r8,r8[0x18]
80019184:	ef 68 ff fb 	st.b	r7[-5],r8
80019188:	ec f8 00 34 	ld.w	r8,r6[52]
8001918c:	f0 f8 08 8c 	ld.w	r8,r8[2188]
80019190:	58 08       	cp.w	r8,0
80019192:	c0 c1       	brne	800191aa <uart_handler_3+0x56>
80019194:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019198:	ec f8 00 34 	ld.w	r8,r6[52]
8001919c:	f0 c8 f8 79 	sub	r8,r8,-1927
800191a0:	12 9b       	mov	r11,r9
800191a2:	10 9c       	mov	r12,r8
800191a4:	f0 16 00 55 	mcall	r6[340]
800191a8:	c1 08       	rjmp	800191c8 <uart_handler_3+0x74>
800191aa:	ec f8 00 34 	ld.w	r8,r6[52]
800191ae:	f0 f8 08 8c 	ld.w	r8,r8[2188]
800191b2:	70 18       	ld.w	r8,r8[0x4]
800191b4:	ef 3a ff fb 	ld.ub	r10,r7[-5]
800191b8:	ec f9 00 34 	ld.w	r9,r6[52]
800191bc:	f2 f9 08 8c 	ld.w	r9,r9[2188]
800191c0:	72 59       	ld.w	r9,r9[0x14]
800191c2:	14 9b       	mov	r11,r10
800191c4:	12 9c       	mov	r12,r9
800191c6:	5d 18       	icall	r8
800191c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800191cc:	e2 18 00 02 	andl	r8,0x2,COH
800191d0:	c2 d0       	breq	8001922a <uart_handler_3+0xd6>
800191d2:	ec f8 00 34 	ld.w	r8,r6[52]
800191d6:	f0 c8 f9 7c 	sub	r8,r8,-1668
800191da:	10 9c       	mov	r12,r8
800191dc:	f0 16 00 2e 	mcall	r6[184]
800191e0:	18 98       	mov	r8,r12
800191e2:	58 08       	cp.w	r8,0
800191e4:	e0 8a 00 13 	brle	8001920a <uart_handler_3+0xb6>
800191e8:	ec f8 00 34 	ld.w	r8,r6[52]
800191ec:	f0 c8 f9 7c 	sub	r8,r8,-1668
800191f0:	10 9c       	mov	r12,r8
800191f2:	f0 16 00 45 	mcall	r6[276]
800191f6:	18 98       	mov	r8,r12
800191f8:	ef 68 ff fb 	st.b	r7[-5],r8
800191fc:	ec f8 00 34 	ld.w	r8,r6[52]
80019200:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019204:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80019208:	91 79       	st.w	r8[0x1c],r9
8001920a:	ec f8 00 34 	ld.w	r8,r6[52]
8001920e:	f0 c8 f9 7c 	sub	r8,r8,-1668
80019212:	10 9c       	mov	r12,r8
80019214:	f0 16 00 2e 	mcall	r6[184]
80019218:	18 98       	mov	r8,r12
8001921a:	58 08       	cp.w	r8,0
8001921c:	c0 71       	brne	8001922a <uart_handler_3+0xd6>
8001921e:	ec f8 00 34 	ld.w	r8,r6[52]
80019222:	f0 f8 06 7c 	ld.w	r8,r8[1660]
80019226:	30 29       	mov	r9,2
80019228:	91 39       	st.w	r8[0xc],r9
8001922a:	2f ed       	sub	sp,-8
8001922c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019230:	d6 03       	rete
80019232:	00 00       	add	r0,r0
80019234:	80 01       	ld.sh	r1,r0[0x0]
80019236:	8f e2       	st.w	r7[0x38],r2

80019238 <uart_handler_4>:
UART_HANDLER(4);
80019238:	eb cd 40 c0 	pushm	r6-r7,lr
8001923c:	1a 97       	mov	r7,sp
8001923e:	20 2d       	sub	sp,8
80019240:	4b 66       	lddpc	r6,80019318 <uart_handler_4+0xe0>
80019242:	1e 26       	rsub	r6,pc
80019244:	ec f8 00 34 	ld.w	r8,r6[52]
80019248:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001924c:	70 58       	ld.w	r8,r8[0x14]
8001924e:	ef 48 ff fc 	st.w	r7[-4],r8
80019252:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019256:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8001925a:	5c 58       	castu.b	r8
8001925c:	c2 80       	breq	800192ac <uart_handler_4+0x74>
8001925e:	ec f8 00 34 	ld.w	r8,r6[52]
80019262:	f0 f8 08 a4 	ld.w	r8,r8[2212]
80019266:	70 68       	ld.w	r8,r8[0x18]
80019268:	ef 68 ff fb 	st.b	r7[-5],r8
8001926c:	ec f8 00 34 	ld.w	r8,r6[52]
80019270:	f0 f8 0a b4 	ld.w	r8,r8[2740]
80019274:	58 08       	cp.w	r8,0
80019276:	c0 c1       	brne	8001928e <uart_handler_4+0x56>
80019278:	ef 39 ff fb 	ld.ub	r9,r7[-5]
8001927c:	ec f8 00 34 	ld.w	r8,r6[52]
80019280:	f0 c8 f6 51 	sub	r8,r8,-2479
80019284:	12 9b       	mov	r11,r9
80019286:	10 9c       	mov	r12,r8
80019288:	f0 16 00 55 	mcall	r6[340]
8001928c:	c1 08       	rjmp	800192ac <uart_handler_4+0x74>
8001928e:	ec f8 00 34 	ld.w	r8,r6[52]
80019292:	f0 f8 0a b4 	ld.w	r8,r8[2740]
80019296:	70 18       	ld.w	r8,r8[0x4]
80019298:	ef 3a ff fb 	ld.ub	r10,r7[-5]
8001929c:	ec f9 00 34 	ld.w	r9,r6[52]
800192a0:	f2 f9 0a b4 	ld.w	r9,r9[2740]
800192a4:	72 59       	ld.w	r9,r9[0x14]
800192a6:	14 9b       	mov	r11,r10
800192a8:	12 9c       	mov	r12,r9
800192aa:	5d 18       	icall	r8
800192ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800192b0:	e2 18 00 02 	andl	r8,0x2,COH
800192b4:	c2 d0       	breq	8001930e <uart_handler_4+0xd6>
800192b6:	ec f8 00 34 	ld.w	r8,r6[52]
800192ba:	f0 c8 f7 54 	sub	r8,r8,-2220
800192be:	10 9c       	mov	r12,r8
800192c0:	f0 16 00 2e 	mcall	r6[184]
800192c4:	18 98       	mov	r8,r12
800192c6:	58 08       	cp.w	r8,0
800192c8:	e0 8a 00 13 	brle	800192ee <uart_handler_4+0xb6>
800192cc:	ec f8 00 34 	ld.w	r8,r6[52]
800192d0:	f0 c8 f7 54 	sub	r8,r8,-2220
800192d4:	10 9c       	mov	r12,r8
800192d6:	f0 16 00 45 	mcall	r6[276]
800192da:	18 98       	mov	r8,r12
800192dc:	ef 68 ff fb 	st.b	r7[-5],r8
800192e0:	ec f8 00 34 	ld.w	r8,r6[52]
800192e4:	f0 f8 08 a4 	ld.w	r8,r8[2212]
800192e8:	ef 39 ff fb 	ld.ub	r9,r7[-5]
800192ec:	91 79       	st.w	r8[0x1c],r9
800192ee:	ec f8 00 34 	ld.w	r8,r6[52]
800192f2:	f0 c8 f7 54 	sub	r8,r8,-2220
800192f6:	10 9c       	mov	r12,r8
800192f8:	f0 16 00 2e 	mcall	r6[184]
800192fc:	18 98       	mov	r8,r12
800192fe:	58 08       	cp.w	r8,0
80019300:	c0 71       	brne	8001930e <uart_handler_4+0xd6>
80019302:	ec f8 00 34 	ld.w	r8,r6[52]
80019306:	f0 f8 08 a4 	ld.w	r8,r8[2212]
8001930a:	30 29       	mov	r9,2
8001930c:	91 39       	st.w	r8[0xc],r9
8001930e:	2f ed       	sub	sp,-8
80019310:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80019314:	d6 03       	rete
80019316:	00 00       	add	r0,r0
80019318:	80 01       	ld.sh	r1,r0[0x0]
8001931a:	90 c6       	ld.uh	r6,r8[0x8]

8001931c <register_UART_handler>:


void register_UART_handler(int UID) {
8001931c:	eb cd 40 c0 	pushm	r6-r7,lr
80019320:	1a 97       	mov	r7,sp
80019322:	20 1d       	sub	sp,4
80019324:	4a 56       	lddpc	r6,800193b8 <register_UART_handler+0x9c>
80019326:	1e 26       	rsub	r6,pc
80019328:	ef 4c ff fc 	st.w	r7[-4],r12
	switch(UID) {
8001932c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019330:	58 28       	cp.w	r8,2
80019332:	c2 00       	breq	80019372 <register_UART_handler+0x56>
80019334:	e0 89 00 07 	brgt	80019342 <register_UART_handler+0x26>
80019338:	58 08       	cp.w	r8,0
8001933a:	c0 90       	breq	8001934c <register_UART_handler+0x30>
8001933c:	58 18       	cp.w	r8,1
8001933e:	c0 f0       	breq	8001935c <register_UART_handler+0x40>
80019340:	c3 98       	rjmp	800193b2 <register_UART_handler+0x96>
80019342:	58 38       	cp.w	r8,3
80019344:	c2 20       	breq	80019388 <register_UART_handler+0x6c>
80019346:	58 48       	cp.w	r8,4
80019348:	c2 b0       	breq	8001939e <register_UART_handler+0x82>
8001934a:	c3 48       	rjmp	800193b2 <register_UART_handler+0x96>
		case 0: 	INTC_register_interrupt( (__int_handler) &uart_handler_0, AVR32_USART0_IRQ, AVR32_INTC_INT1); break;
8001934c:	30 1a       	mov	r10,1
8001934e:	e0 6b 02 60 	mov	r11,608
80019352:	fe cc 04 9a 	sub	r12,pc,1178
80019356:	f0 16 00 3b 	mcall	r6[236]
8001935a:	c2 c8       	rjmp	800193b2 <register_UART_handler+0x96>
		case 1: 	INTC_register_interrupt( (__int_handler) &uart_handler_1, usart_opt[1].uart_device.IRQ, AVR32_INTC_INT1); break;
8001935c:	ec f8 00 34 	ld.w	r8,r6[52]
80019360:	f0 f8 02 30 	ld.w	r8,r8[560]
80019364:	30 1a       	mov	r10,1
80019366:	10 9b       	mov	r11,r8
80019368:	fe cc 03 dc 	sub	r12,pc,988
8001936c:	f0 16 00 3b 	mcall	r6[236]
80019370:	c2 18       	rjmp	800193b2 <register_UART_handler+0x96>
		case 2: 	INTC_register_interrupt( (__int_handler) &uart_handler_2, usart_opt[2].uart_device.IRQ, AVR32_INTC_INT1); break;
80019372:	ec f8 00 34 	ld.w	r8,r6[52]
80019376:	f0 f8 04 58 	ld.w	r8,r8[1112]
8001937a:	30 1a       	mov	r10,1
8001937c:	10 9b       	mov	r11,r8
8001937e:	fe cc 03 0e 	sub	r12,pc,782
80019382:	f0 16 00 3b 	mcall	r6[236]
80019386:	c1 68       	rjmp	800193b2 <register_UART_handler+0x96>
		case 3: 	INTC_register_interrupt( (__int_handler) &uart_handler_3, usart_opt[3].uart_device.IRQ, AVR32_INTC_INT1); break;
80019388:	ec f8 00 34 	ld.w	r8,r6[52]
8001938c:	f0 f8 06 80 	ld.w	r8,r8[1664]
80019390:	30 1a       	mov	r10,1
80019392:	10 9b       	mov	r11,r8
80019394:	fe cc 02 40 	sub	r12,pc,576
80019398:	f0 16 00 3b 	mcall	r6[236]
8001939c:	c0 b8       	rjmp	800193b2 <register_UART_handler+0x96>
		case 4: 	INTC_register_interrupt( (__int_handler) &uart_handler_4, usart_opt[4].uart_device.IRQ, AVR32_INTC_INT1); break;
8001939e:	ec f8 00 34 	ld.w	r8,r6[52]
800193a2:	f0 f8 08 a8 	ld.w	r8,r8[2216]
800193a6:	30 1a       	mov	r10,1
800193a8:	10 9b       	mov	r11,r8
800193aa:	fe cc 01 72 	sub	r12,pc,370
800193ae:	f0 16 00 3b 	mcall	r6[236]

	}
	
}
800193b2:	2f fd       	sub	sp,-4
800193b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800193b8:	80 01       	ld.sh	r1,r0[0x0]
800193ba:	91 aa       	st.w	r8[0x28],r10

800193bc <init_UART_int>:

usart_config_t *init_UART_int(int UID) {
800193bc:	eb cd 40 c0 	pushm	r6-r7,lr
800193c0:	1a 97       	mov	r7,sp
800193c2:	20 1d       	sub	sp,4
800193c4:	4e 16       	lddpc	r6,80019548 <init_UART_int+0x18c>
800193c6:	1e 26       	rsub	r6,pc
800193c8:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((usart_opt[UID].mode&UART_IN) >0)  gpio_enable_module_pin(usart_opt[UID].rx_pin_map.pin, usart_opt[UID].rx_pin_map.function); 
800193cc:	ee fa ff fc 	ld.w	r10,r7[-4]
800193d0:	ec f9 00 34 	ld.w	r9,r6[52]
800193d4:	e0 68 02 28 	mov	r8,552
800193d8:	f4 08 02 48 	mul	r8,r10,r8
800193dc:	f2 08 00 08 	add	r8,r9,r8
800193e0:	70 08       	ld.w	r8,r8[0x0]
800193e2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800193e6:	58 08       	cp.w	r8,0
800193e8:	e0 8a 00 21 	brle	8001942a <init_UART_int+0x6e>
800193ec:	ee fa ff fc 	ld.w	r10,r7[-4]
800193f0:	ec f9 00 34 	ld.w	r9,r6[52]
800193f4:	e0 68 02 28 	mov	r8,552
800193f8:	f4 08 02 48 	mul	r8,r10,r8
800193fc:	f2 08 00 08 	add	r8,r9,r8
80019400:	f0 c8 fd dc 	sub	r8,r8,-548
80019404:	11 98       	ld.ub	r8,r8[0x1]
80019406:	10 99       	mov	r9,r8
80019408:	ee fb ff fc 	ld.w	r11,r7[-4]
8001940c:	ec fa 00 34 	ld.w	r10,r6[52]
80019410:	e0 68 02 28 	mov	r8,552
80019414:	f6 08 02 48 	mul	r8,r11,r8
80019418:	f4 08 00 08 	add	r8,r10,r8
8001941c:	f0 c8 fd dc 	sub	r8,r8,-548
80019420:	11 88       	ld.ub	r8,r8[0x0]
80019422:	12 9b       	mov	r11,r9
80019424:	10 9c       	mov	r12,r8
80019426:	f0 16 00 3f 	mcall	r6[252]
	if ((usart_opt[UID].mode&UART_OUT)>0)  gpio_enable_module_pin(usart_opt[UID].tx_pin_map.pin, usart_opt[UID].tx_pin_map.function); 
8001942a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001942e:	ec f9 00 34 	ld.w	r9,r6[52]
80019432:	e0 68 02 28 	mov	r8,552
80019436:	f4 08 02 48 	mul	r8,r10,r8
8001943a:	f2 08 00 08 	add	r8,r9,r8
8001943e:	70 08       	ld.w	r8,r8[0x0]
80019440:	e2 18 00 02 	andl	r8,0x2,COH
80019444:	58 08       	cp.w	r8,0
80019446:	e0 8a 00 21 	brle	80019488 <init_UART_int+0xcc>
8001944a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001944e:	ec f9 00 34 	ld.w	r9,r6[52]
80019452:	e0 68 02 28 	mov	r8,552
80019456:	f4 08 02 48 	mul	r8,r10,r8
8001945a:	f2 08 00 08 	add	r8,r9,r8
8001945e:	f0 c8 fd dc 	sub	r8,r8,-548
80019462:	11 b8       	ld.ub	r8,r8[0x3]
80019464:	10 99       	mov	r9,r8
80019466:	ee fb ff fc 	ld.w	r11,r7[-4]
8001946a:	ec fa 00 34 	ld.w	r10,r6[52]
8001946e:	e0 68 02 28 	mov	r8,552
80019472:	f6 08 02 48 	mul	r8,r11,r8
80019476:	f4 08 00 08 	add	r8,r10,r8
8001947a:	f0 c8 fd dc 	sub	r8,r8,-548
8001947e:	11 a8       	ld.ub	r8,r8[0x2]
80019480:	12 9b       	mov	r11,r9
80019482:	10 9c       	mov	r12,r8
80019484:	f0 16 00 3f 	mcall	r6[252]

	usart_init_rs232( usart_opt[UID].uart_device.uart, &(usart_opt[UID].options), sysclk_get_cpu_hz()); 
80019488:	fe b0 fd 0c 	rcall	80018ea0 <sysclk_get_cpu_hz>
8001948c:	18 98       	mov	r8,r12
8001948e:	10 9a       	mov	r10,r8
80019490:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019494:	e0 68 02 28 	mov	r8,552
80019498:	f2 08 02 48 	mul	r8,r9,r8
8001949c:	f0 c9 fd e8 	sub	r9,r8,-536
800194a0:	ec f8 00 34 	ld.w	r8,r6[52]
800194a4:	10 09       	add	r9,r8
800194a6:	ee fc ff fc 	ld.w	r12,r7[-4]
800194aa:	ec f8 00 34 	ld.w	r8,r6[52]
800194ae:	e0 6b 00 8a 	mov	r11,138
800194b2:	f8 0b 02 4b 	mul	r11,r12,r11
800194b6:	2f fb       	sub	r11,-1
800194b8:	f0 0b 03 28 	ld.w	r8,r8[r11<<0x2]
800194bc:	12 9b       	mov	r11,r9
800194be:	10 9c       	mov	r12,r8
800194c0:	f0 16 00 6b 	mcall	r6[428]
	//usart_write_line(usart_opt[UID].uart_device.uart, "UART initialised");
	register_UART_handler(UID);
800194c4:	ee fc ff fc 	ld.w	r12,r7[-4]
800194c8:	f0 16 02 00 	mcall	r6[2048]
	buffer_init(&usart_opt[UID].uart_device.transmit_buffer);
800194cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800194d0:	e0 68 02 28 	mov	r8,552
800194d4:	f2 08 02 48 	mul	r8,r9,r8
800194d8:	f0 c9 ff f4 	sub	r9,r8,-12
800194dc:	ec f8 00 34 	ld.w	r8,r6[52]
800194e0:	f2 08 00 08 	add	r8,r9,r8
800194e4:	10 9c       	mov	r12,r8
800194e6:	f0 16 01 34 	mcall	r6[1232]
	buffer_init(&usart_opt[UID].uart_device.receive_buffer);
800194ea:	ee f9 ff fc 	ld.w	r9,r7[-4]
800194ee:	e0 68 02 28 	mov	r8,552
800194f2:	f2 08 02 48 	mul	r8,r9,r8
800194f6:	f0 c9 fe f4 	sub	r9,r8,-268
800194fa:	ec f8 00 34 	ld.w	r8,r6[52]
800194fe:	f2 08 00 08 	add	r8,r9,r8
80019502:	2f d8       	sub	r8,-3
80019504:	10 9c       	mov	r12,r8
80019506:	f0 16 01 34 	mcall	r6[1232]
	if (usart_opt[UID].mode&UART_IN >0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_RXRDY_MASK;
8001950a:	ee fa ff fc 	ld.w	r10,r7[-4]
8001950e:	ec f9 00 34 	ld.w	r9,r6[52]
80019512:	e0 68 02 28 	mov	r8,552
80019516:	f4 08 02 48 	mul	r8,r10,r8
8001951a:	f2 08 00 08 	add	r8,r9,r8
8001951e:	70 08       	ld.w	r8,r8[0x0]
80019520:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80019524:	5c 58       	castu.b	r8
80019526:	c0 e0       	breq	80019542 <init_UART_int+0x186>
80019528:	ee fa ff fc 	ld.w	r10,r7[-4]
8001952c:	ec f8 00 34 	ld.w	r8,r6[52]
80019530:	e0 69 00 8a 	mov	r9,138
80019534:	f4 09 02 49 	mul	r9,r10,r9
80019538:	2f f9       	sub	r9,-1
8001953a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001953e:	30 19       	mov	r9,1
80019540:	91 29       	st.w	r8[0x8],r9
	//if (usart_opt[UID].mode&UART_OUT>0) usart_opt[UID].uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
} 
80019542:	2f fd       	sub	sp,-4
80019544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019548:	80 01       	ld.sh	r1,r0[0x0]
8001954a:	92 4a       	ld.sh	r10,r9[0x8]

8001954c <uart_int_get_byte>:

/************************************************************************/
/* blocking operation to retrieve a received byte from uart             */
/************************************************************************/
char uart_int_get_byte(usart_config_t *usart_opt) {
8001954c:	eb cd 40 c0 	pushm	r6-r7,lr
80019550:	1a 97       	mov	r7,sp
80019552:	20 1d       	sub	sp,4
80019554:	48 86       	lddpc	r6,80019574 <uart_int_get_byte+0x28>
80019556:	1e 26       	rsub	r6,pc
80019558:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_get(&(usart_opt->uart_device.receive_buffer));
8001955c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019560:	f0 c8 fe f1 	sub	r8,r8,-271
80019564:	10 9c       	mov	r12,r8
80019566:	f0 16 00 45 	mcall	r6[276]
8001956a:	18 98       	mov	r8,r12
}
8001956c:	10 9c       	mov	r12,r8
8001956e:	2f fd       	sub	sp,-4
80019570:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019574:	80 01       	ld.sh	r1,r0[0x0]
80019576:	93 da       	st.w	r9[0x34],r10

80019578 <uart_int_bytes_available>:

/************************************************************************/
/* returns number of received bytes in the receive buffer               */
/************************************************************************/
int uart_int_bytes_available(usart_config_t *usart_opt) {
80019578:	eb cd 40 c0 	pushm	r6-r7,lr
8001957c:	1a 97       	mov	r7,sp
8001957e:	20 1d       	sub	sp,4
80019580:	48 86       	lddpc	r6,800195a0 <uart_int_bytes_available+0x28>
80019582:	1e 26       	rsub	r6,pc
80019584:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_bytes_available(&(usart_opt->uart_device.receive_buffer));
80019588:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001958c:	f0 c8 fe f1 	sub	r8,r8,-271
80019590:	10 9c       	mov	r12,r8
80019592:	f0 16 00 2e 	mcall	r6[184]
80019596:	18 98       	mov	r8,r12
}
80019598:	10 9c       	mov	r12,r8
8001959a:	2f fd       	sub	sp,-4
8001959c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195a0:	80 01       	ld.sh	r1,r0[0x0]
800195a2:	94 06       	ld.sh	r6,r10[0x0]

800195a4 <uart_int_send_byte>:

/************************************************************************/
/* non-blocking operation to append a byte to the uart send buffer      */
/* if buffer is full, the command has no effect  (returns -1).          */
/************************************************************************/
short uart_int_send_byte(usart_config_t *usart_opt, char data) {
800195a4:	eb cd 40 c0 	pushm	r6-r7,lr
800195a8:	1a 97       	mov	r7,sp
800195aa:	20 2d       	sub	sp,8
800195ac:	49 56       	lddpc	r6,80019600 <uart_int_send_byte+0x5c>
800195ae:	1e 26       	rsub	r6,pc
800195b0:	ef 4c ff fc 	st.w	r7[-4],r12
800195b4:	16 98       	mov	r8,r11
800195b6:	ef 68 ff f8 	st.b	r7[-8],r8
//	usart_write_line(usart_opt->uart_device.uart, "\ns");
	while (buffer_put(&(usart_opt->uart_device.transmit_buffer), data)<0);
800195ba:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800195be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195c2:	2f 48       	sub	r8,-12
800195c4:	12 9b       	mov	r11,r9
800195c6:	10 9c       	mov	r12,r8
800195c8:	f0 16 00 55 	mcall	r6[340]
800195cc:	18 98       	mov	r8,r12
800195ce:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800195d2:	30 08       	mov	r8,0
800195d4:	f0 09 18 00 	cp.b	r9,r8
800195d8:	cf 15       	brlt	800195ba <uart_int_send_byte+0x16>
	if ((buffer_bytes_available(&(usart_opt->uart_device.transmit_buffer)) >= 1))//&&
800195da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195de:	2f 48       	sub	r8,-12
800195e0:	10 9c       	mov	r12,r8
800195e2:	f0 16 00 2e 	mcall	r6[184]
800195e6:	18 98       	mov	r8,r12
800195e8:	58 08       	cp.w	r8,0
800195ea:	e0 8a 00 07 	brle	800195f8 <uart_int_send_byte+0x54>
//	  (usart_opt->uart_device.uart->csr & AVR32_USART_CSR_TXRDY_MASK)) 
	{ // if there is exactly one byte in the buffer (this one...), and transmitter ready
		 // kick-start transmission
//		usart_opt->uart_device.uart->thr='c';//buffer_get(&(usart_opt->uart_device.transmit_buffer));
		usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
800195ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800195f2:	70 18       	ld.w	r8,r8[0x4]
800195f4:	30 29       	mov	r9,2
800195f6:	91 29       	st.w	r8[0x8],r9
	} 		
}
800195f8:	2f ed       	sub	sp,-8
800195fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800195fe:	00 00       	add	r0,r0
80019600:	80 01       	ld.sh	r1,r0[0x0]
80019602:	94 32       	ld.sh	r2,r10[0x6]

80019604 <uart_int_flush>:


/** 
 * blocking operation to flush the uart buffer. Returns once the last byte has been passed to hardware for transmission.
 */
void uart_int_flush(usart_config_t *usart_opt) {
80019604:	eb cd 40 c0 	pushm	r6-r7,lr
80019608:	1a 97       	mov	r7,sp
8001960a:	20 1d       	sub	sp,4
8001960c:	48 b6       	lddpc	r6,80019638 <uart_int_flush+0x34>
8001960e:	1e 26       	rsub	r6,pc
80019610:	ef 4c ff fc 	st.w	r7[-4],r12
	usart_opt->uart_device.uart->ier=AVR32_USART_IER_TXRDY_MASK;
80019614:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019618:	70 18       	ld.w	r8,r8[0x4]
8001961a:	30 29       	mov	r9,2
8001961c:	91 29       	st.w	r8[0x8],r9
	while (!buffer_empty(&(usart_opt->uart_device.transmit_buffer)));
8001961e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019622:	2f 48       	sub	r8,-12
80019624:	10 9c       	mov	r12,r8
80019626:	f0 16 01 26 	mcall	r6[1176]
8001962a:	18 98       	mov	r8,r12
8001962c:	5c 58       	castu.b	r8
8001962e:	cf 80       	breq	8001961e <uart_int_flush+0x1a>
}
80019630:	2f fd       	sub	sp,-4
80019632:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019636:	00 00       	add	r0,r0
80019638:	80 01       	ld.sh	r1,r0[0x0]
8001963a:	94 92       	ld.uh	r2,r10[0x2]

8001963c <uart_out_buffer_empty>:

int uart_out_buffer_empty(usart_config_t *usart_opt) {
8001963c:	eb cd 40 c0 	pushm	r6-r7,lr
80019640:	1a 97       	mov	r7,sp
80019642:	20 1d       	sub	sp,4
80019644:	48 96       	lddpc	r6,80019668 <uart_out_buffer_empty+0x2c>
80019646:	1e 26       	rsub	r6,pc
80019648:	ef 4c ff fc 	st.w	r7[-4],r12
	return buffer_empty(&(usart_opt->uart_device.transmit_buffer));
8001964c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019650:	2f 48       	sub	r8,-12
80019652:	10 9c       	mov	r12,r8
80019654:	f0 16 01 26 	mcall	r6[1176]
80019658:	18 98       	mov	r8,r12
8001965a:	5c 58       	castu.b	r8
8001965c:	5c 68       	casts.b	r8
}
8001965e:	10 9c       	mov	r12,r8
80019660:	2f fd       	sub	sp,-4
80019662:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019666:	00 00       	add	r0,r0
80019668:	80 01       	ld.sh	r1,r0[0x0]
8001966a:	94 ca       	ld.uh	r10,r10[0x8]

8001966c <get_UART_handle>:

usart_config_t *get_UART_handle(int UID) {
8001966c:	eb cd 40 c0 	pushm	r6-r7,lr
80019670:	1a 97       	mov	r7,sp
80019672:	20 1d       	sub	sp,4
80019674:	48 96       	lddpc	r6,80019698 <get_UART_handle+0x2c>
80019676:	1e 26       	rsub	r6,pc
80019678:	ef 4c ff fc 	st.w	r7[-4],r12
	return &usart_opt[UID];
8001967c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019680:	e0 68 02 28 	mov	r8,552
80019684:	b1 39       	mul	r9,r8
80019686:	ec f8 00 34 	ld.w	r8,r6[52]
8001968a:	f2 08 00 08 	add	r8,r9,r8
}
8001968e:	10 9c       	mov	r12,r8
80019690:	2f fd       	sub	sp,-4
80019692:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80019696:	00 00       	add	r0,r0
80019698:	80 01       	ld.sh	r1,r0[0x0]
8001969a:	94 fa       	ld.uh	r10,r10[0xe]

8001969c <register_write_stream>:

void register_write_stream(usart_config_t *usart_opt, byte_stream_t *stream) {
8001969c:	eb cd 40 c0 	pushm	r6-r7,lr
800196a0:	1a 97       	mov	r7,sp
800196a2:	20 2d       	sub	sp,8
800196a4:	49 16       	lddpc	r6,800196e8 <register_write_stream+0x4c>
800196a6:	1e 26       	rsub	r6,pc
800196a8:	ef 4c ff fc 	st.w	r7[-4],r12
800196ac:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=NULL;
800196b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196b4:	30 09       	mov	r9,0
800196b6:	91 09       	st.w	r8[0x0],r9
	//stream->get=&uart_int_get_byte;
	stream->put=&uart_int_send_byte;
800196b8:	ec f9 06 08 	ld.w	r9,r6[1544]
800196bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196c0:	91 19       	st.w	r8[0x4],r9
	stream->flush=&uart_int_flush;
800196c2:	ec f9 06 b8 	ld.w	r9,r6[1720]
800196c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196ca:	91 29       	st.w	r8[0x8],r9
	stream->buffer_empty=&uart_out_buffer_empty;
800196cc:	ec f9 08 84 	ld.w	r9,r6[2180]
800196d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196d4:	91 39       	st.w	r8[0xc],r9
	stream->data=usart_opt;
800196d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800196da:	ee f9 ff fc 	ld.w	r9,r7[-4]
800196de:	91 59       	st.w	r8[0x14],r9

}
800196e0:	2f ed       	sub	sp,-8
800196e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800196e6:	00 00       	add	r0,r0
800196e8:	80 01       	ld.sh	r1,r0[0x0]
800196ea:	95 2a       	st.w	r10[0x8],r10

800196ec <register_read_stream>:


void register_read_stream(usart_config_t *usart_opt,  byte_stream_t *stream) {
800196ec:	eb cd 40 80 	pushm	r7,lr
800196f0:	1a 97       	mov	r7,sp
800196f2:	20 2d       	sub	sp,8
800196f4:	ef 4c ff fc 	st.w	r7[-4],r12
800196f8:	ef 4b ff f8 	st.w	r7[-8],r11
	usart_opt->uart_device.receive_stream=stream;
800196fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019700:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019704:	f1 49 02 14 	st.w	r8[532],r9
}
80019708:	2f ed       	sub	sp,-8
8001970a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80019710 <init_scheduler>:
#include "scheduler.h"
#include "time_keeper.h"



void init_scheduler(task_set *ts) {
80019710:	eb cd 40 80 	pushm	r7,lr
80019714:	1a 97       	mov	r7,sp
80019716:	20 2d       	sub	sp,8
80019718:	ef 4c ff f8 	st.w	r7[-8],r12
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001971c:	30 08       	mov	r8,0
8001971e:	ef 48 ff fc 	st.w	r7[-4],r8
80019722:	c2 18       	rjmp	80019764 <init_scheduler+0x54>
		ts->tasks[i].call_function=NULL;
80019724:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019728:	ee fa ff f8 	ld.w	r10,r7[-8]
8001972c:	12 98       	mov	r8,r9
8001972e:	a1 78       	lsl	r8,0x1
80019730:	12 08       	add	r8,r9
80019732:	2f f8       	sub	r8,-1
80019734:	a5 68       	lsl	r8,0x4
80019736:	f4 08 00 08 	add	r8,r10,r8
8001973a:	30 09       	mov	r9,0
8001973c:	91 09       	st.w	r8[0x0],r9
		ts->tasks[i].tasks=ts;
8001973e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80019742:	ee fa ff f8 	ld.w	r10,r7[-8]
80019746:	ee fb ff f8 	ld.w	r11,r7[-8]
8001974a:	12 98       	mov	r8,r9
8001974c:	a1 78       	lsl	r8,0x1
8001974e:	12 08       	add	r8,r9
80019750:	a5 68       	lsl	r8,0x4
80019752:	f6 08 00 08 	add	r8,r11,r8
80019756:	2f 48       	sub	r8,-12
80019758:	91 0a       	st.w	r8[0x0],r10



void init_scheduler(task_set *ts) {
	int i;
	for (i=0; i<ts->number_of_tasks; i++) {
8001975a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001975e:	2f f8       	sub	r8,-1
80019760:	ef 48 ff fc 	st.w	r7[-4],r8
80019764:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019768:	11 88       	ld.ub	r8,r8[0x0]
8001976a:	10 99       	mov	r9,r8
8001976c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019770:	10 39       	cp.w	r9,r8
80019772:	fe 99 ff d9 	brgt	80019724 <init_scheduler+0x14>
		ts->tasks[i].call_function=NULL;
		ts->tasks[i].tasks=ts;
		//ts->tasks[i].run_mode=UNINITIALISED;
	}
	ts->running_task=-1;
80019776:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001977a:	3f f9       	mov	r9,-1
8001977c:	91 19       	st.w	r8[0x4],r9
	ts->current_schedule_slot=0;
8001977e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019782:	30 09       	mov	r9,0
80019784:	91 29       	st.w	r8[0x8],r9
}
80019786:	2f ed       	sub	sp,-8
80019788:	e3 cd 80 80 	ldm	sp++,r7,pc

8001978c <register_task>:

task_handle_t register_task(task_set *ts, int task_slot, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function) {
8001978c:	eb cd 40 e0 	pushm	r5-r7,lr
80019790:	1a 97       	mov	r7,sp
80019792:	20 5d       	sub	sp,20
80019794:	4d f6       	lddpc	r6,80019910 <register_task+0x184>
80019796:	1e 26       	rsub	r6,pc
80019798:	ef 4c ff fc 	st.w	r7[-4],r12
8001979c:	ef 4b ff f8 	st.w	r7[-8],r11
800197a0:	ef 4a ff f4 	st.w	r7[-12],r10
800197a4:	ef 49 ff f0 	st.w	r7[-16],r9
800197a8:	ef 48 ff ec 	st.w	r7[-20],r8
	if ((task_slot<0) || (task_slot>=ts->number_of_tasks)) {
800197ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197b0:	58 08       	cp.w	r8,0
800197b2:	c0 a5       	brlt	800197c6 <register_task+0x3a>
800197b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800197b8:	11 88       	ld.ub	r8,r8[0x0]
800197ba:	10 99       	mov	r9,r8
800197bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197c0:	10 39       	cp.w	r9,r8
800197c2:	e0 89 00 05 	brgt	800197cc <register_task+0x40>
		return -1;
800197c6:	e0 68 00 ff 	mov	r8,255
800197ca:	c9 f8       	rjmp	80019908 <register_task+0x17c>
	}
	ts->tasks[task_slot].task_id=task_slot;
800197cc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800197d4:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800197d8:	ee fb ff fc 	ld.w	r11,r7[-4]
800197dc:	12 98       	mov	r8,r9
800197de:	a1 78       	lsl	r8,0x1
800197e0:	12 08       	add	r8,r9
800197e2:	a1 78       	lsl	r8,0x1
800197e4:	2f f8       	sub	r8,-1
800197e6:	a3 78       	lsl	r8,0x3
800197e8:	f6 08 00 08 	add	r8,r11,r8
800197ec:	14 99       	mov	r9,r10
800197ee:	b0 69       	st.h	r8[0xc],r9
	ts->tasks[task_slot].call_function=call_function;
800197f0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800197f4:	ee fa ff ec 	ld.w	r10,r7[-20]
800197f8:	ee fb ff fc 	ld.w	r11,r7[-4]
800197fc:	12 98       	mov	r8,r9
800197fe:	a1 78       	lsl	r8,0x1
80019800:	12 08       	add	r8,r9
80019802:	2f f8       	sub	r8,-1
80019804:	a5 68       	lsl	r8,0x4
80019806:	f6 08 00 08 	add	r8,r11,r8
8001980a:	91 0a       	st.w	r8[0x0],r10
	ts->tasks[task_slot].run_mode=run_mode;
8001980c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019810:	ee fa ff fc 	ld.w	r10,r7[-4]
80019814:	12 98       	mov	r8,r9
80019816:	a1 78       	lsl	r8,0x1
80019818:	12 08       	add	r8,r9
8001981a:	a5 68       	lsl	r8,0x4
8001981c:	f4 08 00 08 	add	r8,r10,r8
80019820:	2e 88       	sub	r8,-24
80019822:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019826:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].repeat_period=repeat_period;
80019828:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001982c:	ee fa ff fc 	ld.w	r10,r7[-4]
80019830:	12 98       	mov	r8,r9
80019832:	a1 78       	lsl	r8,0x1
80019834:	12 08       	add	r8,r9
80019836:	a5 68       	lsl	r8,0x4
80019838:	f4 08 00 08 	add	r8,r10,r8
8001983c:	2e 08       	sub	r8,-32
8001983e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019842:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].next_run=GET_TIME;
80019844:	ee f5 ff f8 	ld.w	r5,r7[-8]
80019848:	f0 16 00 29 	mcall	r6[164]
8001984c:	18 99       	mov	r9,r12
8001984e:	ee fa ff fc 	ld.w	r10,r7[-4]
80019852:	0a 98       	mov	r8,r5
80019854:	a1 78       	lsl	r8,0x1
80019856:	0a 08       	add	r8,r5
80019858:	a5 68       	lsl	r8,0x4
8001985a:	f4 08 00 08 	add	r8,r10,r8
8001985e:	2d c8       	sub	r8,-36
80019860:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].execution_time=0;
80019862:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019866:	ee fa ff fc 	ld.w	r10,r7[-4]
8001986a:	12 98       	mov	r8,r9
8001986c:	a1 78       	lsl	r8,0x1
8001986e:	12 08       	add	r8,r9
80019870:	a5 68       	lsl	r8,0x4
80019872:	f4 08 00 08 	add	r8,r10,r8
80019876:	2d 88       	sub	r8,-40
80019878:	30 09       	mov	r9,0
8001987a:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].timing_mode=PERIODIC_ABSOLUTE;
8001987c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019880:	ee fa ff fc 	ld.w	r10,r7[-4]
80019884:	12 98       	mov	r8,r9
80019886:	a1 78       	lsl	r8,0x1
80019888:	12 08       	add	r8,r9
8001988a:	2f f8       	sub	r8,-1
8001988c:	a5 68       	lsl	r8,0x4
8001988e:	f4 08 00 08 	add	r8,r10,r8
80019892:	2f 48       	sub	r8,-12
80019894:	30 09       	mov	r9,0
80019896:	91 09       	st.w	r8[0x0],r9
#ifdef SCHEDULER_PROFILING	
	ts->tasks[task_slot].delay_max=0;
80019898:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001989c:	ee fa ff fc 	ld.w	r10,r7[-4]
800198a0:	12 98       	mov	r8,r9
800198a2:	a1 78       	lsl	r8,0x1
800198a4:	12 08       	add	r8,r9
800198a6:	a5 68       	lsl	r8,0x4
800198a8:	f4 08 00 08 	add	r8,r10,r8
800198ac:	2d 48       	sub	r8,-44
800198ae:	30 09       	mov	r9,0
800198b0:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_avg=0;
800198b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800198b6:	ee fa ff fc 	ld.w	r10,r7[-4]
800198ba:	f0 c9 ff ff 	sub	r9,r8,-1
800198be:	12 98       	mov	r8,r9
800198c0:	a1 78       	lsl	r8,0x1
800198c2:	12 08       	add	r8,r9
800198c4:	a5 68       	lsl	r8,0x4
800198c6:	f4 08 00 08 	add	r8,r10,r8
800198ca:	30 09       	mov	r9,0
800198cc:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].delay_var_squared=0;
800198ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198d2:	ee fa ff fc 	ld.w	r10,r7[-4]
800198d6:	12 98       	mov	r8,r9
800198d8:	a1 78       	lsl	r8,0x1
800198da:	12 08       	add	r8,r9
800198dc:	a5 68       	lsl	r8,0x4
800198de:	f4 08 00 08 	add	r8,r10,r8
800198e2:	2c c8       	sub	r8,-52
800198e4:	30 09       	mov	r9,0
800198e6:	91 09       	st.w	r8[0x0],r9
	ts->tasks[task_slot].rt_violations=0;
800198e8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800198ec:	ee fa ff fc 	ld.w	r10,r7[-4]
800198f0:	12 98       	mov	r8,r9
800198f2:	a1 78       	lsl	r8,0x1
800198f4:	12 08       	add	r8,r9
800198f6:	a5 68       	lsl	r8,0x4
800198f8:	f4 08 00 08 	add	r8,r10,r8
800198fc:	2c 88       	sub	r8,-56
800198fe:	30 09       	mov	r9,0
80019900:	91 09       	st.w	r8[0x0],r9
#endif
	return task_slot;
80019902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019906:	5c 58       	castu.b	r8
}
80019908:	10 9c       	mov	r12,r8
8001990a:	2f bd       	sub	sp,-20
8001990c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80019910:	80 01       	ld.sh	r1,r0[0x0]
80019912:	96 1a       	ld.sh	r10,r11[0x2]

80019914 <add_task>:

bool add_task(task_set *ts, unsigned long repeat_period, task_run_mode_t run_mode, function_pointer *call_function, uint32_t task_id) {
80019914:	eb cd 40 c0 	pushm	r6-r7,lr
80019918:	1a 97       	mov	r7,sp
8001991a:	20 6d       	sub	sp,24
8001991c:	4a d6       	lddpc	r6,800199d0 <add_task+0xbc>
8001991e:	1e 26       	rsub	r6,pc
80019920:	ef 4c ff f8 	st.w	r7[-8],r12
80019924:	ef 4b ff f4 	st.w	r7[-12],r11
80019928:	ef 4a ff f0 	st.w	r7[-16],r10
8001992c:	ef 49 ff ec 	st.w	r7[-20],r9
80019930:	ef 48 ff e8 	st.w	r7[-24],r8
	int task_slot=0;
80019934:	30 08       	mov	r8,0
80019936:	ef 48 ff fc 	st.w	r7[-4],r8
	while ((task_slot < ts->number_of_tasks) && (ts->tasks[task_slot].call_function!=NULL)) task_slot++;
8001993a:	c0 68       	rjmp	80019946 <add_task+0x32>
8001993c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019940:	2f f8       	sub	r8,-1
80019942:	ef 48 ff fc 	st.w	r7[-4],r8
80019946:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001994a:	11 88       	ld.ub	r8,r8[0x0]
8001994c:	10 99       	mov	r9,r8
8001994e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019952:	10 39       	cp.w	r9,r8
80019954:	e0 8a 00 10 	brle	80019974 <add_task+0x60>
80019958:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001995c:	ee fa ff f8 	ld.w	r10,r7[-8]
80019960:	12 98       	mov	r8,r9
80019962:	a1 78       	lsl	r8,0x1
80019964:	12 08       	add	r8,r9
80019966:	2f f8       	sub	r8,-1
80019968:	a5 68       	lsl	r8,0x4
8001996a:	f4 08 00 08 	add	r8,r10,r8
8001996e:	70 08       	ld.w	r8,r8[0x0]
80019970:	58 08       	cp.w	r8,0
80019972:	ce 51       	brne	8001993c <add_task+0x28>
	if (task_slot >= ts->number_of_tasks) return false;
80019974:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019978:	11 88       	ld.ub	r8,r8[0x0]
8001997a:	10 99       	mov	r9,r8
8001997c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019980:	10 39       	cp.w	r9,r8
80019982:	e0 89 00 04 	brgt	8001998a <add_task+0x76>
80019986:	30 08       	mov	r8,0
80019988:	c2 08       	rjmp	800199c8 <add_task+0xb4>
	register_task(ts,  task_slot,   repeat_period, run_mode,  call_function);
8001998a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001998e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80019992:	ee fa ff f4 	ld.w	r10,r7[-12]
80019996:	ee fb ff fc 	ld.w	r11,r7[-4]
8001999a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001999e:	f0 16 00 64 	mcall	r6[400]
	ts->tasks[task_slot].task_id=task_id;
800199a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800199a6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800199aa:	f5 d8 b0 10 	bfexts	r10,r8,0x0,0x10
800199ae:	ee fb ff f8 	ld.w	r11,r7[-8]
800199b2:	12 98       	mov	r8,r9
800199b4:	a1 78       	lsl	r8,0x1
800199b6:	12 08       	add	r8,r9
800199b8:	a1 78       	lsl	r8,0x1
800199ba:	2f f8       	sub	r8,-1
800199bc:	a3 78       	lsl	r8,0x3
800199be:	f6 08 00 08 	add	r8,r11,r8
800199c2:	14 99       	mov	r9,r10
800199c4:	b0 69       	st.h	r8[0xc],r9
	return true;
800199c6:	30 18       	mov	r8,1
}
800199c8:	10 9c       	mov	r12,r8
800199ca:	2f ad       	sub	sp,-24
800199cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800199d0:	80 01       	ld.sh	r1,r0[0x0]
800199d2:	97 a2       	st.w	r11[0x28],r2

800199d4 <sort_taskset_by_period>:


void sort_taskset_by_period(task_set *ts){
800199d4:	eb cd 40 80 	pushm	r7,lr
800199d8:	1a 97       	mov	r7,sp
800199da:	20 fd       	sub	sp,60
800199dc:	ef 4c ff c4 	st.w	r7[-60],r12
	int i;
	bool sorted=false;
800199e0:	30 08       	mov	r8,0
800199e2:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;
800199e6:	ee f8 ff c4 	ld.w	r8,r7[-60]
800199ea:	11 89       	ld.ub	r9,r8[0x0]
800199ec:	30 18       	mov	r8,1
800199ee:	f0 09 18 00 	cp.b	r9,r8
800199f2:	e0 8b 01 1d 	brhi	80019c2c <sort_taskset_by_period+0x258>
800199f6:	c2 39       	rjmp	80019c3c <sort_taskset_by_period+0x268>

	while (!sorted) {
		sorted=true;
800199f8:	30 18       	mov	r8,1
800199fa:	ef 68 ff ff 	st.b	r7[-1],r8
		for (i=0; i<ts->number_of_tasks-1; i++) {
800199fe:	30 08       	mov	r8,0
80019a00:	ef 48 ff f8 	st.w	r7[-8],r8
80019a04:	c0 99       	rjmp	80019c16 <sort_taskset_by_period+0x242>
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a06:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a0a:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a0e:	12 98       	mov	r8,r9
80019a10:	a1 78       	lsl	r8,0x1
80019a12:	12 08       	add	r8,r9
80019a14:	2f f8       	sub	r8,-1
80019a16:	a5 68       	lsl	r8,0x4
80019a18:	f4 08 00 08 	add	r8,r10,r8
80019a1c:	70 08       	ld.w	r8,r8[0x0]
80019a1e:	58 08       	cp.w	r8,0
80019a20:	c1 11       	brne	80019a42 <sort_taskset_by_period+0x6e>
80019a22:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a26:	f0 c9 ff ff 	sub	r9,r8,-1
80019a2a:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a2e:	12 98       	mov	r8,r9
80019a30:	a1 78       	lsl	r8,0x1
80019a32:	12 08       	add	r8,r9
80019a34:	2f f8       	sub	r8,-1
80019a36:	a5 68       	lsl	r8,0x4
80019a38:	f4 08 00 08 	add	r8,r10,r8
80019a3c:	70 08       	ld.w	r8,r8[0x0]
80019a3e:	58 08       	cp.w	r8,0
80019a40:	c3 e1       	brne	80019abc <sort_taskset_by_period+0xe8>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019a42:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a46:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a4a:	12 98       	mov	r8,r9
80019a4c:	a1 78       	lsl	r8,0x1
80019a4e:	12 08       	add	r8,r9
80019a50:	2f f8       	sub	r8,-1
80019a52:	a5 68       	lsl	r8,0x4
80019a54:	f4 08 00 08 	add	r8,r10,r8
80019a58:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a5a:	58 08       	cp.w	r8,0
80019a5c:	e0 80 00 d8 	breq	80019c0c <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
80019a60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a64:	f0 c9 ff ff 	sub	r9,r8,-1
80019a68:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a6c:	12 98       	mov	r8,r9
80019a6e:	a1 78       	lsl	r8,0x1
80019a70:	12 08       	add	r8,r9
80019a72:	2f f8       	sub	r8,-1
80019a74:	a5 68       	lsl	r8,0x4
80019a76:	f4 08 00 08 	add	r8,r10,r8
80019a7a:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019a7c:	58 08       	cp.w	r8,0
80019a7e:	e0 80 00 c7 	breq	80019c0c <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
80019a82:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019a86:	ee fa ff c4 	ld.w	r10,r7[-60]
80019a8a:	12 98       	mov	r8,r9
80019a8c:	a1 78       	lsl	r8,0x1
80019a8e:	12 08       	add	r8,r9
80019a90:	a5 68       	lsl	r8,0x4
80019a92:	f4 08 00 08 	add	r8,r10,r8
80019a96:	2e 08       	sub	r8,-32
80019a98:	70 0a       	ld.w	r10,r8[0x0]
80019a9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019a9e:	f0 c9 ff ff 	sub	r9,r8,-1
80019aa2:	ee fb ff c4 	ld.w	r11,r7[-60]
80019aa6:	12 98       	mov	r8,r9
80019aa8:	a1 78       	lsl	r8,0x1
80019aaa:	12 08       	add	r8,r9
80019aac:	a5 68       	lsl	r8,0x4
80019aae:	f6 08 00 08 	add	r8,r11,r8
80019ab2:	2e 08       	sub	r8,-32
80019ab4:	70 08       	ld.w	r8,r8[0x0]
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
			if ( ((ts->tasks[i].call_function==NULL)&&(ts->tasks[i+1].call_function!=NULL)) ||
80019ab6:	10 3a       	cp.w	r10,r8
80019ab8:	e0 88 00 aa 	brls	80019c0c <sort_taskset_by_period+0x238>
				((ts->tasks[i].call_function!=NULL)&&(ts->tasks[i+1].call_function!=NULL) &&
				(ts->tasks[i].repeat_period > ts->tasks[i+1].repeat_period))) {
				tmp=ts->tasks[i];
80019abc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019ac0:	ee fa ff c4 	ld.w	r10,r7[-60]
80019ac4:	12 98       	mov	r8,r9
80019ac6:	a1 78       	lsl	r8,0x1
80019ac8:	12 08       	add	r8,r9
80019aca:	a5 68       	lsl	r8,0x4
80019acc:	f4 08 00 08 	add	r8,r10,r8
80019ad0:	2f 48       	sub	r8,-12
80019ad2:	ee cb 00 38 	sub	r11,r7,56
80019ad6:	10 9a       	mov	r10,r8
80019ad8:	f6 c8 00 00 	sub	r8,r11,0
80019adc:	f4 c9 00 00 	sub	r9,r10,0
80019ae0:	72 0c       	ld.w	r12,r9[0x0]
80019ae2:	91 0c       	st.w	r8[0x0],r12
80019ae4:	72 1c       	ld.w	r12,r9[0x4]
80019ae6:	91 1c       	st.w	r8[0x4],r12
80019ae8:	72 2c       	ld.w	r12,r9[0x8]
80019aea:	91 2c       	st.w	r8[0x8],r12
80019aec:	72 39       	ld.w	r9,r9[0xc]
80019aee:	91 39       	st.w	r8[0xc],r9
80019af0:	f6 c8 ff f0 	sub	r8,r11,-16
80019af4:	f4 c9 ff f0 	sub	r9,r10,-16
80019af8:	72 0c       	ld.w	r12,r9[0x0]
80019afa:	91 0c       	st.w	r8[0x0],r12
80019afc:	72 1c       	ld.w	r12,r9[0x4]
80019afe:	91 1c       	st.w	r8[0x4],r12
80019b00:	72 2c       	ld.w	r12,r9[0x8]
80019b02:	91 2c       	st.w	r8[0x8],r12
80019b04:	72 39       	ld.w	r9,r9[0xc]
80019b06:	91 39       	st.w	r8[0xc],r9
80019b08:	f6 c8 ff e0 	sub	r8,r11,-32
80019b0c:	f4 c9 ff e0 	sub	r9,r10,-32
80019b10:	72 0a       	ld.w	r10,r9[0x0]
80019b12:	91 0a       	st.w	r8[0x0],r10
80019b14:	72 1a       	ld.w	r10,r9[0x4]
80019b16:	91 1a       	st.w	r8[0x4],r10
80019b18:	72 2a       	ld.w	r10,r9[0x8]
80019b1a:	91 2a       	st.w	r8[0x8],r10
80019b1c:	72 39       	ld.w	r9,r9[0xc]
80019b1e:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i]=ts->tasks[i+1];
80019b20:	ee fa ff f8 	ld.w	r10,r7[-8]
80019b24:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019b28:	f0 c9 ff ff 	sub	r9,r8,-1
80019b2c:	ee fb ff c4 	ld.w	r11,r7[-60]
80019b30:	14 98       	mov	r8,r10
80019b32:	a1 78       	lsl	r8,0x1
80019b34:	14 08       	add	r8,r10
80019b36:	a5 68       	lsl	r8,0x4
80019b38:	f6 08 00 08 	add	r8,r11,r8
80019b3c:	f0 ca ff f4 	sub	r10,r8,-12
80019b40:	ee fb ff c4 	ld.w	r11,r7[-60]
80019b44:	12 98       	mov	r8,r9
80019b46:	a1 78       	lsl	r8,0x1
80019b48:	12 08       	add	r8,r9
80019b4a:	a5 68       	lsl	r8,0x4
80019b4c:	f6 08 00 08 	add	r8,r11,r8
80019b50:	2f 48       	sub	r8,-12
80019b52:	14 9b       	mov	r11,r10
80019b54:	10 9a       	mov	r10,r8
80019b56:	f6 c8 00 00 	sub	r8,r11,0
80019b5a:	f4 c9 00 00 	sub	r9,r10,0
80019b5e:	72 0c       	ld.w	r12,r9[0x0]
80019b60:	91 0c       	st.w	r8[0x0],r12
80019b62:	72 1c       	ld.w	r12,r9[0x4]
80019b64:	91 1c       	st.w	r8[0x4],r12
80019b66:	72 2c       	ld.w	r12,r9[0x8]
80019b68:	91 2c       	st.w	r8[0x8],r12
80019b6a:	72 39       	ld.w	r9,r9[0xc]
80019b6c:	91 39       	st.w	r8[0xc],r9
80019b6e:	f6 c8 ff f0 	sub	r8,r11,-16
80019b72:	f4 c9 ff f0 	sub	r9,r10,-16
80019b76:	72 0c       	ld.w	r12,r9[0x0]
80019b78:	91 0c       	st.w	r8[0x0],r12
80019b7a:	72 1c       	ld.w	r12,r9[0x4]
80019b7c:	91 1c       	st.w	r8[0x4],r12
80019b7e:	72 2c       	ld.w	r12,r9[0x8]
80019b80:	91 2c       	st.w	r8[0x8],r12
80019b82:	72 39       	ld.w	r9,r9[0xc]
80019b84:	91 39       	st.w	r8[0xc],r9
80019b86:	f6 c8 ff e0 	sub	r8,r11,-32
80019b8a:	f4 c9 ff e0 	sub	r9,r10,-32
80019b8e:	72 0a       	ld.w	r10,r9[0x0]
80019b90:	91 0a       	st.w	r8[0x0],r10
80019b92:	72 1a       	ld.w	r10,r9[0x4]
80019b94:	91 1a       	st.w	r8[0x4],r10
80019b96:	72 2a       	ld.w	r10,r9[0x8]
80019b98:	91 2a       	st.w	r8[0x8],r10
80019b9a:	72 39       	ld.w	r9,r9[0xc]
80019b9c:	91 39       	st.w	r8[0xc],r9
				ts->tasks[i+1]=tmp;		
80019b9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ba2:	f0 c9 ff ff 	sub	r9,r8,-1
80019ba6:	ee fa ff c4 	ld.w	r10,r7[-60]
80019baa:	12 98       	mov	r8,r9
80019bac:	a1 78       	lsl	r8,0x1
80019bae:	12 08       	add	r8,r9
80019bb0:	a5 68       	lsl	r8,0x4
80019bb2:	f4 08 00 08 	add	r8,r10,r8
80019bb6:	2f 48       	sub	r8,-12
80019bb8:	10 9b       	mov	r11,r8
80019bba:	ee ca 00 38 	sub	r10,r7,56
80019bbe:	f6 c8 00 00 	sub	r8,r11,0
80019bc2:	f4 c9 00 00 	sub	r9,r10,0
80019bc6:	72 0c       	ld.w	r12,r9[0x0]
80019bc8:	91 0c       	st.w	r8[0x0],r12
80019bca:	72 1c       	ld.w	r12,r9[0x4]
80019bcc:	91 1c       	st.w	r8[0x4],r12
80019bce:	72 2c       	ld.w	r12,r9[0x8]
80019bd0:	91 2c       	st.w	r8[0x8],r12
80019bd2:	72 39       	ld.w	r9,r9[0xc]
80019bd4:	91 39       	st.w	r8[0xc],r9
80019bd6:	f6 c8 ff f0 	sub	r8,r11,-16
80019bda:	f4 c9 ff f0 	sub	r9,r10,-16
80019bde:	72 0c       	ld.w	r12,r9[0x0]
80019be0:	91 0c       	st.w	r8[0x0],r12
80019be2:	72 1c       	ld.w	r12,r9[0x4]
80019be4:	91 1c       	st.w	r8[0x4],r12
80019be6:	72 2c       	ld.w	r12,r9[0x8]
80019be8:	91 2c       	st.w	r8[0x8],r12
80019bea:	72 39       	ld.w	r9,r9[0xc]
80019bec:	91 39       	st.w	r8[0xc],r9
80019bee:	f6 c8 ff e0 	sub	r8,r11,-32
80019bf2:	f4 c9 ff e0 	sub	r9,r10,-32
80019bf6:	72 0a       	ld.w	r10,r9[0x0]
80019bf8:	91 0a       	st.w	r8[0x0],r10
80019bfa:	72 1a       	ld.w	r10,r9[0x4]
80019bfc:	91 1a       	st.w	r8[0x4],r10
80019bfe:	72 2a       	ld.w	r10,r9[0x8]
80019c00:	91 2a       	st.w	r8[0x8],r10
80019c02:	72 39       	ld.w	r9,r9[0xc]
80019c04:	91 39       	st.w	r8[0xc],r9
				sorted=false;
80019c06:	30 08       	mov	r8,0
80019c08:	ef 68 ff ff 	st.b	r7[-1],r8
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
		sorted=true;
		for (i=0; i<ts->number_of_tasks-1; i++) {
80019c0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c10:	2f f8       	sub	r8,-1
80019c12:	ef 48 ff f8 	st.w	r7[-8],r8
80019c16:	ee f8 ff c4 	ld.w	r8,r7[-60]
80019c1a:	11 88       	ld.ub	r8,r8[0x0]
80019c1c:	f0 c9 00 01 	sub	r9,r8,1
80019c20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019c24:	10 39       	cp.w	r9,r8
80019c26:	fe 99 fe f0 	brgt	80019a06 <sort_taskset_by_period+0x32>
80019c2a:	c0 28       	rjmp	80019c2e <sort_taskset_by_period+0x25a>
	int i;
	bool sorted=false;
	task_entry tmp;
	if (ts->number_of_tasks<2) return;

	while (!sorted) {
80019c2c:	d7 03       	nop
80019c2e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80019c32:	ec 18 00 01 	eorl	r8,0x1
80019c36:	5c 58       	castu.b	r8
80019c38:	fe 91 fe e0 	brne	800199f8 <sort_taskset_by_period+0x24>
				ts->tasks[i+1]=tmp;		
				sorted=false;
			}
		}
	}		
}
80019c3c:	2f 1d       	sub	sp,-60
80019c3e:	e3 cd 80 80 	ldm	sp++,r7,pc

80019c42 <run_scheduler_update>:

int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
80019c42:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80019c46:	1a 97       	mov	r7,sp
80019c48:	20 9d       	sub	sp,36
80019c4a:	fe f6 04 0a 	ld.w	r6,pc[1034]
80019c4e:	1e 26       	rsub	r6,pc
80019c50:	ef 4c ff e0 	st.w	r7[-32],r12
80019c54:	16 98       	mov	r8,r11
80019c56:	ef 68 ff dc 	st.b	r7[-36],r8
	int i;
	int realtime_violation=0;
80019c5a:	30 08       	mov	r8,0
80019c5c:	ef 48 ff e8 	st.w	r7[-24],r8
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
80019c60:	ee f8 ff e0 	ld.w	r8,r7[-32]
80019c64:	70 28       	ld.w	r8,r8[0x8]
80019c66:	ef 48 ff e4 	st.w	r7[-28],r8
80019c6a:	e0 8f 01 e5 	bral	8001a034 <run_scheduler_update+0x3f2>
		uint32_t current_time=GET_TIME;
80019c6e:	f0 16 00 29 	mcall	r6[164]
80019c72:	18 98       	mov	r8,r12
80019c74:	ef 48 ff f4 	st.w	r7[-12],r8
		if ((ts->tasks[i].call_function!=NULL)  && (ts->tasks[i].run_mode!=RUN_NEVER) &&(current_time >= ts->tasks[i].next_run)) {
80019c78:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c7c:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c80:	12 98       	mov	r8,r9
80019c82:	a1 78       	lsl	r8,0x1
80019c84:	12 08       	add	r8,r9
80019c86:	2f f8       	sub	r8,-1
80019c88:	a5 68       	lsl	r8,0x4
80019c8a:	f4 08 00 08 	add	r8,r10,r8
80019c8e:	70 08       	ld.w	r8,r8[0x0]
80019c90:	58 08       	cp.w	r8,0
80019c92:	e0 80 01 cc 	breq	8001a02a <run_scheduler_update+0x3e8>
80019c96:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019c9a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019c9e:	12 98       	mov	r8,r9
80019ca0:	a1 78       	lsl	r8,0x1
80019ca2:	12 08       	add	r8,r9
80019ca4:	a5 68       	lsl	r8,0x4
80019ca6:	f4 08 00 08 	add	r8,r10,r8
80019caa:	2e 88       	sub	r8,-24
80019cac:	70 08       	ld.w	r8,r8[0x0]
80019cae:	58 08       	cp.w	r8,0
80019cb0:	e0 80 01 bd 	breq	8001a02a <run_scheduler_update+0x3e8>
80019cb4:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cb8:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cbc:	12 98       	mov	r8,r9
80019cbe:	a1 78       	lsl	r8,0x1
80019cc0:	12 08       	add	r8,r9
80019cc2:	a5 68       	lsl	r8,0x4
80019cc4:	f4 08 00 08 	add	r8,r10,r8
80019cc8:	2d c8       	sub	r8,-36
80019cca:	70 09       	ld.w	r9,r8[0x0]
80019ccc:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019cd0:	10 39       	cp.w	r9,r8
80019cd2:	e0 8b 01 ac 	brhi	8001a02a <run_scheduler_update+0x3e8>
			uint32_t delay=current_time - (ts->tasks[i].next_run);
80019cd6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019cda:	ee fa ff e0 	ld.w	r10,r7[-32]
80019cde:	12 98       	mov	r8,r9
80019ce0:	a1 78       	lsl	r8,0x1
80019ce2:	12 08       	add	r8,r9
80019ce4:	a5 68       	lsl	r8,0x4
80019ce6:	f4 08 00 08 	add	r8,r10,r8
80019cea:	2d c8       	sub	r8,-36
80019cec:	70 08       	ld.w	r8,r8[0x0]
80019cee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80019cf2:	10 19       	sub	r9,r8
80019cf4:	ef 49 ff f8 	st.w	r7[-8],r9
			uint32_t task_start_time;

		    task_start_time=GET_TIME;
80019cf8:	f0 16 00 29 	mcall	r6[164]
80019cfc:	18 98       	mov	r8,r12
80019cfe:	ef 48 ff fc 	st.w	r7[-4],r8
		    call_task=ts->tasks[i].call_function;
80019d02:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d06:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d0a:	12 98       	mov	r8,r9
80019d0c:	a1 78       	lsl	r8,0x1
80019d0e:	12 08       	add	r8,r9
80019d10:	2f f8       	sub	r8,-1
80019d12:	a5 68       	lsl	r8,0x4
80019d14:	f4 08 00 08 	add	r8,r10,r8
80019d18:	70 08       	ld.w	r8,r8[0x0]
80019d1a:	ef 48 ff ec 	st.w	r7[-20],r8
		    //dbg_print_num(i, 16); dbg_print(" ");dbg_print_num(call_task, 16); dbg_print("\n");
		    treturn = call_task();
80019d1e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80019d22:	5d 18       	icall	r8
80019d24:	18 98       	mov	r8,r12
80019d26:	ef 48 ff f0 	st.w	r7[-16],r8


			
			switch (ts->tasks[i].timing_mode) {
80019d2a:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d2e:	ee fa ff e0 	ld.w	r10,r7[-32]
80019d32:	12 98       	mov	r8,r9
80019d34:	a1 78       	lsl	r8,0x1
80019d36:	12 08       	add	r8,r9
80019d38:	2f f8       	sub	r8,-1
80019d3a:	a5 68       	lsl	r8,0x4
80019d3c:	f4 08 00 08 	add	r8,r10,r8
80019d40:	2f 48       	sub	r8,-12
80019d42:	70 08       	ld.w	r8,r8[0x0]
80019d44:	58 08       	cp.w	r8,0
80019d46:	c0 40       	breq	80019d4e <run_scheduler_update+0x10c>
80019d48:	58 18       	cp.w	r8,1
80019d4a:	c2 90       	breq	80019d9c <run_scheduler_update+0x15a>
80019d4c:	c4 58       	rjmp	80019dd6 <run_scheduler_update+0x194>
				case PERIODIC_ABSOLUTE:
					ts->tasks[i].next_run += ts->tasks[i].repeat_period;
80019d4e:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019d52:	ee fa ff e4 	ld.w	r10,r7[-28]
80019d56:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d5a:	14 98       	mov	r8,r10
80019d5c:	a1 78       	lsl	r8,0x1
80019d5e:	14 08       	add	r8,r10
80019d60:	a5 68       	lsl	r8,0x4
80019d62:	f6 08 00 08 	add	r8,r11,r8
80019d66:	2d c8       	sub	r8,-36
80019d68:	70 0b       	ld.w	r11,r8[0x0]
80019d6a:	ee fa ff e4 	ld.w	r10,r7[-28]
80019d6e:	ee fc ff e0 	ld.w	r12,r7[-32]
80019d72:	14 98       	mov	r8,r10
80019d74:	a1 78       	lsl	r8,0x1
80019d76:	14 08       	add	r8,r10
80019d78:	a5 68       	lsl	r8,0x4
80019d7a:	f8 08 00 08 	add	r8,r12,r8
80019d7e:	2e 08       	sub	r8,-32
80019d80:	70 08       	ld.w	r8,r8[0x0]
80019d82:	f6 08 00 0a 	add	r10,r11,r8
80019d86:	ee fb ff e0 	ld.w	r11,r7[-32]
80019d8a:	12 98       	mov	r8,r9
80019d8c:	a1 78       	lsl	r8,0x1
80019d8e:	12 08       	add	r8,r9
80019d90:	a5 68       	lsl	r8,0x4
80019d92:	f6 08 00 08 	add	r8,r11,r8
80019d96:	2d c8       	sub	r8,-36
80019d98:	91 0a       	st.w	r8[0x0],r10
				break;
80019d9a:	c1 e8       	rjmp	80019dd6 <run_scheduler_update+0x194>
				case PERIODIC_RELATIVE:
					ts->tasks[i].next_run = GET_TIME + ts->tasks[i].repeat_period;
80019d9c:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019da0:	f0 16 00 29 	mcall	r6[164]
80019da4:	18 9a       	mov	r10,r12
80019da6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019daa:	ee fb ff e0 	ld.w	r11,r7[-32]
80019dae:	12 98       	mov	r8,r9
80019db0:	a1 78       	lsl	r8,0x1
80019db2:	12 08       	add	r8,r9
80019db4:	a5 68       	lsl	r8,0x4
80019db6:	f6 08 00 08 	add	r8,r11,r8
80019dba:	2e 08       	sub	r8,-32
80019dbc:	70 08       	ld.w	r8,r8[0x0]
80019dbe:	f4 08 00 09 	add	r9,r10,r8
80019dc2:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dc6:	0a 98       	mov	r8,r5
80019dc8:	a1 78       	lsl	r8,0x1
80019dca:	0a 08       	add	r8,r5
80019dcc:	a5 68       	lsl	r8,0x4
80019dce:	f4 08 00 08 	add	r8,r10,r8
80019dd2:	2d c8       	sub	r8,-36
80019dd4:	91 09       	st.w	r8[0x0],r9
				break;
			}
			if (ts->tasks[i].run_mode==RUN_ONCE) ts->tasks[i].run_mode=RUN_NEVER;
80019dd6:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019dda:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dde:	12 98       	mov	r8,r9
80019de0:	a1 78       	lsl	r8,0x1
80019de2:	12 08       	add	r8,r9
80019de4:	a5 68       	lsl	r8,0x4
80019de6:	f4 08 00 08 	add	r8,r10,r8
80019dea:	2e 88       	sub	r8,-24
80019dec:	70 08       	ld.w	r8,r8[0x0]
80019dee:	58 18       	cp.w	r8,1
80019df0:	c0 e1       	brne	80019e0c <run_scheduler_update+0x1ca>
80019df2:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019df6:	ee fa ff e0 	ld.w	r10,r7[-32]
80019dfa:	12 98       	mov	r8,r9
80019dfc:	a1 78       	lsl	r8,0x1
80019dfe:	12 08       	add	r8,r9
80019e00:	a5 68       	lsl	r8,0x4
80019e02:	f4 08 00 08 	add	r8,r10,r8
80019e06:	2e 88       	sub	r8,-24
80019e08:	30 09       	mov	r9,0
80019e0a:	91 09       	st.w	r8[0x0],r9
			if (ts->tasks[i].next_run < current_time) {
80019e0c:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e10:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e14:	12 98       	mov	r8,r9
80019e16:	a1 78       	lsl	r8,0x1
80019e18:	12 08       	add	r8,r9
80019e1a:	a5 68       	lsl	r8,0x4
80019e1c:	f4 08 00 08 	add	r8,r10,r8
80019e20:	2d c8       	sub	r8,-36
80019e22:	70 09       	ld.w	r9,r8[0x0]
80019e24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019e28:	10 39       	cp.w	r9,r8
80019e2a:	c3 92       	brcc	80019e9c <run_scheduler_update+0x25a>
				realtime_violation=-i; //realtime violation!!
80019e2c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019e30:	5c 38       	neg	r8
80019e32:	ef 48 ff e8 	st.w	r7[-24],r8
				ts->tasks[i].rt_violations++;
80019e36:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e3a:	ee fa ff e0 	ld.w	r10,r7[-32]
80019e3e:	12 98       	mov	r8,r9
80019e40:	a1 78       	lsl	r8,0x1
80019e42:	12 08       	add	r8,r9
80019e44:	a5 68       	lsl	r8,0x4
80019e46:	f4 08 00 08 	add	r8,r10,r8
80019e4a:	2c 88       	sub	r8,-56
80019e4c:	70 08       	ld.w	r8,r8[0x0]
80019e4e:	f0 ca ff ff 	sub	r10,r8,-1
80019e52:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e56:	12 98       	mov	r8,r9
80019e58:	a1 78       	lsl	r8,0x1
80019e5a:	12 08       	add	r8,r9
80019e5c:	a5 68       	lsl	r8,0x4
80019e5e:	f6 08 00 08 	add	r8,r11,r8
80019e62:	2c 88       	sub	r8,-56
80019e64:	91 0a       	st.w	r8[0x0],r10
				ts->tasks[i].next_run=current_time + ts->tasks[i].repeat_period;
80019e66:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019e6a:	ee fa ff e4 	ld.w	r10,r7[-28]
80019e6e:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e72:	14 98       	mov	r8,r10
80019e74:	a1 78       	lsl	r8,0x1
80019e76:	14 08       	add	r8,r10
80019e78:	a5 68       	lsl	r8,0x4
80019e7a:	f6 08 00 08 	add	r8,r11,r8
80019e7e:	2e 08       	sub	r8,-32
80019e80:	70 0a       	ld.w	r10,r8[0x0]
80019e82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80019e86:	10 0a       	add	r10,r8
80019e88:	ee fb ff e0 	ld.w	r11,r7[-32]
80019e8c:	12 98       	mov	r8,r9
80019e8e:	a1 78       	lsl	r8,0x1
80019e90:	12 08       	add	r8,r9
80019e92:	a5 68       	lsl	r8,0x4
80019e94:	f6 08 00 08 	add	r8,r11,r8
80019e98:	2d c8       	sub	r8,-36
80019e9a:	91 0a       	st.w	r8[0x0],r10
			}
			
			
			ts->tasks[i].delay_avg= (7*ts->tasks[i].delay_avg + delay)/8;
80019e9c:	ee fc ff e4 	ld.w	r12,r7[-28]
80019ea0:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019ea4:	ee fa ff e0 	ld.w	r10,r7[-32]
80019ea8:	f0 c9 ff ff 	sub	r9,r8,-1
80019eac:	12 98       	mov	r8,r9
80019eae:	a1 78       	lsl	r8,0x1
80019eb0:	12 08       	add	r8,r9
80019eb2:	a5 68       	lsl	r8,0x4
80019eb4:	f4 08 00 08 	add	r8,r10,r8
80019eb8:	70 09       	ld.w	r9,r8[0x0]
80019eba:	12 98       	mov	r8,r9
80019ebc:	a3 78       	lsl	r8,0x3
80019ebe:	f0 09 01 09 	sub	r9,r8,r9
80019ec2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019ec6:	f2 08 00 08 	add	r8,r9,r8
80019eca:	f0 0a 16 03 	lsr	r10,r8,0x3
80019ece:	ee fb ff e0 	ld.w	r11,r7[-32]
80019ed2:	f8 c9 ff ff 	sub	r9,r12,-1
80019ed6:	12 98       	mov	r8,r9
80019ed8:	a1 78       	lsl	r8,0x1
80019eda:	12 08       	add	r8,r9
80019edc:	a5 68       	lsl	r8,0x4
80019ede:	f6 08 00 08 	add	r8,r11,r8
80019ee2:	91 0a       	st.w	r8[0x0],r10
			if (delay>ts->tasks[i].delay_max) ts->tasks[i].delay_max=delay;
80019ee4:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019ee8:	ee fa ff e0 	ld.w	r10,r7[-32]
80019eec:	12 98       	mov	r8,r9
80019eee:	a1 78       	lsl	r8,0x1
80019ef0:	12 08       	add	r8,r9
80019ef2:	a5 68       	lsl	r8,0x4
80019ef4:	f4 08 00 08 	add	r8,r10,r8
80019ef8:	2d 48       	sub	r8,-44
80019efa:	70 09       	ld.w	r9,r8[0x0]
80019efc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80019f00:	10 39       	cp.w	r9,r8
80019f02:	c0 f2       	brcc	80019f20 <run_scheduler_update+0x2de>
80019f04:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f08:	ee fa ff e0 	ld.w	r10,r7[-32]
80019f0c:	12 98       	mov	r8,r9
80019f0e:	a1 78       	lsl	r8,0x1
80019f10:	12 08       	add	r8,r9
80019f12:	a5 68       	lsl	r8,0x4
80019f14:	f4 08 00 08 	add	r8,r10,r8
80019f18:	2d 48       	sub	r8,-44
80019f1a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80019f1e:	91 09       	st.w	r8[0x0],r9
			
			ts->tasks[i].delay_var_squared=(15*ts->tasks[i].delay_var_squared+(delay - ts->tasks[i].delay_avg)*(delay - ts->tasks[i].delay_avg))/16;
80019f20:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019f24:	ee fa ff e4 	ld.w	r10,r7[-28]
80019f28:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f2c:	14 98       	mov	r8,r10
80019f2e:	a1 78       	lsl	r8,0x1
80019f30:	14 08       	add	r8,r10
80019f32:	a5 68       	lsl	r8,0x4
80019f34:	f6 08 00 08 	add	r8,r11,r8
80019f38:	2c c8       	sub	r8,-52
80019f3a:	70 0a       	ld.w	r10,r8[0x0]
80019f3c:	14 98       	mov	r8,r10
80019f3e:	a5 68       	lsl	r8,0x4
80019f40:	f0 0a 01 0b 	sub	r11,r8,r10
80019f44:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f48:	ee fc ff e0 	ld.w	r12,r7[-32]
80019f4c:	f0 ca ff ff 	sub	r10,r8,-1
80019f50:	14 98       	mov	r8,r10
80019f52:	a1 78       	lsl	r8,0x1
80019f54:	14 08       	add	r8,r10
80019f56:	a5 68       	lsl	r8,0x4
80019f58:	f8 08 00 08 	add	r8,r12,r8
80019f5c:	70 08       	ld.w	r8,r8[0x0]
80019f5e:	ee fa ff f8 	ld.w	r10,r7[-8]
80019f62:	f4 08 01 0c 	sub	r12,r10,r8
80019f66:	ee f8 ff e4 	ld.w	r8,r7[-28]
80019f6a:	ee fe ff e0 	ld.w	lr,r7[-32]
80019f6e:	f0 ca ff ff 	sub	r10,r8,-1
80019f72:	14 98       	mov	r8,r10
80019f74:	a1 78       	lsl	r8,0x1
80019f76:	14 08       	add	r8,r10
80019f78:	a5 68       	lsl	r8,0x4
80019f7a:	fc 08 00 08 	add	r8,lr,r8
80019f7e:	70 08       	ld.w	r8,r8[0x0]
80019f80:	ee fa ff f8 	ld.w	r10,r7[-8]
80019f84:	f4 08 01 08 	sub	r8,r10,r8
80019f88:	f8 08 02 48 	mul	r8,r12,r8
80019f8c:	f6 08 00 08 	add	r8,r11,r8
80019f90:	f0 0a 16 04 	lsr	r10,r8,0x4
80019f94:	ee fb ff e0 	ld.w	r11,r7[-32]
80019f98:	12 98       	mov	r8,r9
80019f9a:	a1 78       	lsl	r8,0x1
80019f9c:	12 08       	add	r8,r9
80019f9e:	a5 68       	lsl	r8,0x4
80019fa0:	f6 08 00 08 	add	r8,r11,r8
80019fa4:	2c c8       	sub	r8,-52
80019fa6:	91 0a       	st.w	r8[0x0],r10
			
			ts->tasks[i].execution_time= (7*ts->tasks[i].execution_time + (GET_TIME-task_start_time))/8;
80019fa8:	ee f5 ff e4 	ld.w	r5,r7[-28]
80019fac:	ee f9 ff e4 	ld.w	r9,r7[-28]
80019fb0:	ee fa ff e0 	ld.w	r10,r7[-32]
80019fb4:	12 98       	mov	r8,r9
80019fb6:	a1 78       	lsl	r8,0x1
80019fb8:	12 08       	add	r8,r9
80019fba:	a5 68       	lsl	r8,0x4
80019fbc:	f4 08 00 08 	add	r8,r10,r8
80019fc0:	2d 88       	sub	r8,-40
80019fc2:	70 09       	ld.w	r9,r8[0x0]
80019fc4:	12 98       	mov	r8,r9
80019fc6:	a3 78       	lsl	r8,0x3
80019fc8:	f0 09 01 03 	sub	r3,r8,r9
80019fcc:	f0 16 00 29 	mcall	r6[164]
80019fd0:	18 99       	mov	r9,r12
80019fd2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80019fd6:	f2 08 01 08 	sub	r8,r9,r8
80019fda:	e6 08 00 08 	add	r8,r3,r8
80019fde:	f0 09 16 03 	lsr	r9,r8,0x3
80019fe2:	ee fa ff e0 	ld.w	r10,r7[-32]
80019fe6:	0a 98       	mov	r8,r5
80019fe8:	a1 78       	lsl	r8,0x1
80019fea:	0a 08       	add	r8,r5
80019fec:	a5 68       	lsl	r8,0x4
80019fee:	f4 08 00 08 	add	r8,r10,r8
80019ff2:	2d 88       	sub	r8,-40
80019ff4:	91 09       	st.w	r8[0x0],r9
						
			switch (schedule_strategy) {
80019ff6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80019ffa:	58 18       	cp.w	r8,1
80019ffc:	c0 81       	brne	8001a00c <run_scheduler_update+0x3ca>
			case FIXED_PRIORITY: 
				ts->current_schedule_slot=0;
80019ffe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a002:	30 09       	mov	r9,0
8001a004:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a006:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a00a:	c2 08       	rjmp	8001a04a <run_scheduler_update+0x408>
				
			default:
			case ROUND_ROBIN:
				// round robin scheme - scheduler will pick up where it left.
				if (i==ts->number_of_tasks) ts->current_schedule_slot=0;
8001a00c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a010:	11 88       	ld.ub	r8,r8[0x0]
8001a012:	10 99       	mov	r9,r8
8001a014:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a018:	10 39       	cp.w	r9,r8
8001a01a:	c0 51       	brne	8001a024 <run_scheduler_update+0x3e2>
8001a01c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a020:	30 09       	mov	r9,0
8001a022:	91 29       	st.w	r8[0x8],r9
				return realtime_violation;
8001a024:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001a028:	c1 18       	rjmp	8001a04a <run_scheduler_update+0x408>
int run_scheduler_update(task_set *ts, uint8_t schedule_strategy) {
	int i;
	int realtime_violation=0;
	function_pointer call_task;
	task_return_t treturn;
	for (i=ts->current_schedule_slot; i<ts->number_of_tasks; i++) {
8001a02a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a02e:	2f f8       	sub	r8,-1
8001a030:	ef 48 ff e4 	st.w	r7[-28],r8
8001a034:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001a038:	11 88       	ld.ub	r8,r8[0x0]
8001a03a:	10 99       	mov	r9,r8
8001a03c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001a040:	10 39       	cp.w	r9,r8
8001a042:	fe 99 fe 16 	brgt	80019c6e <run_scheduler_update+0x2c>
				return realtime_violation;
			}
			
		}
	}
	return realtime_violation;;
8001a046:	ee f8 ff e8 	ld.w	r8,r7[-24]
}
8001a04a:	10 9c       	mov	r12,r8
8001a04c:	2f 7d       	sub	sp,-36
8001a04e:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001a052:	00 00       	add	r0,r0
8001a054:	80 01       	ld.sh	r1,r0[0x0]
8001a056:	9a d2       	ld.uh	r2,sp[0xa]

8001a058 <get_task_by_id>:


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
8001a058:	eb cd 40 80 	pushm	r7,lr
8001a05c:	1a 97       	mov	r7,sp
8001a05e:	20 3d       	sub	sp,12
8001a060:	ef 4c ff f8 	st.w	r7[-8],r12
8001a064:	16 98       	mov	r8,r11
8001a066:	ef 58 ff f4 	st.h	r7[-12],r8
	int i=0;
8001a06a:	30 08       	mov	r8,0
8001a06c:	ef 48 ff fc 	st.w	r7[-4],r8
	for (i=0; i<ts->number_of_tasks; i++) {
8001a070:	30 08       	mov	r8,0
8001a072:	ef 48 ff fc 	st.w	r7[-4],r8
8001a076:	c2 58       	rjmp	8001a0c0 <get_task_by_id+0x68>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
8001a078:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a07c:	ee fa ff f8 	ld.w	r10,r7[-8]
8001a080:	12 98       	mov	r8,r9
8001a082:	a1 78       	lsl	r8,0x1
8001a084:	12 08       	add	r8,r9
8001a086:	a1 78       	lsl	r8,0x1
8001a088:	2f f8       	sub	r8,-1
8001a08a:	a3 78       	lsl	r8,0x3
8001a08c:	f4 08 00 08 	add	r8,r10,r8
8001a090:	90 68       	ld.sh	r8,r8[0xc]
8001a092:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001a096:	f0 09 19 00 	cp.h	r9,r8
8001a09a:	c0 e1       	brne	8001a0b6 <get_task_by_id+0x5e>
8001a09c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0a0:	f0 ca ff f4 	sub	r10,r8,-12
8001a0a4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001a0a8:	12 98       	mov	r8,r9
8001a0aa:	a1 78       	lsl	r8,0x1
8001a0ac:	12 08       	add	r8,r9
8001a0ae:	a5 68       	lsl	r8,0x4
8001a0b0:	f4 08 00 08 	add	r8,r10,r8
8001a0b4:	c1 08       	rjmp	8001a0d4 <get_task_by_id+0x7c>
}


task_entry* get_task_by_id(task_set *ts, uint16_t task_id){
	int i=0;
	for (i=0; i<ts->number_of_tasks; i++) {
8001a0b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0ba:	2f f8       	sub	r8,-1
8001a0bc:	ef 48 ff fc 	st.w	r7[-4],r8
8001a0c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a0c4:	11 88       	ld.ub	r8,r8[0x0]
8001a0c6:	10 99       	mov	r9,r8
8001a0c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0cc:	10 39       	cp.w	r9,r8
8001a0ce:	fe 99 ff d5 	brgt	8001a078 <get_task_by_id+0x20>
		if (ts->tasks[i].task_id==task_id) return &ts->tasks[i];
	}
	return NULL;
8001a0d2:	30 08       	mov	r8,0
}
8001a0d4:	10 9c       	mov	r12,r8
8001a0d6:	2f dd       	sub	sp,-12
8001a0d8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a0dc <get_task_by_index>:

task_entry* get_task_by_index(task_set *ts, uint16_t task_index) {
8001a0dc:	eb cd 40 80 	pushm	r7,lr
8001a0e0:	1a 97       	mov	r7,sp
8001a0e2:	20 2d       	sub	sp,8
8001a0e4:	ef 4c ff fc 	st.w	r7[-4],r12
8001a0e8:	16 98       	mov	r8,r11
8001a0ea:	ef 58 ff f8 	st.h	r7[-8],r8
	if (task_index<ts->number_of_tasks) {
8001a0ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a0f2:	11 88       	ld.ub	r8,r8[0x0]
8001a0f4:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8001a0f8:	f0 09 19 00 	cp.h	r9,r8
8001a0fc:	c0 e2       	brcc	8001a118 <get_task_by_index+0x3c>
		return &ts->tasks[task_index];
8001a0fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a102:	f0 ca ff f4 	sub	r10,r8,-12
8001a106:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8001a10a:	12 98       	mov	r8,r9
8001a10c:	a1 78       	lsl	r8,0x1
8001a10e:	12 08       	add	r8,r9
8001a110:	a5 68       	lsl	r8,0x4
8001a112:	f4 08 00 08 	add	r8,r10,r8
8001a116:	c0 28       	rjmp	8001a11a <get_task_by_index+0x3e>
	}
	return NULL;
8001a118:	30 08       	mov	r8,0
}
8001a11a:	10 9c       	mov	r12,r8
8001a11c:	2f ed       	sub	sp,-8
8001a11e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a122 <change_run_mode>:

void change_run_mode(task_entry *te, task_run_mode_t new_run_mode) {
8001a122:	eb cd 40 80 	pushm	r7,lr
8001a126:	1a 97       	mov	r7,sp
8001a128:	20 2d       	sub	sp,8
8001a12a:	ef 4c ff fc 	st.w	r7[-4],r12
8001a12e:	ef 4b ff f8 	st.w	r7[-8],r11
	te->run_mode=new_run_mode;
8001a132:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a136:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a13a:	91 39       	st.w	r8[0xc],r9
}
8001a13c:	2f ed       	sub	sp,-8
8001a13e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a142 <change_task_period>:

void change_task_period(task_entry *te, unsigned long repeat_period) {
8001a142:	eb cd 40 c0 	pushm	r6-r7,lr
8001a146:	1a 97       	mov	r7,sp
8001a148:	20 2d       	sub	sp,8
8001a14a:	48 c6       	lddpc	r6,8001a178 <change_task_period+0x36>
8001a14c:	1e 26       	rsub	r6,pc
8001a14e:	ef 4c ff fc 	st.w	r7[-4],r12
8001a152:	ef 4b ff f8 	st.w	r7[-8],r11
	te->repeat_period=repeat_period;
8001a156:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a15a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a15e:	91 59       	st.w	r8[0x14],r9
	change_run_mode(te, RUN_REGULAR);
8001a160:	30 2b       	mov	r11,2
8001a162:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a166:	f0 16 00 b1 	mcall	r6[708]
	run_task_now(te);
8001a16a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a16e:	f0 16 01 07 	mcall	r6[1052]
}
8001a172:	2f ed       	sub	sp,-8
8001a174:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a178:	80 01       	ld.sh	r1,r0[0x0]
8001a17a:	9f d0       	st.w	pc[0x34],r0

8001a17c <suspend_task>:

void suspend_task(task_entry *te, unsigned long delay) {
8001a17c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a180:	1a 97       	mov	r7,sp
8001a182:	20 2d       	sub	sp,8
8001a184:	48 96       	lddpc	r6,8001a1a8 <suspend_task+0x2c>
8001a186:	1e 26       	rsub	r6,pc
8001a188:	ef 4c ff fc 	st.w	r7[-4],r12
8001a18c:	ef 4b ff f8 	st.w	r7[-8],r11
	te->next_run=GET_TIME + delay;
8001a190:	f0 16 00 29 	mcall	r6[164]
8001a194:	18 99       	mov	r9,r12
8001a196:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a19a:	10 09       	add	r9,r8
8001a19c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1a0:	91 69       	st.w	r8[0x18],r9
}
8001a1a2:	2f ed       	sub	sp,-8
8001a1a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a1a8:	80 01       	ld.sh	r1,r0[0x0]
8001a1aa:	a0 0a       	st.h	r0[0x0],r10

8001a1ac <run_task_now>:

void run_task_now(task_entry *te) {
8001a1ac:	eb cd 40 80 	pushm	r7,lr
8001a1b0:	1a 97       	mov	r7,sp
8001a1b2:	20 1d       	sub	sp,4
8001a1b4:	ef 4c ff fc 	st.w	r7[-4],r12
	if ((te->run_mode==RUN_NEVER)){
8001a1b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1bc:	70 38       	ld.w	r8,r8[0xc]
8001a1be:	58 08       	cp.w	r8,0
8001a1c0:	c0 51       	brne	8001a1ca <run_task_now+0x1e>
		te->run_mode=RUN_ONCE;
8001a1c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001a1c6:	30 19       	mov	r9,1
8001a1c8:	91 39       	st.w	r8[0xc],r9
		//te->next_run=GET_TIME;
	} 
}
8001a1ca:	2f fd       	sub	sp,-4
8001a1cc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001a1d0 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001a1d0:	eb cd 40 c0 	pushm	r6-r7,lr
8001a1d4:	1a 97       	mov	r7,sp
8001a1d6:	20 3d       	sub	sp,12
8001a1d8:	49 06       	lddpc	r6,8001a218 <mav_array_memcpy+0x48>
8001a1da:	1e 26       	rsub	r6,pc
8001a1dc:	ef 4c ff fc 	st.w	r7[-4],r12
8001a1e0:	ef 4b ff f8 	st.w	r7[-8],r11
8001a1e4:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001a1e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001a1ec:	58 08       	cp.w	r8,0
8001a1ee:	c0 91       	brne	8001a200 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001a1f0:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a1f4:	30 0b       	mov	r11,0
8001a1f6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a1fa:	f0 16 00 31 	mcall	r6[196]
8001a1fe:	c0 98       	rjmp	8001a210 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001a200:	ee fa ff f4 	ld.w	r10,r7[-12]
8001a204:	ee fb ff f8 	ld.w	r11,r7[-8]
8001a208:	ee fc ff fc 	ld.w	r12,r7[-4]
8001a20c:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001a210:	2f dd       	sub	sp,-12
8001a212:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a216:	00 00       	add	r0,r0
8001a218:	80 01       	ld.sh	r1,r0[0x0]
8001a21a:	a0 5e       	st.h	r0[0xa],lr

8001a21c <init_gps_ubx>:
************************************************************************************
Initialization of the GPS with the type of platform
************************************************************************************
*/
void init_gps_ubx(enum GPS_Engine_Setting _engine_nav_setting)
{
8001a21c:	eb cd 40 c0 	pushm	r6-r7,lr
8001a220:	1a 97       	mov	r7,sp
8001a222:	20 2d       	sub	sp,8
8001a224:	4a 26       	lddpc	r6,8001a2ac <init_gps_ubx+0x90>
8001a226:	1e 26       	rsub	r6,pc
8001a228:	ef 4c ff f8 	st.w	r7[-8],r12
	centralData = get_central_data();
8001a22c:	f0 16 00 33 	mcall	r6[204]
8001a230:	18 99       	mov	r9,r12
8001a232:	ec f8 00 00 	ld.w	r8,r6[0]
8001a236:	91 09       	st.w	r8[0x0],r9
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
	
	uint8_t epoch = TIME_OF_WEEK;
8001a238:	30 18       	mov	r8,1
8001a23a:	ef 68 ff ff 	st.b	r7[-1],r8
	idleTimeout = 1200;
8001a23e:	ec f8 04 40 	ld.w	r8,r6[1088]
8001a242:	e0 69 04 b0 	mov	r9,1200
8001a246:	91 09       	st.w	r8[0x0],r9
	
	configure_gps();
8001a248:	f0 16 01 88 	mcall	r6[1568]
	
	engine_nav_setting = _engine_nav_setting;
8001a24c:	ec f8 01 e4 	ld.w	r8,r6[484]
8001a250:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001a254:	91 09       	st.w	r8[0x0],r9
	
	centralData->GPS_data.status = NO_FIX;
8001a256:	ec f8 00 00 	ld.w	r8,r6[0]
8001a25a:	70 09       	ld.w	r9,r8[0x0]
8001a25c:	30 18       	mov	r8,1
8001a25e:	f3 68 07 9c 	st.b	r9[1948],r8
	centralData->GPS_data.num_sats = 0;
8001a262:	ec f8 00 00 	ld.w	r8,r6[0]
8001a266:	70 09       	ld.w	r9,r8[0x0]
8001a268:	30 08       	mov	r8,0
8001a26a:	f3 68 07 90 	st.b	r9[1936],r8
	
	next_fix = false;
8001a26e:	ec f9 01 f0 	ld.w	r9,r6[496]
8001a272:	30 08       	mov	r8,0
8001a274:	b2 88       	st.b	r9[0x0],r8
// 	new_data = false;
// 	valid_read = false;
	have_raw_velocity = false;
8001a276:	ec f9 03 d4 	ld.w	r9,r6[980]
8001a27a:	30 08       	mov	r8,0
8001a27c:	b2 88       	st.b	r9[0x0],r8
	fix = false;
8001a27e:	ec f9 06 6c 	ld.w	r9,r6[1644]
8001a282:	30 08       	mov	r8,0
8001a284:	b2 88       	st.b	r9[0x0],r8
	
	last_fix_time = 0;
8001a286:	ec f8 06 d8 	ld.w	r8,r6[1752]
8001a28a:	30 09       	mov	r9,0
8001a28c:	91 09       	st.w	r8[0x0],r9
	
	new_position = false;
8001a28e:	ec f9 02 5c 	ld.w	r9,r6[604]
8001a292:	30 08       	mov	r8,0
8001a294:	b2 88       	st.b	r9[0x0],r8
	new_speed = false;
8001a296:	ec f9 02 24 	ld.w	r9,r6[548]
8001a29a:	30 08       	mov	r8,0
8001a29c:	b2 88       	st.b	r9[0x0],r8
	
	step = 0;
8001a29e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a2a2:	30 08       	mov	r8,0
8001a2a4:	b2 88       	st.b	r9[0x0],r8
	}
8001a2a6:	2f ed       	sub	sp,-8
8001a2a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001a2ac:	80 01       	ld.sh	r1,r0[0x0]
8001a2ae:	a0 aa       	st.b	r0[0x2],r10
8001a2b0:	6c 61       	ld.w	r1,r6[0x18]
8001a2b2:	72 67       	ld.w	r7,r9[0x18]
8001a2b4:	65 20       	ld.w	r0,r2[0x48]
8001a2b6:	70 61       	ld.w	r1,r8[0x18]
8001a2b8:	79 6c       	ld.w	r12,r12[0x58]
8001a2ba:	6f 61       	ld.w	r1,r7[0x58]
8001a2bc:	64 3a       	ld.w	r10,r2[0xc]
8001a2be:	20 00       	sub	r0,0
8001a2c0:	0a 00       	add	r0,r5
8001a2c2:	00 00       	add	r0,r0
8001a2c4:	57 72       	stdsp	sp[0x1dc],r2
8001a2c6:	6f 6e       	ld.w	lr,r7[0x58]
8001a2c8:	67 20       	ld.w	r0,r3[0x48]
8001a2ca:	50 6f       	stdsp	sp[0x18],pc
8001a2cc:	73 6c       	ld.w	r12,r9[0x58]
8001a2ce:	6c 68       	ld.w	r8,r6[0x18]
8001a2d0:	20 6d       	sub	sp,24
8001a2d2:	65 73       	ld.w	r3,r2[0x5c]
8001a2d4:	73 61       	ld.w	r1,r9[0x58]
8001a2d6:	67 65       	ld.w	r5,r3[0x58]
8001a2d8:	20 30       	sub	r0,3
8001a2da:	78 00       	ld.w	r0,r12[0x0]
8001a2dc:	20 4d       	sub	sp,16
8001a2de:	73 67       	ld.w	r7,r9[0x58]
8001a2e0:	20 69       	sub	r9,6
8001a2e2:	64 3a       	ld.w	r10,r2[0xc]
8001a2e4:	20 30       	sub	r0,3
8001a2e6:	78 00       	ld.w	r0,r12[0x0]
8001a2e8:	20 52       	sub	r2,5
8001a2ea:	65 63       	ld.w	r3,r2[0x58]
8001a2ec:	65 69       	ld.w	r9,r2[0x58]
8001a2ee:	76 65       	ld.w	r5,r11[0x18]
8001a2f0:	64 20       	ld.w	r0,r2[0x8]
8001a2f2:	73 69       	ld.w	r9,r9[0x58]
8001a2f4:	7a 65       	ld.w	r5,sp[0x18]
8001a2f6:	3a 00       	mov	r0,-96
8001a2f8:	20 73       	sub	r3,7
8001a2fa:	68 6f       	ld.w	pc,r4[0x18]
8001a2fc:	75 6c       	ld.w	r12,r10[0x58]
8001a2fe:	64 20       	ld.w	r0,r2[0x8]
8001a300:	62 65       	ld.w	r5,r1[0x18]
8001a302:	3a 00       	mov	r0,-96
8001a304:	57 72       	stdsp	sp[0x1dc],r2
8001a306:	6f 6e       	ld.w	lr,r7[0x58]
8001a308:	67 20       	ld.w	r0,r3[0x48]
8001a30a:	4e 61       	lddpc	r1,8001a4a0 <init_gps_ubx+0x284>
8001a30c:	76 20       	ld.w	r0,r11[0x8]
8001a30e:	53 74       	stdsp	sp[0xdc],r4
8001a310:	61 74       	ld.w	r4,r0[0x5c]
8001a312:	75 73       	ld.w	r3,r10[0x5c]
8001a314:	20 6d       	sub	sp,24
8001a316:	65 73       	ld.w	r3,r2[0x5c]
8001a318:	73 61       	ld.w	r1,r9[0x58]
8001a31a:	67 65       	ld.w	r5,r3[0x58]
8001a31c:	20 30       	sub	r0,3
8001a31e:	78 00       	ld.w	r0,r12[0x0]
8001a320:	57 72       	stdsp	sp[0x1dc],r2
8001a322:	6f 6e       	ld.w	lr,r7[0x58]
8001a324:	67 20       	ld.w	r0,r3[0x48]
8001a326:	53 6f       	stdsp	sp[0xd8],pc
8001a328:	6c 75       	ld.w	r5,r6[0x1c]
8001a32a:	74 69       	ld.w	r9,r10[0x18]
8001a32c:	6f 6e       	ld.w	lr,r7[0x58]
8001a32e:	20 6d       	sub	sp,24
8001a330:	65 73       	ld.w	r3,r2[0x5c]
8001a332:	73 61       	ld.w	r1,r9[0x58]
8001a334:	67 65       	ld.w	r5,r3[0x58]
8001a336:	20 30       	sub	r0,3
8001a338:	78 00       	ld.w	r0,r12[0x0]
8001a33a:	00 00       	add	r0,r0
8001a33c:	57 72       	stdsp	sp[0x1dc],r2
8001a33e:	6f 6e       	ld.w	lr,r7[0x58]
8001a340:	67 20       	ld.w	r0,r3[0x48]
8001a342:	56 65       	stdsp	sp[0x198],r5
8001a344:	6c 6e       	ld.w	lr,r6[0x18]
8001a346:	65 64       	ld.w	r4,r2[0x58]
8001a348:	20 6d       	sub	sp,24
8001a34a:	65 73       	ld.w	r3,r2[0x5c]
8001a34c:	73 61       	ld.w	r1,r9[0x58]
8001a34e:	67 65       	ld.w	r5,r3[0x58]
8001a350:	20 30       	sub	r0,3
8001a352:	78 00       	ld.w	r0,r12[0x0]
8001a354:	57 72       	stdsp	sp[0x1dc],r2
8001a356:	6f 6e       	ld.w	lr,r7[0x58]
8001a358:	67 20       	ld.w	r0,r3[0x48]
8001a35a:	53 56       	stdsp	sp[0xd4],r6
8001a35c:	20 49       	sub	r9,4
8001a35e:	6e 66       	ld.w	r6,r7[0x18]
8001a360:	6f 20       	ld.w	r0,r7[0x48]
8001a362:	6d 65       	ld.w	r5,r6[0x58]
8001a364:	73 73       	ld.w	r3,r9[0x5c]
8001a366:	61 67       	ld.w	r7,r0[0x58]
8001a368:	65 20       	ld.w	r0,r2[0x48]
8001a36a:	30 78       	mov	r8,7
8001a36c:	00 00       	add	r0,r0
8001a36e:	00 00       	add	r0,r0
8001a370:	55 6e       	stdsp	sp[0x158],lr
8001a372:	65 78       	ld.w	r8,r2[0x5c]
8001a374:	70 65       	ld.w	r5,r8[0x18]
8001a376:	63 74       	ld.w	r4,r1[0x5c]
8001a378:	65 64       	ld.w	r4,r2[0x58]
8001a37a:	20 4e       	sub	lr,4
8001a37c:	41 56       	lddsp	r6,sp[0x54]
8001a37e:	20 6d       	sub	sp,24
8001a380:	65 73       	ld.w	r3,r2[0x5c]
8001a382:	73 61       	ld.w	r1,r9[0x58]
8001a384:	67 65       	ld.w	r5,r3[0x58]
8001a386:	2c 20       	sub	r0,-62
8001a388:	43 6c       	lddsp	r12,sp[0xd8]
8001a38a:	61 73       	ld.w	r3,r0[0x5c]
8001a38c:	73 3a       	ld.w	r10,r9[0x4c]
8001a38e:	20 30       	sub	r0,3
8001a390:	78 00       	ld.w	r0,r12[0x0]
8001a392:	00 00       	add	r0,r0
8001a394:	2c 20       	sub	r0,-62
8001a396:	6d 73       	ld.w	r3,r6[0x5c]
8001a398:	67 20       	ld.w	r0,r3[0x48]
8001a39a:	69 64       	ld.w	r4,r4[0x58]
8001a39c:	3a 20       	mov	r0,-94
8001a39e:	30 78       	mov	r8,7
8001a3a0:	00 00       	add	r0,r0
8001a3a2:	00 00       	add	r0,r0
8001a3a4:	20 6f       	sub	pc,6
8001a3a6:	66 20       	ld.w	r0,r3[0x8]
8001a3a8:	73 69       	ld.w	r9,r9[0x58]
8001a3aa:	7a 65       	ld.w	r5,sp[0x18]
8001a3ac:	20 00       	sub	r0,0
8001a3ae:	00 00       	add	r0,r0
8001a3b0:	57 72       	stdsp	sp[0x1dc],r2
8001a3b2:	6f 6e       	ld.w	lr,r7[0x58]
8001a3b4:	67 20       	ld.w	r0,r3[0x48]
8001a3b6:	4e 61       	lddpc	r1,8001a54c <ubx_read+0x32>
8001a3b8:	76 20       	ld.w	r0,r11[0x8]
8001a3ba:	53 65       	stdsp	sp[0xd8],r5
8001a3bc:	74 74       	ld.w	r4,r10[0x1c]
8001a3be:	69 6e       	ld.w	lr,r4[0x58]
8001a3c0:	67 73       	ld.w	r3,r3[0x5c]
8001a3c2:	20 6d       	sub	sp,24
8001a3c4:	65 73       	ld.w	r3,r2[0x5c]
8001a3c6:	73 61       	ld.w	r1,r9[0x58]
8001a3c8:	67 65       	ld.w	r5,r3[0x58]
8001a3ca:	20 30       	sub	r0,3
8001a3cc:	78 00       	ld.w	r0,r12[0x0]
8001a3ce:	00 00       	add	r0,r0
8001a3d0:	57 72       	stdsp	sp[0x1dc],r2
8001a3d2:	6f 6e       	ld.w	lr,r7[0x58]
8001a3d4:	67 20       	ld.w	r0,r3[0x48]
8001a3d6:	43 46       	lddsp	r6,sp[0xd0]
8001a3d8:	47 20       	lddsp	r0,sp[0x1c8]
8001a3da:	52 61       	stdsp	sp[0x98],r1
8001a3dc:	74 65       	ld.w	r5,r10[0x18]
8001a3de:	20 6d       	sub	sp,24
8001a3e0:	65 73       	ld.w	r3,r2[0x5c]
8001a3e2:	73 61       	ld.w	r1,r9[0x58]
8001a3e4:	67 65       	ld.w	r5,r3[0x58]
8001a3e6:	20 30       	sub	r0,3
8001a3e8:	78 00       	ld.w	r0,r12[0x0]
8001a3ea:	00 00       	add	r0,r0
8001a3ec:	57 72       	stdsp	sp[0x1dc],r2
8001a3ee:	6f 6e       	ld.w	lr,r7[0x58]
8001a3f0:	67 20       	ld.w	r0,r3[0x48]
8001a3f2:	43 46       	lddsp	r6,sp[0xd0]
8001a3f4:	47 20       	lddsp	r0,sp[0x1c8]
8001a3f6:	53 65       	stdsp	sp[0xd8],r5
8001a3f8:	74 2f       	ld.w	pc,r10[0x8]
8001a3fa:	67 65       	ld.w	r5,r3[0x58]
8001a3fc:	74 20       	ld.w	r0,r10[0x8]
8001a3fe:	6d 65       	ld.w	r5,r6[0x58]
8001a400:	73 73       	ld.w	r3,r9[0x5c]
8001a402:	61 67       	ld.w	r7,r0[0x58]
8001a404:	65 20       	ld.w	r0,r2[0x48]
8001a406:	30 78       	mov	r8,7
8001a408:	00 00       	add	r0,r0
8001a40a:	00 00       	add	r0,r0
8001a40c:	55 6e       	stdsp	sp[0x158],lr
8001a40e:	65 78       	ld.w	r8,r2[0x5c]
8001a410:	70 65       	ld.w	r5,r8[0x18]
8001a412:	63 74       	ld.w	r4,r1[0x5c]
8001a414:	65 64       	ld.w	r4,r2[0x58]
8001a416:	20 43       	sub	r3,4
8001a418:	46 47       	lddsp	r7,sp[0x190]
8001a41a:	20 6d       	sub	sp,24
8001a41c:	65 73       	ld.w	r3,r2[0x5c]
8001a41e:	73 61       	ld.w	r1,r9[0x58]
8001a420:	67 65       	ld.w	r5,r3[0x58]
8001a422:	2c 20       	sub	r0,-62
8001a424:	43 6c       	lddsp	r12,sp[0xd8]
8001a426:	61 73       	ld.w	r3,r0[0x5c]
8001a428:	73 3a       	ld.w	r10,r9[0x4c]
8001a42a:	20 30       	sub	r0,3
8001a42c:	78 00       	ld.w	r0,r12[0x0]
8001a42e:	00 00       	add	r0,r0
8001a430:	57 72       	stdsp	sp[0x1dc],r2
8001a432:	6f 6e       	ld.w	lr,r7[0x58]
8001a434:	67 20       	ld.w	r0,r3[0x48]
8001a436:	4d 4f       	lddpc	pc,8001a584 <ubx_read+0x6a>
8001a438:	4e 20       	lddpc	r0,8001a5c0 <ubx_read+0xa6>
8001a43a:	52 58       	stdsp	sp[0x94],r8
8001a43c:	52 20       	stdsp	sp[0x88],r0
8001a43e:	6d 65       	ld.w	r5,r6[0x58]
8001a440:	73 73       	ld.w	r3,r9[0x5c]
8001a442:	61 67       	ld.w	r7,r0[0x58]
8001a444:	65 20       	ld.w	r0,r2[0x48]
8001a446:	30 78       	mov	r8,7
8001a448:	00 00       	add	r0,r0
8001a44a:	00 00       	add	r0,r0
8001a44c:	55 6e       	stdsp	sp[0x158],lr
8001a44e:	65 78       	ld.w	r8,r2[0x5c]
8001a450:	70 65       	ld.w	r5,r8[0x18]
8001a452:	63 74       	ld.w	r4,r1[0x5c]
8001a454:	65 64       	ld.w	r4,r2[0x58]
8001a456:	20 54       	sub	r4,5
8001a458:	49 4d       	lddpc	sp,8001a4a8 <init_gps_ubx+0x28c>
8001a45a:	20 6d       	sub	sp,24
8001a45c:	65 73       	ld.w	r3,r2[0x5c]
8001a45e:	73 61       	ld.w	r1,r9[0x58]
8001a460:	67 65       	ld.w	r5,r3[0x58]
8001a462:	2c 20       	sub	r0,-62
8001a464:	43 6c       	lddsp	r12,sp[0xd8]
8001a466:	61 73       	ld.w	r3,r0[0x5c]
8001a468:	73 3a       	ld.w	r10,r9[0x4c]
8001a46a:	20 30       	sub	r0,3
8001a46c:	78 00       	ld.w	r0,r12[0x0]
8001a46e:	00 00       	add	r0,r0
8001a470:	20 73       	sub	r3,7
8001a472:	68 6f       	ld.w	pc,r4[0x18]
8001a474:	75 6c       	ld.w	r12,r10[0x58]
8001a476:	64 20       	ld.w	r0,r2[0x8]
8001a478:	62 65       	ld.w	r5,r1[0x18]
8001a47a:	20 3a       	sub	r10,3
8001a47c:	00 00       	add	r0,r0
8001a47e:	00 00       	add	r0,r0
8001a480:	57 72       	stdsp	sp[0x1dc],r2
8001a482:	6f 6e       	ld.w	lr,r7[0x58]
8001a484:	67 20       	ld.w	r0,r3[0x48]
8001a486:	54 49       	stdsp	sp[0x110],r9
8001a488:	4d 20       	lddpc	r0,8001a5d0 <ubx_read+0xb6>
8001a48a:	54 50       	stdsp	sp[0x114],r0
8001a48c:	20 6d       	sub	sp,24
8001a48e:	65 73       	ld.w	r3,r2[0x5c]
8001a490:	73 61       	ld.w	r1,r9[0x58]
8001a492:	67 65       	ld.w	r5,r3[0x58]
8001a494:	20 30       	sub	r0,3
8001a496:	78 00       	ld.w	r0,r12[0x0]
8001a498:	57 72       	stdsp	sp[0x1dc],r2
8001a49a:	6f 6e       	ld.w	lr,r7[0x58]
8001a49c:	67 20       	ld.w	r0,r3[0x48]
8001a49e:	54 49       	stdsp	sp[0x110],r9
8001a4a0:	4d 20       	lddpc	r0,8001a5e8 <ubx_read+0xce>
8001a4a2:	56 52       	stdsp	sp[0x194],r2
8001a4a4:	46 59       	lddsp	r9,sp[0x194]
8001a4a6:	20 6d       	sub	sp,24
8001a4a8:	65 73       	ld.w	r3,r2[0x5c]
8001a4aa:	73 61       	ld.w	r1,r9[0x58]
8001a4ac:	67 65       	ld.w	r5,r3[0x58]
8001a4ae:	20 30       	sub	r0,3
8001a4b0:	78 00       	ld.w	r0,r12[0x0]
8001a4b2:	00 00       	add	r0,r0
8001a4b4:	55 6e       	stdsp	sp[0x158],lr
8001a4b6:	65 78       	ld.w	r8,r2[0x5c]
8001a4b8:	70 65       	ld.w	r5,r8[0x18]
8001a4ba:	63 74       	ld.w	r4,r1[0x5c]
8001a4bc:	65 64       	ld.w	r4,r2[0x58]
8001a4be:	20 6d       	sub	sp,24
8001a4c0:	65 73       	ld.w	r3,r2[0x5c]
8001a4c2:	73 61       	ld.w	r1,r9[0x58]
8001a4c4:	67 65       	ld.w	r5,r3[0x58]
8001a4c6:	2c 20       	sub	r0,-62
8001a4c8:	43 6c       	lddsp	r12,sp[0xd8]
8001a4ca:	61 73       	ld.w	r3,r0[0x5c]
8001a4cc:	73 3a       	ld.w	r10,r9[0x4c]
8001a4ce:	20 30       	sub	r0,3
8001a4d0:	78 00       	ld.w	r0,r12[0x0]
8001a4d2:	00 00       	add	r0,r0
8001a4d4:	62 61       	ld.w	r1,r1[0x18]
8001a4d6:	64 20       	ld.w	r0,r2[0x8]
8001a4d8:	63 6b       	ld.w	r11,r1[0x58]
8001a4da:	73 75       	ld.w	r5,r9[0x5c]
8001a4dc:	6d 5f       	ld.w	pc,r6[0x54]
8001a4de:	61 20       	ld.w	r0,r0[0x48]
8001a4e0:	00 00       	add	r0,r0
8001a4e2:	00 00       	add	r0,r0
8001a4e4:	20 73       	sub	r3,7
8001a4e6:	68 6f       	ld.w	pc,r4[0x18]
8001a4e8:	75 6c       	ld.w	r12,r10[0x58]
8001a4ea:	64 20       	ld.w	r0,r2[0x8]
8001a4ec:	62 65       	ld.w	r5,r1[0x18]
8001a4ee:	20 00       	sub	r0,0
8001a4f0:	20 63       	sub	r3,6
8001a4f2:	6c 61       	ld.w	r1,r6[0x18]
8001a4f4:	73 73       	ld.w	r3,r9[0x5c]
8001a4f6:	20 3a       	sub	r10,3
8001a4f8:	20 30       	sub	r0,3
8001a4fa:	78 00       	ld.w	r0,r12[0x0]
8001a4fc:	20 6d       	sub	sp,24
8001a4fe:	73 67       	ld.w	r7,r9[0x58]
8001a500:	5f 69       	srmi	r9
8001a502:	64 20       	ld.w	r0,r2[0x8]
8001a504:	3a 20       	mov	r0,-94
8001a506:	30 78       	mov	r8,7
8001a508:	00 00       	add	r0,r0
8001a50a:	00 00       	add	r0,r0
8001a50c:	62 61       	ld.w	r1,r1[0x18]
8001a50e:	64 20       	ld.w	r0,r2[0x8]
8001a510:	63 6b       	ld.w	r11,r1[0x58]
8001a512:	73 75       	ld.w	r5,r9[0x5c]
8001a514:	6d 5f       	ld.w	pc,r6[0x54]
8001a516:	62 20       	ld.w	r0,r1[0x8]
	...

8001a51a <ubx_read>:
re-processing it from the top, this is unavoidable. The parser
attempts to avoid this when possible.
************************************************************************************
*/
bool ubx_read(void)
{
8001a51a:	eb cd 40 c0 	pushm	r6-r7,lr
8001a51e:	1a 97       	mov	r7,sp
8001a520:	20 2d       	sub	sp,8
8001a522:	fe f6 0c fa 	ld.w	r6,pc[3322]
8001a526:	1e 26       	rsub	r6,pc
	uint8_t data;
	bool msg_ok = false;
8001a528:	30 08       	mov	r8,0
8001a52a:	ef 68 ff fb 	st.b	r7[-5],r8
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001a52e:	e0 8f 06 64 	bral	8001b1f6 <ubx_read+0xcdc>
	{
		data = buffer_get(&(centralData->gps_buffer));
8001a532:	ec f8 00 00 	ld.w	r8,r6[0]
8001a536:	70 08       	ld.w	r8,r8[0x0]
8001a538:	f0 c8 f9 e4 	sub	r8,r8,-1564
8001a53c:	10 9c       	mov	r12,r8
8001a53e:	f0 16 00 45 	mcall	r6[276]
8001a542:	18 98       	mov	r8,r12
8001a544:	ef 68 ff fa 	st.b	r7[-6],r8
		
// 		dbg_print(" 0x");
//  	dbg_print_num(data,16);
// 		dbg_print("\n");
		
		switch (step)
8001a548:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a54c:	11 88       	ld.ub	r8,r8[0x0]
8001a54e:	58 88       	cp.w	r8,8
8001a550:	e0 8b 06 53 	brhi	8001b1f6 <ubx_read+0xcdc>
8001a554:	fe c9 ff f8 	sub	r9,pc,-8
8001a558:	f2 08 00 2f 	add	pc,r9,r8<<0x2
8001a55c:	e0 8f 00 26 	bral	8001a5a8 <ubx_read+0x8e>
8001a560:	e0 8f 00 10 	bral	8001a580 <ubx_read+0x66>
8001a564:	e0 8f 00 38 	bral	8001a5d4 <ubx_read+0xba>
8001a568:	e0 8f 00 50 	bral	8001a608 <ubx_read+0xee>
8001a56c:	e0 8f 00 74 	bral	8001a654 <ubx_read+0x13a>
8001a570:	e0 8f 00 98 	bral	8001a6a0 <ubx_read+0x186>
8001a574:	e0 8f 05 68 	bral	8001b044 <ubx_read+0xb2a>
8001a578:	e0 8f 05 ac 	bral	8001b0d0 <ubx_read+0xbb6>
8001a57c:	e0 8f 05 f0 	bral	8001b15c <ubx_read+0xc42>
			// chances of recovering from a mismatch and makes it less
			// likely that we will be fooled by the preamble appearing
			// as data in some other message.
			//
		case 1:
			if (data == UBX_PREAMBLE2)
8001a580:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a584:	36 28       	mov	r8,98
8001a586:	f0 09 18 00 	cp.b	r9,r8
8001a58a:	c0 b1       	brne	8001a5a0 <ubx_read+0x86>
			{
				step++;
8001a58c:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a590:	11 88       	ld.ub	r8,r8[0x0]
8001a592:	2f f8       	sub	r8,-1
8001a594:	5c 58       	castu.b	r8
8001a596:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a59a:	b2 88       	st.b	r9[0x0],r8
				break;
8001a59c:	e0 8f 06 2d 	bral	8001b1f6 <ubx_read+0xcdc>
			}
			step = 0;
8001a5a0:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5a4:	30 08       	mov	r8,0
8001a5a6:	b2 88       	st.b	r9[0x0],r8
		case 0:
			if (data == UBX_PREAMBLE1)
8001a5a8:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a5ac:	3b 58       	mov	r8,-75
8001a5ae:	f0 09 18 00 	cp.b	r9,r8
8001a5b2:	c0 b1       	brne	8001a5c8 <ubx_read+0xae>
			{
				step++;
8001a5b4:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5b8:	11 88       	ld.ub	r8,r8[0x0]
8001a5ba:	2f f8       	sub	r8,-1
8001a5bc:	5c 58       	castu.b	r8
8001a5be:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5c2:	b2 88       	st.b	r9[0x0],r8
				break;
8001a5c4:	e0 8f 06 19 	bral	8001b1f6 <ubx_read+0xcdc>
			}
			step = 0;
8001a5c8:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5cc:	30 08       	mov	r8,0
8001a5ce:	b2 88       	st.b	r9[0x0],r8
			break;
8001a5d0:	e0 8f 06 13 	bral	8001b1f6 <ubx_read+0xcdc>
		//
		// We always collect the length so that we can avoid being
		// fooled by preamble bytes in messages.
		//
		case 2:
			step++;
8001a5d4:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a5d8:	11 88       	ld.ub	r8,r8[0x0]
8001a5da:	2f f8       	sub	r8,-1
8001a5dc:	5c 58       	castu.b	r8
8001a5de:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a5e2:	b2 88       	st.b	r9[0x0],r8
			ubxclass = data;
8001a5e4:	ec f9 00 60 	ld.w	r9,r6[96]
8001a5e8:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a5ec:	b2 88       	st.b	r9[0x0],r8
			cksum_a = data;
8001a5ee:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a5f2:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a5f6:	b2 88       	st.b	r9[0x0],r8
			cksum_b = cksum_a; // reset the checksum accumulators
8001a5f8:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a5fc:	11 88       	ld.ub	r8,r8[0x0]
8001a5fe:	ec f9 01 10 	ld.w	r9,r6[272]
8001a602:	b2 88       	st.b	r9[0x0],r8
			break;
8001a604:	e0 8f 05 f9 	bral	8001b1f6 <ubx_read+0xcdc>
		case 3:
			step++;
8001a608:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a60c:	11 88       	ld.ub	r8,r8[0x0]
8001a60e:	2f f8       	sub	r8,-1
8001a610:	5c 58       	castu.b	r8
8001a612:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a616:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a618:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a61c:	11 88       	ld.ub	r8,r8[0x0]
8001a61e:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a622:	f2 08 00 08 	add	r8,r9,r8
8001a626:	5c 58       	castu.b	r8
8001a628:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a62c:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a62e:	ec f8 01 10 	ld.w	r8,r6[272]
8001a632:	11 89       	ld.ub	r9,r8[0x0]
8001a634:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a638:	11 88       	ld.ub	r8,r8[0x0]
8001a63a:	f2 08 00 08 	add	r8,r9,r8
8001a63e:	5c 58       	castu.b	r8
8001a640:	ec f9 01 10 	ld.w	r9,r6[272]
8001a644:	b2 88       	st.b	r9[0x0],r8
			msg_id = data;
8001a646:	ec f9 00 5c 	ld.w	r9,r6[92]
8001a64a:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a64e:	b2 88       	st.b	r9[0x0],r8
			break;
8001a650:	e0 8f 05 d3 	bral	8001b1f6 <ubx_read+0xcdc>
		case 4:
			step++;
8001a654:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a658:	11 88       	ld.ub	r8,r8[0x0]
8001a65a:	2f f8       	sub	r8,-1
8001a65c:	5c 58       	castu.b	r8
8001a65e:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a662:	b2 88       	st.b	r9[0x0],r8
			cksum_a += data;
8001a664:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a668:	11 88       	ld.ub	r8,r8[0x0]
8001a66a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a66e:	f2 08 00 08 	add	r8,r9,r8
8001a672:	5c 58       	castu.b	r8
8001a674:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a678:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a67a:	ec f8 01 10 	ld.w	r8,r6[272]
8001a67e:	11 89       	ld.ub	r9,r8[0x0]
8001a680:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a684:	11 88       	ld.ub	r8,r8[0x0]
8001a686:	f2 08 00 08 	add	r8,r9,r8
8001a68a:	5c 58       	castu.b	r8
8001a68c:	ec f9 01 10 	ld.w	r9,r6[272]
8001a690:	b2 88       	st.b	r9[0x0],r8
			payload_length = data;
8001a692:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a696:	ec f9 00 58 	ld.w	r9,r6[88]
8001a69a:	b2 08       	st.h	r9[0x0],r8
			break;
8001a69c:	e0 8f 05 ad 	bral	8001b1f6 <ubx_read+0xcdc>
		case 5:
			step++;
8001a6a0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001a6a4:	11 88       	ld.ub	r8,r8[0x0]
8001a6a6:	2f f8       	sub	r8,-1
8001a6a8:	5c 58       	castu.b	r8
8001a6aa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a6ae:	b2 88       	st.b	r9[0x0],r8
			payload_length |= data<<8;
8001a6b0:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001a6b4:	a9 68       	lsl	r8,0x8
8001a6b6:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001a6ba:	ec f8 00 58 	ld.w	r8,r6[88]
8001a6be:	90 08       	ld.sh	r8,r8[0x0]
8001a6c0:	5c 88       	casts.h	r8
8001a6c2:	f3 e8 10 08 	or	r8,r9,r8
8001a6c6:	5c 88       	casts.h	r8
8001a6c8:	ec f9 00 58 	ld.w	r9,r6[88]
8001a6cc:	b2 08       	st.h	r9[0x0],r8
			cksum_a += data;
8001a6ce:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a6d2:	11 88       	ld.ub	r8,r8[0x0]
8001a6d4:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001a6d8:	f2 08 00 08 	add	r8,r9,r8
8001a6dc:	5c 58       	castu.b	r8
8001a6de:	ec f9 00 b0 	ld.w	r9,r6[176]
8001a6e2:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001a6e4:	ec f8 01 10 	ld.w	r8,r6[272]
8001a6e8:	11 89       	ld.ub	r9,r8[0x0]
8001a6ea:	ec f8 00 b0 	ld.w	r8,r6[176]
8001a6ee:	11 88       	ld.ub	r8,r8[0x0]
8001a6f0:	f2 08 00 08 	add	r8,r9,r8
8001a6f4:	5c 58       	castu.b	r8
8001a6f6:	ec f9 01 10 	ld.w	r9,r6[272]
8001a6fa:	b2 88       	st.b	r9[0x0],r8
// 			dbg_print(" large byte shifted");
// 			dbg_print_num(data<<8,10);
// 			dbg_print("\n");
			
			//payload_length |= (uint16_t)(data<<8);
			if (payload_length > 512)
8001a6fc:	ec f8 00 58 	ld.w	r8,r6[88]
8001a700:	90 09       	ld.sh	r9,r8[0x0]
8001a702:	e0 68 02 00 	mov	r8,512
8001a706:	f0 09 19 00 	cp.h	r9,r8
8001a70a:	e0 88 00 1b 	brls	8001a740 <ubx_read+0x226>
			{
				// we assume very large payloads are line noise
				dbg_print("large payload: ");
8001a70e:	fe cc 04 5e 	sub	r12,pc,1118
8001a712:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001a716:	ec f8 00 58 	ld.w	r8,r6[88]
8001a71a:	90 08       	ld.sh	r8,r8[0x0]
8001a71c:	5c 78       	castu.h	r8
8001a71e:	30 ab       	mov	r11,10
8001a720:	10 9c       	mov	r12,r8
8001a722:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001a726:	fe cc 04 66 	sub	r12,pc,1126
8001a72a:	f0 16 00 01 	mcall	r6[4]
				payload_length = 0;
8001a72e:	ec f9 00 58 	ld.w	r9,r6[88]
8001a732:	30 08       	mov	r8,0
8001a734:	b2 08       	st.h	r9[0x0],r8
				step = 0;
8001a736:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a73a:	30 08       	mov	r8,0
8001a73c:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001a73e:	c0 5b       	rjmp	8001a548 <ubx_read+0x2e>
			}
			payload_counter = 0; // prepare to receive payload
8001a740:	ec f9 01 d4 	ld.w	r9,r6[468]
8001a744:	30 08       	mov	r8,0
8001a746:	b2 08       	st.h	r9[0x0],r8
			
			if(ubxclass == UBX_CLASS_NAV)
8001a748:	ec f8 00 60 	ld.w	r8,r6[96]
8001a74c:	11 89       	ld.ub	r9,r8[0x0]
8001a74e:	30 18       	mov	r8,1
8001a750:	f0 09 18 00 	cp.b	r9,r8
8001a754:	e0 81 01 c0 	brne	8001aad4 <ubx_read+0x5ba>
			{
				switch(msg_id)
8001a758:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a75c:	11 88       	ld.ub	r8,r8[0x0]
8001a75e:	58 68       	cp.w	r8,6
8001a760:	e0 80 00 ab 	breq	8001a8b6 <ubx_read+0x39c>
8001a764:	e0 89 00 08 	brgt	8001a774 <ubx_read+0x25a>
8001a768:	58 28       	cp.w	r8,2
8001a76a:	c0 e0       	breq	8001a786 <ubx_read+0x26c>
8001a76c:	58 38       	cp.w	r8,3
8001a76e:	c5 80       	breq	8001a81e <ubx_read+0x304>
8001a770:	e0 8f 01 84 	bral	8001aa78 <ubx_read+0x55e>
8001a774:	59 28       	cp.w	r8,18
8001a776:	e0 80 00 eb 	breq	8001a94c <ubx_read+0x432>
8001a77a:	e0 48 00 30 	cp.w	r8,48
8001a77e:	e0 80 01 32 	breq	8001a9e2 <ubx_read+0x4c8>
8001a782:	e0 8f 01 7b 	bral	8001aa78 <ubx_read+0x55e>
				{
				case MSG_NAV_POSLLH:
					if(payload_length == UBX_SIZE_NAV_POSLLH)
8001a786:	ec f8 00 58 	ld.w	r8,r6[88]
8001a78a:	90 09       	ld.sh	r9,r8[0x0]
8001a78c:	31 c8       	mov	r8,28
8001a78e:	f0 09 19 00 	cp.h	r9,r8
8001a792:	c1 21       	brne	8001a7b6 <ubx_read+0x29c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
8001a794:	ec f9 07 b4 	ld.w	r9,r6[1972]
8001a798:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a79c:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
8001a79e:	ec f9 03 94 	ld.w	r9,r6[916]
8001a7a2:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a7a6:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
8001a7a8:	ec f8 01 00 	ld.w	r8,r6[256]
8001a7ac:	ec f9 04 9c 	ld.w	r9,r6[1180]
8001a7b0:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a7b2:	e0 8f 01 8f 	bral	8001aad0 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentPosllhMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastPosllhMessage;
						ubx_validMessage = &ubx_numberOfValidPosllhMessage;
					}else{
						dbg_print("Wrong Posllh message 0x");
8001a7b6:	fe cc 04 f2 	sub	r12,pc,1266
8001a7ba:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a7be:	ec f8 00 60 	ld.w	r8,r6[96]
8001a7c2:	11 88       	ld.ub	r8,r8[0x0]
8001a7c4:	31 0b       	mov	r11,16
8001a7c6:	10 9c       	mov	r12,r8
8001a7c8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a7cc:	fe cc 04 f0 	sub	r12,pc,1264
8001a7d0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a7d4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a7d8:	11 88       	ld.ub	r8,r8[0x0]
8001a7da:	31 0b       	mov	r11,16
8001a7dc:	10 9c       	mov	r12,r8
8001a7de:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a7e2:	fe cc 04 fa 	sub	r12,pc,1274
8001a7e6:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a7ea:	ec f8 00 58 	ld.w	r8,r6[88]
8001a7ee:	90 08       	ld.sh	r8,r8[0x0]
8001a7f0:	5c 78       	castu.h	r8
8001a7f2:	30 ab       	mov	r11,10
8001a7f4:	10 9c       	mov	r12,r8
8001a7f6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a7fa:	fe cc 05 02 	sub	r12,pc,1282
8001a7fe:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_POSLLH,10);
8001a802:	30 ab       	mov	r11,10
8001a804:	31 cc       	mov	r12,28
8001a806:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a80a:	fe cc 05 4a 	sub	r12,pc,1354
8001a80e:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a812:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a816:	30 08       	mov	r8,0
8001a818:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a81a:	fe 9f fe 97 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_STATUS:
					if(payload_length == UBX_SIZE_NAV_STATUS)
8001a81e:	ec f8 00 58 	ld.w	r8,r6[88]
8001a822:	90 09       	ld.sh	r9,r8[0x0]
8001a824:	31 08       	mov	r8,16
8001a826:	f0 09 19 00 	cp.h	r9,r8
8001a82a:	c1 21       	brne	8001a84e <ubx_read+0x334>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
8001a82c:	ec f9 06 4c 	ld.w	r9,r6[1612]
8001a830:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a834:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
8001a836:	ec f9 03 98 	ld.w	r9,r6[920]
8001a83a:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a83e:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
8001a840:	ec f8 01 00 	ld.w	r8,r6[256]
8001a844:	ec f9 04 5c 	ld.w	r9,r6[1116]
8001a848:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a84a:	e0 8f 01 43 	bral	8001aad0 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentStatusMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastStatusMessage;
						ubx_validMessage = &ubx_numberOfValidStatusMessage;
					}else{
						dbg_print("Wrong Nav Status message 0x");
8001a84e:	fe cc 05 4a 	sub	r12,pc,1354
8001a852:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a856:	ec f8 00 60 	ld.w	r8,r6[96]
8001a85a:	11 88       	ld.ub	r8,r8[0x0]
8001a85c:	31 0b       	mov	r11,16
8001a85e:	10 9c       	mov	r12,r8
8001a860:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a864:	fe cc 05 88 	sub	r12,pc,1416
8001a868:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a86c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a870:	11 88       	ld.ub	r8,r8[0x0]
8001a872:	31 0b       	mov	r11,16
8001a874:	10 9c       	mov	r12,r8
8001a876:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a87a:	fe cc 05 92 	sub	r12,pc,1426
8001a87e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a882:	ec f8 00 58 	ld.w	r8,r6[88]
8001a886:	90 08       	ld.sh	r8,r8[0x0]
8001a888:	5c 78       	castu.h	r8
8001a88a:	30 ab       	mov	r11,10
8001a88c:	10 9c       	mov	r12,r8
8001a88e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a892:	fe cc 05 9a 	sub	r12,pc,1434
8001a896:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_STATUS,10);
8001a89a:	30 ab       	mov	r11,10
8001a89c:	31 0c       	mov	r12,16
8001a89e:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a8a2:	fe cc 05 e2 	sub	r12,pc,1506
8001a8a6:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a8aa:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a8ae:	30 08       	mov	r8,0
8001a8b0:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a8b2:	fe 9f fe 4b 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SOL:
					if(payload_length == UBX_SIZE_NAV_SOL)
8001a8b6:	ec f8 00 58 	ld.w	r8,r6[88]
8001a8ba:	90 09       	ld.sh	r9,r8[0x0]
8001a8bc:	33 48       	mov	r8,52
8001a8be:	f0 09 19 00 	cp.h	r9,r8
8001a8c2:	c1 11       	brne	8001a8e4 <ubx_read+0x3ca>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
8001a8c4:	ec f9 07 f8 	ld.w	r9,r6[2040]
8001a8c8:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a8cc:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
8001a8ce:	ec f9 04 00 	ld.w	r9,r6[1024]
8001a8d2:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a8d6:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
8001a8d8:	ec f8 01 00 	ld.w	r8,r6[256]
8001a8dc:	ec f9 04 b4 	ld.w	r9,r6[1204]
8001a8e0:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a8e2:	cf 78       	rjmp	8001aad0 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSolutionMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSolutionMessage;
						ubx_validMessage = &ubx_numberOfValidSolutionMessage;;
					}else{
						dbg_print("Wrong Solution message 0x");
8001a8e4:	fe cc 05 c4 	sub	r12,pc,1476
8001a8e8:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a8ec:	ec f8 00 60 	ld.w	r8,r6[96]
8001a8f0:	11 88       	ld.ub	r8,r8[0x0]
8001a8f2:	31 0b       	mov	r11,16
8001a8f4:	10 9c       	mov	r12,r8
8001a8f6:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a8fa:	fe cc 06 1e 	sub	r12,pc,1566
8001a8fe:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a902:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a906:	11 88       	ld.ub	r8,r8[0x0]
8001a908:	31 0b       	mov	r11,16
8001a90a:	10 9c       	mov	r12,r8
8001a90c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a910:	fe cc 06 28 	sub	r12,pc,1576
8001a914:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a918:	ec f8 00 58 	ld.w	r8,r6[88]
8001a91c:	90 08       	ld.sh	r8,r8[0x0]
8001a91e:	5c 78       	castu.h	r8
8001a920:	30 ab       	mov	r11,10
8001a922:	10 9c       	mov	r12,r8
8001a924:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a928:	fe cc 06 30 	sub	r12,pc,1584
8001a92c:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SOL,10);
8001a930:	30 ab       	mov	r11,10
8001a932:	33 4c       	mov	r12,52
8001a934:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a938:	fe cc 06 78 	sub	r12,pc,1656
8001a93c:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a940:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a944:	30 08       	mov	r8,0
8001a946:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a948:	fe 9f fe 00 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_VELNED:
					if(payload_length == UBX_SIZE_NAV_VELNED)
8001a94c:	ec f8 00 58 	ld.w	r8,r6[88]
8001a950:	90 09       	ld.sh	r9,r8[0x0]
8001a952:	32 48       	mov	r8,36
8001a954:	f0 09 19 00 	cp.h	r9,r8
8001a958:	c1 11       	brne	8001a97a <ubx_read+0x460>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
8001a95a:	ec f9 05 dc 	ld.w	r9,r6[1500]
8001a95e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a962:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
8001a964:	ec f9 04 b0 	ld.w	r9,r6[1200]
8001a968:	ec f8 00 e8 	ld.w	r8,r6[232]
8001a96c:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
8001a96e:	ec f8 01 00 	ld.w	r8,r6[256]
8001a972:	ec f9 04 c0 	ld.w	r9,r6[1216]
8001a976:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001a978:	ca c8       	rjmp	8001aad0 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentVelnedMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastVelnedMessage;
						ubx_validMessage = &ubx_numberOfValidVelnedMessage;
					}else{
						dbg_print("Wrong Velned message 0x");
8001a97a:	fe cc 06 3e 	sub	r12,pc,1598
8001a97e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001a982:	ec f8 00 60 	ld.w	r8,r6[96]
8001a986:	11 88       	ld.ub	r8,r8[0x0]
8001a988:	31 0b       	mov	r11,16
8001a98a:	10 9c       	mov	r12,r8
8001a98c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001a990:	fe cc 06 b4 	sub	r12,pc,1716
8001a994:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001a998:	ec f8 00 5c 	ld.w	r8,r6[92]
8001a99c:	11 88       	ld.ub	r8,r8[0x0]
8001a99e:	31 0b       	mov	r11,16
8001a9a0:	10 9c       	mov	r12,r8
8001a9a2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001a9a6:	fe cc 06 be 	sub	r12,pc,1726
8001a9aa:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001a9ae:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9b2:	90 08       	ld.sh	r8,r8[0x0]
8001a9b4:	5c 78       	castu.h	r8
8001a9b6:	30 ab       	mov	r11,10
8001a9b8:	10 9c       	mov	r12,r8
8001a9ba:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001a9be:	fe cc 06 c6 	sub	r12,pc,1734
8001a9c2:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_VELNED,10);
8001a9c6:	30 ab       	mov	r11,10
8001a9c8:	32 4c       	mov	r12,36
8001a9ca:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001a9ce:	fe cc 07 0e 	sub	r12,pc,1806
8001a9d2:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001a9d6:	ec f9 00 4c 	ld.w	r9,r6[76]
8001a9da:	30 08       	mov	r8,0
8001a9dc:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001a9de:	fe 9f fd b5 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_NAV_SVINFO:
					if(payload_length == UBX_SIZE_NAV_SVINFO)
8001a9e2:	ec f8 00 58 	ld.w	r8,r6[88]
8001a9e6:	90 09       	ld.sh	r9,r8[0x0]
8001a9e8:	31 e8       	mov	r8,30
8001a9ea:	f0 09 19 00 	cp.h	r9,r8
8001a9ee:	c1 11       	brne	8001aa10 <ubx_read+0x4f6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
8001a9f0:	ec f9 05 00 	ld.w	r9,r6[1280]
8001a9f4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001a9f8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
8001a9fa:	ec f9 04 94 	ld.w	r9,r6[1172]
8001a9fe:	ec f8 00 e8 	ld.w	r8,r6[232]
8001aa02:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
8001aa04:	ec f8 01 00 	ld.w	r8,r6[256]
8001aa08:	ec f9 03 c8 	ld.w	r9,r6[968]
8001aa0c:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001aa0e:	c6 18       	rjmp	8001aad0 <ubx_read+0x5b6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentSVInfoMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastSVInfoMessage;
						ubx_validMessage = &ubx_numberOfValidSVInfoMessage;
					}else{
						dbg_print("Wrong SV Info message 0x");
8001aa10:	fe cc 06 bc 	sub	r12,pc,1724
8001aa14:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001aa18:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa1c:	11 88       	ld.ub	r8,r8[0x0]
8001aa1e:	31 0b       	mov	r11,16
8001aa20:	10 9c       	mov	r12,r8
8001aa22:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001aa26:	fe cc 07 4a 	sub	r12,pc,1866
8001aa2a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aa2e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aa32:	11 88       	ld.ub	r8,r8[0x0]
8001aa34:	31 0b       	mov	r11,16
8001aa36:	10 9c       	mov	r12,r8
8001aa38:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aa3c:	fe cc 07 54 	sub	r12,pc,1876
8001aa40:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aa44:	ec f8 00 58 	ld.w	r8,r6[88]
8001aa48:	90 08       	ld.sh	r8,r8[0x0]
8001aa4a:	5c 78       	castu.h	r8
8001aa4c:	30 ab       	mov	r11,10
8001aa4e:	10 9c       	mov	r12,r8
8001aa50:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aa54:	fe cc 07 5c 	sub	r12,pc,1884
8001aa58:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SVINFO,10);
8001aa5c:	30 ab       	mov	r11,10
8001aa5e:	31 ec       	mov	r12,30
8001aa60:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aa64:	fe cc 07 a4 	sub	r12,pc,1956
8001aa68:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aa6c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa70:	30 08       	mov	r8,0
8001aa72:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aa74:	fe 9f fd 6a 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001aa78:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aa7c:	30 08       	mov	r8,0
8001aa7e:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected NAV message, Class: 0x");
8001aa80:	fe cc 07 10 	sub	r12,pc,1808
8001aa84:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001aa88:	ec f8 00 60 	ld.w	r8,r6[96]
8001aa8c:	11 88       	ld.ub	r8,r8[0x0]
8001aa8e:	31 0b       	mov	r11,16
8001aa90:	10 9c       	mov	r12,r8
8001aa92:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001aa96:	fe cc 07 02 	sub	r12,pc,1794
8001aa9a:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001aa9e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aaa2:	11 88       	ld.ub	r8,r8[0x0]
8001aaa4:	31 0b       	mov	r11,16
8001aaa6:	10 9c       	mov	r12,r8
8001aaa8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001aaac:	fe cc 07 08 	sub	r12,pc,1800
8001aab0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001aab4:	ec f8 00 58 	ld.w	r8,r6[88]
8001aab8:	90 08       	ld.sh	r8,r8[0x0]
8001aaba:	5c 78       	castu.h	r8
8001aabc:	30 ab       	mov	r11,10
8001aabe:	10 9c       	mov	r12,r8
8001aac0:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001aac4:	fe cc 08 04 	sub	r12,pc,2052
8001aac8:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001aacc:	fe 9f fd 3e 	bral	8001a548 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001aad0:	e0 8f 03 93 	bral	8001b1f6 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}	
			}else if(ubxclass == UBX_CLASS_CFG)
8001aad4:	ec f8 00 60 	ld.w	r8,r6[96]
8001aad8:	11 89       	ld.ub	r9,r8[0x0]
8001aada:	30 68       	mov	r8,6
8001aadc:	f0 09 18 00 	cp.b	r9,r8
8001aae0:	e0 81 01 1d 	brne	8001ad1a <ubx_read+0x800>
// 				dbg_print_num(msg_id,16);
// 				dbg_print("payload_length :");
// 				dbg_print_num(payload_length,10);
// 				dbg_print("\n");
				
				switch(msg_id)
8001aae4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aae8:	11 88       	ld.ub	r8,r8[0x0]
8001aaea:	58 88       	cp.w	r8,8
8001aaec:	c5 30       	breq	8001ab92 <ubx_read+0x678>
8001aaee:	e0 48 00 24 	cp.w	r8,36
8001aaf2:	c0 50       	breq	8001aafc <ubx_read+0x5e2>
8001aaf4:	58 18       	cp.w	r8,1
8001aaf6:	e0 80 00 99 	breq	8001ac28 <ubx_read+0x70e>
8001aafa:	ce 28       	rjmp	8001acbe <ubx_read+0x7a4>
				{			
				case MSG_CFG_NAV_SETTINGS:
					if(payload_length == UBX_SIZE_NAV_SETTINGS)
8001aafc:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab00:	90 09       	ld.sh	r9,r8[0x0]
8001ab02:	32 48       	mov	r8,36
8001ab04:	f0 09 19 00 	cp.h	r9,r8
8001ab08:	c1 11       	brne	8001ab2a <ubx_read+0x610>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
8001ab0a:	ec f9 05 ac 	ld.w	r9,r6[1452]
8001ab0e:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ab12:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
8001ab14:	ec f9 04 a8 	ld.w	r9,r6[1192]
8001ab18:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ab1c:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
8001ab1e:	ec f8 01 00 	ld.w	r8,r6[256]
8001ab22:	ec f9 04 78 	ld.w	r9,r6[1144]
8001ab26:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;		
8001ab28:	cf 78       	rjmp	8001ad16 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentNavSettingsMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastNavSettingsMessage;
						ubx_validMessage = &ubx_numberOfValidNavSettingsMessage;
					}else{
						dbg_print("Wrong Nav Settings message 0x");
8001ab2a:	fe cc 07 7a 	sub	r12,pc,1914
8001ab2e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ab32:	ec f8 00 60 	ld.w	r8,r6[96]
8001ab36:	11 88       	ld.ub	r8,r8[0x0]
8001ab38:	31 0b       	mov	r11,16
8001ab3a:	10 9c       	mov	r12,r8
8001ab3c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ab40:	fe cc 08 64 	sub	r12,pc,2148
8001ab44:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ab48:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ab4c:	11 88       	ld.ub	r8,r8[0x0]
8001ab4e:	31 0b       	mov	r11,16
8001ab50:	10 9c       	mov	r12,r8
8001ab52:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ab56:	fe cc 08 6e 	sub	r12,pc,2158
8001ab5a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ab5e:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab62:	90 08       	ld.sh	r8,r8[0x0]
8001ab64:	5c 78       	castu.h	r8
8001ab66:	30 ab       	mov	r11,10
8001ab68:	10 9c       	mov	r12,r8
8001ab6a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ab6e:	fe cc 08 76 	sub	r12,pc,2166
8001ab72:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_NAV_SETTINGS,10);
8001ab76:	30 ab       	mov	r11,10
8001ab78:	32 4c       	mov	r12,36
8001ab7a:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ab7e:	fe cc 08 be 	sub	r12,pc,2238
8001ab82:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ab86:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ab8a:	30 08       	mov	r8,0
8001ab8c:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ab8e:	fe 9f fc dd 	bral	8001a548 <ubx_read+0x2e>
					}
					break;		
				case MSG_CFG_RATE:
					if(payload_length == UBX_SIZE_CFG_RATE)
8001ab92:	ec f8 00 58 	ld.w	r8,r6[88]
8001ab96:	90 09       	ld.sh	r9,r8[0x0]
8001ab98:	30 68       	mov	r8,6
8001ab9a:	f0 09 19 00 	cp.h	r9,r8
8001ab9e:	c1 11       	brne	8001abc0 <ubx_read+0x6a6>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
8001aba0:	ec f9 06 48 	ld.w	r9,r6[1608]
8001aba4:	ec f8 00 dc 	ld.w	r8,r6[220]
8001aba8:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
8001abaa:	ec f9 08 8c 	ld.w	r9,r6[2188]
8001abae:	ec f8 00 e8 	ld.w	r8,r6[232]
8001abb2:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
8001abb4:	ec f8 01 00 	ld.w	r8,r6[256]
8001abb8:	ec f9 07 04 	ld.w	r9,r6[1796]
8001abbc:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001abbe:	ca c8       	rjmp	8001ad16 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGRateMessage;
					}else{
						dbg_print("Wrong CFG Rate message 0x");
8001abc0:	fe cc 07 f0 	sub	r12,pc,2032
8001abc4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001abc8:	ec f8 00 60 	ld.w	r8,r6[96]
8001abcc:	11 88       	ld.ub	r8,r8[0x0]
8001abce:	31 0b       	mov	r11,16
8001abd0:	10 9c       	mov	r12,r8
8001abd2:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001abd6:	fe cc 08 fa 	sub	r12,pc,2298
8001abda:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001abde:	ec f8 00 5c 	ld.w	r8,r6[92]
8001abe2:	11 88       	ld.ub	r8,r8[0x0]
8001abe4:	31 0b       	mov	r11,16
8001abe6:	10 9c       	mov	r12,r8
8001abe8:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001abec:	fe cc 09 04 	sub	r12,pc,2308
8001abf0:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001abf4:	ec f8 00 58 	ld.w	r8,r6[88]
8001abf8:	90 08       	ld.sh	r8,r8[0x0]
8001abfa:	5c 78       	castu.h	r8
8001abfc:	30 ab       	mov	r11,10
8001abfe:	10 9c       	mov	r12,r8
8001ac00:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ac04:	fe cc 09 0c 	sub	r12,pc,2316
8001ac08:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_RATE,10);
8001ac0c:	30 ab       	mov	r11,10
8001ac0e:	30 6c       	mov	r12,6
8001ac10:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001ac14:	fe cc 09 54 	sub	r12,pc,2388
8001ac18:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001ac1c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001ac20:	30 08       	mov	r8,0
8001ac22:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001ac24:	fe 9f fc 92 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_CFG_SET_RATE:
					if (payload_length == UBX_SIZE_CFG_GETSET_RATE)
8001ac28:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac2c:	90 09       	ld.sh	r9,r8[0x0]
8001ac2e:	30 38       	mov	r8,3
8001ac30:	f0 09 19 00 	cp.h	r9,r8
8001ac34:	c1 11       	brne	8001ac56 <ubx_read+0x73c>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
8001ac36:	ec f9 06 68 	ld.w	r9,r6[1640]
8001ac3a:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ac3e:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
8001ac40:	ec f9 04 10 	ld.w	r9,r6[1040]
8001ac44:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ac48:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
8001ac4a:	ec f8 01 00 	ld.w	r8,r6[256]
8001ac4e:	ec f9 04 d8 	ld.w	r9,r6[1240]
8001ac52:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ac54:	c6 18       	rjmp	8001ad16 <ubx_read+0x7fc>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentCFGSetGetRateMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastCFGSetGetRateMessage;
						ubx_validMessage = &ubx_numberOfValidCFGSetGetRateMessage;
					}else{
						dbg_print("Wrong CFG Set/get message 0x");
8001ac56:	fe cc 08 6a 	sub	r12,pc,2154
8001ac5a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ac5e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ac62:	11 88       	ld.ub	r8,r8[0x0]
8001ac64:	31 0b       	mov	r11,16
8001ac66:	10 9c       	mov	r12,r8
8001ac68:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ac6c:	fe cc 09 90 	sub	r12,pc,2448
8001ac70:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001ac74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ac78:	11 88       	ld.ub	r8,r8[0x0]
8001ac7a:	31 0b       	mov	r11,16
8001ac7c:	10 9c       	mov	r12,r8
8001ac7e:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001ac82:	fe cc 09 9a 	sub	r12,pc,2458
8001ac86:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001ac8a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ac8e:	90 08       	ld.sh	r8,r8[0x0]
8001ac90:	5c 78       	castu.h	r8
8001ac92:	30 ab       	mov	r11,10
8001ac94:	10 9c       	mov	r12,r8
8001ac96:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001ac9a:	fe cc 09 a2 	sub	r12,pc,2466
8001ac9e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_CFG_GETSET_RATE,10);
8001aca2:	30 ab       	mov	r11,10
8001aca4:	30 3c       	mov	r12,3
8001aca6:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001acaa:	fe cc 09 ea 	sub	r12,pc,2538
8001acae:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001acb2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acb6:	30 08       	mov	r8,0
8001acb8:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001acba:	fe 9f fc 47 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				default:
					step = 0;
8001acbe:	ec f9 00 4c 	ld.w	r9,r6[76]
8001acc2:	30 08       	mov	r8,0
8001acc4:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected CFG message, Class: 0x");
8001acc6:	fe cc 08 ba 	sub	r12,pc,2234
8001acca:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001acce:	ec f8 00 60 	ld.w	r8,r6[96]
8001acd2:	11 88       	ld.ub	r8,r8[0x0]
8001acd4:	31 0b       	mov	r11,16
8001acd6:	10 9c       	mov	r12,r8
8001acd8:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001acdc:	fe cc 09 48 	sub	r12,pc,2376
8001ace0:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001ace4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ace8:	11 88       	ld.ub	r8,r8[0x0]
8001acea:	31 0b       	mov	r11,16
8001acec:	10 9c       	mov	r12,r8
8001acee:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001acf2:	fe cc 09 4e 	sub	r12,pc,2382
8001acf6:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001acfa:	ec f8 00 58 	ld.w	r8,r6[88]
8001acfe:	90 08       	ld.sh	r8,r8[0x0]
8001ad00:	5c 78       	castu.h	r8
8001ad02:	30 ab       	mov	r11,10
8001ad04:	10 9c       	mov	r12,r8
8001ad06:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001ad0a:	fe cc 0a 4a 	sub	r12,pc,2634
8001ad0e:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001ad12:	fe 9f fc 1b 	bral	8001a548 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad16:	e0 8f 02 70 	bral	8001b1f6 <ubx_read+0xcdc>
					dbg_print(" of size ");
					dbg_print_num(payload_length,10);
					dbg_print("\n");
					goto reset;
				}
			} else if (ubxclass == UBX_CLASS_MON)
8001ad1a:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad1e:	11 89       	ld.ub	r9,r8[0x0]
8001ad20:	30 a8       	mov	r8,10
8001ad22:	f0 09 18 00 	cp.b	r9,r8
8001ad26:	e0 81 00 88 	brne	8001ae36 <ubx_read+0x91c>
			{
 				switch (msg_id)
8001ad2a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad2e:	11 88       	ld.ub	r8,r8[0x0]
8001ad30:	e0 48 00 21 	cp.w	r8,33
8001ad34:	c4 d1       	brne	8001adce <ubx_read+0x8b4>
 				{
 				case MSG_MON_RXR:
 					if(payload_length == UBX_SIZE_MON_RXR)
8001ad36:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad3a:	90 09       	ld.sh	r9,r8[0x0]
8001ad3c:	30 18       	mov	r8,1
8001ad3e:	f0 09 19 00 	cp.h	r9,r8
8001ad42:	c1 21       	brne	8001ad66 <ubx_read+0x84c>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
8001ad44:	ec f9 05 a8 	ld.w	r9,r6[1448]
8001ad48:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ad4c:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
8001ad4e:	ec f9 03 f8 	ld.w	r9,r6[1016]
8001ad52:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ad56:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
8001ad58:	ec f8 01 00 	ld.w	r8,r6[256]
8001ad5c:	ec f9 04 bc 	ld.w	r9,r6[1212]
8001ad60:	91 09       	st.w	r8[0x0],r9
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001ad62:	e0 8f 02 4a 	bral	8001b1f6 <ubx_read+0xcdc>
 					{
 						ubx_currentMessage = (unsigned char**)&ubx_currentMONRXRMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastMONRXRMessage;
						ubx_validMessage = &ubx_numberOfValidMONRXRMessage;
 					}else{
 						dbg_print("Wrong MON RXR message 0x");
8001ad66:	fe cc 09 36 	sub	r12,pc,2358
8001ad6a:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(ubxclass,16);
8001ad6e:	ec f8 00 60 	ld.w	r8,r6[96]
8001ad72:	11 88       	ld.ub	r8,r8[0x0]
8001ad74:	31 0b       	mov	r11,16
8001ad76:	10 9c       	mov	r12,r8
8001ad78:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Msg id: 0x");
8001ad7c:	fe cc 0a a0 	sub	r12,pc,2720
8001ad80:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(msg_id,16);
8001ad84:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ad88:	11 88       	ld.ub	r8,r8[0x0]
8001ad8a:	31 0b       	mov	r11,16
8001ad8c:	10 9c       	mov	r12,r8
8001ad8e:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" Received size:");
8001ad92:	fe cc 0a aa 	sub	r12,pc,2730
8001ad96:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(payload_length,10);
8001ad9a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ad9e:	90 08       	ld.sh	r8,r8[0x0]
8001ada0:	5c 78       	castu.h	r8
8001ada2:	30 ab       	mov	r11,10
8001ada4:	10 9c       	mov	r12,r8
8001ada6:	f0 16 00 04 	mcall	r6[16]
 						dbg_print(" should be:");
8001adaa:	fe cc 0a b2 	sub	r12,pc,2738
8001adae:	f0 16 00 01 	mcall	r6[4]
 						dbg_print_num(UBX_SIZE_MON_RXR,10);
8001adb2:	30 ab       	mov	r11,10
8001adb4:	30 1c       	mov	r12,1
8001adb6:	f0 16 00 04 	mcall	r6[16]
 						dbg_print("\n");
8001adba:	fe cc 0a fa 	sub	r12,pc,2810
8001adbe:	f0 16 00 01 	mcall	r6[4]
 						step = 0;
8001adc2:	ec f9 00 4c 	ld.w	r9,r6[76]
8001adc6:	30 08       	mov	r8,0
8001adc8:	b2 88       	st.b	r9[0x0],r8
 						goto reset;
8001adca:	fe 9f fb bf 	bral	8001a548 <ubx_read+0x2e>
 					}
					break;
 				default:
 					step = 0;
8001adce:	ec f9 00 4c 	ld.w	r9,r6[76]
8001add2:	30 08       	mov	r8,0
8001add4:	b2 88       	st.b	r9[0x0],r8
 					dbg_print("Unexpected TIM message, Class: 0x");
8001add6:	fe cc 09 8a 	sub	r12,pc,2442
8001adda:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(ubxclass,16);
8001adde:	ec f8 00 60 	ld.w	r8,r6[96]
8001ade2:	11 88       	ld.ub	r8,r8[0x0]
8001ade4:	31 0b       	mov	r11,16
8001ade6:	10 9c       	mov	r12,r8
8001ade8:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(", msg id: 0x");
8001adec:	fe cc 0a 58 	sub	r12,pc,2648
8001adf0:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(msg_id,16);
8001adf4:	ec f8 00 5c 	ld.w	r8,r6[92]
8001adf8:	11 88       	ld.ub	r8,r8[0x0]
8001adfa:	31 0b       	mov	r11,16
8001adfc:	10 9c       	mov	r12,r8
8001adfe:	f0 16 00 04 	mcall	r6[16]
 					dbg_print(" of size ");
8001ae02:	fe cc 0a 5e 	sub	r12,pc,2654
8001ae06:	f0 16 00 01 	mcall	r6[4]
 					dbg_print_num(payload_length,10);
8001ae0a:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae0e:	90 08       	ld.sh	r8,r8[0x0]
8001ae10:	5c 78       	castu.h	r8
8001ae12:	30 ab       	mov	r11,10
8001ae14:	10 9c       	mov	r12,r8
8001ae16:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001ae1a:	fe cc 09 aa 	sub	r12,pc,2474
8001ae1e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_MON_RXR,16);
8001ae22:	31 0b       	mov	r11,16
8001ae24:	32 1c       	mov	r12,33
8001ae26:	f0 16 00 04 	mcall	r6[16]
 					dbg_print("\n");
8001ae2a:	fe cc 0b 6a 	sub	r12,pc,2922
8001ae2e:	f0 16 00 01 	mcall	r6[4]
 					goto reset;
8001ae32:	fe 9f fb 8b 	bral	8001a548 <ubx_read+0x2e>
 				}
				
			} else if(ubxclass == UBX_CLASS_TIM)
8001ae36:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae3a:	11 89       	ld.ub	r9,r8[0x0]
8001ae3c:	30 d8       	mov	r8,13
8001ae3e:	f0 09 18 00 	cp.b	r9,r8
8001ae42:	e0 81 00 d5 	brne	8001afec <ubx_read+0xad2>
			{
				switch(msg_id)
8001ae46:	ec f8 00 5c 	ld.w	r8,r6[92]
8001ae4a:	11 88       	ld.ub	r8,r8[0x0]
8001ae4c:	58 18       	cp.w	r8,1
8001ae4e:	c0 40       	breq	8001ae56 <ubx_read+0x93c>
8001ae50:	58 68       	cp.w	r8,6
8001ae52:	c4 d0       	breq	8001aeec <ubx_read+0x9d2>
8001ae54:	c9 78       	rjmp	8001af82 <ubx_read+0xa68>
				{
				case MSG_TIM_TP:
					if (payload_length == UBX_SIZE_TIM_TP)
8001ae56:	ec f8 00 58 	ld.w	r8,r6[88]
8001ae5a:	90 09       	ld.sh	r9,r8[0x0]
8001ae5c:	31 08       	mov	r8,16
8001ae5e:	f0 09 19 00 	cp.h	r9,r8
8001ae62:	c1 11       	brne	8001ae84 <ubx_read+0x96a>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
8001ae64:	ec f9 08 40 	ld.w	r9,r6[2112]
8001ae68:	ec f8 00 dc 	ld.w	r8,r6[220]
8001ae6c:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
8001ae6e:	ec f9 04 38 	ld.w	r9,r6[1080]
8001ae72:	ec f8 00 e8 	ld.w	r8,r6[232]
8001ae76:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
8001ae78:	ec f8 01 00 	ld.w	r8,r6[256]
8001ae7c:	ec f9 04 7c 	ld.w	r9,r6[1148]
8001ae80:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_TP,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001ae82:	cb 48       	rjmp	8001afea <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimTPMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimTPMessage;
						ubx_validMessage = &ubx_numberOfValidTimTPMessage;
					}else{
						dbg_print("Wrong TIM TP message 0x");
8001ae84:	fe cc 0a 04 	sub	r12,pc,2564
8001ae88:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001ae8c:	ec f8 00 60 	ld.w	r8,r6[96]
8001ae90:	11 88       	ld.ub	r8,r8[0x0]
8001ae92:	31 0b       	mov	r11,16
8001ae94:	10 9c       	mov	r12,r8
8001ae96:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001ae9a:	fe cc 0b be 	sub	r12,pc,3006
8001ae9e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001aea2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001aea6:	11 88       	ld.ub	r8,r8[0x0]
8001aea8:	31 0b       	mov	r11,16
8001aeaa:	10 9c       	mov	r12,r8
8001aeac:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001aeb0:	fe cc 0b c8 	sub	r12,pc,3016
8001aeb4:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001aeb8:	ec f8 00 58 	ld.w	r8,r6[88]
8001aebc:	90 08       	ld.sh	r8,r8[0x0]
8001aebe:	5c 78       	castu.h	r8
8001aec0:	30 ab       	mov	r11,10
8001aec2:	10 9c       	mov	r12,r8
8001aec4:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001aec8:	fe cc 0b d0 	sub	r12,pc,3024
8001aecc:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_TP,10);
8001aed0:	30 ab       	mov	r11,10
8001aed2:	31 0c       	mov	r12,16
8001aed4:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001aed8:	fe cc 0c 18 	sub	r12,pc,3096
8001aedc:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001aee0:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aee4:	30 08       	mov	r8,0
8001aee6:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001aee8:	fe 9f fb 30 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
				case MSG_TIM_VRFY:
					if (payload_length == UBX_SIZE_TIM_VRFY)
8001aeec:	ec f8 00 58 	ld.w	r8,r6[88]
8001aef0:	90 09       	ld.sh	r9,r8[0x0]
8001aef2:	31 48       	mov	r8,20
8001aef4:	f0 09 19 00 	cp.h	r9,r8
8001aef8:	c1 11       	brne	8001af1a <ubx_read+0xa00>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
8001aefa:	ec f9 08 ac 	ld.w	r9,r6[2220]
8001aefe:	ec f8 00 dc 	ld.w	r8,r6[220]
8001af02:	91 09       	st.w	r8[0x0],r9
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
8001af04:	ec f9 04 50 	ld.w	r9,r6[1104]
8001af08:	ec f8 00 e8 	ld.w	r8,r6[232]
8001af0c:	91 09       	st.w	r8[0x0],r9
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
8001af0e:	ec f8 01 00 	ld.w	r8,r6[256]
8001af12:	ec f9 04 84 	ld.w	r9,r6[1156]
8001af16:	91 09       	st.w	r8[0x0],r9
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
						dbg_print("\n");
						step = 0;
						goto reset;
					}
					break;
8001af18:	c6 98       	rjmp	8001afea <ubx_read+0xad0>
					{
						ubx_currentMessage = (unsigned char**)&ubx_currentTimVRFYMessage;
						ubx_lastMessage = (unsigned char**)&ubx_lastTimVRFYMessage;
						ubx_validMessage = &ubx_numberOfValidTimVRFYMessage;
						}else{
						dbg_print("Wrong TIM VRFY message 0x");
8001af1a:	fe cc 0a 82 	sub	r12,pc,2690
8001af1e:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(ubxclass,16);
8001af22:	ec f8 00 60 	ld.w	r8,r6[96]
8001af26:	11 88       	ld.ub	r8,r8[0x0]
8001af28:	31 0b       	mov	r11,16
8001af2a:	10 9c       	mov	r12,r8
8001af2c:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Msg id: 0x");
8001af30:	fe cc 0c 54 	sub	r12,pc,3156
8001af34:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(msg_id,16);
8001af38:	ec f8 00 5c 	ld.w	r8,r6[92]
8001af3c:	11 88       	ld.ub	r8,r8[0x0]
8001af3e:	31 0b       	mov	r11,16
8001af40:	10 9c       	mov	r12,r8
8001af42:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" Received size:");
8001af46:	fe cc 0c 5e 	sub	r12,pc,3166
8001af4a:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(payload_length,10);
8001af4e:	ec f8 00 58 	ld.w	r8,r6[88]
8001af52:	90 08       	ld.sh	r8,r8[0x0]
8001af54:	5c 78       	castu.h	r8
8001af56:	30 ab       	mov	r11,10
8001af58:	10 9c       	mov	r12,r8
8001af5a:	f0 16 00 04 	mcall	r6[16]
						dbg_print(" should be:");
8001af5e:	fe cc 0c 66 	sub	r12,pc,3174
8001af62:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(UBX_SIZE_TIM_VRFY,10);
8001af66:	30 ab       	mov	r11,10
8001af68:	31 4c       	mov	r12,20
8001af6a:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
8001af6e:	fe cc 0c ae 	sub	r12,pc,3246
8001af72:	f0 16 00 01 	mcall	r6[4]
						step = 0;
8001af76:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af7a:	30 08       	mov	r8,0
8001af7c:	b2 88       	st.b	r9[0x0],r8
						goto reset;
8001af7e:	fe 9f fa e5 	bral	8001a548 <ubx_read+0x2e>
					}
					break;
					
				default:
					step = 0;
8001af82:	ec f9 00 4c 	ld.w	r9,r6[76]
8001af86:	30 08       	mov	r8,0
8001af88:	b2 88       	st.b	r9[0x0],r8
					dbg_print("Unexpected TIM message, Class: 0x");
8001af8a:	fe cc 0b 3e 	sub	r12,pc,2878
8001af8e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(ubxclass,16);
8001af92:	ec f8 00 60 	ld.w	r8,r6[96]
8001af96:	11 88       	ld.ub	r8,r8[0x0]
8001af98:	31 0b       	mov	r11,16
8001af9a:	10 9c       	mov	r12,r8
8001af9c:	f0 16 00 04 	mcall	r6[16]
					dbg_print(", msg id: 0x");
8001afa0:	fe cc 0c 0c 	sub	r12,pc,3084
8001afa4:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(msg_id,16);
8001afa8:	ec f8 00 5c 	ld.w	r8,r6[92]
8001afac:	11 88       	ld.ub	r8,r8[0x0]
8001afae:	31 0b       	mov	r11,16
8001afb0:	10 9c       	mov	r12,r8
8001afb2:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of size ");
8001afb6:	fe cc 0c 12 	sub	r12,pc,3090
8001afba:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(payload_length,10);
8001afbe:	ec f8 00 58 	ld.w	r8,r6[88]
8001afc2:	90 08       	ld.sh	r8,r8[0x0]
8001afc4:	5c 78       	castu.h	r8
8001afc6:	30 ab       	mov	r11,10
8001afc8:	10 9c       	mov	r12,r8
8001afca:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" should be :");
8001afce:	fe cc 0b 5e 	sub	r12,pc,2910
8001afd2:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(MSG_TIM_TP,16);
8001afd6:	31 0b       	mov	r11,16
8001afd8:	30 1c       	mov	r12,1
8001afda:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8001afde:	fe cc 0d 1e 	sub	r12,pc,3358
8001afe2:	f0 16 00 01 	mcall	r6[4]
					goto reset;
8001afe6:	fe 9f fa b1 	bral	8001a548 <ubx_read+0x2e>
				dbg_print(" of size ");
				dbg_print_num(payload_length,10);
				dbg_print("\n");
				goto reset;	
			}		
			break;
8001afea:	c0 69       	rjmp	8001b1f6 <ubx_read+0xcdc>
					dbg_print_num(MSG_TIM_TP,16);
					dbg_print("\n");
					goto reset;
				}
			}else{
				step = 0;
8001afec:	ec f9 00 4c 	ld.w	r9,r6[76]
8001aff0:	30 08       	mov	r8,0
8001aff2:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Unexpected message, Class: 0x");
8001aff4:	fe cc 0b 40 	sub	r12,pc,2880
8001aff8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001affc:	ec f8 00 60 	ld.w	r8,r6[96]
8001b000:	11 88       	ld.ub	r8,r8[0x0]
8001b002:	31 0b       	mov	r11,16
8001b004:	10 9c       	mov	r12,r8
8001b006:	f0 16 00 04 	mcall	r6[16]
				dbg_print(", msg id: 0x");
8001b00a:	fe cc 0c 76 	sub	r12,pc,3190
8001b00e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b012:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b016:	11 88       	ld.ub	r8,r8[0x0]
8001b018:	31 0b       	mov	r11,16
8001b01a:	10 9c       	mov	r12,r8
8001b01c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" of size ");
8001b020:	fe cc 0c 7c 	sub	r12,pc,3196
8001b024:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(payload_length,10);
8001b028:	ec f8 00 58 	ld.w	r8,r6[88]
8001b02c:	90 08       	ld.sh	r8,r8[0x0]
8001b02e:	5c 78       	castu.h	r8
8001b030:	30 ab       	mov	r11,10
8001b032:	10 9c       	mov	r12,r8
8001b034:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b038:	fe cc 0d 78 	sub	r12,pc,3448
8001b03c:	f0 16 00 01 	mcall	r6[4]
				goto reset;	
8001b040:	fe 9f fa 84 	bral	8001a548 <ubx_read+0x2e>
			}		
			break;
		case 6:
			
			cksum_a += data;
8001b044:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b048:	11 88       	ld.ub	r8,r8[0x0]
8001b04a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b04e:	f2 08 00 08 	add	r8,r9,r8
8001b052:	5c 58       	castu.b	r8
8001b054:	ec f9 00 b0 	ld.w	r9,r6[176]
8001b058:	b2 88       	st.b	r9[0x0],r8
			cksum_b += cksum_a; // checksum byte
8001b05a:	ec f8 01 10 	ld.w	r8,r6[272]
8001b05e:	11 89       	ld.ub	r9,r8[0x0]
8001b060:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b064:	11 88       	ld.ub	r8,r8[0x0]
8001b066:	f2 08 00 08 	add	r8,r9,r8
8001b06a:	5c 58       	castu.b	r8
8001b06c:	ec f9 01 10 	ld.w	r9,r6[272]
8001b070:	b2 88       	st.b	r9[0x0],r8
			
			#ifdef BIG_ENDIAN
				(*ubx_currentMessage)[payload_length - 1 - payload_counter] = data;
8001b072:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b076:	70 08       	ld.w	r8,r8[0x0]
8001b078:	70 09       	ld.w	r9,r8[0x0]
8001b07a:	ec f8 00 58 	ld.w	r8,r6[88]
8001b07e:	90 08       	ld.sh	r8,r8[0x0]
8001b080:	5c 78       	castu.h	r8
8001b082:	f0 ca 00 01 	sub	r10,r8,1
8001b086:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b08a:	90 08       	ld.sh	r8,r8[0x0]
8001b08c:	5c 78       	castu.h	r8
8001b08e:	f4 08 01 08 	sub	r8,r10,r8
8001b092:	10 09       	add	r9,r8
8001b094:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b098:	b2 88       	st.b	r9[0x0],r8
			#else
				(*ubx_currentMessage)[payload_counter] = data;
			#endif
			
			payload_counter++;
8001b09a:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b09e:	90 08       	ld.sh	r8,r8[0x0]
8001b0a0:	2f f8       	sub	r8,-1
8001b0a2:	5c 88       	casts.h	r8
8001b0a4:	ec f9 01 d4 	ld.w	r9,r6[468]
8001b0a8:	b2 08       	st.h	r9[0x0],r8
			
			if (payload_counter == payload_length)
8001b0aa:	ec f8 01 d4 	ld.w	r8,r6[468]
8001b0ae:	90 09       	ld.sh	r9,r8[0x0]
8001b0b0:	ec f8 00 58 	ld.w	r8,r6[88]
8001b0b4:	90 08       	ld.sh	r8,r8[0x0]
8001b0b6:	f0 09 19 00 	cp.h	r9,r8
8001b0ba:	e0 81 00 9b 	brne	8001b1f0 <ubx_read+0xcd6>
			{
				step++;
8001b0be:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b0c2:	11 88       	ld.ub	r8,r8[0x0]
8001b0c4:	2f f8       	sub	r8,-1
8001b0c6:	5c 58       	castu.b	r8
8001b0c8:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0cc:	b2 88       	st.b	r9[0x0],r8
			}
			break;
8001b0ce:	c9 48       	rjmp	8001b1f6 <ubx_read+0xcdc>
		case 7:
			step++;
8001b0d0:	ec f8 00 4c 	ld.w	r8,r6[76]
8001b0d4:	11 88       	ld.ub	r8,r8[0x0]
8001b0d6:	2f f8       	sub	r8,-1
8001b0d8:	5c 58       	castu.b	r8
8001b0da:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b0de:	b2 88       	st.b	r9[0x0],r8
			if (cksum_a != data)
8001b0e0:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b0e4:	11 88       	ld.ub	r8,r8[0x0]
8001b0e6:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b0ea:	f0 09 18 00 	cp.b	r9,r8
8001b0ee:	e0 80 00 83 	breq	8001b1f4 <ubx_read+0xcda>
			{
				dbg_print("bad cksum_a ");
8001b0f2:	fe cc 0c 1e 	sub	r12,pc,3102
8001b0f6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b0fa:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b0fe:	31 0b       	mov	r11,16
8001b100:	10 9c       	mov	r12,r8
8001b102:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b106:	fe cc 0c 22 	sub	r12,pc,3106
8001b10a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_a,16);
8001b10e:	ec f8 00 b0 	ld.w	r8,r6[176]
8001b112:	11 88       	ld.ub	r8,r8[0x0]
8001b114:	31 0b       	mov	r11,16
8001b116:	10 9c       	mov	r12,r8
8001b118:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" class : 0x");
8001b11c:	fe cc 0c 2c 	sub	r12,pc,3116
8001b120:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(ubxclass,16);
8001b124:	ec f8 00 60 	ld.w	r8,r6[96]
8001b128:	11 88       	ld.ub	r8,r8[0x0]
8001b12a:	31 0b       	mov	r11,16
8001b12c:	10 9c       	mov	r12,r8
8001b12e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" msg_id : 0x");
8001b132:	fe cc 0c 36 	sub	r12,pc,3126
8001b136:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(msg_id,16);
8001b13a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b13e:	11 88       	ld.ub	r8,r8[0x0]
8001b140:	31 0b       	mov	r11,16
8001b142:	10 9c       	mov	r12,r8
8001b144:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b148:	fe cc 0e 88 	sub	r12,pc,3720
8001b14c:	f0 16 00 01 	mcall	r6[4]
				step = 0;
8001b150:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b154:	30 08       	mov	r8,0
8001b156:	b2 88       	st.b	r9[0x0],r8
				goto reset;
8001b158:	fe 9f f9 f8 	bral	8001a548 <ubx_read+0x2e>
			}
			break;
		case 8:
			step=0;
8001b15c:	ec f9 00 4c 	ld.w	r9,r6[76]
8001b160:	30 08       	mov	r8,0
8001b162:	b2 88       	st.b	r9[0x0],r8
			if (cksum_b != data)
8001b164:	ec f8 01 10 	ld.w	r8,r6[272]
8001b168:	11 88       	ld.ub	r8,r8[0x0]
8001b16a:	ef 39 ff fa 	ld.ub	r9,r7[-6]
8001b16e:	f0 09 18 00 	cp.b	r9,r8
8001b172:	c1 b0       	breq	8001b1a8 <ubx_read+0xc8e>
			{
				dbg_print("bad cksum_b ");
8001b174:	fe cc 0c 68 	sub	r12,pc,3176
8001b178:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(data,16);
8001b17c:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001b180:	31 0b       	mov	r11,16
8001b182:	10 9c       	mov	r12,r8
8001b184:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" should be ");
8001b188:	fe cc 0c a4 	sub	r12,pc,3236
8001b18c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(cksum_b,16);
8001b190:	ec f8 01 10 	ld.w	r8,r6[272]
8001b194:	11 88       	ld.ub	r8,r8[0x0]
8001b196:	31 0b       	mov	r11,16
8001b198:	10 9c       	mov	r12,r8
8001b19a:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b19e:	fe cc 0e de 	sub	r12,pc,3806
8001b1a2:	f0 16 00 01 	mcall	r6[4]
				break;
8001b1a6:	c2 88       	rjmp	8001b1f6 <ubx_read+0xcdc>
			}
			++(*ubx_validMessage);
8001b1a8:	ec f8 01 00 	ld.w	r8,r6[256]
8001b1ac:	70 08       	ld.w	r8,r8[0x0]
8001b1ae:	90 09       	ld.sh	r9,r8[0x0]
8001b1b0:	2f f9       	sub	r9,-1
8001b1b2:	5c 89       	casts.h	r9
8001b1b4:	b0 09       	st.h	r8[0x0],r9
			//dbg_print("Valid message");
			
			// swap message buffers, old message is discarded and becomes incoming buffer, new message become valid message (=old)
			temporaryMessageForSwaping = *ubx_currentMessage;
8001b1b6:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b1ba:	70 08       	ld.w	r8,r8[0x0]
8001b1bc:	70 08       	ld.w	r8,r8[0x0]
8001b1be:	ef 48 ff fc 	st.w	r7[-4],r8
			*ubx_currentMessage = *ubx_lastMessage;
8001b1c2:	ec f8 00 dc 	ld.w	r8,r6[220]
8001b1c6:	70 08       	ld.w	r8,r8[0x0]
8001b1c8:	ec f9 00 e8 	ld.w	r9,r6[232]
8001b1cc:	72 09       	ld.w	r9,r9[0x0]
8001b1ce:	72 09       	ld.w	r9,r9[0x0]
8001b1d0:	91 09       	st.w	r8[0x0],r9
			*ubx_lastMessage = temporaryMessageForSwaping;
8001b1d2:	ec f8 00 e8 	ld.w	r8,r6[232]
8001b1d6:	70 08       	ld.w	r8,r8[0x0]
8001b1d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001b1dc:	91 09       	st.w	r8[0x0],r9
			
			if (ubx_process_data())
8001b1de:	f0 16 02 14 	mcall	r6[2128]
8001b1e2:	18 98       	mov	r8,r12
8001b1e4:	58 08       	cp.w	r8,0
8001b1e6:	c0 80       	breq	8001b1f6 <ubx_read+0xcdc>
			{
				msg_ok = true;
8001b1e8:	30 18       	mov	r8,1
8001b1ea:	ef 68 ff fb 	st.b	r7[-5],r8
8001b1ee:	c0 48       	rjmp	8001b1f6 <ubx_read+0xcdc>
			
			if (payload_counter == payload_length)
			{
				step++;
			}
			break;
8001b1f0:	d7 03       	nop
8001b1f2:	c0 28       	rjmp	8001b1f6 <ubx_read+0xcdc>
				dbg_print_num(msg_id,16);
				dbg_print("\n");
				step = 0;
				goto reset;
			}
			break;
8001b1f4:	d7 03       	nop
	bool msg_ok = false;
	//bool new_message = false;
	
	unsigned char * temporaryMessageForSwaping;
	
	while(buffer_bytes_available(&(centralData->gps_buffer)))
8001b1f6:	ec f8 00 00 	ld.w	r8,r6[0]
8001b1fa:	70 08       	ld.w	r8,r8[0x0]
8001b1fc:	f0 c8 f9 e4 	sub	r8,r8,-1564
8001b200:	10 9c       	mov	r12,r8
8001b202:	f0 16 00 2e 	mcall	r6[184]
8001b206:	18 98       	mov	r8,r12
8001b208:	58 08       	cp.w	r8,0
8001b20a:	fe 91 f9 94 	brne	8001a532 <ubx_read+0x18>
				msg_ok = true;
			}
		}
		
	}
	return msg_ok;
8001b20e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
8001b212:	10 9c       	mov	r12,r8
8001b214:	2f ed       	sub	sp,-8
8001b216:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001b21a:	00 00       	add	r0,r0
8001b21c:	80 01       	ld.sh	r1,r0[0x0]
8001b21e:	a3 aa       	sbr	r10,0x2
8001b220:	4d 53       	lddpc	r3,8001b374 <ubx_read+0xe5a>
8001b222:	47 5f       	lddsp	pc,sp[0x1d4]
8001b224:	4d 4f       	lddpc	pc,8001b374 <ubx_read+0xe5a>
8001b226:	4e 20       	lddpc	r0,8001b3ac <ubx_read+0xe92>
8001b228:	47 50       	lddsp	r0,sp[0x1d4]
8001b22a:	53 20       	stdsp	sp[0xc8],r0
8001b22c:	61 77       	ld.w	r7,r0[0x5c]
8001b22e:	61 6b       	ld.w	r11,r0[0x58]
8001b230:	65 0a       	ld.w	r10,r2[0x40]
8001b232:	00 00       	add	r0,r0
8001b234:	4d 53       	lddpc	r3,8001b388 <ubx_read+0xe6e>
8001b236:	47 5f       	lddsp	pc,sp[0x1d4]
8001b238:	54 49       	stdsp	sp[0x110],r9
8001b23a:	4d 5f       	lddpc	pc,8001b38c <ubx_read+0xe72>
8001b23c:	54 50       	stdsp	sp[0x114],r0
8001b23e:	20 47       	sub	r7,4
8001b240:	50 53       	stdsp	sp[0x14],r3
8001b242:	20 61       	sub	r1,6
8001b244:	77 61       	ld.w	r1,r11[0x58]
8001b246:	6b 65       	ld.w	r5,r5[0x58]
8001b248:	0a 00       	add	r0,r5
8001b24a:	00 00       	add	r0,r0
8001b24c:	4d 53       	lddpc	r3,8001b3a0 <ubx_read+0xe86>
8001b24e:	47 5f       	lddsp	pc,sp[0x1d4]
8001b250:	54 49       	stdsp	sp[0x110],r9
8001b252:	4d 5f       	lddpc	pc,8001b3a4 <ubx_read+0xe8a>
8001b254:	56 52       	stdsp	sp[0x194],r2
8001b256:	46 59       	lddsp	r9,sp[0x194]
8001b258:	00 00       	add	r0,r0
8001b25a:	00 00       	add	r0,r0
8001b25c:	20 69       	sub	r9,6
8001b25e:	74 6f       	ld.w	pc,r10[0x18]
8001b260:	77 20       	ld.w	r0,r11[0x48]
8001b262:	3a 00       	mov	r0,-96
8001b264:	20 66       	sub	r6,6
8001b266:	72 61       	ld.w	r1,r9[0x18]
8001b268:	63 20       	ld.w	r0,r1[0x48]
8001b26a:	3a 00       	mov	r0,-96
8001b26c:	20 64       	sub	r4,6
8001b26e:	65 6c       	ld.w	r12,r2[0x58]
8001b270:	74 61       	ld.w	r1,r10[0x18]
8001b272:	4d 73       	lddpc	r3,8001b3cc <ubx_read+0xeb2>
8001b274:	20 3a       	sub	r10,3
8001b276:	00 00       	add	r0,r0
8001b278:	20 64       	sub	r4,6
8001b27a:	65 6c       	ld.w	r12,r2[0x58]
8001b27c:	74 61       	ld.w	r1,r10[0x18]
8001b27e:	4e 73       	lddpc	r3,8001b418 <ubx_read+0xefe>
8001b280:	20 3a       	sub	r10,3
8001b282:	00 00       	add	r0,r0
8001b284:	47 6f       	lddsp	pc,sp[0x1d8]
8001b286:	74 20       	ld.w	r0,r10[0x8]
8001b288:	65 6e       	ld.w	lr,r2[0x58]
8001b28a:	67 69       	ld.w	r9,r3[0x58]
8001b28c:	6e 65       	ld.w	r5,r7[0x18]
8001b28e:	20 73       	sub	r3,7
8001b290:	65 74       	ld.w	r4,r2[0x5c]
8001b292:	74 69       	ld.w	r9,r10[0x18]
8001b294:	6e 67       	ld.w	r7,r7[0x18]
8001b296:	73 20       	ld.w	r0,r9[0x48]
8001b298:	00 00       	add	r0,r0
8001b29a:	00 00       	add	r0,r0
8001b29c:	53 65       	stdsp	sp[0xd8],r5
8001b29e:	6e 64       	ld.w	r4,r7[0x18]
8001b2a0:	20 4e       	sub	lr,4
8001b2a2:	61 76       	ld.w	r6,r0[0x5c]
8001b2a4:	20 73       	sub	r3,7
8001b2a6:	65 74       	ld.w	r4,r2[0x5c]
8001b2a8:	74 69       	ld.w	r9,r10[0x18]
8001b2aa:	6e 67       	ld.w	r7,r7[0x18]
8001b2ac:	73 00       	ld.w	r0,r9[0x40]
8001b2ae:	00 00       	add	r0,r0
8001b2b0:	4e 6f       	lddpc	pc,8001b448 <ubx_read+0xf2e>
8001b2b2:	20 65       	sub	r5,6
8001b2b4:	6e 67       	ld.w	r7,r7[0x18]
8001b2b6:	69 6e       	ld.w	lr,r4[0x58]
8001b2b8:	65 20       	ld.w	r0,r2[0x48]
8001b2ba:	73 65       	ld.w	r5,r9[0x58]
8001b2bc:	74 74       	ld.w	r4,r10[0x1c]
8001b2be:	69 6e       	ld.w	lr,r4[0x58]
8001b2c0:	67 73       	ld.w	r3,r3[0x5c]
8001b2c2:	20 72       	sub	r2,7
8001b2c4:	65 63       	ld.w	r3,r2[0x58]
8001b2c6:	65 69       	ld.w	r9,r2[0x58]
8001b2c8:	76 65       	ld.w	r5,r11[0x18]
8001b2ca:	64 20       	ld.w	r0,r2[0x8]
8001b2cc:	00 00       	add	r0,r0
8001b2ce:	00 00       	add	r0,r0
8001b2d0:	4d 65       	lddpc	r5,8001b428 <ubx_read+0xf0e>
8001b2d2:	73 73       	ld.w	r3,r9[0x5c]
8001b2d4:	61 67       	ld.w	r7,r0[0x58]
8001b2d6:	65 20       	ld.w	r0,r2[0x48]
8001b2d8:	43 46       	lddsp	r6,sp[0xd0]
8001b2da:	47 20       	lddsp	r0,sp[0x1c8]
8001b2dc:	52 61       	stdsp	sp[0x98],r1
8001b2de:	74 65       	ld.w	r5,r10[0x18]
8001b2e0:	20 30       	sub	r0,3
8001b2e2:	78 00       	ld.w	r0,r12[0x0]
8001b2e4:	55 6e       	stdsp	sp[0x158],lr
8001b2e6:	65 78       	ld.w	r8,r2[0x5c]
8001b2e8:	70 65       	ld.w	r5,r8[0x18]
8001b2ea:	63 74       	ld.w	r4,r1[0x5c]
8001b2ec:	65 64       	ld.w	r4,r2[0x58]
8001b2ee:	20 6d       	sub	sp,24
8001b2f0:	65 73       	ld.w	r3,r2[0x5c]
8001b2f2:	73 61       	ld.w	r1,r9[0x58]
8001b2f4:	67 65       	ld.w	r5,r3[0x58]
8001b2f6:	20 30       	sub	r0,3
8001b2f8:	78 00       	ld.w	r0,r12[0x0]
8001b2fa:	00 00       	add	r0,r0
8001b2fc:	30 32       	mov	r2,3
8001b2fe:	78 20       	ld.w	r0,r12[0x8]
8001b300:	30 78       	mov	r8,7
8001b302:	00 00       	add	r0,r0
8001b304:	30 32       	mov	r2,3
8001b306:	78 0a       	ld.w	r10,r12[0x0]
8001b308:	00 00       	add	r0,r0
8001b30a:	00 00       	add	r0,r0
8001b30c:	44 69       	lddsp	r9,sp[0x118]
8001b30e:	73 61       	ld.w	r1,r9[0x58]
8001b310:	62 6c       	ld.w	r12,r1[0x18]
8001b312:	69 6e       	ld.w	lr,r4[0x58]
8001b314:	67 20       	ld.w	r0,r3[0x48]
8001b316:	6d 65       	ld.w	r5,r6[0x58]
8001b318:	73 73       	ld.w	r3,r9[0x5c]
8001b31a:	61 67       	ld.w	r7,r0[0x58]
8001b31c:	65 20       	ld.w	r0,r2[0x48]
8001b31e:	30 78       	mov	r8,7
8001b320:	00 00       	add	r0,r0
8001b322:	00 00       	add	r0,r0
8001b324:	4d 53       	lddpc	r3,8001b478 <ubx_read+0xf5e>
8001b326:	47 5f       	lddsp	pc,sp[0x1d4]
8001b328:	4e 41       	lddpc	r1,8001b4b8 <ubx_read+0xf9e>
8001b32a:	56 5f       	stdsp	sp[0x194],pc
8001b32c:	50 4f       	stdsp	sp[0x10],pc
8001b32e:	53 4c       	stdsp	sp[0xd0],r12
8001b330:	4c 48       	lddpc	r8,8001b440 <ubx_read+0xf26>
8001b332:	00 00       	add	r0,r0
8001b334:	20 6c       	sub	r12,6
8001b336:	6f 6e       	ld.w	lr,r7[0x58]
8001b338:	67 69       	ld.w	r9,r3[0x58]
8001b33a:	74 75       	ld.w	r5,r10[0x1c]
8001b33c:	64 65       	ld.w	r5,r2[0x18]
8001b33e:	20 3a       	sub	r10,3
8001b340:	00 00       	add	r0,r0
8001b342:	00 00       	add	r0,r0
8001b344:	20 6c       	sub	r12,6
8001b346:	61 74       	ld.w	r4,r0[0x5c]
8001b348:	69 74       	ld.w	r4,r4[0x5c]
8001b34a:	75 64       	ld.w	r4,r10[0x58]
8001b34c:	65 20       	ld.w	r0,r2[0x48]
8001b34e:	3a 00       	mov	r0,-96
8001b350:	20 61       	sub	r1,6
8001b352:	6c 74       	ld.w	r4,r6[0x1c]
8001b354:	5f 65       	srmi	r5
8001b356:	6c 6c       	ld.w	r12,r6[0x18]
8001b358:	69 70       	ld.w	r0,r4[0x5c]
8001b35a:	73 20       	ld.w	r0,r9[0x48]
8001b35c:	3a 00       	mov	r0,-96
8001b35e:	00 00       	add	r0,r0
8001b360:	20 61       	sub	r1,6
8001b362:	6c 74       	ld.w	r4,r6[0x1c]
8001b364:	5f 6d       	srmi	sp
8001b366:	73 6c       	ld.w	r12,r9[0x58]
8001b368:	20 3a       	sub	r10,3
8001b36a:	00 00       	add	r0,r0
8001b36c:	20 68       	sub	r8,6
8001b36e:	6f 72       	ld.w	r2,r7[0x5c]
8001b370:	7a 5f       	ld.w	pc,sp[0x14]
8001b372:	61 63       	ld.w	r3,r0[0x58]
8001b374:	63 20       	ld.w	r0,r1[0x48]
8001b376:	3a 00       	mov	r0,-96
8001b378:	20 76       	sub	r6,7
8001b37a:	65 72       	ld.w	r2,r2[0x5c]
8001b37c:	74 5f       	ld.w	pc,r10[0x14]
8001b37e:	61 63       	ld.w	r3,r0[0x58]
8001b380:	63 20       	ld.w	r0,r1[0x48]
8001b382:	3a 00       	mov	r0,-96
8001b384:	4d 53       	lddpc	r3,8001b4d8 <ubx_read+0xfbe>
8001b386:	47 5f       	lddsp	pc,sp[0x1d4]
8001b388:	53 54       	stdsp	sp[0xd4],r4
8001b38a:	41 54       	lddsp	r4,sp[0x54]
8001b38c:	55 53       	stdsp	sp[0x154],r3
8001b38e:	20 66       	sub	r6,6
8001b390:	69 78       	ld.w	r8,r4[0x5c]
8001b392:	5f 74       	srpl	r4
8001b394:	79 70       	ld.w	r0,r12[0x5c]
8001b396:	65 20       	ld.w	r0,r2[0x48]
8001b398:	3d 20       	mov	r0,-46
8001b39a:	30 78       	mov	r8,7
8001b39c:	00 00       	add	r0,r0
8001b39e:	00 00       	add	r0,r0
8001b3a0:	2c 20       	sub	r0,-62
8001b3a2:	75 70       	ld.w	r0,r10[0x5c]
8001b3a4:	74 69       	ld.w	r9,r10[0x18]
8001b3a6:	6d 65       	ld.w	r5,r6[0x58]
8001b3a8:	20 3d       	sub	sp,12
8001b3aa:	00 00       	add	r0,r0
8001b3ac:	4d 53       	lddpc	r3,8001b500 <ubx_process_data+0xe>
8001b3ae:	47 5f       	lddsp	pc,sp[0x1d4]
8001b3b0:	53 4f       	stdsp	sp[0xd0],pc
8001b3b2:	4c 20       	lddpc	r0,8001b4b8 <ubx_read+0xf9e>
8001b3b4:	00 00       	add	r0,r0
8001b3b6:	00 00       	add	r0,r0
8001b3b8:	69 74       	ld.w	r4,r4[0x5c]
8001b3ba:	6f 77       	ld.w	r7,r7[0x5c]
8001b3bc:	20 3a       	sub	r10,3
8001b3be:	00 00       	add	r0,r0
8001b3c0:	20 77       	sub	r7,7
8001b3c2:	65 65       	ld.w	r5,r2[0x58]
8001b3c4:	6b 20       	ld.w	r0,r5[0x48]
8001b3c6:	3a 00       	mov	r0,-96
8001b3c8:	20 66       	sub	r6,6
8001b3ca:	69 78       	ld.w	r8,r4[0x5c]
8001b3cc:	5f 74       	srpl	r4
8001b3ce:	79 70       	ld.w	r0,r12[0x5c]
8001b3d0:	65 20       	ld.w	r0,r2[0x48]
8001b3d2:	3d 20       	mov	r0,-46
8001b3d4:	30 78       	mov	r8,7
8001b3d6:	30 00       	mov	r0,0
8001b3d8:	20 70       	sub	r0,7
8001b3da:	6f 73       	ld.w	r3,r7[0x5c]
8001b3dc:	5f 61       	srmi	r1
8001b3de:	63 63       	ld.w	r3,r1[0x58]
8001b3e0:	5f 33       	srlo	r3
8001b3e2:	64 20       	ld.w	r0,r2[0x8]
8001b3e4:	3a 00       	mov	r0,-96
8001b3e6:	00 00       	add	r0,r0
8001b3e8:	20 65       	sub	r5,6
8001b3ea:	63 65       	ld.w	r5,r1[0x58]
8001b3ec:	66 78       	ld.w	r8,r3[0x1c]
8001b3ee:	20 3a       	sub	r10,3
8001b3f0:	00 00       	add	r0,r0
8001b3f2:	00 00       	add	r0,r0
8001b3f4:	20 65       	sub	r5,6
8001b3f6:	63 65       	ld.w	r5,r1[0x58]
8001b3f8:	66 79       	ld.w	r9,r3[0x1c]
8001b3fa:	20 3a       	sub	r10,3
8001b3fc:	00 00       	add	r0,r0
8001b3fe:	00 00       	add	r0,r0
8001b400:	20 65       	sub	r5,6
8001b402:	63 65       	ld.w	r5,r1[0x58]
8001b404:	66 7a       	ld.w	r10,r3[0x1c]
8001b406:	20 3a       	sub	r10,3
8001b408:	00 00       	add	r0,r0
8001b40a:	00 00       	add	r0,r0
8001b40c:	20 70       	sub	r0,7
8001b40e:	6f 73       	ld.w	r3,r7[0x5c]
8001b410:	5f 44       	srge	r4
8001b412:	4f 50       	lddpc	r0,8001b5e4 <ubx_process_data+0xf2>
8001b414:	20 3a       	sub	r10,3
8001b416:	00 00       	add	r0,r0
8001b418:	20 6e       	sub	lr,6
8001b41a:	75 6d       	ld.w	sp,r10[0x58]
8001b41c:	20 73       	sub	r3,7
8001b41e:	61 74       	ld.w	r4,r0[0x5c]
8001b420:	20 3a       	sub	r10,3
8001b422:	00 00       	add	r0,r0
8001b424:	4d 53       	lddpc	r3,8001b578 <ubx_process_data+0x86>
8001b426:	47 5f       	lddsp	pc,sp[0x1d4]
8001b428:	4e 41       	lddpc	r1,8001b5b8 <ubx_process_data+0xc6>
8001b42a:	56 5f       	stdsp	sp[0x194],pc
8001b42c:	56 45       	stdsp	sp[0x190],r5
8001b42e:	4c 4e       	lddpc	lr,8001b53c <ubx_process_data+0x4a>
8001b430:	45 44       	lddsp	r4,sp[0x150]
8001b432:	20 00       	sub	r0,0
8001b434:	20 6e       	sub	lr,6
8001b436:	65 64       	ld.w	r4,r2[0x58]
8001b438:	5f 6e       	srmi	lr
8001b43a:	6f 72       	ld.w	r2,r7[0x5c]
8001b43c:	74 68       	ld.w	r8,r10[0x18]
8001b43e:	20 3a       	sub	r10,3
8001b440:	00 00       	add	r0,r0
8001b442:	00 00       	add	r0,r0
8001b444:	20 6e       	sub	lr,6
8001b446:	65 64       	ld.w	r4,r2[0x58]
8001b448:	5f 65       	srmi	r5
8001b44a:	61 73       	ld.w	r3,r0[0x5c]
8001b44c:	74 20       	ld.w	r0,r10[0x8]
8001b44e:	3a 00       	mov	r0,-96
8001b450:	20 6e       	sub	lr,6
8001b452:	65 64       	ld.w	r4,r2[0x58]
8001b454:	5f 64       	srmi	r4
8001b456:	6f 77       	ld.w	r7,r7[0x5c]
8001b458:	6e 20       	ld.w	r0,r7[0x8]
8001b45a:	3a 00       	mov	r0,-96
8001b45c:	20 73       	sub	r3,7
8001b45e:	70 65       	ld.w	r5,r8[0x18]
8001b460:	65 64       	ld.w	r4,r2[0x58]
8001b462:	5f 33       	srlo	r3
8001b464:	64 20       	ld.w	r0,r2[0x8]
8001b466:	3a 00       	mov	r0,-96
8001b468:	20 68       	sub	r8,6
8001b46a:	65 61       	ld.w	r1,r2[0x58]
8001b46c:	64 69       	ld.w	r9,r2[0x18]
8001b46e:	6e 67       	ld.w	r7,r7[0x18]
8001b470:	5f 32       	srlo	r2
8001b472:	64 20       	ld.w	r0,r2[0x8]
8001b474:	3a 00       	mov	r0,-96
8001b476:	00 00       	add	r0,r0
8001b478:	20 73       	sub	r3,7
8001b47a:	70 65       	ld.w	r5,r8[0x18]
8001b47c:	65 64       	ld.w	r4,r2[0x58]
8001b47e:	5f 61       	srmi	r1
8001b480:	63 63       	ld.w	r3,r1[0x58]
8001b482:	75 72       	ld.w	r2,r10[0x5c]
8001b484:	61 63       	ld.w	r3,r0[0x58]
8001b486:	79 20       	ld.w	r0,r12[0x48]
8001b488:	3a 00       	mov	r0,-96
8001b48a:	00 00       	add	r0,r0
8001b48c:	20 68       	sub	r8,6
8001b48e:	65 61       	ld.w	r1,r2[0x58]
8001b490:	64 69       	ld.w	r9,r2[0x18]
8001b492:	6e 67       	ld.w	r7,r7[0x18]
8001b494:	5f 61       	srmi	r1
8001b496:	63 63       	ld.w	r3,r1[0x58]
8001b498:	75 72       	ld.w	r2,r10[0x5c]
8001b49a:	61 63       	ld.w	r3,r0[0x58]
8001b49c:	79 20       	ld.w	r0,r12[0x48]
8001b49e:	3a 00       	mov	r0,-96
8001b4a0:	4d 53       	lddpc	r3,8001b5f4 <ubx_process_data+0x102>
8001b4a2:	47 5f       	lddsp	pc,sp[0x1d4]
8001b4a4:	4e 41       	lddpc	r1,8001b634 <ubx_process_data+0x142>
8001b4a6:	56 5f       	stdsp	sp[0x194],pc
8001b4a8:	53 56       	stdsp	sp[0xd4],r6
8001b4aa:	49 4e       	lddpc	lr,8001b4f8 <ubx_process_data+0x6>
8001b4ac:	46 4f       	lddsp	pc,sp[0x190]
8001b4ae:	2c 20       	sub	r0,-62
8001b4b0:	6e 75       	ld.w	r5,r7[0x1c]
8001b4b2:	6d 43       	ld.w	r3,r6[0x50]
8001b4b4:	68 61       	ld.w	r1,r4[0x18]
8001b4b6:	6e 6e       	ld.w	lr,r7[0x18]
8001b4b8:	65 6c       	ld.w	r12,r2[0x58]
8001b4ba:	3a 00       	mov	r0,-96
8001b4bc:	55 6e       	stdsp	sp[0x158],lr
8001b4be:	65 78       	ld.w	r8,r2[0x5c]
8001b4c0:	70 65       	ld.w	r5,r8[0x18]
8001b4c2:	63 74       	ld.w	r4,r1[0x5c]
8001b4c4:	65 64       	ld.w	r4,r2[0x58]
8001b4c6:	20 4e       	sub	lr,4
8001b4c8:	41 56       	lddsp	r6,sp[0x54]
8001b4ca:	20 6d       	sub	sp,24
8001b4cc:	65 73       	ld.w	r3,r2[0x5c]
8001b4ce:	73 61       	ld.w	r1,r9[0x58]
8001b4d0:	67 65       	ld.w	r5,r3[0x58]
8001b4d2:	20 30       	sub	r0,3
8001b4d4:	78 00       	ld.w	r0,r12[0x0]
8001b4d6:	00 00       	add	r0,r0
8001b4d8:	44 69       	lddsp	r9,sp[0x118]
8001b4da:	73 61       	ld.w	r1,r9[0x58]
8001b4dc:	62 6c       	ld.w	r12,r1[0x18]
8001b4de:	69 6e       	ld.w	lr,r4[0x58]
8001b4e0:	67 20       	ld.w	r0,r3[0x48]
8001b4e2:	4e 41       	lddpc	r1,8001b670 <ubx_process_data+0x17e>
8001b4e4:	56 20       	stdsp	sp[0x188],r0
8001b4e6:	6d 65       	ld.w	r5,r6[0x58]
8001b4e8:	73 73       	ld.w	r3,r9[0x5c]
8001b4ea:	61 67       	ld.w	r7,r0[0x58]
8001b4ec:	65 20       	ld.w	r0,r2[0x48]
8001b4ee:	30 78       	mov	r8,7
	...

8001b4f2 <ubx_process_data>:
Process the new received message, class by class
return true if new position and velocity messages are received, false otherwise
************************************************************************************
*/
bool ubx_process_data(void)
{
8001b4f2:	eb cd 40 e0 	pushm	r5-r7,lr
8001b4f6:	1a 97       	mov	r7,sp
8001b4f8:	20 ad       	sub	sp,40
8001b4fa:	fe f6 0a e6 	ld.w	r6,pc[2790]
8001b4fe:	1e 26       	rsub	r6,pc
	ubx_nav_velned *gpsVelned;
	ubx_nav_SVInfo *gpsSVInfo;
	
	//dbg_print("ubx_process_data\n");
	
	if (ubxclass == UBX_CLASS_ACK)
8001b500:	ec f8 00 60 	ld.w	r8,r6[96]
8001b504:	11 89       	ld.ub	r9,r8[0x0]
8001b506:	30 58       	mov	r8,5
8001b508:	f0 09 18 00 	cp.b	r9,r8
8001b50c:	c0 f1       	brne	8001b52a <ubx_process_data+0x38>
	{
		dbg_print_num(msg_id,10);
8001b50e:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b512:	11 88       	ld.ub	r8,r8[0x0]
8001b514:	30 ab       	mov	r11,10
8001b516:	10 9c       	mov	r12,r8
8001b518:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001b51c:	fe cc 12 5c 	sub	r12,pc,4700
8001b520:	f0 16 00 01 	mcall	r6[4]
		return false;
8001b524:	30 08       	mov	r8,0
8001b526:	e0 8f 05 58 	bral	8001bfd6 <ubx_process_data+0xae4>
	}
 	if (ubxclass == UBX_CLASS_MON)
8001b52a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b52e:	11 89       	ld.ub	r9,r8[0x0]
8001b530:	30 a8       	mov	r8,10
8001b532:	f0 09 18 00 	cp.b	r9,r8
8001b536:	c1 11       	brne	8001b558 <ubx_process_data+0x66>
 	{
 		ubx_mon_rxr_struct *gpsRXR = ubx_GetMonRXR();
8001b538:	f0 16 02 1a 	mcall	r6[2152]
8001b53c:	18 98       	mov	r8,r12
8001b53e:	ef 48 ff ec 	st.w	r7[-20],r8
 		if (gpsRXR)
8001b542:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001b546:	58 08       	cp.w	r8,0
8001b548:	c0 50       	breq	8001b552 <ubx_process_data+0x60>
 		{
 			dbg_print("MSG_MON GPS awake\n");
8001b54a:	fe cc 03 2a 	sub	r12,pc,810
8001b54e:	f0 16 00 01 	mcall	r6[4]
 		}
		 return false;
8001b552:	30 08       	mov	r8,0
8001b554:	e0 8f 05 41 	bral	8001bfd6 <ubx_process_data+0xae4>
 	}
	if (ubxclass == UBX_CLASS_TIM)
8001b558:	ec f8 00 60 	ld.w	r8,r6[96]
8001b55c:	11 89       	ld.ub	r9,r8[0x0]
8001b55e:	30 d8       	mov	r8,13
8001b560:	f0 09 18 00 	cp.b	r9,r8
8001b564:	e0 81 00 89 	brne	8001b676 <ubx_process_data+0x184>
	{
		ubx_tim_tp *gpsTimTP = ubx_GetTimTP();
8001b568:	f0 16 01 51 	mcall	r6[1348]
8001b56c:	18 98       	mov	r8,r12
8001b56e:	ef 48 ff f0 	st.w	r7[-16],r8
		if (gpsTimTP)
8001b572:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001b576:	58 08       	cp.w	r8,0
8001b578:	c2 40       	breq	8001b5c0 <ubx_process_data+0xce>
		{
			loopTimTp = ++loopTimTp % numSkippedMsg;
8001b57a:	ec f8 02 0c 	ld.w	r8,r6[524]
8001b57e:	11 88       	ld.ub	r8,r8[0x0]
8001b580:	2f f8       	sub	r8,-1
8001b582:	5c 58       	castu.b	r8
8001b584:	ec f9 02 0c 	ld.w	r9,r6[524]
8001b588:	b2 88       	st.b	r9[0x0],r8
8001b58a:	ec f8 02 0c 	ld.w	r8,r6[524]
8001b58e:	11 88       	ld.ub	r8,r8[0x0]
8001b590:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b594:	13 89       	ld.ub	r9,r9[0x0]
8001b596:	f0 09 0d 08 	divu	r8,r8,r9
8001b59a:	12 98       	mov	r8,r9
8001b59c:	5c 58       	castu.b	r8
8001b59e:	ec f9 02 0c 	ld.w	r9,r6[524]
8001b5a2:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimTp == 0))
8001b5a4:	ec f8 01 94 	ld.w	r8,r6[404]
8001b5a8:	11 88       	ld.ub	r8,r8[0x0]
8001b5aa:	58 08       	cp.w	r8,0
8001b5ac:	c0 a0       	breq	8001b5c0 <ubx_process_data+0xce>
8001b5ae:	ec f8 02 0c 	ld.w	r8,r6[524]
8001b5b2:	11 88       	ld.ub	r8,r8[0x0]
8001b5b4:	58 08       	cp.w	r8,0
8001b5b6:	c0 51       	brne	8001b5c0 <ubx_process_data+0xce>
			{
				dbg_print("MSG_TIM_TP GPS awake\n");
8001b5b8:	fe cc 03 84 	sub	r12,pc,900
8001b5bc:	f0 16 00 01 	mcall	r6[4]
			}
		}
		ubx_tim_vrfy *gpsTimVrfy = ubx_GetTimVRFY();
8001b5c0:	f0 16 02 1c 	mcall	r6[2160]
8001b5c4:	18 98       	mov	r8,r12
8001b5c6:	ef 48 ff f4 	st.w	r7[-12],r8
		if (gpsTimVrfy)
8001b5ca:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b5ce:	58 08       	cp.w	r8,0
8001b5d0:	c5 00       	breq	8001b670 <ubx_process_data+0x17e>
		{
			loopTimVrfy = ++loopTimVrfy % numSkippedMsg;
8001b5d2:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b5d6:	11 88       	ld.ub	r8,r8[0x0]
8001b5d8:	2f f8       	sub	r8,-1
8001b5da:	5c 58       	castu.b	r8
8001b5dc:	ec f9 01 c4 	ld.w	r9,r6[452]
8001b5e0:	b2 88       	st.b	r9[0x0],r8
8001b5e2:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b5e6:	11 88       	ld.ub	r8,r8[0x0]
8001b5e8:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b5ec:	13 89       	ld.ub	r9,r9[0x0]
8001b5ee:	f0 09 0d 08 	divu	r8,r8,r9
8001b5f2:	12 98       	mov	r8,r9
8001b5f4:	5c 58       	castu.b	r8
8001b5f6:	ec f9 01 c4 	ld.w	r9,r6[452]
8001b5fa:	b2 88       	st.b	r9[0x0],r8
			if((printNavOnDebug)&&(loopTimVrfy == 0))
8001b5fc:	ec f8 01 94 	ld.w	r8,r6[404]
8001b600:	11 88       	ld.ub	r8,r8[0x0]
8001b602:	58 08       	cp.w	r8,0
8001b604:	c3 60       	breq	8001b670 <ubx_process_data+0x17e>
8001b606:	ec f8 01 c4 	ld.w	r8,r6[452]
8001b60a:	11 88       	ld.ub	r8,r8[0x0]
8001b60c:	58 08       	cp.w	r8,0
8001b60e:	c3 11       	brne	8001b670 <ubx_process_data+0x17e>
			{
				dbg_print("MSG_TIM_VRFY");
8001b610:	fe cc 03 c4 	sub	r12,pc,964
8001b614:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b618:	fe cc 03 bc 	sub	r12,pc,956
8001b61c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->itow,10);
8001b620:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b624:	70 48       	ld.w	r8,r8[0x10]
8001b626:	30 ab       	mov	r11,10
8001b628:	10 9c       	mov	r12,r8
8001b62a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" frac :");
8001b62e:	fe cc 03 ca 	sub	r12,pc,970
8001b632:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->frac,10);
8001b636:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b63a:	70 38       	ld.w	r8,r8[0xc]
8001b63c:	30 ab       	mov	r11,10
8001b63e:	10 9c       	mov	r12,r8
8001b640:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaMs :");
8001b644:	fe cc 03 d8 	sub	r12,pc,984
8001b648:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaMs,10);
8001b64c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b650:	70 28       	ld.w	r8,r8[0x8]
8001b652:	30 ab       	mov	r11,10
8001b654:	10 9c       	mov	r12,r8
8001b656:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" deltaNs :");
8001b65a:	fe cc 03 e2 	sub	r12,pc,994
8001b65e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsTimVrfy->deltaNs,10);
8001b662:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001b666:	70 18       	ld.w	r8,r8[0x4]
8001b668:	30 ab       	mov	r11,10
8001b66a:	10 9c       	mov	r12,r8
8001b66c:	f0 16 00 04 	mcall	r6[16]
			}
			
		}
		return false;
8001b670:	30 08       	mov	r8,0
8001b672:	e0 8f 04 b2 	bral	8001bfd6 <ubx_process_data+0xae4>
	}
	 
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_NAV_SETTINGS)
8001b676:	ec f8 00 60 	ld.w	r8,r6[96]
8001b67a:	11 89       	ld.ub	r9,r8[0x0]
8001b67c:	30 68       	mov	r8,6
8001b67e:	f0 09 18 00 	cp.b	r9,r8
8001b682:	c5 b1       	brne	8001b738 <ubx_process_data+0x246>
8001b684:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b688:	11 89       	ld.ub	r9,r8[0x0]
8001b68a:	32 48       	mov	r8,36
8001b68c:	f0 09 18 00 	cp.b	r9,r8
8001b690:	c5 41       	brne	8001b738 <ubx_process_data+0x246>
	{
		ubx_cfg_nav_settings *gpsNavSettings = ubx_GetNavSettings();
8001b692:	f0 16 01 f3 	mcall	r6[1996]
8001b696:	18 98       	mov	r8,r12
8001b698:	ef 48 ff f8 	st.w	r7[-8],r8
		- 5 Sea
		- 6 Airborne with <1g Acceleration
		- 7 Airborne with <2g Acceleration
		- 8 Airborne with <4g Acceleration
		*/
		if(gpsNavSettings)
8001b69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6a0:	58 08       	cp.w	r8,0
8001b6a2:	c1 20       	breq	8001b6c6 <ubx_process_data+0x1d4>
		{
			
			dbg_print("Got engine settings ");
8001b6a4:	fe cc 04 20 	sub	r12,pc,1056
8001b6a8:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsNavSettings->dynModel,16);
8001b6ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6b0:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b6b4:	31 0b       	mov	r11,16
8001b6b6:	10 9c       	mov	r12,r8
8001b6b8:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b6bc:	fe cc 13 fc 	sub	r12,pc,5116
8001b6c0:	f0 16 00 01 	mcall	r6[4]
8001b6c4:	c3 78       	rjmp	8001b732 <ubx_process_data+0x240>
		
		}else{
			if (engine_nav_setting != GPS_ENGINE_NONE && !gpsNavSettings)
8001b6c6:	ec f8 01 e4 	ld.w	r8,r6[484]
8001b6ca:	70 08       	ld.w	r8,r8[0x0]
8001b6cc:	5b f8       	cp.w	r8,-1
8001b6ce:	c2 30       	breq	8001b714 <ubx_process_data+0x222>
8001b6d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6d4:	58 08       	cp.w	r8,0
8001b6d6:	c1 f1       	brne	8001b714 <ubx_process_data+0x222>
			{
				if(gpsNavSettings->dynModel != engine_nav_setting)
8001b6d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001b6dc:	f1 38 00 21 	ld.ub	r8,r8[33]
8001b6e0:	10 99       	mov	r9,r8
8001b6e2:	ec f8 01 e4 	ld.w	r8,r6[484]
8001b6e6:	70 08       	ld.w	r8,r8[0x0]
8001b6e8:	10 39       	cp.w	r9,r8
8001b6ea:	c1 50       	breq	8001b714 <ubx_process_data+0x222>
				{
					nav_settings.dynModel = engine_nav_setting;
8001b6ec:	ec f8 01 e4 	ld.w	r8,r6[484]
8001b6f0:	70 08       	ld.w	r8,r8[0x0]
8001b6f2:	5c 58       	castu.b	r8
8001b6f4:	ec f9 03 b8 	ld.w	r9,r6[952]
8001b6f8:	f3 68 00 21 	st.b	r9[33],r8
					dbg_print("Send Nav settings");
8001b6fc:	fe cc 04 60 	sub	r12,pc,1120
8001b700:	f0 16 00 01 	mcall	r6[4]
					ubx_send_message_nav_settings(UBX_CLASS_CFG,MSG_CFG_NAV_SETTINGS, &nav_settings,sizeof(nav_settings));
8001b704:	ec f8 03 b8 	ld.w	r8,r6[952]
8001b708:	32 49       	mov	r9,36
8001b70a:	10 9a       	mov	r10,r8
8001b70c:	32 4b       	mov	r11,36
8001b70e:	30 6c       	mov	r12,6
8001b710:	f0 16 01 03 	mcall	r6[1036]
				}				
			}
			dbg_print("No engine settings received ");
8001b714:	fe cc 04 64 	sub	r12,pc,1124
8001b718:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b71c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b720:	11 88       	ld.ub	r8,r8[0x0]
8001b722:	31 0b       	mov	r11,16
8001b724:	10 9c       	mov	r12,r8
8001b726:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b72a:	fe cc 14 6a 	sub	r12,pc,5226
8001b72e:	f0 16 00 01 	mcall	r6[4]
		}
		return false;
8001b732:	30 08       	mov	r8,0
8001b734:	e0 8f 04 51 	bral	8001bfd6 <ubx_process_data+0xae4>
	}
	
	if (ubxclass == UBX_CLASS_CFG && msg_id == MSG_CFG_SET_RATE)
8001b738:	ec f8 00 60 	ld.w	r8,r6[96]
8001b73c:	11 89       	ld.ub	r9,r8[0x0]
8001b73e:	30 68       	mov	r8,6
8001b740:	f0 09 18 00 	cp.b	r9,r8
8001b744:	c3 11       	brne	8001b7a6 <ubx_process_data+0x2b4>
8001b746:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b74a:	11 89       	ld.ub	r9,r8[0x0]
8001b74c:	30 18       	mov	r8,1
8001b74e:	f0 09 18 00 	cp.b	r9,r8
8001b752:	c2 a1       	brne	8001b7a6 <ubx_process_data+0x2b4>
	{
		ubx_cfg_msg_rate *gpsMsgRate;
		gpsMsgRate = ubx_GetMsgRate();
8001b754:	f0 16 01 99 	mcall	r6[1636]
8001b758:	18 98       	mov	r8,r12
8001b75a:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if (gpsMsgRate)
8001b75e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b762:	58 08       	cp.w	r8,0
8001b764:	c1 e0       	breq	8001b7a0 <ubx_process_data+0x2ae>
		{
			dbg_print("Message CFG Rate 0x");
8001b766:	fe cc 04 96 	sub	r12,pc,1174
8001b76a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(gpsMsgRate->msg_class,16);
8001b76e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b772:	11 a8       	ld.ub	r8,r8[0x2]
8001b774:	31 0b       	mov	r11,16
8001b776:	10 9c       	mov	r12,r8
8001b778:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->msg_id_rate,16);
8001b77c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b780:	11 98       	ld.ub	r8,r8[0x1]
8001b782:	31 0b       	mov	r11,16
8001b784:	10 9c       	mov	r12,r8
8001b786:	f0 16 00 04 	mcall	r6[16]
			dbg_print_num(gpsMsgRate->rate,10);
8001b78a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001b78e:	11 88       	ld.ub	r8,r8[0x0]
8001b790:	30 ab       	mov	r11,10
8001b792:	10 9c       	mov	r12,r8
8001b794:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001b798:	fe cc 14 d8 	sub	r12,pc,5336
8001b79c:	f0 16 00 01 	mcall	r6[4]
		}		
		return false;
8001b7a0:	30 08       	mov	r8,0
8001b7a2:	e0 8f 04 1a 	bral	8001bfd6 <ubx_process_data+0xae4>
	}
	
	if (ubxclass != UBX_CLASS_NAV)
8001b7a6:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7aa:	11 89       	ld.ub	r9,r8[0x0]
8001b7ac:	30 18       	mov	r8,1
8001b7ae:	f0 09 18 00 	cp.b	r9,r8
8001b7b2:	c5 10       	breq	8001b854 <ubx_process_data+0x362>
	{
		dbg_print("Unexpected message 0x");
8001b7b4:	fe cc 04 d0 	sub	r12,pc,1232
8001b7b8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(ubxclass,16);
8001b7bc:	ec f8 00 60 	ld.w	r8,r6[96]
8001b7c0:	11 88       	ld.ub	r8,r8[0x0]
8001b7c2:	31 0b       	mov	r11,16
8001b7c4:	10 9c       	mov	r12,r8
8001b7c6:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x 0x");
8001b7ca:	fe cc 04 ce 	sub	r12,pc,1230
8001b7ce:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001b7d2:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b7d6:	11 88       	ld.ub	r8,r8[0x0]
8001b7d8:	30 ab       	mov	r11,10
8001b7da:	10 9c       	mov	r12,r8
8001b7dc:	f0 16 00 04 	mcall	r6[16]
		dbg_print("02x\n");
8001b7e0:	fe cc 04 dc 	sub	r12,pc,1244
8001b7e4:	f0 16 00 01 	mcall	r6[4]
		if (++disable_counter == 0)
8001b7e8:	ec f8 01 a8 	ld.w	r8,r6[424]
8001b7ec:	11 88       	ld.ub	r8,r8[0x0]
8001b7ee:	2f f8       	sub	r8,-1
8001b7f0:	5c 58       	castu.b	r8
8001b7f2:	ec f9 01 a8 	ld.w	r9,r6[424]
8001b7f6:	b2 88       	st.b	r9[0x0],r8
8001b7f8:	ec f8 01 a8 	ld.w	r8,r6[424]
8001b7fc:	11 88       	ld.ub	r8,r8[0x0]
8001b7fe:	58 08       	cp.w	r8,0
8001b800:	c2 71       	brne	8001b84e <ubx_process_data+0x35c>
			// disable future sends of this message id, but
			// only do this every 256 messages, as some
			// message types can't be disabled and we don't
			// want to get into an ack war
			
			dbg_print("Disabling message 0x");
8001b802:	fe cc 04 f6 	sub	r12,pc,1270
8001b806:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(ubxclass,16);
8001b80a:	ec f8 00 60 	ld.w	r8,r6[96]
8001b80e:	11 88       	ld.ub	r8,r8[0x0]
8001b810:	31 0b       	mov	r11,16
8001b812:	10 9c       	mov	r12,r8
8001b814:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x 0x");
8001b818:	fe cc 05 1c 	sub	r12,pc,1308
8001b81c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001b820:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b824:	11 88       	ld.ub	r8,r8[0x0]
8001b826:	31 0b       	mov	r11,16
8001b828:	10 9c       	mov	r12,r8
8001b82a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("02x\n");
8001b82e:	fe cc 05 2a 	sub	r12,pc,1322
8001b832:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(ubxclass, msg_id, 0);
8001b836:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b83a:	11 88       	ld.ub	r8,r8[0x0]
8001b83c:	10 99       	mov	r9,r8
8001b83e:	ec f8 00 60 	ld.w	r8,r6[96]
8001b842:	11 88       	ld.ub	r8,r8[0x0]
8001b844:	30 0a       	mov	r10,0
8001b846:	12 9b       	mov	r11,r9
8001b848:	10 9c       	mov	r12,r8
8001b84a:	f0 16 00 5f 	mcall	r6[380]
		}
		return false;
8001b84e:	30 08       	mov	r8,0
8001b850:	e0 8f 03 c3 	bral	8001bfd6 <ubx_process_data+0xae4>
	}
	
	// Class NAV:
	switch (msg_id)
8001b854:	ec f8 00 5c 	ld.w	r8,r6[92]
8001b858:	11 88       	ld.ub	r8,r8[0x0]
8001b85a:	58 68       	cp.w	r8,6
8001b85c:	e0 80 01 6f 	breq	8001bb3a <ubx_process_data+0x648>
8001b860:	e0 89 00 09 	brgt	8001b872 <ubx_process_data+0x380>
8001b864:	58 28       	cp.w	r8,2
8001b866:	c0 f0       	breq	8001b884 <ubx_process_data+0x392>
8001b868:	58 38       	cp.w	r8,3
8001b86a:	e0 80 01 01 	breq	8001ba6c <ubx_process_data+0x57a>
8001b86e:	e0 8f 03 63 	bral	8001bf34 <ubx_process_data+0xa42>
8001b872:	59 28       	cp.w	r8,18
8001b874:	e0 80 02 2c 	breq	8001bccc <ubx_process_data+0x7da>
8001b878:	e0 48 00 30 	cp.w	r8,48
8001b87c:	e0 80 03 3e 	breq	8001bef8 <ubx_process_data+0xa06>
8001b880:	e0 8f 03 5a 	bral	8001bf34 <ubx_process_data+0xa42>
	{
	case MSG_NAV_POSLLH:
		gpsPosllh = ubx_GetPosllh();
8001b884:	f0 16 01 7b 	mcall	r6[1516]
8001b888:	18 98       	mov	r8,r12
8001b88a:	ef 48 ff d8 	st.w	r7[-40],r8
		if (gpsPosllh)
8001b88e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b892:	58 08       	cp.w	r8,0
8001b894:	e0 80 03 85 	breq	8001bf9e <ubx_process_data+0xaac>
		{
			loopPosllh = ++loopPosllh % numSkippedMsg;
8001b898:	ec f8 01 fc 	ld.w	r8,r6[508]
8001b89c:	11 88       	ld.ub	r8,r8[0x0]
8001b89e:	2f f8       	sub	r8,-1
8001b8a0:	5c 58       	castu.b	r8
8001b8a2:	ec f9 01 fc 	ld.w	r9,r6[508]
8001b8a6:	b2 88       	st.b	r9[0x0],r8
8001b8a8:	ec f8 01 fc 	ld.w	r8,r6[508]
8001b8ac:	11 88       	ld.ub	r8,r8[0x0]
8001b8ae:	ec f9 01 a4 	ld.w	r9,r6[420]
8001b8b2:	13 89       	ld.ub	r9,r9[0x0]
8001b8b4:	f0 09 0d 08 	divu	r8,r8,r9
8001b8b8:	12 98       	mov	r8,r9
8001b8ba:	5c 58       	castu.b	r8
8001b8bc:	ec f9 01 fc 	ld.w	r9,r6[508]
8001b8c0:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopPosllh == 0))
8001b8c2:	ec f8 01 94 	ld.w	r8,r6[404]
8001b8c6:	11 88       	ld.ub	r8,r8[0x0]
8001b8c8:	58 08       	cp.w	r8,0
8001b8ca:	c5 b0       	breq	8001b980 <ubx_process_data+0x48e>
8001b8cc:	ec f8 01 fc 	ld.w	r8,r6[508]
8001b8d0:	11 88       	ld.ub	r8,r8[0x0]
8001b8d2:	58 08       	cp.w	r8,0
8001b8d4:	c5 61       	brne	8001b980 <ubx_process_data+0x48e>
			{
				dbg_print("MSG_NAV_POSLLH");
8001b8d6:	fe cc 05 b2 	sub	r12,pc,1458
8001b8da:	f0 16 00 01 	mcall	r6[4]
				dbg_print(" itow :");
8001b8de:	fe cc 06 82 	sub	r12,pc,1666
8001b8e2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->itow,10);
8001b8e6:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b8ea:	70 68       	ld.w	r8,r8[0x18]
8001b8ec:	30 ab       	mov	r11,10
8001b8ee:	10 9c       	mov	r12,r8
8001b8f0:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" longitude :");
8001b8f4:	fe cc 05 c0 	sub	r12,pc,1472
8001b8f8:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->longitude,10);
8001b8fc:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b900:	70 58       	ld.w	r8,r8[0x14]
8001b902:	30 ab       	mov	r11,10
8001b904:	10 9c       	mov	r12,r8
8001b906:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" latitude :");
8001b90a:	fe cc 05 c6 	sub	r12,pc,1478
8001b90e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->latitude,10);
8001b912:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b916:	70 48       	ld.w	r8,r8[0x10]
8001b918:	30 ab       	mov	r11,10
8001b91a:	10 9c       	mov	r12,r8
8001b91c:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_ellips :");
8001b920:	fe cc 05 d0 	sub	r12,pc,1488
8001b924:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_ellipsoid,10);
8001b928:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b92c:	70 38       	ld.w	r8,r8[0xc]
8001b92e:	30 ab       	mov	r11,10
8001b930:	10 9c       	mov	r12,r8
8001b932:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" alt_msl :");
8001b936:	fe cc 05 d6 	sub	r12,pc,1494
8001b93a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->altitude_msl,10);
8001b93e:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b942:	70 28       	ld.w	r8,r8[0x8]
8001b944:	30 ab       	mov	r11,10
8001b946:	10 9c       	mov	r12,r8
8001b948:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" horz_acc :");
8001b94c:	fe cc 05 e0 	sub	r12,pc,1504
8001b950:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->horizontal_accuracy,10);
8001b954:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b958:	70 18       	ld.w	r8,r8[0x4]
8001b95a:	30 ab       	mov	r11,10
8001b95c:	10 9c       	mov	r12,r8
8001b95e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" vert_acc :");
8001b962:	fe cc 05 ea 	sub	r12,pc,1514
8001b966:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsPosllh->vertical_accuracy,10);
8001b96a:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b96e:	70 08       	ld.w	r8,r8[0x0]
8001b970:	30 ab       	mov	r11,10
8001b972:	10 9c       	mov	r12,r8
8001b974:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001b978:	fe cc 16 b8 	sub	r12,pc,5816
8001b97c:	f0 16 00 01 	mcall	r6[4]
			}
			
			centralData->GPS_data.timegps = gpsPosllh->itow;
8001b980:	ec f8 00 00 	ld.w	r8,r6[0]
8001b984:	70 08       	ld.w	r8,r8[0x0]
8001b986:	ee f9 ff d8 	ld.w	r9,r7[-40]
8001b98a:	72 69       	ld.w	r9,r9[0x18]
8001b98c:	f1 49 07 98 	st.w	r8[1944],r9
			centralData->GPS_data.longitude = gpsPosllh->longitude / 10000000.0;
8001b990:	ec f8 00 00 	ld.w	r8,r6[0]
8001b994:	70 05       	ld.w	r5,r8[0x0]
8001b996:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b99a:	70 58       	ld.w	r8,r8[0x14]
8001b99c:	10 9c       	mov	r12,r8
8001b99e:	f0 16 00 1a 	mcall	r6[104]
8001b9a2:	30 08       	mov	r8,0
8001b9a4:	e0 69 12 d0 	mov	r9,4816
8001b9a8:	ea 19 41 63 	orh	r9,0x4163
8001b9ac:	f0 16 00 0c 	mcall	r6[48]
8001b9b0:	14 98       	mov	r8,r10
8001b9b2:	16 99       	mov	r9,r11
8001b9b4:	ea e9 07 58 	st.d	r5[1880],r8
			centralData->GPS_data.latitude = gpsPosllh->latitude / 10000000.0;
8001b9b8:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9bc:	70 05       	ld.w	r5,r8[0x0]
8001b9be:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9c2:	70 48       	ld.w	r8,r8[0x10]
8001b9c4:	10 9c       	mov	r12,r8
8001b9c6:	f0 16 00 1a 	mcall	r6[104]
8001b9ca:	30 08       	mov	r8,0
8001b9cc:	e0 69 12 d0 	mov	r9,4816
8001b9d0:	ea 19 41 63 	orh	r9,0x4163
8001b9d4:	f0 16 00 0c 	mcall	r6[48]
8001b9d8:	14 98       	mov	r8,r10
8001b9da:	16 99       	mov	r9,r11
8001b9dc:	ea e9 07 50 	st.d	r5[1872],r8
			centralData->GPS_data.alt_elips = ((float)gpsPosllh->altitude_ellipsoid) / 1000.0;
8001b9e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001b9e4:	70 05       	ld.w	r5,r8[0x0]
8001b9e6:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001b9ea:	70 38       	ld.w	r8,r8[0xc]
8001b9ec:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001b9f0:	fc 1b 44 7a 	movh	r11,0x447a
8001b9f4:	10 9c       	mov	r12,r8
8001b9f6:	f0 16 00 0a 	mcall	r6[40]
8001b9fa:	18 98       	mov	r8,r12
8001b9fc:	eb 48 07 64 	st.w	r5[1892],r8
			centralData->GPS_data.altitude = ((float)gpsPosllh->altitude_msl) / 1000.0;
8001ba00:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba04:	70 05       	ld.w	r5,r8[0x0]
8001ba06:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba0a:	70 28       	ld.w	r8,r8[0x8]
8001ba0c:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001ba10:	fc 1b 44 7a 	movh	r11,0x447a
8001ba14:	10 9c       	mov	r12,r8
8001ba16:	f0 16 00 0a 	mcall	r6[40]
8001ba1a:	18 98       	mov	r8,r12
8001ba1c:	eb 48 07 60 	st.w	r5[1888],r8
			centralData->GPS_data.horizontalAccuracy = ((float)gpsPosllh->horizontal_accuracy) / 1000.0;
8001ba20:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba24:	70 05       	ld.w	r5,r8[0x0]
8001ba26:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba2a:	70 18       	ld.w	r8,r8[0x4]
8001ba2c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba30:	fc 1b 44 7a 	movh	r11,0x447a
8001ba34:	10 9c       	mov	r12,r8
8001ba36:	f0 16 00 0a 	mcall	r6[40]
8001ba3a:	18 98       	mov	r8,r12
8001ba3c:	eb 48 07 80 	st.w	r5[1920],r8
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
8001ba40:	ec f8 00 00 	ld.w	r8,r6[0]
8001ba44:	70 05       	ld.w	r5,r8[0x0]
8001ba46:	ee f8 ff d8 	ld.w	r8,r7[-40]
8001ba4a:	70 08       	ld.w	r8,r8[0x0]
8001ba4c:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001ba50:	fc 1b 44 7a 	movh	r11,0x447a
8001ba54:	10 9c       	mov	r12,r8
8001ba56:	f0 16 00 0a 	mcall	r6[40]
8001ba5a:	18 98       	mov	r8,r12
8001ba5c:	eb 48 07 84 	st.w	r5[1924],r8
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
8001ba60:	ec f9 02 5c 	ld.w	r9,r6[604]
8001ba64:	30 18       	mov	r8,1
8001ba66:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001ba68:	e0 8f 02 a2 	bral	8001bfac <ubx_process_data+0xaba>
	case MSG_NAV_STATUS:
		gpsStatus = ubx_GetStatus();
8001ba6c:	f0 16 01 55 	mcall	r6[1364]
8001ba70:	18 98       	mov	r8,r12
8001ba72:	ef 48 ff dc 	st.w	r7[-36],r8
		
		if (gpsStatus)
8001ba76:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001ba7a:	58 08       	cp.w	r8,0
8001ba7c:	e0 80 02 93 	breq	8001bfa2 <ubx_process_data+0xab0>
		{
			loopStatus = ++loopStatus % numSkippedMsg;
8001ba80:	ec f8 01 d8 	ld.w	r8,r6[472]
8001ba84:	11 88       	ld.ub	r8,r8[0x0]
8001ba86:	2f f8       	sub	r8,-1
8001ba88:	5c 58       	castu.b	r8
8001ba8a:	ec f9 01 d8 	ld.w	r9,r6[472]
8001ba8e:	b2 88       	st.b	r9[0x0],r8
8001ba90:	ec f8 01 d8 	ld.w	r8,r6[472]
8001ba94:	11 88       	ld.ub	r8,r8[0x0]
8001ba96:	ec f9 01 a4 	ld.w	r9,r6[420]
8001ba9a:	13 89       	ld.ub	r9,r9[0x0]
8001ba9c:	f0 09 0d 08 	divu	r8,r8,r9
8001baa0:	12 98       	mov	r8,r9
8001baa2:	5c 58       	castu.b	r8
8001baa4:	ec f9 01 d8 	ld.w	r9,r6[472]
8001baa8:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopStatus == 0))
8001baaa:	ec f8 01 94 	ld.w	r8,r6[404]
8001baae:	11 88       	ld.ub	r8,r8[0x0]
8001bab0:	58 08       	cp.w	r8,0
8001bab2:	c2 10       	breq	8001baf4 <ubx_process_data+0x602>
8001bab4:	ec f8 01 d8 	ld.w	r8,r6[472]
8001bab8:	11 88       	ld.ub	r8,r8[0x0]
8001baba:	58 08       	cp.w	r8,0
8001babc:	c1 c1       	brne	8001baf4 <ubx_process_data+0x602>
			{
				dbg_print("MSG_STATUS fix_type = 0x");
8001babe:	fe cc 07 3a 	sub	r12,pc,1850
8001bac2:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->fix_type,16);
8001bac6:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001baca:	f1 38 00 0b 	ld.ub	r8,r8[11]
8001bace:	31 0b       	mov	r11,16
8001bad0:	10 9c       	mov	r12,r8
8001bad2:	f0 16 00 04 	mcall	r6[16]
//	 			dbg_print(" fix_status = 0x");
//	 			dbg_print_num(gpsStatus->fix_status,16);
				dbg_print(", uptime =");
8001bad6:	fe cc 07 36 	sub	r12,pc,1846
8001bada:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsStatus->uptime,10);
8001bade:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001bae2:	70 08       	ld.w	r8,r8[0x0]
8001bae4:	30 ab       	mov	r11,10
8001bae6:	10 9c       	mov	r12,r8
8001bae8:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001baec:	fe cc 18 2c 	sub	r12,pc,6188
8001baf0:	f0 16 00 01 	mcall	r6[4]
			}		
		
			//next_fix = (gpsStatus->fix_status & NAV_STATUS_FIX_VALID) && (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
8001baf4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001baf8:	f1 39 00 0b 	ld.ub	r9,r8[11]
8001bafc:	30 38       	mov	r8,3
8001bafe:	f0 09 18 00 	cp.b	r9,r8
8001bb02:	5f 08       	sreq	r8
8001bb04:	5c 58       	castu.b	r8
8001bb06:	ec f9 01 f0 	ld.w	r9,r6[496]
8001bb0a:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bb0c:	ec f8 01 f0 	ld.w	r8,r6[496]
8001bb10:	11 88       	ld.ub	r8,r8[0x0]
8001bb12:	ec 18 00 01 	eorl	r8,0x1
8001bb16:	5c 58       	castu.b	r8
8001bb18:	c0 90       	breq	8001bb2a <ubx_process_data+0x638>
			{
				centralData->GPS_data.status = NO_FIX;
8001bb1a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb1e:	70 09       	ld.w	r9,r8[0x0]
8001bb20:	30 18       	mov	r8,1
8001bb22:	f3 68 07 9c 	st.b	r9[1948],r8
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bb26:	e0 8f 02 43 	bral	8001bfac <ubx_process_data+0xaba>
			next_fix = (gpsStatus->fix_type == GPS_FIX_TYPE_3DFIX);
			if (!next_fix)
			{
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bb2a:	ec f8 00 00 	ld.w	r8,r6[0]
8001bb2e:	70 09       	ld.w	r9,r8[0x0]
8001bb30:	30 28       	mov	r8,2
8001bb32:	f3 68 07 9c 	st.b	r9[1948],r8
			}
		}
		break;
8001bb36:	e0 8f 02 3b 	bral	8001bfac <ubx_process_data+0xaba>
	case MSG_NAV_SOL:
		gpsSolution = ubx_GetSolution();
8001bb3a:	f0 16 01 85 	mcall	r6[1556]
8001bb3e:	18 98       	mov	r8,r12
8001bb40:	ef 48 ff e0 	st.w	r7[-32],r8
		
		if (gpsSolution)
8001bb44:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bb48:	58 08       	cp.w	r8,0
8001bb4a:	e0 80 02 2e 	breq	8001bfa6 <ubx_process_data+0xab4>
		{
			loopSolution = ++loopSolution % numSkippedMsg;
8001bb4e:	ec f8 01 d0 	ld.w	r8,r6[464]
8001bb52:	11 88       	ld.ub	r8,r8[0x0]
8001bb54:	2f f8       	sub	r8,-1
8001bb56:	5c 58       	castu.b	r8
8001bb58:	ec f9 01 d0 	ld.w	r9,r6[464]
8001bb5c:	b2 88       	st.b	r9[0x0],r8
8001bb5e:	ec f8 01 d0 	ld.w	r8,r6[464]
8001bb62:	11 88       	ld.ub	r8,r8[0x0]
8001bb64:	ec f9 01 a4 	ld.w	r9,r6[420]
8001bb68:	13 89       	ld.ub	r9,r9[0x0]
8001bb6a:	f0 09 0d 08 	divu	r8,r8,r9
8001bb6e:	12 98       	mov	r8,r9
8001bb70:	5c 58       	castu.b	r8
8001bb72:	ec f9 01 d0 	ld.w	r9,r6[464]
8001bb76:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopSolution == 0))
8001bb78:	ec f8 01 94 	ld.w	r8,r6[404]
8001bb7c:	11 88       	ld.ub	r8,r8[0x0]
8001bb7e:	58 08       	cp.w	r8,0
8001bb80:	c7 40       	breq	8001bc68 <ubx_process_data+0x776>
8001bb82:	ec f8 01 d0 	ld.w	r8,r6[464]
8001bb86:	11 88       	ld.ub	r8,r8[0x0]
8001bb88:	58 08       	cp.w	r8,0
8001bb8a:	c6 f1       	brne	8001bc68 <ubx_process_data+0x776>
			{
				dbg_print("MSG_SOL ");
8001bb8c:	fe cc 07 e0 	sub	r12,pc,2016
8001bb90:	f0 16 00 01 	mcall	r6[4]
				dbg_print("itow :");
8001bb94:	fe cc 07 dc 	sub	r12,pc,2012
8001bb98:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->itow,10);
8001bb9c:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bba0:	70 c8       	ld.w	r8,r8[0x30]
8001bba2:	30 ab       	mov	r11,10
8001bba4:	10 9c       	mov	r12,r8
8001bba6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" week :");
8001bbaa:	fe cc 07 ea 	sub	r12,pc,2026
8001bbae:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->week,10);
8001bbb2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbb6:	f1 08 00 2a 	ld.sh	r8,r8[42]
8001bbba:	30 ab       	mov	r11,10
8001bbbc:	10 9c       	mov	r12,r8
8001bbbe:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" fix_type = 0x0");
8001bbc2:	fe cc 07 fa 	sub	r12,pc,2042
8001bbc6:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->fix_type,16);
8001bbca:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbce:	f1 38 00 29 	ld.ub	r8,r8[41]
8001bbd2:	31 0b       	mov	r11,16
8001bbd4:	10 9c       	mov	r12,r8
8001bbd6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_acc_3d :");
8001bbda:	fe cc 08 02 	sub	r12,pc,2050
8001bbde:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_accuracy_3d,10);
8001bbe2:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbe6:	70 68       	ld.w	r8,r8[0x18]
8001bbe8:	30 ab       	mov	r11,10
8001bbea:	10 9c       	mov	r12,r8
8001bbec:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefx :");
8001bbf0:	fe cc 08 08 	sub	r12,pc,2056
8001bbf4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_x,10);
8001bbf8:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bbfc:	70 98       	ld.w	r8,r8[0x24]
8001bbfe:	30 ab       	mov	r11,10
8001bc00:	10 9c       	mov	r12,r8
8001bc02:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefy :");
8001bc06:	fe cc 08 12 	sub	r12,pc,2066
8001bc0a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_y,10);
8001bc0e:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc12:	70 88       	ld.w	r8,r8[0x20]
8001bc14:	30 ab       	mov	r11,10
8001bc16:	10 9c       	mov	r12,r8
8001bc18:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ecefz :");
8001bc1c:	fe cc 08 1c 	sub	r12,pc,2076
8001bc20:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->ecef_z,10);
8001bc24:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc28:	70 78       	ld.w	r8,r8[0x1c]
8001bc2a:	30 ab       	mov	r11,10
8001bc2c:	10 9c       	mov	r12,r8
8001bc2e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" pos_DOP :");
8001bc32:	fe cc 08 26 	sub	r12,pc,2086
8001bc36:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->position_DOP,10);
8001bc3a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc3e:	90 38       	ld.sh	r8,r8[0x6]
8001bc40:	5c 78       	castu.h	r8
8001bc42:	30 ab       	mov	r11,10
8001bc44:	10 9c       	mov	r12,r8
8001bc46:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" num sat :");
8001bc4a:	fe cc 08 32 	sub	r12,pc,2098
8001bc4e:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSolution->satellites,10);
8001bc52:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc56:	11 c8       	ld.ub	r8,r8[0x4]
8001bc58:	30 ab       	mov	r11,10
8001bc5a:	10 9c       	mov	r12,r8
8001bc5c:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bc60:	fe cc 19 a0 	sub	r12,pc,6560
8001bc64:	f0 16 00 01 	mcall	r6[4]
			}
			//next_fix = (gpsSolution->fix_status & NAV_STATUS_FIX_VALID) && (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
			next_fix = (gpsSolution->fix_type == GPS_FIX_TYPE_3DFIX);
8001bc68:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bc6c:	f1 39 00 29 	ld.ub	r9,r8[41]
8001bc70:	30 38       	mov	r8,3
8001bc72:	f0 09 18 00 	cp.b	r9,r8
8001bc76:	5f 08       	sreq	r8
8001bc78:	5c 58       	castu.b	r8
8001bc7a:	ec f9 01 f0 	ld.w	r9,r6[496]
8001bc7e:	b2 88       	st.b	r9[0x0],r8
			if (!next_fix)
8001bc80:	ec f8 01 f0 	ld.w	r8,r6[496]
8001bc84:	11 88       	ld.ub	r8,r8[0x0]
8001bc86:	ec 18 00 01 	eorl	r8,0x1
8001bc8a:	5c 58       	castu.b	r8
8001bc8c:	c0 80       	breq	8001bc9c <ubx_process_data+0x7aa>
			{
				centralData->GPS_data.status = NO_FIX;
8001bc8e:	ec f8 00 00 	ld.w	r8,r6[0]
8001bc92:	70 09       	ld.w	r9,r8[0x0]
8001bc94:	30 18       	mov	r8,1
8001bc96:	f3 68 07 9c 	st.b	r9[1948],r8
8001bc9a:	c0 78       	rjmp	8001bca8 <ubx_process_data+0x7b6>
			}else{
				centralData->GPS_data.status = GPS_OK;
8001bc9c:	ec f8 00 00 	ld.w	r8,r6[0]
8001bca0:	70 09       	ld.w	r9,r8[0x0]
8001bca2:	30 28       	mov	r8,2
8001bca4:	f3 68 07 9c 	st.b	r9[1948],r8
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
8001bca8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcac:	70 09       	ld.w	r9,r8[0x0]
8001bcae:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcb2:	11 c8       	ld.ub	r8,r8[0x4]
8001bcb4:	f3 68 07 90 	st.b	r9[1936],r8
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
8001bcb8:	ec f8 00 00 	ld.w	r8,r6[0]
8001bcbc:	70 09       	ld.w	r9,r8[0x0]
8001bcbe:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001bcc2:	90 38       	ld.sh	r8,r8[0x6]
8001bcc4:	f3 58 07 92 	st.h	r9[1938],r8
		}
		break;
8001bcc8:	e0 8f 01 72 	bral	8001bfac <ubx_process_data+0xaba>
	case MSG_NAV_VELNED:
		gpsVelned = ubx_GetVelned();
8001bccc:	f0 16 01 66 	mcall	r6[1432]
8001bcd0:	18 98       	mov	r8,r12
8001bcd2:	ef 48 ff e4 	st.w	r7[-28],r8
		
		if (gpsVelned)
8001bcd6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bcda:	58 08       	cp.w	r8,0
8001bcdc:	e0 80 01 67 	breq	8001bfaa <ubx_process_data+0xab8>
		{
			loopVelned = ++loopVelned % numSkippedMsg;
8001bce0:	ec f8 01 dc 	ld.w	r8,r6[476]
8001bce4:	11 88       	ld.ub	r8,r8[0x0]
8001bce6:	2f f8       	sub	r8,-1
8001bce8:	5c 58       	castu.b	r8
8001bcea:	ec f9 01 dc 	ld.w	r9,r6[476]
8001bcee:	b2 88       	st.b	r9[0x0],r8
8001bcf0:	ec f8 01 dc 	ld.w	r8,r6[476]
8001bcf4:	11 88       	ld.ub	r8,r8[0x0]
8001bcf6:	ec f9 01 a4 	ld.w	r9,r6[420]
8001bcfa:	13 89       	ld.ub	r9,r9[0x0]
8001bcfc:	f0 09 0d 08 	divu	r8,r8,r9
8001bd00:	12 98       	mov	r8,r9
8001bd02:	5c 58       	castu.b	r8
8001bd04:	ec f9 01 dc 	ld.w	r9,r6[476]
8001bd08:	b2 88       	st.b	r9[0x0],r8
			if (printNavOnDebug && (loopVelned == 0))
8001bd0a:	ec f8 01 94 	ld.w	r8,r6[404]
8001bd0e:	11 88       	ld.ub	r8,r8[0x0]
8001bd10:	58 08       	cp.w	r8,0
8001bd12:	c6 60       	breq	8001bdde <ubx_process_data+0x8ec>
8001bd14:	ec f8 01 dc 	ld.w	r8,r6[476]
8001bd18:	11 88       	ld.ub	r8,r8[0x0]
8001bd1a:	58 08       	cp.w	r8,0
8001bd1c:	c6 11       	brne	8001bdde <ubx_process_data+0x8ec>
			{
			
				dbg_print("MSG_NAV_VELNED ");
8001bd1e:	fe cc 08 fa 	sub	r12,pc,2298
8001bd22:	f0 16 00 01 	mcall	r6[4]
		
				dbg_print("itow :");
8001bd26:	fe cc 09 6e 	sub	r12,pc,2414
8001bd2a:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->itow,10);
8001bd2e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd32:	70 88       	ld.w	r8,r8[0x20]
8001bd34:	30 ab       	mov	r11,10
8001bd36:	10 9c       	mov	r12,r8
8001bd38:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_north :");
8001bd3c:	fe cc 09 08 	sub	r12,pc,2312
8001bd40:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_north,10);
8001bd44:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd48:	70 78       	ld.w	r8,r8[0x1c]
8001bd4a:	30 ab       	mov	r11,10
8001bd4c:	10 9c       	mov	r12,r8
8001bd4e:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_east :");
8001bd52:	fe cc 09 0e 	sub	r12,pc,2318
8001bd56:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_east,10);
8001bd5a:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd5e:	70 68       	ld.w	r8,r8[0x18]
8001bd60:	30 ab       	mov	r11,10
8001bd62:	10 9c       	mov	r12,r8
8001bd64:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" ned_down :");
8001bd68:	fe cc 09 18 	sub	r12,pc,2328
8001bd6c:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->ned_down,10);
8001bd70:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd74:	70 58       	ld.w	r8,r8[0x14]
8001bd76:	30 ab       	mov	r11,10
8001bd78:	10 9c       	mov	r12,r8
8001bd7a:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_3d :");
8001bd7e:	fe cc 09 22 	sub	r12,pc,2338
8001bd82:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_3d,10);
8001bd86:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bd8a:	70 48       	ld.w	r8,r8[0x10]
8001bd8c:	30 ab       	mov	r11,10
8001bd8e:	10 9c       	mov	r12,r8
8001bd90:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_2d :");
8001bd94:	fe cc 09 2c 	sub	r12,pc,2348
8001bd98:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_2d,10);
8001bd9c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bda0:	70 28       	ld.w	r8,r8[0x8]
8001bda2:	30 ab       	mov	r11,10
8001bda4:	10 9c       	mov	r12,r8
8001bda6:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" speed_accuracy :");
8001bdaa:	fe cc 09 32 	sub	r12,pc,2354
8001bdae:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->speed_accuracy,10);
8001bdb2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdb6:	70 18       	ld.w	r8,r8[0x4]
8001bdb8:	30 ab       	mov	r11,10
8001bdba:	10 9c       	mov	r12,r8
8001bdbc:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" heading_accuracy :");
8001bdc0:	fe cc 09 34 	sub	r12,pc,2356
8001bdc4:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsVelned->heading_accuracy,10);
8001bdc8:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdcc:	70 08       	ld.w	r8,r8[0x0]
8001bdce:	30 ab       	mov	r11,10
8001bdd0:	10 9c       	mov	r12,r8
8001bdd2:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bdd6:	fe cc 1b 16 	sub	r12,pc,6934
8001bdda:	f0 16 00 01 	mcall	r6[4]
			}
			centralData->GPS_data.timegps = gpsVelned->itow;
8001bdde:	ec f8 00 00 	ld.w	r8,r6[0]
8001bde2:	70 08       	ld.w	r8,r8[0x0]
8001bde4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001bde8:	72 89       	ld.w	r9,r9[0x20]
8001bdea:	f1 49 07 98 	st.w	r8[1944],r9
			centralData->GPS_data.speed        = ((float)gpsVelned->speed_3d)/100.; // m/s
8001bdee:	ec f8 00 00 	ld.w	r8,r6[0]
8001bdf2:	70 05       	ld.w	r5,r8[0x0]
8001bdf4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bdf8:	70 48       	ld.w	r8,r8[0x10]
8001bdfa:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001bdfe:	fc 1b 42 c8 	movh	r11,0x42c8
8001be02:	10 9c       	mov	r12,r8
8001be04:	f0 16 00 0a 	mcall	r6[40]
8001be08:	18 98       	mov	r8,r12
8001be0a:	eb 48 07 68 	st.w	r5[1896],r8
			centralData->GPS_data.groundSpeed = ((float)gpsVelned->groundSpeed_2d) / 100.; // m/s
8001be0e:	ec f8 00 00 	ld.w	r8,r6[0]
8001be12:	70 05       	ld.w	r5,r8[0x0]
8001be14:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be18:	70 38       	ld.w	r8,r8[0xc]
8001be1a:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001be1e:	fc 1b 42 c8 	movh	r11,0x42c8
8001be22:	10 9c       	mov	r12,r8
8001be24:	f0 16 00 0a 	mcall	r6[40]
8001be28:	18 98       	mov	r8,r12
8001be2a:	eb 48 07 6c 	st.w	r5[1900],r8
			centralData->GPS_data.course = ((float)gpsVelned->heading_2d) / 100000.; // Heading 2D deg * 100000 rescaled to deg * 100
8001be2e:	ec f8 00 00 	ld.w	r8,r6[0]
8001be32:	70 05       	ld.w	r5,r8[0x0]
8001be34:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be38:	70 28       	ld.w	r8,r8[0x8]
8001be3a:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be3e:	e0 6b 50 00 	mov	r11,20480
8001be42:	ea 1b 47 c3 	orh	r11,0x47c3
8001be46:	10 9c       	mov	r12,r8
8001be48:	f0 16 00 0a 	mcall	r6[40]
8001be4c:	18 98       	mov	r8,r12
8001be4e:	eb 48 07 7c 	st.w	r5[1916],r8
			have_raw_velocity = true;
8001be52:	ec f9 03 d4 	ld.w	r9,r6[980]
8001be56:	30 18       	mov	r8,1
8001be58:	b2 88       	st.b	r9[0x0],r8
			centralData->GPS_data.northSpeed  = ((float)gpsVelned->ned_north) / 100.0;
8001be5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be5e:	70 05       	ld.w	r5,r8[0x0]
8001be60:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be64:	70 78       	ld.w	r8,r8[0x1c]
8001be66:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be6a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be6e:	10 9c       	mov	r12,r8
8001be70:	f0 16 00 0a 	mcall	r6[40]
8001be74:	18 98       	mov	r8,r12
8001be76:	eb 48 07 70 	st.w	r5[1904],r8
			centralData->GPS_data.eastSpeed   = ((float)gpsVelned->ned_east) / 100.;
8001be7a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be7e:	70 05       	ld.w	r5,r8[0x0]
8001be80:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001be84:	70 68       	ld.w	r8,r8[0x18]
8001be86:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001be8a:	fc 1b 42 c8 	movh	r11,0x42c8
8001be8e:	10 9c       	mov	r12,r8
8001be90:	f0 16 00 0a 	mcall	r6[40]
8001be94:	18 98       	mov	r8,r12
8001be96:	eb 48 07 74 	st.w	r5[1908],r8
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
8001be9a:	ec f8 00 00 	ld.w	r8,r6[0]
8001be9e:	70 05       	ld.w	r5,r8[0x0]
8001bea0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bea4:	70 58       	ld.w	r8,r8[0x14]
8001bea6:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001beaa:	fc 1b 42 c8 	movh	r11,0x42c8
8001beae:	10 9c       	mov	r12,r8
8001beb0:	f0 16 00 0a 	mcall	r6[40]
8001beb4:	18 98       	mov	r8,r12
8001beb6:	eb 48 07 78 	st.w	r5[1912],r8
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
8001beba:	ec f8 00 00 	ld.w	r8,r6[0]
8001bebe:	70 05       	ld.w	r5,r8[0x0]
8001bec0:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001bec4:	70 18       	ld.w	r8,r8[0x4]
8001bec6:	e5 a4 08 08 	cop	cp0,cr8,cr0,cr8,0x48
8001beca:	fc 1b 42 c8 	movh	r11,0x42c8
8001bece:	10 9c       	mov	r12,r8
8001bed0:	f0 16 00 0a 	mcall	r6[40]
8001bed4:	18 98       	mov	r8,r12
8001bed6:	eb 48 07 88 	st.w	r5[1928],r8
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
8001beda:	ec f8 00 00 	ld.w	r8,r6[0]
8001bede:	70 08       	ld.w	r8,r8[0x0]
8001bee0:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001bee4:	72 09       	ld.w	r9,r9[0x0]
8001bee6:	e5 a4 09 09 	cop	cp0,cr9,cr0,cr9,0x48
8001beea:	f1 49 07 8c 	st.w	r8[1932],r9
			new_speed = true;
8001beee:	ec f9 02 24 	ld.w	r9,r6[548]
8001bef2:	30 18       	mov	r8,1
8001bef4:	b2 88       	st.b	r9[0x0],r8
		}
		break;
8001bef6:	c5 b8       	rjmp	8001bfac <ubx_process_data+0xaba>
	case MSG_NAV_SVINFO:
		gpsSVInfo = ubx_GetSVInfo();
8001bef8:	f0 16 01 d1 	mcall	r6[1860]
8001befc:	18 98       	mov	r8,r12
8001befe:	ef 48 ff e8 	st.w	r7[-24],r8
		
		if (gpsSVInfo)
8001bf02:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf06:	58 08       	cp.w	r8,0
8001bf08:	c1 60       	breq	8001bf34 <ubx_process_data+0xa42>
		{
			if (printNavOnDebug)
8001bf0a:	ec f8 01 94 	ld.w	r8,r6[404]
8001bf0e:	11 88       	ld.ub	r8,r8[0x0]
8001bf10:	58 08       	cp.w	r8,0
8001bf12:	c1 10       	breq	8001bf34 <ubx_process_data+0xa42>
			{
				dbg_print("MSG_NAV_SVINFO, numChannel:");
8001bf14:	fe cc 0a 74 	sub	r12,pc,2676
8001bf18:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(gpsSVInfo->numCh,10);
8001bf1c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8001bf20:	f1 38 00 c3 	ld.ub	r8,r8[195]
8001bf24:	30 ab       	mov	r11,10
8001bf26:	10 9c       	mov	r12,r8
8001bf28:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
8001bf2c:	fe cc 1c 6c 	sub	r12,pc,7276
8001bf30:	f0 16 00 01 	mcall	r6[4]
			}
		}
		
		
	default:
		dbg_print("Unexpected NAV message 0x");
8001bf34:	fe cc 0a 78 	sub	r12,pc,2680
8001bf38:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(msg_id,10);
8001bf3c:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf40:	11 88       	ld.ub	r8,r8[0x0]
8001bf42:	30 ab       	mov	r11,10
8001bf44:	10 9c       	mov	r12,r8
8001bf46:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
8001bf4a:	fe cc 1c 8a 	sub	r12,pc,7306
8001bf4e:	f0 16 00 01 	mcall	r6[4]
		
		if (++disable_counter == 0) {
8001bf52:	ec f8 01 a8 	ld.w	r8,r6[424]
8001bf56:	11 88       	ld.ub	r8,r8[0x0]
8001bf58:	2f f8       	sub	r8,-1
8001bf5a:	5c 58       	castu.b	r8
8001bf5c:	ec f9 01 a8 	ld.w	r9,r6[424]
8001bf60:	b2 88       	st.b	r9[0x0],r8
8001bf62:	ec f8 01 a8 	ld.w	r8,r6[424]
8001bf66:	11 88       	ld.ub	r8,r8[0x0]
8001bf68:	58 08       	cp.w	r8,0
8001bf6a:	c1 81       	brne	8001bf9a <ubx_process_data+0xaa8>
			//Debug("Disabling NAV message 0x%02x", (unsigned)_msg_id);
			dbg_print("Disabling NAV message 0x");
8001bf6c:	fe cc 0a 94 	sub	r12,pc,2708
8001bf70:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(msg_id,16);
8001bf74:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf78:	11 88       	ld.ub	r8,r8[0x0]
8001bf7a:	31 0b       	mov	r11,16
8001bf7c:	10 9c       	mov	r12,r8
8001bf7e:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8001bf82:	fe cc 1c c2 	sub	r12,pc,7362
8001bf86:	f0 16 00 01 	mcall	r6[4]
			ubx_configure_message_rate(UBX_CLASS_NAV, msg_id, 0);
8001bf8a:	ec f8 00 5c 	ld.w	r8,r6[92]
8001bf8e:	11 88       	ld.ub	r8,r8[0x0]
8001bf90:	30 0a       	mov	r10,0
8001bf92:	10 9b       	mov	r11,r8
8001bf94:	30 1c       	mov	r12,1
8001bf96:	f0 16 00 5f 	mcall	r6[380]
		}
		return false;
8001bf9a:	30 08       	mov	r8,0
8001bf9c:	c1 d8       	rjmp	8001bfd6 <ubx_process_data+0xae4>
			centralData->GPS_data.verticalAccuracy = ((float)gpsPosllh->vertical_accuracy) / 1000.0;
			//centralData->GPS_data.status = next_fix;
			
			new_position = true;
		}
		break;
8001bf9e:	d7 03       	nop
8001bfa0:	c0 68       	rjmp	8001bfac <ubx_process_data+0xaba>
				centralData->GPS_data.status = NO_FIX;
			}else{
				centralData->GPS_data.status = GPS_OK;
			}
		}
		break;
8001bfa2:	d7 03       	nop
8001bfa4:	c0 48       	rjmp	8001bfac <ubx_process_data+0xaba>
			}
		
			centralData->GPS_data.num_sats = gpsSolution->satellites;
			centralData->GPS_data.hdop = gpsSolution->position_DOP;
		}
		break;
8001bfa6:	d7 03       	nop
8001bfa8:	c0 28       	rjmp	8001bfac <ubx_process_data+0xaba>
			centralData->GPS_data.verticalSpeed   = ((float)gpsVelned->ned_down) / 100.;
			centralData->GPS_data.speedAccuracy = ((float)gpsVelned->speed_accuracy)/100.;
			centralData->GPS_data.headingAccuracy = gpsVelned->heading_accuracy;
			new_speed = true;
		}
		break;
8001bfaa:	d7 03       	nop
		}
		return false;
	}
	// we only return true when we get new position and speed data
	// this ensures we don't use stale data
	if (new_position && new_speed) {
8001bfac:	ec f8 02 5c 	ld.w	r8,r6[604]
8001bfb0:	11 88       	ld.ub	r8,r8[0x0]
8001bfb2:	58 08       	cp.w	r8,0
8001bfb4:	c1 00       	breq	8001bfd4 <ubx_process_data+0xae2>
8001bfb6:	ec f8 02 24 	ld.w	r8,r6[548]
8001bfba:	11 88       	ld.ub	r8,r8[0x0]
8001bfbc:	58 08       	cp.w	r8,0
8001bfbe:	c0 b0       	breq	8001bfd4 <ubx_process_data+0xae2>
		new_speed = false;
8001bfc0:	ec f9 02 24 	ld.w	r9,r6[548]
8001bfc4:	30 08       	mov	r8,0
8001bfc6:	b2 88       	st.b	r9[0x0],r8
		new_position = false;
8001bfc8:	ec f9 02 5c 	ld.w	r9,r6[604]
8001bfcc:	30 08       	mov	r8,0
8001bfce:	b2 88       	st.b	r9[0x0],r8
// 		if (fix_count == 100) {
// 			// ask for nav settings every 20 seconds
// 			dbg_print("Asking for engine setting\n");
// 			ubx_send_message(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
// 		}
		return true;
8001bfd0:	30 18       	mov	r8,1
8001bfd2:	c0 28       	rjmp	8001bfd6 <ubx_process_data+0xae4>
	}
	return false;
8001bfd4:	30 08       	mov	r8,0
}
8001bfd6:	10 9c       	mov	r12,r8
8001bfd8:	2f 6d       	sub	sp,-40
8001bfda:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001bfde:	00 00       	add	r0,r0
8001bfe0:	80 01       	ld.sh	r1,r0[0x0]
8001bfe2:	b3 82       	lsr	r2,0x12

8001bfe4 <update_checksum>:
************************************************************************************
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
8001bfe4:	eb cd 40 80 	pushm	r7,lr
8001bfe8:	1a 97       	mov	r7,sp
8001bfea:	20 4d       	sub	sp,16
8001bfec:	ef 4c ff fc 	st.w	r7[-4],r12
8001bff0:	16 98       	mov	r8,r11
8001bff2:	ef 4a ff f4 	st.w	r7[-12],r10
8001bff6:	ef 49 ff f0 	st.w	r7[-16],r9
8001bffa:	ef 68 ff f8 	st.b	r7[-8],r8
	while (len--) {
8001bffe:	c1 e8       	rjmp	8001c03a <update_checksum+0x56>
		*ck_a += *data;
8001c000:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c004:	11 89       	ld.ub	r9,r8[0x0]
8001c006:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c00a:	11 88       	ld.ub	r8,r8[0x0]
8001c00c:	f2 08 00 08 	add	r8,r9,r8
8001c010:	5c 58       	castu.b	r8
8001c012:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001c016:	b2 88       	st.b	r9[0x0],r8
		*ck_b += *ck_a;
8001c018:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c01c:	11 89       	ld.ub	r9,r8[0x0]
8001c01e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001c022:	11 88       	ld.ub	r8,r8[0x0]
8001c024:	f2 08 00 08 	add	r8,r9,r8
8001c028:	5c 58       	castu.b	r8
8001c02a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001c02e:	b2 88       	st.b	r9[0x0],r8
		data++;
8001c030:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c034:	2f f8       	sub	r8,-1
8001c036:	ef 48 ff fc 	st.w	r7[-4],r8
Checksum update
************************************************************************************
*/
void update_checksum(uint8_t *data, uint8_t len, uint8_t *ck_a, uint8_t *ck_b)
{
	while (len--) {
8001c03a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c03e:	30 08       	mov	r8,0
8001c040:	f0 09 18 00 	cp.b	r9,r8
8001c044:	5f 18       	srne	r8
8001c046:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001c04a:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c04e:	20 18       	sub	r8,1
8001c050:	ef 68 ff f8 	st.b	r7[-8],r8
8001c054:	58 09       	cp.w	r9,0
8001c056:	cd 51       	brne	8001c000 <update_checksum+0x1c>
		*ck_a += *data;
		*ck_b += *ck_a;
		data++;
	}
}
8001c058:	2f cd       	sub	sp,-16
8001c05a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c05e <endian_lower_bytes_uint16>:
To send the lower byte of an uint16_t in the Little Endian format
************************************************************************************
*/

uint8_t endian_lower_bytes_uint16(uint16_t bytes)
{
8001c05e:	eb cd 40 80 	pushm	r7,lr
8001c062:	1a 97       	mov	r7,sp
8001c064:	20 1d       	sub	sp,4
8001c066:	18 98       	mov	r8,r12
8001c068:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0x00FF);
8001c06c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8001c070:	5c 58       	castu.b	r8
}
8001c072:	10 9c       	mov	r12,r8
8001c074:	2f fd       	sub	sp,-4
8001c076:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c07a <endian_higher_bytes_uint16>:
************************************************************************************
To send the higher byte of an uint16_t in the Little Endian format
************************************************************************************
*/
uint8_t endian_higher_bytes_uint16(uint16_t bytes)
{
8001c07a:	eb cd 40 80 	pushm	r7,lr
8001c07e:	1a 97       	mov	r7,sp
8001c080:	20 1d       	sub	sp,4
8001c082:	18 98       	mov	r8,r12
8001c084:	ef 58 ff fc 	st.h	r7[-4],r8
	return (bytes & 0xFF00)>>8;
8001c088:	ef 18 ff fc 	ld.uh	r8,r7[-4]
8001c08c:	a9 88       	lsr	r8,0x8
8001c08e:	5c 88       	casts.h	r8
8001c090:	5c 58       	castu.b	r8
}
8001c092:	10 9c       	mov	r12,r8
8001c094:	2f fd       	sub	sp,-4
8001c096:	e3 cd 80 80 	ldm	sp++,r7,pc

8001c09a <ubx_send_header>:
************************************************************************************
To send the UBX header of all messages
************************************************************************************
*/
void ubx_send_header(uint8_t msg_class, uint8_t _msg_id, uint8_t size)
{
8001c09a:	eb cd 40 c0 	pushm	r6-r7,lr
8001c09e:	1a 97       	mov	r7,sp
8001c0a0:	20 5d       	sub	sp,20
8001c0a2:	4b 76       	lddpc	r6,8001c17c <ubx_send_header+0xe2>
8001c0a4:	1e 26       	rsub	r6,pc
8001c0a6:	16 99       	mov	r9,r11
8001c0a8:	14 98       	mov	r8,r10
8001c0aa:	18 9a       	mov	r10,r12
8001c0ac:	ef 6a ff f4 	st.b	r7[-12],r10
8001c0b0:	ef 69 ff f0 	st.b	r7[-16],r9
8001c0b4:	ef 68 ff ec 	st.b	r7[-20],r8
	ubx_header header;
	header.preamble1		= UBX_PREAMBLE1;
8001c0b8:	3b 58       	mov	r8,-75
8001c0ba:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2		= UBX_PREAMBLE2;
8001c0be:	36 28       	mov	r8,98
8001c0c0:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class		= msg_class;
8001c0c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c0c8:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c0cc:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c0d0:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length			= size;
8001c0d4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c0d8:	ef 58 ff fa 	st.h	r7[-6],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,header.msg_id_header);
	//
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0x0F));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,(uint8_t) (header.length & 0xF0)>>8);
	
	putnum(&centralData->gps_stream_out,header.preamble1,16);
8001c0dc:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c0e0:	10 99       	mov	r9,r8
8001c0e2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c0e6:	70 08       	ld.w	r8,r8[0x0]
8001c0e8:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c0ec:	31 0a       	mov	r10,16
8001c0ee:	12 9b       	mov	r11,r9
8001c0f0:	10 9c       	mov	r12,r8
8001c0f2:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.preamble2,16);
8001c0f6:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c0fa:	10 99       	mov	r9,r8
8001c0fc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c100:	70 08       	ld.w	r8,r8[0x0]
8001c102:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c106:	31 0a       	mov	r10,16
8001c108:	12 9b       	mov	r11,r9
8001c10a:	10 9c       	mov	r12,r8
8001c10c:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_class,10);
8001c110:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c114:	10 99       	mov	r9,r8
8001c116:	ec f8 00 00 	ld.w	r8,r6[0]
8001c11a:	70 08       	ld.w	r8,r8[0x0]
8001c11c:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c120:	30 aa       	mov	r10,10
8001c122:	12 9b       	mov	r11,r9
8001c124:	10 9c       	mov	r12,r8
8001c126:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,header.msg_id_header,16);
8001c12a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c12e:	10 99       	mov	r9,r8
8001c130:	ec f8 00 00 	ld.w	r8,r6[0]
8001c134:	70 08       	ld.w	r8,r8[0x0]
8001c136:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c13a:	31 0a       	mov	r10,16
8001c13c:	12 9b       	mov	r11,r9
8001c13e:	10 9c       	mov	r12,r8
8001c140:	f0 16 00 28 	mcall	r6[160]
	
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0x0F),16);
8001c144:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001c148:	5c 58       	castu.b	r8
8001c14a:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
8001c14e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c152:	70 08       	ld.w	r8,r8[0x0]
8001c154:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c158:	31 0a       	mov	r10,16
8001c15a:	12 9b       	mov	r11,r9
8001c15c:	10 9c       	mov	r12,r8
8001c15e:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,(uint8_t) (header.length & 0xF0)>>8,16);
8001c162:	ec f8 00 00 	ld.w	r8,r6[0]
8001c166:	70 08       	ld.w	r8,r8[0x0]
8001c168:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c16c:	31 0a       	mov	r10,16
8001c16e:	30 0b       	mov	r11,0
8001c170:	10 9c       	mov	r12,r8
8001c172:	f0 16 00 28 	mcall	r6[160]
	
}
8001c176:	2f bd       	sub	sp,-20
8001c178:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c17c:	80 01       	ld.sh	r1,r0[0x0]
8001c17e:	bf 28       	st.d	pc++,r8

8001c180 <ubx_send_cksum>:
************************************************************************************
To send the checksum of every message
************************************************************************************
*/
void ubx_send_cksum(uint8_t ck_sum_a, uint8_t ck_sum_b)
{
8001c180:	eb cd 40 c0 	pushm	r6-r7,lr
8001c184:	1a 97       	mov	r7,sp
8001c186:	20 2d       	sub	sp,8
8001c188:	49 26       	lddpc	r6,8001c1d0 <ubx_send_cksum+0x50>
8001c18a:	1e 26       	rsub	r6,pc
8001c18c:	18 99       	mov	r9,r12
8001c18e:	16 98       	mov	r8,r11
8001c190:	ef 69 ff fc 	st.b	r7[-4],r9
8001c194:	ef 68 ff f8 	st.b	r7[-8],r8
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_a);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,ck_sum_b);
	
	putnum(&centralData->gps_stream_out,ck_sum_a,16);
8001c198:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8001c19c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1a0:	70 08       	ld.w	r8,r8[0x0]
8001c1a2:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c1a6:	31 0a       	mov	r10,16
8001c1a8:	12 9b       	mov	r11,r9
8001c1aa:	10 9c       	mov	r12,r8
8001c1ac:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,ck_sum_b,16);
8001c1b0:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8001c1b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c1b8:	70 08       	ld.w	r8,r8[0x0]
8001c1ba:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c1be:	31 0a       	mov	r10,16
8001c1c0:	12 9b       	mov	r11,r9
8001c1c2:	10 9c       	mov	r12,r8
8001c1c4:	f0 16 00 28 	mcall	r6[160]
}
8001c1c8:	2f ed       	sub	sp,-8
8001c1ca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c1ce:	00 00       	add	r0,r0
8001c1d0:	80 01       	ld.sh	r1,r0[0x0]
8001c1d2:	c0 0e       	rcall	8001bdd2 <ubx_process_data+0x8e0>

8001c1d4 <ubx_send_message>:
NOT USED ANYMORE
To send a message to the GPS
************************************************************************************
*/
void ubx_send_message(uint8_t msg_class, uint8_t _msg_id, void *msg, uint8_t size)
{
8001c1d4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c1d8:	1a 97       	mov	r7,sp
8001c1da:	20 6d       	sub	sp,24
8001c1dc:	4b 56       	lddpc	r6,8001c2b0 <ubx_send_message+0xdc>
8001c1de:	1e 26       	rsub	r6,pc
8001c1e0:	ef 4a ff ec 	st.w	r7[-20],r10
8001c1e4:	12 98       	mov	r8,r9
8001c1e6:	18 99       	mov	r9,r12
8001c1e8:	ef 69 ff f4 	st.b	r7[-12],r9
8001c1ec:	16 99       	mov	r9,r11
8001c1ee:	ef 69 ff f0 	st.b	r7[-16],r9
8001c1f2:	ef 68 ff e8 	st.b	r7[-24],r8
	ubx_header header;
	uint8_t ck_a=0, ck_b=0;
8001c1f6:	30 08       	mov	r8,0
8001c1f8:	ef 68 ff f9 	st.b	r7[-7],r8
8001c1fc:	30 08       	mov	r8,0
8001c1fe:	ef 68 ff f8 	st.b	r7[-8],r8
	header.preamble1 = UBX_PREAMBLE1;
8001c202:	3b 58       	mov	r8,-75
8001c204:	ef 68 ff ff 	st.b	r7[-1],r8
	header.preamble2 = UBX_PREAMBLE2;
8001c208:	36 28       	mov	r8,98
8001c20a:	ef 68 ff fe 	st.b	r7[-2],r8
	header.msg_class = msg_class;
8001c20e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c212:	ef 68 ff fd 	st.b	r7[-3],r8
	header.msg_id_header    = _msg_id;
8001c216:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c21a:	ef 68 ff fc 	st.b	r7[-4],r8
	header.length    = size;
8001c21e:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001c222:	ef 58 ff fa 	st.h	r7[-6],r8
	
	update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
8001c226:	ee c9 00 08 	sub	r9,r7,8
8001c22a:	ee ca 00 07 	sub	r10,r7,7
8001c22e:	ee c8 00 06 	sub	r8,r7,6
8001c232:	2f d8       	sub	r8,-3
8001c234:	30 4b       	mov	r11,4
8001c236:	10 9c       	mov	r12,r8
8001c238:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)msg, size, &ck_a, &ck_b);
8001c23c:	ef 3b ff e8 	ld.ub	r11,r7[-24]
8001c240:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001c244:	ee c9 00 08 	sub	r9,r7,8
8001c248:	ee ca 00 07 	sub	r10,r7,7
8001c24c:	10 9c       	mov	r12,r8
8001c24e:	f0 16 00 35 	mcall	r6[212]
	
 	putstring(&(centralData->gps_stream_out),&header);
8001c252:	ee c9 00 06 	sub	r9,r7,6
8001c256:	ec f8 00 00 	ld.w	r8,r6[0]
8001c25a:	70 08       	ld.w	r8,r8[0x0]
8001c25c:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c260:	12 9b       	mov	r11,r9
8001c262:	10 9c       	mov	r12,r8
8001c264:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),(uint8_t *)msg);
8001c268:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001c26c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c270:	70 08       	ld.w	r8,r8[0x0]
8001c272:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c276:	12 9b       	mov	r11,r9
8001c278:	10 9c       	mov	r12,r8
8001c27a:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_a);
8001c27e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c282:	70 08       	ld.w	r8,r8[0x0]
8001c284:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c288:	ee c9 00 07 	sub	r9,r7,7
8001c28c:	12 9b       	mov	r11,r9
8001c28e:	10 9c       	mov	r12,r8
8001c290:	f0 16 00 34 	mcall	r6[208]
 	putstring(&(centralData->gps_stream_out),&ck_b);
8001c294:	ec f8 00 00 	ld.w	r8,r6[0]
8001c298:	70 08       	ld.w	r8,r8[0x0]
8001c29a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c29e:	ee c9 00 08 	sub	r9,r7,8
8001c2a2:	12 9b       	mov	r11,r9
8001c2a4:	10 9c       	mov	r12,r8
8001c2a6:	f0 16 00 34 	mcall	r6[208]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c2aa:	2f ad       	sub	sp,-24
8001c2ac:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c2b0:	80 01       	ld.sh	r1,r0[0x0]
8001c2b2:	c0 62       	brcc	8001c2be <ubx_send_message_CFG_nav_rate+0xa>

8001c2b4 <ubx_send_message_CFG_nav_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id:		0x08	MSG_CFG_RATE
************************************************************************************
*/
void ubx_send_message_CFG_nav_rate(uint8_t msg_class, uint8_t _msg_id, ubx_cfg_nav_rate_send msg, uint8_t size)
{
8001c2b4:	eb cd 40 e0 	pushm	r5-r7,lr
8001c2b8:	1a 97       	mov	r7,sp
8001c2ba:	20 4d       	sub	sp,16
8001c2bc:	4d d6       	lddpc	r6,8001c430 <ubx_send_message_CFG_nav_rate+0x17c>
8001c2be:	1e 26       	rsub	r6,pc
8001c2c0:	ee c5 ff f0 	sub	r5,r7,-16
8001c2c4:	16 99       	mov	r9,r11
8001c2c6:	14 98       	mov	r8,r10
8001c2c8:	18 9a       	mov	r10,r12
8001c2ca:	ef 6a ff f8 	st.b	r7[-8],r10
8001c2ce:	ef 69 ff f4 	st.b	r7[-12],r9
8001c2d2:	ef 68 ff f0 	st.b	r7[-16],r8
	uint8_t ck_a=0, ck_b=0;
8001c2d6:	30 08       	mov	r8,0
8001c2d8:	ef 68 ff ff 	st.b	r7[-1],r8
8001c2dc:	30 08       	mov	r8,0
8001c2de:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c2e2:	ee c9 00 02 	sub	r9,r7,2
8001c2e6:	ee ca 00 01 	sub	r10,r7,1
8001c2ea:	ee c8 00 08 	sub	r8,r7,8
8001c2ee:	30 1b       	mov	r11,1
8001c2f0:	10 9c       	mov	r12,r8
8001c2f2:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c2f6:	ee c9 00 02 	sub	r9,r7,2
8001c2fa:	ee ca 00 01 	sub	r10,r7,1
8001c2fe:	ee c8 00 0c 	sub	r8,r7,12
8001c302:	30 1b       	mov	r11,1
8001c304:	10 9c       	mov	r12,r8
8001c306:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c30a:	ee c9 00 02 	sub	r9,r7,2
8001c30e:	ee ca 00 01 	sub	r10,r7,1
8001c312:	ee c8 00 10 	sub	r8,r7,16
8001c316:	30 1b       	mov	r11,1
8001c318:	10 9c       	mov	r12,r8
8001c31a:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c31e:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c322:	10 9b       	mov	r11,r8
8001c324:	0a 98       	mov	r8,r5
8001c326:	ee c9 00 02 	sub	r9,r7,2
8001c32a:	ee ca 00 01 	sub	r10,r7,1
8001c32e:	10 9c       	mov	r12,r8
8001c330:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(msg_class,_msg_id,size);
8001c334:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c338:	10 9a       	mov	r10,r8
8001c33a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c33e:	10 99       	mov	r9,r8
8001c340:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c344:	12 9b       	mov	r11,r9
8001c346:	10 9c       	mov	r12,r8
8001c348:	f0 16 00 c5 	mcall	r6[788]
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.nav_rate));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_lower_bytes_uint16(msg.timeref));
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data, endian_higher_bytes_uint16(msg.timeref));	
	
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.measure_rate_ms),16);
8001c34c:	8a 08       	ld.sh	r8,r5[0x0]
8001c34e:	5c 78       	castu.h	r8
8001c350:	10 9c       	mov	r12,r8
8001c352:	f0 16 00 b0 	mcall	r6[704]
8001c356:	18 98       	mov	r8,r12
8001c358:	10 99       	mov	r9,r8
8001c35a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c35e:	70 08       	ld.w	r8,r8[0x0]
8001c360:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c364:	31 0a       	mov	r10,16
8001c366:	12 9b       	mov	r11,r9
8001c368:	10 9c       	mov	r12,r8
8001c36a:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.measure_rate_ms),16);
8001c36e:	8a 08       	ld.sh	r8,r5[0x0]
8001c370:	5c 78       	castu.h	r8
8001c372:	10 9c       	mov	r12,r8
8001c374:	f0 16 00 b8 	mcall	r6[736]
8001c378:	18 98       	mov	r8,r12
8001c37a:	10 99       	mov	r9,r8
8001c37c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c380:	70 08       	ld.w	r8,r8[0x0]
8001c382:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c386:	31 0a       	mov	r10,16
8001c388:	12 9b       	mov	r11,r9
8001c38a:	10 9c       	mov	r12,r8
8001c38c:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.nav_rate),16);
8001c390:	8a 18       	ld.sh	r8,r5[0x2]
8001c392:	5c 78       	castu.h	r8
8001c394:	10 9c       	mov	r12,r8
8001c396:	f0 16 00 b0 	mcall	r6[704]
8001c39a:	18 98       	mov	r8,r12
8001c39c:	10 99       	mov	r9,r8
8001c39e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3a2:	70 08       	ld.w	r8,r8[0x0]
8001c3a4:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c3a8:	31 0a       	mov	r10,16
8001c3aa:	12 9b       	mov	r11,r9
8001c3ac:	10 9c       	mov	r12,r8
8001c3ae:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.nav_rate),16);
8001c3b2:	8a 18       	ld.sh	r8,r5[0x2]
8001c3b4:	5c 78       	castu.h	r8
8001c3b6:	10 9c       	mov	r12,r8
8001c3b8:	f0 16 00 b8 	mcall	r6[736]
8001c3bc:	18 98       	mov	r8,r12
8001c3be:	10 99       	mov	r9,r8
8001c3c0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3c4:	70 08       	ld.w	r8,r8[0x0]
8001c3c6:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c3ca:	31 0a       	mov	r10,16
8001c3cc:	12 9b       	mov	r11,r9
8001c3ce:	10 9c       	mov	r12,r8
8001c3d0:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_lower_bytes_uint16(msg.timeref),16);
8001c3d4:	8a 28       	ld.sh	r8,r5[0x4]
8001c3d6:	5c 78       	castu.h	r8
8001c3d8:	10 9c       	mov	r12,r8
8001c3da:	f0 16 00 b0 	mcall	r6[704]
8001c3de:	18 98       	mov	r8,r12
8001c3e0:	10 99       	mov	r9,r8
8001c3e2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c3e6:	70 08       	ld.w	r8,r8[0x0]
8001c3e8:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c3ec:	31 0a       	mov	r10,16
8001c3ee:	12 9b       	mov	r11,r9
8001c3f0:	10 9c       	mov	r12,r8
8001c3f2:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out, endian_higher_bytes_uint16(msg.timeref),16);
8001c3f6:	8a 28       	ld.sh	r8,r5[0x4]
8001c3f8:	5c 78       	castu.h	r8
8001c3fa:	10 9c       	mov	r12,r8
8001c3fc:	f0 16 00 b8 	mcall	r6[736]
8001c400:	18 98       	mov	r8,r12
8001c402:	10 99       	mov	r9,r8
8001c404:	ec f8 00 00 	ld.w	r8,r6[0]
8001c408:	70 08       	ld.w	r8,r8[0x0]
8001c40a:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c40e:	31 0a       	mov	r10,16
8001c410:	12 9b       	mov	r11,r9
8001c412:	10 9c       	mov	r12,r8
8001c414:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001c418:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c41c:	10 99       	mov	r9,r8
8001c41e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c422:	12 9b       	mov	r11,r9
8001c424:	10 9c       	mov	r12,r8
8001c426:	f0 16 00 c3 	mcall	r6[780]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c42a:	2f cd       	sub	sp,-16
8001c42c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8001c430:	80 01       	ld.sh	r1,r0[0x0]
8001c432:	c1 42       	brcc	8001c45a <ubx_send_message_nav_settings+0x26>

8001c434 <ubx_send_message_nav_settings>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x24	MSG_CFG_NAV_SETTINGS
************************************************************************************
*/
void ubx_send_message_nav_settings(uint8_t msg_class, uint8_t _msg_id, enum GPS_Engine_Setting *engine_settings, uint8_t size)
{
8001c434:	eb cd 40 c0 	pushm	r6-r7,lr
8001c438:	1a 97       	mov	r7,sp
8001c43a:	20 5d       	sub	sp,20
8001c43c:	4b 46       	lddpc	r6,8001c50c <ubx_send_message_nav_settings+0xd8>
8001c43e:	1e 26       	rsub	r6,pc
8001c440:	ef 4a ff f0 	st.w	r7[-16],r10
8001c444:	12 98       	mov	r8,r9
8001c446:	18 99       	mov	r9,r12
8001c448:	ef 69 ff f8 	st.b	r7[-8],r9
8001c44c:	16 99       	mov	r9,r11
8001c44e:	ef 69 ff f4 	st.b	r7[-12],r9
8001c452:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c456:	30 08       	mov	r8,0
8001c458:	ef 68 ff ff 	st.b	r7[-1],r8
8001c45c:	30 08       	mov	r8,0
8001c45e:	ef 68 ff fe 	st.b	r7[-2],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c462:	ee c9 00 02 	sub	r9,r7,2
8001c466:	ee ca 00 01 	sub	r10,r7,1
8001c46a:	ee c8 00 08 	sub	r8,r7,8
8001c46e:	30 1b       	mov	r11,1
8001c470:	10 9c       	mov	r12,r8
8001c472:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c476:	ee c9 00 02 	sub	r9,r7,2
8001c47a:	ee ca 00 01 	sub	r10,r7,1
8001c47e:	ee c8 00 0c 	sub	r8,r7,12
8001c482:	30 1b       	mov	r11,1
8001c484:	10 9c       	mov	r12,r8
8001c486:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c48a:	ee c9 00 02 	sub	r9,r7,2
8001c48e:	ee ca 00 01 	sub	r10,r7,1
8001c492:	ee c8 00 14 	sub	r8,r7,20
8001c496:	30 1b       	mov	r11,1
8001c498:	10 9c       	mov	r12,r8
8001c49a:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	
	
	ubx_send_header(msg_class,_msg_id,size);
8001c49e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4a2:	10 9a       	mov	r10,r8
8001c4a4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c4a8:	10 99       	mov	r9,r8
8001c4aa:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001c4ae:	12 9b       	mov	r11,r9
8001c4b0:	10 9c       	mov	r12,r8
8001c4b2:	f0 16 00 c5 	mcall	r6[788]
	
	if (engine_settings != NULL)
8001c4b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4ba:	58 08       	cp.w	r8,0
8001c4bc:	c1 c0       	breq	8001c4f4 <ubx_send_message_nav_settings+0xc0>
	{
		update_checksum((uint8_t *)engine_settings, size, &ck_a, &ck_b);
8001c4be:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c4c2:	10 9b       	mov	r11,r8
8001c4c4:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4c8:	ee c9 00 02 	sub	r9,r7,2
8001c4cc:	ee ca 00 01 	sub	r10,r7,1
8001c4d0:	10 9c       	mov	r12,r8
8001c4d2:	f0 16 00 35 	mcall	r6[212]
		//centralData->gps_stream_out.put(centralData->gps_stream_out.data, (uint8_t) *engine_settings);
		putnum(&centralData->gps_stream_out, (uint8_t) *engine_settings,10);
8001c4d6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001c4da:	70 08       	ld.w	r8,r8[0x0]
8001c4dc:	5c 58       	castu.b	r8
8001c4de:	10 99       	mov	r9,r8
8001c4e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c4e4:	70 08       	ld.w	r8,r8[0x0]
8001c4e6:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c4ea:	30 aa       	mov	r10,10
8001c4ec:	12 9b       	mov	r11,r9
8001c4ee:	10 9c       	mov	r12,r8
8001c4f0:	f0 16 00 28 	mcall	r6[160]
	}
	
	ubx_send_cksum(ck_a,ck_b);
8001c4f4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c4f8:	10 99       	mov	r9,r8
8001c4fa:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c4fe:	12 9b       	mov	r11,r9
8001c500:	10 9c       	mov	r12,r8
8001c502:	f0 16 00 c3 	mcall	r6[780]
	
	//centralData->gps_stream_out.flush(&(centralData->gps_stream_out.data));
}
8001c506:	2f bd       	sub	sp,-20
8001c508:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c50c:	80 01       	ld.sh	r1,r0[0x0]
8001c50e:	c2 c2       	brcc	8001c566 <ubx_configure_message_rate+0x56>

8001c510 <ubx_configure_message_rate>:
Class:		0x06	UBX_CLASS_CFG
Msg_id :	0x01	MSG_CFG_SET_RATE
************************************************************************************
*/
void ubx_configure_message_rate(uint8_t msg_class, uint8_t _msg_id, uint8_t rate)
{
8001c510:	eb cd 40 c0 	pushm	r6-r7,lr
8001c514:	1a 97       	mov	r7,sp
8001c516:	20 5d       	sub	sp,20
8001c518:	4c 16       	lddpc	r6,8001c61c <ubx_configure_message_rate+0x10c>
8001c51a:	1e 26       	rsub	r6,pc
8001c51c:	16 99       	mov	r9,r11
8001c51e:	14 98       	mov	r8,r10
8001c520:	18 9a       	mov	r10,r12
8001c522:	ef 6a ff f4 	st.b	r7[-12],r10
8001c526:	ef 69 ff f0 	st.b	r7[-16],r9
8001c52a:	ef 68 ff ec 	st.b	r7[-20],r8
	uint8_t ck_a=0, ck_b=0;
8001c52e:	30 08       	mov	r8,0
8001c530:	ef 68 ff ff 	st.b	r7[-1],r8
8001c534:	30 08       	mov	r8,0
8001c536:	ef 68 ff fe 	st.b	r7[-2],r8
	ubx_cfg_msg_rate_send msg;
	msg.msg_class = msg_class;
8001c53a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001c53e:	ef 68 ff fb 	st.b	r7[-5],r8
	msg.msg_id_rate    = _msg_id;
8001c542:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001c546:	ef 68 ff fc 	st.b	r7[-4],r8
	msg.rate          = rate;
8001c54a:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001c54e:	ef 68 ff fd 	st.b	r7[-3],r8
	
	uint8_t size = sizeof(msg);
8001c552:	30 38       	mov	r8,3
8001c554:	ef 68 ff fa 	st.b	r7[-6],r8
	
	update_checksum((uint8_t *)&msg_class, 1, &ck_a, &ck_b);
8001c558:	ee c9 00 02 	sub	r9,r7,2
8001c55c:	ee ca 00 01 	sub	r10,r7,1
8001c560:	ee c8 00 0c 	sub	r8,r7,12
8001c564:	30 1b       	mov	r11,1
8001c566:	10 9c       	mov	r12,r8
8001c568:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&_msg_id, 1, &ck_a, &ck_b);
8001c56c:	ee c9 00 02 	sub	r9,r7,2
8001c570:	ee ca 00 01 	sub	r10,r7,1
8001c574:	ee c8 00 10 	sub	r8,r7,16
8001c578:	30 1b       	mov	r11,1
8001c57a:	10 9c       	mov	r12,r8
8001c57c:	f0 16 00 35 	mcall	r6[212]
	update_checksum((uint8_t *)&size, 1, &ck_a, &ck_b);
8001c580:	ee c9 00 02 	sub	r9,r7,2
8001c584:	ee ca 00 01 	sub	r10,r7,1
8001c588:	ee c8 00 06 	sub	r8,r7,6
8001c58c:	30 1b       	mov	r11,1
8001c58e:	10 9c       	mov	r12,r8
8001c590:	f0 16 00 35 	mcall	r6[212]

	//update_checksum((uint8_t *)&header.msg_class, sizeof(header)-2, &ck_a, &ck_b);
	update_checksum((uint8_t *)&msg, size, &ck_a, &ck_b);
8001c594:	ef 38 ff fa 	ld.ub	r8,r7[-6]
8001c598:	10 9b       	mov	r11,r8
8001c59a:	ee c9 00 02 	sub	r9,r7,2
8001c59e:	ee ca 00 01 	sub	r10,r7,1
8001c5a2:	ee c8 00 05 	sub	r8,r7,5
8001c5a6:	10 9c       	mov	r12,r8
8001c5a8:	f0 16 00 35 	mcall	r6[212]
	
	ubx_send_header(UBX_CLASS_CFG,MSG_CFG_SET_RATE,sizeof(msg));
8001c5ac:	30 3a       	mov	r10,3
8001c5ae:	30 1b       	mov	r11,1
8001c5b0:	30 6c       	mov	r12,6
8001c5b2:	f0 16 00 c5 	mcall	r6[788]
	
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_class);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.msg_id_rate);
	//centralData->gps_stream_out.put(centralData->gps_stream_out.data,msg.rate);
	
	putnum(&centralData->gps_stream_out,msg.msg_class,16);
8001c5b6:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c5ba:	10 99       	mov	r9,r8
8001c5bc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5c0:	70 08       	ld.w	r8,r8[0x0]
8001c5c2:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c5c6:	31 0a       	mov	r10,16
8001c5c8:	12 9b       	mov	r11,r9
8001c5ca:	10 9c       	mov	r12,r8
8001c5cc:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.msg_id_rate,16);
8001c5d0:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001c5d4:	10 99       	mov	r9,r8
8001c5d6:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5da:	70 08       	ld.w	r8,r8[0x0]
8001c5dc:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c5e0:	31 0a       	mov	r10,16
8001c5e2:	12 9b       	mov	r11,r9
8001c5e4:	10 9c       	mov	r12,r8
8001c5e6:	f0 16 00 28 	mcall	r6[160]
	putnum(&centralData->gps_stream_out,msg.rate,16);
8001c5ea:	ef 38 ff fd 	ld.ub	r8,r7[-3]
8001c5ee:	10 99       	mov	r9,r8
8001c5f0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c5f4:	70 08       	ld.w	r8,r8[0x0]
8001c5f6:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c5fa:	31 0a       	mov	r10,16
8001c5fc:	12 9b       	mov	r11,r9
8001c5fe:	10 9c       	mov	r12,r8
8001c600:	f0 16 00 28 	mcall	r6[160]
	
	ubx_send_cksum(ck_a,ck_b);
8001c604:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001c608:	10 99       	mov	r9,r8
8001c60a:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001c60e:	12 9b       	mov	r11,r9
8001c610:	10 9c       	mov	r12,r8
8001c612:	f0 16 00 c3 	mcall	r6[780]
	//ubx_send_message(UBX_CLASS_CFG, MSG_CFG_SET_RATE, &msg, sizeof(msg));
	
	//centralData->gps_stream_out.flush(centralData->gps_stream_out.data);
}
8001c616:	2f bd       	sub	sp,-20
8001c618:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c61c:	80 01       	ld.sh	r1,r0[0x0]
8001c61e:	c3 9e       	rcall	8001c290 <ubx_send_message+0xbc>
8001c620:	24 50       	sub	r0,69
8001c622:	55 42       	stdsp	sp[0x150],r2
8001c624:	58 2c       	cp.w	r12,2
8001c626:	34 31       	mov	r1,67
8001c628:	2c 31       	sub	r1,-61
8001c62a:	2c 30       	sub	r0,-61
8001c62c:	30 30       	mov	r0,3
8001c62e:	33 2c       	mov	r12,50
8001c630:	30 30       	mov	r0,3
8001c632:	30 31       	mov	r1,3
8001c634:	2c 33       	sub	r3,-61
8001c636:	38 34       	mov	r4,-125
8001c638:	30 30       	mov	r0,3
8001c63a:	2c 30       	sub	r0,-61
8001c63c:	2a 32       	sub	r2,-93
8001c63e:	35 0d       	mov	sp,80
8001c640:	0a 00       	add	r0,r5

8001c642 <configure_gps>:
To configure the GPS in binary mode and the Navigation messages we want
The GPS and UART channel should already be configured in the good baudrate 38400U
************************************************************************************
*/
void configure_gps(void)
{
8001c642:	eb cd 40 c0 	pushm	r6-r7,lr
8001c646:	1a 97       	mov	r7,sp
8001c648:	20 3d       	sub	sp,12
8001c64a:	4a 66       	lddpc	r6,8001c6e0 <configure_gps+0x9e>
8001c64c:	1e 26       	rsub	r6,pc
	ubx_cfg_nav_rate_send msg;
	const unsigned baudrates[4] = {9600U, 19200U, 38400U, 57600U};

	const char *set_binary = UBLOX_SET_BINARY;
8001c64e:	fe c8 00 2e 	sub	r8,pc,46
8001c652:	ef 48 ff fc 	st.w	r7[-4],r8
// 	for (uint8_t i=0; i<4; i++)
// 	{
	
	//dbg_print("Set to binary mode ");
	//dbg_print(set_binary);
	putstring(&(centralData->gps_stream_out),set_binary);
8001c656:	ec f8 00 00 	ld.w	r8,r6[0]
8001c65a:	70 08       	ld.w	r8,r8[0x0]
8001c65c:	f0 c8 f8 c8 	sub	r8,r8,-1848
8001c660:	ee fb ff fc 	ld.w	r11,r7[-4]
8001c664:	10 9c       	mov	r12,r8
8001c666:	f0 16 00 34 	mcall	r6[208]
	
	
	//_port->begin(38400U);

	// ask for navigation solutions every 200ms
	msg.measure_rate_ms = 200;		// ms
8001c66a:	e0 68 00 c8 	mov	r8,200
8001c66e:	ef 58 ff f6 	st.h	r7[-10],r8
	msg.nav_rate        = 1;		// constant equal to 1
8001c672:	30 18       	mov	r8,1
8001c674:	ef 58 ff f8 	st.h	r7[-8],r8
	msg.timeref         = 0;		// 0:UTC time, 1:GPS time
8001c678:	30 08       	mov	r8,0
8001c67a:	ef 58 ff fa 	st.h	r7[-6],r8
	
	ubx_send_message_CFG_nav_rate(UBX_CLASS_CFG, MSG_CFG_RATE, msg, sizeof(msg));
8001c67e:	20 2d       	sub	sp,8
8001c680:	1a 98       	mov	r8,sp
8001c682:	ee c9 00 0a 	sub	r9,r7,10
8001c686:	30 6a       	mov	r10,6
8001c688:	12 9b       	mov	r11,r9
8001c68a:	10 9c       	mov	r12,r8
8001c68c:	f0 16 00 1b 	mcall	r6[108]
8001c690:	30 6a       	mov	r10,6
8001c692:	30 8b       	mov	r11,8
8001c694:	30 6c       	mov	r12,6
8001c696:	f0 16 01 9e 	mcall	r6[1656]
8001c69a:	2f ed       	sub	sp,-8

	// ask for the messages we parse to be sent on every navigation solution
	//dbg_print("Set navigation messages\n");
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_POSLLH, 1);
8001c69c:	30 1a       	mov	r10,1
8001c69e:	30 2b       	mov	r11,2
8001c6a0:	30 1c       	mov	r12,1
8001c6a2:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_STATUS, 1);
8001c6a6:	30 1a       	mov	r10,1
8001c6a8:	30 3b       	mov	r11,3
8001c6aa:	30 1c       	mov	r12,1
8001c6ac:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SOL, 1);
8001c6b0:	30 1a       	mov	r10,1
8001c6b2:	30 6b       	mov	r11,6
8001c6b4:	30 1c       	mov	r12,1
8001c6b6:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_VELNED, 1);
8001c6ba:	30 1a       	mov	r10,1
8001c6bc:	31 2b       	mov	r11,18
8001c6be:	30 1c       	mov	r12,1
8001c6c0:	f0 16 00 5f 	mcall	r6[380]
	ubx_configure_message_rate(UBX_CLASS_NAV, MSG_NAV_SVINFO, 1);
8001c6c4:	30 1a       	mov	r10,1
8001c6c6:	33 0b       	mov	r11,48
8001c6c8:	30 1c       	mov	r12,1
8001c6ca:	f0 16 00 5f 	mcall	r6[380]

	// ask for the current navigation settings
	//Debug("Asking for engine setting\n");
	//dbg_print("Asking for engine setting\n");
	ubx_send_message_nav_settings(UBX_CLASS_CFG, MSG_CFG_NAV_SETTINGS, NULL, 0);
8001c6ce:	30 09       	mov	r9,0
8001c6d0:	30 0a       	mov	r10,0
8001c6d2:	32 4b       	mov	r11,36
8001c6d4:	30 6c       	mov	r12,6
8001c6d6:	f0 16 01 03 	mcall	r6[1036]
}
8001c6da:	2f dd       	sub	sp,-12
8001c6dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c6e0:	80 01       	ld.sh	r1,r0[0x0]
8001c6e2:	c4 d0       	breq	8001c77c <gps_update+0x98>

8001c6e4 <gps_update>:
************************************************************************************
The function that needs to be called to get the GPS information
************************************************************************************
*/
void gps_update(void)
{
8001c6e4:	eb cd 40 c0 	pushm	r6-r7,lr
8001c6e8:	1a 97       	mov	r7,sp
8001c6ea:	20 2d       	sub	sp,8
8001c6ec:	fe f6 02 08 	ld.w	r6,pc[520]
8001c6f0:	1e 26       	rsub	r6,pc
	bool result;
	uint32_t tnow;
	
	result = ubx_read();
8001c6f2:	f0 16 01 a5 	mcall	r6[1684]
8001c6f6:	18 98       	mov	r8,r12
8001c6f8:	ef 68 ff fb 	st.b	r7[-5],r8
	
	tnow = get_millis();
8001c6fc:	f0 16 00 0f 	mcall	r6[60]
8001c700:	18 98       	mov	r8,r12
8001c702:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (! result)
8001c706:	ef 38 ff fb 	ld.ub	r8,r7[-5]
8001c70a:	ec 18 00 01 	eorl	r8,0x1
8001c70e:	5c 58       	castu.b	r8
8001c710:	c1 f0       	breq	8001c74e <gps_update+0x6a>
	{
		if ((tnow - idleTimer) > idleTimeout)
8001c712:	ec f8 03 38 	ld.w	r8,r6[824]
8001c716:	70 08       	ld.w	r8,r8[0x0]
8001c718:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c71c:	10 19       	sub	r9,r8
8001c71e:	ec f8 04 40 	ld.w	r8,r6[1088]
8001c722:	70 08       	ld.w	r8,r8[0x0]
8001c724:	10 39       	cp.w	r9,r8
8001c726:	e0 88 00 e3 	brls	8001c8ec <gps_update+0x208>
		{
			/*dbg_print("gps read timeout ");
			dbg_print_num(tnow,10);
			dbg_print("\n");
			*/
			centralData->GPS_data.status = NO_GPS;
8001c72a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c72e:	70 09       	ld.w	r9,r8[0x0]
8001c730:	30 08       	mov	r8,0
8001c732:	f3 68 07 9c 	st.b	r9[1948],r8
			
			init_gps_ubx(engine_nav_setting);
8001c736:	ec f8 01 e4 	ld.w	r8,r6[484]
8001c73a:	70 08       	ld.w	r8,r8[0x0]
8001c73c:	10 9c       	mov	r12,r8
8001c73e:	f0 16 01 6e 	mcall	r6[1464]
			idleTimer = tnow;
8001c742:	ec f8 03 38 	ld.w	r8,r6[824]
8001c746:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c74a:	91 09       	st.w	r8[0x0],r9
8001c74c:	cd 08       	rjmp	8001c8ec <gps_update+0x208>
		
// 		valid_read = true;
// 		new_data = true;

		// reset the idle timer
		idleTimer = tnow;
8001c74e:	ec f8 03 38 	ld.w	r8,r6[824]
8001c752:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c756:	91 09       	st.w	r8[0x0],r9
		
		centralData->GPS_data.timeLastMsg = tnow;
8001c758:	ec f8 00 00 	ld.w	r8,r6[0]
8001c75c:	70 08       	ld.w	r8,r8[0x0]
8001c75e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001c762:	f1 49 07 94 	st.w	r8[1940],r9
		
		if(centralData->GPS_data.status == GPS_OK)
8001c766:	ec f8 00 00 	ld.w	r8,r6[0]
8001c76a:	70 08       	ld.w	r8,r8[0x0]
8001c76c:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8001c770:	30 28       	mov	r8,2
8001c772:	f0 09 18 00 	cp.b	r9,r8
8001c776:	e0 81 00 9d 	brne	8001c8b0 <gps_update+0x1cc>
		{
			// Check for horizontal accuracy
			if (centralData->GPS_data.horizontalAccuracy < UBX_POSITION_PRECISION)
8001c77a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c77e:	70 08       	ld.w	r8,r8[0x0]
8001c780:	f0 fa 07 80 	ld.w	r10,r8[1920]
8001c784:	30 18       	mov	r8,1
8001c786:	fc 19 41 a0 	movh	r9,0x41a0
8001c78a:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c78e:	e0 8c 00 03 	brvs	8001c794 <gps_update+0xb0>
8001c792:	c0 25       	brlt	8001c796 <gps_update+0xb2>
8001c794:	30 08       	mov	r8,0
8001c796:	5c 58       	castu.b	r8
8001c798:	c0 80       	breq	8001c7a8 <gps_update+0xc4>
			{
				centralData->GPS_data.horizontalStatus = 1;
8001c79a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c79e:	70 09       	ld.w	r9,r8[0x0]
8001c7a0:	30 18       	mov	r8,1
8001c7a2:	f3 68 07 9d 	st.b	r9[1949],r8
8001c7a6:	c0 78       	rjmp	8001c7b4 <gps_update+0xd0>
			}else{  
				centralData->GPS_data.horizontalStatus = 0;
8001c7a8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7ac:	70 09       	ld.w	r9,r8[0x0]
8001c7ae:	30 08       	mov	r8,0
8001c7b0:	f3 68 07 9d 	st.b	r9[1949],r8
			}
			// Check for vertical accuracy
			if (centralData->GPS_data.verticalAccuracy < UBX_ALTITUDE_PRECISION)
8001c7b4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7b8:	70 08       	ld.w	r8,r8[0x0]
8001c7ba:	f0 fa 07 84 	ld.w	r10,r8[1924]
8001c7be:	30 18       	mov	r8,1
8001c7c0:	fc 19 41 a0 	movh	r9,0x41a0
8001c7c4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c7c8:	e0 8c 00 03 	brvs	8001c7ce <gps_update+0xea>
8001c7cc:	c0 25       	brlt	8001c7d0 <gps_update+0xec>
8001c7ce:	30 08       	mov	r8,0
8001c7d0:	5c 58       	castu.b	r8
8001c7d2:	c0 80       	breq	8001c7e2 <gps_update+0xfe>
			{
				centralData->GPS_data.altitudeStatus = 1;
8001c7d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7d8:	70 09       	ld.w	r9,r8[0x0]
8001c7da:	30 18       	mov	r8,1
8001c7dc:	f3 68 07 9e 	st.b	r9[1950],r8
8001c7e0:	c0 78       	rjmp	8001c7ee <gps_update+0x10a>
			}else{
				centralData->GPS_data.altitudeStatus = 0;
8001c7e2:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7e6:	70 09       	ld.w	r9,r8[0x0]
8001c7e8:	30 08       	mov	r8,0
8001c7ea:	f3 68 07 9e 	st.b	r9[1950],r8
			}
			// Check for speed accuracy
			if (centralData->GPS_data.speedAccuracy < UBX_SPEED_PRECISION)
8001c7ee:	ec f8 00 00 	ld.w	r8,r6[0]
8001c7f2:	70 08       	ld.w	r8,r8[0x0]
8001c7f4:	f0 fa 07 88 	ld.w	r10,r8[1928]
8001c7f8:	30 18       	mov	r8,1
8001c7fa:	fc 19 40 a0 	movh	r9,0x40a0
8001c7fe:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c802:	e0 8c 00 03 	brvs	8001c808 <gps_update+0x124>
8001c806:	c0 25       	brlt	8001c80a <gps_update+0x126>
8001c808:	30 08       	mov	r8,0
8001c80a:	5c 58       	castu.b	r8
8001c80c:	c0 80       	breq	8001c81c <gps_update+0x138>
			{
				centralData->GPS_data.speedStatus = 1;
8001c80e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c812:	70 09       	ld.w	r9,r8[0x0]
8001c814:	30 18       	mov	r8,1
8001c816:	f3 68 07 9f 	st.b	r9[1951],r8
8001c81a:	c0 78       	rjmp	8001c828 <gps_update+0x144>
			}else{
				centralData->GPS_data.speedStatus = 0;
8001c81c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c820:	70 09       	ld.w	r9,r8[0x0]
8001c822:	30 08       	mov	r8,0
8001c824:	f3 68 07 9f 	st.b	r9[1951],r8
			}
			// Check for heading accuracy
			if (centralData->GPS_data.headingAccuracy < UBX_HEADING_PRECISION)
8001c828:	ec f8 00 00 	ld.w	r8,r6[0]
8001c82c:	70 08       	ld.w	r8,r8[0x0]
8001c82e:	f0 fa 07 8c 	ld.w	r10,r8[1932]
8001c832:	30 18       	mov	r8,1
8001c834:	e0 69 96 80 	mov	r9,38528
8001c838:	ea 19 4a 98 	orh	r9,0x4a98
8001c83c:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001c840:	e0 8c 00 03 	brvs	8001c846 <gps_update+0x162>
8001c844:	c0 25       	brlt	8001c848 <gps_update+0x164>
8001c846:	30 08       	mov	r8,0
8001c848:	5c 58       	castu.b	r8
8001c84a:	c0 80       	breq	8001c85a <gps_update+0x176>
			{
				centralData->GPS_data.courseStatus = 1;
8001c84c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c850:	70 09       	ld.w	r9,r8[0x0]
8001c852:	30 18       	mov	r8,1
8001c854:	f3 68 07 a0 	st.b	r9[1952],r8
8001c858:	c0 78       	rjmp	8001c866 <gps_update+0x182>
				}else{
				centralData->GPS_data.courseStatus = 0;
8001c85a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c85e:	70 09       	ld.w	r9,r8[0x0]
8001c860:	30 08       	mov	r8,0
8001c862:	f3 68 07 a0 	st.b	r9[1952],r8
			}
			
			centralData->GPS_data.accuracyStatus = centralData->GPS_data.horizontalStatus & centralData->GPS_data.altitudeStatus & centralData->GPS_data.speedStatus & centralData->GPS_data.courseStatus;
8001c866:	ec f8 00 00 	ld.w	r8,r6[0]
8001c86a:	70 09       	ld.w	r9,r8[0x0]
8001c86c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c870:	70 08       	ld.w	r8,r8[0x0]
8001c872:	f1 3a 07 9d 	ld.ub	r10,r8[1949]
8001c876:	ec f8 00 00 	ld.w	r8,r6[0]
8001c87a:	70 08       	ld.w	r8,r8[0x0]
8001c87c:	f1 38 07 9e 	ld.ub	r8,r8[1950]
8001c880:	f5 e8 00 08 	and	r8,r10,r8
8001c884:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c888:	ec f8 00 00 	ld.w	r8,r6[0]
8001c88c:	70 08       	ld.w	r8,r8[0x0]
8001c88e:	f1 38 07 9f 	ld.ub	r8,r8[1951]
8001c892:	f5 e8 00 08 	and	r8,r10,r8
8001c896:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8001c89a:	ec f8 00 00 	ld.w	r8,r6[0]
8001c89e:	70 08       	ld.w	r8,r8[0x0]
8001c8a0:	f1 38 07 a0 	ld.ub	r8,r8[1952]
8001c8a4:	f5 e8 00 08 	and	r8,r10,r8
8001c8a8:	5c 58       	castu.b	r8
8001c8aa:	f3 68 07 a1 	st.b	r9[1953],r8
8001c8ae:	c1 f8       	rjmp	8001c8ec <gps_update+0x208>
// 				
// 				// no good way to get descent rate
// 				centralData->GPS_data.verticalSpeed = 0;
// 			}
		}else{
			centralData->GPS_data.horizontalStatus = 0;
8001c8b0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8b4:	70 09       	ld.w	r9,r8[0x0]
8001c8b6:	30 08       	mov	r8,0
8001c8b8:	f3 68 07 9d 	st.b	r9[1949],r8
			centralData->GPS_data.altitudeStatus = 0;
8001c8bc:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8c0:	70 09       	ld.w	r9,r8[0x0]
8001c8c2:	30 08       	mov	r8,0
8001c8c4:	f3 68 07 9e 	st.b	r9[1950],r8
			centralData->GPS_data.speedStatus = 0;
8001c8c8:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8cc:	70 09       	ld.w	r9,r8[0x0]
8001c8ce:	30 08       	mov	r8,0
8001c8d0:	f3 68 07 9f 	st.b	r9[1951],r8
			centralData->GPS_data.courseStatus = 0;
8001c8d4:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8d8:	70 09       	ld.w	r9,r8[0x0]
8001c8da:	30 08       	mov	r8,0
8001c8dc:	f3 68 07 a0 	st.b	r9[1952],r8
			
			centralData->GPS_data.accuracyStatus = 0;
8001c8e0:	ec f8 00 00 	ld.w	r8,r6[0]
8001c8e4:	70 09       	ld.w	r9,r8[0x0]
8001c8e6:	30 08       	mov	r8,0
8001c8e8:	f3 68 07 a1 	st.b	r9[1953],r8
		}
	}
}
8001c8ec:	2f ed       	sub	sp,-8
8001c8ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c8f2:	00 00       	add	r0,r0
8001c8f4:	80 01       	ld.sh	r1,r0[0x0]
8001c8f6:	c5 74       	brge	8001c9a4 <ubx_GetSolution+0x4>

8001c8f8 <newValidGpsMsg>:
/*
* This function returns true if there is a new valid GPS message that arrived at time tnow
* false otherwise
*/
bool newValidGpsMsg(uint32_t *prevGpsMsgTime)
{
8001c8f8:	eb cd 40 c0 	pushm	r6-r7,lr
8001c8fc:	1a 97       	mov	r7,sp
8001c8fe:	20 1d       	sub	sp,4
8001c900:	49 36       	lddpc	r6,8001c94c <newValidGpsMsg+0x54>
8001c902:	1e 26       	rsub	r6,pc
8001c904:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	if((*prevGpsMsgTime != centralData->GPS_data.timeLastMsg)&&(centralData->GPS_data.status == GPS_OK)//&&(centralData->GPS_data.accuracyStatus == 1)
8001c908:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c90c:	70 09       	ld.w	r9,r8[0x0]
8001c90e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c912:	70 08       	ld.w	r8,r8[0x0]
8001c914:	f0 f8 07 94 	ld.w	r8,r8[1940]
8001c918:	10 39       	cp.w	r9,r8
8001c91a:	c1 40       	breq	8001c942 <newValidGpsMsg+0x4a>
8001c91c:	ec f8 00 00 	ld.w	r8,r6[0]
8001c920:	70 08       	ld.w	r8,r8[0x0]
8001c922:	f1 39 07 9c 	ld.ub	r9,r8[1948]
8001c926:	30 28       	mov	r8,2
8001c928:	f0 09 18 00 	cp.b	r9,r8
8001c92c:	c0 b1       	brne	8001c942 <newValidGpsMsg+0x4a>
	)
	{
		*prevGpsMsgTime = centralData->GPS_data.timeLastMsg;
8001c92e:	ec f8 00 00 	ld.w	r8,r6[0]
8001c932:	70 08       	ld.w	r8,r8[0x0]
8001c934:	f0 f9 07 94 	ld.w	r9,r8[1940]
8001c938:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001c93c:	91 09       	st.w	r8[0x0],r9
		return true;
8001c93e:	30 18       	mov	r8,1
8001c940:	c0 28       	rjmp	8001c944 <newValidGpsMsg+0x4c>
	}else{
		return false;
8001c942:	30 08       	mov	r8,0
	}
	
	
}
8001c944:	10 9c       	mov	r12,r8
8001c946:	2f fd       	sub	sp,-4
8001c948:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c94c:	80 01       	ld.sh	r1,r0[0x0]
8001c94e:	c7 86       	brmi	8001ca3e <ubx_GetNavSettings+0x26>

8001c950 <ubx_GetPosllh>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid posllh message, or 0.
*/
ubx_nav_posllh * ubx_GetPosllh()
{
8001c950:	eb cd 40 c0 	pushm	r6-r7,lr
8001c954:	1a 97       	mov	r7,sp
8001c956:	48 86       	lddpc	r6,8001c974 <ubx_GetPosllh+0x24>
8001c958:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidPosllhMessage)
8001c95a:	ec f8 04 9c 	ld.w	r8,r6[1180]
8001c95e:	90 08       	ld.sh	r8,r8[0x0]
8001c960:	58 08       	cp.w	r8,0
8001c962:	c0 50       	breq	8001c96c <ubx_GetPosllh+0x1c>
	return ubx_lastPosllhMessage;
8001c964:	ec f8 03 94 	ld.w	r8,r6[916]
8001c968:	70 08       	ld.w	r8,r8[0x0]
8001c96a:	c0 28       	rjmp	8001c96e <ubx_GetPosllh+0x1e>
	else
	return 0;
8001c96c:	30 08       	mov	r8,0
}
8001c96e:	10 9c       	mov	r12,r8
8001c970:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c974:	80 01       	ld.sh	r1,r0[0x0]
8001c976:	c7 dc       	rcall	8001ca70 <ubx_GetMonRXR+0x8>

8001c978 <ubx_GetStatus>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_status * ubx_GetStatus()
{
8001c978:	eb cd 40 c0 	pushm	r6-r7,lr
8001c97c:	1a 97       	mov	r7,sp
8001c97e:	48 86       	lddpc	r6,8001c99c <ubx_GetStatus+0x24>
8001c980:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidStatusMessage)
8001c982:	ec f8 04 5c 	ld.w	r8,r6[1116]
8001c986:	90 08       	ld.sh	r8,r8[0x0]
8001c988:	58 08       	cp.w	r8,0
8001c98a:	c0 50       	breq	8001c994 <ubx_GetStatus+0x1c>
	return ubx_lastStatusMessage;
8001c98c:	ec f8 03 98 	ld.w	r8,r6[920]
8001c990:	70 08       	ld.w	r8,r8[0x0]
8001c992:	c0 28       	rjmp	8001c996 <ubx_GetStatus+0x1e>
	else
	return 0;
8001c994:	30 08       	mov	r8,0
}
8001c996:	10 9c       	mov	r12,r8
8001c998:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c99c:	80 01       	ld.sh	r1,r0[0x0]
8001c99e:	c8 04       	brge	8001c89e <gps_update+0x1ba>

8001c9a0 <ubx_GetSolution>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_solution * ubx_GetSolution()
{
8001c9a0:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9a4:	1a 97       	mov	r7,sp
8001c9a6:	48 86       	lddpc	r6,8001c9c4 <ubx_GetSolution+0x24>
8001c9a8:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSolutionMessage)
8001c9aa:	ec f8 04 b4 	ld.w	r8,r6[1204]
8001c9ae:	90 08       	ld.sh	r8,r8[0x0]
8001c9b0:	58 08       	cp.w	r8,0
8001c9b2:	c0 50       	breq	8001c9bc <ubx_GetSolution+0x1c>
	return ubx_lastSolutionMessage;
8001c9b4:	ec f8 04 00 	ld.w	r8,r6[1024]
8001c9b8:	70 08       	ld.w	r8,r8[0x0]
8001c9ba:	c0 28       	rjmp	8001c9be <ubx_GetSolution+0x1e>
	else
	return 0;
8001c9bc:	30 08       	mov	r8,0
}
8001c9be:	10 9c       	mov	r12,r8
8001c9c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9c4:	80 01       	ld.sh	r1,r0[0x0]
8001c9c6:	c8 2c       	rcall	8001caca <ubx_GetTimVRFY+0x12>

8001c9c8 <ubx_GetVelned>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid velned message, or 0.
*/
ubx_nav_velned * ubx_GetVelned()
{
8001c9c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9cc:	1a 97       	mov	r7,sp
8001c9ce:	48 86       	lddpc	r6,8001c9ec <ubx_GetVelned+0x24>
8001c9d0:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidVelnedMessage)
8001c9d2:	ec f8 04 c0 	ld.w	r8,r6[1216]
8001c9d6:	90 08       	ld.sh	r8,r8[0x0]
8001c9d8:	58 08       	cp.w	r8,0
8001c9da:	c0 50       	breq	8001c9e4 <ubx_GetVelned+0x1c>
	return ubx_lastVelnedMessage;
8001c9dc:	ec f8 04 b0 	ld.w	r8,r6[1200]
8001c9e0:	70 08       	ld.w	r8,r8[0x0]
8001c9e2:	c0 28       	rjmp	8001c9e6 <ubx_GetVelned+0x1e>
	else
	return 0;
8001c9e4:	30 08       	mov	r8,0
}
8001c9e6:	10 9c       	mov	r12,r8
8001c9e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001c9ec:	80 01       	ld.sh	r1,r0[0x0]
8001c9ee:	c8 54       	brge	8001c8f8 <newValidGpsMsg>

8001c9f0 <ubx_GetSVInfo>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_nav_SVInfo * ubx_GetSVInfo()
{
8001c9f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001c9f4:	1a 97       	mov	r7,sp
8001c9f6:	48 86       	lddpc	r6,8001ca14 <ubx_GetSVInfo+0x24>
8001c9f8:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidSVInfoMessage)
8001c9fa:	ec f8 03 c8 	ld.w	r8,r6[968]
8001c9fe:	90 08       	ld.sh	r8,r8[0x0]
8001ca00:	58 08       	cp.w	r8,0
8001ca02:	c0 50       	breq	8001ca0c <ubx_GetSVInfo+0x1c>
	return ubx_lastSVInfoMessage;
8001ca04:	ec f8 04 94 	ld.w	r8,r6[1172]
8001ca08:	70 08       	ld.w	r8,r8[0x0]
8001ca0a:	c0 28       	rjmp	8001ca0e <ubx_GetSVInfo+0x1e>
	else
	return 0;
8001ca0c:	30 08       	mov	r8,0
}
8001ca0e:	10 9c       	mov	r12,r8
8001ca10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca14:	80 01       	ld.sh	r1,r0[0x0]
8001ca16:	c8 7c       	rcall	8001cb24 <ToRad+0x44>

8001ca18 <ubx_GetNavSettings>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_nav_settings * ubx_GetNavSettings()
{
8001ca18:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca1c:	1a 97       	mov	r7,sp
8001ca1e:	48 86       	lddpc	r6,8001ca3c <ubx_GetNavSettings+0x24>
8001ca20:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidNavSettingsMessage)
8001ca22:	ec f8 04 78 	ld.w	r8,r6[1144]
8001ca26:	90 08       	ld.sh	r8,r8[0x0]
8001ca28:	58 08       	cp.w	r8,0
8001ca2a:	c0 50       	breq	8001ca34 <ubx_GetNavSettings+0x1c>
	return ubx_lastNavSettingsMessage;
8001ca2c:	ec f8 04 a8 	ld.w	r8,r6[1192]
8001ca30:	70 08       	ld.w	r8,r8[0x0]
8001ca32:	c0 28       	rjmp	8001ca36 <ubx_GetNavSettings+0x1e>
	else
	return 0;
8001ca34:	30 08       	mov	r8,0
}
8001ca36:	10 9c       	mov	r12,r8
8001ca38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca3c:	80 01       	ld.sh	r1,r0[0x0]
8001ca3e:	c8 a4       	brge	8001c952 <ubx_GetPosllh+0x2>

8001ca40 <ubx_GetMsgRate>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_cfg_msg_rate * ubx_GetMsgRate()
{
8001ca40:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca44:	1a 97       	mov	r7,sp
8001ca46:	48 86       	lddpc	r6,8001ca64 <ubx_GetMsgRate+0x24>
8001ca48:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidCFGSetGetRateMessage)
8001ca4a:	ec f8 04 d8 	ld.w	r8,r6[1240]
8001ca4e:	90 08       	ld.sh	r8,r8[0x0]
8001ca50:	58 08       	cp.w	r8,0
8001ca52:	c0 50       	breq	8001ca5c <ubx_GetMsgRate+0x1c>
	return ubx_lastCFGSetGetRateMessage;
8001ca54:	ec f8 04 10 	ld.w	r8,r6[1040]
8001ca58:	70 08       	ld.w	r8,r8[0x0]
8001ca5a:	c0 28       	rjmp	8001ca5e <ubx_GetMsgRate+0x1e>
	else
	return 0;
8001ca5c:	30 08       	mov	r8,0
}
8001ca5e:	10 9c       	mov	r12,r8
8001ca60:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca64:	80 01       	ld.sh	r1,r0[0x0]
8001ca66:	c8 cc       	rcall	8001cb7e <init_imu+0x42>

8001ca68 <ubx_GetMonRXR>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_mon_rxr_struct * ubx_GetMonRXR()
{
8001ca68:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca6c:	1a 97       	mov	r7,sp
8001ca6e:	48 86       	lddpc	r6,8001ca8c <ubx_GetMonRXR+0x24>
8001ca70:	1e 26       	rsub	r6,pc
	if (ubx_numberOfValidMONRXRMessage)
8001ca72:	ec f8 04 bc 	ld.w	r8,r6[1212]
8001ca76:	90 08       	ld.sh	r8,r8[0x0]
8001ca78:	58 08       	cp.w	r8,0
8001ca7a:	c0 50       	breq	8001ca84 <ubx_GetMonRXR+0x1c>
	return ubx_lastMONRXRMessage;
8001ca7c:	ec f8 03 f8 	ld.w	r8,r6[1016]
8001ca80:	70 08       	ld.w	r8,r8[0x0]
8001ca82:	c0 28       	rjmp	8001ca86 <ubx_GetMonRXR+0x1e>
	else
	return 0;
8001ca84:	30 08       	mov	r8,0
}
8001ca86:	10 9c       	mov	r12,r8
8001ca88:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ca8c:	80 01       	ld.sh	r1,r0[0x0]
8001ca8e:	c8 f4       	brge	8001c9ac <ubx_GetSolution+0xc>

8001ca90 <ubx_GetTimTP>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_tp * ubx_GetTimTP()
{
8001ca90:	eb cd 40 c0 	pushm	r6-r7,lr
8001ca94:	1a 97       	mov	r7,sp
8001ca96:	48 86       	lddpc	r6,8001cab4 <ubx_GetTimTP+0x24>
8001ca98:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimTPMessage)
8001ca9a:	ec f8 04 7c 	ld.w	r8,r6[1148]
8001ca9e:	90 08       	ld.sh	r8,r8[0x0]
8001caa0:	58 08       	cp.w	r8,0
8001caa2:	c0 50       	breq	8001caac <ubx_GetTimTP+0x1c>
	return ubx_lastTimTPMessage;
8001caa4:	ec f8 04 38 	ld.w	r8,r6[1080]
8001caa8:	70 08       	ld.w	r8,r8[0x0]
8001caaa:	c0 28       	rjmp	8001caae <ubx_GetTimTP+0x1e>
	else
	return 0;
8001caac:	30 08       	mov	r8,0
}
8001caae:	10 9c       	mov	r12,r8
8001cab0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cab4:	80 01       	ld.sh	r1,r0[0x0]
8001cab6:	c9 1c       	rcall	8001cbd8 <init_imu+0x9c>

8001cab8 <ubx_GetTimVRFY>:
*	Warning: the values of the message must be read very quickly after the call to this function as buffer may be swapped in an interruption
*
*	@return A pointer to the last valid status message, or 0.
*/
ubx_tim_vrfy * ubx_GetTimVRFY()
{
8001cab8:	eb cd 40 c0 	pushm	r6-r7,lr
8001cabc:	1a 97       	mov	r7,sp
8001cabe:	48 86       	lddpc	r6,8001cadc <ubx_GetTimVRFY+0x24>
8001cac0:	1e 26       	rsub	r6,pc
	if(ubx_numberOfValidTimVRFYMessage)
8001cac2:	ec f8 04 84 	ld.w	r8,r6[1156]
8001cac6:	90 08       	ld.sh	r8,r8[0x0]
8001cac8:	58 08       	cp.w	r8,0
8001caca:	c0 50       	breq	8001cad4 <ubx_GetTimVRFY+0x1c>
	return ubx_lastTimVRFYMessage;
8001cacc:	ec f8 04 50 	ld.w	r8,r6[1104]
8001cad0:	70 08       	ld.w	r8,r8[0x0]
8001cad2:	c0 28       	rjmp	8001cad6 <ubx_GetTimVRFY+0x1e>
	else
	return 0;
8001cad4:	30 08       	mov	r8,0
}
8001cad6:	10 9c       	mov	r12,r8
8001cad8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cadc:	80 01       	ld.sh	r1,r0[0x0]
8001cade:	c9 44       	brge	8001ca06 <ubx_GetSVInfo+0x16>

8001cae0 <ToRad>:

float ToRad(float numdeg)
{
8001cae0:	eb cd 40 c0 	pushm	r6-r7,lr
8001cae4:	1a 97       	mov	r7,sp
8001cae6:	20 1d       	sub	sp,4
8001cae8:	49 46       	lddpc	r6,8001cb38 <ToRad+0x58>
8001caea:	1e 26       	rsub	r6,pc
8001caec:	ef 4c ff fc 	st.w	r7[-4],r12
	return numdeg * DEG2RAD;
8001caf0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001caf4:	f0 16 00 02 	mcall	r6[8]
8001caf8:	e0 68 2d 18 	mov	r8,11544
8001cafc:	ea 18 54 44 	orh	r8,0x5444
8001cb00:	e0 69 21 fb 	mov	r9,8699
8001cb04:	ea 19 40 09 	orh	r9,0x4009
8001cb08:	f0 16 00 03 	mcall	r6[12]
8001cb0c:	14 98       	mov	r8,r10
8001cb0e:	16 99       	mov	r9,r11
8001cb10:	10 9a       	mov	r10,r8
8001cb12:	12 9b       	mov	r11,r9
8001cb14:	30 08       	mov	r8,0
8001cb16:	e0 69 80 00 	mov	r9,32768
8001cb1a:	ea 19 40 66 	orh	r9,0x4066
8001cb1e:	f0 16 00 0c 	mcall	r6[48]
8001cb22:	14 98       	mov	r8,r10
8001cb24:	16 99       	mov	r9,r11
8001cb26:	10 9a       	mov	r10,r8
8001cb28:	12 9b       	mov	r11,r9
8001cb2a:	f0 16 00 08 	mcall	r6[32]
8001cb2e:	18 98       	mov	r8,r12
8001cb30:	10 9c       	mov	r12,r8
8001cb32:	2f fd       	sub	sp,-4
8001cb34:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cb38:	80 01       	ld.sh	r1,r0[0x0]
8001cb3a:	c9 6e       	rcall	8001c866 <gps_update+0x182>

8001cb3c <init_imu>:
#include "time_keeper.h"
#include "print_util.h"
#include "position_estimation.h"

int ic;
void init_imu (Imu_Data_t *imu1) {
8001cb3c:	eb cd 40 c0 	pushm	r6-r7,lr
8001cb40:	1a 97       	mov	r7,sp
8001cb42:	20 1d       	sub	sp,4
8001cb44:	4d 36       	lddpc	r6,8001cc90 <init_imu+0x154>
8001cb46:	1e 26       	rsub	r6,pc
8001cb48:	ef 4c ff fc 	st.w	r7[-4],r12
	
	
	init_itg3200_slow();	
8001cb4c:	f0 16 02 1f 	mcall	r6[2172]
	init_adxl345_slow();
8001cb50:	f0 16 01 79 	mcall	r6[1508]
	//init_lsm330();
	
	init_hmc5883_slow();
8001cb54:	f0 16 01 f6 	mcall	r6[2008]

	//calibrate_Gyros(imu1);
	imu1->raw_scale[0] =  RAW_GYRO_X_SCALE;
8001cb58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb5c:	e0 69 e0 00 	mov	r9,57344
8001cb60:	ea 19 46 44 	orh	r9,0x4644
8001cb64:	f1 49 01 14 	st.w	r8[276],r9
	imu1->raw_scale[1] =  RAW_GYRO_Y_SCALE;
8001cb68:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb6c:	e0 69 e0 00 	mov	r9,57344
8001cb70:	ea 19 c6 44 	orh	r9,0xc644
8001cb74:	f1 49 01 18 	st.w	r8[280],r9
	imu1->raw_scale[2] =  RAW_GYRO_Z_SCALE;
8001cb78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb7c:	e0 69 e0 00 	mov	r9,57344
8001cb80:	ea 19 46 44 	orh	r9,0x4644
8001cb84:	f1 49 01 1c 	st.w	r8[284],r9
	imu1->raw_scale[0+ACC_OFFSET] =  RAW_ACC_X_SCALE;
8001cb88:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb8c:	e0 69 75 6a 	mov	r9,30058
8001cb90:	ea 19 43 81 	orh	r9,0x4381
8001cb94:	f1 49 01 20 	st.w	r8[288],r9
	imu1->raw_scale[1+ACC_OFFSET] =  RAW_ACC_Y_SCALE;
8001cb98:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cb9c:	e0 69 7e 1e 	mov	r9,32286
8001cba0:	ea 19 43 81 	orh	r9,0x4381
8001cba4:	f1 49 01 24 	st.w	r8[292],r9
	imu1->raw_scale[2+ACC_OFFSET] =  RAW_ACC_Z_SCALE;
8001cba8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbac:	e0 69 0a 9c 	mov	r9,2716
8001cbb0:	ea 19 43 81 	orh	r9,0x4381
8001cbb4:	f1 49 01 28 	st.w	r8[296],r9
	imu1->raw_scale[0+COMPASS_OFFSET] =  RAW_MAG_X_SCALE;
8001cbb8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbbc:	e0 69 91 bc 	mov	r9,37308
8001cbc0:	ea 19 44 04 	orh	r9,0x4404
8001cbc4:	f1 49 01 2c 	st.w	r8[300],r9
	imu1->raw_scale[1+COMPASS_OFFSET] =  RAW_MAG_Y_SCALE;
8001cbc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbcc:	e0 69 52 c7 	mov	r9,21191
8001cbd0:	ea 19 44 03 	orh	r9,0x4403
8001cbd4:	f1 49 01 30 	st.w	r8[304],r9
	imu1->raw_scale[2+COMPASS_OFFSET] =  RAW_MAG_Z_SCALE;
8001cbd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbdc:	e0 69 39 4b 	mov	r9,14667
8001cbe0:	ea 19 43 f9 	orh	r9,0x43f9
8001cbe4:	f1 49 01 34 	st.w	r8[308],r9
	
	imu1->raw_bias[0+GYRO_OFFSET]= 0.0;
8001cbe8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbec:	30 09       	mov	r9,0
8001cbee:	f1 49 00 f0 	st.w	r8[240],r9
	imu1->raw_bias[1+GYRO_OFFSET]= 0.0;
8001cbf2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cbf6:	30 09       	mov	r9,0
8001cbf8:	f1 49 00 f4 	st.w	r8[244],r9
	imu1->raw_bias[2+GYRO_OFFSET]= 0.0;
8001cbfc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc00:	30 09       	mov	r9,0
8001cc02:	f1 49 00 f8 	st.w	r8[248],r9
	//myquad
	// acceleration biais
	imu1->raw_bias[0+ACC_OFFSET]= ACC_BIAIS_X;
8001cc06:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc0a:	fc 19 41 90 	movh	r9,0x4190
8001cc0e:	f1 49 00 fc 	st.w	r8[252],r9
	imu1->raw_bias[1+ACC_OFFSET]= ACC_BIAIS_Y;
8001cc12:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc16:	fc 19 41 10 	movh	r9,0x4110
8001cc1a:	f1 49 01 00 	st.w	r8[256],r9
	imu1->raw_bias[2+ACC_OFFSET]= ACC_BIAIS_Z;
8001cc1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc22:	fc 19 c1 80 	movh	r9,0xc180
8001cc26:	f1 49 01 04 	st.w	r8[260],r9
	
	// magneto bias
	imu1->raw_bias[0+COMPASS_OFFSET]= MAG_BIAIS_X;
8001cc2a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc2e:	e0 69 c2 19 	mov	r9,49689
8001cc32:	ea 19 43 03 	orh	r9,0x4303
8001cc36:	f1 49 01 08 	st.w	r8[264],r9
	imu1->raw_bias[1+COMPASS_OFFSET]= MAG_BIAIS_Y;
8001cc3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc3e:	e0 69 09 d5 	mov	r9,2517
8001cc42:	ea 19 c1 d1 	orh	r9,0xc1d1
8001cc46:	f1 49 01 0c 	st.w	r8[268],r9
	imu1->raw_bias[2+COMPASS_OFFSET]= MAG_BIAIS_Z;
8001cc4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc4e:	e0 69 a8 8d 	mov	r9,43149
8001cc52:	ea 19 42 74 	orh	r9,0x4274
8001cc56:	f1 49 01 10 	st.w	r8[272],r9
	
	
	imu_last_update_init = false;
8001cc5a:	ec f9 03 08 	ld.w	r9,r6[776]
8001cc5e:	30 08       	mov	r8,0
8001cc60:	b2 88       	st.b	r9[0x0],r8
	
	qfInit(&imu1->attitude, imu1->raw_scale, imu1->raw_bias);
8001cc62:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc66:	f0 ca ff 10 	sub	r10,r8,-240
8001cc6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc6e:	f0 c9 fe ec 	sub	r9,r8,-276
8001cc72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cc76:	12 9b       	mov	r11,r9
8001cc78:	10 9c       	mov	r12,r8
8001cc7a:	f0 16 01 f0 	mcall	r6[1984]
	imu1->attitude.calibration_level=OFF;
8001cc7e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cc82:	30 08       	mov	r8,0
8001cc84:	f3 68 00 b8 	st.b	r9[184],r8
}
8001cc88:	2f fd       	sub	sp,-4
8001cc8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cc8e:	00 00       	add	r0,r0
8001cc90:	80 01       	ld.sh	r1,r0[0x0]
8001cc92:	c9 ca       	rjmp	8001c9ca <ubx_GetVelned+0x2>

8001cc94 <imu_get_raw_data>:


void imu_get_raw_data(Imu_Data_t *imu1) {
8001cc94:	eb cd 40 c0 	pushm	r6-r7,lr
8001cc98:	1a 97       	mov	r7,sp
8001cc9a:	20 5d       	sub	sp,20
8001cc9c:	4b 66       	lddpc	r6,8001cd74 <imu_get_raw_data+0xe0>
8001cc9e:	1e 26       	rsub	r6,pc
8001cca0:	ef 4c ff ec 	st.w	r7[-20],r12
	int i=0;
8001cca4:	30 08       	mov	r8,0
8001cca6:	ef 48 ff f0 	st.w	r7[-16],r8
	
	gyro_data* gyros=get_gyro_data_slow();
8001ccaa:	f0 16 01 dc 	mcall	r6[1904]
8001ccae:	18 98       	mov	r8,r12
8001ccb0:	ef 48 ff f4 	st.w	r7[-12],r8
	acc_data* accs=get_acc_data_slow();
8001ccb4:	f0 16 01 c8 	mcall	r6[1824]
8001ccb8:	18 98       	mov	r8,r12
8001ccba:	ef 48 ff f8 	st.w	r7[-8],r8
	
//	lsm_gyro_data_t* gyros=lsm330_get_gyro_data();
//	lsm_acc_data_t* accs=lsm330_get_acc_data();
	compass_data* compass=get_compass_data_slow();
8001ccbe:	f0 16 01 41 	mcall	r6[1284]
8001ccc2:	18 98       	mov	r8,r12
8001ccc4:	ef 48 ff fc 	st.w	r7[-4],r8


	imu1->raw_channels[GYRO_OFFSET+IMU_X]=(float)gyros->axes[RAW_GYRO_X];
8001ccc8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cccc:	90 28       	ld.sh	r8,r8[0x4]
8001ccce:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ccd2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ccd6:	f1 49 00 cc 	st.w	r8[204],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Y]=(float)gyros->axes[RAW_GYRO_Y];
8001ccda:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ccde:	90 18       	ld.sh	r8,r8[0x2]
8001cce0:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cce4:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cce8:	f1 49 00 d0 	st.w	r8[208],r9
	imu1->raw_channels[GYRO_OFFSET+IMU_Z]=(float)gyros->axes[RAW_GYRO_Z];
8001ccec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ccf0:	90 38       	ld.sh	r8,r8[0x6]
8001ccf2:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001ccf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ccfa:	f1 49 00 d4 	st.w	r8[212],r9

	imu1->raw_channels[ACC_OFFSET+IMU_X]=(float)accs->axes[RAW_ACC_X];
8001ccfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd02:	90 38       	ld.sh	r8,r8[0x6]
8001cd04:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd08:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd0c:	f1 49 00 d8 	st.w	r8[216],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Y]=(float)accs->axes[RAW_ACC_Y];
8001cd10:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd14:	90 48       	ld.sh	r8,r8[0x8]
8001cd16:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd1a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd1e:	f1 49 00 dc 	st.w	r8[220],r9
	imu1->raw_channels[ACC_OFFSET+IMU_Z]=(float)accs->axes[RAW_ACC_Z];
8001cd22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cd26:	90 58       	ld.sh	r8,r8[0xa]
8001cd28:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd2c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd30:	f1 49 00 e0 	st.w	r8[224],r9

	imu1->raw_channels[COMPASS_OFFSET+IMU_X]=(float)-compass->axes[RAW_COMPASS_X];
8001cd34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd38:	90 58       	ld.sh	r8,r8[0xa]
8001cd3a:	5c 38       	neg	r8
8001cd3c:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd40:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd44:	f1 49 00 e4 	st.w	r8[228],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Y]=(float)-compass->axes[RAW_COMPASS_Y];
8001cd48:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd4c:	90 38       	ld.sh	r8,r8[0x6]
8001cd4e:	5c 38       	neg	r8
8001cd50:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd54:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd58:	f1 49 00 e8 	st.w	r8[232],r9
	imu1->raw_channels[COMPASS_OFFSET+IMU_Z]=(float)compass->axes[RAW_COMPASS_Z];
8001cd5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cd60:	90 48       	ld.sh	r8,r8[0x8]
8001cd62:	e5 a6 09 08 	cop	cp0,cr9,cr0,cr8,0x4c
8001cd66:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001cd6a:	f1 49 00 ec 	st.w	r8[236],r9
	
}
8001cd6e:	2f bd       	sub	sp,-20
8001cd70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cd74:	80 01       	ld.sh	r1,r0[0x0]
8001cd76:	cb 22       	brcc	8001ccda <imu_get_raw_data+0x46>

8001cd78 <calibrate_Gyros>:

void calibrate_Gyros(Imu_Data_t *imu1) {
8001cd78:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001cd7c:	1a 97       	mov	r7,sp
8001cd7e:	20 3d       	sub	sp,12
8001cd80:	4e 86       	lddpc	r6,8001cf20 <calibrate_Gyros+0x1a8>
8001cd82:	1e 26       	rsub	r6,pc
8001cd84:	ef 4c ff f4 	st.w	r7[-12],r12
	int i,j;
	imu_get_raw_data(imu1);
8001cd88:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cd8c:	f0 16 00 9a 	mcall	r6[616]
	for (j=0; j<3; j++) {
8001cd90:	30 08       	mov	r8,0
8001cd92:	ef 48 ff fc 	st.w	r7[-4],r8
8001cd96:	c1 48       	rjmp	8001cdbe <calibrate_Gyros+0x46>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
8001cd98:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cd9c:	ee fa ff fc 	ld.w	r10,r7[-4]
8001cda0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cda4:	2c da       	sub	r10,-51
8001cda6:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001cdaa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cdae:	2c 49       	sub	r9,-60
8001cdb0:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}

void calibrate_Gyros(Imu_Data_t *imu1) {
	int i,j;
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
8001cdb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdb8:	2f f8       	sub	r8,-1
8001cdba:	ef 48 ff fc 	st.w	r7[-4],r8
8001cdbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cdc2:	58 28       	cp.w	r8,2
8001cdc4:	fe 9a ff ea 	brle	8001cd98 <calibrate_Gyros+0x20>
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cdc8:	30 08       	mov	r8,0
8001cdca:	ef 48 ff f8 	st.w	r7[-8],r8
8001cdce:	c9 f8       	rjmp	8001cf0c <calibrate_Gyros+0x194>
		imu_get_raw_data(imu1);
8001cdd0:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cdd4:	f0 16 00 9a 	mcall	r6[616]

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cdd8:	30 08       	mov	r8,0
8001cdda:	ef 48 ff fc 	st.w	r7[-4],r8
8001cdde:	c8 a8       	rjmp	8001cef2 <calibrate_Gyros+0x17a>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
8001cde0:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001cde4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cde8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cdec:	2c 49       	sub	r9,-60
8001cdee:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cdf2:	10 9c       	mov	r12,r8
8001cdf4:	f0 16 00 02 	mcall	r6[8]
8001cdf8:	e0 68 cc cd 	mov	r8,52429
8001cdfc:	ea 18 cc cc 	orh	r8,0xcccc
8001ce00:	e0 69 cc cc 	mov	r9,52428
8001ce04:	ea 19 3f ec 	orh	r9,0x3fec
8001ce08:	f0 16 00 03 	mcall	r6[12]
8001ce0c:	14 98       	mov	r8,r10
8001ce0e:	16 99       	mov	r9,r11
8001ce10:	10 92       	mov	r2,r8
8001ce12:	12 93       	mov	r3,r9
8001ce14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce18:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce1c:	2c d9       	sub	r9,-51
8001ce1e:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ce22:	10 9c       	mov	r12,r8
8001ce24:	f0 16 00 02 	mcall	r6[8]
8001ce28:	e0 68 99 9a 	mov	r8,39322
8001ce2c:	ea 18 99 99 	orh	r8,0x9999
8001ce30:	e0 69 99 99 	mov	r9,39321
8001ce34:	ea 19 3f b9 	orh	r9,0x3fb9
8001ce38:	f0 16 00 03 	mcall	r6[12]
8001ce3c:	14 98       	mov	r8,r10
8001ce3e:	16 99       	mov	r9,r11
8001ce40:	04 9a       	mov	r10,r2
8001ce42:	06 9b       	mov	r11,r3
8001ce44:	f0 16 00 05 	mcall	r6[20]
8001ce48:	14 98       	mov	r8,r10
8001ce4a:	16 99       	mov	r9,r11
8001ce4c:	10 9a       	mov	r10,r8
8001ce4e:	12 9b       	mov	r11,r9
8001ce50:	f0 16 00 08 	mcall	r6[32]
8001ce54:	18 9a       	mov	r10,r12
8001ce56:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce5a:	ea c9 ff c4 	sub	r9,r5,-60
8001ce5e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
8001ce62:	ee f5 ff fc 	ld.w	r5,r7[-4]
8001ce66:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ce6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ce6e:	2d 59       	sub	r9,-43
8001ce70:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001ce74:	10 9c       	mov	r12,r8
8001ce76:	f0 16 00 02 	mcall	r6[8]
8001ce7a:	e0 68 cc cd 	mov	r8,52429
8001ce7e:	ea 18 cc cc 	orh	r8,0xcccc
8001ce82:	e0 69 cc cc 	mov	r9,52428
8001ce86:	ea 19 3f ec 	orh	r9,0x3fec
8001ce8a:	f0 16 00 03 	mcall	r6[12]
8001ce8e:	14 98       	mov	r8,r10
8001ce90:	16 99       	mov	r9,r11
8001ce92:	10 92       	mov	r2,r8
8001ce94:	12 93       	mov	r3,r9
8001ce96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ce9a:	f0 c9 ff fa 	sub	r9,r8,-6
8001ce9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cea2:	2c d9       	sub	r9,-51
8001cea4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001cea8:	10 9c       	mov	r12,r8
8001ceaa:	f0 16 00 02 	mcall	r6[8]
8001ceae:	e0 68 99 9a 	mov	r8,39322
8001ceb2:	ea 18 99 99 	orh	r8,0x9999
8001ceb6:	e0 69 99 99 	mov	r9,39321
8001ceba:	ea 19 3f b9 	orh	r9,0x3fb9
8001cebe:	f0 16 00 03 	mcall	r6[12]
8001cec2:	14 98       	mov	r8,r10
8001cec4:	16 99       	mov	r9,r11
8001cec6:	04 9a       	mov	r10,r2
8001cec8:	06 9b       	mov	r11,r3
8001ceca:	f0 16 00 05 	mcall	r6[20]
8001cece:	14 98       	mov	r8,r10
8001ced0:	16 99       	mov	r9,r11
8001ced2:	10 9a       	mov	r10,r8
8001ced4:	12 9b       	mov	r11,r9
8001ced6:	f0 16 00 08 	mcall	r6[32]
8001ceda:	18 9a       	mov	r10,r12
8001cedc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001cee0:	ea c9 ff d5 	sub	r9,r5,-43
8001cee4:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		imu_get_raw_data(imu1);

		//imu1->raw_bias[0+ACC_OFFSET]  = (0.9*imu1->raw_bias[0+ACC_OFFSET]+0.1*(float)imu1->raw_channels[0+ACC_OFFSET]);
		//imu1->raw_bias[1+ACC_OFFSET]  = (0.9*imu1->raw_bias[1+ACC_OFFSET]+0.1*(float)imu1->raw_channels[1+ACC_OFFSET]);
		//imu1->raw_bias[2+ACC_OFFSET]  = (0.9*imu1->raw_bias[2+ACC_OFFSET]+0.1*((float)imu1->raw_channels[2+ACC_OFFSET]-imu1->raw_scale[2+ACC_OFFSET]));
		for (j=0; j<3; j++) {
8001cee8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ceec:	2f f8       	sub	r8,-1
8001ceee:	ef 48 ff fc 	st.w	r7[-4],r8
8001cef2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001cef6:	58 28       	cp.w	r8,2
8001cef8:	fe 9a ff 74 	brle	8001cde0 <calibrate_Gyros+0x68>
			imu1->raw_bias[j]=(0.9*imu1->raw_bias[j]+0.1*(float)imu1->raw_channels[j]);
			imu1->attitude.raw_mag_mean[j] = (1.0-MAG_LPF)*imu1->attitude.raw_mag_mean[j]+MAG_LPF*((float)imu1->raw_channels[j+COMPASS_OFFSET]);
		}
		delay_ms(4);
8001cefc:	30 4c       	mov	r12,4
8001cefe:	f0 16 01 0a 	mcall	r6[1064]
	imu_get_raw_data(imu1);
	for (j=0; j<3; j++) {
		imu1->raw_bias[j]=(float)imu1->raw_channels[j];
	}
	
	for (i=0; i<100; i++) {
8001cf02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf06:	2f f8       	sub	r8,-1
8001cf08:	ef 48 ff f8 	st.w	r7[-8],r8
8001cf0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf10:	e0 48 00 63 	cp.w	r8,99
8001cf14:	fe 9a ff 5e 	brle	8001cdd0 <calibrate_Gyros+0x58>
		}
		delay_ms(4);
	}


}
8001cf18:	2f dd       	sub	sp,-12
8001cf1a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001cf1e:	00 00       	add	r0,r0
8001cf20:	80 01       	ld.sh	r1,r0[0x0]
8001cf22:	cc 06       	brmi	8001cea2 <calibrate_Gyros+0x12a>

8001cf24 <imu_update>:

void imu_update(Imu_Data_t *imu1, position_estimator_t *pos_est, pressure_data *barometer, gps_Data_type *gps){
8001cf24:	eb cd 40 c0 	pushm	r6-r7,lr
8001cf28:	1a 97       	mov	r7,sp
8001cf2a:	20 5d       	sub	sp,20
8001cf2c:	4b 46       	lddpc	r6,8001cffc <imu_update+0xd8>
8001cf2e:	1e 26       	rsub	r6,pc
8001cf30:	ef 4c ff f8 	st.w	r7[-8],r12
8001cf34:	ef 4b ff f4 	st.w	r7[-12],r11
8001cf38:	ef 4a ff f0 	st.w	r7[-16],r10
8001cf3c:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t t=get_time_ticks();
8001cf40:	f0 16 00 2d 	mcall	r6[180]
8001cf44:	18 98       	mov	r8,r12
8001cf46:	ef 48 ff fc 	st.w	r7[-4],r8
	
	if (!imu_last_update_init)
8001cf4a:	ec f8 03 08 	ld.w	r8,r6[776]
8001cf4e:	11 88       	ld.ub	r8,r8[0x0]
8001cf50:	ec 18 00 01 	eorl	r8,0x1
8001cf54:	5c 58       	castu.b	r8
8001cf56:	c0 c0       	breq	8001cf6e <imu_update+0x4a>
	{
		imu1->last_update = t;
8001cf58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf60:	f1 49 01 38 	st.w	r8[312],r9
		imu_last_update_init = true;
8001cf64:	ec f9 03 08 	ld.w	r9,r6[776]
8001cf68:	30 18       	mov	r8,1
8001cf6a:	b2 88       	st.b	r9[0x0],r8
8001cf6c:	c4 48       	rjmp	8001cff4 <imu_update+0xd0>
	}else{
		imu1->dt=ticks_to_seconds(t - imu1->last_update);
8001cf6e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf72:	f0 f8 01 38 	ld.w	r8,r8[312]
8001cf76:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf7a:	f2 08 01 08 	sub	r8,r9,r8
8001cf7e:	10 9c       	mov	r12,r8
8001cf80:	f0 16 00 c0 	mcall	r6[768]
8001cf84:	18 99       	mov	r9,r12
8001cf86:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf8a:	f1 49 01 40 	st.w	r8[320],r9
		imu1->last_update=t;
8001cf8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf92:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001cf96:	f1 49 01 38 	st.w	r8[312],r9
		qfilter(&imu1->attitude, &imu1->raw_channels, imu1->dt, false);
8001cf9a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cf9e:	f0 fa 01 40 	ld.w	r10,r8[320]
8001cfa2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfa6:	f0 cb ff 34 	sub	r11,r8,-204
8001cfaa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfae:	30 09       	mov	r9,0
8001cfb0:	10 9c       	mov	r12,r8
8001cfb2:	f0 16 01 68 	mcall	r6[1440]
		if (imu1->attitude.calibration_level==OFF) {
8001cfb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfba:	f1 38 00 b8 	ld.ub	r8,r8[184]
8001cfbe:	58 08       	cp.w	r8,0
8001cfc0:	c1 a1       	brne	8001cff4 <imu_update+0xd0>
			position_integration(pos_est, &imu1->attitude, imu1->dt);
8001cfc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfc6:	f0 f9 01 40 	ld.w	r9,r8[320]
8001cfca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfce:	12 9a       	mov	r10,r9
8001cfd0:	10 9b       	mov	r11,r8
8001cfd2:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cfd6:	f0 16 02 0e 	mcall	r6[2104]
			position_correction(pos_est, barometer, gps, imu1->dt);
8001cfda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001cfde:	f0 f8 01 40 	ld.w	r8,r8[320]
8001cfe2:	10 99       	mov	r9,r8
8001cfe4:	ee fa ff ec 	ld.w	r10,r7[-20]
8001cfe8:	ee fb ff f0 	ld.w	r11,r7[-16]
8001cfec:	ee fc ff f4 	ld.w	r12,r7[-12]
8001cff0:	f0 16 01 ec 	mcall	r6[1968]
		}
	}
}
8001cff4:	2f bd       	sub	sp,-20
8001cff6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001cffa:	00 00       	add	r0,r0
8001cffc:	80 01       	ld.sh	r1,r0[0x0]
8001cffe:	cd b2       	brcc	8001cfb4 <imu_update+0x90>

8001d000 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001d000:	eb cd 40 80 	pushm	r7,lr
8001d004:	1a 97       	mov	r7,sp
8001d006:	20 3d       	sub	sp,12
8001d008:	ef 4c ff f8 	st.w	r7[-8],r12
8001d00c:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001d010:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d014:	70 09       	ld.w	r9,r8[0x0]
8001d016:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d01a:	70 08       	ld.w	r8,r8[0x0]
8001d01c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d020:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d024:	2f c8       	sub	r8,-4
8001d026:	70 0a       	ld.w	r10,r8[0x0]
8001d028:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d02c:	2f c8       	sub	r8,-4
8001d02e:	70 08       	ld.w	r8,r8[0x0]
8001d030:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d034:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d038:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d03c:	2f 88       	sub	r8,-8
8001d03e:	70 0a       	ld.w	r10,r8[0x0]
8001d040:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d044:	2f 88       	sub	r8,-8
8001d046:	70 08       	ld.w	r8,r8[0x0]
8001d048:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d04c:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d050:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001d054:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d058:	10 9c       	mov	r12,r8
8001d05a:	2f dd       	sub	sp,-12
8001d05c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d060 <quat_multi>:

UQuat_t static inline quat_multi(const UQuat_t q1, const UQuat_t q2)
{
8001d060:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d064:	1a 97       	mov	r7,sp
8001d066:	20 7d       	sub	sp,28
8001d068:	4b d6       	lddpc	r6,8001d15c <quat_multi+0xfc>
8001d06a:	1e 26       	rsub	r6,pc
8001d06c:	ee c8 ff ec 	sub	r8,r7,-20
8001d070:	18 95       	mov	r5,r12
	float tmp[3];
	UQuat_t out;
	tmp[0] = q1.v[1] * q2.v[2] - q1.v[2]*q2.v[1];
8001d072:	70 2a       	ld.w	r10,r8[0x8]
8001d074:	70 79       	ld.w	r9,r8[0x1c]
8001d076:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d07a:	70 3b       	ld.w	r11,r8[0xc]
8001d07c:	70 69       	ld.w	r9,r8[0x18]
8001d07e:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d082:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d086:	ef 49 ff f4 	st.w	r7[-12],r9
	tmp[1] = q1.v[2] * q2.v[0] - q1.v[0]*q2.v[2];
8001d08a:	70 3a       	ld.w	r10,r8[0xc]
8001d08c:	70 59       	ld.w	r9,r8[0x14]
8001d08e:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d092:	70 1b       	ld.w	r11,r8[0x4]
8001d094:	70 79       	ld.w	r9,r8[0x1c]
8001d096:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d09a:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d09e:	ef 49 ff f8 	st.w	r7[-8],r9
	tmp[2] = q1.v[0] * q2.v[1] - q1.v[1]*q2.v[0];
8001d0a2:	70 1a       	ld.w	r10,r8[0x4]
8001d0a4:	70 69       	ld.w	r9,r8[0x18]
8001d0a6:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0aa:	70 2b       	ld.w	r11,r8[0x8]
8001d0ac:	70 59       	ld.w	r9,r8[0x14]
8001d0ae:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0b2:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001d0b6:	ef 49 ff fc 	st.w	r7[-4],r9
	out.v[0] = q2.s*q1.v[0] + q1.s *q2.v[0] +tmp[0];
8001d0ba:	70 4a       	ld.w	r10,r8[0x10]
8001d0bc:	70 19       	ld.w	r9,r8[0x4]
8001d0be:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0c2:	70 0b       	ld.w	r11,r8[0x0]
8001d0c4:	70 59       	ld.w	r9,r8[0x14]
8001d0c6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0ca:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d0ce:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d0d2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d0d6:	ef 49 ff e8 	st.w	r7[-24],r9
	out.v[1] = q2.s*q1.v[1] + q1.s *q2.v[1] +tmp[1];
8001d0da:	70 4a       	ld.w	r10,r8[0x10]
8001d0dc:	70 29       	ld.w	r9,r8[0x8]
8001d0de:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d0e2:	70 0b       	ld.w	r11,r8[0x0]
8001d0e4:	70 69       	ld.w	r9,r8[0x18]
8001d0e6:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d0ea:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d0ee:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d0f2:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d0f6:	ef 49 ff ec 	st.w	r7[-20],r9
	out.v[2] = q2.s*q1.v[2] + q1.s *q2.v[2] +tmp[2];
8001d0fa:	70 4a       	ld.w	r10,r8[0x10]
8001d0fc:	70 39       	ld.w	r9,r8[0xc]
8001d0fe:	e5 a2 0a a9 	cop	cp0,cr10,cr10,cr9,0x44
8001d102:	70 0b       	ld.w	r11,r8[0x0]
8001d104:	70 79       	ld.w	r9,r8[0x1c]
8001d106:	e5 a2 09 b9 	cop	cp0,cr9,cr11,cr9,0x44
8001d10a:	e5 a0 0a a9 	cop	cp0,cr10,cr10,cr9,0x40
8001d10e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d112:	e5 a0 09 a9 	cop	cp0,cr9,cr10,cr9,0x40
8001d116:	ef 49 ff f0 	st.w	r7[-16],r9
	out.s= q1.s*q2.s - scalar_product(q1.v, q2.v);
8001d11a:	70 0a       	ld.w	r10,r8[0x0]
8001d11c:	70 49       	ld.w	r9,r8[0x10]
8001d11e:	e5 a2 03 a9 	cop	cp0,cr3,cr10,cr9,0x44
8001d122:	f0 c9 ff f0 	sub	r9,r8,-16
8001d126:	2f c9       	sub	r9,-4
8001d128:	2f c8       	sub	r8,-4
8001d12a:	12 9b       	mov	r11,r9
8001d12c:	10 9c       	mov	r12,r8
8001d12e:	c6 9f       	rcall	8001d000 <scalar_product>
8001d130:	18 98       	mov	r8,r12
8001d132:	e5 a1 08 38 	cop	cp0,cr8,cr3,cr8,0x42
8001d136:	ef 48 ff e4 	st.w	r7[-28],r8
	
	return out;
8001d13a:	0a 98       	mov	r8,r5
8001d13c:	ee c9 00 1c 	sub	r9,r7,28
8001d140:	20 08       	sub	r8,0
8001d142:	20 09       	sub	r9,0
8001d144:	72 0a       	ld.w	r10,r9[0x0]
8001d146:	91 0a       	st.w	r8[0x0],r10
8001d148:	72 1a       	ld.w	r10,r9[0x4]
8001d14a:	91 1a       	st.w	r8[0x4],r10
8001d14c:	72 2a       	ld.w	r10,r9[0x8]
8001d14e:	91 2a       	st.w	r8[0x8],r10
8001d150:	72 39       	ld.w	r9,r9[0xc]
8001d152:	91 39       	st.w	r8[0xc],r9
}
8001d154:	0a 9c       	mov	r12,r5
8001d156:	2f 9d       	sub	sp,-28
8001d158:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d15c:	80 01       	ld.sh	r1,r0[0x0]
8001d15e:	ce ee       	rcall	8001cf3a <imu_update+0x16>

8001d160 <quat_inv>:

UQuat_t static inline quat_inv(const UQuat_t q)
{
8001d160:	eb cd 40 80 	pushm	r7,lr
8001d164:	1a 97       	mov	r7,sp
8001d166:	20 5d       	sub	sp,20
8001d168:	ee c9 ff f8 	sub	r9,r7,-8
8001d16c:	18 9a       	mov	r10,r12
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
8001d16e:	72 08       	ld.w	r8,r9[0x0]
8001d170:	ef 48 ff ec 	st.w	r7[-20],r8
	for (i=0;i<3;i++)
8001d174:	30 08       	mov	r8,0
8001d176:	ef 48 ff fc 	st.w	r7[-4],r8
8001d17a:	c1 58       	rjmp	8001d1a4 <quat_inv+0x44>
	{
		qinv.v[i] = -q.v[i];
8001d17c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d180:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d184:	2f fb       	sub	r11,-1
8001d186:	f2 0b 03 2b 	ld.w	r11,r9[r11<<0x2]
8001d18a:	ee 1b 80 00 	eorh	r11,0x8000
8001d18e:	2f f8       	sub	r8,-1
8001d190:	a3 68       	lsl	r8,0x2
8001d192:	ee 08 00 08 	add	r8,r7,r8
8001d196:	f1 4b ff ec 	st.w	r8[-20],r11
{
	int i;
	
	UQuat_t qinv;
	qinv.s = q.s;
	for (i=0;i<3;i++)
8001d19a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d19e:	2f f8       	sub	r8,-1
8001d1a0:	ef 48 ff fc 	st.w	r7[-4],r8
8001d1a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d1a8:	58 28       	cp.w	r8,2
8001d1aa:	fe 9a ff e9 	brle	8001d17c <quat_inv+0x1c>
	{
		qinv.v[i] = -q.v[i];
	}
	return qinv;
8001d1ae:	14 98       	mov	r8,r10
8001d1b0:	ee c9 00 14 	sub	r9,r7,20
8001d1b4:	20 08       	sub	r8,0
8001d1b6:	20 09       	sub	r9,0
8001d1b8:	72 0b       	ld.w	r11,r9[0x0]
8001d1ba:	91 0b       	st.w	r8[0x0],r11
8001d1bc:	72 1b       	ld.w	r11,r9[0x4]
8001d1be:	91 1b       	st.w	r8[0x4],r11
8001d1c0:	72 2b       	ld.w	r11,r9[0x8]
8001d1c2:	91 2b       	st.w	r8[0x8],r11
8001d1c4:	72 39       	ld.w	r9,r9[0xc]
8001d1c6:	91 39       	st.w	r8[0xc],r9
}
8001d1c8:	14 9c       	mov	r12,r10
8001d1ca:	2f bd       	sub	sp,-20
8001d1cc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d1d0 <quat_global_to_local>:

UQuat_t static inline quat_global_to_local(const UQuat_t qe, const UQuat_t qvect)
{
8001d1d0:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d1d4:	1a 97       	mov	r7,sp
8001d1d6:	20 cd       	sub	sp,48
8001d1d8:	4b c6       	lddpc	r6,8001d2c8 <quat_global_to_local+0xf8>
8001d1da:	1e 26       	rsub	r6,pc
8001d1dc:	ee c5 ff ec 	sub	r5,r7,-20
8001d1e0:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d1e2:	ee ca 00 10 	sub	r10,r7,16
8001d1e6:	20 4d       	sub	sp,16
8001d1e8:	1a 98       	mov	r8,sp
8001d1ea:	0a 99       	mov	r9,r5
8001d1ec:	20 08       	sub	r8,0
8001d1ee:	20 09       	sub	r9,0
8001d1f0:	72 0b       	ld.w	r11,r9[0x0]
8001d1f2:	91 0b       	st.w	r8[0x0],r11
8001d1f4:	72 1b       	ld.w	r11,r9[0x4]
8001d1f6:	91 1b       	st.w	r8[0x4],r11
8001d1f8:	72 2b       	ld.w	r11,r9[0x8]
8001d1fa:	91 2b       	st.w	r8[0x8],r11
8001d1fc:	72 39       	ld.w	r9,r9[0xc]
8001d1fe:	91 39       	st.w	r8[0xc],r9
8001d200:	14 9c       	mov	r12,r10
8001d202:	ca ff       	rcall	8001d160 <quat_inv>
8001d204:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qinv,qvect);
8001d206:	ee ca 00 20 	sub	r10,r7,32
8001d20a:	20 4d       	sub	sp,16
8001d20c:	1a 98       	mov	r8,sp
8001d20e:	ea c9 ff f0 	sub	r9,r5,-16
8001d212:	20 08       	sub	r8,0
8001d214:	20 09       	sub	r9,0
8001d216:	72 0b       	ld.w	r11,r9[0x0]
8001d218:	91 0b       	st.w	r8[0x0],r11
8001d21a:	72 1b       	ld.w	r11,r9[0x4]
8001d21c:	91 1b       	st.w	r8[0x4],r11
8001d21e:	72 2b       	ld.w	r11,r9[0x8]
8001d220:	91 2b       	st.w	r8[0x8],r11
8001d222:	72 39       	ld.w	r9,r9[0xc]
8001d224:	91 39       	st.w	r8[0xc],r9
8001d226:	20 4d       	sub	sp,16
8001d228:	1a 98       	mov	r8,sp
8001d22a:	ee c9 00 10 	sub	r9,r7,16
8001d22e:	20 08       	sub	r8,0
8001d230:	20 09       	sub	r9,0
8001d232:	72 0b       	ld.w	r11,r9[0x0]
8001d234:	91 0b       	st.w	r8[0x0],r11
8001d236:	72 1b       	ld.w	r11,r9[0x4]
8001d238:	91 1b       	st.w	r8[0x4],r11
8001d23a:	72 2b       	ld.w	r11,r9[0x8]
8001d23c:	91 2b       	st.w	r8[0x8],r11
8001d23e:	72 39       	ld.w	r9,r9[0xc]
8001d240:	91 39       	st.w	r8[0xc],r9
8001d242:	14 9c       	mov	r12,r10
8001d244:	c0 ef       	rcall	8001d060 <quat_multi>
8001d246:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp,qe);
8001d248:	ee ca 00 30 	sub	r10,r7,48
8001d24c:	20 4d       	sub	sp,16
8001d24e:	1a 98       	mov	r8,sp
8001d250:	0a 99       	mov	r9,r5
8001d252:	20 08       	sub	r8,0
8001d254:	20 09       	sub	r9,0
8001d256:	72 0b       	ld.w	r11,r9[0x0]
8001d258:	91 0b       	st.w	r8[0x0],r11
8001d25a:	72 1b       	ld.w	r11,r9[0x4]
8001d25c:	91 1b       	st.w	r8[0x4],r11
8001d25e:	72 2b       	ld.w	r11,r9[0x8]
8001d260:	91 2b       	st.w	r8[0x8],r11
8001d262:	72 39       	ld.w	r9,r9[0xc]
8001d264:	91 39       	st.w	r8[0xc],r9
8001d266:	20 4d       	sub	sp,16
8001d268:	1a 98       	mov	r8,sp
8001d26a:	ee c9 00 20 	sub	r9,r7,32
8001d26e:	20 08       	sub	r8,0
8001d270:	20 09       	sub	r9,0
8001d272:	72 0b       	ld.w	r11,r9[0x0]
8001d274:	91 0b       	st.w	r8[0x0],r11
8001d276:	72 1b       	ld.w	r11,r9[0x4]
8001d278:	91 1b       	st.w	r8[0x4],r11
8001d27a:	72 2b       	ld.w	r11,r9[0x8]
8001d27c:	91 2b       	st.w	r8[0x8],r11
8001d27e:	72 39       	ld.w	r9,r9[0xc]
8001d280:	91 39       	st.w	r8[0xc],r9
8001d282:	14 9c       	mov	r12,r10
8001d284:	ce ee       	rcall	8001d060 <quat_multi>
8001d286:	2f 8d       	sub	sp,-32
8001d288:	ee c8 00 20 	sub	r8,r7,32
8001d28c:	ee c9 00 30 	sub	r9,r7,48
8001d290:	20 08       	sub	r8,0
8001d292:	20 09       	sub	r9,0
8001d294:	72 0a       	ld.w	r10,r9[0x0]
8001d296:	91 0a       	st.w	r8[0x0],r10
8001d298:	72 1a       	ld.w	r10,r9[0x4]
8001d29a:	91 1a       	st.w	r8[0x4],r10
8001d29c:	72 2a       	ld.w	r10,r9[0x8]
8001d29e:	91 2a       	st.w	r8[0x8],r10
8001d2a0:	72 39       	ld.w	r9,r9[0xc]
8001d2a2:	91 39       	st.w	r8[0xc],r9

	return qtmp;
8001d2a4:	06 98       	mov	r8,r3
8001d2a6:	ee c9 00 20 	sub	r9,r7,32
8001d2aa:	20 08       	sub	r8,0
8001d2ac:	20 09       	sub	r9,0
8001d2ae:	72 0a       	ld.w	r10,r9[0x0]
8001d2b0:	91 0a       	st.w	r8[0x0],r10
8001d2b2:	72 1a       	ld.w	r10,r9[0x4]
8001d2b4:	91 1a       	st.w	r8[0x4],r10
8001d2b6:	72 2a       	ld.w	r10,r9[0x8]
8001d2b8:	91 2a       	st.w	r8[0x8],r10
8001d2ba:	72 39       	ld.w	r9,r9[0xc]
8001d2bc:	91 39       	st.w	r8[0xc],r9
}
8001d2be:	06 9c       	mov	r12,r3
8001d2c0:	2f 4d       	sub	sp,-48
8001d2c2:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d2c6:	00 00       	add	r0,r0
8001d2c8:	80 01       	ld.sh	r1,r0[0x0]
8001d2ca:	d0 5e       	*unknown*

8001d2cc <quat_local_to_global>:

UQuat_t static inline quat_local_to_global(const UQuat_t qe, const UQuat_t qvect)
{
8001d2cc:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001d2d0:	1a 97       	mov	r7,sp
8001d2d2:	20 cd       	sub	sp,48
8001d2d4:	4b c6       	lddpc	r6,8001d3c4 <quat_local_to_global+0xf8>
8001d2d6:	1e 26       	rsub	r6,pc
8001d2d8:	ee c5 ff ec 	sub	r5,r7,-20
8001d2dc:	18 93       	mov	r3,r12
	UQuat_t qinv, qtmp;
	
	qinv = quat_inv(qe);
8001d2de:	ee ca 00 10 	sub	r10,r7,16
8001d2e2:	20 4d       	sub	sp,16
8001d2e4:	1a 98       	mov	r8,sp
8001d2e6:	0a 99       	mov	r9,r5
8001d2e8:	20 08       	sub	r8,0
8001d2ea:	20 09       	sub	r9,0
8001d2ec:	72 0b       	ld.w	r11,r9[0x0]
8001d2ee:	91 0b       	st.w	r8[0x0],r11
8001d2f0:	72 1b       	ld.w	r11,r9[0x4]
8001d2f2:	91 1b       	st.w	r8[0x4],r11
8001d2f4:	72 2b       	ld.w	r11,r9[0x8]
8001d2f6:	91 2b       	st.w	r8[0x8],r11
8001d2f8:	72 39       	ld.w	r9,r9[0xc]
8001d2fa:	91 39       	st.w	r8[0xc],r9
8001d2fc:	14 9c       	mov	r12,r10
8001d2fe:	c3 1f       	rcall	8001d160 <quat_inv>
8001d300:	2f cd       	sub	sp,-16
	qtmp = quat_multi(qe, qvect);
8001d302:	ee ca 00 20 	sub	r10,r7,32
8001d306:	20 4d       	sub	sp,16
8001d308:	1a 98       	mov	r8,sp
8001d30a:	ea c9 ff f0 	sub	r9,r5,-16
8001d30e:	20 08       	sub	r8,0
8001d310:	20 09       	sub	r9,0
8001d312:	72 0b       	ld.w	r11,r9[0x0]
8001d314:	91 0b       	st.w	r8[0x0],r11
8001d316:	72 1b       	ld.w	r11,r9[0x4]
8001d318:	91 1b       	st.w	r8[0x4],r11
8001d31a:	72 2b       	ld.w	r11,r9[0x8]
8001d31c:	91 2b       	st.w	r8[0x8],r11
8001d31e:	72 39       	ld.w	r9,r9[0xc]
8001d320:	91 39       	st.w	r8[0xc],r9
8001d322:	20 4d       	sub	sp,16
8001d324:	1a 98       	mov	r8,sp
8001d326:	0a 99       	mov	r9,r5
8001d328:	20 08       	sub	r8,0
8001d32a:	20 09       	sub	r9,0
8001d32c:	72 0b       	ld.w	r11,r9[0x0]
8001d32e:	91 0b       	st.w	r8[0x0],r11
8001d330:	72 1b       	ld.w	r11,r9[0x4]
8001d332:	91 1b       	st.w	r8[0x4],r11
8001d334:	72 2b       	ld.w	r11,r9[0x8]
8001d336:	91 2b       	st.w	r8[0x8],r11
8001d338:	72 39       	ld.w	r9,r9[0xc]
8001d33a:	91 39       	st.w	r8[0xc],r9
8001d33c:	14 9c       	mov	r12,r10
8001d33e:	c9 1e       	rcall	8001d060 <quat_multi>
8001d340:	2f 8d       	sub	sp,-32
	qtmp = quat_multi(qtmp, qinv);
8001d342:	ee ca 00 30 	sub	r10,r7,48
8001d346:	20 4d       	sub	sp,16
8001d348:	1a 98       	mov	r8,sp
8001d34a:	ee c9 00 10 	sub	r9,r7,16
8001d34e:	20 08       	sub	r8,0
8001d350:	20 09       	sub	r9,0
8001d352:	72 0b       	ld.w	r11,r9[0x0]
8001d354:	91 0b       	st.w	r8[0x0],r11
8001d356:	72 1b       	ld.w	r11,r9[0x4]
8001d358:	91 1b       	st.w	r8[0x4],r11
8001d35a:	72 2b       	ld.w	r11,r9[0x8]
8001d35c:	91 2b       	st.w	r8[0x8],r11
8001d35e:	72 39       	ld.w	r9,r9[0xc]
8001d360:	91 39       	st.w	r8[0xc],r9
8001d362:	20 4d       	sub	sp,16
8001d364:	1a 98       	mov	r8,sp
8001d366:	ee c9 00 20 	sub	r9,r7,32
8001d36a:	20 08       	sub	r8,0
8001d36c:	20 09       	sub	r9,0
8001d36e:	72 0b       	ld.w	r11,r9[0x0]
8001d370:	91 0b       	st.w	r8[0x0],r11
8001d372:	72 1b       	ld.w	r11,r9[0x4]
8001d374:	91 1b       	st.w	r8[0x4],r11
8001d376:	72 2b       	ld.w	r11,r9[0x8]
8001d378:	91 2b       	st.w	r8[0x8],r11
8001d37a:	72 39       	ld.w	r9,r9[0xc]
8001d37c:	91 39       	st.w	r8[0xc],r9
8001d37e:	14 9c       	mov	r12,r10
8001d380:	c7 0e       	rcall	8001d060 <quat_multi>
8001d382:	2f 8d       	sub	sp,-32
8001d384:	ee c8 00 20 	sub	r8,r7,32
8001d388:	ee c9 00 30 	sub	r9,r7,48
8001d38c:	20 08       	sub	r8,0
8001d38e:	20 09       	sub	r9,0
8001d390:	72 0a       	ld.w	r10,r9[0x0]
8001d392:	91 0a       	st.w	r8[0x0],r10
8001d394:	72 1a       	ld.w	r10,r9[0x4]
8001d396:	91 1a       	st.w	r8[0x4],r10
8001d398:	72 2a       	ld.w	r10,r9[0x8]
8001d39a:	91 2a       	st.w	r8[0x8],r10
8001d39c:	72 39       	ld.w	r9,r9[0xc]
8001d39e:	91 39       	st.w	r8[0xc],r9
	
	return qtmp;
8001d3a0:	06 98       	mov	r8,r3
8001d3a2:	ee c9 00 20 	sub	r9,r7,32
8001d3a6:	20 08       	sub	r8,0
8001d3a8:	20 09       	sub	r9,0
8001d3aa:	72 0a       	ld.w	r10,r9[0x0]
8001d3ac:	91 0a       	st.w	r8[0x0],r10
8001d3ae:	72 1a       	ld.w	r10,r9[0x4]
8001d3b0:	91 1a       	st.w	r8[0x4],r10
8001d3b2:	72 2a       	ld.w	r10,r9[0x8]
8001d3b4:	91 2a       	st.w	r8[0x8],r10
8001d3b6:	72 39       	ld.w	r9,r9[0xc]
8001d3b8:	91 39       	st.w	r8[0xc],r9
}
8001d3ba:	06 9c       	mov	r12,r3
8001d3bc:	2f 4d       	sub	sp,-48
8001d3be:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001d3c2:	00 00       	add	r0,r0
8001d3c4:	80 01       	ld.sh	r1,r0[0x0]
8001d3c6:	d1 5a       	popm	r0-r3,r8-r9,r11

8001d3c8 <fast_sqrt>:

// fast newton iteration for approximate square root
float static inline fast_sqrt(float input) {
8001d3c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001d3cc:	1a 97       	mov	r7,sp
8001d3ce:	20 2d       	sub	sp,8
8001d3d0:	4b 26       	lddpc	r6,8001d498 <fast_sqrt+0xd0>
8001d3d2:	1e 26       	rsub	r6,pc
8001d3d4:	ef 4c ff f8 	st.w	r7[-8],r12
	if (input<0) {
8001d3d8:	30 18       	mov	r8,1
8001d3da:	ee fa ff f8 	ld.w	r10,r7[-8]
8001d3de:	30 09       	mov	r9,0
8001d3e0:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d3e4:	e0 8c 00 03 	brvs	8001d3ea <fast_sqrt+0x22>
8001d3e8:	c0 25       	brlt	8001d3ec <fast_sqrt+0x24>
8001d3ea:	30 08       	mov	r8,0
8001d3ec:	5c 58       	castu.b	r8
8001d3ee:	c0 30       	breq	8001d3f4 <fast_sqrt+0x2c>
		//dbg_print("negative root");
		return 0.0;
8001d3f0:	30 08       	mov	r8,0
8001d3f2:	c4 f8       	rjmp	8001d490 <fast_sqrt+0xc8>
	}
	float result=1.0;
8001d3f4:	fc 18 3f 80 	movh	r8,0x3f80
8001d3f8:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d3fc:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d400:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d404:	f0 16 00 0a 	mcall	r6[40]
8001d408:	18 98       	mov	r8,r12
8001d40a:	10 99       	mov	r9,r8
8001d40c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d410:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d414:	fc 18 3f 00 	movh	r8,0x3f00
8001d418:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d41c:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d420:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d424:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d428:	f0 16 00 0a 	mcall	r6[40]
8001d42c:	18 98       	mov	r8,r12
8001d42e:	10 99       	mov	r9,r8
8001d430:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d434:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d438:	fc 18 3f 00 	movh	r8,0x3f00
8001d43c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d440:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d444:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d448:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d44c:	f0 16 00 0a 	mcall	r6[40]
8001d450:	18 98       	mov	r8,r12
8001d452:	10 99       	mov	r9,r8
8001d454:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d458:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d45c:	fc 18 3f 00 	movh	r8,0x3f00
8001d460:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d464:	ef 48 ff fc 	st.w	r7[-4],r8
	result=0.5*(result+(input/result));
8001d468:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d46c:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d470:	f0 16 00 0a 	mcall	r6[40]
8001d474:	18 98       	mov	r8,r12
8001d476:	10 99       	mov	r9,r8
8001d478:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d47c:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d480:	fc 18 3f 00 	movh	r8,0x3f00
8001d484:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001d488:	ef 48 ff fc 	st.w	r7[-4],r8
	return result;
8001d48c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d490:	10 9c       	mov	r12,r8
8001d492:	2f ed       	sub	sp,-8
8001d494:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d498:	80 01       	ld.sh	r1,r0[0x0]
8001d49a:	d2 56       	*unknown*

8001d49c <quat_normalise>:
float static inline vector_norm(float u[])
{
	return fast_sqrt(vector_norm_sqr(u));
}

static inline UQuat_t quat_normalise(const UQuat_t q) {
8001d49c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d4a0:	1a 97       	mov	r7,sp
8001d4a2:	20 6d       	sub	sp,24
8001d4a4:	4b f6       	lddpc	r6,8001d5a0 <quat_normalise+0x104>
8001d4a6:	1e 26       	rsub	r6,pc
8001d4a8:	ee c5 ff e8 	sub	r5,r7,-24
8001d4ac:	18 92       	mov	r2,r12
	UQuat_t result={.s=1.0, .v={0.0, 0.0, 0.0} };
8001d4ae:	fc 18 3f 80 	movh	r8,0x3f80
8001d4b2:	ef 48 ff e8 	st.w	r7[-24],r8
8001d4b6:	30 08       	mov	r8,0
8001d4b8:	ef 48 ff ec 	st.w	r7[-20],r8
8001d4bc:	30 08       	mov	r8,0
8001d4be:	ef 48 ff f0 	st.w	r7[-16],r8
8001d4c2:	30 08       	mov	r8,0
8001d4c4:	ef 48 ff f4 	st.w	r7[-12],r8
	float snorm= SQR(q.s) + SQR(q.v[0]) + SQR(q.v[1]) + SQR(q.v[2]);
8001d4c8:	6a 09       	ld.w	r9,r5[0x0]
8001d4ca:	6a 08       	ld.w	r8,r5[0x0]
8001d4cc:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d4d0:	6a 1a       	ld.w	r10,r5[0x4]
8001d4d2:	6a 18       	ld.w	r8,r5[0x4]
8001d4d4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d4d8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d4dc:	6a 2a       	ld.w	r10,r5[0x8]
8001d4de:	6a 28       	ld.w	r8,r5[0x8]
8001d4e0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d4e4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001d4e8:	6a 3a       	ld.w	r10,r5[0xc]
8001d4ea:	6a 38       	ld.w	r8,r5[0xc]
8001d4ec:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d4f0:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d4f4:	ef 48 ff f8 	st.w	r7[-8],r8
	if (snorm >0.0000001) {
8001d4f8:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d4fc:	f0 16 00 02 	mcall	r6[8]
8001d500:	14 98       	mov	r8,r10
8001d502:	16 99       	mov	r9,r11
8001d504:	30 03       	mov	r3,0
8001d506:	e0 6a af 48 	mov	r10,44872
8001d50a:	ea 1a 9a bc 	orh	r10,0x9abc
8001d50e:	e0 6b d7 f2 	mov	r11,55282
8001d512:	ea 1b 3e 7a 	orh	r11,0x3e7a
8001d516:	f0 16 00 1e 	mcall	r6[120]
8001d51a:	18 98       	mov	r8,r12
8001d51c:	58 08       	cp.w	r8,0
8001d51e:	c0 20       	breq	8001d522 <quat_normalise+0x86>
8001d520:	30 13       	mov	r3,1
8001d522:	f1 d3 c0 08 	bfextu	r8,r3,0x0,0x8
8001d526:	c2 b0       	breq	8001d57c <quat_normalise+0xe0>
		float norm=fast_sqrt(snorm);
8001d528:	ee fc ff f8 	ld.w	r12,r7[-8]
8001d52c:	c4 ef       	rcall	8001d3c8 <fast_sqrt>
8001d52e:	18 98       	mov	r8,r12
8001d530:	ef 48 ff fc 	st.w	r7[-4],r8
		result.s=q.s/norm;
8001d534:	6a 08       	ld.w	r8,r5[0x0]
8001d536:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d53a:	10 9c       	mov	r12,r8
8001d53c:	f0 16 00 0a 	mcall	r6[40]
8001d540:	18 98       	mov	r8,r12
8001d542:	ef 48 ff e8 	st.w	r7[-24],r8
		result.v[0]=q.v[0]/norm;		result.v[1]=q.v[1]/norm;		result.v[2]=q.v[2]/norm;
8001d546:	6a 18       	ld.w	r8,r5[0x4]
8001d548:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d54c:	10 9c       	mov	r12,r8
8001d54e:	f0 16 00 0a 	mcall	r6[40]
8001d552:	18 98       	mov	r8,r12
8001d554:	ef 48 ff ec 	st.w	r7[-20],r8
8001d558:	6a 28       	ld.w	r8,r5[0x8]
8001d55a:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d55e:	10 9c       	mov	r12,r8
8001d560:	f0 16 00 0a 	mcall	r6[40]
8001d564:	18 98       	mov	r8,r12
8001d566:	ef 48 ff f0 	st.w	r7[-16],r8
8001d56a:	6a 38       	ld.w	r8,r5[0xc]
8001d56c:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d570:	10 9c       	mov	r12,r8
8001d572:	f0 16 00 0a 	mcall	r6[40]
8001d576:	18 98       	mov	r8,r12
8001d578:	ef 48 ff f4 	st.w	r7[-12],r8

	}
	return result;
8001d57c:	04 98       	mov	r8,r2
8001d57e:	ee c9 00 18 	sub	r9,r7,24
8001d582:	20 08       	sub	r8,0
8001d584:	20 09       	sub	r9,0
8001d586:	72 0a       	ld.w	r10,r9[0x0]
8001d588:	91 0a       	st.w	r8[0x0],r10
8001d58a:	72 1a       	ld.w	r10,r9[0x4]
8001d58c:	91 1a       	st.w	r8[0x4],r10
8001d58e:	72 2a       	ld.w	r10,r9[0x8]
8001d590:	91 2a       	st.w	r8[0x8],r10
8001d592:	72 39       	ld.w	r9,r9[0xc]
8001d594:	91 39       	st.w	r8[0xc],r9
}
8001d596:	04 9c       	mov	r12,r2
8001d598:	2f ad       	sub	sp,-24
8001d59a:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d59e:	00 00       	add	r0,r0
8001d5a0:	80 01       	ld.sh	r1,r0[0x0]
8001d5a2:	d3 2a       	popm	r4-r7,r11-r12

8001d5a4 <clip>:
		return b;
	}
}


static float inline clip(float input_value, float clip_value) {
8001d5a4:	eb cd 40 80 	pushm	r7,lr
8001d5a8:	1a 97       	mov	r7,sp
8001d5aa:	20 2d       	sub	sp,8
8001d5ac:	ef 4c ff fc 	st.w	r7[-4],r12
8001d5b0:	ef 4b ff f8 	st.w	r7[-8],r11
	
	if (input_value>clip_value)  return clip_value;     
8001d5b4:	30 18       	mov	r8,1
8001d5b6:	ee fa ff fc 	ld.w	r10,r7[-4]
8001d5ba:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d5be:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d5c2:	e0 8c 00 04 	brvs	8001d5ca <clip+0x26>
8001d5c6:	e0 89 00 03 	brgt	8001d5cc <clip+0x28>
8001d5ca:	30 08       	mov	r8,0
8001d5cc:	5c 58       	castu.b	r8
8001d5ce:	c0 40       	breq	8001d5d6 <clip+0x32>
8001d5d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5d4:	c1 98       	rjmp	8001d606 <clip+0x62>
	if (input_value<-clip_value) return -clip_value; 
8001d5d6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5da:	10 9a       	mov	r10,r8
8001d5dc:	ee 1a 80 00 	eorh	r10,0x8000
8001d5e0:	30 18       	mov	r8,1
8001d5e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d5e6:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d5ea:	e0 8c 00 04 	brvs	8001d5f2 <clip+0x4e>
8001d5ee:	e0 89 00 03 	brgt	8001d5f4 <clip+0x50>
8001d5f2:	30 08       	mov	r8,0
8001d5f4:	5c 58       	castu.b	r8
8001d5f6:	c0 60       	breq	8001d602 <clip+0x5e>
8001d5f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d5fc:	ee 18 80 00 	eorh	r8,0x8000
8001d600:	c0 38       	rjmp	8001d606 <clip+0x62>
	return input_value;
8001d602:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001d606:	10 9c       	mov	r12,r8
8001d608:	2f ed       	sub	sp,-8
8001d60a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001d60e <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001d60e:	eb cd 40 c0 	pushm	r6-r7,lr
8001d612:	1a 97       	mov	r7,sp
8001d614:	20 3d       	sub	sp,12
8001d616:	49 06       	lddpc	r6,8001d654 <mav_array_memcpy+0x46>
8001d618:	1e 26       	rsub	r6,pc
8001d61a:	ef 4c ff fc 	st.w	r7[-4],r12
8001d61e:	ef 4b ff f8 	st.w	r7[-8],r11
8001d622:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001d626:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d62a:	58 08       	cp.w	r8,0
8001d62c:	c0 91       	brne	8001d63e <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001d62e:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d632:	30 0b       	mov	r11,0
8001d634:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d638:	f0 16 00 31 	mcall	r6[196]
8001d63c:	c0 98       	rjmp	8001d64e <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001d63e:	ee fa ff f4 	ld.w	r10,r7[-12]
8001d642:	ee fb ff f8 	ld.w	r11,r7[-8]
8001d646:	ee fc ff fc 	ld.w	r12,r7[-4]
8001d64a:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001d64e:	2f dd       	sub	sp,-12
8001d650:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d654:	80 01       	ld.sh	r1,r0[0x0]
8001d656:	d4 9c       	*unknown*

8001d658 <init_simulation>:
#include "coord_conventions.h"
#include "position_estimation.h"
#include "central_data.h"
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
8001d658:	eb cd 40 c0 	pushm	r6-r7,lr
8001d65c:	1a 97       	mov	r7,sp
8001d65e:	20 3d       	sub	sp,12
8001d660:	4b f6       	lddpc	r6,8001d75c <init_simulation+0x104>
8001d662:	1e 26       	rsub	r6,pc
8001d664:	ef 4c ff f8 	st.w	r7[-8],r12
8001d668:	ef 4b ff f4 	st.w	r7[-12],r11
	int i;
	(*sim)=vehicle_model_parameters;
8001d66c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d670:	ec f9 08 cc 	ld.w	r9,r6[2252]
8001d674:	e0 6a 01 94 	mov	r10,404
8001d678:	12 9b       	mov	r11,r9
8001d67a:	10 9c       	mov	r12,r8
8001d67c:	f0 16 00 1b 	mcall	r6[108]
	for (i=0; i<3; i++) {
8001d680:	30 08       	mov	r8,0
8001d682:	ef 48 ff fc 	st.w	r7[-4],r8
8001d686:	c2 d8       	rjmp	8001d6e0 <init_simulation+0x88>
		sim->rates_bf[i]=0;
8001d688:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d68c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d690:	2f d9       	sub	r9,-3
8001d692:	30 0a       	mov	r10,0
8001d694:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->torques_bf[i]=0;
8001d698:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d69c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6a0:	30 0a       	mov	r10,0
8001d6a2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->lin_forces_bf[i]=0;
8001d6a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ae:	2f a9       	sub	r9,-6
8001d6b0:	30 0a       	mov	r10,0
8001d6b2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->vel_bf[i]=0.0;
8001d6b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6be:	2f 79       	sub	r9,-9
8001d6c0:	30 0a       	mov	r10,0
8001d6c2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		sim->pos[i]=0.0;
8001d6c6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d6ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ce:	2f 19       	sub	r9,-15
8001d6d0:	30 0a       	mov	r10,0
8001d6d2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
#include "maths.h"

void init_simulation(simulation_model_t *sim, Quat_Attitude_t *start_attitude) {
	int i;
	(*sim)=vehicle_model_parameters;
	for (i=0; i<3; i++) {
8001d6d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d6da:	2f f8       	sub	r8,-1
8001d6dc:	ef 48 ff fc 	st.w	r7[-4],r8
8001d6e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d6e4:	58 28       	cp.w	r8,2
8001d6e6:	fe 9a ff d1 	brle	8001d688 <init_simulation+0x30>
		sim->pos[i]=0.0;
		
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;
8001d6ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d6ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001d6f2:	2b 88       	sub	r8,-72
8001d6f4:	e0 6a 00 cc 	mov	r10,204
8001d6f8:	12 9b       	mov	r11,r9
8001d6fa:	10 9c       	mov	r12,r8
8001d6fc:	f0 16 00 1b 	mcall	r6[108]

	for (i=0; i<ROTORCOUNT; i++) {
8001d700:	30 08       	mov	r8,0
8001d702:	ef 48 ff fc 	st.w	r7[-4],r8
8001d706:	c0 e8       	rjmp	8001d722 <init_simulation+0xca>
		sim->rotorspeeds[i]=0.0;			
8001d708:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001d70c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d710:	2a f9       	sub	r9,-81
8001d712:	30 0a       	mov	r10,0
8001d714:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	}

	// set initial conditions to given attitude (including scalefactors and biases for simulated IMU)
	sim->attitude=*start_attitude;

	for (i=0; i<ROTORCOUNT; i++) {
8001d718:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d71c:	2f f8       	sub	r8,-1
8001d71e:	ef 48 ff fc 	st.w	r7[-4],r8
8001d722:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001d726:	58 38       	cp.w	r8,3
8001d728:	fe 9a ff f0 	brle	8001d708 <init_simulation+0xb0>
		sim->rotorspeeds[i]=0.0;			
	}
	sim->last_update=get_time();
8001d72c:	f0 16 02 09 	mcall	r6[2084]
8001d730:	14 98       	mov	r8,r10
8001d732:	16 99       	mov	r9,r11
8001d734:	10 9a       	mov	r10,r8
8001d736:	12 9b       	mov	r11,r9
8001d738:	f0 16 00 7e 	mcall	r6[504]
8001d73c:	18 99       	mov	r9,r12
8001d73e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d742:	f1 49 01 8c 	st.w	r8[396],r9
	sim->dt=0.01;
8001d746:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d74a:	e0 69 d7 0a 	mov	r9,55050
8001d74e:	ea 19 3c 23 	orh	r9,0x3c23
8001d752:	f1 49 01 90 	st.w	r8[400],r9
}
8001d756:	2f dd       	sub	sp,-12
8001d758:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001d75c:	80 01       	ld.sh	r1,r0[0x0]
8001d75e:	d4 e6       	*unknown*

8001d760 <lift_drag_base>:



// inverse function of mix_to_servos in stabilisation to recover torques and forces

static inline float lift_drag_base(simulation_model_t *sim, float rpm, float sqr_lat_airspeed, float axial_airspeed) {
8001d760:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001d764:	1a 97       	mov	r7,sp
8001d766:	20 6d       	sub	sp,24
8001d768:	4e 26       	lddpc	r6,8001d8f0 <lift_drag_base+0x190>
8001d76a:	1e 26       	rsub	r6,pc
8001d76c:	ef 4c ff f4 	st.w	r7[-12],r12
8001d770:	ef 4b ff f0 	st.w	r7[-16],r11
8001d774:	ef 4a ff ec 	st.w	r7[-20],r10
8001d778:	ef 49 ff e8 	st.w	r7[-24],r9
	if (rpm < 0.1) return 0.0;
8001d77c:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d780:	f0 16 00 02 	mcall	r6[8]
8001d784:	30 05       	mov	r5,0
8001d786:	e0 68 99 9a 	mov	r8,39322
8001d78a:	ea 18 99 99 	orh	r8,0x9999
8001d78e:	e0 69 99 99 	mov	r9,39321
8001d792:	ea 19 3f b9 	orh	r9,0x3fb9
8001d796:	f0 16 00 1e 	mcall	r6[120]
8001d79a:	18 98       	mov	r8,r12
8001d79c:	58 08       	cp.w	r8,0
8001d79e:	c0 20       	breq	8001d7a2 <lift_drag_base+0x42>
8001d7a0:	30 15       	mov	r5,1
8001d7a2:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
8001d7a6:	c0 30       	breq	8001d7ac <lift_drag_base+0x4c>
8001d7a8:	30 08       	mov	r8,0
8001d7aa:	c9 f8       	rjmp	8001d8e8 <lift_drag_base+0x188>
	float mean_vel=sim->rotor_diameter *PI * rpm/60.0;
8001d7ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d7b0:	f0 f8 01 68 	ld.w	r8,r8[360]
8001d7b4:	10 9c       	mov	r12,r8
8001d7b6:	f0 16 00 02 	mcall	r6[8]
8001d7ba:	e0 68 2d 18 	mov	r8,11544
8001d7be:	ea 18 54 44 	orh	r8,0x5444
8001d7c2:	e0 69 21 fb 	mov	r9,8699
8001d7c6:	ea 19 40 09 	orh	r9,0x4009
8001d7ca:	f0 16 00 03 	mcall	r6[12]
8001d7ce:	14 98       	mov	r8,r10
8001d7d0:	16 99       	mov	r9,r11
8001d7d2:	10 92       	mov	r2,r8
8001d7d4:	12 93       	mov	r3,r9
8001d7d6:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d7da:	f0 16 00 02 	mcall	r6[8]
8001d7de:	14 98       	mov	r8,r10
8001d7e0:	16 99       	mov	r9,r11
8001d7e2:	04 9a       	mov	r10,r2
8001d7e4:	06 9b       	mov	r11,r3
8001d7e6:	f0 16 00 03 	mcall	r6[12]
8001d7ea:	14 98       	mov	r8,r10
8001d7ec:	16 99       	mov	r9,r11
8001d7ee:	10 9a       	mov	r10,r8
8001d7f0:	12 9b       	mov	r11,r9
8001d7f2:	30 08       	mov	r8,0
8001d7f4:	fc 19 40 4e 	movh	r9,0x404e
8001d7f8:	f0 16 00 0c 	mcall	r6[48]
8001d7fc:	14 98       	mov	r8,r10
8001d7fe:	16 99       	mov	r9,r11
8001d800:	10 9a       	mov	r10,r8
8001d802:	12 9b       	mov	r11,r9
8001d804:	f0 16 00 08 	mcall	r6[32]
8001d808:	18 98       	mov	r8,r12
8001d80a:	ef 48 ff f8 	st.w	r7[-8],r8
	float exit_vel=rpm/60.0 *sim -> rotor_pitch;           
8001d80e:	ee fc ff f0 	ld.w	r12,r7[-16]
8001d812:	f0 16 00 02 	mcall	r6[8]
8001d816:	30 08       	mov	r8,0
8001d818:	fc 19 40 4e 	movh	r9,0x404e
8001d81c:	f0 16 00 0c 	mcall	r6[48]
8001d820:	14 98       	mov	r8,r10
8001d822:	16 99       	mov	r9,r11
8001d824:	10 92       	mov	r2,r8
8001d826:	12 93       	mov	r3,r9
8001d828:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d82c:	f0 f8 01 70 	ld.w	r8,r8[368]
8001d830:	10 9c       	mov	r12,r8
8001d832:	f0 16 00 02 	mcall	r6[8]
8001d836:	14 98       	mov	r8,r10
8001d838:	16 99       	mov	r9,r11
8001d83a:	04 9a       	mov	r10,r2
8001d83c:	06 9b       	mov	r11,r3
8001d83e:	f0 16 00 03 	mcall	r6[12]
8001d842:	14 98       	mov	r8,r10
8001d844:	16 99       	mov	r9,r11
8001d846:	10 9a       	mov	r10,r8
8001d848:	12 9b       	mov	r11,r9
8001d84a:	f0 16 00 08 	mcall	r6[32]
8001d84e:	18 98       	mov	r8,r12
8001d850:	ef 48 ff fc 	st.w	r7[-4],r8
	return (0.5*AIR_DENSITY*(mean_vel*mean_vel +sqr_lat_airspeed) * sim->rotor_foil_area  * (1.0-(axial_airspeed/exit_vel)));
8001d854:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001d858:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001d85c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d860:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001d864:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d868:	10 9c       	mov	r12,r8
8001d86a:	f0 16 00 02 	mcall	r6[8]
8001d86e:	e0 68 33 33 	mov	r8,13107
8001d872:	ea 18 33 33 	orh	r8,0x3333
8001d876:	e0 69 33 33 	mov	r9,13107
8001d87a:	ea 19 3f e3 	orh	r9,0x3fe3
8001d87e:	f0 16 00 03 	mcall	r6[12]
8001d882:	14 98       	mov	r8,r10
8001d884:	16 99       	mov	r9,r11
8001d886:	10 92       	mov	r2,r8
8001d888:	12 93       	mov	r3,r9
8001d88a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001d88e:	f0 f8 01 6c 	ld.w	r8,r8[364]
8001d892:	10 9c       	mov	r12,r8
8001d894:	f0 16 00 02 	mcall	r6[8]
8001d898:	14 98       	mov	r8,r10
8001d89a:	16 99       	mov	r9,r11
8001d89c:	04 9a       	mov	r10,r2
8001d89e:	06 9b       	mov	r11,r3
8001d8a0:	f0 16 00 03 	mcall	r6[12]
8001d8a4:	14 98       	mov	r8,r10
8001d8a6:	16 99       	mov	r9,r11
8001d8a8:	10 92       	mov	r2,r8
8001d8aa:	12 93       	mov	r3,r9
8001d8ac:	ee fb ff fc 	ld.w	r11,r7[-4]
8001d8b0:	ee fc ff e8 	ld.w	r12,r7[-24]
8001d8b4:	f0 16 00 0a 	mcall	r6[40]
8001d8b8:	18 98       	mov	r8,r12
8001d8ba:	10 9c       	mov	r12,r8
8001d8bc:	f0 16 00 02 	mcall	r6[8]
8001d8c0:	14 98       	mov	r8,r10
8001d8c2:	16 99       	mov	r9,r11
8001d8c4:	30 0a       	mov	r10,0
8001d8c6:	fc 1b 3f f0 	movh	r11,0x3ff0
8001d8ca:	f0 16 00 11 	mcall	r6[68]
8001d8ce:	14 98       	mov	r8,r10
8001d8d0:	16 99       	mov	r9,r11
8001d8d2:	04 9a       	mov	r10,r2
8001d8d4:	06 9b       	mov	r11,r3
8001d8d6:	f0 16 00 03 	mcall	r6[12]
8001d8da:	14 98       	mov	r8,r10
8001d8dc:	16 99       	mov	r9,r11
8001d8de:	10 9a       	mov	r10,r8
8001d8e0:	12 9b       	mov	r11,r9
8001d8e2:	f0 16 00 08 	mcall	r6[32]
8001d8e6:	18 98       	mov	r8,r12
}
8001d8e8:	10 9c       	mov	r12,r8
8001d8ea:	2f ad       	sub	sp,-24
8001d8ec:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001d8f0:	80 01       	ld.sh	r1,r0[0x0]
8001d8f2:	d5 ee       	*unknown*

8001d8f4 <forces_from_servos_diag_quad>:


void forces_from_servos_diag_quad(simulation_model_t *sim, servo_output *servos){
8001d8f4:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8001d8f8:	1a 97       	mov	r7,sp
8001d8fa:	21 dd       	sub	sp,116
8001d8fc:	fe f6 04 54 	ld.w	r6,pc[1108]
8001d900:	1e 26       	rsub	r6,pc
8001d902:	ef 4c ff 90 	st.w	r7[-112],r12
8001d906:	ef 4b ff 8c 	st.w	r7[-116],r11
	int i;
	float motor_command[4];
	float rotor_lifts[4], rotor_drags[4], rotor_inertia[4], rotor_lateral_drag[4];
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
8001d90a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d90e:	70 99       	ld.w	r9,r8[0x24]
8001d910:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d914:	70 98       	ld.w	r8,r8[0x24]
8001d916:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001d91a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d91e:	70 aa       	ld.w	r10,r8[0x28]
8001d920:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d924:	70 a8       	ld.w	r8,r8[0x28]
8001d926:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001d92a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d92e:	70 ab       	ld.w	r11,r8[0x28]
8001d930:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d934:	70 a8       	ld.w	r8,r8[0x28]
8001d936:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001d93a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001d93e:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001d942:	ef 48 ff ec 	st.w	r7[-20],r8
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
8001d946:	ee fc ff ec 	ld.w	r12,r7[-20]
8001d94a:	f0 16 00 02 	mcall	r6[8]
8001d94e:	14 98       	mov	r8,r10
8001d950:	16 99       	mov	r9,r11
8001d952:	10 9a       	mov	r10,r8
8001d954:	12 9b       	mov	r11,r9
8001d956:	f0 16 00 6e 	mcall	r6[440]
8001d95a:	14 98       	mov	r8,r10
8001d95c:	16 99       	mov	r9,r11
8001d95e:	10 9a       	mov	r10,r8
8001d960:	12 9b       	mov	r11,r9
8001d962:	f0 16 00 08 	mcall	r6[32]
8001d966:	18 98       	mov	r8,r12
8001d968:	ef 48 ff f0 	st.w	r7[-16],r8
	
	for (i=0; i<4; i++) {
8001d96c:	30 08       	mov	r8,0
8001d96e:	ef 48 ff e4 	st.w	r7[-28],r8
8001d972:	cb 28       	rjmp	8001dad6 <forces_from_servos_diag_quad+0x1e2>
		float old_rotor_speed;
		motor_command[i]=(float)servos[i].value/SERVO_SCALE - sim->rotor_rpm_offset;
8001d974:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001d978:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d97c:	a5 68       	lsl	r8,0x4
8001d97e:	ee f9 ff 8c 	ld.w	r9,r7[-116]
8001d982:	f2 08 00 08 	add	r8,r9,r8
8001d986:	70 08       	ld.w	r8,r8[0x0]
8001d988:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
8001d98c:	fc 1b 43 fa 	movh	r11,0x43fa
8001d990:	10 9c       	mov	r12,r8
8001d992:	f0 16 00 0a 	mcall	r6[40]
8001d996:	18 98       	mov	r8,r12
8001d998:	10 99       	mov	r9,r8
8001d99a:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d99e:	f0 f8 01 5c 	ld.w	r8,r8[348]
8001d9a2:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001d9a6:	ea 08 15 02 	lsl	r8,r5,0x2
8001d9aa:	ee 08 00 08 	add	r8,r7,r8
8001d9ae:	f1 49 ff d4 	st.w	r8[-44],r9
		if (motor_command[i]<0.0) motor_command[i]=0;
8001d9b2:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d9b6:	a3 68       	lsl	r8,0x2
8001d9b8:	ee 08 00 08 	add	r8,r7,r8
8001d9bc:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001d9c0:	30 18       	mov	r8,1
8001d9c2:	30 09       	mov	r9,0
8001d9c4:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001d9c8:	e0 8c 00 03 	brvs	8001d9ce <forces_from_servos_diag_quad+0xda>
8001d9cc:	c0 25       	brlt	8001d9d0 <forces_from_servos_diag_quad+0xdc>
8001d9ce:	30 08       	mov	r8,0
8001d9d0:	5c 58       	castu.b	r8
8001d9d2:	c0 90       	breq	8001d9e4 <forces_from_servos_diag_quad+0xf0>
8001d9d4:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d9d8:	a3 68       	lsl	r8,0x2
8001d9da:	ee 08 00 08 	add	r8,r7,r8
8001d9de:	30 09       	mov	r9,0
8001d9e0:	f1 49 ff d4 	st.w	r8[-44],r9
		
		// temporarily save old rotor speeds
		old_rotor_speed=sim->rotorspeeds[i];
8001d9e4:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d9e8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001d9ec:	2a f9       	sub	r9,-81
8001d9ee:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001d9f2:	ef 48 ff fc 	st.w	r7[-4],r8
		// estimate rotor speeds by low-pass filtering
		//sim->rotorspeeds[i]=(sim->rotor_lpf) * sim->rotorspeeds[i] + (1.0-sim->rotor_lpf) * (motor_command[i] * sim->rotor_rpm_gain);
		sim->rotorspeeds[i]=(motor_command[i] * sim->rotor_rpm_gain);
8001d9f6:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001d9fa:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001d9fe:	a3 68       	lsl	r8,0x2
8001da00:	ee 08 00 08 	add	r8,r7,r8
8001da04:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001da08:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da0c:	f0 f8 01 58 	ld.w	r8,r8[344]
8001da10:	e5 a2 0a a8 	cop	cp0,cr10,cr10,cr8,0x44
8001da14:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da18:	2a f9       	sub	r9,-81
8001da1a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// calculate torque created by rotor inertia
		rotor_inertia[i]=(sim->rotorspeeds[i] - old_rotor_speed)/sim->dt * sim->rotor_momentum;
8001da1e:	ee f5 ff e4 	ld.w	r5,r7[-28]
8001da22:	ee f9 ff e4 	ld.w	r9,r7[-28]
8001da26:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da2a:	2a f9       	sub	r9,-81
8001da2c:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001da30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001da34:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8001da38:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001da3c:	f2 f9 01 90 	ld.w	r9,r9[400]
8001da40:	12 9b       	mov	r11,r9
8001da42:	10 9c       	mov	r12,r8
8001da44:	f0 16 00 0a 	mcall	r6[40]
8001da48:	18 98       	mov	r8,r12
8001da4a:	10 99       	mov	r9,r8
8001da4c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da50:	f0 f8 01 84 	ld.w	r8,r8[388]
8001da54:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001da58:	ea 08 15 02 	lsl	r8,r5,0x2
8001da5c:	ee 08 00 08 	add	r8,r7,r8
8001da60:	f1 49 ff a4 	st.w	r8[-92],r9
		
		ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, -sim->vel_bf[Z]);
8001da64:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da68:	70 b8       	ld.w	r8,r8[0x2c]
8001da6a:	10 99       	mov	r9,r8
8001da6c:	ee 19 80 00 	eorh	r9,0x8000
8001da70:	ee fa ff e4 	ld.w	r10,r7[-28]
8001da74:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001da78:	2a fa       	sub	r10,-81
8001da7a:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
8001da7e:	ee fa ff ec 	ld.w	r10,r7[-20]
8001da82:	10 9b       	mov	r11,r8
8001da84:	ee fc ff 90 	ld.w	r12,r7[-112]
8001da88:	c6 ce       	rcall	8001d760 <lift_drag_base>
8001da8a:	18 98       	mov	r8,r12
8001da8c:	ef 48 ff e8 	st.w	r7[-24],r8
		//ldb=lift_drag_base(sim, sim->rotorspeeds[i], sqr_lateral_airspeed, 0.0);
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
8001da90:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001da94:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001da98:	f2 fa 01 64 	ld.w	r10,r9[356]
8001da9c:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001daa0:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001daa4:	a3 68       	lsl	r8,0x2
8001daa6:	ee 08 00 08 	add	r8,r7,r8
8001daaa:	f1 49 ff c4 	st.w	r8[-60],r9
		rotor_drags[i]=ldb * sim->rotor_cd;
8001daae:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dab2:	ee f9 ff 90 	ld.w	r9,r7[-112]
8001dab6:	f2 fa 01 60 	ld.w	r10,r9[352]
8001daba:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001dabe:	e5 a2 09 a9 	cop	cp0,cr9,cr10,cr9,0x44
8001dac2:	a3 68       	lsl	r8,0x2
8001dac4:	ee 08 00 08 	add	r8,r7,r8
8001dac8:	f1 49 ff b4 	st.w	r8[-76],r9
	float ldb;
	
	float sqr_lateral_airspeed=SQR(sim->vel_bf[0]) + SQR(sim->vel_bf[1]*sim->vel_bf[1]);
	float lateral_airspeed=sqrt(sqr_lateral_airspeed);
	
	for (i=0; i<4; i++) {
8001dacc:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dad0:	2f f8       	sub	r8,-1
8001dad2:	ef 48 ff e4 	st.w	r7[-28],r8
8001dad6:	ee f8 ff e4 	ld.w	r8,r7[-28]
8001dada:	58 38       	cp.w	r8,3
8001dadc:	fe 9a ff 4c 	brle	8001d974 <forces_from_servos_diag_quad+0x80>
		
		rotor_lifts[i]=ldb * sim->rotor_cl;
		rotor_drags[i]=ldb * sim->rotor_cd;
	}
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
8001dae0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dae4:	f0 f8 01 88 	ld.w	r8,r8[392]
8001dae8:	10 9c       	mov	r12,r8
8001daea:	f0 16 00 02 	mcall	r6[8]
8001daee:	e0 68 0d 1b 	mov	r8,3355
8001daf2:	ea 18 2d e0 	orh	r8,0x2de0
8001daf6:	e0 69 a0 90 	mov	r9,41104
8001dafa:	ea 19 3f f6 	orh	r9,0x3ff6
8001dafe:	f0 16 00 0c 	mcall	r6[48]
8001db02:	14 98       	mov	r8,r10
8001db04:	16 99       	mov	r9,r11
8001db06:	10 9a       	mov	r10,r8
8001db08:	12 9b       	mov	r11,r9
8001db0a:	f0 16 00 08 	mcall	r6[32]
8001db0e:	18 98       	mov	r8,r12
8001db10:	ef 48 ff f4 	st.w	r7[-12],r8
	float mpos_y=sim->rotor_arm_length / 1.4142;
8001db14:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db18:	f0 f8 01 88 	ld.w	r8,r8[392]
8001db1c:	10 9c       	mov	r12,r8
8001db1e:	f0 16 00 02 	mcall	r6[8]
8001db22:	e0 68 0d 1b 	mov	r8,3355
8001db26:	ea 18 2d e0 	orh	r8,0x2de0
8001db2a:	e0 69 a0 90 	mov	r9,41104
8001db2e:	ea 19 3f f6 	orh	r9,0x3ff6
8001db32:	f0 16 00 0c 	mcall	r6[48]
8001db36:	14 98       	mov	r8,r10
8001db38:	16 99       	mov	r9,r11
8001db3a:	10 9a       	mov	r10,r8
8001db3c:	12 9b       	mov	r11,r9
8001db3e:	f0 16 00 08 	mcall	r6[32]
8001db42:	18 98       	mov	r8,r12
8001db44:	ef 48 ff f8 	st.w	r7[-8],r8
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001db48:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001db4c:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001db50:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;
8001db54:	ee fa ff c8 	ld.w	r10,r7[-56]
8001db58:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001db5c:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	
	float mpos_x=sim->rotor_arm_length / 1.4142;
	float mpos_y=sim->rotor_arm_length / 1.4142;
	
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
8001db60:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001db64:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001db68:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001db6c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db70:	91 09       	st.w	r8[0x0],r9
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001db72:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001db76:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001db7a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;
8001db7e:	ee fa ff d0 	ld.w	r10,r7[-48]
8001db82:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001db86:	e5 a0 08 a8 	cop	cp0,cr8,cr10,cr8,0x40
	// torque around x axis (roll)
	sim->torques_bf[ROLL]  = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_REAR_LEFT]  ) 
						    - (rotor_lifts[M_FRONT_RIGHT] + rotor_lifts[M_REAR_RIGHT] )) * mpos_y;;

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
8001db8a:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001db8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001db92:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001db96:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001db9a:	91 19       	st.w	r8[0x4],r9
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001db9c:	ee f8 ff b8 	ld.w	r8,r7[-72]
8001dba0:	10 9c       	mov	r12,r8
8001dba2:	f0 16 00 02 	mcall	r6[8]
8001dba6:	30 08       	mov	r8,0
8001dba8:	fc 19 40 24 	movh	r9,0x4024
8001dbac:	f0 16 00 03 	mcall	r6[12]
8001dbb0:	14 98       	mov	r8,r10
8001dbb2:	16 99       	mov	r9,r11
8001dbb4:	10 92       	mov	r2,r8
8001dbb6:	12 93       	mov	r3,r9
8001dbb8:	ee f8 ff a8 	ld.w	r8,r7[-88]
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dbbc:	10 9c       	mov	r12,r8
8001dbbe:	f0 16 00 02 	mcall	r6[8]
8001dbc2:	14 98       	mov	r8,r10
8001dbc4:	16 99       	mov	r9,r11
8001dbc6:	04 9a       	mov	r10,r2
8001dbc8:	06 9b       	mov	r11,r3
8001dbca:	f0 16 00 05 	mcall	r6[20]
8001dbce:	14 98       	mov	r8,r10
8001dbd0:	16 99       	mov	r9,r11
8001dbd2:	10 92       	mov	r2,r8
8001dbd4:	12 93       	mov	r3,r9

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dbd6:	ee f8 ff bc 	ld.w	r8,r7[-68]
8001dbda:	10 9c       	mov	r12,r8
8001dbdc:	f0 16 00 02 	mcall	r6[8]
8001dbe0:	30 08       	mov	r8,0
8001dbe2:	fc 19 40 24 	movh	r9,0x4024
8001dbe6:	f0 16 00 03 	mcall	r6[12]
8001dbea:	14 98       	mov	r8,r10
8001dbec:	16 99       	mov	r9,r11
8001dbee:	10 90       	mov	r0,r8
8001dbf0:	12 91       	mov	r1,r9
8001dbf2:	ee f8 ff ac 	ld.w	r8,r7[-84]
8001dbf6:	10 9c       	mov	r12,r8
8001dbf8:	f0 16 00 02 	mcall	r6[8]
8001dbfc:	14 98       	mov	r8,r10
8001dbfe:	16 99       	mov	r9,r11
8001dc00:	00 9a       	mov	r10,r0
8001dc02:	02 9b       	mov	r11,r1
8001dc04:	f0 16 00 05 	mcall	r6[20]
8001dc08:	14 98       	mov	r8,r10
8001dc0a:	16 99       	mov	r9,r11
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
8001dc0c:	04 9a       	mov	r10,r2
8001dc0e:	06 9b       	mov	r11,r3
8001dc10:	f0 16 00 11 	mcall	r6[68]
8001dc14:	14 98       	mov	r8,r10
8001dc16:	16 99       	mov	r9,r11
8001dc18:	10 92       	mov	r2,r8
8001dc1a:	12 93       	mov	r3,r9
8001dc1c:	ee f8 ff c0 	ld.w	r8,r7[-64]
8001dc20:	10 9c       	mov	r12,r8
8001dc22:	f0 16 00 02 	mcall	r6[8]
8001dc26:	30 08       	mov	r8,0
8001dc28:	fc 19 40 24 	movh	r9,0x4024
8001dc2c:	f0 16 00 03 	mcall	r6[12]
8001dc30:	14 98       	mov	r8,r10
8001dc32:	16 99       	mov	r9,r11
8001dc34:	10 90       	mov	r0,r8
8001dc36:	12 91       	mov	r1,r9
8001dc38:	ee f8 ff b0 	ld.w	r8,r7[-80]
8001dc3c:	10 9c       	mov	r12,r8
8001dc3e:	f0 16 00 02 	mcall	r6[8]
8001dc42:	14 98       	mov	r8,r10
8001dc44:	16 99       	mov	r9,r11
8001dc46:	00 9a       	mov	r10,r0
8001dc48:	02 9b       	mov	r11,r1
8001dc4a:	f0 16 00 05 	mcall	r6[20]
8001dc4e:	14 98       	mov	r8,r10
8001dc50:	16 99       	mov	r9,r11
8001dc52:	04 9a       	mov	r10,r2
8001dc54:	06 9b       	mov	r11,r3
8001dc56:	f0 16 00 05 	mcall	r6[20]
8001dc5a:	14 98       	mov	r8,r10
8001dc5c:	16 99       	mov	r9,r11
8001dc5e:	10 92       	mov	r2,r8
8001dc60:	12 93       	mov	r3,r9
8001dc62:	ee f8 ff b4 	ld.w	r8,r7[-76]
8001dc66:	10 9c       	mov	r12,r8
8001dc68:	f0 16 00 02 	mcall	r6[8]
8001dc6c:	30 08       	mov	r8,0
8001dc6e:	fc 19 40 24 	movh	r9,0x4024
8001dc72:	f0 16 00 03 	mcall	r6[12]
8001dc76:	14 98       	mov	r8,r10
8001dc78:	16 99       	mov	r9,r11
8001dc7a:	10 90       	mov	r0,r8
8001dc7c:	12 91       	mov	r1,r9
8001dc7e:	ee f8 ff a4 	ld.w	r8,r7[-92]
8001dc82:	10 9c       	mov	r12,r8
8001dc84:	f0 16 00 02 	mcall	r6[8]
8001dc88:	14 98       	mov	r8,r10
8001dc8a:	16 99       	mov	r9,r11
8001dc8c:	00 9a       	mov	r10,r0
8001dc8e:	02 9b       	mov	r11,r1
8001dc90:	f0 16 00 05 	mcall	r6[20]
8001dc94:	14 98       	mov	r8,r10
8001dc96:	16 99       	mov	r9,r11

	// torque around y axis (pitch)
	sim->torques_bf[PITCH] = ((rotor_lifts[M_FRONT_LEFT]  + rotor_lifts[M_FRONT_RIGHT] )
							- (rotor_lifts[M_REAR_LEFT]   + rotor_lifts[M_REAR_RIGHT] ))*  mpos_x;

	sim->torques_bf[YAW]   = (M_FL_DIR*(10.0*rotor_drags[M_FRONT_LEFT]+rotor_inertia[M_FRONT_LEFT])  + M_FR_DIR*(10.0*rotor_drags[M_FRONT_RIGHT]+rotor_inertia[M_FRONT_RIGHT])
8001dc98:	04 9a       	mov	r10,r2
8001dc9a:	06 9b       	mov	r11,r3
8001dc9c:	f0 16 00 11 	mcall	r6[68]
8001dca0:	14 98       	mov	r8,r10
8001dca2:	16 99       	mov	r9,r11
8001dca4:	10 92       	mov	r2,r8
8001dca6:	12 93       	mov	r3,r9
8001dca8:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcac:	f0 f8 01 68 	ld.w	r8,r8[360]
8001dcb0:	10 9c       	mov	r12,r8
8001dcb2:	f0 16 00 02 	mcall	r6[8]
8001dcb6:	14 98       	mov	r8,r10
8001dcb8:	16 99       	mov	r9,r11
8001dcba:	04 9a       	mov	r10,r2
8001dcbc:	06 9b       	mov	r11,r3
8001dcbe:	f0 16 00 03 	mcall	r6[12]
8001dcc2:	14 98       	mov	r8,r10
8001dcc4:	16 99       	mov	r9,r11
8001dcc6:	10 9a       	mov	r10,r8
8001dcc8:	12 9b       	mov	r11,r9
8001dcca:	f0 16 00 08 	mcall	r6[32]
8001dcce:	18 99       	mov	r9,r12
8001dcd0:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcd4:	91 29       	st.w	r8[0x8],r9
							+ M_RL_DIR*(10.0*rotor_drags[M_REAR_LEFT] +rotor_inertia[M_REAR_LEFT])   + M_RR_DIR*(10.0*rotor_drags[M_REAR_RIGHT] +rotor_inertia[M_REAR_RIGHT] ))*  sim->rotor_diameter;
	

	
	sim->lin_forces_bf[X] = -sim->vel_bf[X]*lateral_airspeed* sim->vehicle_drag;  
8001dcd6:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcda:	70 98       	ld.w	r8,r8[0x24]
8001dcdc:	10 99       	mov	r9,r8
8001dcde:	ee 19 80 00 	eorh	r9,0x8000
8001dce2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001dce6:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dcea:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcee:	f0 f8 01 78 	ld.w	r8,r8[376]
8001dcf2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dcf6:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dcfa:	91 69       	st.w	r8[0x18],r9
	sim->lin_forces_bf[Y] = -sim->vel_bf[Y]*lateral_airspeed* sim->vehicle_drag;
8001dcfc:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd00:	70 a8       	ld.w	r8,r8[0x28]
8001dd02:	10 99       	mov	r9,r8
8001dd04:	ee 19 80 00 	eorh	r9,0x8000
8001dd08:	ee f8 ff f0 	ld.w	r8,r7[-16]
8001dd0c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd10:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd14:	f0 f8 01 78 	ld.w	r8,r8[376]
8001dd18:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001dd1c:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd20:	91 79       	st.w	r8[0x1c],r9
	sim->lin_forces_bf[Z] = -(rotor_lifts[M_FRONT_LEFT]+ rotor_lifts[M_FRONT_RIGHT] +rotor_lifts[M_REAR_LEFT] +rotor_lifts[M_REAR_RIGHT]);
8001dd22:	ee f9 ff cc 	ld.w	r9,r7[-52]
8001dd26:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001dd2a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001dd2e:	ee f8 ff d0 	ld.w	r8,r7[-48]
8001dd32:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001dd36:	ee f8 ff c4 	ld.w	r8,r7[-60]
8001dd3a:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001dd3e:	10 99       	mov	r9,r8
8001dd40:	ee 19 80 00 	eorh	r9,0x8000
8001dd44:	ee f8 ff 90 	ld.w	r8,r7[-112]
8001dd48:	91 89       	st.w	r8[0x20],r9

}
8001dd4a:	2e 3d       	sub	sp,-116
8001dd4c:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
8001dd50:	80 01       	ld.sh	r1,r0[0x0]
8001dd52:	d7 84       	*unknown*

8001dd54 <forces_from_servos_cross_quad>:


void forces_from_servos_cross_quad(simulation_model_t *sim, servo_output *servos){
8001dd54:	eb cd 40 80 	pushm	r7,lr
8001dd58:	1a 97       	mov	r7,sp
8001dd5a:	20 7d       	sub	sp,28
8001dd5c:	ef 4c ff e8 	st.w	r7[-24],r12
8001dd60:	ef 4b ff e4 	st.w	r7[-28],r11

	for (i=0; i<4; i++) {
		centralData->servos[i].value=SERVO_SCALE*motor_command[i];
	}
	*/
}
8001dd64:	2f 9d       	sub	sp,-28
8001dd66:	e3 cd 80 80 	ldm	sp++,r7,pc

8001dd6a <simu_update>:

void simu_update(simulation_model_t *sim, servo_output *servo_commands, Imu_Data_t *imu, position_estimator_t *pos_est) {
8001dd6a:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
8001dd6e:	1a 97       	mov	r7,sp
8001dd70:	21 fd       	sub	sp,124
8001dd72:	fe f6 0b 7a 	ld.w	r6,pc[2938]
8001dd76:	1e 26       	rsub	r6,pc
8001dd78:	ef 4c ff a0 	st.w	r7[-96],r12
8001dd7c:	ef 4b ff 9c 	st.w	r7[-100],r11
8001dd80:	ef 4a ff 98 	st.w	r7[-104],r10
8001dd84:	ef 49 ff 94 	st.w	r7[-108],r9
	int i;
	UQuat_t qtmp1, qvel_bf,  qed;
	const UQuat_t front = {.s=0.0, .v={1.0, 0.0, 0.0}};
8001dd88:	30 08       	mov	r8,0
8001dd8a:	ef 48 ff b4 	st.w	r7[-76],r8
8001dd8e:	fc 18 3f 80 	movh	r8,0x3f80
8001dd92:	ef 48 ff b8 	st.w	r7[-72],r8
8001dd96:	30 08       	mov	r8,0
8001dd98:	ef 48 ff bc 	st.w	r7[-68],r8
8001dd9c:	30 08       	mov	r8,0
8001dd9e:	ef 48 ff c0 	st.w	r7[-64],r8
	const UQuat_t up = {.s=0.0, .v={UPVECTOR_X, UPVECTOR_Y, UPVECTOR_Z}};
8001dda2:	30 08       	mov	r8,0
8001dda4:	ef 48 ff a4 	st.w	r7[-92],r8
8001dda8:	30 08       	mov	r8,0
8001ddaa:	ef 48 ff a8 	st.w	r7[-88],r8
8001ddae:	30 08       	mov	r8,0
8001ddb0:	ef 48 ff ac 	st.w	r7[-84],r8
8001ddb4:	fc 18 bf 80 	movh	r8,0xbf80
8001ddb8:	ef 48 ff b0 	st.w	r7[-80],r8
	
	central_data_t *central_data;
	uint32_t now=get_micros();
8001ddbc:	f0 16 00 29 	mcall	r6[164]
8001ddc0:	18 98       	mov	r8,r12
8001ddc2:	ef 48 ff fc 	st.w	r7[-4],r8
	sim->dt=(now - sim->last_update)/1000000.0;
8001ddc6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ddca:	f0 f8 01 8c 	ld.w	r8,r8[396]
8001ddce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ddd2:	f2 08 01 08 	sub	r8,r9,r8
8001ddd6:	10 9c       	mov	r12,r8
8001ddd8:	f0 16 00 52 	mcall	r6[328]
8001dddc:	30 08       	mov	r8,0
8001ddde:	e0 69 84 80 	mov	r9,33920
8001dde2:	ea 19 41 2e 	orh	r9,0x412e
8001dde6:	f0 16 00 0c 	mcall	r6[48]
8001ddea:	14 98       	mov	r8,r10
8001ddec:	16 99       	mov	r9,r11
8001ddee:	10 9a       	mov	r10,r8
8001ddf0:	12 9b       	mov	r11,r9
8001ddf2:	f0 16 00 08 	mcall	r6[32]
8001ddf6:	18 99       	mov	r9,r12
8001ddf8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ddfc:	f1 49 01 90 	st.w	r8[400],r9
	sim->last_update=now;
8001de00:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de04:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001de08:	f1 49 01 8c 	st.w	r8[396],r9
	central_data=get_central_data();
8001de0c:	f0 16 00 33 	mcall	r6[204]
8001de10:	18 98       	mov	r8,r12
8001de12:	ef 48 ff f8 	st.w	r7[-8],r8
	// compute torques and forces based on servo commands
	#ifdef CONF_DIAG
	forces_from_servos_diag_quad(sim, servo_commands);
8001de16:	ee fb ff 9c 	ld.w	r11,r7[-100]
8001de1a:	ee fc ff a0 	ld.w	r12,r7[-96]
8001de1e:	f0 16 01 ea 	mcall	r6[1960]
	forces_from_servos_cross_quad(sim, servo_commands);
	#endif
	
	// integrate torques to get simulated gyro rates (with some damping)
	//for (i=0; i<3; i++) {
	sim->rates_bf[0] = clip((1.0-0.1*sim->dt)*sim->rates_bf[0] + sim->dt * sim->torques_bf[0] /sim->roll_pitch_momentum, 10.0);
8001de22:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de26:	f0 f8 01 90 	ld.w	r8,r8[400]
8001de2a:	10 9c       	mov	r12,r8
8001de2c:	f0 16 00 02 	mcall	r6[8]
8001de30:	e0 68 99 9a 	mov	r8,39322
8001de34:	ea 18 99 99 	orh	r8,0x9999
8001de38:	e0 69 99 99 	mov	r9,39321
8001de3c:	ea 19 bf b9 	orh	r9,0xbfb9
8001de40:	f0 16 00 03 	mcall	r6[12]
8001de44:	14 98       	mov	r8,r10
8001de46:	16 99       	mov	r9,r11
8001de48:	10 9a       	mov	r10,r8
8001de4a:	12 9b       	mov	r11,r9
8001de4c:	30 08       	mov	r8,0
8001de4e:	fc 19 3f f0 	movh	r9,0x3ff0
8001de52:	f0 16 00 05 	mcall	r6[20]
8001de56:	14 98       	mov	r8,r10
8001de58:	16 99       	mov	r9,r11
8001de5a:	10 92       	mov	r2,r8
8001de5c:	12 93       	mov	r3,r9
8001de5e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de62:	70 38       	ld.w	r8,r8[0xc]
8001de64:	10 9c       	mov	r12,r8
8001de66:	f0 16 00 02 	mcall	r6[8]
8001de6a:	14 98       	mov	r8,r10
8001de6c:	16 99       	mov	r9,r11
8001de6e:	04 9a       	mov	r10,r2
8001de70:	06 9b       	mov	r11,r3
8001de72:	f0 16 00 03 	mcall	r6[12]
8001de76:	14 98       	mov	r8,r10
8001de78:	16 99       	mov	r9,r11
8001de7a:	10 92       	mov	r2,r8
8001de7c:	12 93       	mov	r3,r9
8001de7e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de82:	f0 f9 01 90 	ld.w	r9,r8[400]
8001de86:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001de8a:	70 08       	ld.w	r8,r8[0x0]
8001de8c:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001de90:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001de94:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001de98:	12 9b       	mov	r11,r9
8001de9a:	10 9c       	mov	r12,r8
8001de9c:	f0 16 00 0a 	mcall	r6[40]
8001dea0:	18 98       	mov	r8,r12
8001dea2:	10 9c       	mov	r12,r8
8001dea4:	f0 16 00 02 	mcall	r6[8]
8001dea8:	14 98       	mov	r8,r10
8001deaa:	16 99       	mov	r9,r11
8001deac:	04 9a       	mov	r10,r2
8001deae:	06 9b       	mov	r11,r3
8001deb0:	f0 16 00 05 	mcall	r6[20]
8001deb4:	14 98       	mov	r8,r10
8001deb6:	16 99       	mov	r9,r11
8001deb8:	10 9a       	mov	r10,r8
8001deba:	12 9b       	mov	r11,r9
8001debc:	f0 16 00 08 	mcall	r6[32]
8001dec0:	18 98       	mov	r8,r12
8001dec2:	fc 1b 41 20 	movh	r11,0x4120
8001dec6:	10 9c       	mov	r12,r8
8001dec8:	fe b0 fb 6e 	rcall	8001d5a4 <clip>
8001decc:	18 99       	mov	r9,r12
8001dece:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ded2:	91 39       	st.w	r8[0xc],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
8001ded4:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001ded8:	f0 f8 01 90 	ld.w	r8,r8[400]
8001dedc:	10 9c       	mov	r12,r8
8001dede:	f0 16 00 02 	mcall	r6[8]
8001dee2:	e0 68 99 9a 	mov	r8,39322
8001dee6:	ea 18 99 99 	orh	r8,0x9999
8001deea:	e0 69 99 99 	mov	r9,39321
8001deee:	ea 19 bf b9 	orh	r9,0xbfb9
8001def2:	f0 16 00 03 	mcall	r6[12]
8001def6:	14 98       	mov	r8,r10
8001def8:	16 99       	mov	r9,r11
8001defa:	10 9a       	mov	r10,r8
8001defc:	12 9b       	mov	r11,r9
8001defe:	30 08       	mov	r8,0
8001df00:	fc 19 3f f0 	movh	r9,0x3ff0
8001df04:	f0 16 00 05 	mcall	r6[20]
8001df08:	14 98       	mov	r8,r10
8001df0a:	16 99       	mov	r9,r11
8001df0c:	10 92       	mov	r2,r8
8001df0e:	12 93       	mov	r3,r9
8001df10:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df14:	70 48       	ld.w	r8,r8[0x10]
8001df16:	10 9c       	mov	r12,r8
8001df18:	f0 16 00 02 	mcall	r6[8]
8001df1c:	14 98       	mov	r8,r10
8001df1e:	16 99       	mov	r9,r11
8001df20:	04 9a       	mov	r10,r2
8001df22:	06 9b       	mov	r11,r3
8001df24:	f0 16 00 03 	mcall	r6[12]
8001df28:	14 98       	mov	r8,r10
8001df2a:	16 99       	mov	r9,r11
8001df2c:	10 92       	mov	r2,r8
8001df2e:	12 93       	mov	r3,r9
8001df30:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df34:	f0 f9 01 90 	ld.w	r9,r8[400]
8001df38:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df3c:	70 18       	ld.w	r8,r8[0x4]
8001df3e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001df42:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001df46:	f2 f9 01 7c 	ld.w	r9,r9[380]
8001df4a:	12 9b       	mov	r11,r9
8001df4c:	10 9c       	mov	r12,r8
8001df4e:	f0 16 00 0a 	mcall	r6[40]
8001df52:	18 98       	mov	r8,r12
8001df54:	10 9c       	mov	r12,r8
8001df56:	f0 16 00 02 	mcall	r6[8]
8001df5a:	14 98       	mov	r8,r10
8001df5c:	16 99       	mov	r9,r11
8001df5e:	04 9a       	mov	r10,r2
8001df60:	06 9b       	mov	r11,r3
8001df62:	f0 16 00 05 	mcall	r6[20]
8001df66:	14 98       	mov	r8,r10
8001df68:	16 99       	mov	r9,r11
8001df6a:	10 9a       	mov	r10,r8
8001df6c:	12 9b       	mov	r11,r9
8001df6e:	f0 16 00 08 	mcall	r6[32]
8001df72:	18 98       	mov	r8,r12
8001df74:	fc 1b 41 20 	movh	r11,0x4120
8001df78:	10 9c       	mov	r12,r8
8001df7a:	fe b0 fb 15 	rcall	8001d5a4 <clip>
8001df7e:	18 99       	mov	r9,r12
8001df80:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df84:	91 49       	st.w	r8[0x10],r9
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
8001df86:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001df8a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001df8e:	10 9c       	mov	r12,r8
8001df90:	f0 16 00 02 	mcall	r6[8]
8001df94:	e0 68 99 9a 	mov	r8,39322
8001df98:	ea 18 99 99 	orh	r8,0x9999
8001df9c:	e0 69 99 99 	mov	r9,39321
8001dfa0:	ea 19 bf b9 	orh	r9,0xbfb9
8001dfa4:	f0 16 00 03 	mcall	r6[12]
8001dfa8:	14 98       	mov	r8,r10
8001dfaa:	16 99       	mov	r9,r11
8001dfac:	10 9a       	mov	r10,r8
8001dfae:	12 9b       	mov	r11,r9
8001dfb0:	30 08       	mov	r8,0
8001dfb2:	fc 19 3f f0 	movh	r9,0x3ff0
8001dfb6:	f0 16 00 05 	mcall	r6[20]
8001dfba:	14 98       	mov	r8,r10
8001dfbc:	16 99       	mov	r9,r11
8001dfbe:	10 92       	mov	r2,r8
8001dfc0:	12 93       	mov	r3,r9
8001dfc2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfc6:	70 58       	ld.w	r8,r8[0x14]
8001dfc8:	10 9c       	mov	r12,r8
8001dfca:	f0 16 00 02 	mcall	r6[8]
8001dfce:	14 98       	mov	r8,r10
8001dfd0:	16 99       	mov	r9,r11
8001dfd2:	04 9a       	mov	r10,r2
8001dfd4:	06 9b       	mov	r11,r3
8001dfd6:	f0 16 00 03 	mcall	r6[12]
8001dfda:	14 98       	mov	r8,r10
8001dfdc:	16 99       	mov	r9,r11
8001dfde:	10 92       	mov	r2,r8
8001dfe0:	12 93       	mov	r3,r9
8001dfe2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfe6:	f0 f9 01 90 	ld.w	r9,r8[400]
8001dfea:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001dfee:	70 28       	ld.w	r8,r8[0x8]
8001dff0:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001dff4:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001dff8:	f2 f9 01 80 	ld.w	r9,r9[384]
8001dffc:	12 9b       	mov	r11,r9
8001dffe:	10 9c       	mov	r12,r8
8001e000:	f0 16 00 0a 	mcall	r6[40]
8001e004:	18 98       	mov	r8,r12
8001e006:	10 9c       	mov	r12,r8
8001e008:	f0 16 00 02 	mcall	r6[8]
8001e00c:	14 98       	mov	r8,r10
8001e00e:	16 99       	mov	r9,r11
8001e010:	04 9a       	mov	r10,r2
8001e012:	06 9b       	mov	r11,r3
8001e014:	f0 16 00 05 	mcall	r6[20]
8001e018:	14 98       	mov	r8,r10
8001e01a:	16 99       	mov	r9,r11
8001e01c:	10 9a       	mov	r10,r8
8001e01e:	12 9b       	mov	r11,r9
8001e020:	f0 16 00 08 	mcall	r6[32]
8001e024:	18 98       	mov	r8,r12
8001e026:	fc 1b 41 20 	movh	r11,0x4120
8001e02a:	10 9c       	mov	r12,r8
8001e02c:	fe b0 fa bc 	rcall	8001d5a4 <clip>
8001e030:	18 99       	mov	r9,r12
8001e032:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e036:	91 59       	st.w	r8[0x14],r9
	//}
	
	
	for (i=0; i<3; i++){
8001e038:	30 08       	mov	r8,0
8001e03a:	ef 48 ff f4 	st.w	r7[-12],r8
8001e03e:	c1 58       	rjmp	8001e068 <simu_update+0x2fe>
			qtmp1.v[i] = sim->rates_bf[i];
8001e040:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e044:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e048:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e04c:	2f da       	sub	r10,-3
8001e04e:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e052:	2f f8       	sub	r8,-1
8001e054:	a3 68       	lsl	r8,0x2
8001e056:	ee 08 00 08 	add	r8,r7,r8
8001e05a:	f1 49 ff e4 	st.w	r8[-28],r9
	sim->rates_bf[1] = clip((1.0-0.1*sim->dt)*sim->rates_bf[1] + sim->dt * sim->torques_bf[1] /sim->roll_pitch_momentum, 10.0);
	sim->rates_bf[2] = clip((1.0-0.1*sim->dt)*sim->rates_bf[2] + sim->dt * sim->torques_bf[2] /sim->yaw_momentum, 10.0);
	//}
	
	
	for (i=0; i<3; i++){
8001e05e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e062:	2f f8       	sub	r8,-1
8001e064:	ef 48 ff f4 	st.w	r7[-12],r8
8001e068:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e06c:	58 28       	cp.w	r8,2
8001e06e:	fe 9a ff e9 	brle	8001e040 <simu_update+0x2d6>
			qtmp1.v[i] = sim->rates_bf[i];
	}
	qtmp1.s=0;
8001e072:	30 08       	mov	r8,0
8001e074:	ef 48 ff e4 	st.w	r7[-28],r8

	// apply step rotation 
	qed = quat_multi(sim->attitude.qe,qtmp1);
8001e078:	ee ca 00 3c 	sub	r10,r7,60
8001e07c:	20 4d       	sub	sp,16
8001e07e:	1a 98       	mov	r8,sp
8001e080:	ee c9 00 1c 	sub	r9,r7,28
8001e084:	20 08       	sub	r8,0
8001e086:	20 09       	sub	r9,0
8001e088:	72 0b       	ld.w	r11,r9[0x0]
8001e08a:	91 0b       	st.w	r8[0x0],r11
8001e08c:	72 1b       	ld.w	r11,r9[0x4]
8001e08e:	91 1b       	st.w	r8[0x4],r11
8001e090:	72 2b       	ld.w	r11,r9[0x8]
8001e092:	91 2b       	st.w	r8[0x8],r11
8001e094:	72 39       	ld.w	r9,r9[0xc]
8001e096:	91 39       	st.w	r8[0xc],r9
8001e098:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e09c:	20 4d       	sub	sp,16
8001e09e:	1a 98       	mov	r8,sp
8001e0a0:	2b 89       	sub	r9,-72
8001e0a2:	20 08       	sub	r8,0
8001e0a4:	20 09       	sub	r9,0
8001e0a6:	72 0b       	ld.w	r11,r9[0x0]
8001e0a8:	91 0b       	st.w	r8[0x0],r11
8001e0aa:	72 1b       	ld.w	r11,r9[0x4]
8001e0ac:	91 1b       	st.w	r8[0x4],r11
8001e0ae:	72 2b       	ld.w	r11,r9[0x8]
8001e0b0:	91 2b       	st.w	r8[0x8],r11
8001e0b2:	72 39       	ld.w	r9,r9[0xc]
8001e0b4:	91 39       	st.w	r8[0xc],r9
8001e0b6:	14 9c       	mov	r12,r10
8001e0b8:	fe b0 f7 d4 	rcall	8001d060 <quat_multi>
8001e0bc:	2f 8d       	sub	sp,-32

	sim->attitude.qe.s=sim->attitude.qe.s+qed.s*sim->dt;
8001e0be:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0c2:	71 29       	ld.w	r9,r8[0x48]
8001e0c4:	ee fa ff c4 	ld.w	r10,r7[-60]
8001e0c8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0cc:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e0d0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e0d4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e0d8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0dc:	f1 49 00 48 	st.w	r8[72],r9
	sim->attitude.qe.v[0]+=qed.v[0]*sim->dt;
8001e0e0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0e4:	71 39       	ld.w	r9,r8[0x4c]
8001e0e6:	ee fa ff c8 	ld.w	r10,r7[-56]
8001e0ea:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0ee:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e0f2:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e0f6:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e0fa:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e0fe:	f1 49 00 4c 	st.w	r8[76],r9
	sim->attitude.qe.v[1]+=qed.v[1]*sim->dt;
8001e102:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e106:	71 49       	ld.w	r9,r8[0x50]
8001e108:	ee fa ff cc 	ld.w	r10,r7[-52]
8001e10c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e110:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e114:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e118:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e11c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e120:	f1 49 00 50 	st.w	r8[80],r9
	sim->attitude.qe.v[2]+=qed.v[2]*sim->dt;
8001e124:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e128:	71 59       	ld.w	r9,r8[0x54]
8001e12a:	ee fa ff d0 	ld.w	r10,r7[-48]
8001e12e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e132:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e136:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001e13a:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e13e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e142:	f1 49 00 54 	st.w	r8[84],r9

	sim->attitude.qe = quat_normalise(sim->attitude.qe);
8001e146:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e14a:	ee ca 00 7c 	sub	r10,r7,124
8001e14e:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e152:	20 4d       	sub	sp,16
8001e154:	1a 98       	mov	r8,sp
8001e156:	2b 89       	sub	r9,-72
8001e158:	20 08       	sub	r8,0
8001e15a:	20 09       	sub	r9,0
8001e15c:	72 0b       	ld.w	r11,r9[0x0]
8001e15e:	91 0b       	st.w	r8[0x0],r11
8001e160:	72 1b       	ld.w	r11,r9[0x4]
8001e162:	91 1b       	st.w	r8[0x4],r11
8001e164:	72 2b       	ld.w	r11,r9[0x8]
8001e166:	91 2b       	st.w	r8[0x8],r11
8001e168:	72 39       	ld.w	r9,r9[0xc]
8001e16a:	91 39       	st.w	r8[0xc],r9
8001e16c:	14 9c       	mov	r12,r10
8001e16e:	fe b0 f9 97 	rcall	8001d49c <quat_normalise>
8001e172:	2f cd       	sub	sp,-16
8001e174:	ea c8 ff b8 	sub	r8,r5,-72
8001e178:	ee c9 00 7c 	sub	r9,r7,124
8001e17c:	20 08       	sub	r8,0
8001e17e:	20 09       	sub	r9,0
8001e180:	72 0a       	ld.w	r10,r9[0x0]
8001e182:	91 0a       	st.w	r8[0x0],r10
8001e184:	72 1a       	ld.w	r10,r9[0x4]
8001e186:	91 1a       	st.w	r8[0x4],r10
8001e188:	72 2a       	ld.w	r10,r9[0x8]
8001e18a:	91 2a       	st.w	r8[0x8],r10
8001e18c:	72 39       	ld.w	r9,r9[0xc]
8001e18e:	91 39       	st.w	r8[0xc],r9
	sim->attitude.up_vec = quat_global_to_local(sim->attitude.qe, up);
8001e190:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e194:	ee ca 00 7c 	sub	r10,r7,124
8001e198:	20 4d       	sub	sp,16
8001e19a:	1a 98       	mov	r8,sp
8001e19c:	ee c9 00 5c 	sub	r9,r7,92
8001e1a0:	20 08       	sub	r8,0
8001e1a2:	20 09       	sub	r9,0
8001e1a4:	72 0b       	ld.w	r11,r9[0x0]
8001e1a6:	91 0b       	st.w	r8[0x0],r11
8001e1a8:	72 1b       	ld.w	r11,r9[0x4]
8001e1aa:	91 1b       	st.w	r8[0x4],r11
8001e1ac:	72 2b       	ld.w	r11,r9[0x8]
8001e1ae:	91 2b       	st.w	r8[0x8],r11
8001e1b0:	72 39       	ld.w	r9,r9[0xc]
8001e1b2:	91 39       	st.w	r8[0xc],r9
8001e1b4:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e1b8:	20 4d       	sub	sp,16
8001e1ba:	1a 98       	mov	r8,sp
8001e1bc:	2b 89       	sub	r9,-72
8001e1be:	20 08       	sub	r8,0
8001e1c0:	20 09       	sub	r9,0
8001e1c2:	72 0b       	ld.w	r11,r9[0x0]
8001e1c4:	91 0b       	st.w	r8[0x0],r11
8001e1c6:	72 1b       	ld.w	r11,r9[0x4]
8001e1c8:	91 1b       	st.w	r8[0x4],r11
8001e1ca:	72 2b       	ld.w	r11,r9[0x8]
8001e1cc:	91 2b       	st.w	r8[0x8],r11
8001e1ce:	72 39       	ld.w	r9,r9[0xc]
8001e1d0:	91 39       	st.w	r8[0xc],r9
8001e1d2:	14 9c       	mov	r12,r10
8001e1d4:	fe b0 f7 fe 	rcall	8001d1d0 <quat_global_to_local>
8001e1d8:	2f 8d       	sub	sp,-32
8001e1da:	ea c8 ff a8 	sub	r8,r5,-88
8001e1de:	ee c9 00 7c 	sub	r9,r7,124
8001e1e2:	20 08       	sub	r8,0
8001e1e4:	20 09       	sub	r9,0
8001e1e6:	72 0a       	ld.w	r10,r9[0x0]
8001e1e8:	91 0a       	st.w	r8[0x0],r10
8001e1ea:	72 1a       	ld.w	r10,r9[0x4]
8001e1ec:	91 1a       	st.w	r8[0x4],r10
8001e1ee:	72 2a       	ld.w	r10,r9[0x8]
8001e1f0:	91 2a       	st.w	r8[0x8],r10
8001e1f2:	72 39       	ld.w	r9,r9[0xc]
8001e1f4:	91 39       	st.w	r8[0xc],r9
	
	sim->attitude.north_vec=quat_global_to_local(sim->attitude.qe, front);	
8001e1f6:	ee f5 ff a0 	ld.w	r5,r7[-96]
8001e1fa:	ee ca 00 7c 	sub	r10,r7,124
8001e1fe:	20 4d       	sub	sp,16
8001e200:	1a 98       	mov	r8,sp
8001e202:	ee c9 00 4c 	sub	r9,r7,76
8001e206:	20 08       	sub	r8,0
8001e208:	20 09       	sub	r9,0
8001e20a:	72 0b       	ld.w	r11,r9[0x0]
8001e20c:	91 0b       	st.w	r8[0x0],r11
8001e20e:	72 1b       	ld.w	r11,r9[0x4]
8001e210:	91 1b       	st.w	r8[0x4],r11
8001e212:	72 2b       	ld.w	r11,r9[0x8]
8001e214:	91 2b       	st.w	r8[0x8],r11
8001e216:	72 39       	ld.w	r9,r9[0xc]
8001e218:	91 39       	st.w	r8[0xc],r9
8001e21a:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e21e:	20 4d       	sub	sp,16
8001e220:	1a 98       	mov	r8,sp
8001e222:	2b 89       	sub	r9,-72
8001e224:	20 08       	sub	r8,0
8001e226:	20 09       	sub	r9,0
8001e228:	72 0b       	ld.w	r11,r9[0x0]
8001e22a:	91 0b       	st.w	r8[0x0],r11
8001e22c:	72 1b       	ld.w	r11,r9[0x4]
8001e22e:	91 1b       	st.w	r8[0x4],r11
8001e230:	72 2b       	ld.w	r11,r9[0x8]
8001e232:	91 2b       	st.w	r8[0x8],r11
8001e234:	72 39       	ld.w	r9,r9[0xc]
8001e236:	91 39       	st.w	r8[0xc],r9
8001e238:	14 9c       	mov	r12,r10
8001e23a:	fe b0 f7 cb 	rcall	8001d1d0 <quat_global_to_local>
8001e23e:	2f 8d       	sub	sp,-32
8001e240:	ea c8 ff 98 	sub	r8,r5,-104
8001e244:	ee c9 00 7c 	sub	r9,r7,124
8001e248:	20 08       	sub	r8,0
8001e24a:	20 09       	sub	r9,0
8001e24c:	72 0a       	ld.w	r10,r9[0x0]
8001e24e:	91 0a       	st.w	r8[0x0],r10
8001e250:	72 1a       	ld.w	r10,r9[0x4]
8001e252:	91 1a       	st.w	r8[0x4],r10
8001e254:	72 2a       	ld.w	r10,r9[0x8]
8001e256:	91 2a       	st.w	r8[0x8],r10
8001e258:	72 39       	ld.w	r9,r9[0xc]
8001e25a:	91 39       	st.w	r8[0xc],r9

	// velocity and position integration
	
	// check altitude - if it is lower than 0, clamp everything (this is in NED, assuming negative altitude)
	if (sim->localPosition.pos[Z] >0) {
8001e25c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e260:	f0 fa 01 1c 	ld.w	r10,r8[284]
8001e264:	30 18       	mov	r8,1
8001e266:	30 09       	mov	r9,0
8001e268:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
8001e26c:	e0 8c 00 04 	brvs	8001e274 <simu_update+0x50a>
8001e270:	e0 89 00 03 	brgt	8001e276 <simu_update+0x50c>
8001e274:	30 08       	mov	r8,0
8001e276:	5c 58       	castu.b	r8
8001e278:	e0 80 00 85 	breq	8001e382 <simu_update+0x618>
		sim->vel[Z]=0.0;
8001e27c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e280:	30 09       	mov	r9,0
8001e282:	91 e9       	st.w	r8[0x38],r9
		sim->localPosition.pos[Z]=0.0;
8001e284:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e288:	30 09       	mov	r9,0
8001e28a:	f1 49 01 1c 	st.w	r8[284],r9

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e28e:	30 08       	mov	r8,0
8001e290:	ef 48 ff f4 	st.w	r7[-12],r8
8001e294:	c4 18       	rjmp	8001e316 <simu_update+0x5ac>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
8001e296:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e29a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e29e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2a2:	2f a9       	sub	r9,-6
8001e2a4:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e2a8:	10 9c       	mov	r12,r8
8001e2aa:	f0 16 00 02 	mcall	r6[8]
8001e2ae:	14 92       	mov	r2,r10
8001e2b0:	16 93       	mov	r3,r11
8001e2b2:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e2b6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2ba:	2e 99       	sub	r9,-23
8001e2bc:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8001e2c0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e2c4:	f0 f8 01 74 	ld.w	r8,r8[372]
8001e2c8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8001e2cc:	10 9c       	mov	r12,r8
8001e2ce:	f0 16 00 02 	mcall	r6[8]
8001e2d2:	e0 68 85 1f 	mov	r8,34079
8001e2d6:	ea 18 51 eb 	orh	r8,0x51eb
8001e2da:	e0 69 9e b8 	mov	r9,40632
8001e2de:	ea 19 40 23 	orh	r9,0x4023
8001e2e2:	f0 16 00 03 	mcall	r6[12]
8001e2e6:	14 98       	mov	r8,r10
8001e2e8:	16 99       	mov	r9,r11
8001e2ea:	04 9a       	mov	r10,r2
8001e2ec:	06 9b       	mov	r11,r3
8001e2ee:	f0 16 00 05 	mcall	r6[20]
8001e2f2:	14 98       	mov	r8,r10
8001e2f4:	16 99       	mov	r9,r11
8001e2f6:	10 9a       	mov	r10,r8
8001e2f8:	12 9b       	mov	r11,r9
8001e2fa:	f0 16 00 08 	mcall	r6[32]
8001e2fe:	18 9a       	mov	r10,r12
8001e300:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e304:	ea c9 ff fa 	sub	r9,r5,-6
8001e308:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	if (sim->localPosition.pos[Z] >0) {
		sim->vel[Z]=0.0;
		sim->localPosition.pos[Z]=0.0;

		// simulate "acceleration" caused by contact force with ground, compensating gravity
		for (i=0; i<3; i++) {
8001e30c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e310:	2f f8       	sub	r8,-1
8001e312:	ef 48 ff f4 	st.w	r7[-12],r8
8001e316:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e31a:	58 28       	cp.w	r8,2
8001e31c:	fe 9a ff bd 	brle	8001e296 <simu_update+0x52c>
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e320:	30 08       	mov	r8,0
8001e322:	ef 48 ff f4 	st.w	r7[-12],r8
8001e326:	c2 98       	rjmp	8001e378 <simu_update+0x60e>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
8001e328:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e32c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e330:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e334:	2f 79       	sub	r9,-9
8001e336:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e33a:	10 9c       	mov	r12,r8
8001e33c:	f0 16 00 02 	mcall	r6[8]
8001e340:	e0 68 66 66 	mov	r8,26214
8001e344:	ea 18 66 66 	orh	r8,0x6666
8001e348:	e0 69 66 66 	mov	r9,26214
8001e34c:	ea 19 3f ee 	orh	r9,0x3fee
8001e350:	f0 16 00 03 	mcall	r6[12]
8001e354:	14 98       	mov	r8,r10
8001e356:	16 99       	mov	r9,r11
8001e358:	10 9a       	mov	r10,r8
8001e35a:	12 9b       	mov	r11,r9
8001e35c:	f0 16 00 08 	mcall	r6[32]
8001e360:	18 9a       	mov	r10,r12
8001e362:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e366:	ea c9 ff f7 	sub	r9,r5,-9
8001e36a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		for (i=0; i<3; i++) {
			sim->lin_forces_bf[i]+=sim->attitude.up_vec.v[i]*sim->total_mass *GRAVITY;
		}
				
		// slow down... (will make velocity slightly inconsistent until next update cycle, but shouldn't matter much)
		for (i=0; i<3; i++) {
8001e36e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e372:	2f f8       	sub	r8,-1
8001e374:	ef 48 ff f4 	st.w	r7[-12],r8
8001e378:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e37c:	58 28       	cp.w	r8,2
8001e37e:	fe 9a ff d5 	brle	8001e328 <simu_update+0x5be>
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e382:	30 08       	mov	r8,0
8001e384:	ef 48 ff f4 	st.w	r7[-12],r8
8001e388:	c1 58       	rjmp	8001e3b2 <simu_update+0x648>
			qtmp1.v[i] = sim->vel[i];
8001e38a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e38e:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e392:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e396:	2f 4a       	sub	r10,-12
8001e398:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
8001e39c:	2f f8       	sub	r8,-1
8001e39e:	a3 68       	lsl	r8,0x2
8001e3a0:	ee 08 00 08 	add	r8,r7,r8
8001e3a4:	f1 49 ff e4 	st.w	r8[-28],r9
		for (i=0; i<3; i++) {
			sim->vel_bf[i]=0.95*sim->vel_bf[i];
		}
	}
	
	for (i=0; i<3; i++){
8001e3a8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e3ac:	2f f8       	sub	r8,-1
8001e3ae:	ef 48 ff f4 	st.w	r7[-12],r8
8001e3b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e3b6:	58 28       	cp.w	r8,2
8001e3b8:	fe 9a ff e9 	brle	8001e38a <simu_update+0x620>
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
8001e3bc:	30 08       	mov	r8,0
8001e3be:	ef 48 ff e4 	st.w	r7[-28],r8
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
8001e3c2:	ee ca 00 7c 	sub	r10,r7,124
8001e3c6:	20 4d       	sub	sp,16
8001e3c8:	1a 98       	mov	r8,sp
8001e3ca:	ee c9 00 1c 	sub	r9,r7,28
8001e3ce:	20 08       	sub	r8,0
8001e3d0:	20 09       	sub	r9,0
8001e3d2:	72 0b       	ld.w	r11,r9[0x0]
8001e3d4:	91 0b       	st.w	r8[0x0],r11
8001e3d6:	72 1b       	ld.w	r11,r9[0x4]
8001e3d8:	91 1b       	st.w	r8[0x4],r11
8001e3da:	72 2b       	ld.w	r11,r9[0x8]
8001e3dc:	91 2b       	st.w	r8[0x8],r11
8001e3de:	72 39       	ld.w	r9,r9[0xc]
8001e3e0:	91 39       	st.w	r8[0xc],r9
8001e3e2:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e3e6:	20 4d       	sub	sp,16
8001e3e8:	1a 98       	mov	r8,sp
8001e3ea:	2b 89       	sub	r9,-72
8001e3ec:	20 08       	sub	r8,0
8001e3ee:	20 09       	sub	r9,0
8001e3f0:	72 0b       	ld.w	r11,r9[0x0]
8001e3f2:	91 0b       	st.w	r8[0x0],r11
8001e3f4:	72 1b       	ld.w	r11,r9[0x4]
8001e3f6:	91 1b       	st.w	r8[0x4],r11
8001e3f8:	72 2b       	ld.w	r11,r9[0x8]
8001e3fa:	91 2b       	st.w	r8[0x8],r11
8001e3fc:	72 39       	ld.w	r9,r9[0xc]
8001e3fe:	91 39       	st.w	r8[0xc],r9
8001e400:	14 9c       	mov	r12,r10
8001e402:	fe b0 f6 e7 	rcall	8001d1d0 <quat_global_to_local>
8001e406:	2f 8d       	sub	sp,-32
8001e408:	ee c8 00 2c 	sub	r8,r7,44
8001e40c:	ee c9 00 7c 	sub	r9,r7,124
8001e410:	20 08       	sub	r8,0
8001e412:	20 09       	sub	r9,0
8001e414:	72 0a       	ld.w	r10,r9[0x0]
8001e416:	91 0a       	st.w	r8[0x0],r10
8001e418:	72 1a       	ld.w	r10,r9[0x4]
8001e41a:	91 1a       	st.w	r8[0x4],r10
8001e41c:	72 2a       	ld.w	r10,r9[0x8]
8001e41e:	91 2a       	st.w	r8[0x8],r10
8001e420:	72 39       	ld.w	r9,r9[0xc]
8001e422:	91 39       	st.w	r8[0xc],r9
	for (i=0; i<3; i++) {
8001e424:	30 08       	mov	r8,0
8001e426:	ef 48 ff f4 	st.w	r7[-12],r8
8001e42a:	c8 08       	rjmp	8001e52a <simu_update+0x7c0>
		sim->vel_bf[i]=qvel_bf.v[i];
8001e42c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e430:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e434:	2f f8       	sub	r8,-1
8001e436:	a3 68       	lsl	r8,0x2
8001e438:	ee 08 00 08 	add	r8,r7,r8
8001e43c:	f0 fa ff d4 	ld.w	r10,r8[-44]
8001e440:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e444:	2f 79       	sub	r9,-9
8001e446:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// following the convention in the IMU, this is the acceleration due to force, as measured
		sim->attitude.a[i]=sim->lin_forces_bf[i] / sim->total_mass;
8001e44a:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e44e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e452:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e456:	2f a9       	sub	r9,-6
8001e458:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e45c:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e460:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e464:	12 9b       	mov	r11,r9
8001e466:	10 9c       	mov	r12,r8
8001e468:	f0 16 00 0a 	mcall	r6[40]
8001e46c:	18 98       	mov	r8,r12
8001e46e:	10 9a       	mov	r10,r8
8001e470:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e474:	ea c9 ff cd 	sub	r9,r5,-51
8001e478:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		// this is the "clean" acceleration without gravity
		sim->attitude.acc_bf[i]=sim->attitude.a[i] - sim->attitude.up_vec.v[i] * GRAVITY;
8001e47c:	ee f5 ff f4 	ld.w	r5,r7[-12]
8001e480:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e484:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e488:	2c d9       	sub	r9,-51
8001e48a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e48e:	10 9c       	mov	r12,r8
8001e490:	f0 16 00 02 	mcall	r6[8]
8001e494:	14 92       	mov	r2,r10
8001e496:	16 93       	mov	r3,r11
8001e498:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e49c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4a0:	2e 99       	sub	r9,-23
8001e4a2:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8001e4a6:	10 9c       	mov	r12,r8
8001e4a8:	f0 16 00 02 	mcall	r6[8]
8001e4ac:	e0 68 85 1f 	mov	r8,34079
8001e4b0:	ea 18 51 eb 	orh	r8,0x51eb
8001e4b4:	e0 69 9e b8 	mov	r9,40632
8001e4b8:	ea 19 c0 23 	orh	r9,0xc023
8001e4bc:	f0 16 00 03 	mcall	r6[12]
8001e4c0:	14 98       	mov	r8,r10
8001e4c2:	16 99       	mov	r9,r11
8001e4c4:	04 9a       	mov	r10,r2
8001e4c6:	06 9b       	mov	r11,r3
8001e4c8:	f0 16 00 05 	mcall	r6[20]
8001e4cc:	14 98       	mov	r8,r10
8001e4ce:	16 99       	mov	r9,r11
8001e4d0:	10 9a       	mov	r10,r8
8001e4d2:	12 9b       	mov	r11,r9
8001e4d4:	f0 16 00 08 	mcall	r6[32]
8001e4d8:	18 9a       	mov	r10,r12
8001e4da:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4de:	ea c9 ff be 	sub	r9,r5,-66
8001e4e2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
8001e4e6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e4ea:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e4ee:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e4f2:	2f 7a       	sub	r10,-9
8001e4f4:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e4f8:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e4fc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e500:	2b eb       	sub	r11,-66
8001e502:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e506:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e50a:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e50e:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e512:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e516:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e51a:	2f 79       	sub	r9,-9
8001e51c:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	for (i=0; i<3; i++){
			qtmp1.v[i] = sim->vel[i];
	}
	qtmp1.s=0.0;
	qvel_bf=quat_global_to_local(sim->attitude.qe, qtmp1);
	for (i=0; i<3; i++) {
8001e520:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e524:	2f f8       	sub	r8,-1
8001e526:	ef 48 ff f4 	st.w	r7[-12],r8
8001e52a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e52e:	58 28       	cp.w	r8,2
8001e530:	fe 9a ff 7e 	brle	8001e42c <simu_update+0x6c2>
		sim->vel_bf[i]=sim->vel_bf[i] + sim->attitude.acc_bf[i] * sim->dt;
	}
	
	// calculate velocity in global frame
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
8001e534:	30 08       	mov	r8,0
8001e536:	ef 48 ff d4 	st.w	r7[-44],r8
8001e53a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e53e:	70 98       	ld.w	r8,r8[0x24]
8001e540:	ef 48 ff d8 	st.w	r7[-40],r8
8001e544:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e548:	70 a8       	ld.w	r8,r8[0x28]
8001e54a:	ef 48 ff dc 	st.w	r7[-36],r8
8001e54e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e552:	70 b8       	ld.w	r8,r8[0x2c]
8001e554:	ef 48 ff e0 	st.w	r7[-32],r8
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
8001e558:	ee ca 00 7c 	sub	r10,r7,124
8001e55c:	20 4d       	sub	sp,16
8001e55e:	1a 98       	mov	r8,sp
8001e560:	ee c9 00 2c 	sub	r9,r7,44
8001e564:	20 08       	sub	r8,0
8001e566:	20 09       	sub	r9,0
8001e568:	72 0b       	ld.w	r11,r9[0x0]
8001e56a:	91 0b       	st.w	r8[0x0],r11
8001e56c:	72 1b       	ld.w	r11,r9[0x4]
8001e56e:	91 1b       	st.w	r8[0x4],r11
8001e570:	72 2b       	ld.w	r11,r9[0x8]
8001e572:	91 2b       	st.w	r8[0x8],r11
8001e574:	72 39       	ld.w	r9,r9[0xc]
8001e576:	91 39       	st.w	r8[0xc],r9
8001e578:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e57c:	20 4d       	sub	sp,16
8001e57e:	1a 98       	mov	r8,sp
8001e580:	2b 89       	sub	r9,-72
8001e582:	20 08       	sub	r8,0
8001e584:	20 09       	sub	r9,0
8001e586:	72 0b       	ld.w	r11,r9[0x0]
8001e588:	91 0b       	st.w	r8[0x0],r11
8001e58a:	72 1b       	ld.w	r11,r9[0x4]
8001e58c:	91 1b       	st.w	r8[0x4],r11
8001e58e:	72 2b       	ld.w	r11,r9[0x8]
8001e590:	91 2b       	st.w	r8[0x8],r11
8001e592:	72 39       	ld.w	r9,r9[0xc]
8001e594:	91 39       	st.w	r8[0xc],r9
8001e596:	14 9c       	mov	r12,r10
8001e598:	fe b0 f6 9a 	rcall	8001d2cc <quat_local_to_global>
8001e59c:	2f 8d       	sub	sp,-32
8001e59e:	ee c8 00 1c 	sub	r8,r7,28
8001e5a2:	ee c9 00 7c 	sub	r9,r7,124
8001e5a6:	20 08       	sub	r8,0
8001e5a8:	20 09       	sub	r9,0
8001e5aa:	72 0a       	ld.w	r10,r9[0x0]
8001e5ac:	91 0a       	st.w	r8[0x0],r10
8001e5ae:	72 1a       	ld.w	r10,r9[0x4]
8001e5b0:	91 1a       	st.w	r8[0x4],r10
8001e5b2:	72 2a       	ld.w	r10,r9[0x8]
8001e5b4:	91 2a       	st.w	r8[0x8],r10
8001e5b6:	72 39       	ld.w	r9,r9[0xc]
8001e5b8:	91 39       	st.w	r8[0xc],r9
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
8001e5ba:	ee f9 ff e8 	ld.w	r9,r7[-24]
8001e5be:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5c2:	91 c9       	st.w	r8[0x30],r9
8001e5c4:	ee f9 ff ec 	ld.w	r9,r7[-20]
8001e5c8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5cc:	91 d9       	st.w	r8[0x34],r9
8001e5ce:	ee f9 ff f0 	ld.w	r9,r7[-16]
8001e5d2:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5d6:	91 e9       	st.w	r8[0x38],r9
	
	for (i=0; i<3; i++) {
8001e5d8:	30 08       	mov	r8,0
8001e5da:	ef 48 ff f4 	st.w	r7[-12],r8
8001e5de:	c2 38       	rjmp	8001e624 <simu_update+0x8ba>
		sim->localPosition.pos[i] =sim->localPosition.pos[i] + sim->vel[i] * sim->dt;
8001e5e0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e5e4:	ee fa ff f4 	ld.w	r10,r7[-12]
8001e5e8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5ec:	2b ba       	sub	r10,-69
8001e5ee:	f0 0a 03 2a 	ld.w	r10,r8[r10<<0x2]
8001e5f2:	ee fb ff f4 	ld.w	r11,r7[-12]
8001e5f6:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e5fa:	2f 4b       	sub	r11,-12
8001e5fc:	f0 0b 03 2b 	ld.w	r11,r8[r11<<0x2]
8001e600:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e604:	f0 f8 01 90 	ld.w	r8,r8[400]
8001e608:	e5 a2 08 b8 	cop	cp0,cr8,cr11,cr8,0x44
8001e60c:	e5 a0 0a a8 	cop	cp0,cr10,cr10,cr8,0x40
8001e610:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e614:	2b b9       	sub	r9,-69
8001e616:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	// vel = qe *vel_bf * qe-1
	qvel_bf.s= 0.0; qvel_bf.v[0]=sim->vel_bf[0]; qvel_bf.v[1]=sim->vel_bf[1]; qvel_bf.v[2]=sim->vel_bf[2];
	qtmp1 = quat_local_to_global(sim->attitude.qe, qvel_bf);
	sim->vel[0]=qtmp1.v[0]; sim->vel[1]=qtmp1.v[1]; sim->vel[2]=qtmp1.v[2];
	
	for (i=0; i<3; i++) {
8001e61a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e61e:	2f f8       	sub	r8,-1
8001e620:	ef 48 ff f4 	st.w	r7[-12],r8
8001e624:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001e628:	58 28       	cp.w	r8,2
8001e62a:	fe 9a ff db 	brle	8001e5e0 <simu_update+0x876>



	// fill in simulated IMU values
	
	imu->raw_channels[GYRO_OFFSET+IMU_X]=sim->rates_bf[0] * imu->raw_scale[GYRO_OFFSET+IMU_X]+imu->raw_bias[GYRO_OFFSET+IMU_X];
8001e62e:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e632:	70 39       	ld.w	r9,r8[0xc]
8001e634:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e638:	f0 f8 01 14 	ld.w	r8,r8[276]
8001e63c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e640:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e644:	f0 f8 00 f0 	ld.w	r8,r8[240]
8001e648:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e64c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e650:	f1 49 00 cc 	st.w	r8[204],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Y]=sim->rates_bf[1] * imu->raw_scale[GYRO_OFFSET+IMU_Y]+imu->raw_bias[GYRO_OFFSET+IMU_Y];
8001e654:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e658:	70 49       	ld.w	r9,r8[0x10]
8001e65a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e65e:	f0 f8 01 18 	ld.w	r8,r8[280]
8001e662:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e666:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e66a:	f0 f8 00 f4 	ld.w	r8,r8[244]
8001e66e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e672:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e676:	f1 49 00 d0 	st.w	r8[208],r9
	imu->raw_channels[GYRO_OFFSET+IMU_Z]=sim->rates_bf[2] * imu->raw_scale[GYRO_OFFSET+IMU_Z]+imu->raw_bias[GYRO_OFFSET+IMU_Z];
8001e67a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e67e:	70 59       	ld.w	r9,r8[0x14]
8001e680:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e684:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e688:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e68c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e690:	f0 f8 00 f8 	ld.w	r8,r8[248]
8001e694:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e698:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e69c:	f1 49 00 d4 	st.w	r8[212],r9

	imu->raw_channels[ACC_OFFSET+IMU_X]=(sim->lin_forces_bf[0] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
8001e6a0:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e6a4:	70 68       	ld.w	r8,r8[0x18]
8001e6a6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e6aa:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e6ae:	12 9b       	mov	r11,r9
8001e6b0:	10 9c       	mov	r12,r8
8001e6b2:	f0 16 00 0a 	mcall	r6[40]
8001e6b6:	18 98       	mov	r8,r12
8001e6b8:	10 9c       	mov	r12,r8
8001e6ba:	f0 16 00 02 	mcall	r6[8]
8001e6be:	e0 68 85 1f 	mov	r8,34079
8001e6c2:	ea 18 51 eb 	orh	r8,0x51eb
8001e6c6:	e0 69 9e b8 	mov	r9,40632
8001e6ca:	ea 19 40 23 	orh	r9,0x4023
8001e6ce:	f0 16 00 0c 	mcall	r6[48]
8001e6d2:	14 98       	mov	r8,r10
8001e6d4:	16 99       	mov	r9,r11
8001e6d6:	10 92       	mov	r2,r8
8001e6d8:	12 93       	mov	r3,r9
8001e6da:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e6de:	f0 f8 01 20 	ld.w	r8,r8[288]
8001e6e2:	10 9c       	mov	r12,r8
8001e6e4:	f0 16 00 02 	mcall	r6[8]
8001e6e8:	14 98       	mov	r8,r10
8001e6ea:	16 99       	mov	r9,r11
8001e6ec:	04 9a       	mov	r10,r2
8001e6ee:	06 9b       	mov	r11,r3
8001e6f0:	f0 16 00 03 	mcall	r6[12]
8001e6f4:	14 98       	mov	r8,r10
8001e6f6:	16 99       	mov	r9,r11
8001e6f8:	10 92       	mov	r2,r8
8001e6fa:	12 93       	mov	r3,r9
8001e6fc:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e700:	f0 f8 00 fc 	ld.w	r8,r8[252]
8001e704:	10 9c       	mov	r12,r8
8001e706:	f0 16 00 02 	mcall	r6[8]
8001e70a:	14 98       	mov	r8,r10
8001e70c:	16 99       	mov	r9,r11
8001e70e:	04 9a       	mov	r10,r2
8001e710:	06 9b       	mov	r11,r3
8001e712:	f0 16 00 05 	mcall	r6[20]
8001e716:	14 98       	mov	r8,r10
8001e718:	16 99       	mov	r9,r11
8001e71a:	10 9a       	mov	r10,r8
8001e71c:	12 9b       	mov	r11,r9
8001e71e:	f0 16 00 08 	mcall	r6[32]
8001e722:	18 99       	mov	r9,r12
8001e724:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e728:	f1 49 00 d8 	st.w	r8[216],r9
	imu->raw_channels[ACC_OFFSET+IMU_Y]=(sim->lin_forces_bf[1] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
8001e72c:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e730:	70 78       	ld.w	r8,r8[0x1c]
8001e732:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e736:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e73a:	12 9b       	mov	r11,r9
8001e73c:	10 9c       	mov	r12,r8
8001e73e:	f0 16 00 0a 	mcall	r6[40]
8001e742:	18 98       	mov	r8,r12
8001e744:	10 9c       	mov	r12,r8
8001e746:	f0 16 00 02 	mcall	r6[8]
8001e74a:	e0 68 85 1f 	mov	r8,34079
8001e74e:	ea 18 51 eb 	orh	r8,0x51eb
8001e752:	e0 69 9e b8 	mov	r9,40632
8001e756:	ea 19 40 23 	orh	r9,0x4023
8001e75a:	f0 16 00 0c 	mcall	r6[48]
8001e75e:	14 98       	mov	r8,r10
8001e760:	16 99       	mov	r9,r11
8001e762:	10 92       	mov	r2,r8
8001e764:	12 93       	mov	r3,r9
8001e766:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e76a:	f0 f8 01 24 	ld.w	r8,r8[292]
8001e76e:	10 9c       	mov	r12,r8
8001e770:	f0 16 00 02 	mcall	r6[8]
8001e774:	14 98       	mov	r8,r10
8001e776:	16 99       	mov	r9,r11
8001e778:	04 9a       	mov	r10,r2
8001e77a:	06 9b       	mov	r11,r3
8001e77c:	f0 16 00 03 	mcall	r6[12]
8001e780:	14 98       	mov	r8,r10
8001e782:	16 99       	mov	r9,r11
8001e784:	10 92       	mov	r2,r8
8001e786:	12 93       	mov	r3,r9
8001e788:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e78c:	f0 f8 01 00 	ld.w	r8,r8[256]
8001e790:	10 9c       	mov	r12,r8
8001e792:	f0 16 00 02 	mcall	r6[8]
8001e796:	14 98       	mov	r8,r10
8001e798:	16 99       	mov	r9,r11
8001e79a:	04 9a       	mov	r10,r2
8001e79c:	06 9b       	mov	r11,r3
8001e79e:	f0 16 00 05 	mcall	r6[20]
8001e7a2:	14 98       	mov	r8,r10
8001e7a4:	16 99       	mov	r9,r11
8001e7a6:	10 9a       	mov	r10,r8
8001e7a8:	12 9b       	mov	r11,r9
8001e7aa:	f0 16 00 08 	mcall	r6[32]
8001e7ae:	18 99       	mov	r9,r12
8001e7b0:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7b4:	f1 49 00 dc 	st.w	r8[220],r9
	imu->raw_channels[ACC_OFFSET+IMU_Z]=(sim->lin_forces_bf[2] / sim->total_mass / GRAVITY)*imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
8001e7b8:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e7bc:	70 88       	ld.w	r8,r8[0x20]
8001e7be:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e7c2:	f2 f9 01 74 	ld.w	r9,r9[372]
8001e7c6:	12 9b       	mov	r11,r9
8001e7c8:	10 9c       	mov	r12,r8
8001e7ca:	f0 16 00 0a 	mcall	r6[40]
8001e7ce:	18 98       	mov	r8,r12
8001e7d0:	10 9c       	mov	r12,r8
8001e7d2:	f0 16 00 02 	mcall	r6[8]
8001e7d6:	e0 68 85 1f 	mov	r8,34079
8001e7da:	ea 18 51 eb 	orh	r8,0x51eb
8001e7de:	e0 69 9e b8 	mov	r9,40632
8001e7e2:	ea 19 40 23 	orh	r9,0x4023
8001e7e6:	f0 16 00 0c 	mcall	r6[48]
8001e7ea:	14 98       	mov	r8,r10
8001e7ec:	16 99       	mov	r9,r11
8001e7ee:	10 92       	mov	r2,r8
8001e7f0:	12 93       	mov	r3,r9
8001e7f2:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e7f6:	f0 f8 01 28 	ld.w	r8,r8[296]
8001e7fa:	10 9c       	mov	r12,r8
8001e7fc:	f0 16 00 02 	mcall	r6[8]
8001e800:	14 98       	mov	r8,r10
8001e802:	16 99       	mov	r9,r11
8001e804:	04 9a       	mov	r10,r2
8001e806:	06 9b       	mov	r11,r3
8001e808:	f0 16 00 03 	mcall	r6[12]
8001e80c:	14 98       	mov	r8,r10
8001e80e:	16 99       	mov	r9,r11
8001e810:	10 92       	mov	r2,r8
8001e812:	12 93       	mov	r3,r9
8001e814:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e818:	f0 f8 01 04 	ld.w	r8,r8[260]
8001e81c:	10 9c       	mov	r12,r8
8001e81e:	f0 16 00 02 	mcall	r6[8]
8001e822:	14 98       	mov	r8,r10
8001e824:	16 99       	mov	r9,r11
8001e826:	04 9a       	mov	r10,r2
8001e828:	06 9b       	mov	r11,r3
8001e82a:	f0 16 00 05 	mcall	r6[20]
8001e82e:	14 98       	mov	r8,r10
8001e830:	16 99       	mov	r9,r11
8001e832:	10 9a       	mov	r10,r8
8001e834:	12 9b       	mov	r11,r9
8001e836:	f0 16 00 08 	mcall	r6[32]
8001e83a:	18 99       	mov	r9,r12
8001e83c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e840:	f1 49 00 e0 	st.w	r8[224],r9
	// cheating... provide true upvector instead of simulated forces
	//imu->raw_channels[ACC_OFFSET+IMU_X]=sim->attitude.up_vec.v[0] *imu->raw_scale[ACC_OFFSET+IMU_X]+imu->raw_bias[ACC_OFFSET+IMU_X];
	//imu->raw_channels[ACC_OFFSET+IMU_Y]=sim->attitude.up_vec.v[1] *imu->raw_scale[ACC_OFFSET+IMU_Y]+imu->raw_bias[ACC_OFFSET+IMU_Y];
	//imu->raw_channels[ACC_OFFSET+IMU_Z]=sim->attitude.up_vec.v[2] *imu->raw_scale[ACC_OFFSET+IMU_Z]+imu->raw_bias[ACC_OFFSET+IMU_Z];
	
	imu->raw_channels[COMPASS_OFFSET+IMU_X]=(sim->attitude.north_vec.v[0] )*imu->raw_scale[COMPASS_OFFSET+IMU_X]+imu->raw_bias[COMPASS_OFFSET+IMU_X];
8001e844:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e848:	71 b9       	ld.w	r9,r8[0x6c]
8001e84a:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e84e:	f0 f8 01 2c 	ld.w	r8,r8[300]
8001e852:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e856:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e85a:	f0 f8 01 08 	ld.w	r8,r8[264]
8001e85e:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e862:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e866:	f1 49 00 e4 	st.w	r8[228],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Y]=(sim->attitude.north_vec.v[1] )*imu->raw_scale[COMPASS_OFFSET+IMU_Y]+imu->raw_bias[COMPASS_OFFSET+IMU_Y];
8001e86a:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e86e:	71 c9       	ld.w	r9,r8[0x70]
8001e870:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e874:	f0 f8 01 30 	ld.w	r8,r8[304]
8001e878:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e87c:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e880:	f0 f8 01 0c 	ld.w	r8,r8[268]
8001e884:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e888:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e88c:	f1 49 00 e8 	st.w	r8[232],r9
	imu->raw_channels[COMPASS_OFFSET+IMU_Z]=(sim->attitude.north_vec.v[2] )*imu->raw_scale[COMPASS_OFFSET+IMU_Z]+imu->raw_bias[COMPASS_OFFSET+IMU_Z];
8001e890:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e894:	71 d9       	ld.w	r9,r8[0x74]
8001e896:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e89a:	f0 f8 01 34 	ld.w	r8,r8[308]
8001e89e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001e8a2:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8a6:	f0 f8 01 10 	ld.w	r8,r8[272]
8001e8aa:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001e8ae:	ee f8 ff 98 	ld.w	r8,r7[-104]
8001e8b2:	f1 49 00 ec 	st.w	r8[236],r9
	
	
	//imu->dt=sim->dt;

	sim->localPosition.heading=get_yaw(sim->attitude.qe);
8001e8b6:	ee f9 ff a0 	ld.w	r9,r7[-96]
8001e8ba:	20 4d       	sub	sp,16
8001e8bc:	1a 98       	mov	r8,sp
8001e8be:	2b 89       	sub	r9,-72
8001e8c0:	20 08       	sub	r8,0
8001e8c2:	20 09       	sub	r9,0
8001e8c4:	72 0a       	ld.w	r10,r9[0x0]
8001e8c6:	91 0a       	st.w	r8[0x0],r10
8001e8c8:	72 1a       	ld.w	r10,r9[0x4]
8001e8ca:	91 1a       	st.w	r8[0x4],r10
8001e8cc:	72 2a       	ld.w	r10,r9[0x8]
8001e8ce:	91 2a       	st.w	r8[0x8],r10
8001e8d0:	72 39       	ld.w	r9,r9[0xc]
8001e8d2:	91 39       	st.w	r8[0xc],r9
8001e8d4:	f0 16 01 1a 	mcall	r6[1128]
8001e8d8:	2f cd       	sub	sp,-16
8001e8da:	18 99       	mov	r9,r12
8001e8dc:	ee f8 ff a0 	ld.w	r8,r7[-96]
8001e8e0:	f1 49 01 20 	st.w	r8[288],r9
	//pos_est->localPosition=sim->localPosition;
}
8001e8e4:	2e 1d       	sub	sp,-124
8001e8e6:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
8001e8ea:	00 00       	add	r0,r0
8001e8ec:	80 01       	ld.sh	r1,r0[0x0]
8001e8ee:	db fa       	popm	r0-r11,pc,r12=1

8001e8f0 <simulate_barometer>:

void simulate_barometer(simulation_model_t *sim, pressure_data *pressure) {
8001e8f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001e8f4:	1a 97       	mov	r7,sp
8001e8f6:	20 2d       	sub	sp,8
8001e8f8:	49 36       	lddpc	r6,8001e944 <simulate_barometer+0x54>
8001e8fa:	1e 26       	rsub	r6,pc
8001e8fc:	ef 4c ff fc 	st.w	r7[-4],r12
8001e900:	ef 4b ff f8 	st.w	r7[-8],r11

		pressure->altitude=sim->localPosition.origin.altitude - sim->localPosition.pos[Z];
8001e904:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e908:	f0 f9 01 34 	ld.w	r9,r8[308]
8001e90c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e910:	f0 f8 01 1c 	ld.w	r8,r8[284]
8001e914:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8001e918:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e91c:	91 79       	st.w	r8[0x1c],r9
		pressure->vario_vz=sim->vel[Z];
8001e91e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001e922:	70 e9       	ld.w	r9,r8[0x38]
8001e924:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e928:	91 99       	st.w	r8[0x24],r9
		pressure->last_update=get_millis();
8001e92a:	f0 16 00 0f 	mcall	r6[60]
8001e92e:	18 99       	mov	r9,r12
8001e930:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e934:	91 a9       	st.w	r8[0x28],r9
		pressure->altitude_offset=0;
8001e936:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001e93a:	30 09       	mov	r9,0
8001e93c:	91 89       	st.w	r8[0x20],r9
		
	}
8001e93e:	2f ed       	sub	sp,-8
8001e940:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e944:	80 01       	ld.sh	r1,r0[0x0]
8001e946:	e7 7e eb cd 	stcond	r3[-5171],lr

8001e948 <simulate_gps>:
	
void simulate_gps(simulation_model_t *sim, gps_Data_type *gps) {
8001e948:	eb cd 40 c0 	pushm	r6-r7,lr
8001e94c:	1a 97       	mov	r7,sp
8001e94e:	20 9d       	sub	sp,36
8001e950:	4a b6       	lddpc	r6,8001e9fc <simulate_gps+0xb4>
8001e952:	1e 26       	rsub	r6,pc
8001e954:	ef 4c ff e0 	st.w	r7[-32],r12
8001e958:	ef 4b ff dc 	st.w	r7[-36],r11
		global_position_t gpos=local_to_global_position(sim->localPosition);
8001e95c:	ee cc 00 1c 	sub	r12,r7,28
8001e960:	ee f8 ff e0 	ld.w	r8,r7[-32]
8001e964:	20 cd       	sub	sp,48
8001e966:	1a 99       	mov	r9,sp
8001e968:	12 9b       	mov	r11,r9
8001e96a:	f0 ca fe ec 	sub	r10,r8,-276
8001e96e:	f6 c8 00 00 	sub	r8,r11,0
8001e972:	f4 c9 00 00 	sub	r9,r10,0
8001e976:	72 0e       	ld.w	lr,r9[0x0]
8001e978:	91 0e       	st.w	r8[0x0],lr
8001e97a:	72 1e       	ld.w	lr,r9[0x4]
8001e97c:	91 1e       	st.w	r8[0x4],lr
8001e97e:	72 2e       	ld.w	lr,r9[0x8]
8001e980:	91 2e       	st.w	r8[0x8],lr
8001e982:	72 39       	ld.w	r9,r9[0xc]
8001e984:	91 39       	st.w	r8[0xc],r9
8001e986:	f6 c8 ff f0 	sub	r8,r11,-16
8001e98a:	f4 c9 ff f0 	sub	r9,r10,-16
8001e98e:	72 0e       	ld.w	lr,r9[0x0]
8001e990:	91 0e       	st.w	r8[0x0],lr
8001e992:	72 1e       	ld.w	lr,r9[0x4]
8001e994:	91 1e       	st.w	r8[0x4],lr
8001e996:	72 2e       	ld.w	lr,r9[0x8]
8001e998:	91 2e       	st.w	r8[0x8],lr
8001e99a:	72 39       	ld.w	r9,r9[0xc]
8001e99c:	91 39       	st.w	r8[0xc],r9
8001e99e:	f6 c8 ff e0 	sub	r8,r11,-32
8001e9a2:	f4 c9 ff e0 	sub	r9,r10,-32
8001e9a6:	72 0a       	ld.w	r10,r9[0x0]
8001e9a8:	91 0a       	st.w	r8[0x0],r10
8001e9aa:	72 1a       	ld.w	r10,r9[0x4]
8001e9ac:	91 1a       	st.w	r8[0x4],r10
8001e9ae:	72 2a       	ld.w	r10,r9[0x8]
8001e9b0:	91 2a       	st.w	r8[0x8],r10
8001e9b2:	72 39       	ld.w	r9,r9[0xc]
8001e9b4:	91 39       	st.w	r8[0xc],r9
8001e9b6:	f0 16 00 8b 	mcall	r6[556]
8001e9ba:	2f 4d       	sub	sp,-48
	
		gps->altitude=gpos.altitude;
8001e9bc:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001e9c0:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001e9c4:	91 49       	st.w	r8[0x10],r9
		gps->latitude=gpos.latitude;
8001e9c6:	ee e8 ff ec 	ld.d	r8,r7[-20]
8001e9ca:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e9ce:	f4 e9 00 00 	st.d	r10[0],r8
		gps->longitude=gpos.longitude;
8001e9d2:	ee e8 ff e4 	ld.d	r8,r7[-28]
8001e9d6:	ee fa ff dc 	ld.w	r10,r7[-36]
8001e9da:	f4 e9 00 08 	st.d	r10[8],r8
		gps->timeLastMsg=get_millis();
8001e9de:	f0 16 00 0f 	mcall	r6[60]
8001e9e2:	18 99       	mov	r9,r12
8001e9e4:	ee f8 ff dc 	ld.w	r8,r7[-36]
8001e9e8:	f1 49 00 44 	st.w	r8[68],r9
		gps->status=GPS_OK;
8001e9ec:	ee f9 ff dc 	ld.w	r9,r7[-36]
8001e9f0:	30 28       	mov	r8,2
8001e9f2:	f3 68 00 4c 	st.b	r9[76],r8
	

}
8001e9f6:	2f 7d       	sub	sp,-36
8001e9f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001e9fc:	80 01       	ld.sh	r1,r0[0x0]
8001e9fe:	e7 d6       	*unknown*

8001ea00 <crc_accumulate>:
 *
 * @param data new char to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate(uint8_t data, uint16_t *crcAccum)
{
8001ea00:	eb cd 40 80 	pushm	r7,lr
8001ea04:	1a 97       	mov	r7,sp
8001ea06:	20 3d       	sub	sp,12
8001ea08:	18 98       	mov	r8,r12
8001ea0a:	ef 4b ff f4 	st.w	r7[-12],r11
8001ea0e:	ef 68 ff f8 	st.b	r7[-8],r8
        /*Accumulate one byte of data into the CRC*/
        uint8_t tmp;

        tmp = data ^ (uint8_t)(*crcAccum &0xff);
8001ea12:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea16:	90 08       	ld.sh	r8,r8[0x0]
8001ea18:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ea1c:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8001ea20:	f3 e8 20 08 	eor	r8,r9,r8
8001ea24:	ef 68 ff ff 	st.b	r7[-1],r8
        tmp ^= (tmp<<4);
8001ea28:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea2c:	a5 68       	lsl	r8,0x4
8001ea2e:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001ea32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea36:	f3 e8 20 08 	eor	r8,r9,r8
8001ea3a:	5c 58       	castu.b	r8
8001ea3c:	ef 68 ff ff 	st.b	r7[-1],r8
        *crcAccum = (*crcAccum>>8) ^ (tmp<<8) ^ (tmp <<3) ^ (tmp>>4);
8001ea40:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001ea44:	90 08       	ld.sh	r8,r8[0x0]
8001ea46:	5c 78       	castu.h	r8
8001ea48:	a9 88       	lsr	r8,0x8
8001ea4a:	5c 88       	casts.h	r8
8001ea4c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea50:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea54:	a9 68       	lsl	r8,0x8
8001ea56:	5c 88       	casts.h	r8
8001ea58:	f3 e8 20 08 	eor	r8,r9,r8
8001ea5c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea60:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea64:	a3 78       	lsl	r8,0x3
8001ea66:	5c 88       	casts.h	r8
8001ea68:	f3 e8 20 08 	eor	r8,r9,r8
8001ea6c:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
8001ea70:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001ea74:	a5 88       	lsr	r8,0x4
8001ea76:	5c 58       	castu.b	r8
8001ea78:	f3 e8 20 08 	eor	r8,r9,r8
8001ea7c:	5c 88       	casts.h	r8
8001ea7e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ea82:	b2 08       	st.h	r9[0x0],r8
}
8001ea84:	2f dd       	sub	sp,-12
8001ea86:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ea8a <crc_init>:
 * @brief Initiliaze the buffer for the X.25 CRC
 *
 * @param crcAccum the 16 bit X.25 CRC
 */
static inline void crc_init(uint16_t* crcAccum)
{
8001ea8a:	eb cd 40 80 	pushm	r7,lr
8001ea8e:	1a 97       	mov	r7,sp
8001ea90:	20 1d       	sub	sp,4
8001ea92:	ef 4c ff fc 	st.w	r7[-4],r12
        *crcAccum = X25_INIT_CRC;
8001ea96:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ea9a:	3f f8       	mov	r8,-1
8001ea9c:	b2 08       	st.h	r9[0x0],r8
}
8001ea9e:	2f fd       	sub	sp,-4
8001eaa0:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eaa4 <crc_calculate>:
 * @param  pBuffer buffer containing the byte array to hash
 * @param  length  length of the byte array
 * @return the checksum over the buffer bytes
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
8001eaa4:	eb cd 40 c0 	pushm	r6-r7,lr
8001eaa8:	1a 97       	mov	r7,sp
8001eaaa:	20 3d       	sub	sp,12
8001eaac:	49 76       	lddpc	r6,8001eb08 <crc_calculate+0x64>
8001eaae:	1e 26       	rsub	r6,pc
8001eab0:	ef 4c ff f8 	st.w	r7[-8],r12
8001eab4:	16 98       	mov	r8,r11
8001eab6:	ef 58 ff f4 	st.h	r7[-12],r8
        uint16_t crcTmp;
        crc_init(&crcTmp);
8001eaba:	ee c8 00 02 	sub	r8,r7,2
8001eabe:	10 9c       	mov	r12,r8
8001eac0:	ce 5f       	rcall	8001ea8a <crc_init>
	while (length--) {
8001eac2:	c0 e8       	rjmp	8001eade <crc_calculate+0x3a>
                crc_accumulate(*pBuffer++, &crcTmp);
8001eac4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eac8:	11 88       	ld.ub	r8,r8[0x0]
8001eaca:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001eace:	2f f9       	sub	r9,-1
8001ead0:	ef 49 ff f8 	st.w	r7[-8],r9
8001ead4:	ee c9 00 02 	sub	r9,r7,2
8001ead8:	12 9b       	mov	r11,r9
8001eada:	10 9c       	mov	r12,r8
8001eadc:	c9 2f       	rcall	8001ea00 <crc_accumulate>
 **/
static inline uint16_t crc_calculate(const uint8_t* pBuffer, uint16_t length)
{
        uint16_t crcTmp;
        crc_init(&crcTmp);
	while (length--) {
8001eade:	ef 09 ff f4 	ld.sh	r9,r7[-12]
8001eae2:	30 08       	mov	r8,0
8001eae4:	f0 09 19 00 	cp.h	r9,r8
8001eae8:	5f 18       	srne	r8
8001eaea:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eaee:	ef 08 ff f4 	ld.sh	r8,r7[-12]
8001eaf2:	20 18       	sub	r8,1
8001eaf4:	ef 58 ff f4 	st.h	r7[-12],r8
8001eaf8:	58 09       	cp.w	r9,0
8001eafa:	ce 51       	brne	8001eac4 <crc_calculate+0x20>
                crc_accumulate(*pBuffer++, &crcTmp);
        }
        return crcTmp;
8001eafc:	ef 08 ff fe 	ld.sh	r8,r7[-2]
}
8001eb00:	10 9c       	mov	r12,r8
8001eb02:	2f dd       	sub	sp,-12
8001eb04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb08:	80 01       	ld.sh	r1,r0[0x0]
8001eb0a:	e9 32 eb cd 	ld.ub	r2,r4[-5171]

8001eb0c <crc_accumulate_buffer>:
 *
 * @param data new bytes to hash
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
8001eb0c:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb10:	1a 97       	mov	r7,sp
8001eb12:	20 4d       	sub	sp,16
8001eb14:	49 66       	lddpc	r6,8001eb6c <crc_accumulate_buffer+0x60>
8001eb16:	1e 26       	rsub	r6,pc
8001eb18:	ef 4c ff f8 	st.w	r7[-8],r12
8001eb1c:	ef 4b ff f4 	st.w	r7[-12],r11
8001eb20:	14 98       	mov	r8,r10
8001eb22:	ef 68 ff f0 	st.b	r7[-16],r8
	const uint8_t *p = (const uint8_t *)pBuffer;
8001eb26:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001eb2a:	ef 48 ff fc 	st.w	r7[-4],r8
	while (length--) {
8001eb2e:	c0 d8       	rjmp	8001eb48 <crc_accumulate_buffer+0x3c>
                crc_accumulate(*p++, crcAccum);
8001eb30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eb34:	11 88       	ld.ub	r8,r8[0x0]
8001eb36:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001eb3a:	2f f9       	sub	r9,-1
8001eb3c:	ef 49 ff fc 	st.w	r7[-4],r9
8001eb40:	ee fb ff f8 	ld.w	r11,r7[-8]
8001eb44:	10 9c       	mov	r12,r8
8001eb46:	c5 df       	rcall	8001ea00 <crc_accumulate>
 * @param crcAccum the already accumulated checksum
 **/
static inline void crc_accumulate_buffer(uint16_t *crcAccum, const char *pBuffer, uint8_t length)
{
	const uint8_t *p = (const uint8_t *)pBuffer;
	while (length--) {
8001eb48:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8001eb4c:	30 08       	mov	r8,0
8001eb4e:	f0 09 18 00 	cp.b	r9,r8
8001eb52:	5f 18       	srne	r8
8001eb54:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
8001eb58:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001eb5c:	20 18       	sub	r8,1
8001eb5e:	ef 68 ff f0 	st.b	r7[-16],r8
8001eb62:	58 09       	cp.w	r9,0
8001eb64:	ce 61       	brne	8001eb30 <crc_accumulate_buffer+0x24>
                crc_accumulate(*p++, crcAccum);
        }
}
8001eb66:	2f cd       	sub	sp,-16
8001eb68:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb6c:	80 01       	ld.sh	r1,r0[0x0]
8001eb6e:	e9 9a       	*unknown*

8001eb70 <mavlink_get_channel_status>:
/*
 * Internal function to give access to the channel status for each channel
 */
#ifndef MAVLINK_GET_CHANNEL_STATUS
MAVLINK_HELPER mavlink_status_t* mavlink_get_channel_status(uint8_t chan)
{
8001eb70:	eb cd 40 c0 	pushm	r6-r7,lr
8001eb74:	1a 97       	mov	r7,sp
8001eb76:	20 1d       	sub	sp,4
8001eb78:	48 96       	lddpc	r6,8001eb9c <mavlink_get_channel_status+0x2c>
8001eb7a:	1e 26       	rsub	r6,pc
8001eb7c:	18 98       	mov	r8,r12
8001eb7e:	ef 68 ff fc 	st.b	r7[-4],r8
	static mavlink_status_t m_mavlink_status[MAVLINK_COMM_NUM_BUFFERS];
	return &m_mavlink_status[chan];
8001eb82:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8001eb86:	f0 09 15 04 	lsl	r9,r8,0x4
8001eb8a:	ec f8 08 c8 	ld.w	r8,r6[2248]
8001eb8e:	f2 08 00 08 	add	r8,r9,r8
}
8001eb92:	10 9c       	mov	r12,r8
8001eb94:	2f fd       	sub	sp,-4
8001eb96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eb9a:	00 00       	add	r0,r0
8001eb9c:	80 01       	ld.sh	r1,r0[0x0]
8001eb9e:	e9 fe eb cd 	st.wqs	r4[0x734],lr

8001eba0 <_mav_finalize_message_chan_send>:
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, 
						    uint8_t length, uint8_t crc_extra)
#else
MAVLINK_HELPER void _mav_finalize_message_chan_send(mavlink_channel_t chan, uint8_t msgid, const char *packet, uint8_t length)
#endif
{
8001eba0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eba4:	1a 97       	mov	r7,sp
8001eba6:	20 9d       	sub	sp,36
8001eba8:	4b d6       	lddpc	r6,8001ec9c <_mav_finalize_message_chan_send+0xfc>
8001ebaa:	1e 26       	rsub	r6,pc
8001ebac:	ef 4c ff ec 	st.w	r7[-20],r12
8001ebb0:	ef 4a ff e4 	st.w	r7[-28],r10
8001ebb4:	16 9a       	mov	r10,r11
8001ebb6:	ef 6a ff e8 	st.b	r7[-24],r10
8001ebba:	ef 69 ff e0 	st.b	r7[-32],r9
8001ebbe:	ef 68 ff dc 	st.b	r7[-36],r8
	uint16_t checksum;
	uint8_t buf[MAVLINK_NUM_HEADER_BYTES];
	uint8_t ck[2];
	mavlink_status_t *status = mavlink_get_channel_status(chan);
8001ebc2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8001ebc6:	5c 58       	castu.b	r8
8001ebc8:	10 9c       	mov	r12,r8
8001ebca:	cd 3f       	rcall	8001eb70 <mavlink_get_channel_status>
8001ebcc:	18 98       	mov	r8,r12
8001ebce:	ef 48 ff fc 	st.w	r7[-4],r8
	buf[0] = MAVLINK_STX;
8001ebd2:	3f e8       	mov	r8,-2
8001ebd4:	ef 68 ff f4 	st.b	r7[-12],r8
	buf[1] = length;
8001ebd8:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ebdc:	ef 68 ff f5 	st.b	r7[-11],r8
	buf[2] = status->current_tx_seq;
8001ebe0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ebe4:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ebe8:	ef 68 ff f6 	st.b	r7[-10],r8
	buf[3] = mavlink_system.sysid;
8001ebec:	ec f8 00 74 	ld.w	r8,r6[116]
8001ebf0:	11 88       	ld.ub	r8,r8[0x0]
8001ebf2:	ef 68 ff f7 	st.b	r7[-9],r8
	buf[4] = mavlink_system.compid;
8001ebf6:	ec f8 00 74 	ld.w	r8,r6[116]
8001ebfa:	11 98       	ld.ub	r8,r8[0x1]
8001ebfc:	ef 68 ff f8 	st.b	r7[-8],r8
	buf[5] = msgid;
8001ec00:	ef 38 ff e8 	ld.ub	r8,r7[-24]
8001ec04:	ef 68 ff f9 	st.b	r7[-7],r8
	status->current_tx_seq++;
8001ec08:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ec0c:	f1 38 00 0a 	ld.ub	r8,r8[10]
8001ec10:	2f f8       	sub	r8,-1
8001ec12:	5c 58       	castu.b	r8
8001ec14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ec18:	f3 68 00 0a 	st.b	r9[10],r8
	checksum = crc_calculate((uint8_t*)&buf[1], MAVLINK_CORE_HEADER_LEN);
8001ec1c:	ee c8 00 0c 	sub	r8,r7,12
8001ec20:	2f f8       	sub	r8,-1
8001ec22:	30 5b       	mov	r11,5
8001ec24:	10 9c       	mov	r12,r8
8001ec26:	c3 ff       	rcall	8001eaa4 <crc_calculate>
8001ec28:	18 98       	mov	r8,r12
8001ec2a:	5c 88       	casts.h	r8
8001ec2c:	ef 58 ff fa 	st.h	r7[-6],r8
	crc_accumulate_buffer(&checksum, packet, length);
8001ec30:	ef 39 ff e0 	ld.ub	r9,r7[-32]
8001ec34:	ee c8 00 06 	sub	r8,r7,6
8001ec38:	12 9a       	mov	r10,r9
8001ec3a:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ec3e:	10 9c       	mov	r12,r8
8001ec40:	c6 6f       	rcall	8001eb0c <crc_accumulate_buffer>
#if MAVLINK_CRC_EXTRA
	crc_accumulate(crc_extra, &checksum);
8001ec42:	ef 38 ff dc 	ld.ub	r8,r7[-36]
8001ec46:	ee c9 00 06 	sub	r9,r7,6
8001ec4a:	12 9b       	mov	r11,r9
8001ec4c:	10 9c       	mov	r12,r8
8001ec4e:	cd 9e       	rcall	8001ea00 <crc_accumulate>
#endif
	ck[0] = (uint8_t)(checksum & 0xFF);
8001ec50:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ec54:	5c 58       	castu.b	r8
8001ec56:	ef 68 ff f0 	st.b	r7[-16],r8
	ck[1] = (uint8_t)(checksum >> 8);
8001ec5a:	ef 08 ff fa 	ld.sh	r8,r7[-6]
8001ec5e:	5c 78       	castu.h	r8
8001ec60:	a9 88       	lsr	r8,0x8
8001ec62:	5c 88       	casts.h	r8
8001ec64:	5c 58       	castu.b	r8
8001ec66:	ef 68 ff f1 	st.b	r7[-15],r8

	MAVLINK_START_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
	_mavlink_send_uart(chan, (const char *)buf, MAVLINK_NUM_HEADER_BYTES);
8001ec6a:	ee c8 00 0c 	sub	r8,r7,12
8001ec6e:	30 6a       	mov	r10,6
8001ec70:	10 9b       	mov	r11,r8
8001ec72:	ee fc ff ec 	ld.w	r12,r7[-20]
8001ec76:	c1 5c       	rcall	8001eca0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, packet, length);
8001ec78:	ef 38 ff e0 	ld.ub	r8,r7[-32]
8001ec7c:	10 9a       	mov	r10,r8
8001ec7e:	ee fb ff e4 	ld.w	r11,r7[-28]
8001ec82:	ee fc ff ec 	ld.w	r12,r7[-20]
8001ec86:	c0 dc       	rcall	8001eca0 <_mavlink_send_uart>
	_mavlink_send_uart(chan, (const char *)ck, 2);
8001ec88:	ee c8 00 10 	sub	r8,r7,16
8001ec8c:	30 2a       	mov	r10,2
8001ec8e:	10 9b       	mov	r11,r8
8001ec90:	ee fc ff ec 	ld.w	r12,r7[-20]
8001ec94:	c0 6c       	rcall	8001eca0 <_mavlink_send_uart>
	MAVLINK_END_UART_SEND(chan, MAVLINK_NUM_NON_PAYLOAD_BYTES + (uint16_t)length);
}
8001ec96:	2f 7d       	sub	sp,-36
8001ec98:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ec9c:	80 01       	ld.sh	r1,r0[0x0]
8001ec9e:	ea 2e eb cd 	sub	lr,715725

8001eca0 <_mavlink_send_uart>:
    }
}
 */

MAVLINK_HELPER void _mavlink_send_uart(mavlink_channel_t chan, const char *buf, uint16_t len)
{
8001eca0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eca4:	1a 97       	mov	r7,sp
8001eca6:	20 4d       	sub	sp,16
8001eca8:	49 46       	lddpc	r6,8001ecf8 <_mavlink_send_uart+0x58>
8001ecaa:	1e 26       	rsub	r6,pc
8001ecac:	ef 4c ff f8 	st.w	r7[-8],r12
8001ecb0:	ef 4b ff f4 	st.w	r7[-12],r11
8001ecb4:	14 98       	mov	r8,r10
8001ecb6:	ef 58 ff f0 	st.h	r7[-16],r8
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ecba:	30 08       	mov	r8,0
8001ecbc:	ef 58 ff fe 	st.h	r7[-2],r8
8001ecc0:	c1 28       	rjmp	8001ece4 <_mavlink_send_uart+0x44>
		comm_send_ch(chan, (uint8_t)buf[i]);
8001ecc2:	ef 18 ff fe 	ld.uh	r8,r7[-2]
8001ecc6:	ee f9 ff f4 	ld.w	r9,r7[-12]
8001ecca:	f2 08 00 08 	add	r8,r9,r8
8001ecce:	11 88       	ld.ub	r8,r8[0x0]
8001ecd0:	10 9b       	mov	r11,r8
8001ecd2:	ee fc ff f8 	ld.w	r12,r7[-8]
8001ecd6:	f0 16 00 dd 	mcall	r6[884]
	   defines it */
	MAVLINK_SEND_UART_BYTES(chan, (const uint8_t *)buf, len);
#else
	/* fallback to one byte at a time */
	uint16_t i;
	for (i = 0; i < len; i++) {
8001ecda:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ecde:	2f f8       	sub	r8,-1
8001ece0:	ef 58 ff fe 	st.h	r7[-2],r8
8001ece4:	ef 09 ff fe 	ld.sh	r9,r7[-2]
8001ece8:	ef 08 ff f0 	ld.sh	r8,r7[-16]
8001ecec:	f0 09 19 00 	cp.h	r9,r8
8001ecf0:	ce 93       	brcs	8001ecc2 <_mavlink_send_uart+0x22>
		comm_send_ch(chan, (uint8_t)buf[i]);
	}
#endif
}
8001ecf2:	2f cd       	sub	sp,-16
8001ecf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ecf8:	80 01       	ld.sh	r1,r0[0x0]
8001ecfa:	eb 2e eb cd 	ld.sb	lr,r5[-5171]

8001ecfc <byte_swap_2>:
	return msg->len + MAVLINK_NUM_NON_PAYLOAD_BYTES;
}

#if MAVLINK_NEED_BYTE_SWAP
static inline void byte_swap_2(char *dst, const char *src)
{
8001ecfc:	eb cd 40 80 	pushm	r7,lr
8001ed00:	1a 97       	mov	r7,sp
8001ed02:	20 2d       	sub	sp,8
8001ed04:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed08:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[1];
8001ed0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed10:	2f f8       	sub	r8,-1
8001ed12:	11 88       	ld.ub	r8,r8[0x0]
8001ed14:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed18:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[0];
8001ed1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed1e:	f0 c9 ff ff 	sub	r9,r8,-1
8001ed22:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed26:	11 88       	ld.ub	r8,r8[0x0]
8001ed28:	b2 88       	st.b	r9[0x0],r8
}
8001ed2a:	2f ed       	sub	sp,-8
8001ed2c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ed30 <byte_swap_4>:
static inline void byte_swap_4(char *dst, const char *src)
{
8001ed30:	eb cd 40 80 	pushm	r7,lr
8001ed34:	1a 97       	mov	r7,sp
8001ed36:	20 2d       	sub	sp,8
8001ed38:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed3c:	ef 4b ff f8 	st.w	r7[-8],r11
	dst[0] = src[3];
8001ed40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed44:	2f d8       	sub	r8,-3
8001ed46:	11 88       	ld.ub	r8,r8[0x0]
8001ed48:	ee f9 ff fc 	ld.w	r9,r7[-4]
8001ed4c:	b2 88       	st.b	r9[0x0],r8
	dst[1] = src[2];
8001ed4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed52:	f0 c9 ff ff 	sub	r9,r8,-1
8001ed56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed5a:	2f e8       	sub	r8,-2
8001ed5c:	11 88       	ld.ub	r8,r8[0x0]
8001ed5e:	b2 88       	st.b	r9[0x0],r8
	dst[2] = src[1];
8001ed60:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed64:	f0 c9 ff fe 	sub	r9,r8,-2
8001ed68:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed6c:	2f f8       	sub	r8,-1
8001ed6e:	11 88       	ld.ub	r8,r8[0x0]
8001ed70:	b2 88       	st.b	r9[0x0],r8
	dst[3] = src[0];
8001ed72:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ed76:	f0 c9 ff fd 	sub	r9,r8,-3
8001ed7a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ed7e:	11 88       	ld.ub	r8,r8[0x0]
8001ed80:	b2 88       	st.b	r9[0x0],r8
}
8001ed82:	2f ed       	sub	sp,-8
8001ed84:	e3 cd 80 80 	ldm	sp++,r7,pc

8001ed88 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8001ed88:	eb cd 40 c0 	pushm	r6-r7,lr
8001ed8c:	1a 97       	mov	r7,sp
8001ed8e:	20 3d       	sub	sp,12
8001ed90:	49 06       	lddpc	r6,8001edd0 <mav_array_memcpy+0x48>
8001ed92:	1e 26       	rsub	r6,pc
8001ed94:	ef 4c ff fc 	st.w	r7[-4],r12
8001ed98:	ef 4b ff f8 	st.w	r7[-8],r11
8001ed9c:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8001eda0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001eda4:	58 08       	cp.w	r8,0
8001eda6:	c0 91       	brne	8001edb8 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8001eda8:	ee fa ff f4 	ld.w	r10,r7[-12]
8001edac:	30 0b       	mov	r11,0
8001edae:	ee fc ff fc 	ld.w	r12,r7[-4]
8001edb2:	f0 16 00 31 	mcall	r6[196]
8001edb6:	c0 98       	rjmp	8001edc8 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8001edb8:	ee fa ff f4 	ld.w	r10,r7[-12]
8001edbc:	ee fb ff f8 	ld.w	r11,r7[-8]
8001edc0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001edc4:	f0 16 00 1b 	mcall	r6[108]
	}
}
8001edc8:	2f dd       	sub	sp,-12
8001edca:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001edce:	00 00       	add	r0,r0
8001edd0:	80 01       	ld.sh	r1,r0[0x0]
8001edd2:	ec 16 eb cd 	eorl	r6,0xebcd

8001edd4 <_MAV_RETURN_uint16_t>:
#if MAVLINK_NEED_BYTE_SWAP
#define _MAV_MSG_RETURN_TYPE(TYPE, SIZE) \
static inline TYPE _MAV_RETURN_## TYPE(const mavlink_message_t *msg, uint8_t ofs) \
{ TYPE r; byte_swap_## SIZE((char*)&r, &_MAV_PAYLOAD(msg)[ofs]); return r; }

_MAV_MSG_RETURN_TYPE(uint16_t, 2)
8001edd4:	eb cd 40 c0 	pushm	r6-r7,lr
8001edd8:	1a 97       	mov	r7,sp
8001edda:	20 3d       	sub	sp,12
8001eddc:	48 d6       	lddpc	r6,8001ee10 <_MAV_RETURN_uint16_t+0x3c>
8001edde:	1e 26       	rsub	r6,pc
8001ede0:	ef 4c ff f8 	st.w	r7[-8],r12
8001ede4:	16 98       	mov	r8,r11
8001ede6:	ef 68 ff f4 	st.b	r7[-12],r8
8001edea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001edee:	2f 88       	sub	r8,-8
8001edf0:	10 99       	mov	r9,r8
8001edf2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001edf6:	10 09       	add	r9,r8
8001edf8:	ee c8 00 02 	sub	r8,r7,2
8001edfc:	12 9b       	mov	r11,r9
8001edfe:	10 9c       	mov	r12,r8
8001ee00:	c7 ef       	rcall	8001ecfc <byte_swap_2>
8001ee02:	ef 08 ff fe 	ld.sh	r8,r7[-2]
8001ee06:	10 9c       	mov	r12,r8
8001ee08:	2f dd       	sub	sp,-12
8001ee0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee0e:	00 00       	add	r0,r0
8001ee10:	80 01       	ld.sh	r1,r0[0x0]
8001ee12:	ec 62 eb cd 	mov	r2,846797

8001ee14 <_MAV_RETURN_uint32_t>:
_MAV_MSG_RETURN_TYPE(int16_t,  2)
_MAV_MSG_RETURN_TYPE(uint32_t, 4)
8001ee14:	eb cd 40 c0 	pushm	r6-r7,lr
8001ee18:	1a 97       	mov	r7,sp
8001ee1a:	20 3d       	sub	sp,12
8001ee1c:	48 d6       	lddpc	r6,8001ee50 <_MAV_RETURN_uint32_t+0x3c>
8001ee1e:	1e 26       	rsub	r6,pc
8001ee20:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee24:	16 98       	mov	r8,r11
8001ee26:	ef 68 ff f4 	st.b	r7[-12],r8
8001ee2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee2e:	2f 88       	sub	r8,-8
8001ee30:	10 99       	mov	r9,r8
8001ee32:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ee36:	10 09       	add	r9,r8
8001ee38:	ee c8 00 04 	sub	r8,r7,4
8001ee3c:	12 9b       	mov	r11,r9
8001ee3e:	10 9c       	mov	r12,r8
8001ee40:	c7 8f       	rcall	8001ed30 <byte_swap_4>
8001ee42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee46:	10 9c       	mov	r12,r8
8001ee48:	2f dd       	sub	sp,-12
8001ee4a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee4e:	00 00       	add	r0,r0
8001ee50:	80 01       	ld.sh	r1,r0[0x0]
8001ee52:	ec a2       	*unknown*

8001ee54 <_MAV_RETURN_float>:
_MAV_MSG_RETURN_TYPE(int32_t,  4)
_MAV_MSG_RETURN_TYPE(uint64_t, 8)
_MAV_MSG_RETURN_TYPE(int64_t,  8)
_MAV_MSG_RETURN_TYPE(float,    4)
8001ee54:	eb cd 40 c0 	pushm	r6-r7,lr
8001ee58:	1a 97       	mov	r7,sp
8001ee5a:	20 3d       	sub	sp,12
8001ee5c:	48 d6       	lddpc	r6,8001ee90 <_MAV_RETURN_float+0x3c>
8001ee5e:	1e 26       	rsub	r6,pc
8001ee60:	ef 4c ff f8 	st.w	r7[-8],r12
8001ee64:	16 98       	mov	r8,r11
8001ee66:	ef 68 ff f4 	st.b	r7[-12],r8
8001ee6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ee6e:	2f 88       	sub	r8,-8
8001ee70:	10 99       	mov	r9,r8
8001ee72:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001ee76:	10 09       	add	r9,r8
8001ee78:	ee c8 00 04 	sub	r8,r7,4
8001ee7c:	12 9b       	mov	r11,r9
8001ee7e:	10 9c       	mov	r12,r8
8001ee80:	c5 8f       	rcall	8001ed30 <byte_swap_4>
8001ee82:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001ee86:	10 9c       	mov	r12,r8
8001ee88:	2f dd       	sub	sp,-12
8001ee8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ee8e:	00 00       	add	r0,r0
8001ee90:	80 01       	ld.sh	r1,r0[0x0]
8001ee92:	ec e2 eb cd 	ld.d	r2,r6[-5171]

8001ee94 <mavlink_msg_set_mode_get_target_system>:
 * @brief Get field target_system from set_mode message
 *
 * @return The system setting the mode
 */
static inline uint8_t mavlink_msg_set_mode_get_target_system(const mavlink_message_t* msg)
{
8001ee94:	eb cd 40 80 	pushm	r7,lr
8001ee98:	1a 97       	mov	r7,sp
8001ee9a:	20 1d       	sub	sp,4
8001ee9c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  4);
8001eea0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eea4:	2f 88       	sub	r8,-8
8001eea6:	2f c8       	sub	r8,-4
8001eea8:	11 88       	ld.ub	r8,r8[0x0]
}
8001eeaa:	10 9c       	mov	r12,r8
8001eeac:	2f fd       	sub	sp,-4
8001eeae:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eeb2 <mavlink_msg_set_mode_get_base_mode>:
 * @brief Get field base_mode from set_mode message
 *
 * @return The new base mode
 */
static inline uint8_t mavlink_msg_set_mode_get_base_mode(const mavlink_message_t* msg)
{
8001eeb2:	eb cd 40 80 	pushm	r7,lr
8001eeb6:	1a 97       	mov	r7,sp
8001eeb8:	20 1d       	sub	sp,4
8001eeba:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  5);
8001eebe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001eec2:	2f 88       	sub	r8,-8
8001eec4:	2f b8       	sub	r8,-5
8001eec6:	11 88       	ld.ub	r8,r8[0x0]
}
8001eec8:	10 9c       	mov	r12,r8
8001eeca:	2f fd       	sub	sp,-4
8001eecc:	e3 cd 80 80 	ldm	sp++,r7,pc

8001eed0 <mavlink_msg_set_mode_get_custom_mode>:
 * @brief Get field custom_mode from set_mode message
 *
 * @return The new autopilot-specific mode. This field can be ignored by an autopilot.
 */
static inline uint32_t mavlink_msg_set_mode_get_custom_mode(const mavlink_message_t* msg)
{
8001eed0:	eb cd 40 c0 	pushm	r6-r7,lr
8001eed4:	1a 97       	mov	r7,sp
8001eed6:	20 1d       	sub	sp,4
8001eed8:	48 76       	lddpc	r6,8001eef4 <mavlink_msg_set_mode_get_custom_mode+0x24>
8001eeda:	1e 26       	rsub	r6,pc
8001eedc:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint32_t(msg,  0);
8001eee0:	30 0b       	mov	r11,0
8001eee2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001eee6:	c9 7f       	rcall	8001ee14 <_MAV_RETURN_uint32_t>
8001eee8:	18 98       	mov	r8,r12
}
8001eeea:	10 9c       	mov	r12,r8
8001eeec:	2f fd       	sub	sp,-4
8001eeee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001eef2:	00 00       	add	r0,r0
8001eef4:	80 01       	ld.sh	r1,r0[0x0]
8001eef6:	ed 5e eb cd 	st.h	r6[-5171],lr

8001eef8 <mavlink_msg_set_mode_decode>:
 *
 * @param msg The message to decode
 * @param set_mode C-struct to decode the message contents into
 */
static inline void mavlink_msg_set_mode_decode(const mavlink_message_t* msg, mavlink_set_mode_t* set_mode)
{
8001eef8:	eb cd 40 c0 	pushm	r6-r7,lr
8001eefc:	1a 97       	mov	r7,sp
8001eefe:	20 2d       	sub	sp,8
8001ef00:	48 f6       	lddpc	r6,8001ef3c <mavlink_msg_set_mode_decode+0x44>
8001ef02:	1e 26       	rsub	r6,pc
8001ef04:	ef 4c ff fc 	st.w	r7[-4],r12
8001ef08:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	set_mode->custom_mode = mavlink_msg_set_mode_get_custom_mode(msg);
8001ef0c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef10:	ce 0f       	rcall	8001eed0 <mavlink_msg_set_mode_get_custom_mode>
8001ef12:	18 99       	mov	r9,r12
8001ef14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001ef18:	91 09       	st.w	r8[0x0],r9
	set_mode->target_system = mavlink_msg_set_mode_get_target_system(msg);
8001ef1a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef1e:	cb bf       	rcall	8001ee94 <mavlink_msg_set_mode_get_target_system>
8001ef20:	18 98       	mov	r8,r12
8001ef22:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ef26:	b2 c8       	st.b	r9[0x4],r8
	set_mode->base_mode = mavlink_msg_set_mode_get_base_mode(msg);
8001ef28:	ee fc ff fc 	ld.w	r12,r7[-4]
8001ef2c:	cc 3f       	rcall	8001eeb2 <mavlink_msg_set_mode_get_base_mode>
8001ef2e:	18 98       	mov	r8,r12
8001ef30:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001ef34:	b2 d8       	st.b	r9[0x5],r8
#else
	memcpy(set_mode, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_SET_MODE_LEN);
#endif
}
8001ef36:	2f ed       	sub	sp,-8
8001ef38:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001ef3c:	80 01       	ld.sh	r1,r0[0x0]
8001ef3e:	ed 86       	*unknown*

8001ef40 <mavlink_msg_mission_item_send>:
 * @param z PARAM7 / z position: global: altitude
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
{
8001ef40:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001ef44:	1a 97       	mov	r7,sp
8001ef46:	21 2d       	sub	sp,72
8001ef48:	4c 26       	lddpc	r6,8001f050 <mavlink_msg_mission_item_send+0x110>
8001ef4a:	1e 26       	rsub	r6,pc
8001ef4c:	ee c5 ff ec 	sub	r5,r7,-20
8001ef50:	ef 4c ff d4 	st.w	r7[-44],r12
8001ef54:	16 93       	mov	r3,r11
8001ef56:	14 9e       	mov	lr,r10
8001ef58:	12 9c       	mov	r12,r9
8001ef5a:	10 9b       	mov	r11,r8
8001ef5c:	6a 0a       	ld.w	r10,r5[0x0]
8001ef5e:	6a 19       	ld.w	r9,r5[0x4]
8001ef60:	6a 28       	ld.w	r8,r5[0x8]
8001ef62:	ef 63 ff d0 	st.b	r7[-48],r3
8001ef66:	ef 6e ff cc 	st.b	r7[-52],lr
8001ef6a:	ef 5c ff c8 	st.h	r7[-56],r12
8001ef6e:	ef 6b ff c4 	st.b	r7[-60],r11
8001ef72:	ef 5a ff c0 	st.h	r7[-64],r10
8001ef76:	ef 69 ff bc 	st.b	r7[-68],r9
8001ef7a:	ef 68 ff b8 	st.b	r7[-72],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_LEN];
	_mav_put_float(buf, 0, param1);
8001ef7e:	ea c9 ff f4 	sub	r9,r5,-12
8001ef82:	ee c8 00 28 	sub	r8,r7,40
8001ef86:	12 9b       	mov	r11,r9
8001ef88:	10 9c       	mov	r12,r8
8001ef8a:	cd 3e       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 4, param2);
8001ef8c:	ea c9 ff f0 	sub	r9,r5,-16
8001ef90:	ee c8 00 28 	sub	r8,r7,40
8001ef94:	2f c8       	sub	r8,-4
8001ef96:	12 9b       	mov	r11,r9
8001ef98:	10 9c       	mov	r12,r8
8001ef9a:	cc be       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 8, param3);
8001ef9c:	ea c9 ff ec 	sub	r9,r5,-20
8001efa0:	ee c8 00 28 	sub	r8,r7,40
8001efa4:	2f 88       	sub	r8,-8
8001efa6:	12 9b       	mov	r11,r9
8001efa8:	10 9c       	mov	r12,r8
8001efaa:	cc 3e       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 12, param4);
8001efac:	ea c9 ff e8 	sub	r9,r5,-24
8001efb0:	ee c8 00 28 	sub	r8,r7,40
8001efb4:	2f 48       	sub	r8,-12
8001efb6:	12 9b       	mov	r11,r9
8001efb8:	10 9c       	mov	r12,r8
8001efba:	cb be       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 16, x);
8001efbc:	ea c9 ff e4 	sub	r9,r5,-28
8001efc0:	ee c8 00 28 	sub	r8,r7,40
8001efc4:	2f 08       	sub	r8,-16
8001efc6:	12 9b       	mov	r11,r9
8001efc8:	10 9c       	mov	r12,r8
8001efca:	cb 3e       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 20, y);
8001efcc:	ea c9 ff e0 	sub	r9,r5,-32
8001efd0:	ee c8 00 28 	sub	r8,r7,40
8001efd4:	2e c8       	sub	r8,-20
8001efd6:	12 9b       	mov	r11,r9
8001efd8:	10 9c       	mov	r12,r8
8001efda:	ca be       	rcall	8001ed30 <byte_swap_4>
	_mav_put_float(buf, 24, z);
8001efdc:	ea c9 ff dc 	sub	r9,r5,-36
8001efe0:	ee c8 00 28 	sub	r8,r7,40
8001efe4:	2e 88       	sub	r8,-24
8001efe6:	12 9b       	mov	r11,r9
8001efe8:	10 9c       	mov	r12,r8
8001efea:	ca 3e       	rcall	8001ed30 <byte_swap_4>
	_mav_put_uint16_t(buf, 28, seq);
8001efec:	ee c9 00 38 	sub	r9,r7,56
8001eff0:	ee c8 00 28 	sub	r8,r7,40
8001eff4:	2e 48       	sub	r8,-28
8001eff6:	12 9b       	mov	r11,r9
8001eff8:	10 9c       	mov	r12,r8
8001effa:	c8 1e       	rcall	8001ecfc <byte_swap_2>
	_mav_put_uint16_t(buf, 30, command);
8001effc:	ee c9 00 40 	sub	r9,r7,64
8001f000:	ee c8 00 28 	sub	r8,r7,40
8001f004:	2e 28       	sub	r8,-30
8001f006:	12 9b       	mov	r11,r9
8001f008:	10 9c       	mov	r12,r8
8001f00a:	c7 9e       	rcall	8001ecfc <byte_swap_2>
	_mav_put_uint8_t(buf, 32, target_system);
8001f00c:	ef 38 ff d0 	ld.ub	r8,r7[-48]
8001f010:	ef 68 ff f8 	st.b	r7[-8],r8
	_mav_put_uint8_t(buf, 33, target_component);
8001f014:	ef 38 ff cc 	ld.ub	r8,r7[-52]
8001f018:	ef 68 ff f9 	st.b	r7[-7],r8
	_mav_put_uint8_t(buf, 34, frame);
8001f01c:	ef 38 ff c4 	ld.ub	r8,r7[-60]
8001f020:	ef 68 ff fa 	st.b	r7[-6],r8
	_mav_put_uint8_t(buf, 35, current);
8001f024:	ef 38 ff bc 	ld.ub	r8,r7[-68]
8001f028:	ef 68 ff fb 	st.b	r7[-5],r8
	_mav_put_uint8_t(buf, 36, autocontinue);
8001f02c:	ef 38 ff b8 	ld.ub	r8,r7[-72]
8001f030:	ef 68 ff fc 	st.b	r7[-4],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, buf, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
8001f034:	ee ca 00 28 	sub	r10,r7,40
8001f038:	e0 68 00 fe 	mov	r8,254
8001f03c:	32 59       	mov	r9,37
8001f03e:	32 7b       	mov	r11,39
8001f040:	ee fc ff d4 	ld.w	r12,r7[-44]
8001f044:	fe b0 fd ae 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN, MAVLINK_MSG_ID_MISSION_ITEM_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
#endif
}
8001f048:	2e ed       	sub	sp,-72
8001f04a:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001f04e:	00 00       	add	r0,r0
8001f050:	80 01       	ld.sh	r1,r0[0x0]
8001f052:	ed ce eb cd 	stmts	lr,r0,r2-r3,r6-r9,r11,sp-pc

8001f054 <mavlink_msg_mission_item_get_target_system>:
 * @brief Get field target_system from mission_item message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_system(const mavlink_message_t* msg)
{
8001f054:	eb cd 40 80 	pushm	r7,lr
8001f058:	1a 97       	mov	r7,sp
8001f05a:	20 1d       	sub	sp,4
8001f05c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  32);
8001f060:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f064:	2f 88       	sub	r8,-8
8001f066:	2e 08       	sub	r8,-32
8001f068:	11 88       	ld.ub	r8,r8[0x0]
}
8001f06a:	10 9c       	mov	r12,r8
8001f06c:	2f fd       	sub	sp,-4
8001f06e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f072 <mavlink_msg_mission_item_get_target_component>:
 * @brief Get field target_component from mission_item message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_item_get_target_component(const mavlink_message_t* msg)
{
8001f072:	eb cd 40 80 	pushm	r7,lr
8001f076:	1a 97       	mov	r7,sp
8001f078:	20 1d       	sub	sp,4
8001f07a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  33);
8001f07e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f082:	2f 88       	sub	r8,-8
8001f084:	2d f8       	sub	r8,-33
8001f086:	11 88       	ld.ub	r8,r8[0x0]
}
8001f088:	10 9c       	mov	r12,r8
8001f08a:	2f fd       	sub	sp,-4
8001f08c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f090 <mavlink_msg_mission_item_get_seq>:
 * @brief Get field seq from mission_item message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_item_get_seq(const mavlink_message_t* msg)
{
8001f090:	eb cd 40 c0 	pushm	r6-r7,lr
8001f094:	1a 97       	mov	r7,sp
8001f096:	20 1d       	sub	sp,4
8001f098:	48 86       	lddpc	r6,8001f0b8 <mavlink_msg_mission_item_get_seq+0x28>
8001f09a:	1e 26       	rsub	r6,pc
8001f09c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  28);
8001f0a0:	31 cb       	mov	r11,28
8001f0a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f0a6:	c9 7e       	rcall	8001edd4 <_MAV_RETURN_uint16_t>
8001f0a8:	18 98       	mov	r8,r12
8001f0aa:	5c 88       	casts.h	r8
8001f0ac:	5c 88       	casts.h	r8
}
8001f0ae:	10 9c       	mov	r12,r8
8001f0b0:	2f fd       	sub	sp,-4
8001f0b2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f0b6:	00 00       	add	r0,r0
8001f0b8:	80 01       	ld.sh	r1,r0[0x0]
8001f0ba:	ef 1e eb cd 	ld.uh	lr,r7[-5171]

8001f0bc <mavlink_msg_mission_item_get_frame>:
 * @brief Get field frame from mission_item message
 *
 * @return The coordinate system of the MISSION. see MAV_FRAME in mavlink_types.h
 */
static inline uint8_t mavlink_msg_mission_item_get_frame(const mavlink_message_t* msg)
{
8001f0bc:	eb cd 40 80 	pushm	r7,lr
8001f0c0:	1a 97       	mov	r7,sp
8001f0c2:	20 1d       	sub	sp,4
8001f0c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  34);
8001f0c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f0cc:	2f 88       	sub	r8,-8
8001f0ce:	2d e8       	sub	r8,-34
8001f0d0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f0d2:	10 9c       	mov	r12,r8
8001f0d4:	2f fd       	sub	sp,-4
8001f0d6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f0da <mavlink_msg_mission_item_get_command>:
 * @brief Get field command from mission_item message
 *
 * @return The scheduled action for the MISSION. see MAV_CMD in common.xml MAVLink specs
 */
static inline uint16_t mavlink_msg_mission_item_get_command(const mavlink_message_t* msg)
{
8001f0da:	eb cd 40 c0 	pushm	r6-r7,lr
8001f0de:	1a 97       	mov	r7,sp
8001f0e0:	20 1d       	sub	sp,4
8001f0e2:	48 86       	lddpc	r6,8001f100 <mavlink_msg_mission_item_get_command+0x26>
8001f0e4:	1e 26       	rsub	r6,pc
8001f0e6:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  30);
8001f0ea:	31 eb       	mov	r11,30
8001f0ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f0f0:	c7 2e       	rcall	8001edd4 <_MAV_RETURN_uint16_t>
8001f0f2:	18 98       	mov	r8,r12
8001f0f4:	5c 88       	casts.h	r8
8001f0f6:	5c 88       	casts.h	r8
}
8001f0f8:	10 9c       	mov	r12,r8
8001f0fa:	2f fd       	sub	sp,-4
8001f0fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f100:	80 01       	ld.sh	r1,r0[0x0]
8001f102:	ef 68 eb cd 	st.b	r7[-5171],r8

8001f104 <mavlink_msg_mission_item_get_current>:
 * @brief Get field current from mission_item message
 *
 * @return false:0, true:1
 */
static inline uint8_t mavlink_msg_mission_item_get_current(const mavlink_message_t* msg)
{
8001f104:	eb cd 40 80 	pushm	r7,lr
8001f108:	1a 97       	mov	r7,sp
8001f10a:	20 1d       	sub	sp,4
8001f10c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  35);
8001f110:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f114:	2f 88       	sub	r8,-8
8001f116:	2d d8       	sub	r8,-35
8001f118:	11 88       	ld.ub	r8,r8[0x0]
}
8001f11a:	10 9c       	mov	r12,r8
8001f11c:	2f fd       	sub	sp,-4
8001f11e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f122 <mavlink_msg_mission_item_get_autocontinue>:
 * @brief Get field autocontinue from mission_item message
 *
 * @return autocontinue to next wp
 */
static inline uint8_t mavlink_msg_mission_item_get_autocontinue(const mavlink_message_t* msg)
{
8001f122:	eb cd 40 80 	pushm	r7,lr
8001f126:	1a 97       	mov	r7,sp
8001f128:	20 1d       	sub	sp,4
8001f12a:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  36);
8001f12e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f132:	2f 88       	sub	r8,-8
8001f134:	2d c8       	sub	r8,-36
8001f136:	11 88       	ld.ub	r8,r8[0x0]
}
8001f138:	10 9c       	mov	r12,r8
8001f13a:	2f fd       	sub	sp,-4
8001f13c:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f140 <mavlink_msg_mission_item_get_param1>:
 * @brief Get field param1 from mission_item message
 *
 * @return PARAM1 / For NAV command MISSIONs: Radius in which the MISSION is accepted as reached, in meters
 */
static inline float mavlink_msg_mission_item_get_param1(const mavlink_message_t* msg)
{
8001f140:	eb cd 40 c0 	pushm	r6-r7,lr
8001f144:	1a 97       	mov	r7,sp
8001f146:	20 1d       	sub	sp,4
8001f148:	48 76       	lddpc	r6,8001f164 <mavlink_msg_mission_item_get_param1+0x24>
8001f14a:	1e 26       	rsub	r6,pc
8001f14c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  0);
8001f150:	30 0b       	mov	r11,0
8001f152:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f156:	c7 fe       	rcall	8001ee54 <_MAV_RETURN_float>
8001f158:	18 98       	mov	r8,r12
}
8001f15a:	10 9c       	mov	r12,r8
8001f15c:	2f fd       	sub	sp,-4
8001f15e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f162:	00 00       	add	r0,r0
8001f164:	80 01       	ld.sh	r1,r0[0x0]
8001f166:	ef ce eb cd 	stmts	--lr,r0,r2-r3,r6-r9,r11,sp-pc

8001f168 <mavlink_msg_mission_item_get_param2>:
 * @brief Get field param2 from mission_item message
 *
 * @return PARAM2 / For NAV command MISSIONs: Time that the MAV should stay inside the PARAM1 radius before advancing, in milliseconds
 */
static inline float mavlink_msg_mission_item_get_param2(const mavlink_message_t* msg)
{
8001f168:	eb cd 40 c0 	pushm	r6-r7,lr
8001f16c:	1a 97       	mov	r7,sp
8001f16e:	20 1d       	sub	sp,4
8001f170:	48 76       	lddpc	r6,8001f18c <mavlink_msg_mission_item_get_param2+0x24>
8001f172:	1e 26       	rsub	r6,pc
8001f174:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  4);
8001f178:	30 4b       	mov	r11,4
8001f17a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f17e:	c6 be       	rcall	8001ee54 <_MAV_RETURN_float>
8001f180:	18 98       	mov	r8,r12
}
8001f182:	10 9c       	mov	r12,r8
8001f184:	2f fd       	sub	sp,-4
8001f186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f18a:	00 00       	add	r0,r0
8001f18c:	80 01       	ld.sh	r1,r0[0x0]
8001f18e:	ef f6 eb cd 	st.wqs	r7[0x734],r6

8001f190 <mavlink_msg_mission_item_get_param3>:
 * @brief Get field param3 from mission_item message
 *
 * @return PARAM3 / For LOITER command MISSIONs: Orbit to circle around the MISSION, in meters. If positive the orbit direction should be clockwise, if negative the orbit direction should be counter-clockwise.
 */
static inline float mavlink_msg_mission_item_get_param3(const mavlink_message_t* msg)
{
8001f190:	eb cd 40 c0 	pushm	r6-r7,lr
8001f194:	1a 97       	mov	r7,sp
8001f196:	20 1d       	sub	sp,4
8001f198:	48 76       	lddpc	r6,8001f1b4 <mavlink_msg_mission_item_get_param3+0x24>
8001f19a:	1e 26       	rsub	r6,pc
8001f19c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  8);
8001f1a0:	30 8b       	mov	r11,8
8001f1a2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1a6:	c5 7e       	rcall	8001ee54 <_MAV_RETURN_float>
8001f1a8:	18 98       	mov	r8,r12
}
8001f1aa:	10 9c       	mov	r12,r8
8001f1ac:	2f fd       	sub	sp,-4
8001f1ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1b2:	00 00       	add	r0,r0
8001f1b4:	80 01       	ld.sh	r1,r0[0x0]
8001f1b6:	f0 1e eb cd 	mcall	lr[-20684]

8001f1b8 <mavlink_msg_mission_item_get_param4>:
 * @brief Get field param4 from mission_item message
 *
 * @return PARAM4 / For NAV and LOITER command MISSIONs: Yaw orientation in degrees, [0..360] 0 = NORTH
 */
static inline float mavlink_msg_mission_item_get_param4(const mavlink_message_t* msg)
{
8001f1b8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1bc:	1a 97       	mov	r7,sp
8001f1be:	20 1d       	sub	sp,4
8001f1c0:	48 76       	lddpc	r6,8001f1dc <mavlink_msg_mission_item_get_param4+0x24>
8001f1c2:	1e 26       	rsub	r6,pc
8001f1c4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  12);
8001f1c8:	30 cb       	mov	r11,12
8001f1ca:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1ce:	c4 3e       	rcall	8001ee54 <_MAV_RETURN_float>
8001f1d0:	18 98       	mov	r8,r12
}
8001f1d2:	10 9c       	mov	r12,r8
8001f1d4:	2f fd       	sub	sp,-4
8001f1d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f1da:	00 00       	add	r0,r0
8001f1dc:	80 01       	ld.sh	r1,r0[0x0]
8001f1de:	f0 46 eb cd 	cp.w	r6,-988211

8001f1e0 <mavlink_msg_mission_item_get_x>:
 * @brief Get field x from mission_item message
 *
 * @return PARAM5 / local: x position, global: latitude
 */
static inline float mavlink_msg_mission_item_get_x(const mavlink_message_t* msg)
{
8001f1e0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f1e4:	1a 97       	mov	r7,sp
8001f1e6:	20 1d       	sub	sp,4
8001f1e8:	48 76       	lddpc	r6,8001f204 <mavlink_msg_mission_item_get_x+0x24>
8001f1ea:	1e 26       	rsub	r6,pc
8001f1ec:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  16);
8001f1f0:	31 0b       	mov	r11,16
8001f1f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f1f6:	c2 fe       	rcall	8001ee54 <_MAV_RETURN_float>
8001f1f8:	18 98       	mov	r8,r12
}
8001f1fa:	10 9c       	mov	r12,r8
8001f1fc:	2f fd       	sub	sp,-4
8001f1fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f202:	00 00       	add	r0,r0
8001f204:	80 01       	ld.sh	r1,r0[0x0]
8001f206:	f0 6e eb cd 	mov	lr,-988211

8001f208 <mavlink_msg_mission_item_get_y>:
 * @brief Get field y from mission_item message
 *
 * @return PARAM6 / y position: global: longitude
 */
static inline float mavlink_msg_mission_item_get_y(const mavlink_message_t* msg)
{
8001f208:	eb cd 40 c0 	pushm	r6-r7,lr
8001f20c:	1a 97       	mov	r7,sp
8001f20e:	20 1d       	sub	sp,4
8001f210:	48 76       	lddpc	r6,8001f22c <mavlink_msg_mission_item_get_y+0x24>
8001f212:	1e 26       	rsub	r6,pc
8001f214:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  20);
8001f218:	31 4b       	mov	r11,20
8001f21a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f21e:	c1 be       	rcall	8001ee54 <_MAV_RETURN_float>
8001f220:	18 98       	mov	r8,r12
}
8001f222:	10 9c       	mov	r12,r8
8001f224:	2f fd       	sub	sp,-4
8001f226:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f22a:	00 00       	add	r0,r0
8001f22c:	80 01       	ld.sh	r1,r0[0x0]
8001f22e:	f0 96 eb cd 	brmi	7fe5c9c8 <_estack+0x7fe4c9c8>

8001f230 <mavlink_msg_mission_item_get_z>:
 * @brief Get field z from mission_item message
 *
 * @return PARAM7 / z position: global: altitude
 */
static inline float mavlink_msg_mission_item_get_z(const mavlink_message_t* msg)
{
8001f230:	eb cd 40 c0 	pushm	r6-r7,lr
8001f234:	1a 97       	mov	r7,sp
8001f236:	20 1d       	sub	sp,4
8001f238:	48 76       	lddpc	r6,8001f254 <mavlink_msg_mission_item_get_z+0x24>
8001f23a:	1e 26       	rsub	r6,pc
8001f23c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_float(msg,  24);
8001f240:	31 8b       	mov	r11,24
8001f242:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f246:	c0 7e       	rcall	8001ee54 <_MAV_RETURN_float>
8001f248:	18 98       	mov	r8,r12
}
8001f24a:	10 9c       	mov	r12,r8
8001f24c:	2f fd       	sub	sp,-4
8001f24e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f252:	00 00       	add	r0,r0
8001f254:	80 01       	ld.sh	r1,r0[0x0]
8001f256:	f0 be       	*unknown*

8001f258 <mavlink_msg_mission_item_decode>:
 *
 * @param msg The message to decode
 * @param mission_item C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_item_decode(const mavlink_message_t* msg, mavlink_mission_item_t* mission_item)
{
8001f258:	eb cd 40 c0 	pushm	r6-r7,lr
8001f25c:	1a 97       	mov	r7,sp
8001f25e:	20 2d       	sub	sp,8
8001f260:	4b a6       	lddpc	r6,8001f348 <mavlink_msg_mission_item_decode+0xf0>
8001f262:	1e 26       	rsub	r6,pc
8001f264:	ef 4c ff fc 	st.w	r7[-4],r12
8001f268:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_item->param1 = mavlink_msg_mission_item_get_param1(msg);
8001f26c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f270:	c6 8f       	rcall	8001f140 <mavlink_msg_mission_item_get_param1>
8001f272:	18 99       	mov	r9,r12
8001f274:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f278:	91 09       	st.w	r8[0x0],r9
	mission_item->param2 = mavlink_msg_mission_item_get_param2(msg);
8001f27a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f27e:	c7 5f       	rcall	8001f168 <mavlink_msg_mission_item_get_param2>
8001f280:	18 99       	mov	r9,r12
8001f282:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f286:	91 19       	st.w	r8[0x4],r9
	mission_item->param3 = mavlink_msg_mission_item_get_param3(msg);
8001f288:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f28c:	c8 2f       	rcall	8001f190 <mavlink_msg_mission_item_get_param3>
8001f28e:	18 99       	mov	r9,r12
8001f290:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f294:	91 29       	st.w	r8[0x8],r9
	mission_item->param4 = mavlink_msg_mission_item_get_param4(msg);
8001f296:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f29a:	c8 ff       	rcall	8001f1b8 <mavlink_msg_mission_item_get_param4>
8001f29c:	18 99       	mov	r9,r12
8001f29e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2a2:	91 39       	st.w	r8[0xc],r9
	mission_item->x = mavlink_msg_mission_item_get_x(msg);
8001f2a4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2a8:	c9 cf       	rcall	8001f1e0 <mavlink_msg_mission_item_get_x>
8001f2aa:	18 99       	mov	r9,r12
8001f2ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2b0:	91 49       	st.w	r8[0x10],r9
	mission_item->y = mavlink_msg_mission_item_get_y(msg);
8001f2b2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2b6:	ca 9f       	rcall	8001f208 <mavlink_msg_mission_item_get_y>
8001f2b8:	18 99       	mov	r9,r12
8001f2ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2be:	91 59       	st.w	r8[0x14],r9
	mission_item->z = mavlink_msg_mission_item_get_z(msg);
8001f2c0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2c4:	cb 6f       	rcall	8001f230 <mavlink_msg_mission_item_get_z>
8001f2c6:	18 99       	mov	r9,r12
8001f2c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f2cc:	91 69       	st.w	r8[0x18],r9
	mission_item->seq = mavlink_msg_mission_item_get_seq(msg);
8001f2ce:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2d2:	cd fe       	rcall	8001f090 <mavlink_msg_mission_item_get_seq>
8001f2d4:	18 98       	mov	r8,r12
8001f2d6:	5c 88       	casts.h	r8
8001f2d8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f2dc:	f3 58 00 1c 	st.h	r9[28],r8
	mission_item->command = mavlink_msg_mission_item_get_command(msg);
8001f2e0:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2e4:	cf be       	rcall	8001f0da <mavlink_msg_mission_item_get_command>
8001f2e6:	18 98       	mov	r8,r12
8001f2e8:	5c 88       	casts.h	r8
8001f2ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f2ee:	f3 58 00 1e 	st.h	r9[30],r8
	mission_item->target_system = mavlink_msg_mission_item_get_target_system(msg);
8001f2f2:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f2f6:	ca fe       	rcall	8001f054 <mavlink_msg_mission_item_get_target_system>
8001f2f8:	18 98       	mov	r8,r12
8001f2fa:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f2fe:	f3 68 00 20 	st.b	r9[32],r8
	mission_item->target_component = mavlink_msg_mission_item_get_target_component(msg);
8001f302:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f306:	cb 6e       	rcall	8001f072 <mavlink_msg_mission_item_get_target_component>
8001f308:	18 98       	mov	r8,r12
8001f30a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f30e:	f3 68 00 21 	st.b	r9[33],r8
	mission_item->frame = mavlink_msg_mission_item_get_frame(msg);
8001f312:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f316:	cd 3e       	rcall	8001f0bc <mavlink_msg_mission_item_get_frame>
8001f318:	18 98       	mov	r8,r12
8001f31a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f31e:	f3 68 00 22 	st.b	r9[34],r8
	mission_item->current = mavlink_msg_mission_item_get_current(msg);
8001f322:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f326:	ce fe       	rcall	8001f104 <mavlink_msg_mission_item_get_current>
8001f328:	18 98       	mov	r8,r12
8001f32a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f32e:	f3 68 00 23 	st.b	r9[35],r8
	mission_item->autocontinue = mavlink_msg_mission_item_get_autocontinue(msg);
8001f332:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f336:	cf 6e       	rcall	8001f122 <mavlink_msg_mission_item_get_autocontinue>
8001f338:	18 98       	mov	r8,r12
8001f33a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f33e:	f3 68 00 24 	st.b	r9[36],r8
#else
	memcpy(mission_item, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ITEM_LEN);
#endif
}
8001f342:	2f ed       	sub	sp,-8
8001f344:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f348:	80 01       	ld.sh	r1,r0[0x0]
8001f34a:	f0 e6 eb cd 	ld.d	r6,r8[-5171]

8001f34c <mavlink_msg_mission_request_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_request_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq)
{
8001f34c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f350:	1a 97       	mov	r7,sp
8001f352:	20 5d       	sub	sp,20
8001f354:	49 56       	lddpc	r6,8001f3a8 <mavlink_msg_mission_request_send+0x5c>
8001f356:	1e 26       	rsub	r6,pc
8001f358:	ef 4c ff f8 	st.w	r7[-8],r12
8001f35c:	12 98       	mov	r8,r9
8001f35e:	16 99       	mov	r9,r11
8001f360:	ef 69 ff f4 	st.b	r7[-12],r9
8001f364:	14 99       	mov	r9,r10
8001f366:	ef 69 ff f0 	st.b	r7[-16],r9
8001f36a:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_REQUEST_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f36e:	ee c9 00 14 	sub	r9,r7,20
8001f372:	ee c8 00 04 	sub	r8,r7,4
8001f376:	12 9b       	mov	r11,r9
8001f378:	10 9c       	mov	r12,r8
8001f37a:	fe b0 fc c1 	rcall	8001ecfc <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f37e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f382:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f386:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f38a:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, buf, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
8001f38e:	ee ca 00 04 	sub	r10,r7,4
8001f392:	e0 68 00 e6 	mov	r8,230
8001f396:	30 49       	mov	r9,4
8001f398:	32 8b       	mov	r11,40
8001f39a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f39e:	fe b0 fc 01 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN, MAVLINK_MSG_ID_MISSION_REQUEST_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_REQUEST, (const char *)&packet, MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
#endif
}
8001f3a2:	2f bd       	sub	sp,-20
8001f3a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f3a8:	80 01       	ld.sh	r1,r0[0x0]
8001f3aa:	f1 da       	*unknown*

8001f3ac <mavlink_msg_mission_request_get_target_system>:
 * @brief Get field target_system from mission_request message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_system(const mavlink_message_t* msg)
{
8001f3ac:	eb cd 40 80 	pushm	r7,lr
8001f3b0:	1a 97       	mov	r7,sp
8001f3b2:	20 1d       	sub	sp,4
8001f3b4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f3b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f3bc:	2f 88       	sub	r8,-8
8001f3be:	2f e8       	sub	r8,-2
8001f3c0:	11 88       	ld.ub	r8,r8[0x0]
}
8001f3c2:	10 9c       	mov	r12,r8
8001f3c4:	2f fd       	sub	sp,-4
8001f3c6:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f3ca <mavlink_msg_mission_request_get_target_component>:
 * @brief Get field target_component from mission_request message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_get_target_component(const mavlink_message_t* msg)
{
8001f3ca:	eb cd 40 80 	pushm	r7,lr
8001f3ce:	1a 97       	mov	r7,sp
8001f3d0:	20 1d       	sub	sp,4
8001f3d2:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f3d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f3da:	2f 88       	sub	r8,-8
8001f3dc:	2f d8       	sub	r8,-3
8001f3de:	11 88       	ld.ub	r8,r8[0x0]
}
8001f3e0:	10 9c       	mov	r12,r8
8001f3e2:	2f fd       	sub	sp,-4
8001f3e4:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f3e8 <mavlink_msg_mission_request_get_seq>:
 * @brief Get field seq from mission_request message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_request_get_seq(const mavlink_message_t* msg)
{
8001f3e8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f3ec:	1a 97       	mov	r7,sp
8001f3ee:	20 1d       	sub	sp,4
8001f3f0:	48 86       	lddpc	r6,8001f410 <mavlink_msg_mission_request_get_seq+0x28>
8001f3f2:	1e 26       	rsub	r6,pc
8001f3f4:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f3f8:	30 0b       	mov	r11,0
8001f3fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f3fe:	fe b0 fc eb 	rcall	8001edd4 <_MAV_RETURN_uint16_t>
8001f402:	18 98       	mov	r8,r12
8001f404:	5c 88       	casts.h	r8
8001f406:	5c 88       	casts.h	r8
}
8001f408:	10 9c       	mov	r12,r8
8001f40a:	2f fd       	sub	sp,-4
8001f40c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f410:	80 01       	ld.sh	r1,r0[0x0]
8001f412:	f2 76 eb cd 	mov	r6,-791603

8001f414 <mavlink_msg_mission_request_decode>:
 *
 * @param msg The message to decode
 * @param mission_request C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_decode(const mavlink_message_t* msg, mavlink_mission_request_t* mission_request)
{
8001f414:	eb cd 40 c0 	pushm	r6-r7,lr
8001f418:	1a 97       	mov	r7,sp
8001f41a:	20 2d       	sub	sp,8
8001f41c:	49 06       	lddpc	r6,8001f45c <mavlink_msg_mission_request_decode+0x48>
8001f41e:	1e 26       	rsub	r6,pc
8001f420:	ef 4c ff fc 	st.w	r7[-4],r12
8001f424:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request->seq = mavlink_msg_mission_request_get_seq(msg);
8001f428:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f42c:	cd ef       	rcall	8001f3e8 <mavlink_msg_mission_request_get_seq>
8001f42e:	18 98       	mov	r8,r12
8001f430:	5c 88       	casts.h	r8
8001f432:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f436:	b2 08       	st.h	r9[0x0],r8
	mission_request->target_system = mavlink_msg_mission_request_get_target_system(msg);
8001f438:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f43c:	cb 8f       	rcall	8001f3ac <mavlink_msg_mission_request_get_target_system>
8001f43e:	18 98       	mov	r8,r12
8001f440:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f444:	b2 a8       	st.b	r9[0x2],r8
	mission_request->target_component = mavlink_msg_mission_request_get_target_component(msg);
8001f446:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f44a:	cc 0f       	rcall	8001f3ca <mavlink_msg_mission_request_get_target_component>
8001f44c:	18 98       	mov	r8,r12
8001f44e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f452:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_request, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LEN);
#endif
}
8001f454:	2f ed       	sub	sp,-8
8001f456:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f45a:	00 00       	add	r0,r0
8001f45c:	80 01       	ld.sh	r1,r0[0x0]
8001f45e:	f2 a2       	*unknown*

8001f460 <mavlink_msg_mission_set_current_get_target_system>:
 * @brief Get field target_system from mission_set_current message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_system(const mavlink_message_t* msg)
{
8001f460:	eb cd 40 80 	pushm	r7,lr
8001f464:	1a 97       	mov	r7,sp
8001f466:	20 1d       	sub	sp,4
8001f468:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f46c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f470:	2f 88       	sub	r8,-8
8001f472:	2f e8       	sub	r8,-2
8001f474:	11 88       	ld.ub	r8,r8[0x0]
}
8001f476:	10 9c       	mov	r12,r8
8001f478:	2f fd       	sub	sp,-4
8001f47a:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f47e <mavlink_msg_mission_set_current_get_target_component>:
 * @brief Get field target_component from mission_set_current message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_set_current_get_target_component(const mavlink_message_t* msg)
{
8001f47e:	eb cd 40 80 	pushm	r7,lr
8001f482:	1a 97       	mov	r7,sp
8001f484:	20 1d       	sub	sp,4
8001f486:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f48a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f48e:	2f 88       	sub	r8,-8
8001f490:	2f d8       	sub	r8,-3
8001f492:	11 88       	ld.ub	r8,r8[0x0]
}
8001f494:	10 9c       	mov	r12,r8
8001f496:	2f fd       	sub	sp,-4
8001f498:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f49c <mavlink_msg_mission_set_current_get_seq>:
 * @brief Get field seq from mission_set_current message
 *
 * @return Sequence
 */
static inline uint16_t mavlink_msg_mission_set_current_get_seq(const mavlink_message_t* msg)
{
8001f49c:	eb cd 40 c0 	pushm	r6-r7,lr
8001f4a0:	1a 97       	mov	r7,sp
8001f4a2:	20 1d       	sub	sp,4
8001f4a4:	48 86       	lddpc	r6,8001f4c4 <mavlink_msg_mission_set_current_get_seq+0x28>
8001f4a6:	1e 26       	rsub	r6,pc
8001f4a8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f4ac:	30 0b       	mov	r11,0
8001f4ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4b2:	fe b0 fc 91 	rcall	8001edd4 <_MAV_RETURN_uint16_t>
8001f4b6:	18 98       	mov	r8,r12
8001f4b8:	5c 88       	casts.h	r8
8001f4ba:	5c 88       	casts.h	r8
}
8001f4bc:	10 9c       	mov	r12,r8
8001f4be:	2f fd       	sub	sp,-4
8001f4c0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f4c4:	80 01       	ld.sh	r1,r0[0x0]
8001f4c6:	f3 2a eb cd 	ld.sb	r10,r9[-5171]

8001f4c8 <mavlink_msg_mission_set_current_decode>:
 *
 * @param msg The message to decode
 * @param mission_set_current C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_set_current_decode(const mavlink_message_t* msg, mavlink_mission_set_current_t* mission_set_current)
{
8001f4c8:	eb cd 40 c0 	pushm	r6-r7,lr
8001f4cc:	1a 97       	mov	r7,sp
8001f4ce:	20 2d       	sub	sp,8
8001f4d0:	49 06       	lddpc	r6,8001f510 <mavlink_msg_mission_set_current_decode+0x48>
8001f4d2:	1e 26       	rsub	r6,pc
8001f4d4:	ef 4c ff fc 	st.w	r7[-4],r12
8001f4d8:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_set_current->seq = mavlink_msg_mission_set_current_get_seq(msg);
8001f4dc:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4e0:	cd ef       	rcall	8001f49c <mavlink_msg_mission_set_current_get_seq>
8001f4e2:	18 98       	mov	r8,r12
8001f4e4:	5c 88       	casts.h	r8
8001f4e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f4ea:	b2 08       	st.h	r9[0x0],r8
	mission_set_current->target_system = mavlink_msg_mission_set_current_get_target_system(msg);
8001f4ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4f0:	cb 8f       	rcall	8001f460 <mavlink_msg_mission_set_current_get_target_system>
8001f4f2:	18 98       	mov	r8,r12
8001f4f4:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f4f8:	b2 a8       	st.b	r9[0x2],r8
	mission_set_current->target_component = mavlink_msg_mission_set_current_get_target_component(msg);
8001f4fa:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f4fe:	cc 0f       	rcall	8001f47e <mavlink_msg_mission_set_current_get_target_component>
8001f500:	18 98       	mov	r8,r12
8001f502:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f506:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_set_current, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_SET_CURRENT_LEN);
#endif
}
8001f508:	2f ed       	sub	sp,-8
8001f50a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f50e:	00 00       	add	r0,r0
8001f510:	80 01       	ld.sh	r1,r0[0x0]
8001f512:	f3 56 eb cd 	st.h	r9[-5171],r6

8001f514 <mavlink_msg_mission_current_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_current_send(mavlink_channel_t chan, uint16_t seq)
{
8001f514:	eb cd 40 c0 	pushm	r6-r7,lr
8001f518:	1a 97       	mov	r7,sp
8001f51a:	20 3d       	sub	sp,12
8001f51c:	48 e6       	lddpc	r6,8001f554 <mavlink_msg_mission_current_send+0x40>
8001f51e:	1e 26       	rsub	r6,pc
8001f520:	ef 4c ff f8 	st.w	r7[-8],r12
8001f524:	16 98       	mov	r8,r11
8001f526:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_CURRENT_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f52a:	ee c9 00 0c 	sub	r9,r7,12
8001f52e:	ee c8 00 04 	sub	r8,r7,4
8001f532:	12 9b       	mov	r11,r9
8001f534:	10 9c       	mov	r12,r8
8001f536:	fe b0 fb e3 	rcall	8001ecfc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, buf, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
8001f53a:	ee ca 00 04 	sub	r10,r7,4
8001f53e:	31 c8       	mov	r8,28
8001f540:	30 29       	mov	r9,2
8001f542:	32 ab       	mov	r11,42
8001f544:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f548:	fe b0 fb 2c 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN, MAVLINK_MSG_ID_MISSION_CURRENT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_CURRENT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_CURRENT_LEN);
#endif
#endif
}
8001f54c:	2f dd       	sub	sp,-12
8001f54e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f552:	00 00       	add	r0,r0
8001f554:	80 01       	ld.sh	r1,r0[0x0]
8001f556:	f3 a2       	*unknown*

8001f558 <mavlink_msg_mission_request_list_get_target_system>:
 * @brief Get field target_system from mission_request_list message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_system(const mavlink_message_t* msg)
{
8001f558:	eb cd 40 80 	pushm	r7,lr
8001f55c:	1a 97       	mov	r7,sp
8001f55e:	20 1d       	sub	sp,4
8001f560:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f564:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f568:	2f 88       	sub	r8,-8
8001f56a:	11 88       	ld.ub	r8,r8[0x0]
}
8001f56c:	10 9c       	mov	r12,r8
8001f56e:	2f fd       	sub	sp,-4
8001f570:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f574 <mavlink_msg_mission_request_list_get_target_component>:
 * @brief Get field target_component from mission_request_list message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_request_list_get_target_component(const mavlink_message_t* msg)
{
8001f574:	eb cd 40 80 	pushm	r7,lr
8001f578:	1a 97       	mov	r7,sp
8001f57a:	20 1d       	sub	sp,4
8001f57c:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f580:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f584:	2f 88       	sub	r8,-8
8001f586:	2f f8       	sub	r8,-1
8001f588:	11 88       	ld.ub	r8,r8[0x0]
}
8001f58a:	10 9c       	mov	r12,r8
8001f58c:	2f fd       	sub	sp,-4
8001f58e:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f592 <mavlink_msg_mission_request_list_decode>:
 *
 * @param msg The message to decode
 * @param mission_request_list C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_request_list_decode(const mavlink_message_t* msg, mavlink_mission_request_list_t* mission_request_list)
{
8001f592:	eb cd 40 c0 	pushm	r6-r7,lr
8001f596:	1a 97       	mov	r7,sp
8001f598:	20 2d       	sub	sp,8
8001f59a:	48 c6       	lddpc	r6,8001f5c8 <mavlink_msg_mission_request_list_decode+0x36>
8001f59c:	1e 26       	rsub	r6,pc
8001f59e:	ef 4c ff fc 	st.w	r7[-4],r12
8001f5a2:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_request_list->target_system = mavlink_msg_mission_request_list_get_target_system(msg);
8001f5a6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f5aa:	cd 7f       	rcall	8001f558 <mavlink_msg_mission_request_list_get_target_system>
8001f5ac:	18 98       	mov	r8,r12
8001f5ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f5b2:	b2 88       	st.b	r9[0x0],r8
	mission_request_list->target_component = mavlink_msg_mission_request_list_get_target_component(msg);
8001f5b4:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f5b8:	cd ef       	rcall	8001f574 <mavlink_msg_mission_request_list_get_target_component>
8001f5ba:	18 98       	mov	r8,r12
8001f5bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f5c0:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_request_list, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_REQUEST_LIST_LEN);
#endif
}
8001f5c2:	2f ed       	sub	sp,-8
8001f5c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f5c8:	80 01       	ld.sh	r1,r0[0x0]
8001f5ca:	f4 20 eb cd 	sub	r0,-726067

8001f5cc <mavlink_msg_mission_count_send>:
 * @param count Number of mission items in the sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_count_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t count)
{
8001f5cc:	eb cd 40 c0 	pushm	r6-r7,lr
8001f5d0:	1a 97       	mov	r7,sp
8001f5d2:	20 5d       	sub	sp,20
8001f5d4:	49 56       	lddpc	r6,8001f628 <mavlink_msg_mission_count_send+0x5c>
8001f5d6:	1e 26       	rsub	r6,pc
8001f5d8:	ef 4c ff f8 	st.w	r7[-8],r12
8001f5dc:	12 98       	mov	r8,r9
8001f5de:	16 99       	mov	r9,r11
8001f5e0:	ef 69 ff f4 	st.b	r7[-12],r9
8001f5e4:	14 99       	mov	r9,r10
8001f5e6:	ef 69 ff f0 	st.b	r7[-16],r9
8001f5ea:	ef 58 ff ec 	st.h	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_COUNT_LEN];
	_mav_put_uint16_t(buf, 0, count);
8001f5ee:	ee c9 00 14 	sub	r9,r7,20
8001f5f2:	ee c8 00 04 	sub	r8,r7,4
8001f5f6:	12 9b       	mov	r11,r9
8001f5f8:	10 9c       	mov	r12,r8
8001f5fa:	fe b0 fb 81 	rcall	8001ecfc <byte_swap_2>
	_mav_put_uint8_t(buf, 2, target_system);
8001f5fe:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f602:	ef 68 ff fe 	st.b	r7[-2],r8
	_mav_put_uint8_t(buf, 3, target_component);
8001f606:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f60a:	ef 68 ff ff 	st.b	r7[-1],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, buf, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
8001f60e:	ee ca 00 04 	sub	r10,r7,4
8001f612:	e0 68 00 dd 	mov	r8,221
8001f616:	30 49       	mov	r9,4
8001f618:	32 cb       	mov	r11,44
8001f61a:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f61e:	fe b0 fa c1 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN, MAVLINK_MSG_ID_MISSION_COUNT_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_COUNT, (const char *)&packet, MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
#endif
}
8001f622:	2f bd       	sub	sp,-20
8001f624:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f628:	80 01       	ld.sh	r1,r0[0x0]
8001f62a:	f4 5a eb cd 	cp.w	r10,-660531

8001f62c <mavlink_msg_mission_count_get_target_system>:
 * @brief Get field target_system from mission_count message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_system(const mavlink_message_t* msg)
{
8001f62c:	eb cd 40 80 	pushm	r7,lr
8001f630:	1a 97       	mov	r7,sp
8001f632:	20 1d       	sub	sp,4
8001f634:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f638:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f63c:	2f 88       	sub	r8,-8
8001f63e:	2f e8       	sub	r8,-2
8001f640:	11 88       	ld.ub	r8,r8[0x0]
}
8001f642:	10 9c       	mov	r12,r8
8001f644:	2f fd       	sub	sp,-4
8001f646:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f64a <mavlink_msg_mission_count_get_target_component>:
 * @brief Get field target_component from mission_count message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_count_get_target_component(const mavlink_message_t* msg)
{
8001f64a:	eb cd 40 80 	pushm	r7,lr
8001f64e:	1a 97       	mov	r7,sp
8001f650:	20 1d       	sub	sp,4
8001f652:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  3);
8001f656:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f65a:	2f 88       	sub	r8,-8
8001f65c:	2f d8       	sub	r8,-3
8001f65e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f660:	10 9c       	mov	r12,r8
8001f662:	2f fd       	sub	sp,-4
8001f664:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f668 <mavlink_msg_mission_count_get_count>:
 * @brief Get field count from mission_count message
 *
 * @return Number of mission items in the sequence
 */
static inline uint16_t mavlink_msg_mission_count_get_count(const mavlink_message_t* msg)
{
8001f668:	eb cd 40 c0 	pushm	r6-r7,lr
8001f66c:	1a 97       	mov	r7,sp
8001f66e:	20 1d       	sub	sp,4
8001f670:	48 86       	lddpc	r6,8001f690 <mavlink_msg_mission_count_get_count+0x28>
8001f672:	1e 26       	rsub	r6,pc
8001f674:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint16_t(msg,  0);
8001f678:	30 0b       	mov	r11,0
8001f67a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f67e:	fe b0 fb ab 	rcall	8001edd4 <_MAV_RETURN_uint16_t>
8001f682:	18 98       	mov	r8,r12
8001f684:	5c 88       	casts.h	r8
8001f686:	5c 88       	casts.h	r8
}
8001f688:	10 9c       	mov	r12,r8
8001f68a:	2f fd       	sub	sp,-4
8001f68c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f690:	80 01       	ld.sh	r1,r0[0x0]
8001f692:	f4 f6 eb cd 	ld.w	r6,r10[-5171]

8001f694 <mavlink_msg_mission_count_decode>:
 *
 * @param msg The message to decode
 * @param mission_count C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_count_decode(const mavlink_message_t* msg, mavlink_mission_count_t* mission_count)
{
8001f694:	eb cd 40 c0 	pushm	r6-r7,lr
8001f698:	1a 97       	mov	r7,sp
8001f69a:	20 2d       	sub	sp,8
8001f69c:	49 06       	lddpc	r6,8001f6dc <mavlink_msg_mission_count_decode+0x48>
8001f69e:	1e 26       	rsub	r6,pc
8001f6a0:	ef 4c ff fc 	st.w	r7[-4],r12
8001f6a4:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_count->count = mavlink_msg_mission_count_get_count(msg);
8001f6a8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6ac:	cd ef       	rcall	8001f668 <mavlink_msg_mission_count_get_count>
8001f6ae:	18 98       	mov	r8,r12
8001f6b0:	5c 88       	casts.h	r8
8001f6b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6b6:	b2 08       	st.h	r9[0x0],r8
	mission_count->target_system = mavlink_msg_mission_count_get_target_system(msg);
8001f6b8:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6bc:	cb 8f       	rcall	8001f62c <mavlink_msg_mission_count_get_target_system>
8001f6be:	18 98       	mov	r8,r12
8001f6c0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6c4:	b2 a8       	st.b	r9[0x2],r8
	mission_count->target_component = mavlink_msg_mission_count_get_target_component(msg);
8001f6c6:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f6ca:	cc 0f       	rcall	8001f64a <mavlink_msg_mission_count_get_target_component>
8001f6cc:	18 98       	mov	r8,r12
8001f6ce:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f6d2:	b2 b8       	st.b	r9[0x3],r8
#else
	memcpy(mission_count, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_COUNT_LEN);
#endif
}
8001f6d4:	2f ed       	sub	sp,-8
8001f6d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f6da:	00 00       	add	r0,r0
8001f6dc:	80 01       	ld.sh	r1,r0[0x0]
8001f6de:	f5 22 eb cd 	ld.sb	r2,r10[-5171]

8001f6e0 <mavlink_msg_mission_clear_all_get_target_system>:
 * @brief Get field target_system from mission_clear_all message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_system(const mavlink_message_t* msg)
{
8001f6e0:	eb cd 40 80 	pushm	r7,lr
8001f6e4:	1a 97       	mov	r7,sp
8001f6e6:	20 1d       	sub	sp,4
8001f6e8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f6ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f6f0:	2f 88       	sub	r8,-8
8001f6f2:	11 88       	ld.ub	r8,r8[0x0]
}
8001f6f4:	10 9c       	mov	r12,r8
8001f6f6:	2f fd       	sub	sp,-4
8001f6f8:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f6fc <mavlink_msg_mission_clear_all_get_target_component>:
 * @brief Get field target_component from mission_clear_all message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_clear_all_get_target_component(const mavlink_message_t* msg)
{
8001f6fc:	eb cd 40 80 	pushm	r7,lr
8001f700:	1a 97       	mov	r7,sp
8001f702:	20 1d       	sub	sp,4
8001f704:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f708:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f70c:	2f 88       	sub	r8,-8
8001f70e:	2f f8       	sub	r8,-1
8001f710:	11 88       	ld.ub	r8,r8[0x0]
}
8001f712:	10 9c       	mov	r12,r8
8001f714:	2f fd       	sub	sp,-4
8001f716:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f71a <mavlink_msg_mission_clear_all_decode>:
 *
 * @param msg The message to decode
 * @param mission_clear_all C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_clear_all_decode(const mavlink_message_t* msg, mavlink_mission_clear_all_t* mission_clear_all)
{
8001f71a:	eb cd 40 c0 	pushm	r6-r7,lr
8001f71e:	1a 97       	mov	r7,sp
8001f720:	20 2d       	sub	sp,8
8001f722:	48 c6       	lddpc	r6,8001f750 <mavlink_msg_mission_clear_all_decode+0x36>
8001f724:	1e 26       	rsub	r6,pc
8001f726:	ef 4c ff fc 	st.w	r7[-4],r12
8001f72a:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_clear_all->target_system = mavlink_msg_mission_clear_all_get_target_system(msg);
8001f72e:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f732:	cd 7f       	rcall	8001f6e0 <mavlink_msg_mission_clear_all_get_target_system>
8001f734:	18 98       	mov	r8,r12
8001f736:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f73a:	b2 88       	st.b	r9[0x0],r8
	mission_clear_all->target_component = mavlink_msg_mission_clear_all_get_target_component(msg);
8001f73c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f740:	cd ef       	rcall	8001f6fc <mavlink_msg_mission_clear_all_get_target_component>
8001f742:	18 98       	mov	r8,r12
8001f744:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f748:	b2 98       	st.b	r9[0x1],r8
#else
	memcpy(mission_clear_all, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_CLEAR_ALL_LEN);
#endif
}
8001f74a:	2f ed       	sub	sp,-8
8001f74c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f750:	80 01       	ld.sh	r1,r0[0x0]
8001f752:	f5 a8 eb cd 	stc0.w	r8[0x3b34],cr11

8001f754 <mavlink_msg_mission_item_reached_send>:
 * @param seq Sequence
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_item_reached_send(mavlink_channel_t chan, uint16_t seq)
{
8001f754:	eb cd 40 c0 	pushm	r6-r7,lr
8001f758:	1a 97       	mov	r7,sp
8001f75a:	20 3d       	sub	sp,12
8001f75c:	48 e6       	lddpc	r6,8001f794 <mavlink_msg_mission_item_reached_send+0x40>
8001f75e:	1e 26       	rsub	r6,pc
8001f760:	ef 4c ff f8 	st.w	r7[-8],r12
8001f764:	16 98       	mov	r8,r11
8001f766:	ef 58 ff f4 	st.h	r7[-12],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN];
	_mav_put_uint16_t(buf, 0, seq);
8001f76a:	ee c9 00 0c 	sub	r9,r7,12
8001f76e:	ee c8 00 04 	sub	r8,r7,4
8001f772:	12 9b       	mov	r11,r9
8001f774:	10 9c       	mov	r12,r8
8001f776:	fe b0 fa c3 	rcall	8001ecfc <byte_swap_2>

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, buf, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
8001f77a:	ee ca 00 04 	sub	r10,r7,4
8001f77e:	30 b8       	mov	r8,11
8001f780:	30 29       	mov	r9,2
8001f782:	32 eb       	mov	r11,46
8001f784:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f788:	fe b0 fa 0c 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ITEM_REACHED, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ITEM_REACHED_LEN);
#endif
#endif
}
8001f78c:	2f dd       	sub	sp,-12
8001f78e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f792:	00 00       	add	r0,r0
8001f794:	80 01       	ld.sh	r1,r0[0x0]
8001f796:	f5 e2 eb cd 	sthh.w	sp[0x2f0],r10:t,r2:b

8001f798 <mavlink_msg_mission_ack_send>:
 * @param type See MAV_MISSION_RESULT enum
 */
#ifdef MAVLINK_USE_CONVENIENCE_FUNCTIONS

static inline void mavlink_msg_mission_ack_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint8_t type)
{
8001f798:	eb cd 40 c0 	pushm	r6-r7,lr
8001f79c:	1a 97       	mov	r7,sp
8001f79e:	20 5d       	sub	sp,20
8001f7a0:	49 36       	lddpc	r6,8001f7ec <mavlink_msg_mission_ack_send+0x54>
8001f7a2:	1e 26       	rsub	r6,pc
8001f7a4:	ef 4c ff f8 	st.w	r7[-8],r12
8001f7a8:	12 98       	mov	r8,r9
8001f7aa:	16 99       	mov	r9,r11
8001f7ac:	ef 69 ff f4 	st.b	r7[-12],r9
8001f7b0:	14 99       	mov	r9,r10
8001f7b2:	ef 69 ff f0 	st.b	r7[-16],r9
8001f7b6:	ef 68 ff ec 	st.b	r7[-20],r8
#if MAVLINK_NEED_BYTE_SWAP || !MAVLINK_ALIGNED_FIELDS
	char buf[MAVLINK_MSG_ID_MISSION_ACK_LEN];
	_mav_put_uint8_t(buf, 0, target_system);
8001f7ba:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8001f7be:	ef 68 ff fc 	st.b	r7[-4],r8
	_mav_put_uint8_t(buf, 1, target_component);
8001f7c2:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8001f7c6:	ef 68 ff fd 	st.b	r7[-3],r8
	_mav_put_uint8_t(buf, 2, type);
8001f7ca:	ef 38 ff ec 	ld.ub	r8,r7[-20]
8001f7ce:	ef 68 ff fe 	st.b	r7[-2],r8

#if MAVLINK_CRC_EXTRA
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, buf, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
8001f7d2:	ee ca 00 04 	sub	r10,r7,4
8001f7d6:	e0 68 00 99 	mov	r8,153
8001f7da:	30 39       	mov	r9,3
8001f7dc:	32 fb       	mov	r11,47
8001f7de:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f7e2:	fe b0 f9 df 	rcall	8001eba0 <_mav_finalize_message_chan_send>
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN, MAVLINK_MSG_ID_MISSION_ACK_CRC);
#else
    _mav_finalize_message_chan_send(chan, MAVLINK_MSG_ID_MISSION_ACK, (const char *)&packet, MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
#endif
}
8001f7e6:	2f bd       	sub	sp,-20
8001f7e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f7ec:	80 01       	ld.sh	r1,r0[0x0]
8001f7ee:	f6 26 eb cd 	sub	r6,-594995

8001f7f0 <mavlink_msg_mission_ack_get_target_system>:
 * @brief Get field target_system from mission_ack message
 *
 * @return System ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_system(const mavlink_message_t* msg)
{
8001f7f0:	eb cd 40 80 	pushm	r7,lr
8001f7f4:	1a 97       	mov	r7,sp
8001f7f6:	20 1d       	sub	sp,4
8001f7f8:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  0);
8001f7fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f800:	2f 88       	sub	r8,-8
8001f802:	11 88       	ld.ub	r8,r8[0x0]
}
8001f804:	10 9c       	mov	r12,r8
8001f806:	2f fd       	sub	sp,-4
8001f808:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f80c <mavlink_msg_mission_ack_get_target_component>:
 * @brief Get field target_component from mission_ack message
 *
 * @return Component ID
 */
static inline uint8_t mavlink_msg_mission_ack_get_target_component(const mavlink_message_t* msg)
{
8001f80c:	eb cd 40 80 	pushm	r7,lr
8001f810:	1a 97       	mov	r7,sp
8001f812:	20 1d       	sub	sp,4
8001f814:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  1);
8001f818:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f81c:	2f 88       	sub	r8,-8
8001f81e:	2f f8       	sub	r8,-1
8001f820:	11 88       	ld.ub	r8,r8[0x0]
}
8001f822:	10 9c       	mov	r12,r8
8001f824:	2f fd       	sub	sp,-4
8001f826:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f82a <mavlink_msg_mission_ack_get_type>:
 * @brief Get field type from mission_ack message
 *
 * @return See MAV_MISSION_RESULT enum
 */
static inline uint8_t mavlink_msg_mission_ack_get_type(const mavlink_message_t* msg)
{
8001f82a:	eb cd 40 80 	pushm	r7,lr
8001f82e:	1a 97       	mov	r7,sp
8001f830:	20 1d       	sub	sp,4
8001f832:	ef 4c ff fc 	st.w	r7[-4],r12
	return _MAV_RETURN_uint8_t(msg,  2);
8001f836:	ee f8 ff fc 	ld.w	r8,r7[-4]
8001f83a:	2f 88       	sub	r8,-8
8001f83c:	2f e8       	sub	r8,-2
8001f83e:	11 88       	ld.ub	r8,r8[0x0]
}
8001f840:	10 9c       	mov	r12,r8
8001f842:	2f fd       	sub	sp,-4
8001f844:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f848 <mavlink_msg_mission_ack_decode>:
 *
 * @param msg The message to decode
 * @param mission_ack C-struct to decode the message contents into
 */
static inline void mavlink_msg_mission_ack_decode(const mavlink_message_t* msg, mavlink_mission_ack_t* mission_ack)
{
8001f848:	eb cd 40 c0 	pushm	r6-r7,lr
8001f84c:	1a 97       	mov	r7,sp
8001f84e:	20 2d       	sub	sp,8
8001f850:	48 f6       	lddpc	r6,8001f88c <mavlink_msg_mission_ack_decode+0x44>
8001f852:	1e 26       	rsub	r6,pc
8001f854:	ef 4c ff fc 	st.w	r7[-4],r12
8001f858:	ef 4b ff f8 	st.w	r7[-8],r11
#if MAVLINK_NEED_BYTE_SWAP
	mission_ack->target_system = mavlink_msg_mission_ack_get_target_system(msg);
8001f85c:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f860:	cc 8f       	rcall	8001f7f0 <mavlink_msg_mission_ack_get_target_system>
8001f862:	18 98       	mov	r8,r12
8001f864:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f868:	b2 88       	st.b	r9[0x0],r8
	mission_ack->target_component = mavlink_msg_mission_ack_get_target_component(msg);
8001f86a:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f86e:	cc ff       	rcall	8001f80c <mavlink_msg_mission_ack_get_target_component>
8001f870:	18 98       	mov	r8,r12
8001f872:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f876:	b2 98       	st.b	r9[0x1],r8
	mission_ack->type = mavlink_msg_mission_ack_get_type(msg);
8001f878:	ee fc ff fc 	ld.w	r12,r7[-4]
8001f87c:	cd 7f       	rcall	8001f82a <mavlink_msg_mission_ack_get_type>
8001f87e:	18 98       	mov	r8,r12
8001f880:	ee f9 ff f8 	ld.w	r9,r7[-8]
8001f884:	b2 a8       	st.b	r9[0x2],r8
#else
	memcpy(mission_ack, _MAV_PAYLOAD(msg), MAVLINK_MSG_ID_MISSION_ACK_LEN);
#endif
}
8001f886:	2f ed       	sub	sp,-8
8001f888:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f88c:	80 01       	ld.sh	r1,r0[0x0]
8001f88e:	f6 d6 eb cd 	satsub.w	r6,r11,-5171

8001f890 <scalar_product>:
	return out;
}


float static inline scalar_product(const float u[], const float v[])
{
8001f890:	eb cd 40 80 	pushm	r7,lr
8001f894:	1a 97       	mov	r7,sp
8001f896:	20 3d       	sub	sp,12
8001f898:	ef 4c ff f8 	st.w	r7[-8],r12
8001f89c:	ef 4b ff f4 	st.w	r7[-12],r11
	float scp = (u[0]*v[0]+u[1]*v[1]+u[2]*v[2]);
8001f8a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8a4:	70 09       	ld.w	r9,r8[0x0]
8001f8a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8aa:	70 08       	ld.w	r8,r8[0x0]
8001f8ac:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8001f8b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8b4:	2f c8       	sub	r8,-4
8001f8b6:	70 0a       	ld.w	r10,r8[0x0]
8001f8b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8bc:	2f c8       	sub	r8,-4
8001f8be:	70 08       	ld.w	r8,r8[0x0]
8001f8c0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f8c4:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
8001f8c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8001f8cc:	2f 88       	sub	r8,-8
8001f8ce:	70 0a       	ld.w	r10,r8[0x0]
8001f8d0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8001f8d4:	2f 88       	sub	r8,-8
8001f8d6:	70 08       	ld.w	r8,r8[0x0]
8001f8d8:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8001f8dc:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8001f8e0:	ef 48 ff fc 	st.w	r7[-4],r8
	return scp;
8001f8e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f8e8:	10 9c       	mov	r12,r8
8001f8ea:	2f dd       	sub	sp,-12
8001f8ec:	e3 cd 80 80 	ldm	sp++,r7,pc

8001f8f0 <vector_norm_sqr>:
	result=0.5*(result+(input/result));
	return result;
}

float static inline vector_norm_sqr(float u[])
{
8001f8f0:	eb cd 40 c0 	pushm	r6-r7,lr
8001f8f4:	1a 97       	mov	r7,sp
8001f8f6:	20 2d       	sub	sp,8
8001f8f8:	48 96       	lddpc	r6,8001f91c <vector_norm_sqr+0x2c>
8001f8fa:	1e 26       	rsub	r6,pc
8001f8fc:	ef 4c ff f8 	st.w	r7[-8],r12
	float norm = scalar_product(u,u);
8001f900:	ee fb ff f8 	ld.w	r11,r7[-8]
8001f904:	ee fc ff f8 	ld.w	r12,r7[-8]
8001f908:	cc 4f       	rcall	8001f890 <scalar_product>
8001f90a:	18 98       	mov	r8,r12
8001f90c:	ef 48 ff fc 	st.w	r7[-4],r8
	return norm;
8001f910:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8001f914:	10 9c       	mov	r12,r8
8001f916:	2f ed       	sub	sp,-8
8001f918:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f91c:	80 01       	ld.sh	r1,r0[0x0]
8001f91e:	f7 7e eb cd 	stcond	r11[-5171],lr

8001f920 <get_thrust_from_remote>:


static float inline get_roll_from_remote()	{return rc_get_channel_neutral(RC_ROLL)*RC_ROLL_DIR * RC_SCALEFACTOR; };
static float inline get_pitch_from_remote()	{return rc_get_channel_neutral(RC_PITCH)*RC_PITCH_DIR * RC_SCALEFACTOR; };
static float inline get_yaw_from_remote()	{return rc_get_channel_neutral(RC_YAW)*RC_YAW_DIR * RC_SCALEFACTOR; };
static float inline get_thrust_from_remote()	{return rc_get_channel(RC_THROTTLE)*RC_THROTTLE_DIR*RC_SCALEFACTOR; };
8001f920:	eb cd 40 c0 	pushm	r6-r7,lr
8001f924:	1a 97       	mov	r7,sp
8001f926:	48 e6       	lddpc	r6,8001f95c <get_thrust_from_remote+0x3c>
8001f928:	1e 26       	rsub	r6,pc
8001f92a:	30 0c       	mov	r12,0
8001f92c:	f0 16 00 1c 	mcall	r6[112]
8001f930:	18 98       	mov	r8,r12
8001f932:	10 9c       	mov	r12,r8
8001f934:	f0 16 00 1a 	mcall	r6[104]
8001f938:	30 08       	mov	r8,0
8001f93a:	e0 69 60 00 	mov	r9,24576
8001f93e:	ea 19 40 7b 	orh	r9,0x407b
8001f942:	f0 16 00 0c 	mcall	r6[48]
8001f946:	14 98       	mov	r8,r10
8001f948:	16 99       	mov	r9,r11
8001f94a:	10 9a       	mov	r10,r8
8001f94c:	12 9b       	mov	r11,r9
8001f94e:	f0 16 00 08 	mcall	r6[32]
8001f952:	18 98       	mov	r8,r12
8001f954:	10 9c       	mov	r12,r8
8001f956:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f95a:	00 00       	add	r0,r0
8001f95c:	80 01       	ld.sh	r1,r0[0x0]
8001f95e:	f7 ac       	*unknown*

8001f960 <init_waypoint_handler>:
central_data_t *centralData;

int int_loop_count = 0;

void init_waypoint_handler()
{
8001f960:	eb cd 40 c0 	pushm	r6-r7,lr
8001f964:	1a 97       	mov	r7,sp
8001f966:	49 c6       	lddpc	r6,8001f9d4 <init_waypoint_handler+0x74>
8001f968:	1e 26       	rsub	r6,pc
	start_timeout = get_millis();
8001f96a:	f0 16 00 0f 	mcall	r6[60]
8001f96e:	18 99       	mov	r9,r12
8001f970:	ec f8 01 84 	ld.w	r8,r6[388]
8001f974:	91 09       	st.w	r8[0x0],r9
	timeout_max_wp = 10000;
8001f976:	ec f8 04 34 	ld.w	r8,r6[1076]
8001f97a:	e0 69 27 10 	mov	r9,10000
8001f97e:	91 09       	st.w	r8[0x0],r9
	centralData = get_central_data();
8001f980:	f0 16 00 33 	mcall	r6[204]
8001f984:	18 99       	mov	r9,r12
8001f986:	ec f8 00 00 	ld.w	r8,r6[0]
8001f98a:	91 09       	st.w	r8[0x0],r9
	
	centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
8001f98c:	ec f8 00 00 	ld.w	r8,r6[0]
8001f990:	70 08       	ld.w	r8,r8[0x0]
8001f992:	30 19       	mov	r9,1
8001f994:	f1 49 0f 2c 	st.w	r8[3884],r9
	centralData->critical_init = false;
8001f998:	ec f8 00 00 	ld.w	r8,r6[0]
8001f99c:	70 09       	ld.w	r9,r8[0x0]
8001f99e:	30 08       	mov	r8,0
8001f9a0:	f3 68 0d 01 	st.b	r9[3329],r8
	centralData->critical_next_state = false;
8001f9a4:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9a8:	70 09       	ld.w	r9,r8[0x0]
8001f9aa:	30 08       	mov	r8,0
8001f9ac:	f3 68 0d 02 	st.b	r9[3330],r8
	
	init_waypoint_list(centralData->waypoint_list, &centralData->number_of_waypoints);
8001f9b0:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9b4:	70 08       	ld.w	r8,r8[0x0]
8001f9b6:	f0 c9 f3 9c 	sub	r9,r8,-3172
8001f9ba:	ec f8 00 00 	ld.w	r8,r6[0]
8001f9be:	70 08       	ld.w	r8,r8[0x0]
8001f9c0:	f0 c8 f5 ac 	sub	r8,r8,-2644
8001f9c4:	12 9b       	mov	r11,r9
8001f9c6:	10 9c       	mov	r12,r8
8001f9c8:	f0 16 01 61 	mcall	r6[1412]
	init_wp();
8001f9cc:	f0 16 00 90 	mcall	r6[576]
}
8001f9d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8001f9d4:	80 01       	ld.sh	r1,r0[0x0]
8001f9d6:	f7 ec       	*unknown*
8001f9d8:	4e 61       	lddpc	r1,8001fb70 <init_wp+0x178>
8001f9da:	76 20       	ld.w	r0,r11[0x8]
8001f9dc:	69 6e       	ld.w	lr,r4[0x58]
8001f9de:	69 74       	ld.w	r4,r4[0x5c]
8001f9e0:	0a 00       	add	r0,r5
8001f9e2:	00 00       	add	r0,r0
8001f9e4:	57 61       	stdsp	sp[0x1d8],r1
8001f9e6:	79 70       	ld.w	r0,r12[0x5c]
8001f9e8:	6f 69       	ld.w	r9,r7[0x58]
8001f9ea:	6e 74       	ld.w	r4,r7[0x1c]
8001f9ec:	20 4e       	sub	lr,4
8001f9ee:	72 00       	ld.w	r0,r9[0x0]
8001f9f0:	20 73       	sub	r3,7
8001f9f2:	65 74       	ld.w	r4,r2[0x5c]
8001f9f4:	2c 0a       	sub	r10,-64
	...

8001f9f8 <init_wp>:

void init_wp()
{
8001f9f8:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8001f9fc:	1a 97       	mov	r7,sp
8001f9fe:	21 0d       	sub	sp,64
8001fa00:	fe f6 02 f8 	ld.w	r6,pc[760]
8001fa04:	1e 26       	rsub	r6,pc
	uint8_t i,j;
	float rel_pos[3];
	
	if (int_loop_count==0)
8001fa06:	ec f8 03 64 	ld.w	r8,r6[868]
8001fa0a:	70 08       	ld.w	r8,r8[0x0]
8001fa0c:	58 08       	cp.w	r8,0
8001fa0e:	c0 51       	brne	8001fa18 <init_wp+0x20>
	{
		dbg_print("Nav init\n");
8001fa10:	fe cc 00 38 	sub	r12,pc,56
8001fa14:	f0 16 00 01 	mcall	r6[4]
	}
	int_loop_count=(int_loop_count+1)%1000;
8001fa18:	ec f8 03 64 	ld.w	r8,r6[868]
8001fa1c:	70 08       	ld.w	r8,r8[0x0]
8001fa1e:	f0 c9 ff ff 	sub	r9,r8,-1
8001fa22:	e0 68 4d d3 	mov	r8,19923
8001fa26:	ea 18 10 62 	orh	r8,0x1062
8001fa2a:	f2 08 04 4a 	muls.d	r10,r9,r8
8001fa2e:	f6 0a 14 06 	asr	r10,r11,0x6
8001fa32:	f2 08 14 1f 	asr	r8,r9,0x1f
8001fa36:	f4 08 01 08 	sub	r8,r10,r8
8001fa3a:	e0 6a 03 e8 	mov	r10,1000
8001fa3e:	b5 38       	mul	r8,r10
8001fa40:	f2 08 01 08 	sub	r8,r9,r8
8001fa44:	ec f9 03 64 	ld.w	r9,r6[868]
8001fa48:	93 08       	st.w	r9[0x0],r8
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
8001fa4a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa4e:	70 08       	ld.w	r8,r8[0x0]
8001fa50:	f1 08 0c 64 	ld.sh	r8,r8[3172]
8001fa54:	58 08       	cp.w	r8,0
8001fa56:	e0 80 01 4e 	breq	8001fcf2 <init_wp+0x2fa>
8001fa5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa5e:	70 08       	ld.w	r8,r8[0x0]
8001fa60:	f1 38 09 ac 	ld.ub	r8,r8[2476]
8001fa64:	58 08       	cp.w	r8,0
8001fa66:	c0 91       	brne	8001fa78 <init_wp+0x80>
8001fa68:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa6c:	70 08       	ld.w	r8,r8[0x0]
8001fa6e:	f0 f8 0d 08 	ld.w	r8,r8[3336]
8001fa72:	58 08       	cp.w	r8,0
8001fa74:	e0 80 01 3f 	breq	8001fcf2 <init_wp+0x2fa>
8001fa78:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa7c:	70 08       	ld.w	r8,r8[0x0]
8001fa7e:	f1 38 0c fe 	ld.ub	r8,r8[3326]
8001fa82:	ec 18 00 01 	eorl	r8,0x1
8001fa86:	5c 58       	castu.b	r8
8001fa88:	e0 80 01 35 	breq	8001fcf2 <init_wp+0x2fa>
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fa8c:	30 08       	mov	r8,0
8001fa8e:	ef 68 ff fe 	st.b	r7[-2],r8
8001fa92:	c2 59       	rjmp	8001fcdc <init_wp+0x2e4>
		{
			if ((centralData->waypoint_list[i].current == 1)&&(!centralData->waypoint_set))
8001fa94:	ec f8 00 00 	ld.w	r8,r6[0]
8001fa98:	70 0a       	ld.w	r10,r8[0x0]
8001fa9a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fa9e:	12 98       	mov	r8,r9
8001faa0:	a1 78       	lsl	r8,0x1
8001faa2:	12 08       	add	r8,r9
8001faa4:	a5 68       	lsl	r8,0x4
8001faa6:	f4 08 00 08 	add	r8,r10,r8
8001faaa:	f0 c8 f5 a8 	sub	r8,r8,-2648
8001faae:	11 89       	ld.ub	r9,r8[0x0]
8001fab0:	30 18       	mov	r8,1
8001fab2:	f0 09 18 00 	cp.b	r9,r8
8001fab6:	e0 81 01 0e 	brne	8001fcd2 <init_wp+0x2da>
8001faba:	ec f8 00 00 	ld.w	r8,r6[0]
8001fabe:	70 08       	ld.w	r8,r8[0x0]
8001fac0:	f1 38 0c fc 	ld.ub	r8,r8[3324]
8001fac4:	ec 18 00 01 	eorl	r8,0x1
8001fac8:	5c 58       	castu.b	r8
8001faca:	e0 80 01 04 	breq	8001fcd2 <init_wp+0x2da>
			{
				centralData->current_wp_count = i;
8001face:	ec f8 00 00 	ld.w	r8,r6[0]
8001fad2:	70 09       	ld.w	r9,r8[0x0]
8001fad4:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fad8:	f3 68 0c 66 	st.b	r9[3174],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
8001fadc:	ec f8 00 00 	ld.w	r8,r6[0]
8001fae0:	70 0a       	ld.w	r10,r8[0x0]
8001fae2:	ec f8 00 00 	ld.w	r8,r6[0]
8001fae6:	70 0b       	ld.w	r11,r8[0x0]
8001fae8:	ec f8 00 00 	ld.w	r8,r6[0]
8001faec:	70 08       	ld.w	r8,r8[0x0]
8001faee:	f1 38 0c 66 	ld.ub	r8,r8[3174]
8001faf2:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8001faf6:	12 98       	mov	r8,r9
8001faf8:	a1 78       	lsl	r8,0x1
8001fafa:	12 08       	add	r8,r9
8001fafc:	a5 68       	lsl	r8,0x4
8001fafe:	f6 08 00 08 	add	r8,r11,r8
8001fb02:	f0 c8 f5 ac 	sub	r8,r8,-2644
8001fb06:	f4 cb f3 cc 	sub	r11,r10,-3124
8001fb0a:	10 9a       	mov	r10,r8
8001fb0c:	f6 c8 00 00 	sub	r8,r11,0
8001fb10:	f4 c9 00 00 	sub	r9,r10,0
8001fb14:	72 0c       	ld.w	r12,r9[0x0]
8001fb16:	91 0c       	st.w	r8[0x0],r12
8001fb18:	72 1c       	ld.w	r12,r9[0x4]
8001fb1a:	91 1c       	st.w	r8[0x4],r12
8001fb1c:	72 2c       	ld.w	r12,r9[0x8]
8001fb1e:	91 2c       	st.w	r8[0x8],r12
8001fb20:	72 39       	ld.w	r9,r9[0xc]
8001fb22:	91 39       	st.w	r8[0xc],r9
8001fb24:	f6 c8 ff f0 	sub	r8,r11,-16
8001fb28:	f4 c9 ff f0 	sub	r9,r10,-16
8001fb2c:	72 0c       	ld.w	r12,r9[0x0]
8001fb2e:	91 0c       	st.w	r8[0x0],r12
8001fb30:	72 1c       	ld.w	r12,r9[0x4]
8001fb32:	91 1c       	st.w	r8[0x4],r12
8001fb34:	72 2c       	ld.w	r12,r9[0x8]
8001fb36:	91 2c       	st.w	r8[0x8],r12
8001fb38:	72 39       	ld.w	r9,r9[0xc]
8001fb3a:	91 39       	st.w	r8[0xc],r9
8001fb3c:	f6 c8 ff e0 	sub	r8,r11,-32
8001fb40:	f4 c9 ff e0 	sub	r9,r10,-32
8001fb44:	72 0a       	ld.w	r10,r9[0x0]
8001fb46:	91 0a       	st.w	r8[0x0],r10
8001fb48:	72 1a       	ld.w	r10,r9[0x4]
8001fb4a:	91 1a       	st.w	r8[0x4],r10
8001fb4c:	72 2a       	ld.w	r10,r9[0x8]
8001fb4e:	91 2a       	st.w	r8[0x8],r10
8001fb50:	72 39       	ld.w	r9,r9[0xc]
8001fb52:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8001fb54:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb58:	70 05       	ld.w	r5,r8[0x0]
8001fb5a:	ec f8 00 00 	ld.w	r8,r6[0]
8001fb5e:	70 08       	ld.w	r8,r8[0x0]
8001fb60:	ec f9 00 00 	ld.w	r9,r6[0]
8001fb64:	72 0e       	ld.w	lr,r9[0x0]
8001fb66:	ee cc 00 40 	sub	r12,r7,64
8001fb6a:	20 7d       	sub	sp,28
8001fb6c:	1a 99       	mov	r9,sp
8001fb6e:	12 9a       	mov	r10,r9
8001fb70:	f0 cb f6 0c 	sub	r11,r8,-2548
8001fb74:	f4 c8 00 00 	sub	r8,r10,0
8001fb78:	f6 c9 00 00 	sub	r9,r11,0
8001fb7c:	72 03       	ld.w	r3,r9[0x0]
8001fb7e:	91 03       	st.w	r8[0x0],r3
8001fb80:	72 13       	ld.w	r3,r9[0x4]
8001fb82:	91 13       	st.w	r8[0x4],r3
8001fb84:	72 23       	ld.w	r3,r9[0x8]
8001fb86:	91 23       	st.w	r8[0x8],r3
8001fb88:	72 39       	ld.w	r9,r9[0xc]
8001fb8a:	91 39       	st.w	r8[0xc],r9
8001fb8c:	f6 e8 00 10 	ld.d	r8,r11[16]
8001fb90:	f4 e9 00 10 	st.d	r10[16],r8
8001fb94:	76 68       	ld.w	r8,r11[0x18]
8001fb96:	95 68       	st.w	r10[0x18],r8
8001fb98:	20 cd       	sub	sp,48
8001fb9a:	1a 98       	mov	r8,sp
8001fb9c:	10 9b       	mov	r11,r8
8001fb9e:	fc ca f3 cc 	sub	r10,lr,-3124
8001fba2:	f6 c8 00 00 	sub	r8,r11,0
8001fba6:	f4 c9 00 00 	sub	r9,r10,0
8001fbaa:	72 0e       	ld.w	lr,r9[0x0]
8001fbac:	91 0e       	st.w	r8[0x0],lr
8001fbae:	72 1e       	ld.w	lr,r9[0x4]
8001fbb0:	91 1e       	st.w	r8[0x4],lr
8001fbb2:	72 2e       	ld.w	lr,r9[0x8]
8001fbb4:	91 2e       	st.w	r8[0x8],lr
8001fbb6:	72 39       	ld.w	r9,r9[0xc]
8001fbb8:	91 39       	st.w	r8[0xc],r9
8001fbba:	f6 c8 ff f0 	sub	r8,r11,-16
8001fbbe:	f4 c9 ff f0 	sub	r9,r10,-16
8001fbc2:	72 0e       	ld.w	lr,r9[0x0]
8001fbc4:	91 0e       	st.w	r8[0x0],lr
8001fbc6:	72 1e       	ld.w	lr,r9[0x4]
8001fbc8:	91 1e       	st.w	r8[0x4],lr
8001fbca:	72 2e       	ld.w	lr,r9[0x8]
8001fbcc:	91 2e       	st.w	r8[0x8],lr
8001fbce:	72 39       	ld.w	r9,r9[0xc]
8001fbd0:	91 39       	st.w	r8[0xc],r9
8001fbd2:	f6 c8 ff e0 	sub	r8,r11,-32
8001fbd6:	f4 c9 ff e0 	sub	r9,r10,-32
8001fbda:	72 0a       	ld.w	r10,r9[0x0]
8001fbdc:	91 0a       	st.w	r8[0x0],r10
8001fbde:	72 1a       	ld.w	r10,r9[0x4]
8001fbe0:	91 1a       	st.w	r8[0x4],r10
8001fbe2:	72 2a       	ld.w	r10,r9[0x8]
8001fbe4:	91 2a       	st.w	r8[0x8],r10
8001fbe6:	72 39       	ld.w	r9,r9[0xc]
8001fbe8:	91 39       	st.w	r8[0xc],r9
8001fbea:	f0 16 01 06 	mcall	r6[1048]
8001fbee:	2e dd       	sub	sp,-76
8001fbf0:	ea cb f3 98 	sub	r11,r5,-3176
8001fbf4:	ee ca 00 40 	sub	r10,r7,64
8001fbf8:	f6 c8 00 00 	sub	r8,r11,0
8001fbfc:	f4 c9 00 00 	sub	r9,r10,0
8001fc00:	72 0c       	ld.w	r12,r9[0x0]
8001fc02:	91 0c       	st.w	r8[0x0],r12
8001fc04:	72 1c       	ld.w	r12,r9[0x4]
8001fc06:	91 1c       	st.w	r8[0x4],r12
8001fc08:	72 2c       	ld.w	r12,r9[0x8]
8001fc0a:	91 2c       	st.w	r8[0x8],r12
8001fc0c:	72 39       	ld.w	r9,r9[0xc]
8001fc0e:	91 39       	st.w	r8[0xc],r9
8001fc10:	f6 c8 ff f0 	sub	r8,r11,-16
8001fc14:	f4 c9 ff f0 	sub	r9,r10,-16
8001fc18:	72 0c       	ld.w	r12,r9[0x0]
8001fc1a:	91 0c       	st.w	r8[0x0],r12
8001fc1c:	72 1c       	ld.w	r12,r9[0x4]
8001fc1e:	91 1c       	st.w	r8[0x4],r12
8001fc20:	72 2c       	ld.w	r12,r9[0x8]
8001fc22:	91 2c       	st.w	r8[0x8],r12
8001fc24:	72 39       	ld.w	r9,r9[0xc]
8001fc26:	91 39       	st.w	r8[0xc],r9
8001fc28:	f6 c8 ff e0 	sub	r8,r11,-32
8001fc2c:	f4 c9 ff e0 	sub	r9,r10,-32
8001fc30:	72 0a       	ld.w	r10,r9[0x0]
8001fc32:	91 0a       	st.w	r8[0x0],r10
8001fc34:	72 1a       	ld.w	r10,r9[0x4]
8001fc36:	91 1a       	st.w	r8[0x4],r10
8001fc38:	72 2a       	ld.w	r10,r9[0x8]
8001fc3a:	91 2a       	st.w	r8[0x8],r10
8001fc3c:	72 39       	ld.w	r9,r9[0xc]
8001fc3e:	91 39       	st.w	r8[0xc],r9
				
				dbg_print("Waypoint Nr");
8001fc40:	fe cc 02 5c 	sub	r12,pc,604
8001fc44:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(i,10);
8001fc48:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fc4c:	30 ab       	mov	r11,10
8001fc4e:	10 9c       	mov	r12,r8
8001fc50:	f0 16 00 04 	mcall	r6[16]
				dbg_print(" set,\n");
8001fc54:	fe cc 02 64 	sub	r12,pc,612
8001fc58:	f0 16 00 01 	mcall	r6[4]
			
				centralData->waypoint_set = true;
8001fc5c:	ec f8 00 00 	ld.w	r8,r6[0]
8001fc60:	70 09       	ld.w	r9,r8[0x0]
8001fc62:	30 18       	mov	r8,1
8001fc64:	f3 68 0c fc 	st.b	r9[3324],r8
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fc68:	30 08       	mov	r8,0
8001fc6a:	ef 68 ff ff 	st.b	r7[-1],r8
8001fc6e:	c2 18       	rjmp	8001fcb0 <init_wp+0x2b8>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
8001fc70:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fc74:	ec f9 00 00 	ld.w	r9,r6[0]
8001fc78:	72 09       	ld.w	r9,r9[0x0]
8001fc7a:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8001fc7e:	f4 ca fc e6 	sub	r10,r10,-794
8001fc82:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
8001fc86:	ec f9 00 00 	ld.w	r9,r6[0]
8001fc8a:	72 09       	ld.w	r9,r9[0x0]
8001fc8c:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8001fc90:	f6 cb fd 87 	sub	r11,r11,-633
8001fc94:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8001fc98:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
8001fc9c:	a3 68       	lsl	r8,0x2
8001fc9e:	ee 08 00 08 	add	r8,r7,r8
8001fca2:	f1 49 ff f0 	st.w	r8[-16],r9
				dbg_print(" set,\n");
			
				centralData->waypoint_set = true;
				//waypoint_reached = false;
				
				for (j=0;j<3;j++)
8001fca6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8001fcaa:	2f f8       	sub	r8,-1
8001fcac:	ef 68 ff ff 	st.b	r7[-1],r8
8001fcb0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8001fcb4:	30 28       	mov	r8,2
8001fcb6:	f0 09 18 00 	cp.b	r9,r8
8001fcba:	fe 98 ff db 	brls	8001fc70 <init_wp+0x278>
				{
					rel_pos[j] = centralData->waypoint_coordinates.pos[j]-centralData->position_estimator.localPosition.pos[j];
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8001fcbe:	ec f8 00 00 	ld.w	r8,r6[0]
8001fcc2:	70 05       	ld.w	r5,r8[0x0]
8001fcc4:	ee c8 00 10 	sub	r8,r7,16
8001fcc8:	10 9c       	mov	r12,r8
8001fcca:	c1 3e       	rcall	8001f8f0 <vector_norm_sqr>
8001fccc:	18 98       	mov	r8,r12
8001fcce:	eb 48 0c f8 	st.w	r5[3320],r8
	}
	int_loop_count=(int_loop_count+1)%1000;
	
	if ((centralData->number_of_waypoints > 0) && (centralData->position_estimator.init_gps_position || centralData->simulation_mode) && centralData->waypoint_receiving == false)
	{
		for (i=0;i<centralData->number_of_waypoints;i++)
8001fcd2:	ef 38 ff fe 	ld.ub	r8,r7[-2]
8001fcd6:	2f f8       	sub	r8,-1
8001fcd8:	ef 68 ff fe 	st.b	r7[-2],r8
8001fcdc:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8001fce0:	ec f8 00 00 	ld.w	r8,r6[0]
8001fce4:	70 08       	ld.w	r8,r8[0x0]
8001fce6:	f1 08 0c 64 	ld.sh	r8,r8[3172]
8001fcea:	f0 09 19 00 	cp.h	r9,r8
8001fcee:	fe 93 fe d3 	brlo	8001fa94 <init_wp+0x9c>
				}
				centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
			}
		}
	}
}
8001fcf2:	2f 0d       	sub	sp,-64
8001fcf4:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
8001fcf8:	80 01       	ld.sh	r1,r0[0x0]
8001fcfa:	f8 88 4e 75 	brls	7ff299e4 <_estack+0x7ff199e4>
8001fcfe:	6d 62       	ld.w	r2,r6[0x58]
8001fd00:	65 72       	ld.w	r2,r2[0x5c]
8001fd02:	20 6f       	sub	pc,6
8001fd04:	66 20       	ld.w	r0,r3[0x8]
8001fd06:	57 61       	stdsp	sp[0x1d8],r1
8001fd08:	79 70       	ld.w	r0,r12[0x5c]
8001fd0a:	6f 69       	ld.w	r9,r7[0x58]
8001fd0c:	6e 74       	ld.w	r4,r7[0x1c]
8001fd0e:	20 6f       	sub	pc,6
8001fd10:	6e 62       	ld.w	r2,r7[0x18]
8001fd12:	6f 61       	ld.w	r1,r7[0x58]
8001fd14:	72 64       	ld.w	r4,r9[0x18]
8001fd16:	3a 00       	mov	r0,-96
8001fd18:	0a 00       	add	r0,r5

8001fd1a <init_waypoint_list>:


void init_waypoint_list(waypoint_struct waypoint_list[], uint16_t* number_of_waypoints)
{
8001fd1a:	eb cd 40 c0 	pushm	r6-r7,lr
8001fd1e:	1a 97       	mov	r7,sp
8001fd20:	20 ed       	sub	sp,56
8001fd22:	fe f6 03 1a 	ld.w	r6,pc[794]
8001fd26:	1e 26       	rsub	r6,pc
8001fd28:	ef 4c ff cc 	st.w	r7[-52],r12
8001fd2c:	ef 4b ff c8 	st.w	r7[-56],r11
	
	
	// Visit https://code.google.com/p/ardupilot-mega/wiki/MAVLink to have a description of all messages (or common.h)
	waypoint_struct waypoint;
	*number_of_waypoints = 4;
8001fd30:	ee f9 ff c8 	ld.w	r9,r7[-56]
8001fd34:	30 48       	mov	r8,4
8001fd36:	b2 08       	st.h	r9[0x0],r8
	
	num_waypoint_onboard = *number_of_waypoints;
8001fd38:	ee f8 ff c8 	ld.w	r8,r7[-56]
8001fd3c:	90 08       	ld.sh	r8,r8[0x0]
8001fd3e:	ec f9 01 28 	ld.w	r9,r6[296]
8001fd42:	b2 08       	st.h	r9[0x0],r8
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001fd44:	30 18       	mov	r8,1
8001fd46:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 1;
8001fd4a:	30 18       	mov	r8,1
8001fd4c:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001fd50:	30 38       	mov	r8,3
8001fd52:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fd56:	31 08       	mov	r8,16
8001fd58:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x =  465185223.6174 / 1.0e7f; // convert to deg
8001fd5c:	e0 68 f5 80 	mov	r8,62848
8001fd60:	ea 18 f0 d4 	orh	r8,0xf0d4
8001fd64:	e0 69 42 5e 	mov	r9,16990
8001fd68:	ea 19 40 47 	orh	r9,0x4047
8001fd6c:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001fd70:	fc 18 60 00 	movh	r8,0x6000
8001fd74:	e0 69 44 aa 	mov	r9,17578
8001fd78:	ea 19 40 1a 	orh	r9,0x401a
8001fd7c:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001fd80:	30 08       	mov	r8,0
8001fd82:	fc 19 40 34 	movh	r9,0x4034
8001fd86:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fd8a:	fc 18 41 20 	movh	r8,0x4120
8001fd8e:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 2; // Acceptance radius in meters
8001fd92:	fc 18 40 00 	movh	r8,0x4000
8001fd96:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001fd9a:	30 08       	mov	r8,0
8001fd9c:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001fda0:	fc 18 42 b4 	movh	r8,0x42b4
8001fda4:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[0] = waypoint;
8001fda8:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001fdac:	10 9b       	mov	r11,r8
8001fdae:	ee ca 00 30 	sub	r10,r7,48
8001fdb2:	f6 c8 00 00 	sub	r8,r11,0
8001fdb6:	f4 c9 00 00 	sub	r9,r10,0
8001fdba:	72 0c       	ld.w	r12,r9[0x0]
8001fdbc:	91 0c       	st.w	r8[0x0],r12
8001fdbe:	72 1c       	ld.w	r12,r9[0x4]
8001fdc0:	91 1c       	st.w	r8[0x4],r12
8001fdc2:	72 2c       	ld.w	r12,r9[0x8]
8001fdc4:	91 2c       	st.w	r8[0x8],r12
8001fdc6:	72 39       	ld.w	r9,r9[0xc]
8001fdc8:	91 39       	st.w	r8[0xc],r9
8001fdca:	f6 c8 ff f0 	sub	r8,r11,-16
8001fdce:	f4 c9 ff f0 	sub	r9,r10,-16
8001fdd2:	72 0c       	ld.w	r12,r9[0x0]
8001fdd4:	91 0c       	st.w	r8[0x0],r12
8001fdd6:	72 1c       	ld.w	r12,r9[0x4]
8001fdd8:	91 1c       	st.w	r8[0x4],r12
8001fdda:	72 2c       	ld.w	r12,r9[0x8]
8001fddc:	91 2c       	st.w	r8[0x8],r12
8001fdde:	72 39       	ld.w	r9,r9[0xc]
8001fde0:	91 39       	st.w	r8[0xc],r9
8001fde2:	f6 c8 ff e0 	sub	r8,r11,-32
8001fde6:	f4 c9 ff e0 	sub	r9,r10,-32
8001fdea:	72 0a       	ld.w	r10,r9[0x0]
8001fdec:	91 0a       	st.w	r8[0x0],r10
8001fdee:	72 1a       	ld.w	r10,r9[0x4]
8001fdf0:	91 1a       	st.w	r8[0x4],r10
8001fdf2:	72 2a       	ld.w	r10,r9[0x8]
8001fdf4:	91 2a       	st.w	r8[0x8],r10
8001fdf6:	72 39       	ld.w	r9,r9[0xc]
8001fdf8:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001fdfa:	30 18       	mov	r8,1
8001fdfc:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001fe00:	30 08       	mov	r8,0
8001fe02:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001fe06:	30 38       	mov	r8,3
8001fe08:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fe0c:	31 08       	mov	r8,16
8001fe0e:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001fe12:	fc 18 20 00 	movh	r8,0x2000
8001fe16:	e0 69 42 64 	mov	r9,16996
8001fe1a:	ea 19 40 47 	orh	r9,0x4047
8001fe1e:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65670560 / 1.0e7f; // convert to deg
8001fe22:	fc 18 60 00 	movh	r8,0x6000
8001fe26:	e0 69 44 aa 	mov	r9,17578
8001fe2a:	ea 19 40 1a 	orh	r9,0x401a
8001fe2e:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001fe32:	30 08       	mov	r8,0
8001fe34:	fc 19 40 34 	movh	r9,0x4034
8001fe38:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fe3c:	fc 18 41 20 	movh	r8,0x4120
8001fe40:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 4; // Acceptance radius in meters
8001fe44:	fc 18 40 80 	movh	r8,0x4080
8001fe48:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001fe4c:	30 08       	mov	r8,0
8001fe4e:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001fe52:	fc 18 42 b4 	movh	r8,0x42b4
8001fe56:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[1] = waypoint;
8001fe5a:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001fe5e:	2d 08       	sub	r8,-48
8001fe60:	10 9b       	mov	r11,r8
8001fe62:	ee ca 00 30 	sub	r10,r7,48
8001fe66:	f6 c8 00 00 	sub	r8,r11,0
8001fe6a:	f4 c9 00 00 	sub	r9,r10,0
8001fe6e:	72 0c       	ld.w	r12,r9[0x0]
8001fe70:	91 0c       	st.w	r8[0x0],r12
8001fe72:	72 1c       	ld.w	r12,r9[0x4]
8001fe74:	91 1c       	st.w	r8[0x4],r12
8001fe76:	72 2c       	ld.w	r12,r9[0x8]
8001fe78:	91 2c       	st.w	r8[0x8],r12
8001fe7a:	72 39       	ld.w	r9,r9[0xc]
8001fe7c:	91 39       	st.w	r8[0xc],r9
8001fe7e:	f6 c8 ff f0 	sub	r8,r11,-16
8001fe82:	f4 c9 ff f0 	sub	r9,r10,-16
8001fe86:	72 0c       	ld.w	r12,r9[0x0]
8001fe88:	91 0c       	st.w	r8[0x0],r12
8001fe8a:	72 1c       	ld.w	r12,r9[0x4]
8001fe8c:	91 1c       	st.w	r8[0x4],r12
8001fe8e:	72 2c       	ld.w	r12,r9[0x8]
8001fe90:	91 2c       	st.w	r8[0x8],r12
8001fe92:	72 39       	ld.w	r9,r9[0xc]
8001fe94:	91 39       	st.w	r8[0xc],r9
8001fe96:	f6 c8 ff e0 	sub	r8,r11,-32
8001fe9a:	f4 c9 ff e0 	sub	r9,r10,-32
8001fe9e:	72 0a       	ld.w	r10,r9[0x0]
8001fea0:	91 0a       	st.w	r8[0x0],r10
8001fea2:	72 1a       	ld.w	r10,r9[0x4]
8001fea4:	91 1a       	st.w	r8[0x4],r10
8001fea6:	72 2a       	ld.w	r10,r9[0x8]
8001fea8:	91 2a       	st.w	r8[0x8],r10
8001feaa:	72 39       	ld.w	r9,r9[0xc]
8001feac:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001feae:	30 18       	mov	r8,1
8001feb0:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001feb4:	30 08       	mov	r8,0
8001feb6:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001feba:	30 38       	mov	r8,3
8001febc:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001fec0:	31 08       	mov	r8,16
8001fec2:	ef 58 ff d2 	st.h	r7[-46],r8
	
	waypoint.x = 465186816 / 1.0e7f; // convert to deg
8001fec6:	fc 18 20 00 	movh	r8,0x2000
8001feca:	e0 69 42 64 	mov	r9,16996
8001fece:	ea 19 40 47 	orh	r9,0x4047
8001fed2:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001fed6:	fc 18 80 00 	movh	r8,0x8000
8001feda:	e0 69 43 7d 	mov	r9,17277
8001fede:	ea 19 40 1a 	orh	r9,0x401a
8001fee2:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 40; //m
8001fee6:	30 08       	mov	r8,0
8001fee8:	fc 19 40 44 	movh	r9,0x4044
8001feec:	ee e9 ff f8 	st.d	r7[-8],r8
	
	waypoint.param1 = 10; // Hold time in decimal seconds
8001fef0:	fc 18 41 20 	movh	r8,0x4120
8001fef4:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 15; // Acceptance radius in meters
8001fef8:	fc 18 41 70 	movh	r8,0x4170
8001fefc:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001ff00:	30 08       	mov	r8,0
8001ff02:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001ff06:	fc 18 42 b4 	movh	r8,0x42b4
8001ff0a:	ef 48 ff e4 	st.w	r7[-28],r8
	
	waypoint_list[2] = waypoint;
8001ff0e:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001ff12:	2a 08       	sub	r8,-96
8001ff14:	10 9b       	mov	r11,r8
8001ff16:	ee ca 00 30 	sub	r10,r7,48
8001ff1a:	f6 c8 00 00 	sub	r8,r11,0
8001ff1e:	f4 c9 00 00 	sub	r9,r10,0
8001ff22:	72 0c       	ld.w	r12,r9[0x0]
8001ff24:	91 0c       	st.w	r8[0x0],r12
8001ff26:	72 1c       	ld.w	r12,r9[0x4]
8001ff28:	91 1c       	st.w	r8[0x4],r12
8001ff2a:	72 2c       	ld.w	r12,r9[0x8]
8001ff2c:	91 2c       	st.w	r8[0x8],r12
8001ff2e:	72 39       	ld.w	r9,r9[0xc]
8001ff30:	91 39       	st.w	r8[0xc],r9
8001ff32:	f6 c8 ff f0 	sub	r8,r11,-16
8001ff36:	f4 c9 ff f0 	sub	r9,r10,-16
8001ff3a:	72 0c       	ld.w	r12,r9[0x0]
8001ff3c:	91 0c       	st.w	r8[0x0],r12
8001ff3e:	72 1c       	ld.w	r12,r9[0x4]
8001ff40:	91 1c       	st.w	r8[0x4],r12
8001ff42:	72 2c       	ld.w	r12,r9[0x8]
8001ff44:	91 2c       	st.w	r8[0x8],r12
8001ff46:	72 39       	ld.w	r9,r9[0xc]
8001ff48:	91 39       	st.w	r8[0xc],r9
8001ff4a:	f6 c8 ff e0 	sub	r8,r11,-32
8001ff4e:	f4 c9 ff e0 	sub	r9,r10,-32
8001ff52:	72 0a       	ld.w	r10,r9[0x0]
8001ff54:	91 0a       	st.w	r8[0x0],r10
8001ff56:	72 1a       	ld.w	r10,r9[0x4]
8001ff58:	91 1a       	st.w	r8[0x4],r10
8001ff5a:	72 2a       	ld.w	r10,r9[0x8]
8001ff5c:	91 2a       	st.w	r8[0x8],r10
8001ff5e:	72 39       	ld.w	r9,r9[0xc]
8001ff60:	91 39       	st.w	r8[0xc],r9
	
	// Set nav waypoint
	waypoint.autocontinue = 1;
8001ff62:	30 18       	mov	r8,1
8001ff64:	ef 68 ff d5 	st.b	r7[-43],r8
	waypoint.current = 0;
8001ff68:	30 08       	mov	r8,0
8001ff6a:	ef 68 ff d4 	st.b	r7[-44],r8
	waypoint.frame = MAV_FRAME_GLOBAL_RELATIVE_ALT;
8001ff6e:	30 38       	mov	r8,3
8001ff70:	ef 68 ff d0 	st.b	r7[-48],r8
	waypoint.wp_id = MAV_CMD_NAV_WAYPOINT;
8001ff74:	31 08       	mov	r8,16
8001ff76:	ef 58 ff d2 	st.h	r7[-46],r8

	waypoint.x = 465182186 / 1.0e7f; // convert to deg
8001ff7a:	30 08       	mov	r8,0
8001ff7c:	e0 69 42 55 	mov	r9,16981
8001ff80:	ea 19 40 47 	orh	r9,0x4047
8001ff84:	ee e9 ff e8 	st.d	r7[-24],r8
	waypoint.y = 65659084 / 1.0e7f; // convert to deg
8001ff88:	fc 18 80 00 	movh	r8,0x8000
8001ff8c:	e0 69 43 7d 	mov	r9,17277
8001ff90:	ea 19 40 1a 	orh	r9,0x401a
8001ff94:	ee e9 ff f0 	st.d	r7[-16],r8
	waypoint.z = 20; //m
8001ff98:	30 08       	mov	r8,0
8001ff9a:	fc 19 40 34 	movh	r9,0x4034
8001ff9e:	ee e9 ff f8 	st.d	r7[-8],r8

	waypoint.param1 = 10; // Hold time in decimal seconds
8001ffa2:	fc 18 41 20 	movh	r8,0x4120
8001ffa6:	ef 48 ff d8 	st.w	r7[-40],r8
	waypoint.param2 = 12; // Acceptance radius in meters
8001ffaa:	fc 18 41 40 	movh	r8,0x4140
8001ffae:	ef 48 ff dc 	st.w	r7[-36],r8
	waypoint.param3 = 0; //  0 to pass through the WP, if > 0 radius in meters to pass by WP. Positive value for clockwise orbit, negative value for counter-clockwise orbit. Allows trajectory control.
8001ffb2:	30 08       	mov	r8,0
8001ffb4:	ef 48 ff e0 	st.w	r7[-32],r8
	waypoint.param4 = 90; // Desired yaw angle at MISSION (rotary wing)
8001ffb8:	fc 18 42 b4 	movh	r8,0x42b4
8001ffbc:	ef 48 ff e4 	st.w	r7[-28],r8

	waypoint_list[3] = waypoint;
8001ffc0:	ee f8 ff cc 	ld.w	r8,r7[-52]
8001ffc4:	f0 c8 ff 70 	sub	r8,r8,-144
8001ffc8:	10 9b       	mov	r11,r8
8001ffca:	ee ca 00 30 	sub	r10,r7,48
8001ffce:	f6 c8 00 00 	sub	r8,r11,0
8001ffd2:	f4 c9 00 00 	sub	r9,r10,0
8001ffd6:	72 0c       	ld.w	r12,r9[0x0]
8001ffd8:	91 0c       	st.w	r8[0x0],r12
8001ffda:	72 1c       	ld.w	r12,r9[0x4]
8001ffdc:	91 1c       	st.w	r8[0x4],r12
8001ffde:	72 2c       	ld.w	r12,r9[0x8]
8001ffe0:	91 2c       	st.w	r8[0x8],r12
8001ffe2:	72 39       	ld.w	r9,r9[0xc]
8001ffe4:	91 39       	st.w	r8[0xc],r9
8001ffe6:	f6 c8 ff f0 	sub	r8,r11,-16
8001ffea:	f4 c9 ff f0 	sub	r9,r10,-16
8001ffee:	72 0c       	ld.w	r12,r9[0x0]
8001fff0:	91 0c       	st.w	r8[0x0],r12
8001fff2:	72 1c       	ld.w	r12,r9[0x4]
8001fff4:	91 1c       	st.w	r8[0x4],r12
8001fff6:	72 2c       	ld.w	r12,r9[0x8]
8001fff8:	91 2c       	st.w	r8[0x8],r12
8001fffa:	72 39       	ld.w	r9,r9[0xc]
8001fffc:	91 39       	st.w	r8[0xc],r9
8001fffe:	f6 c8 ff e0 	sub	r8,r11,-32
80020002:	f4 c9 ff e0 	sub	r9,r10,-32
80020006:	72 0a       	ld.w	r10,r9[0x0]
80020008:	91 0a       	st.w	r8[0x0],r10
8002000a:	72 1a       	ld.w	r10,r9[0x4]
8002000c:	91 1a       	st.w	r8[0x4],r10
8002000e:	72 2a       	ld.w	r10,r9[0x8]
80020010:	91 2a       	st.w	r8[0x8],r10
80020012:	72 39       	ld.w	r9,r9[0xc]
80020014:	91 39       	st.w	r8[0xc],r9
	//waypoint.param3 = 465186806 / 1.0e7f; // lat converted to deg
	//waypoint.param4 = 65659084 / 1.0e7f; // long converted to deg
	
	//waypoint_list[4] = waypoint;
	
	dbg_print("Number of Waypoint onboard:");
80020016:	fe cc 03 1a 	sub	r12,pc,794
8002001a:	f0 16 00 01 	mcall	r6[4]
	dbg_print_num(num_waypoint_onboard,10);
8002001e:	ec f8 01 28 	ld.w	r8,r6[296]
80020022:	90 08       	ld.sh	r8,r8[0x0]
80020024:	5c 78       	castu.h	r8
80020026:	30 ab       	mov	r11,10
80020028:	10 9c       	mov	r12,r8
8002002a:	f0 16 00 04 	mcall	r6[16]
	dbg_print("\n");
8002002e:	fe cc 03 16 	sub	r12,pc,790
80020032:	f0 16 00 01 	mcall	r6[4]
	
}
80020036:	2f 2d       	sub	sp,-56
80020038:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002003c:	80 01       	ld.sh	r1,r0[0x0]
8002003e:	fb aa       	*unknown*
80020040:	57 69       	stdsp	sp[0x1d8],r9
80020042:	6c 6c       	ld.w	r12,r6[0x18]
80020044:	20 73       	sub	r3,7
80020046:	65 6e       	ld.w	lr,r2[0x58]
80020048:	64 20       	ld.w	r0,r2[0x8]
8002004a:	00 00       	add	r0,r0
8002004c:	20 77       	sub	r7,7
8002004e:	61 79       	ld.w	r9,r0[0x5c]
80020050:	70 6f       	ld.w	pc,r8[0x18]
80020052:	69 6e       	ld.w	lr,r4[0x58]
80020054:	74 73       	ld.w	r3,r10[0x1c]
80020056:	0a 00       	add	r0,r5

80020058 <send_count>:

void send_count(Mavlink_Received_t* rec, uint16_t num_of_waypoint, bool* waypoint_receiving, bool * waypoint_sending)
{
80020058:	eb cd 40 c0 	pushm	r6-r7,lr
8002005c:	1a 97       	mov	r7,sp
8002005e:	20 5d       	sub	sp,20
80020060:	4a d6       	lddpc	r6,80020114 <send_count+0xbc>
80020062:	1e 26       	rsub	r6,pc
80020064:	ef 4c ff f8 	st.w	r7[-8],r12
80020068:	16 98       	mov	r8,r11
8002006a:	ef 4a ff f0 	st.w	r7[-16],r10
8002006e:	ef 49 ff ec 	st.w	r7[-20],r9
80020072:	ef 58 ff f4 	st.h	r7[-12],r8
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
80020076:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002007a:	ee c9 00 02 	sub	r9,r7,2
8002007e:	12 9b       	mov	r11,r9
80020080:	10 9c       	mov	r12,r8
80020082:	fe b0 fa 88 	rcall	8001f592 <mavlink_msg_mission_request_list_decode>
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020086:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002008a:	ec f8 00 c8 	ld.w	r8,r6[200]
8002008e:	11 88       	ld.ub	r8,r8[0x0]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020090:	f0 09 18 00 	cp.b	r9,r8
80020094:	c3 c1       	brne	8002010c <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020096:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002009a:	ec f8 00 c8 	ld.w	r8,r6[200]
8002009e:	11 98       	ld.ub	r8,r8[0x1]
{
	mavlink_mission_request_list_t packet;
	mavlink_msg_mission_request_list_decode(&rec->msg,&packet);
	
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800200a0:	f0 09 18 00 	cp.b	r9,r8
800200a4:	c3 41       	brne	8002010c <send_count+0xb4>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{	
		mavlink_msg_mission_count_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,num_of_waypoint);
800200a6:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800200aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800200ae:	11 e8       	ld.ub	r8,r8[0x6]
800200b0:	10 9a       	mov	r10,r8
800200b2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800200b6:	11 d8       	ld.ub	r8,r8[0x5]
800200b8:	10 9b       	mov	r11,r8
800200ba:	30 0c       	mov	r12,0
800200bc:	fe b0 fa 88 	rcall	8001f5cc <mavlink_msg_mission_count_send>
		
		if (num_of_waypoint != 0)
800200c0:	ef 09 ff f4 	ld.sh	r9,r7[-12]
800200c4:	30 08       	mov	r8,0
800200c6:	f0 09 19 00 	cp.h	r9,r8
800200ca:	c0 f0       	breq	800200e8 <send_count+0x90>
		{
			*waypoint_sending = true;
800200cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800200d0:	30 18       	mov	r8,1
800200d2:	b2 88       	st.b	r9[0x0],r8
			*waypoint_receiving = false;
800200d4:	ee f9 ff f0 	ld.w	r9,r7[-16]
800200d8:	30 08       	mov	r8,0
800200da:	b2 88       	st.b	r9[0x0],r8
			start_timeout = get_millis();
800200dc:	f0 16 00 0f 	mcall	r6[60]
800200e0:	18 99       	mov	r9,r12
800200e2:	ec f8 01 84 	ld.w	r8,r6[388]
800200e6:	91 09       	st.w	r8[0x0],r9
		}
		
		sending_wp_num = 0;
800200e8:	ec f8 00 ac 	ld.w	r8,r6[172]
800200ec:	30 09       	mov	r9,0
800200ee:	91 09       	st.w	r8[0x0],r9
		dbg_print("Will send ");
800200f0:	fe cc 00 b0 	sub	r12,pc,176
800200f4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(num_of_waypoint,10);
800200f8:	ef 18 ff f4 	ld.uh	r8,r7[-12]
800200fc:	30 ab       	mov	r11,10
800200fe:	10 9c       	mov	r12,r8
80020100:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" waypoints\n");
80020104:	fe cc 00 b8 	sub	r12,pc,184
80020108:	f0 16 00 01 	mcall	r6[4]
	}
}
8002010c:	2f bd       	sub	sp,-20
8002010e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020112:	00 00       	add	r0,r0
80020114:	80 01       	ld.sh	r1,r0[0x0]
80020116:	fe e6 41 73 	ld.d	r6,pc[16755]
8002011a:	6b 69       	ld.w	r9,r5[0x58]
8002011c:	6e 67       	ld.w	r7,r7[0x18]
8002011e:	20 66       	sub	r6,6
80020120:	6f 72       	ld.w	r2,r7[0x5c]
80020122:	20 77       	sub	r7,7
80020124:	61 79       	ld.w	r9,r0[0x5c]
80020126:	70 6f       	ld.w	pc,r8[0x18]
80020128:	69 6e       	ld.w	lr,r4[0x58]
8002012a:	74 20       	ld.w	r0,r10[0x8]
8002012c:	6e 75       	ld.w	r5,r7[0x1c]
8002012e:	6d 62       	ld.w	r2,r6[0x58]
80020130:	65 72       	ld.w	r2,r2[0x5c]
80020132:	20 00       	sub	r0,0
80020134:	53 65       	stdsp	sp[0xd8],r5
80020136:	6e 64       	ld.w	r4,r7[0x18]
80020138:	69 6e       	ld.w	lr,r4[0x58]
8002013a:	67 20       	ld.w	r0,r3[0x48]
8002013c:	77 61       	ld.w	r1,r11[0x58]
8002013e:	79 70       	ld.w	r0,r12[0x5c]
80020140:	6f 69       	ld.w	r9,r7[0x58]
80020142:	6e 74       	ld.w	r4,r7[0x1c]
80020144:	20 00       	sub	r0,0

80020146 <send_waypoint>:

void send_waypoint(Mavlink_Received_t* rec, waypoint_struct waypoint[], uint16_t num_of_waypoint, bool* waypoint_sending)
{
80020146:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002014a:	1a 97       	mov	r7,sp
8002014c:	20 9d       	sub	sp,36
8002014e:	fe f6 02 62 	ld.w	r6,pc[610]
80020152:	1e 26       	rsub	r6,pc
80020154:	ef 4c ff f8 	st.w	r7[-8],r12
80020158:	ef 4b ff f4 	st.w	r7[-12],r11
8002015c:	14 98       	mov	r8,r10
8002015e:	ef 49 ff ec 	st.w	r7[-20],r9
80020162:	ef 58 ff f0 	st.h	r7[-16],r8
	if (*waypoint_sending)
80020166:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002016a:	11 88       	ld.ub	r8,r8[0x0]
8002016c:	58 08       	cp.w	r8,0
8002016e:	e0 80 01 1e 	breq	800203aa <send_waypoint+0x264>
	{
		mavlink_mission_request_t packet;
		mavlink_msg_mission_request_decode(&rec->msg,&packet);
80020172:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020176:	ee c9 00 04 	sub	r9,r7,4
8002017a:	12 9b       	mov	r11,r9
8002017c:	10 9c       	mov	r12,r8
8002017e:	fe b0 f9 4b 	rcall	8001f414 <mavlink_msg_mission_request_decode>
		
		dbg_print("Asking for waypoint number ");
80020182:	fe cc 00 6a 	sub	r12,pc,106
80020186:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
8002018a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002018e:	5c 78       	castu.h	r8
80020190:	30 ab       	mov	r11,10
80020192:	10 9c       	mov	r12,r8
80020194:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020198:	fe cc 04 80 	sub	r12,pc,1152
8002019c:	f0 16 00 01 	mcall	r6[4]
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800201a0:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800201a4:	ec f8 00 c8 	ld.w	r8,r6[200]
800201a8:	11 88       	ld.ub	r8,r8[0x0]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800201aa:	f0 09 18 00 	cp.b	r9,r8
800201ae:	e0 81 00 fe 	brne	800203aa <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800201b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800201b6:	ec f8 00 c8 	ld.w	r8,r6[200]
800201ba:	11 98       	ld.ub	r8,r8[0x1]
		dbg_print("Asking for waypoint number ");
		dbg_print_num(packet.seq,10);
		dbg_print("\n");
		
		// Check if this message is for this system and subsystem
		if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800201bc:	f0 09 18 00 	cp.b	r9,r8
800201c0:	e0 81 00 f5 	brne	800203aa <send_waypoint+0x264>
		&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
		{
			sending_wp_num = packet.seq;
800201c4:	ef 08 ff fc 	ld.sh	r8,r7[-4]
800201c8:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800201cc:	ec f8 00 ac 	ld.w	r8,r6[172]
800201d0:	91 09       	st.w	r8[0x0],r9
			if (sending_wp_num < num_of_waypoint)
800201d2:	ef 19 ff f0 	ld.uh	r9,r7[-16]
800201d6:	ec f8 00 ac 	ld.w	r8,r6[172]
800201da:	70 08       	ld.w	r8,r8[0x0]
800201dc:	10 39       	cp.w	r9,r8
800201de:	e0 8a 00 e6 	brle	800203aa <send_waypoint+0x264>
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
800201e2:	ec f8 00 ac 	ld.w	r8,r6[172]
800201e6:	70 08       	ld.w	r8,r8[0x0]
800201e8:	10 99       	mov	r9,r8
800201ea:	12 98       	mov	r8,r9
800201ec:	a1 78       	lsl	r8,0x1
800201ee:	12 08       	add	r8,r9
800201f0:	a5 68       	lsl	r8,0x4
800201f2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800201f6:	f2 08 00 08 	add	r8,r9,r8
800201fa:	f0 e8 00 28 	ld.d	r8,r8[40]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800201fe:	10 9a       	mov	r10,r8
80020200:	12 9b       	mov	r11,r9
80020202:	f0 16 00 08 	mcall	r6[32]
80020206:	18 95       	mov	r5,r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80020208:	ec f8 00 ac 	ld.w	r8,r6[172]
8002020c:	70 08       	ld.w	r8,r8[0x0]
8002020e:	10 99       	mov	r9,r8
80020210:	12 98       	mov	r8,r9
80020212:	a1 78       	lsl	r8,0x1
80020214:	12 08       	add	r8,r9
80020216:	a5 68       	lsl	r8,0x4
80020218:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002021c:	f2 08 00 08 	add	r8,r9,r8
80020220:	f0 e8 00 20 	ld.d	r8,r8[32]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020224:	10 9a       	mov	r10,r8
80020226:	12 9b       	mov	r11,r9
80020228:	f0 16 00 08 	mcall	r6[32]
8002022c:	ef 4c ff dc 	st.w	r7[-36],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
80020230:	ec f8 00 ac 	ld.w	r8,r6[172]
80020234:	70 08       	ld.w	r8,r8[0x0]
80020236:	10 99       	mov	r9,r8
80020238:	12 98       	mov	r8,r9
8002023a:	a1 78       	lsl	r8,0x1
8002023c:	12 08       	add	r8,r9
8002023e:	a5 68       	lsl	r8,0x4
80020240:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020244:	f2 08 00 08 	add	r8,r9,r8
80020248:	f0 e8 00 18 	ld.d	r8,r8[24]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002024c:	10 9a       	mov	r10,r8
8002024e:	12 9b       	mov	r11,r9
80020250:	f0 16 00 08 	mcall	r6[32]
80020254:	ef 4c ff e0 	st.w	r7[-32],r12
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020258:	ec f8 00 ac 	ld.w	r8,r6[172]
8002025c:	70 08       	ld.w	r8,r8[0x0]
8002025e:	10 99       	mov	r9,r8
80020260:	12 98       	mov	r8,r9
80020262:	a1 78       	lsl	r8,0x1
80020264:	12 08       	add	r8,r9
80020266:	a5 68       	lsl	r8,0x4
80020268:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002026c:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020270:	70 58       	ld.w	r8,r8[0x14]
80020272:	ef 48 ff e4 	st.w	r7[-28],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020276:	ec f8 00 ac 	ld.w	r8,r6[172]
8002027a:	70 08       	ld.w	r8,r8[0x0]
8002027c:	10 99       	mov	r9,r8
8002027e:	12 98       	mov	r8,r9
80020280:	a1 78       	lsl	r8,0x1
80020282:	12 08       	add	r8,r9
80020284:	a5 68       	lsl	r8,0x4
80020286:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002028a:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002028e:	70 48       	ld.w	r8,r8[0x10]
80020290:	ef 48 ff e8 	st.w	r7[-24],r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
80020294:	ec f8 00 ac 	ld.w	r8,r6[172]
80020298:	70 08       	ld.w	r8,r8[0x0]
8002029a:	10 99       	mov	r9,r8
8002029c:	12 98       	mov	r8,r9
8002029e:	a1 78       	lsl	r8,0x1
800202a0:	12 08       	add	r8,r9
800202a2:	a5 68       	lsl	r8,0x4
800202a4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202a8:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202ac:	70 30       	ld.w	r0,r8[0xc]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
800202ae:	ec f8 00 ac 	ld.w	r8,r6[172]
800202b2:	70 08       	ld.w	r8,r8[0x0]
800202b4:	10 99       	mov	r9,r8
800202b6:	12 98       	mov	r8,r9
800202b8:	a1 78       	lsl	r8,0x1
800202ba:	12 08       	add	r8,r9
800202bc:	a5 68       	lsl	r8,0x4
800202be:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202c2:	f2 08 00 08 	add	r8,r9,r8
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202c6:	70 21       	ld.w	r1,r8[0x8]
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800202c8:	ec f8 00 ac 	ld.w	r8,r6[172]
800202cc:	70 08       	ld.w	r8,r8[0x0]
800202ce:	10 99       	mov	r9,r8
800202d0:	12 98       	mov	r8,r9
800202d2:	a1 78       	lsl	r8,0x1
800202d4:	12 08       	add	r8,r9
800202d6:	a5 68       	lsl	r8,0x4
800202d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202dc:	f2 08 00 08 	add	r8,r9,r8
800202e0:	11 d8       	ld.ub	r8,r8[0x5]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202e2:	10 92       	mov	r2,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
800202e4:	ec f8 00 ac 	ld.w	r8,r6[172]
800202e8:	70 08       	ld.w	r8,r8[0x0]
800202ea:	10 99       	mov	r9,r8
800202ec:	12 98       	mov	r8,r9
800202ee:	a1 78       	lsl	r8,0x1
800202f0:	12 08       	add	r8,r9
800202f2:	a5 68       	lsl	r8,0x4
800202f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800202f8:	f2 08 00 08 	add	r8,r9,r8
800202fc:	11 c8       	ld.ub	r8,r8[0x4]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
800202fe:	10 93       	mov	r3,r8
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
80020300:	ec f8 00 ac 	ld.w	r8,r6[172]
80020304:	70 08       	ld.w	r8,r8[0x0]
80020306:	10 99       	mov	r9,r8
80020308:	12 98       	mov	r8,r9
8002030a:	a1 78       	lsl	r8,0x1
8002030c:	12 08       	add	r8,r9
8002030e:	a5 68       	lsl	r8,0x4
80020310:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020314:	f2 08 00 08 	add	r8,r9,r8
80020318:	90 18       	ld.sh	r8,r8[0x2]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
8002031a:	fd d8 c0 10 	bfextu	lr,r8,0x0,0x10
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
8002031e:	ec f8 00 ac 	ld.w	r8,r6[172]
80020322:	70 08       	ld.w	r8,r8[0x0]
80020324:	10 99       	mov	r9,r8
80020326:	12 98       	mov	r8,r9
80020328:	a1 78       	lsl	r8,0x1
8002032a:	12 08       	add	r8,r9
8002032c:	a5 68       	lsl	r8,0x4
8002032e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020332:	f2 08 00 08 	add	r8,r9,r8
80020336:	11 88       	ld.ub	r8,r8[0x0]
		{
			sending_wp_num = packet.seq;
			if (sending_wp_num < num_of_waypoint)
			{
				// mavlink_msg_mission_item_send(mavlink_channel_t chan, uint8_t target_system, uint8_t target_component, uint16_t seq, uint8_t frame, uint16_t command, uint8_t current, uint8_t autocontinue, float param1, float param2, float param3, float param4, float x, float y, float z)
				mavlink_msg_mission_item_send(MAVLINK_COMM_0, rec->msg.sysid, rec->msg.compid, packet.seq,
80020338:	10 9c       	mov	r12,r8
8002033a:	ef 08 ff fc 	ld.sh	r8,r7[-4]
8002033e:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020342:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020346:	11 e8       	ld.ub	r8,r8[0x6]
80020348:	10 9a       	mov	r10,r8
8002034a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002034e:	11 d8       	ld.ub	r8,r8[0x5]
80020350:	10 9b       	mov	r11,r8
80020352:	1a d5       	st.w	--sp,r5
80020354:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020358:	1a d8       	st.w	--sp,r8
8002035a:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002035e:	1a d8       	st.w	--sp,r8
80020360:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020364:	1a d8       	st.w	--sp,r8
80020366:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002036a:	1a d8       	st.w	--sp,r8
8002036c:	1a d0       	st.w	--sp,r0
8002036e:	1a d1       	st.w	--sp,r1
80020370:	1a d2       	st.w	--sp,r2
80020372:	1a d3       	st.w	--sp,r3
80020374:	1a de       	st.w	--sp,lr
80020376:	18 98       	mov	r8,r12
80020378:	30 0c       	mov	r12,0
8002037a:	fe b0 f5 e3 	rcall	8001ef40 <mavlink_msg_mission_item_send>
8002037e:	2f 6d       	sub	sp,-40
				waypoint[sending_wp_num].frame,   waypoint[sending_wp_num].wp_id,
				waypoint[sending_wp_num].current, waypoint[sending_wp_num].autocontinue,
				waypoint[sending_wp_num].param1,  waypoint[sending_wp_num].param2,       waypoint[sending_wp_num].param3,    waypoint[sending_wp_num].param4,
				waypoint[sending_wp_num].x,       waypoint[sending_wp_num].y,            waypoint[sending_wp_num].z);
				
				dbg_print("Sending waypoint ");
80020380:	fe cc 02 4c 	sub	r12,pc,588
80020384:	f0 16 00 01 	mcall	r6[4]
				dbg_print_num(sending_wp_num, 10);
80020388:	ec f8 00 ac 	ld.w	r8,r6[172]
8002038c:	70 08       	ld.w	r8,r8[0x0]
8002038e:	30 ab       	mov	r11,10
80020390:	10 9c       	mov	r12,r8
80020392:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
80020396:	fe cc 06 7e 	sub	r12,pc,1662
8002039a:	f0 16 00 01 	mcall	r6[4]
				
				start_timeout = get_millis();
8002039e:	f0 16 00 0f 	mcall	r6[60]
800203a2:	18 99       	mov	r9,r12
800203a4:	ec f8 01 84 	ld.w	r8,r6[388]
800203a8:	91 09       	st.w	r8[0x0],r9
				
				//sending_wp_num += 1;
			}			
		}
	}	
}
800203aa:	2f 7d       	sub	sp,-36
800203ac:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
800203b0:	80 01       	ld.sh	r1,r0[0x0]
800203b2:	ff d6 41 63 	ldins.b	r6:b,pc[355]
800203b6:	6b 6e       	ld.w	lr,r5[0x58]
800203b8:	6f 77       	ld.w	r7,r7[0x5c]
800203ba:	6c 65       	ld.w	r5,r6[0x18]
800203bc:	64 67       	ld.w	r7,r2[0x18]
800203be:	6d 65       	ld.w	r5,r6[0x58]
800203c0:	6e 74       	ld.w	r4,r7[0x1c]
800203c2:	20 72       	sub	r2,7
800203c4:	65 63       	ld.w	r3,r2[0x58]
800203c6:	65 69       	ld.w	r9,r2[0x58]
800203c8:	76 65       	ld.w	r5,r11[0x18]
800203ca:	64 2c       	ld.w	r12,r2[0x8]
800203cc:	20 65       	sub	r5,6
800203ce:	6e 64       	ld.w	r4,r7[0x18]
800203d0:	20 6f       	sub	pc,6
800203d2:	66 20       	ld.w	r0,r3[0x8]
800203d4:	77 61       	ld.w	r1,r11[0x58]
800203d6:	79 70       	ld.w	r0,r12[0x5c]
800203d8:	6f 69       	ld.w	r9,r7[0x58]
800203da:	6e 74       	ld.w	r4,r7[0x1c]
800203dc:	20 73       	sub	r3,7
800203de:	65 6e       	ld.w	lr,r2[0x58]
800203e0:	64 69       	ld.w	r9,r2[0x18]
800203e2:	6e 67       	ld.w	r7,r7[0x18]
800203e4:	2e 0a       	sub	r10,-32
	...

800203e8 <receive_ack_msg>:

void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
800203e8:	eb cd 40 c0 	pushm	r6-r7,lr
800203ec:	1a 97       	mov	r7,sp
800203ee:	20 3d       	sub	sp,12
800203f0:	49 76       	lddpc	r6,8002044c <receive_ack_msg+0x64>
800203f2:	1e 26       	rsub	r6,pc
800203f4:	ef 4c ff f8 	st.w	r7[-8],r12
800203f8:	ef 4b ff f4 	st.w	r7[-12],r11
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
800203fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020400:	ee c9 00 03 	sub	r9,r7,3
80020404:	12 9b       	mov	r11,r9
80020406:	10 9c       	mov	r12,r8
80020408:	fe b0 fa 20 	rcall	8001f848 <mavlink_msg_mission_ack_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8002040c:	ef 39 ff fd 	ld.ub	r9,r7[-3]
80020410:	ec f8 00 c8 	ld.w	r8,r6[200]
80020414:	11 88       	ld.ub	r8,r8[0x0]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020416:	f0 09 18 00 	cp.b	r9,r8
8002041a:	c1 51       	brne	80020444 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
8002041c:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020420:	ec f8 00 c8 	ld.w	r8,r6[200]
80020424:	11 98       	ld.ub	r8,r8[0x1]
void receive_ack_msg(Mavlink_Received_t* rec, bool* waypoint_sending)
{
	mavlink_mission_ack_t packet;
	mavlink_msg_mission_ack_decode(&rec->msg, &packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
80020426:	f0 09 18 00 	cp.b	r9,r8
8002042a:	c0 d1       	brne	80020444 <receive_ack_msg+0x5c>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*waypoint_sending = false;
8002042c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020430:	30 08       	mov	r8,0
80020432:	b2 88       	st.b	r9[0x0],r8
		sending_wp_num = 0;
80020434:	ec f8 00 ac 	ld.w	r8,r6[172]
80020438:	30 09       	mov	r9,0
8002043a:	91 09       	st.w	r8[0x0],r9
		dbg_print("Acknowledgment received, end of waypoint sending.\n");
8002043c:	fe cc 00 88 	sub	r12,pc,136
80020440:	f0 16 00 01 	mcall	r6[4]
	}
}
80020444:	2f dd       	sub	sp,-12
80020446:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002044a:	00 00       	add	r0,r0
8002044c:	80 02       	ld.sh	r2,r0[0x0]
8002044e:	02 76       	tst	r6,r1
80020450:	52 65       	stdsp	sp[0x98],r5
80020452:	63 65       	ld.w	r5,r1[0x58]
80020454:	69 76       	ld.w	r6,r4[0x5c]
80020456:	69 6e       	ld.w	lr,r4[0x58]
80020458:	67 20       	ld.w	r0,r3[0x48]
8002045a:	00 00       	add	r0,r0
8002045c:	20 6e       	sub	lr,6
8002045e:	65 77       	ld.w	r7,r2[0x5c]
80020460:	20 77       	sub	r7,7
80020462:	61 79       	ld.w	r9,r0[0x5c]
80020464:	70 6f       	ld.w	pc,r8[0x18]
80020466:	69 6e       	ld.w	lr,r4[0x58]
80020468:	74 73       	ld.w	r3,r10[0x1c]
8002046a:	2e 20       	sub	r0,-30
8002046c:	00 00       	add	r0,r0
8002046e:	00 00       	add	r0,r0
80020470:	4e 65       	lddpc	r5,80020608 <receive_count+0x162>
80020472:	77 20       	ld.w	r0,r11[0x48]
80020474:	74 6f       	ld.w	pc,r10[0x18]
80020476:	74 61       	ld.w	r1,r10[0x18]
80020478:	6c 20       	ld.w	r0,r6[0x8]
8002047a:	6e 75       	ld.w	r5,r7[0x1c]
8002047c:	6d 62       	ld.w	r2,r6[0x58]
8002047e:	65 72       	ld.w	r2,r2[0x5c]
80020480:	20 6f       	sub	pc,6
80020482:	66 20       	ld.w	r0,r3[0x8]
80020484:	77 61       	ld.w	r1,r11[0x58]
80020486:	79 70       	ld.w	r0,r12[0x5c]
80020488:	6f 69       	ld.w	r9,r7[0x58]
8002048a:	6e 74       	ld.w	r4,r7[0x1c]
8002048c:	73 3a       	ld.w	r10,r9[0x4c]
8002048e:	00 00       	add	r0,r0
80020490:	41 73       	lddsp	r3,sp[0x5c]
80020492:	6b 69       	ld.w	r9,r5[0x58]
80020494:	6e 67       	ld.w	r7,r7[0x18]
80020496:	20 66       	sub	r6,6
80020498:	6f 72       	ld.w	r2,r7[0x5c]
8002049a:	20 77       	sub	r7,7
8002049c:	61 79       	ld.w	r9,r0[0x5c]
8002049e:	70 6f       	ld.w	pc,r8[0x18]
800204a0:	69 6e       	ld.w	lr,r4[0x58]
800204a2:	74 20       	ld.w	r0,r10[0x8]
	...

800204a6 <receive_count>:

void receive_count(Mavlink_Received_t* rec, uint16_t* number_of_waypoints, bool* waypoint_receiving, bool* waypoint_sending)
{
800204a6:	eb cd 40 c0 	pushm	r6-r7,lr
800204aa:	1a 97       	mov	r7,sp
800204ac:	20 5d       	sub	sp,20
800204ae:	4d 46       	lddpc	r6,800205fc <receive_count+0x156>
800204b0:	1e 26       	rsub	r6,pc
800204b2:	ef 4c ff f8 	st.w	r7[-8],r12
800204b6:	ef 4b ff f4 	st.w	r7[-12],r11
800204ba:	ef 4a ff f0 	st.w	r7[-16],r10
800204be:	ef 49 ff ec 	st.w	r7[-20],r9
	mavlink_mission_count_t packet;
	mavlink_msg_mission_count_decode(&rec->msg, &packet);
800204c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800204c6:	ee c9 00 04 	sub	r9,r7,4
800204ca:	12 9b       	mov	r11,r9
800204cc:	10 9c       	mov	r12,r8
800204ce:	fe b0 f8 e3 	rcall	8001f694 <mavlink_msg_mission_count_decode>
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800204d2:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800204d6:	ec f8 00 c8 	ld.w	r8,r6[200]
800204da:	11 88       	ld.ub	r8,r8[0x0]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800204dc:	f0 09 18 00 	cp.b	r9,r8
800204e0:	e0 81 00 8b 	brne	800205f6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800204e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800204e8:	ec f8 00 c8 	ld.w	r8,r6[200]
800204ec:	11 98       	ld.ub	r8,r8[0x1]
	//dbg_print_num(packet.target_system,10);
	//dbg_print_num(mavlink_mission_planner.sysid,10);
	//dbg_print_num(packet.target_component,10);
	//dbg_print_num(mavlink_mission_planner.compid,10);
	//dbg_print("\n");
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_mission_planner.sysid
800204ee:	f0 09 18 00 	cp.b	r9,r8
800204f2:	e0 81 00 82 	brne	800205f6 <receive_count+0x150>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		if (*waypoint_receiving == false)
800204f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800204fa:	11 88       	ld.ub	r8,r8[0x0]
800204fc:	ec 18 00 01 	eorl	r8,0x1
80020500:	5c 58       	castu.b	r8
80020502:	c5 a0       	breq	800205b6 <receive_count+0x110>
		{
			// comment these lines if you want to add new waypoints to the list instead of overwriting them
			num_waypoint_onboard = 0;
80020504:	ec f9 01 28 	ld.w	r9,r6[296]
80020508:	30 08       	mov	r8,0
8002050a:	b2 08       	st.h	r9[0x0],r8
			*number_of_waypoints =0;
8002050c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020510:	30 08       	mov	r8,0
80020512:	b2 08       	st.h	r9[0x0],r8
			//---//
			
			if ((packet.count + *number_of_waypoints) > MAX_WAYPOINTS)
80020514:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020518:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002051c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020520:	90 08       	ld.sh	r8,r8[0x0]
80020522:	5c 78       	castu.h	r8
80020524:	f2 08 00 08 	add	r8,r9,r8
80020528:	58 a8       	cp.w	r8,10
8002052a:	e0 8a 00 0a 	brle	8002053e <receive_count+0x98>
			{
				packet.count = MAX_WAYPOINTS - *number_of_waypoints;
8002052e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020532:	90 08       	ld.sh	r8,r8[0x0]
80020534:	f0 08 11 0a 	rsub	r8,r8,10
80020538:	5c 88       	casts.h	r8
8002053a:	ef 58 ff fc 	st.h	r7[-4],r8
			}
			*number_of_waypoints =  packet.count+ *number_of_waypoints;
8002053e:	ef 09 ff fc 	ld.sh	r9,r7[-4]
80020542:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020546:	90 08       	ld.sh	r8,r8[0x0]
80020548:	f2 08 00 08 	add	r8,r9,r8
8002054c:	5c 88       	casts.h	r8
8002054e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020552:	b2 08       	st.h	r9[0x0],r8
			dbg_print("Receiving ");
80020554:	fe cc 01 04 	sub	r12,pc,260
80020558:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.count,10);
8002055c:	ef 08 ff fc 	ld.sh	r8,r7[-4]
80020560:	5c 78       	castu.h	r8
80020562:	30 ab       	mov	r11,10
80020564:	10 9c       	mov	r12,r8
80020566:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" new waypoints. ");
8002056a:	fe cc 01 0e 	sub	r12,pc,270
8002056e:	f0 16 00 01 	mcall	r6[4]
			dbg_print("New total number of waypoints:");
80020572:	fe cc 01 02 	sub	r12,pc,258
80020576:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(*number_of_waypoints,10);
8002057a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002057e:	90 08       	ld.sh	r8,r8[0x0]
80020580:	5c 78       	castu.h	r8
80020582:	30 ab       	mov	r11,10
80020584:	10 9c       	mov	r12,r8
80020586:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002058a:	fe cc 08 72 	sub	r12,pc,2162
8002058e:	f0 16 00 01 	mcall	r6[4]
			
			*waypoint_receiving   = true;
80020592:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020596:	30 18       	mov	r8,1
80020598:	b2 88       	st.b	r9[0x0],r8
			*waypoint_sending     = false;
8002059a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002059e:	30 08       	mov	r8,0
800205a0:	b2 88       	st.b	r9[0x0],r8
			waypoint_request_number = 0;
800205a2:	ec f8 01 04 	ld.w	r8,r6[260]
800205a6:	30 09       	mov	r9,0
800205a8:	91 09       	st.w	r8[0x0],r9
			
			
			start_timeout = get_millis();
800205aa:	f0 16 00 0f 	mcall	r6[60]
800205ae:	18 99       	mov	r9,r12
800205b0:	ec f8 01 84 	ld.w	r8,r6[388]
800205b4:	91 09       	st.w	r8[0x0],r9
		}
		
		mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
800205b6:	ec f8 01 04 	ld.w	r8,r6[260]
800205ba:	70 08       	ld.w	r8,r8[0x0]
800205bc:	5c 88       	casts.h	r8
800205be:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800205c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205c6:	11 e8       	ld.ub	r8,r8[0x6]
800205c8:	10 9a       	mov	r10,r8
800205ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800205ce:	11 d8       	ld.ub	r8,r8[0x5]
800205d0:	10 9b       	mov	r11,r8
800205d2:	30 0c       	mov	r12,0
800205d4:	fe b0 f6 bc 	rcall	8001f34c <mavlink_msg_mission_request_send>
		
		dbg_print("Asking for waypoint ");
800205d8:	fe cc 01 48 	sub	r12,pc,328
800205dc:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
800205e0:	ec f8 01 04 	ld.w	r8,r6[260]
800205e4:	70 08       	ld.w	r8,r8[0x0]
800205e6:	30 ab       	mov	r11,10
800205e8:	10 9c       	mov	r12,r8
800205ea:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");	
800205ee:	fe cc 08 d6 	sub	r12,pc,2262
800205f2:	f0 16 00 01 	mcall	r6[4]
	}
	
}
800205f6:	2f bd       	sub	sp,-20
800205f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800205fc:	80 02       	ld.sh	r2,r0[0x0]
800205fe:	03 34       	ld.ub	r4,r1++
80020600:	4e 65       	lddpc	r5,80020798 <receive_waypoint+0x102>
80020602:	77 20       	ld.w	r0,r11[0x48]
80020604:	77 61       	ld.w	r1,r11[0x58]
80020606:	79 70       	ld.w	r0,r12[0x5c]
80020608:	6f 69       	ld.w	r9,r7[0x58]
8002060a:	6e 74       	ld.w	r4,r7[0x1c]
8002060c:	20 72       	sub	r2,7
8002060e:	65 63       	ld.w	r3,r2[0x58]
80020610:	65 69       	ld.w	r9,r2[0x58]
80020612:	76 65       	ld.w	r5,r11[0x18]
80020614:	64 20       	ld.w	r0,r2[0x8]
80020616:	00 00       	add	r0,r0
80020618:	20 72       	sub	r2,7
8002061a:	65 71       	ld.w	r1,r2[0x5c]
8002061c:	75 65       	ld.w	r5,r10[0x58]
8002061e:	73 74       	ld.w	r4,r9[0x5c]
80020620:	65 64       	ld.w	r4,r2[0x58]
80020622:	20 6e       	sub	lr,6
80020624:	75 6d       	ld.w	sp,r10[0x58]
80020626:	20 3a       	sub	r10,3
80020628:	00 00       	add	r0,r0
8002062a:	00 00       	add	r0,r0
8002062c:	20 72       	sub	r2,7
8002062e:	65 63       	ld.w	r3,r2[0x58]
80020630:	65 69       	ld.w	r9,r2[0x58]
80020632:	76 69       	ld.w	r9,r11[0x18]
80020634:	6e 67       	ld.w	r7,r7[0x18]
80020636:	20 6e       	sub	lr,6
80020638:	75 6d       	ld.w	sp,r10[0x58]
8002063a:	20 3a       	sub	r10,3
8002063c:	00 00       	add	r0,r0
8002063e:	00 00       	add	r0,r0
80020640:	52 65       	stdsp	sp[0x98],r5
80020642:	63 65       	ld.w	r5,r1[0x58]
80020644:	69 76       	ld.w	r6,r4[0x5c]
80020646:	69 6e       	ld.w	lr,r4[0x58]
80020648:	67 20       	ld.w	r0,r3[0x48]
8002064a:	67 6f       	ld.w	pc,r3[0x58]
8002064c:	6f 64       	ld.w	r4,r7[0x58]
8002064e:	20 77       	sub	r7,7
80020650:	61 79       	ld.w	r9,r0[0x5c]
80020652:	70 6f       	ld.w	pc,r8[0x18]
80020654:	69 6e       	ld.w	lr,r4[0x58]
80020656:	74 2c       	ld.w	r12,r10[0x8]
80020658:	20 6e       	sub	lr,6
8002065a:	75 6d       	ld.w	sp,r10[0x58]
8002065c:	62 65       	ld.w	r5,r1[0x18]
8002065e:	72 20       	ld.w	r0,r9[0x8]
80020660:	00 00       	add	r0,r0
80020662:	00 00       	add	r0,r0
80020664:	20 6f       	sub	pc,6
80020666:	66 20       	ld.w	r0,r3[0x8]
80020668:	00 00       	add	r0,r0
8002066a:	00 00       	add	r0,r0
8002066c:	66 6c       	ld.w	r12,r3[0x18]
8002066e:	69 67       	ld.w	r7,r4[0x58]
80020670:	68 74       	ld.w	r4,r4[0x1c]
80020672:	20 70       	sub	r0,7
80020674:	6c 61       	ld.w	r1,r6[0x18]
80020676:	6e 20       	ld.w	r0,r7[0x8]
80020678:	72 65       	ld.w	r5,r9[0x18]
8002067a:	63 65       	ld.w	r5,r1[0x58]
8002067c:	69 76       	ld.w	r6,r4[0x5c]
8002067e:	65 64       	ld.w	r4,r2[0x58]
80020680:	21 0a       	sub	r10,16
80020682:	00 00       	add	r0,r0
80020684:	41 63       	lddsp	r3,sp[0x58]
80020686:	6b 20       	ld.w	r0,r5[0x48]
80020688:	6e 6f       	ld.w	pc,r7[0x18]
8002068a:	74 20       	ld.w	r0,r10[0x8]
8002068c:	72 65       	ld.w	r5,r9[0x18]
8002068e:	63 65       	ld.w	r5,r1[0x58]
80020690:	69 76       	ld.w	r6,r4[0x5c]
80020692:	65 64       	ld.w	r4,r2[0x58]
80020694:	21 00       	sub	r0,16

80020696 <receive_waypoint>:

void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
80020696:	eb cd 40 c0 	pushm	r6-r7,lr
8002069a:	1a 97       	mov	r7,sp
8002069c:	21 bd       	sub	sp,108
8002069e:	fe f6 03 02 	ld.w	r6,pc[770]
800206a2:	1e 26       	rsub	r6,pc
800206a4:	ef 4c ff a0 	st.w	r7[-96],r12
800206a8:	ef 4b ff 9c 	st.w	r7[-100],r11
800206ac:	14 98       	mov	r8,r10
800206ae:	ef 49 ff 94 	st.w	r7[-108],r9
800206b2:	ef 58 ff 98 	st.h	r7[-104],r8
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
800206b6:	ee f8 ff a0 	ld.w	r8,r7[-96]
800206ba:	ee c9 00 2c 	sub	r9,r7,44
800206be:	12 9b       	mov	r11,r9
800206c0:	10 9c       	mov	r12,r8
800206c2:	fe b0 f5 cb 	rcall	8001f258 <mavlink_msg_mission_item_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206c6:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800206ca:	ec f8 00 74 	ld.w	r8,r6[116]
800206ce:	11 88       	ld.ub	r8,r8[0x0]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800206d0:	f0 09 18 00 	cp.b	r9,r8
800206d4:	e0 81 01 63 	brne	8002099a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
800206d8:	ef 39 ff f5 	ld.ub	r9,r7[-11]
800206dc:	ec f8 00 c8 	ld.w	r8,r6[200]
800206e0:	11 98       	ld.ub	r8,r8[0x1]
void receive_waypoint(Mavlink_Received_t* rec,  waypoint_struct waypoint_list[], uint16_t number_of_waypoints, bool* waypoint_receiving)
{
	mavlink_mission_item_t packet;
	mavlink_msg_mission_item_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
800206e2:	f0 09 18 00 	cp.b	r9,r8
800206e6:	e0 81 01 5a 	brne	8002099a <receive_waypoint+0x304>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		start_timeout = get_millis();
800206ea:	f0 16 00 0f 	mcall	r6[60]
800206ee:	18 99       	mov	r9,r12
800206f0:	ec f8 01 84 	ld.w	r8,r6[388]
800206f4:	91 09       	st.w	r8[0x0],r9
		
		waypoint_struct new_waypoint;
		
		new_waypoint.wp_id = packet.command;
800206f6:	ef 08 ff f2 	ld.sh	r8,r7[-14]
800206fa:	ef 58 ff a6 	st.h	r7[-90],r8
		
		new_waypoint.x = packet.x; // longitude
800206fe:	ee f8 ff e4 	ld.w	r8,r7[-28]
80020702:	10 9c       	mov	r12,r8
80020704:	f0 16 00 02 	mcall	r6[8]
80020708:	14 98       	mov	r8,r10
8002070a:	16 99       	mov	r9,r11
8002070c:	ee e9 ff bc 	st.d	r7[-68],r8
		new_waypoint.y = packet.y; // latitude 
80020710:	ee f8 ff e8 	ld.w	r8,r7[-24]
80020714:	10 9c       	mov	r12,r8
80020716:	f0 16 00 02 	mcall	r6[8]
8002071a:	14 98       	mov	r8,r10
8002071c:	16 99       	mov	r9,r11
8002071e:	ee e9 ff c4 	st.d	r7[-60],r8
		new_waypoint.z = packet.z; // altitude
80020722:	ee f8 ff ec 	ld.w	r8,r7[-20]
80020726:	10 9c       	mov	r12,r8
80020728:	f0 16 00 02 	mcall	r6[8]
8002072c:	14 98       	mov	r8,r10
8002072e:	16 99       	mov	r9,r11
80020730:	ee e9 ff cc 	st.d	r7[-52],r8
		
		new_waypoint.autocontinue = packet.autocontinue;
80020734:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80020738:	ef 68 ff a9 	st.b	r7[-87],r8
		new_waypoint.frame = packet.frame;
8002073c:	ef 38 ff f6 	ld.ub	r8,r7[-10]
80020740:	ef 68 ff a4 	st.b	r7[-92],r8
		
		new_waypoint.current = packet.current;
80020744:	ef 38 ff f7 	ld.ub	r8,r7[-9]
80020748:	ef 68 ff a8 	st.b	r7[-88],r8
		
		new_waypoint.param1 = packet.param1;
8002074c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80020750:	ef 48 ff ac 	st.w	r7[-84],r8
		new_waypoint.param2 = packet.param2;
80020754:	ee f8 ff d8 	ld.w	r8,r7[-40]
80020758:	ef 48 ff b0 	st.w	r7[-80],r8
		new_waypoint.param3 = packet.param3;
8002075c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80020760:	ef 48 ff b4 	st.w	r7[-76],r8
		new_waypoint.param4 = packet.param4;
80020764:	ee f8 ff e0 	ld.w	r8,r7[-32]
80020768:	ef 48 ff b8 	st.w	r7[-72],r8
		
		dbg_print("New waypoint received ");
8002076c:	fe cc 01 6c 	sub	r12,pc,364
80020770:	f0 16 00 01 	mcall	r6[4]
 		//dbg_print_num(packet.current,10);
 		//dbg_print(" Seq :");
 		//dbg_print_num(packet.seq,10);
		//dbg_print(" command id :");
		//dbg_print_num(packet.command,10);
		dbg_print(" requested num :");
80020774:	fe cc 01 5c 	sub	r12,pc,348
80020778:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(waypoint_request_number,10);
8002077c:	ec f8 01 04 	ld.w	r8,r6[260]
80020780:	70 08       	ld.w	r8,r8[0x0]
80020782:	30 ab       	mov	r11,10
80020784:	10 9c       	mov	r12,r8
80020786:	f0 16 00 04 	mcall	r6[16]
		dbg_print(" receiving num :");
8002078a:	fe cc 01 5e 	sub	r12,pc,350
8002078e:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.seq,10);
80020792:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020796:	5c 78       	castu.h	r8
80020798:	30 ab       	mov	r11,10
8002079a:	10 9c       	mov	r12,r8
8002079c:	f0 16 00 04 	mcall	r6[16]
		//dbg_print(" is it receiving :");
		//dbg_print_num(waypoint_receiving,10); // boolean value
		dbg_print("\n");
800207a0:	fe cc 0a 88 	sub	r12,pc,2696
800207a4:	f0 16 00 01 	mcall	r6[4]
			//new_waypoint.alt = packet.param2;
			//new_waypoint.param1 = packet.param1;
			//break;
		//}
		
		if(packet.current == 2) {                                               //current = 2 is a flag to tell us this is a "guided mode" waypoint and not for the mission
800207a8:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800207ac:	30 28       	mov	r8,2
800207ae:	f0 09 18 00 	cp.b	r9,r8
800207b2:	c0 e1       	brne	800207ce <receive_waypoint+0x138>

			// set wp_nav's destination
			//wp_nav.set_destination(pv_location_to_vector(tell_command));

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800207b4:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207b8:	11 e8       	ld.ub	r8,r8[0x6]
800207ba:	10 9a       	mov	r10,r8
800207bc:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207c0:	11 d8       	ld.ub	r8,r8[0x5]
800207c2:	30 19       	mov	r9,1
800207c4:	10 9b       	mov	r11,r8
800207c6:	30 0c       	mov	r12,0
800207c8:	fe b0 f7 e8 	rcall	8001f798 <mavlink_msg_mission_ack_send>
800207cc:	ce 78       	rjmp	8002099a <receive_waypoint+0x304>

		} else if(packet.current == 3){                                    //current = 3 is a flag to tell us this is a alt change only
800207ce:	ef 39 ff f7 	ld.ub	r9,r7[-9]
800207d2:	30 38       	mov	r8,3
800207d4:	f0 09 18 00 	cp.b	r9,r8
800207d8:	c0 e1       	brne	800207f4 <receive_waypoint+0x15e>
			// To-Do: update target altitude for loiter or waypoint controller depending upon nav mode
			// similar to how do_change_alt works
			//wp_nav.set_desired_alt(new_waypoint.alt);

			// verify we received the command
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0, rec->msg.sysid,rec->msg.compid, MAV_CMD_ACK_OK);
800207da:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207de:	11 e8       	ld.ub	r8,r8[0x6]
800207e0:	10 9a       	mov	r10,r8
800207e2:	ee f8 ff a0 	ld.w	r8,r7[-96]
800207e6:	11 d8       	ld.ub	r8,r8[0x5]
800207e8:	30 19       	mov	r9,1
800207ea:	10 9b       	mov	r11,r8
800207ec:	30 0c       	mov	r12,0
800207ee:	fe b0 f7 d5 	rcall	8001f798 <mavlink_msg_mission_ack_send>
800207f2:	cd 48       	rjmp	8002099a <receive_waypoint+0x304>

		} else {
			// Check if receiving waypoints
			if (*waypoint_receiving){
800207f4:	ee f8 ff 94 	ld.w	r8,r7[-108]
800207f8:	11 88       	ld.ub	r8,r8[0x0]
800207fa:	58 08       	cp.w	r8,0
800207fc:	e0 80 00 bb 	breq	80020972 <receive_waypoint+0x2dc>

				// check if this is the requested waypoint
				if (packet.seq == waypoint_request_number)
80020800:	ef 08 ff f0 	ld.sh	r8,r7[-16]
80020804:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
80020808:	ec f8 01 04 	ld.w	r8,r6[260]
8002080c:	70 08       	ld.w	r8,r8[0x0]
8002080e:	10 39       	cp.w	r9,r8
80020810:	e0 81 00 c5 	brne	8002099a <receive_waypoint+0x304>
				{
					dbg_print("Receiving good waypoint, number ");
80020814:	fe cc 01 d4 	sub	r12,pc,468
80020818:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(waypoint_request_number,10);
8002081c:	ec f8 01 04 	ld.w	r8,r6[260]
80020820:	70 08       	ld.w	r8,r8[0x0]
80020822:	30 ab       	mov	r11,10
80020824:	10 9c       	mov	r12,r8
80020826:	f0 16 00 04 	mcall	r6[16]
					dbg_print(" of ");
8002082a:	fe cc 01 c6 	sub	r12,pc,454
8002082e:	f0 16 00 01 	mcall	r6[4]
					dbg_print_num(number_of_waypoints-num_waypoint_onboard,10);
80020832:	ef 19 ff 98 	ld.uh	r9,r7[-104]
80020836:	ec f8 01 28 	ld.w	r8,r6[296]
8002083a:	90 08       	ld.sh	r8,r8[0x0]
8002083c:	5c 78       	castu.h	r8
8002083e:	f2 08 01 08 	sub	r8,r9,r8
80020842:	30 ab       	mov	r11,10
80020844:	10 9c       	mov	r12,r8
80020846:	f0 16 00 04 	mcall	r6[16]
					dbg_print("\n");
8002084a:	fe cc 0b 32 	sub	r12,pc,2866
8002084e:	f0 16 00 01 	mcall	r6[4]
					
				    waypoint_list[num_waypoint_onboard + waypoint_request_number] = new_waypoint;
80020852:	ec f8 01 28 	ld.w	r8,r6[296]
80020856:	90 08       	ld.sh	r8,r8[0x0]
80020858:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002085c:	ec f8 01 04 	ld.w	r8,r6[260]
80020860:	70 08       	ld.w	r8,r8[0x0]
80020862:	f2 08 00 08 	add	r8,r9,r8
80020866:	10 99       	mov	r9,r8
80020868:	12 98       	mov	r8,r9
8002086a:	a1 78       	lsl	r8,0x1
8002086c:	12 08       	add	r8,r9
8002086e:	a5 68       	lsl	r8,0x4
80020870:	ee f9 ff 9c 	ld.w	r9,r7[-100]
80020874:	f2 08 00 08 	add	r8,r9,r8
80020878:	10 9b       	mov	r11,r8
8002087a:	ee ca 00 5c 	sub	r10,r7,92
8002087e:	f6 c8 00 00 	sub	r8,r11,0
80020882:	f4 c9 00 00 	sub	r9,r10,0
80020886:	72 0c       	ld.w	r12,r9[0x0]
80020888:	91 0c       	st.w	r8[0x0],r12
8002088a:	72 1c       	ld.w	r12,r9[0x4]
8002088c:	91 1c       	st.w	r8[0x4],r12
8002088e:	72 2c       	ld.w	r12,r9[0x8]
80020890:	91 2c       	st.w	r8[0x8],r12
80020892:	72 39       	ld.w	r9,r9[0xc]
80020894:	91 39       	st.w	r8[0xc],r9
80020896:	f6 c8 ff f0 	sub	r8,r11,-16
8002089a:	f4 c9 ff f0 	sub	r9,r10,-16
8002089e:	72 0c       	ld.w	r12,r9[0x0]
800208a0:	91 0c       	st.w	r8[0x0],r12
800208a2:	72 1c       	ld.w	r12,r9[0x4]
800208a4:	91 1c       	st.w	r8[0x4],r12
800208a6:	72 2c       	ld.w	r12,r9[0x8]
800208a8:	91 2c       	st.w	r8[0x8],r12
800208aa:	72 39       	ld.w	r9,r9[0xc]
800208ac:	91 39       	st.w	r8[0xc],r9
800208ae:	f6 c8 ff e0 	sub	r8,r11,-32
800208b2:	f4 c9 ff e0 	sub	r9,r10,-32
800208b6:	72 0a       	ld.w	r10,r9[0x0]
800208b8:	91 0a       	st.w	r8[0x0],r10
800208ba:	72 1a       	ld.w	r10,r9[0x4]
800208bc:	91 1a       	st.w	r8[0x4],r10
800208be:	72 2a       	ld.w	r10,r9[0x8]
800208c0:	91 2a       	st.w	r8[0x8],r10
800208c2:	72 39       	ld.w	r9,r9[0xc]
800208c4:	91 39       	st.w	r8[0xc],r9
					waypoint_request_number++;
800208c6:	ec f8 01 04 	ld.w	r8,r6[260]
800208ca:	70 08       	ld.w	r8,r8[0x0]
800208cc:	f0 c9 ff ff 	sub	r9,r8,-1
800208d0:	ec f8 01 04 	ld.w	r8,r6[260]
800208d4:	91 09       	st.w	r8[0x0],r9
					
					if ((num_waypoint_onboard + waypoint_request_number) == number_of_waypoints) 
800208d6:	ec f8 01 28 	ld.w	r8,r6[296]
800208da:	90 08       	ld.sh	r8,r8[0x0]
800208dc:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
800208e0:	ec f8 01 04 	ld.w	r8,r6[260]
800208e4:	70 08       	ld.w	r8,r8[0x0]
800208e6:	10 09       	add	r9,r8
800208e8:	ef 18 ff 98 	ld.uh	r8,r7[-104]
800208ec:	10 39       	cp.w	r9,r8
800208ee:	c2 11       	brne	80020930 <receive_waypoint+0x29a>
					{
						
						uint8_t type = MAV_CMD_ACK_OK;                         // ok (0), error(1) ???
800208f0:	30 18       	mov	r8,1
800208f2:	ef 68 ff fe 	st.b	r7[-2],r8
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_mission_planner.compid,type);
						mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
800208f6:	ef 39 ff fe 	ld.ub	r9,r7[-2]
800208fa:	ee f8 ff a0 	ld.w	r8,r7[-96]
800208fe:	11 e8       	ld.ub	r8,r8[0x6]
80020900:	10 9a       	mov	r10,r8
80020902:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020906:	11 d8       	ld.ub	r8,r8[0x5]
80020908:	10 9b       	mov	r11,r8
8002090a:	30 0c       	mov	r12,0
8002090c:	fe b0 f7 46 	rcall	8001f798 <mavlink_msg_mission_ack_send>
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,0,type);
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,mavlink_system.compid,type);
						
						//mavlink_msg_mission_ack_send(MAVLINK_COMM_0, packet.target_system, packet.target_component,type);

						dbg_print("flight plan received!\n");
80020910:	fe cc 02 a4 	sub	r12,pc,676
80020914:	f0 16 00 01 	mcall	r6[4]
						*waypoint_receiving = false;
80020918:	ee f9 ff 94 	ld.w	r9,r7[-108]
8002091c:	30 08       	mov	r8,0
8002091e:	b2 88       	st.b	r9[0x0],r8
						num_waypoint_onboard = number_of_waypoints;
80020920:	ec f9 01 28 	ld.w	r9,r6[296]
80020924:	ef 08 ff 98 	ld.sh	r8,r7[-104]
80020928:	b2 08       	st.h	r9[0x0],r8
						init_wp();
8002092a:	f0 16 00 90 	mcall	r6[576]
8002092e:	c3 68       	rjmp	8002099a <receive_waypoint+0x304>
					}else{
						mavlink_msg_mission_request_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,waypoint_request_number);
80020930:	ec f8 01 04 	ld.w	r8,r6[260]
80020934:	70 08       	ld.w	r8,r8[0x0]
80020936:	5c 88       	casts.h	r8
80020938:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002093c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020940:	11 e8       	ld.ub	r8,r8[0x6]
80020942:	10 9a       	mov	r10,r8
80020944:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020948:	11 d8       	ld.ub	r8,r8[0x5]
8002094a:	10 9b       	mov	r11,r8
8002094c:	30 0c       	mov	r12,0
8002094e:	fe b0 f4 ff 	rcall	8001f34c <mavlink_msg_mission_request_send>
						
						dbg_print("Asking for waypoint ");
80020952:	fe cc 04 c2 	sub	r12,pc,1218
80020956:	f0 16 00 01 	mcall	r6[4]
						dbg_print_num(waypoint_request_number,10);
8002095a:	ec f8 01 04 	ld.w	r8,r6[260]
8002095e:	70 08       	ld.w	r8,r8[0x0]
80020960:	30 ab       	mov	r11,10
80020962:	10 9c       	mov	r12,r8
80020964:	f0 16 00 04 	mcall	r6[16]
						dbg_print("\n");
80020968:	fe cc 0c 50 	sub	r12,pc,3152
8002096c:	f0 16 00 01 	mcall	r6[4]
80020970:	c1 58       	rjmp	8002099a <receive_waypoint+0x304>
					}
				}
			}else{
				uint8_t type = MAV_CMD_ACK_OK; //MAV_CMD_ACK_ERR_FAIL;                         // ok (0), error(1)
80020972:	30 18       	mov	r8,1
80020974:	ef 68 ff ff 	st.b	r7[-1],r8
				dbg_print("Ack not received!");
80020978:	fe cc 02 f4 	sub	r12,pc,756
8002097c:	f0 16 00 01 	mcall	r6[4]
				mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,type);
80020980:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020984:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020988:	11 e8       	ld.ub	r8,r8[0x6]
8002098a:	10 9a       	mov	r10,r8
8002098c:	ee f8 ff a0 	ld.w	r8,r7[-96]
80020990:	11 d8       	ld.ub	r8,r8[0x5]
80020992:	10 9b       	mov	r11,r8
80020994:	30 0c       	mov	r12,0
80020996:	fe b0 f7 01 	rcall	8001f798 <mavlink_msg_mission_ack_send>
			}				
		}		
	}			
}		
8002099a:	2e 5d       	sub	sp,-108
8002099c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800209a0:	80 02       	ld.sh	r2,r0[0x0]
800209a2:	05 26       	ld.uh	r6,r2++
800209a4:	73 65       	ld.w	r5,r9[0x58]
800209a6:	74 74       	ld.w	r4,r10[0x1c]
800209a8:	69 6e       	ld.w	lr,r4[0x58]
800209aa:	67 20       	ld.w	r0,r3[0x48]
800209ac:	63 75       	ld.w	r5,r1[0x5c]
800209ae:	72 72       	ld.w	r2,r9[0x1c]
800209b0:	65 6e       	ld.w	lr,r2[0x58]
800209b2:	74 20       	ld.w	r0,r10[0x8]
800209b4:	77 70       	ld.w	r0,r11[0x5c]
800209b6:	00 00       	add	r0,r0
800209b8:	53 65       	stdsp	sp[0xd8],r5
800209ba:	74 20       	ld.w	r0,r10[0x8]
800209bc:	63 75       	ld.w	r5,r1[0x5c]
800209be:	72 72       	ld.w	r2,r9[0x1c]
800209c0:	65 6e       	ld.w	lr,r2[0x58]
800209c2:	74 20       	ld.w	r0,r10[0x8]
800209c4:	77 61       	ld.w	r1,r11[0x58]
800209c6:	79 70       	ld.w	r0,r12[0x5c]
800209c8:	6f 69       	ld.w	r9,r7[0x58]
800209ca:	6e 74       	ld.w	r4,r7[0x1c]
800209cc:	20 74       	sub	r4,7
800209ce:	6f 20       	ld.w	r0,r7[0x48]
800209d0:	6e 75       	ld.w	r5,r7[0x1c]
800209d2:	6d 62       	ld.w	r2,r6[0x58]
800209d4:	65 72       	ld.w	r2,r2[0x5c]
	...

800209d8 <set_current_wp>:

void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
800209d8:	eb cd 40 c0 	pushm	r6-r7,lr
800209dc:	1a 97       	mov	r7,sp
800209de:	20 5d       	sub	sp,20
800209e0:	4c 06       	lddpc	r6,80020ae0 <set_current_wp+0x108>
800209e2:	1e 26       	rsub	r6,pc
800209e4:	ef 4c ff f4 	st.w	r7[-12],r12
800209e8:	ef 4b ff f0 	st.w	r7[-16],r11
800209ec:	14 98       	mov	r8,r10
800209ee:	ef 58 ff ec 	st.h	r7[-20],r8
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
800209f2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800209f6:	ee c9 00 08 	sub	r9,r7,8
800209fa:	12 9b       	mov	r11,r9
800209fc:	10 9c       	mov	r12,r8
800209fe:	fe b0 f5 65 	rcall	8001f4c8 <mavlink_msg_mission_set_current_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020a02:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80020a06:	ec f8 00 74 	ld.w	r8,r6[116]
80020a0a:	11 88       	ld.ub	r8,r8[0x0]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020a0c:	f0 09 18 00 	cp.b	r9,r8
80020a10:	c6 41       	brne	80020ad8 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020a12:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80020a16:	ec f8 00 c8 	ld.w	r8,r6[200]
80020a1a:	11 98       	ld.ub	r8,r8[0x1]
void set_current_wp(Mavlink_Received_t* rec,  waypoint_struct* waypoint_list[], uint16_t num_of_waypoint)
{
	mavlink_mission_set_current_t packet;
	mavlink_msg_mission_set_current_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020a1c:	f0 09 18 00 	cp.b	r9,r8
80020a20:	c5 c1       	brne	80020ad8 <set_current_wp+0x100>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
80020a22:	fe cc 00 7e 	sub	r12,pc,126
80020a26:	f0 16 00 01 	mcall	r6[4]
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020a2a:	30 08       	mov	r8,0
80020a2c:	ef 48 ff fc 	st.w	r7[-4],r8
80020a30:	c1 08       	rjmp	80020a50 <set_current_wp+0x78>
		{
			waypoint_list[i]->current = 0;
80020a32:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a36:	a3 68       	lsl	r8,0x2
80020a38:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020a3c:	f2 08 00 08 	add	r8,r9,r8
80020a40:	70 09       	ld.w	r9,r8[0x0]
80020a42:	30 08       	mov	r8,0
80020a44:	b2 c8       	st.b	r9[0x4],r8
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		dbg_print("setting current wp");
		int i;
		for (i=0;i<num_of_waypoint;i++)
80020a46:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a4a:	2f f8       	sub	r8,-1
80020a4c:	ef 48 ff fc 	st.w	r7[-4],r8
80020a50:	ef 19 ff ec 	ld.uh	r9,r7[-20]
80020a54:	ee f8 ff fc 	ld.w	r8,r7[-4]
80020a58:	10 39       	cp.w	r9,r8
80020a5a:	fe 99 ff ec 	brgt	80020a32 <set_current_wp+0x5a>
		{
			waypoint_list[i]->current = 0;
		}
		if (packet.seq < num_of_waypoint)
80020a5e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020a62:	ef 09 ff ec 	ld.sh	r9,r7[-20]
80020a66:	f0 09 19 00 	cp.h	r9,r8
80020a6a:	e0 88 00 2b 	brls	80020ac0 <set_current_wp+0xe8>
		{
			waypoint_list[packet.seq]->current = 1;
80020a6e:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020a72:	5c 78       	castu.h	r8
80020a74:	a3 68       	lsl	r8,0x2
80020a76:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020a7a:	f2 08 00 08 	add	r8,r9,r8
80020a7e:	70 09       	ld.w	r9,r8[0x0]
80020a80:	30 18       	mov	r8,1
80020a82:	b2 c8       	st.b	r9[0x4],r8
			mavlink_msg_mission_current_send(MAVLINK_COMM_0,waypoint_list[packet.seq]->current);
80020a84:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020a88:	5c 78       	castu.h	r8
80020a8a:	a3 68       	lsl	r8,0x2
80020a8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020a90:	f2 08 00 08 	add	r8,r9,r8
80020a94:	70 08       	ld.w	r8,r8[0x0]
80020a96:	11 c8       	ld.ub	r8,r8[0x4]
80020a98:	10 9b       	mov	r11,r8
80020a9a:	30 0c       	mov	r12,0
80020a9c:	fe b0 f5 3c 	rcall	8001f514 <mavlink_msg_mission_current_send>
			
			dbg_print("Set current waypoint to number");
80020aa0:	fe cc 00 e8 	sub	r12,pc,232
80020aa4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(packet.seq,10);
80020aa8:	ef 08 ff f8 	ld.sh	r8,r7[-8]
80020aac:	5c 78       	castu.h	r8
80020aae:	30 ab       	mov	r11,10
80020ab0:	10 9c       	mov	r12,r8
80020ab2:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80020ab6:	fe cc 0d 9e 	sub	r12,pc,3486
80020aba:	f0 16 00 01 	mcall	r6[4]
80020abe:	c0 d8       	rjmp	80020ad8 <set_current_wp+0x100>
		}else{
			mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_ERR_ACCESS_DENIED);
80020ac0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020ac4:	11 e8       	ld.ub	r8,r8[0x6]
80020ac6:	10 9a       	mov	r10,r8
80020ac8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020acc:	11 d8       	ld.ub	r8,r8[0x5]
80020ace:	30 39       	mov	r9,3
80020ad0:	10 9b       	mov	r11,r8
80020ad2:	30 0c       	mov	r12,0
80020ad4:	fe b0 f6 62 	rcall	8001f798 <mavlink_msg_mission_ack_send>
		}
	}
}
80020ad8:	2f bd       	sub	sp,-20
80020ada:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020ade:	00 00       	add	r0,r0
80020ae0:	80 02       	ld.sh	r2,r0[0x0]
80020ae2:	08 66       	and	r6,r4
80020ae4:	43 6c       	lddsp	r12,sp[0xd8]
80020ae6:	65 61       	ld.w	r1,r2[0x58]
80020ae8:	72 20       	ld.w	r0,r9[0x8]
80020aea:	57 61       	stdsp	sp[0x1d8],r1
80020aec:	79 70       	ld.w	r0,r12[0x5c]
80020aee:	6f 69       	ld.w	r9,r7[0x58]
80020af0:	6e 74       	ld.w	r4,r7[0x1c]
80020af2:	20 6c       	sub	r12,6
80020af4:	69 73       	ld.w	r3,r4[0x5c]
80020af6:	74 00       	ld.w	r0,r10[0x0]

80020af8 <clear_waypoint_list>:

void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
80020af8:	eb cd 40 c0 	pushm	r6-r7,lr
80020afc:	1a 97       	mov	r7,sp
80020afe:	20 4d       	sub	sp,16
80020b00:	4a 06       	lddpc	r6,80020b80 <clear_waypoint_list+0x88>
80020b02:	1e 26       	rsub	r6,pc
80020b04:	ef 4c ff f8 	st.w	r7[-8],r12
80020b08:	ef 4b ff f4 	st.w	r7[-12],r11
80020b0c:	ef 4a ff f0 	st.w	r7[-16],r10
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
80020b10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b14:	ee c9 00 02 	sub	r9,r7,2
80020b18:	12 9b       	mov	r11,r9
80020b1a:	10 9c       	mov	r12,r8
80020b1c:	fe b0 f5 ff 	rcall	8001f71a <mavlink_msg_mission_clear_all_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b20:	ef 39 ff fe 	ld.ub	r9,r7[-2]
80020b24:	ec f8 00 74 	ld.w	r8,r6[116]
80020b28:	11 88       	ld.ub	r8,r8[0x0]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020b2a:	f0 09 18 00 	cp.b	r9,r8
80020b2e:	c2 51       	brne	80020b78 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
80020b30:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020b34:	ec f8 00 c8 	ld.w	r8,r6[200]
80020b38:	11 98       	ld.ub	r8,r8[0x1]
void clear_waypoint_list(Mavlink_Received_t* rec,  uint16_t* number_of_waypoints, bool* waypoint_set)
{
	mavlink_mission_clear_all_t packet;
	mavlink_msg_mission_clear_all_decode(&rec->msg,&packet);
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid
80020b3a:	f0 09 18 00 	cp.b	r9,r8
80020b3e:	c1 d1       	brne	80020b78 <clear_waypoint_list+0x80>
	&& (uint8_t)packet.target_component == (uint8_t)mavlink_mission_planner.compid)
	{
		*number_of_waypoints = 0;
80020b40:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020b44:	30 08       	mov	r8,0
80020b46:	b2 08       	st.h	r9[0x0],r8
		num_waypoint_onboard = 0;
80020b48:	ec f9 01 28 	ld.w	r9,r6[296]
80020b4c:	30 08       	mov	r8,0
80020b4e:	b2 08       	st.h	r9[0x0],r8
		*waypoint_set = 0;
80020b50:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020b54:	30 08       	mov	r8,0
80020b56:	b2 88       	st.b	r9[0x0],r8
		mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_CMD_ACK_OK);
80020b58:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b5c:	11 e8       	ld.ub	r8,r8[0x6]
80020b5e:	10 9a       	mov	r10,r8
80020b60:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020b64:	11 d8       	ld.ub	r8,r8[0x5]
80020b66:	30 19       	mov	r9,1
80020b68:	10 9b       	mov	r11,r8
80020b6a:	30 0c       	mov	r12,0
80020b6c:	fe b0 f6 16 	rcall	8001f798 <mavlink_msg_mission_ack_send>
		dbg_print("Clear Waypoint list");
80020b70:	fe cc 00 8c 	sub	r12,pc,140
80020b74:	f0 16 00 01 	mcall	r6[4]
	}		
}
80020b78:	2f cd       	sub	sp,-16
80020b7a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020b7e:	00 00       	add	r0,r0
80020b80:	80 02       	ld.sh	r2,r0[0x0]
80020b82:	09 86       	ld.ub	r6,r4[0x0]
80020b84:	62 61       	ld.w	r1,r1[0x18]
80020b86:	73 65       	ld.w	r5,r9[0x58]
80020b88:	5f 6d       	srmi	sp
80020b8a:	6f 64       	ld.w	r4,r7[0x58]
80020b8c:	65 3a       	ld.w	r10,r2[0x4c]
80020b8e:	00 00       	add	r0,r0
80020b90:	2c 20       	sub	r0,-62
80020b92:	63 75       	ld.w	r5,r1[0x5c]
80020b94:	73 74       	ld.w	r4,r9[0x5c]
80020b96:	6f 6d       	ld.w	sp,r7[0x58]
80020b98:	20 6d       	sub	sp,24
80020b9a:	6f 64       	ld.w	r4,r7[0x58]
80020b9c:	65 3a       	ld.w	r10,r2[0x4c]
	...

80020ba0 <set_mav_mode>:

void set_mav_mode(Mavlink_Received_t* rec, uint8_t* board_mav_mode, uint8_t* board_mav_state, uint8_t sim_mode)
{
80020ba0:	eb cd 40 e0 	pushm	r5-r7,lr
80020ba4:	1a 97       	mov	r7,sp
80020ba6:	20 6d       	sub	sp,24
80020ba8:	4e 26       	lddpc	r6,80020d30 <set_mav_mode+0x190>
80020baa:	1e 26       	rsub	r6,pc
80020bac:	ef 4c ff f4 	st.w	r7[-12],r12
80020bb0:	ef 4b ff f0 	st.w	r7[-16],r11
80020bb4:	ef 4a ff ec 	st.w	r7[-20],r10
80020bb8:	12 98       	mov	r8,r9
80020bba:	ef 68 ff e8 	st.b	r7[-24],r8
	mavlink_set_mode_t packet;
	mavlink_msg_set_mode_decode(&rec->msg,&packet);
80020bbe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020bc2:	ee c9 00 08 	sub	r9,r7,8
80020bc6:	12 9b       	mov	r11,r9
80020bc8:	10 9c       	mov	r12,r8
80020bca:	fe b0 f1 97 	rcall	8001eef8 <mavlink_msg_set_mode_decode>
	// Check if this message is for this system and subsystem
	if ((uint8_t)packet.target_system == (uint8_t)mavlink_system.sysid)
80020bce:	ef 39 ff fc 	ld.ub	r9,r7[-4]
80020bd2:	ec f8 00 74 	ld.w	r8,r6[116]
80020bd6:	11 88       	ld.ub	r8,r8[0x0]
80020bd8:	f0 09 18 00 	cp.b	r9,r8
80020bdc:	e0 81 00 a6 	brne	80020d28 <set_mav_mode+0x188>
	{
		dbg_print("base_mode:");
80020be0:	fe cc 00 5c 	sub	r12,pc,92
80020be4:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.base_mode,10);
80020be8:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020bec:	30 ab       	mov	r11,10
80020bee:	10 9c       	mov	r12,r8
80020bf0:	f0 16 00 04 	mcall	r6[16]
		dbg_print(", custom mode:");
80020bf4:	fe cc 00 64 	sub	r12,pc,100
80020bf8:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(packet.custom_mode,10);
80020bfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80020c00:	30 ab       	mov	r11,10
80020c02:	10 9c       	mov	r12,r8
80020c04:	f0 16 00 04 	mcall	r6[16]
		dbg_print("\n");
80020c08:	fe cc 0e f0 	sub	r12,pc,3824
80020c0c:	f0 16 00 01 	mcall	r6[4]

		if (sim_mode == 0)
80020c10:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80020c14:	30 08       	mov	r8,0
80020c16:	f0 09 18 00 	cp.b	r9,r8
80020c1a:	c3 e1       	brne	80020c96 <set_mav_mode+0xf6>
		{
			switch(packet.base_mode)
80020c1c:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020c20:	e0 48 00 58 	cp.w	r8,88
80020c24:	c0 e0       	breq	80020c40 <set_mav_mode+0xa0>
80020c26:	e0 89 00 06 	brgt	80020c32 <set_mav_mode+0x92>
80020c2a:	e0 48 00 50 	cp.w	r8,80
80020c2e:	c0 90       	breq	80020c40 <set_mav_mode+0xa0>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020c30:	c7 c8       	rjmp	80020d28 <set_mav_mode+0x188>
		dbg_print_num(packet.custom_mode,10);
		dbg_print("\n");

		if (sim_mode == 0)
		{
			switch(packet.base_mode)
80020c32:	e0 48 00 5c 	cp.w	r8,92
80020c36:	c0 50       	breq	80020c40 <set_mav_mode+0xa0>
80020c38:	e0 48 00 c0 	cp.w	r8,192
80020c3c:	c0 c0       	breq	80020c54 <set_mav_mode+0xb4>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020c3e:	c7 58       	rjmp	80020d28 <set_mav_mode+0x188>
			switch(packet.base_mode)
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020c40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020c44:	30 38       	mov	r8,3
80020c46:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020c48:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c4c:	34 08       	mov	r8,64
80020c4e:	b2 88       	st.b	r9[0x0],r8
				break;
80020c50:	d7 03       	nop
80020c52:	c6 b8       	rjmp	80020d28 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
80020c54:	fe b0 f6 66 	rcall	8001f920 <get_thrust_from_remote>
80020c58:	18 98       	mov	r8,r12
80020c5a:	10 9c       	mov	r12,r8
80020c5c:	f0 16 00 02 	mcall	r6[8]
80020c60:	30 05       	mov	r5,0
80020c62:	e0 68 66 66 	mov	r8,26214
80020c66:	ea 18 66 66 	orh	r8,0x6666
80020c6a:	e0 69 66 66 	mov	r9,26214
80020c6e:	ea 19 bf ee 	orh	r9,0xbfee
80020c72:	f0 16 00 1e 	mcall	r6[120]
80020c76:	18 98       	mov	r8,r12
80020c78:	58 08       	cp.w	r8,0
80020c7a:	c0 20       	breq	80020c7e <set_mav_mode+0xde>
80020c7c:	30 15       	mov	r5,1
80020c7e:	f1 d5 c0 08 	bfextu	r8,r5,0x0,0x8
80020c82:	c5 20       	breq	80020d26 <set_mav_mode+0x186>
					{
						*board_mav_state = MAV_STATE_ACTIVE;
80020c84:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020c88:	30 48       	mov	r8,4
80020c8a:	b2 88       	st.b	r9[0x0],r8
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020c8c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020c90:	3c 08       	mov	r8,-64
80020c92:	b2 88       	st.b	r9[0x0],r8
80020c94:	c4 a8       	rjmp	80020d28 <set_mav_mode+0x188>
					}
				break;
			}
		}else{
			switch(packet.base_mode)
80020c96:	ef 38 ff fd 	ld.ub	r8,r7[-3]
80020c9a:	e0 48 00 c0 	cp.w	r8,192
80020c9e:	c2 00       	breq	80020cde <set_mav_mode+0x13e>
80020ca0:	e0 89 00 0c 	brgt	80020cb8 <set_mav_mode+0x118>
80020ca4:	e0 48 00 58 	cp.w	r8,88
80020ca8:	c1 20       	breq	80020ccc <set_mav_mode+0x12c>
80020caa:	e0 48 00 5c 	cp.w	r8,92
80020cae:	c0 f0       	breq	80020ccc <set_mav_mode+0x12c>
80020cb0:	e0 48 00 50 	cp.w	r8,80
80020cb4:	c0 c0       	breq	80020ccc <set_mav_mode+0x12c>
80020cb6:	c3 98       	rjmp	80020d28 <set_mav_mode+0x188>
80020cb8:	e0 48 00 d8 	cp.w	r8,216
80020cbc:	c2 30       	breq	80020d02 <set_mav_mode+0x162>
80020cbe:	e0 48 00 dc 	cp.w	r8,220
80020cc2:	c2 90       	breq	80020d14 <set_mav_mode+0x174>
80020cc4:	e0 48 00 d0 	cp.w	r8,208
80020cc8:	c1 40       	breq	80020cf0 <set_mav_mode+0x150>
80020cca:	c2 f8       	rjmp	80020d28 <set_mav_mode+0x188>
			{
				case MAV_MODE_STABILIZE_DISARMED:
				case MAV_MODE_GUIDED_DISARMED:
				case MAV_MODE_AUTO_DISARMED:
					*board_mav_state = MAV_STATE_STANDBY;
80020ccc:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020cd0:	30 38       	mov	r8,3
80020cd2:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_DISARMED;
80020cd4:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cd8:	34 08       	mov	r8,64
80020cda:	b2 88       	st.b	r9[0x0],r8
				break;
80020cdc:	c2 68       	rjmp	80020d28 <set_mav_mode+0x188>
				case MAV_MODE_MANUAL_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020cde:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020ce2:	30 48       	mov	r8,4
80020ce4:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020ce6:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cea:	3c 08       	mov	r8,-64
80020cec:	b2 88       	st.b	r9[0x0],r8
				break;
80020cee:	c1 d8       	rjmp	80020d28 <set_mav_mode+0x188>
				case MAV_MODE_STABILIZE_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020cf0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020cf4:	30 48       	mov	r8,4
80020cf6:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_STABILIZE_ARMED;
80020cf8:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020cfc:	3d 08       	mov	r8,-48
80020cfe:	b2 88       	st.b	r9[0x0],r8
				break;
80020d00:	c1 48       	rjmp	80020d28 <set_mav_mode+0x188>
				case MAV_MODE_GUIDED_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020d02:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020d06:	30 48       	mov	r8,4
80020d08:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_GUIDED_ARMED;
80020d0a:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d0e:	3d 88       	mov	r8,-40
80020d10:	b2 88       	st.b	r9[0x0],r8
				break;
80020d12:	c0 b8       	rjmp	80020d28 <set_mav_mode+0x188>
				case MAV_MODE_AUTO_ARMED:
					*board_mav_state = MAV_STATE_ACTIVE;
80020d14:	ee f9 ff ec 	ld.w	r9,r7[-20]
80020d18:	30 48       	mov	r8,4
80020d1a:	b2 88       	st.b	r9[0x0],r8
					*board_mav_mode = MAV_MODE_AUTO_ARMED;
80020d1c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020d20:	3d c8       	mov	r8,-36
80020d22:	b2 88       	st.b	r9[0x0],r8
80020d24:	c0 28       	rjmp	80020d28 <set_mav_mode+0x188>
				break;
				case MAV_MODE_MANUAL_ARMED:
					if (get_thrust_from_remote()<-0.95)
					{
						*board_mav_state = MAV_STATE_ACTIVE;
						*board_mav_mode = MAV_MODE_MANUAL_ARMED;
80020d26:	d7 03       	nop
				break;
			}
		}
		
	}
}
80020d28:	2f ad       	sub	sp,-24
80020d2a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80020d2e:	00 00       	add	r0,r0
80020d30:	80 02       	ld.sh	r2,r0[0x0]
80020d32:	0a 2e       	rsub	lr,r5
80020d34:	53 65       	stdsp	sp[0xd8],r5
80020d36:	6e 64       	ld.w	r4,r7[0x18]
80020d38:	69 6e       	ld.w	lr,r4[0x58]
80020d3a:	67 20       	ld.w	r0,r3[0x48]
80020d3c:	77 61       	ld.w	r1,r11[0x58]
80020d3e:	79 70       	ld.w	r0,r12[0x5c]
80020d40:	6f 69       	ld.w	r9,r7[0x58]
80020d42:	6e 74       	ld.w	r4,r7[0x1c]
80020d44:	20 74       	sub	r4,7
80020d46:	69 6d       	ld.w	sp,r4[0x58]
80020d48:	65 6f       	ld.w	pc,r2[0x58]
80020d4a:	75 74       	ld.w	r4,r10[0x5c]
80020d4c:	00 00       	add	r0,r0
80020d4e:	00 00       	add	r0,r0
80020d50:	52 65       	stdsp	sp[0x98],r5
80020d52:	63 65       	ld.w	r5,r1[0x58]
80020d54:	69 76       	ld.w	r6,r4[0x5c]
80020d56:	69 6e       	ld.w	lr,r4[0x58]
80020d58:	67 20       	ld.w	r0,r3[0x48]
80020d5a:	77 61       	ld.w	r1,r11[0x58]
80020d5c:	79 70       	ld.w	r0,r12[0x5c]
80020d5e:	6f 69       	ld.w	r9,r7[0x58]
80020d60:	6e 74       	ld.w	r4,r7[0x1c]
80020d62:	20 74       	sub	r4,7
80020d64:	69 6d       	ld.w	sp,r4[0x58]
80020d66:	65 6f       	ld.w	pc,r2[0x58]
80020d68:	75 74       	ld.w	r4,r10[0x5c]
	...

80020d6c <control_time_out_waypoint_msg>:

void control_time_out_waypoint_msg(uint16_t* num_of_waypoint, bool* waypoint_receiving, bool* waypoint_sending)
{
80020d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80020d70:	1a 97       	mov	r7,sp
80020d72:	20 4d       	sub	sp,16
80020d74:	4a 76       	lddpc	r6,80020e10 <control_time_out_waypoint_msg+0xa4>
80020d76:	1e 26       	rsub	r6,pc
80020d78:	ef 4c ff f8 	st.w	r7[-8],r12
80020d7c:	ef 4b ff f4 	st.w	r7[-12],r11
80020d80:	ef 4a ff f0 	st.w	r7[-16],r10
	if (*waypoint_sending || *waypoint_receiving)
80020d84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020d88:	11 88       	ld.ub	r8,r8[0x0]
80020d8a:	58 08       	cp.w	r8,0
80020d8c:	c0 61       	brne	80020d98 <control_time_out_waypoint_msg+0x2c>
80020d8e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020d92:	11 88       	ld.ub	r8,r8[0x0]
80020d94:	58 08       	cp.w	r8,0
80020d96:	c3 90       	breq	80020e08 <control_time_out_waypoint_msg+0x9c>
	{
		uint32_t tnow = get_millis();
80020d98:	f0 16 00 0f 	mcall	r6[60]
80020d9c:	18 98       	mov	r8,r12
80020d9e:	ef 48 ff fc 	st.w	r7[-4],r8
		
		if ((tnow - start_timeout) > timeout_max_wp)
80020da2:	ec f8 01 84 	ld.w	r8,r6[388]
80020da6:	70 08       	ld.w	r8,r8[0x0]
80020da8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dac:	10 19       	sub	r9,r8
80020dae:	ec f8 04 34 	ld.w	r8,r6[1076]
80020db2:	70 08       	ld.w	r8,r8[0x0]
80020db4:	10 39       	cp.w	r9,r8
80020db6:	e0 88 00 29 	brls	80020e08 <control_time_out_waypoint_msg+0x9c>
		{
			start_timeout = tnow;
80020dba:	ec f8 01 84 	ld.w	r8,r6[388]
80020dbe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80020dc2:	91 09       	st.w	r8[0x0],r9
			if (*waypoint_sending)
80020dc4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80020dc8:	11 88       	ld.ub	r8,r8[0x0]
80020dca:	58 08       	cp.w	r8,0
80020dcc:	c0 90       	breq	80020dde <control_time_out_waypoint_msg+0x72>
			{
				*waypoint_sending = false;
80020dce:	ee f9 ff f0 	ld.w	r9,r7[-16]
80020dd2:	30 08       	mov	r8,0
80020dd4:	b2 88       	st.b	r9[0x0],r8
				dbg_print("Sending waypoint timeout");
80020dd6:	fe cc 00 a2 	sub	r12,pc,162
80020dda:	f0 16 00 01 	mcall	r6[4]
			}
			if (*waypoint_receiving)
80020dde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80020de2:	11 88       	ld.ub	r8,r8[0x0]
80020de4:	58 08       	cp.w	r8,0
80020de6:	c1 10       	breq	80020e08 <control_time_out_waypoint_msg+0x9c>
			{
				*waypoint_receiving = false;
80020de8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80020dec:	30 08       	mov	r8,0
80020dee:	b2 88       	st.b	r9[0x0],r8
				
				dbg_print("Receiving waypoint timeout");
80020df0:	fe cc 00 a0 	sub	r12,pc,160
80020df4:	f0 16 00 01 	mcall	r6[4]
				*num_of_waypoint = 0;
80020df8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80020dfc:	30 08       	mov	r8,0
80020dfe:	b2 08       	st.h	r9[0x0],r8
				num_waypoint_onboard = 0;
80020e00:	ec f9 01 28 	ld.w	r9,r6[296]
80020e04:	30 08       	mov	r8,0
80020e06:	b2 08       	st.h	r9[0x0],r8
				
			}
		}
	}
}
80020e08:	2f cd       	sub	sp,-16
80020e0a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80020e0e:	00 00       	add	r0,r0
80020e10:	80 02       	ld.sh	r2,r0[0x0]
80020e12:	0b fa       	ld.ub	r10,r5[0x7]
80020e14:	77 70       	ld.w	r0,r11[0x5c]
80020e16:	5f 67       	srmi	r7
80020e18:	6c 6f       	ld.w	pc,r6[0x18]
80020e1a:	62 61       	ld.w	r1,r1[0x18]
80020e1c:	6c 3a       	ld.w	r10,r6[0xc]
80020e1e:	20 6c       	sub	r12,6
80020e20:	61 74       	ld.w	r4,r0[0x5c]
80020e22:	20 28       	sub	r8,2
80020e24:	78 31       	ld.w	r1,r12[0xc]
80020e26:	65 37       	ld.w	r7,r2[0x4c]
80020e28:	29 3a       	sub	r10,-109
80020e2a:	00 00       	add	r0,r0
80020e2c:	20 6c       	sub	r12,6
80020e2e:	6f 6e       	ld.w	lr,r7[0x58]
80020e30:	67 20       	ld.w	r0,r3[0x48]
80020e32:	28 78       	sub	r8,-121
80020e34:	31 65       	mov	r5,22
80020e36:	37 29       	mov	r9,114
80020e38:	3a 00       	mov	r0,-96
80020e3a:	00 00       	add	r0,r0
80020e3c:	20 61       	sub	r1,6
80020e3e:	6c 74       	ld.w	r4,r6[0x1c]
80020e40:	20 28       	sub	r8,2
80020e42:	78 31       	ld.w	r1,r12[0xc]
80020e44:	30 30       	mov	r0,3
80020e46:	30 29       	mov	r9,2
80020e48:	3a 00       	mov	r0,-96
80020e4a:	00 00       	add	r0,r0
80020e4c:	20 77       	sub	r7,7
80020e4e:	70 5f       	ld.w	pc,r8[0x14]
80020e50:	63 6f       	ld.w	pc,r1[0x58]
80020e52:	6f 72       	ld.w	r2,r7[0x5c]
80020e54:	3a 20       	mov	r0,-94
80020e56:	78 20       	ld.w	r0,r12[0x8]
80020e58:	28 78       	sub	r8,-121
80020e5a:	31 30       	mov	r0,19
80020e5c:	30 29       	mov	r9,2
80020e5e:	3a 00       	mov	r0,-96
80020e60:	2c 20       	sub	r0,-62
80020e62:	79 20       	ld.w	r0,r12[0x48]
80020e64:	28 78       	sub	r8,-121
80020e66:	31 30       	mov	r0,19
80020e68:	30 29       	mov	r9,2
80020e6a:	3a 00       	mov	r0,-96
80020e6c:	2c 20       	sub	r0,-62
80020e6e:	7a 20       	ld.w	r0,sp[0x8]
80020e70:	28 78       	sub	r8,-121
80020e72:	31 30       	mov	r0,19
80020e74:	30 29       	mov	r9,2
80020e76:	3a 00       	mov	r0,-96
80020e78:	20 6c       	sub	r12,6
80020e7a:	6f 63       	ld.w	r3,r7[0x58]
80020e7c:	61 6c       	ld.w	r12,r0[0x58]
80020e7e:	4f 72       	lddpc	r2,80021058 <set_waypoint_from_frame+0x192>
80020e80:	69 67       	ld.w	r7,r4[0x58]
80020e82:	69 6e       	ld.w	lr,r4[0x58]
80020e84:	20 6c       	sub	r12,6
80020e86:	61 74       	ld.w	r4,r0[0x5c]
80020e88:	20 28       	sub	r8,2
80020e8a:	78 31       	ld.w	r1,r12[0xc]
80020e8c:	65 37       	ld.w	r7,r2[0x4c]
80020e8e:	29 3a       	sub	r10,-109
80020e90:	00 00       	add	r0,r0
80020e92:	00 00       	add	r0,r0
80020e94:	4c 6f       	lddpc	pc,80020fac <set_waypoint_from_frame+0xe6>
80020e96:	63 61       	ld.w	r1,r1[0x58]
80020e98:	6c 4f       	ld.w	pc,r6[0x10]
80020e9a:	72 69       	ld.w	r9,r9[0x18]
80020e9c:	67 69       	ld.w	r9,r3[0x58]
80020e9e:	6e 3a       	ld.w	r10,r7[0xc]
80020ea0:	20 6c       	sub	r12,6
80020ea2:	61 74       	ld.w	r4,r0[0x5c]
80020ea4:	20 28       	sub	r8,2
80020ea6:	78 31       	ld.w	r1,r12[0xc]
80020ea8:	65 37       	ld.w	r7,r2[0x4c]
80020eaa:	29 3a       	sub	r10,-109
80020eac:	00 00       	add	r0,r0
80020eae:	00 00       	add	r0,r0
80020eb0:	20 67       	sub	r7,6
80020eb2:	6c 6f       	ld.w	pc,r6[0x18]
80020eb4:	62 61       	ld.w	r1,r1[0x18]
80020eb6:	6c 20       	ld.w	r0,r6[0x8]
80020eb8:	61 6c       	ld.w	r12,r0[0x58]
80020eba:	74 20       	ld.w	r0,r10[0x8]
80020ebc:	28 78       	sub	r8,-121
80020ebe:	31 30       	mov	r0,19
80020ec0:	30 30       	mov	r0,3
80020ec2:	29 3a       	sub	r10,-109
	...

80020ec6 <set_waypoint_from_frame>:

local_coordinates_t set_waypoint_from_frame(waypoint_struct current_wp, global_position_t origin)
{
80020ec6:	eb cd 40 e8 	pushm	r3,r5-r7,lr
80020eca:	1a 97       	mov	r7,sp
80020ecc:	fa cd 00 a8 	sub	sp,sp,168
80020ed0:	fe f6 05 f0 	ld.w	r6,pc[1520]
80020ed4:	1e 26       	rsub	r6,pc
80020ed6:	ee c5 ff ec 	sub	r5,r7,-20
80020eda:	18 93       	mov	r3,r12
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020edc:	30 08       	mov	r8,0
80020ede:	ef 68 ff ff 	st.b	r7[-1],r8
80020ee2:	c0 e8       	rjmp	80020efe <set_waypoint_from_frame+0x38>
	{
		waypoint_coor.pos[i] = 0.0;
80020ee4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020ee8:	a3 68       	lsl	r8,0x2
80020eea:	ee 08 00 08 	add	r8,r7,r8
80020eee:	30 09       	mov	r9,0
80020ef0:	f1 49 ff b0 	st.w	r8[-80],r9
	global_position_t waypoint_global;
	local_coordinates_t waypoint_coor;
	
	float rel_pos[3];
	
	for (i=0;i<3;i++)
80020ef4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80020ef8:	2f f8       	sub	r8,-1
80020efa:	ef 68 ff ff 	st.b	r7[-1],r8
80020efe:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80020f02:	30 28       	mov	r8,2
80020f04:	f0 09 18 00 	cp.b	r9,r8
80020f08:	fe 98 ff ee 	brls	80020ee4 <set_waypoint_from_frame+0x1e>
	{
		waypoint_coor.pos[i] = 0.0;
	}

	switch(current_wp.frame)
80020f0c:	0b 88       	ld.ub	r8,r5[0x0]
80020f0e:	58 18       	cp.w	r8,1
80020f10:	e0 80 01 31 	breq	80021172 <set_waypoint_from_frame+0x2ac>
80020f14:	e0 89 00 06 	brgt	80020f20 <set_waypoint_from_frame+0x5a>
80020f18:	58 08       	cp.w	r8,0
80020f1a:	c0 b0       	breq	80020f30 <set_waypoint_from_frame+0x6a>
80020f1c:	e0 8f 02 a7 	bral	8002146a <set_waypoint_from_frame+0x5a4>
80020f20:	58 28       	cp.w	r8,2
80020f22:	e0 80 02 a3 	breq	80021468 <set_waypoint_from_frame+0x5a2>
80020f26:	58 38       	cp.w	r8,3
80020f28:	e0 80 01 a7 	breq	80021276 <set_waypoint_from_frame+0x3b0>
80020f2c:	e0 8f 02 9f 	bral	8002146a <set_waypoint_from_frame+0x5a4>
	{
		case MAV_FRAME_GLOBAL:
			waypoint_global.latitude = current_wp.x;
80020f30:	ea e8 00 18 	ld.d	r8,r5[24]
80020f34:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
80020f38:	ea e8 00 20 	ld.d	r8,r5[32]
80020f3c:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80020f40:	ea e8 00 28 	ld.d	r8,r5[40]
80020f44:	10 9a       	mov	r10,r8
80020f46:	12 9b       	mov	r11,r9
80020f48:	f0 16 00 08 	mcall	r6[32]
80020f4c:	18 98       	mov	r8,r12
80020f4e:	ef 48 ff f0 	st.w	r7[-16],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin);
80020f52:	ee cc 00 a8 	sub	r12,r7,168
80020f56:	20 7d       	sub	sp,28
80020f58:	1a 98       	mov	r8,sp
80020f5a:	10 9a       	mov	r10,r8
80020f5c:	ea cb ff d0 	sub	r11,r5,-48
80020f60:	f4 c8 00 00 	sub	r8,r10,0
80020f64:	f6 c9 00 00 	sub	r9,r11,0
80020f68:	72 0e       	ld.w	lr,r9[0x0]
80020f6a:	91 0e       	st.w	r8[0x0],lr
80020f6c:	72 1e       	ld.w	lr,r9[0x4]
80020f6e:	91 1e       	st.w	r8[0x4],lr
80020f70:	72 2e       	ld.w	lr,r9[0x8]
80020f72:	91 2e       	st.w	r8[0x8],lr
80020f74:	72 39       	ld.w	r9,r9[0xc]
80020f76:	91 39       	st.w	r8[0xc],r9
80020f78:	f6 e8 00 10 	ld.d	r8,r11[16]
80020f7c:	f4 e9 00 10 	st.d	r10[16],r8
80020f80:	76 68       	ld.w	r8,r11[0x18]
80020f82:	95 68       	st.w	r10[0x18],r8
80020f84:	20 7d       	sub	sp,28
80020f86:	1a 98       	mov	r8,sp
80020f88:	10 9a       	mov	r10,r8
80020f8a:	ee cb 00 20 	sub	r11,r7,32
80020f8e:	f4 c8 00 00 	sub	r8,r10,0
80020f92:	f6 c9 00 00 	sub	r9,r11,0
80020f96:	72 0e       	ld.w	lr,r9[0x0]
80020f98:	91 0e       	st.w	r8[0x0],lr
80020f9a:	72 1e       	ld.w	lr,r9[0x4]
80020f9c:	91 1e       	st.w	r8[0x4],lr
80020f9e:	72 2e       	ld.w	lr,r9[0x8]
80020fa0:	91 2e       	st.w	r8[0x8],lr
80020fa2:	72 39       	ld.w	r9,r9[0xc]
80020fa4:	91 39       	st.w	r8[0xc],r9
80020fa6:	f6 e8 00 10 	ld.d	r8,r11[16]
80020faa:	f4 e9 00 10 	st.d	r10[16],r8
80020fae:	76 68       	ld.w	r8,r11[0x18]
80020fb0:	95 68       	st.w	r10[0x18],r8
80020fb2:	f0 16 00 7d 	mcall	r6[500]
80020fb6:	2f 2d       	sub	sp,-56
80020fb8:	ee cb 00 50 	sub	r11,r7,80
80020fbc:	ee ca 00 a8 	sub	r10,r7,168
80020fc0:	f6 c8 00 00 	sub	r8,r11,0
80020fc4:	f4 c9 00 00 	sub	r9,r10,0
80020fc8:	72 0c       	ld.w	r12,r9[0x0]
80020fca:	91 0c       	st.w	r8[0x0],r12
80020fcc:	72 1c       	ld.w	r12,r9[0x4]
80020fce:	91 1c       	st.w	r8[0x4],r12
80020fd0:	72 2c       	ld.w	r12,r9[0x8]
80020fd2:	91 2c       	st.w	r8[0x8],r12
80020fd4:	72 39       	ld.w	r9,r9[0xc]
80020fd6:	91 39       	st.w	r8[0xc],r9
80020fd8:	f6 c8 ff f0 	sub	r8,r11,-16
80020fdc:	f4 c9 ff f0 	sub	r9,r10,-16
80020fe0:	72 0c       	ld.w	r12,r9[0x0]
80020fe2:	91 0c       	st.w	r8[0x0],r12
80020fe4:	72 1c       	ld.w	r12,r9[0x4]
80020fe6:	91 1c       	st.w	r8[0x4],r12
80020fe8:	72 2c       	ld.w	r12,r9[0x8]
80020fea:	91 2c       	st.w	r8[0x8],r12
80020fec:	72 39       	ld.w	r9,r9[0xc]
80020fee:	91 39       	st.w	r8[0xc],r9
80020ff0:	f6 c8 ff e0 	sub	r8,r11,-32
80020ff4:	f4 c9 ff e0 	sub	r9,r10,-32
80020ff8:	72 0a       	ld.w	r10,r9[0x0]
80020ffa:	91 0a       	st.w	r8[0x0],r10
80020ffc:	72 1a       	ld.w	r10,r9[0x4]
80020ffe:	91 1a       	st.w	r8[0x4],r10
80021000:	72 2a       	ld.w	r10,r9[0x8]
80021002:	91 2a       	st.w	r8[0x8],r10
80021004:	72 39       	ld.w	r9,r9[0xc]
80021006:	91 39       	st.w	r8[0xc],r9
			
			dbg_print("wp_global: lat (x1e7):");
80021008:	fe cc 01 f4 	sub	r12,pc,500
8002100c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.latitude*10000000,10);
80021010:	ee ea ff e8 	ld.d	r10,r7[-24]
80021014:	30 08       	mov	r8,0
80021016:	e0 69 12 d0 	mov	r9,4816
8002101a:	ea 19 41 63 	orh	r9,0x4163
8002101e:	f0 16 00 03 	mcall	r6[12]
80021022:	14 98       	mov	r8,r10
80021024:	16 99       	mov	r9,r11
80021026:	10 9a       	mov	r10,r8
80021028:	12 9b       	mov	r11,r9
8002102a:	f0 16 00 14 	mcall	r6[80]
8002102e:	18 98       	mov	r8,r12
80021030:	30 ab       	mov	r11,10
80021032:	10 9c       	mov	r12,r8
80021034:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021038:	fe cc 02 0c 	sub	r12,pc,524
8002103c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.longitude*10000000,10);
80021040:	ee ea ff e0 	ld.d	r10,r7[-32]
80021044:	30 08       	mov	r8,0
80021046:	e0 69 12 d0 	mov	r9,4816
8002104a:	ea 19 41 63 	orh	r9,0x4163
8002104e:	f0 16 00 03 	mcall	r6[12]
80021052:	14 98       	mov	r8,r10
80021054:	16 99       	mov	r9,r11
80021056:	10 9a       	mov	r10,r8
80021058:	12 9b       	mov	r11,r9
8002105a:	f0 16 00 14 	mcall	r6[80]
8002105e:	18 98       	mov	r8,r12
80021060:	30 ab       	mov	r11,10
80021062:	10 9c       	mov	r12,r8
80021064:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021068:	fe cc 02 2c 	sub	r12,pc,556
8002106c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_global.altitude*1000,10);
80021070:	ee f9 ff f0 	ld.w	r9,r7[-16]
80021074:	fc 18 44 7a 	movh	r8,0x447a
80021078:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002107c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021080:	30 ab       	mov	r11,10
80021082:	10 9c       	mov	r12,r8
80021084:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
80021088:	fe cc 02 3c 	sub	r12,pc,572
8002108c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021090:	ee f9 ff b0 	ld.w	r9,r7[-80]
80021094:	fc 18 42 c8 	movh	r8,0x42c8
80021098:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002109c:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210a0:	30 ab       	mov	r11,10
800210a2:	10 9c       	mov	r12,r8
800210a4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
800210a8:	fe cc 02 48 	sub	r12,pc,584
800210ac:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
800210b0:	ee f9 ff b4 	ld.w	r9,r7[-76]
800210b4:	fc 18 42 c8 	movh	r8,0x42c8
800210b8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800210bc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210c0:	30 ab       	mov	r11,10
800210c2:	10 9c       	mov	r12,r8
800210c4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
800210c8:	fe cc 02 5c 	sub	r12,pc,604
800210cc:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
800210d0:	ee f9 ff b8 	ld.w	r9,r7[-72]
800210d4:	fc 18 42 c8 	movh	r8,0x42c8
800210d8:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800210dc:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800210e0:	30 ab       	mov	r11,10
800210e2:	10 9c       	mov	r12,r8
800210e4:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" localOrigin lat (x1e7):");
800210e8:	fe cc 02 70 	sub	r12,pc,624
800210ec:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.latitude*10000000,10);
800210f0:	ea ea 00 38 	ld.d	r10,r5[56]
800210f4:	30 08       	mov	r8,0
800210f6:	e0 69 12 d0 	mov	r9,4816
800210fa:	ea 19 41 63 	orh	r9,0x4163
800210fe:	f0 16 00 03 	mcall	r6[12]
80021102:	14 98       	mov	r8,r10
80021104:	16 99       	mov	r9,r11
80021106:	10 9a       	mov	r10,r8
80021108:	12 9b       	mov	r11,r9
8002110a:	f0 16 00 14 	mcall	r6[80]
8002110e:	18 98       	mov	r8,r12
80021110:	30 ab       	mov	r11,10
80021112:	10 9c       	mov	r12,r8
80021114:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
80021118:	fe cc 02 ec 	sub	r12,pc,748
8002111c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.longitude*10000000,10);
80021120:	ea ea 00 30 	ld.d	r10,r5[48]
80021124:	30 08       	mov	r8,0
80021126:	e0 69 12 d0 	mov	r9,4816
8002112a:	ea 19 41 63 	orh	r9,0x4163
8002112e:	f0 16 00 03 	mcall	r6[12]
80021132:	14 98       	mov	r8,r10
80021134:	16 99       	mov	r9,r11
80021136:	10 9a       	mov	r10,r8
80021138:	12 9b       	mov	r11,r9
8002113a:	f0 16 00 14 	mcall	r6[80]
8002113e:	18 98       	mov	r8,r12
80021140:	30 ab       	mov	r11,10
80021142:	10 9c       	mov	r12,r8
80021144:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" alt (x1000):");
80021148:	fe cc 03 0c 	sub	r12,pc,780
8002114c:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
80021150:	6b 09       	ld.w	r9,r5[0x40]
80021152:	fc 18 44 7a 	movh	r8,0x447a
80021156:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
8002115a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002115e:	30 ab       	mov	r11,10
80021160:	10 9c       	mov	r12,r8
80021162:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
80021166:	fe cc 14 4e 	sub	r12,pc,5198
8002116a:	f0 16 00 01 	mcall	r6[4]
		
		break;
8002116e:	e0 8f 01 7e 	bral	8002146a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_LOCAL_NED:
			waypoint_coor.pos[X] = current_wp.x;
80021172:	ea e8 00 18 	ld.d	r8,r5[24]
80021176:	10 9a       	mov	r10,r8
80021178:	12 9b       	mov	r11,r9
8002117a:	f0 16 00 08 	mcall	r6[32]
8002117e:	18 98       	mov	r8,r12
80021180:	ef 48 ff b0 	st.w	r7[-80],r8
			waypoint_coor.pos[Y] = current_wp.y;
80021184:	ea e8 00 20 	ld.d	r8,r5[32]
80021188:	10 9a       	mov	r10,r8
8002118a:	12 9b       	mov	r11,r9
8002118c:	f0 16 00 08 	mcall	r6[32]
80021190:	18 98       	mov	r8,r12
80021192:	ef 48 ff b4 	st.w	r7[-76],r8
			waypoint_coor.pos[Z] = current_wp.z;
80021196:	ea e8 00 28 	ld.d	r8,r5[40]
8002119a:	10 9a       	mov	r10,r8
8002119c:	12 9b       	mov	r11,r9
8002119e:	f0 16 00 08 	mcall	r6[32]
800211a2:	18 98       	mov	r8,r12
800211a4:	ef 48 ff b8 	st.w	r7[-72],r8
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
800211a8:	6a 58       	ld.w	r8,r5[0x14]
800211aa:	10 9c       	mov	r12,r8
800211ac:	f0 16 00 02 	mcall	r6[8]
800211b0:	e0 68 2d 18 	mov	r8,11544
800211b4:	ea 18 54 44 	orh	r8,0x5444
800211b8:	e0 69 21 fb 	mov	r9,8699
800211bc:	ea 19 40 09 	orh	r9,0x4009
800211c0:	f0 16 00 03 	mcall	r6[12]
800211c4:	14 98       	mov	r8,r10
800211c6:	16 99       	mov	r9,r11
800211c8:	10 9a       	mov	r10,r8
800211ca:	12 9b       	mov	r11,r9
800211cc:	30 08       	mov	r8,0
800211ce:	e0 69 80 00 	mov	r9,32768
800211d2:	ea 19 40 66 	orh	r9,0x4066
800211d6:	f0 16 00 0c 	mcall	r6[48]
800211da:	14 98       	mov	r8,r10
800211dc:	16 99       	mov	r9,r11
800211de:	10 9a       	mov	r10,r8
800211e0:	12 9b       	mov	r11,r9
800211e2:	f0 16 00 08 	mcall	r6[32]
800211e6:	18 98       	mov	r8,r12
800211e8:	ef 48 ff bc 	st.w	r7[-68],r8
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
800211ec:	ee cc 00 a8 	sub	r12,r7,168
800211f0:	20 cd       	sub	sp,48
800211f2:	1a 98       	mov	r8,sp
800211f4:	10 9b       	mov	r11,r8
800211f6:	ee ca 00 50 	sub	r10,r7,80
800211fa:	f6 c8 00 00 	sub	r8,r11,0
800211fe:	f4 c9 00 00 	sub	r9,r10,0
80021202:	72 0e       	ld.w	lr,r9[0x0]
80021204:	91 0e       	st.w	r8[0x0],lr
80021206:	72 1e       	ld.w	lr,r9[0x4]
80021208:	91 1e       	st.w	r8[0x4],lr
8002120a:	72 2e       	ld.w	lr,r9[0x8]
8002120c:	91 2e       	st.w	r8[0x8],lr
8002120e:	72 39       	ld.w	r9,r9[0xc]
80021210:	91 39       	st.w	r8[0xc],r9
80021212:	f6 c8 ff f0 	sub	r8,r11,-16
80021216:	f4 c9 ff f0 	sub	r9,r10,-16
8002121a:	72 0e       	ld.w	lr,r9[0x0]
8002121c:	91 0e       	st.w	r8[0x0],lr
8002121e:	72 1e       	ld.w	lr,r9[0x4]
80021220:	91 1e       	st.w	r8[0x4],lr
80021222:	72 2e       	ld.w	lr,r9[0x8]
80021224:	91 2e       	st.w	r8[0x8],lr
80021226:	72 39       	ld.w	r9,r9[0xc]
80021228:	91 39       	st.w	r8[0xc],r9
8002122a:	f6 c8 ff e0 	sub	r8,r11,-32
8002122e:	f4 c9 ff e0 	sub	r9,r10,-32
80021232:	72 0a       	ld.w	r10,r9[0x0]
80021234:	91 0a       	st.w	r8[0x0],r10
80021236:	72 1a       	ld.w	r10,r9[0x4]
80021238:	91 1a       	st.w	r8[0x4],r10
8002123a:	72 2a       	ld.w	r10,r9[0x8]
8002123c:	91 2a       	st.w	r8[0x8],r10
8002123e:	72 39       	ld.w	r9,r9[0xc]
80021240:	91 39       	st.w	r8[0xc],r9
80021242:	f0 16 00 8b 	mcall	r6[556]
80021246:	2f 4d       	sub	sp,-48
80021248:	ee ca 00 40 	sub	r10,r7,64
8002124c:	ee cb 00 a8 	sub	r11,r7,168
80021250:	f4 c8 00 00 	sub	r8,r10,0
80021254:	f6 c9 00 00 	sub	r9,r11,0
80021258:	72 0c       	ld.w	r12,r9[0x0]
8002125a:	91 0c       	st.w	r8[0x0],r12
8002125c:	72 1c       	ld.w	r12,r9[0x4]
8002125e:	91 1c       	st.w	r8[0x4],r12
80021260:	72 2c       	ld.w	r12,r9[0x8]
80021262:	91 2c       	st.w	r8[0x8],r12
80021264:	72 39       	ld.w	r9,r9[0xc]
80021266:	91 39       	st.w	r8[0xc],r9
80021268:	f6 e8 00 10 	ld.d	r8,r11[16]
8002126c:	f4 e9 00 10 	st.d	r10[16],r8
80021270:	76 68       	ld.w	r8,r11[0x18]
80021272:	95 68       	st.w	r10[0x18],r8
		break;
80021274:	cf b8       	rjmp	8002146a <set_waypoint_from_frame+0x5a4>
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
		case MAV_FRAME_GLOBAL_RELATIVE_ALT:
			waypoint_global.latitude = current_wp.x;
80021276:	ea e8 00 18 	ld.d	r8,r5[24]
8002127a:	ee e9 ff e8 	st.d	r7[-24],r8
			waypoint_global.longitude = current_wp.y;
8002127e:	ea e8 00 20 	ld.d	r8,r5[32]
80021282:	ee e9 ff e0 	st.d	r7[-32],r8
			waypoint_global.altitude = current_wp.z;
80021286:	ea e8 00 28 	ld.d	r8,r5[40]
8002128a:	10 9a       	mov	r10,r8
8002128c:	12 9b       	mov	r11,r9
8002128e:	f0 16 00 08 	mcall	r6[32]
80021292:	18 98       	mov	r8,r12
80021294:	ef 48 ff f0 	st.w	r7[-16],r8
		
			global_position_t origin_relative_alt = origin;
80021298:	ee ca 00 78 	sub	r10,r7,120
8002129c:	ea cb ff d0 	sub	r11,r5,-48
800212a0:	f4 c8 00 00 	sub	r8,r10,0
800212a4:	f6 c9 00 00 	sub	r9,r11,0
800212a8:	72 0c       	ld.w	r12,r9[0x0]
800212aa:	91 0c       	st.w	r8[0x0],r12
800212ac:	72 1c       	ld.w	r12,r9[0x4]
800212ae:	91 1c       	st.w	r8[0x4],r12
800212b0:	72 2c       	ld.w	r12,r9[0x8]
800212b2:	91 2c       	st.w	r8[0x8],r12
800212b4:	72 39       	ld.w	r9,r9[0xc]
800212b6:	91 39       	st.w	r8[0xc],r9
800212b8:	f6 e8 00 10 	ld.d	r8,r11[16]
800212bc:	f4 e9 00 10 	st.d	r10[16],r8
800212c0:	76 68       	ld.w	r8,r11[0x18]
800212c2:	95 68       	st.w	r10[0x18],r8
			origin_relative_alt.altitude = 0.0;
800212c4:	30 08       	mov	r8,0
800212c6:	ef 48 ff 98 	st.w	r7[-104],r8
			waypoint_coor = global_to_local_position(waypoint_global,origin_relative_alt);
800212ca:	ee cc 00 a8 	sub	r12,r7,168
800212ce:	20 7d       	sub	sp,28
800212d0:	1a 98       	mov	r8,sp
800212d2:	10 9a       	mov	r10,r8
800212d4:	ee cb 00 78 	sub	r11,r7,120
800212d8:	f4 c8 00 00 	sub	r8,r10,0
800212dc:	f6 c9 00 00 	sub	r9,r11,0
800212e0:	72 0e       	ld.w	lr,r9[0x0]
800212e2:	91 0e       	st.w	r8[0x0],lr
800212e4:	72 1e       	ld.w	lr,r9[0x4]
800212e6:	91 1e       	st.w	r8[0x4],lr
800212e8:	72 2e       	ld.w	lr,r9[0x8]
800212ea:	91 2e       	st.w	r8[0x8],lr
800212ec:	72 39       	ld.w	r9,r9[0xc]
800212ee:	91 39       	st.w	r8[0xc],r9
800212f0:	f6 e8 00 10 	ld.d	r8,r11[16]
800212f4:	f4 e9 00 10 	st.d	r10[16],r8
800212f8:	76 68       	ld.w	r8,r11[0x18]
800212fa:	95 68       	st.w	r10[0x18],r8
800212fc:	20 7d       	sub	sp,28
800212fe:	1a 98       	mov	r8,sp
80021300:	10 9a       	mov	r10,r8
80021302:	ee cb 00 20 	sub	r11,r7,32
80021306:	f4 c8 00 00 	sub	r8,r10,0
8002130a:	f6 c9 00 00 	sub	r9,r11,0
8002130e:	72 0e       	ld.w	lr,r9[0x0]
80021310:	91 0e       	st.w	r8[0x0],lr
80021312:	72 1e       	ld.w	lr,r9[0x4]
80021314:	91 1e       	st.w	r8[0x4],lr
80021316:	72 2e       	ld.w	lr,r9[0x8]
80021318:	91 2e       	st.w	r8[0x8],lr
8002131a:	72 39       	ld.w	r9,r9[0xc]
8002131c:	91 39       	st.w	r8[0xc],r9
8002131e:	f6 e8 00 10 	ld.d	r8,r11[16]
80021322:	f4 e9 00 10 	st.d	r10[16],r8
80021326:	76 68       	ld.w	r8,r11[0x18]
80021328:	95 68       	st.w	r10[0x18],r8
8002132a:	f0 16 00 7d 	mcall	r6[500]
8002132e:	2f 2d       	sub	sp,-56
80021330:	ee cb 00 50 	sub	r11,r7,80
80021334:	ee ca 00 a8 	sub	r10,r7,168
80021338:	f6 c8 00 00 	sub	r8,r11,0
8002133c:	f4 c9 00 00 	sub	r9,r10,0
80021340:	72 0c       	ld.w	r12,r9[0x0]
80021342:	91 0c       	st.w	r8[0x0],r12
80021344:	72 1c       	ld.w	r12,r9[0x4]
80021346:	91 1c       	st.w	r8[0x4],r12
80021348:	72 2c       	ld.w	r12,r9[0x8]
8002134a:	91 2c       	st.w	r8[0x8],r12
8002134c:	72 39       	ld.w	r9,r9[0xc]
8002134e:	91 39       	st.w	r8[0xc],r9
80021350:	f6 c8 ff f0 	sub	r8,r11,-16
80021354:	f4 c9 ff f0 	sub	r9,r10,-16
80021358:	72 0c       	ld.w	r12,r9[0x0]
8002135a:	91 0c       	st.w	r8[0x0],r12
8002135c:	72 1c       	ld.w	r12,r9[0x4]
8002135e:	91 1c       	st.w	r8[0x4],r12
80021360:	72 2c       	ld.w	r12,r9[0x8]
80021362:	91 2c       	st.w	r8[0x8],r12
80021364:	72 39       	ld.w	r9,r9[0xc]
80021366:	91 39       	st.w	r8[0xc],r9
80021368:	f6 c8 ff e0 	sub	r8,r11,-32
8002136c:	f4 c9 ff e0 	sub	r9,r10,-32
80021370:	72 0a       	ld.w	r10,r9[0x0]
80021372:	91 0a       	st.w	r8[0x0],r10
80021374:	72 1a       	ld.w	r10,r9[0x4]
80021376:	91 1a       	st.w	r8[0x4],r10
80021378:	72 2a       	ld.w	r10,r9[0x8]
8002137a:	91 2a       	st.w	r8[0x8],r10
8002137c:	72 39       	ld.w	r9,r9[0xc]
8002137e:	91 39       	st.w	r8[0xc],r9
		
			dbg_print("LocalOrigin: lat (x1e7):");
80021380:	fe cc 04 ec 	sub	r12,pc,1260
80021384:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.latitude * 10000000,10);
80021388:	ee ea ff 90 	ld.d	r10,r7[-112]
8002138c:	30 08       	mov	r8,0
8002138e:	e0 69 12 d0 	mov	r9,4816
80021392:	ea 19 41 63 	orh	r9,0x4163
80021396:	f0 16 00 03 	mcall	r6[12]
8002139a:	14 98       	mov	r8,r10
8002139c:	16 99       	mov	r9,r11
8002139e:	10 9a       	mov	r10,r8
800213a0:	12 9b       	mov	r11,r9
800213a2:	f0 16 00 14 	mcall	r6[80]
800213a6:	18 98       	mov	r8,r12
800213a8:	30 ab       	mov	r11,10
800213aa:	10 9c       	mov	r12,r8
800213ac:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" long (x1e7):");
800213b0:	fe cc 05 84 	sub	r12,pc,1412
800213b4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin_relative_alt.longitude * 10000000,10);
800213b8:	ee ea ff 88 	ld.d	r10,r7[-120]
800213bc:	30 08       	mov	r8,0
800213be:	e0 69 12 d0 	mov	r9,4816
800213c2:	ea 19 41 63 	orh	r9,0x4163
800213c6:	f0 16 00 03 	mcall	r6[12]
800213ca:	14 98       	mov	r8,r10
800213cc:	16 99       	mov	r9,r11
800213ce:	10 9a       	mov	r10,r8
800213d0:	12 9b       	mov	r11,r9
800213d2:	f0 16 00 14 	mcall	r6[80]
800213d6:	18 98       	mov	r8,r12
800213d8:	30 ab       	mov	r11,10
800213da:	10 9c       	mov	r12,r8
800213dc:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" global alt (x1000):");
800213e0:	fe cc 05 30 	sub	r12,pc,1328
800213e4:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(origin.altitude*1000,10);
800213e8:	6b 09       	ld.w	r9,r5[0x40]
800213ea:	fc 18 44 7a 	movh	r8,0x447a
800213ee:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
800213f2:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800213f6:	30 ab       	mov	r11,10
800213f8:	10 9c       	mov	r12,r8
800213fa:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" wp_coor: x (x100):");
800213fe:	fe cc 05 b2 	sub	r12,pc,1458
80021402:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[X]*100,10);
80021406:	ee f9 ff b0 	ld.w	r9,r7[-80]
8002140a:	fc 18 42 c8 	movh	r8,0x42c8
8002140e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021412:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021416:	30 ab       	mov	r11,10
80021418:	10 9c       	mov	r12,r8
8002141a:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", y (x100):");
8002141e:	fe cc 05 be 	sub	r12,pc,1470
80021422:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Y]*100,10);
80021426:	ee f9 ff b4 	ld.w	r9,r7[-76]
8002142a:	fc 18 42 c8 	movh	r8,0x42c8
8002142e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021432:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021436:	30 ab       	mov	r11,10
80021438:	10 9c       	mov	r12,r8
8002143a:	f0 16 00 04 	mcall	r6[16]
			dbg_print(", z (x100):");
8002143e:	fe cc 05 d2 	sub	r12,pc,1490
80021442:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(waypoint_coor.pos[Z]*100,10);
80021446:	ee f9 ff b8 	ld.w	r9,r7[-72]
8002144a:	fc 18 42 c8 	movh	r8,0x42c8
8002144e:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80021452:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021456:	30 ab       	mov	r11,10
80021458:	10 9c       	mov	r12,r8
8002145a:	f0 16 00 04 	mcall	r6[16]
			dbg_print("\n");
8002145e:	fe cc 17 46 	sub	r12,pc,5958
80021462:	f0 16 00 01 	mcall	r6[4]
80021466:	c0 28       	rjmp	8002146a <set_waypoint_from_frame+0x5a4>
			waypoint_coor.heading= deg_to_rad(current_wp.param4);
			waypoint_coor.origin = local_to_global_position(waypoint_coor);
		break;
		case MAV_FRAME_MISSION:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
80021468:	d7 03       	nop
		case MAV_FRAME_LOCAL_ENU:
			//mavlink_msg_mission_ack_send(MAVLINK_COMM_0,rec->msg.sysid,rec->msg.compid,MAV_RESULT_UNSUPPORTED);
		break;
	}
	
	return waypoint_coor;
8002146a:	06 9b       	mov	r11,r3
8002146c:	ee ca 00 50 	sub	r10,r7,80
80021470:	f6 c8 00 00 	sub	r8,r11,0
80021474:	f4 c9 00 00 	sub	r9,r10,0
80021478:	72 0c       	ld.w	r12,r9[0x0]
8002147a:	91 0c       	st.w	r8[0x0],r12
8002147c:	72 1c       	ld.w	r12,r9[0x4]
8002147e:	91 1c       	st.w	r8[0x4],r12
80021480:	72 2c       	ld.w	r12,r9[0x8]
80021482:	91 2c       	st.w	r8[0x8],r12
80021484:	72 39       	ld.w	r9,r9[0xc]
80021486:	91 39       	st.w	r8[0xc],r9
80021488:	f6 c8 ff f0 	sub	r8,r11,-16
8002148c:	f4 c9 ff f0 	sub	r9,r10,-16
80021490:	72 0c       	ld.w	r12,r9[0x0]
80021492:	91 0c       	st.w	r8[0x0],r12
80021494:	72 1c       	ld.w	r12,r9[0x4]
80021496:	91 1c       	st.w	r8[0x4],r12
80021498:	72 2c       	ld.w	r12,r9[0x8]
8002149a:	91 2c       	st.w	r8[0x8],r12
8002149c:	72 39       	ld.w	r9,r9[0xc]
8002149e:	91 39       	st.w	r8[0xc],r9
800214a0:	f6 c8 ff e0 	sub	r8,r11,-32
800214a4:	f4 c9 ff e0 	sub	r9,r10,-32
800214a8:	72 0a       	ld.w	r10,r9[0x0]
800214aa:	91 0a       	st.w	r8[0x0],r10
800214ac:	72 1a       	ld.w	r10,r9[0x4]
800214ae:	91 1a       	st.w	r8[0x4],r10
800214b0:	72 2a       	ld.w	r10,r9[0x8]
800214b2:	91 2a       	st.w	r8[0x8],r10
800214b4:	72 39       	ld.w	r9,r9[0xc]
800214b6:	91 39       	st.w	r8[0xc],r9
}
800214b8:	06 9c       	mov	r12,r3
800214ba:	2d 6d       	sub	sp,-168
800214bc:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800214c0:	80 02       	ld.sh	r2,r0[0x0]
800214c2:	0d 58       	ld.sh	r8,--r6
800214c4:	50 6f       	stdsp	sp[0x18],pc
800214c6:	73 69       	ld.w	r9,r9[0x58]
800214c8:	74 69       	ld.w	r9,r10[0x18]
800214ca:	6f 6e       	ld.w	lr,r7[0x58]
800214cc:	20 68       	sub	r8,6
800214ce:	6f 6c       	ld.w	r12,r7[0x58]
800214d0:	64 20       	ld.w	r0,r2[0x8]
800214d2:	61 74       	ld.w	r4,r0[0x5c]
800214d4:	3a 20       	mov	r0,-94
800214d6:	00 00       	add	r0,r0
800214d8:	29 0a       	sub	r10,-112
	...

800214dc <wp_hold_init>:

void wp_hold_init()
{
800214dc:	eb cd 40 c0 	pushm	r6-r7,lr
800214e0:	1a 97       	mov	r7,sp
800214e2:	20 3d       	sub	sp,12
800214e4:	4d 86       	lddpc	r6,80021644 <wp_hold_init+0x168>
800214e6:	1e 26       	rsub	r6,pc
	if (centralData->waypoint_hold_init == 0)
800214e8:	ec f8 00 00 	ld.w	r8,r6[0]
800214ec:	70 08       	ld.w	r8,r8[0x0]
800214ee:	f1 38 0c ff 	ld.ub	r8,r8[3327]
800214f2:	ec 18 00 01 	eorl	r8,0x1
800214f6:	5c 58       	castu.b	r8
800214f8:	e0 80 00 a3 	breq	8002163e <wp_hold_init+0x162>
	{
		dbg_print("Position hold at: ");
800214fc:	fe cc 00 38 	sub	r12,pc,56
80021500:	f0 16 00 01 	mcall	r6[4]
		dbg_print_num(centralData->position_estimator.localPosition.pos[X],10);
80021504:	ec f8 00 00 	ld.w	r8,r6[0]
80021508:	70 08       	ld.w	r8,r8[0x0]
8002150a:	f0 f8 09 e4 	ld.w	r8,r8[2532]
8002150e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021512:	30 ab       	mov	r11,10
80021514:	10 9c       	mov	r12,r8
80021516:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Y],10);
8002151a:	ec f8 00 00 	ld.w	r8,r6[0]
8002151e:	70 08       	ld.w	r8,r8[0x0]
80021520:	f0 f8 09 e8 	ld.w	r8,r8[2536]
80021524:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80021528:	30 ab       	mov	r11,10
8002152a:	10 9c       	mov	r12,r8
8002152c:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num(centralData->position_estimator.localPosition.pos[Z],10);
80021530:	ec f8 00 00 	ld.w	r8,r6[0]
80021534:	70 08       	ld.w	r8,r8[0x0]
80021536:	f0 f8 09 ec 	ld.w	r8,r8[2540]
8002153a:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
8002153e:	30 ab       	mov	r11,10
80021540:	10 9c       	mov	r12,r8
80021542:	f0 16 00 04 	mcall	r6[16]
		dbg_print_num((int)(centralData->position_estimator.localPosition.heading*180.0/3.14),10);
80021546:	ec f8 00 00 	ld.w	r8,r6[0]
8002154a:	70 08       	ld.w	r8,r8[0x0]
8002154c:	f0 f8 09 f0 	ld.w	r8,r8[2544]
80021550:	10 9c       	mov	r12,r8
80021552:	f0 16 00 02 	mcall	r6[8]
80021556:	30 08       	mov	r8,0
80021558:	e0 69 80 00 	mov	r9,32768
8002155c:	ea 19 40 66 	orh	r9,0x4066
80021560:	f0 16 00 03 	mcall	r6[12]
80021564:	14 98       	mov	r8,r10
80021566:	16 99       	mov	r9,r11
80021568:	10 9a       	mov	r10,r8
8002156a:	12 9b       	mov	r11,r9
8002156c:	e0 68 85 1f 	mov	r8,34079
80021570:	ea 18 51 eb 	orh	r8,0x51eb
80021574:	e0 69 1e b8 	mov	r9,7864
80021578:	ea 19 40 09 	orh	r9,0x4009
8002157c:	f0 16 00 0c 	mcall	r6[48]
80021580:	14 98       	mov	r8,r10
80021582:	16 99       	mov	r9,r11
80021584:	10 9a       	mov	r10,r8
80021586:	12 9b       	mov	r11,r9
80021588:	f0 16 00 14 	mcall	r6[80]
8002158c:	18 98       	mov	r8,r12
8002158e:	30 ab       	mov	r11,10
80021590:	10 9c       	mov	r12,r8
80021592:	f0 16 00 04 	mcall	r6[16]
		dbg_print(")\n");
80021596:	fe cc 00 be 	sub	r12,pc,190
8002159a:	f0 16 00 01 	mcall	r6[4]
		
		centralData->waypoint_hold_init = true;
8002159e:	ec f8 00 00 	ld.w	r8,r6[0]
800215a2:	70 09       	ld.w	r9,r8[0x0]
800215a4:	30 18       	mov	r8,1
800215a6:	f3 68 0c ff 	st.b	r9[3327],r8
		centralData->waypoint_hold_coordinates = centralData->position_estimator.localPosition;
800215aa:	ec f8 00 00 	ld.w	r8,r6[0]
800215ae:	70 09       	ld.w	r9,r8[0x0]
800215b0:	ec f8 00 00 	ld.w	r8,r6[0]
800215b4:	70 08       	ld.w	r8,r8[0x0]
800215b6:	f2 cb f3 68 	sub	r11,r9,-3224
800215ba:	f0 ca f6 1c 	sub	r10,r8,-2532
800215be:	f6 c8 00 00 	sub	r8,r11,0
800215c2:	f4 c9 00 00 	sub	r9,r10,0
800215c6:	72 0c       	ld.w	r12,r9[0x0]
800215c8:	91 0c       	st.w	r8[0x0],r12
800215ca:	72 1c       	ld.w	r12,r9[0x4]
800215cc:	91 1c       	st.w	r8[0x4],r12
800215ce:	72 2c       	ld.w	r12,r9[0x8]
800215d0:	91 2c       	st.w	r8[0x8],r12
800215d2:	72 39       	ld.w	r9,r9[0xc]
800215d4:	91 39       	st.w	r8[0xc],r9
800215d6:	f6 c8 ff f0 	sub	r8,r11,-16
800215da:	f4 c9 ff f0 	sub	r9,r10,-16
800215de:	72 0c       	ld.w	r12,r9[0x0]
800215e0:	91 0c       	st.w	r8[0x0],r12
800215e2:	72 1c       	ld.w	r12,r9[0x4]
800215e4:	91 1c       	st.w	r8[0x4],r12
800215e6:	72 2c       	ld.w	r12,r9[0x8]
800215e8:	91 2c       	st.w	r8[0x8],r12
800215ea:	72 39       	ld.w	r9,r9[0xc]
800215ec:	91 39       	st.w	r8[0xc],r9
800215ee:	f6 c8 ff e0 	sub	r8,r11,-32
800215f2:	f4 c9 ff e0 	sub	r9,r10,-32
800215f6:	72 0a       	ld.w	r10,r9[0x0]
800215f8:	91 0a       	st.w	r8[0x0],r10
800215fa:	72 1a       	ld.w	r10,r9[0x4]
800215fc:	91 1a       	st.w	r8[0x4],r10
800215fe:	72 2a       	ld.w	r10,r9[0x8]
80021600:	91 2a       	st.w	r8[0x8],r10
80021602:	72 39       	ld.w	r9,r9[0xc]
80021604:	91 39       	st.w	r8[0xc],r9
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021606:	ec f8 00 00 	ld.w	r8,r6[0]
8002160a:	70 09       	ld.w	r9,r8[0x0]
8002160c:	ee ca 00 0c 	sub	r10,r7,12
80021610:	20 4d       	sub	sp,16
80021612:	1a 98       	mov	r8,sp
80021614:	20 08       	sub	r8,0
80021616:	20 09       	sub	r9,0
80021618:	72 0b       	ld.w	r11,r9[0x0]
8002161a:	91 0b       	st.w	r8[0x0],r11
8002161c:	72 1b       	ld.w	r11,r9[0x4]
8002161e:	91 1b       	st.w	r8[0x4],r11
80021620:	72 2b       	ld.w	r11,r9[0x8]
80021622:	91 2b       	st.w	r8[0x8],r11
80021624:	72 39       	ld.w	r9,r9[0xc]
80021626:	91 39       	st.w	r8[0xc],r9
80021628:	14 9c       	mov	r12,r10
8002162a:	f0 16 00 70 	mcall	r6[448]
8002162e:	2f cd       	sub	sp,-16
		centralData->waypoint_hold_coordinates.heading = aero_attitude.rpy[2];
80021630:	ec f8 00 00 	ld.w	r8,r6[0]
80021634:	70 08       	ld.w	r8,r8[0x0]
80021636:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002163a:	f1 49 0c a4 	st.w	r8[3236],r9
	}
}
8002163e:	2f dd       	sub	sp,-12
80021640:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021644:	80 02       	ld.sh	r2,r0[0x0]
80021646:	13 6a       	ld.uh	r10,--r9

80021648 <waypoint_hold_position_handler>:

void waypoint_hold_position_handler()
{
80021648:	eb cd 40 c0 	pushm	r6-r7,lr
8002164c:	1a 97       	mov	r7,sp
8002164e:	48 96       	lddpc	r6,80021670 <waypoint_hold_position_handler+0x28>
80021650:	1e 26       	rsub	r6,pc
	if (!centralData->waypoint_set)
80021652:	ec f8 00 00 	ld.w	r8,r6[0]
80021656:	70 08       	ld.w	r8,r8[0x0]
80021658:	f1 38 0c fc 	ld.ub	r8,r8[3324]
8002165c:	ec 18 00 01 	eorl	r8,0x1
80021660:	5c 58       	castu.b	r8
80021662:	c0 30       	breq	80021668 <waypoint_hold_position_handler+0x20>
	{
		init_wp();
80021664:	f0 16 00 90 	mcall	r6[576]
	}
	wp_hold_init();
80021668:	f0 16 00 b9 	mcall	r6[740]
}
8002166c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021670:	80 02       	ld.sh	r2,r0[0x0]
80021672:	14 d4       	st.w	--r10,r4
80021674:	20 72       	sub	r2,7
80021676:	65 61       	ld.w	r1,r2[0x58]
80021678:	63 68       	ld.w	r8,r1[0x58]
8002167a:	65 64       	ld.w	r4,r2[0x58]
8002167c:	2c 20       	sub	r0,-62
8002167e:	64 69       	ld.w	r9,r2[0x18]
80021680:	73 74       	ld.w	r4,r9[0x5c]
80021682:	61 6e       	ld.w	lr,r0[0x58]
80021684:	63 65       	ld.w	r5,r1[0x58]
80021686:	3a 00       	mov	r0,-96
80021688:	20 6c       	sub	r12,6
8002168a:	65 73       	ld.w	r3,r2[0x5c]
8002168c:	73 20       	ld.w	r0,r9[0x48]
8002168e:	74 68       	ld.w	r8,r10[0x18]
80021690:	61 6e       	ld.w	lr,r0[0x58]
80021692:	20 3a       	sub	r10,3
80021694:	00 00       	add	r0,r0
80021696:	00 00       	add	r0,r0
80021698:	2e 0a       	sub	r10,-32
8002169a:	00 00       	add	r0,r0
8002169c:	41 75       	lddsp	r5,sp[0x5c]
8002169e:	74 6f       	ld.w	pc,r10[0x18]
800216a0:	63 6f       	ld.w	pc,r1[0x58]
800216a2:	6e 74       	ld.w	r4,r7[0x1c]
800216a4:	69 6e       	ld.w	lr,r4[0x58]
800216a6:	75 65       	ld.w	r5,r10[0x58]
800216a8:	20 74       	sub	r4,7
800216aa:	6f 77       	ld.w	r7,r7[0x5c]
800216ac:	61 72       	ld.w	r2,r0[0x5c]
800216ae:	64 73       	ld.w	r3,r2[0x1c]
800216b0:	20 77       	sub	r7,7
800216b2:	61 79       	ld.w	r9,r0[0x5c]
800216b4:	70 6f       	ld.w	pc,r8[0x18]
800216b6:	69 6e       	ld.w	lr,r4[0x58]
800216b8:	74 20       	ld.w	r0,r10[0x8]
800216ba:	4e 72       	lddpc	r2,80021854 <waypoint_navigation_handler+0x18e>
800216bc:	00 00       	add	r0,r0
800216be:	00 00       	add	r0,r0
800216c0:	53 74       	stdsp	sp[0xdc],r4
800216c2:	6f 70       	ld.w	r0,r7[0x5c]
800216c4:	0a 00       	add	r0,r5

800216c6 <waypoint_navigation_handler>:

void waypoint_navigation_handler()
{
800216c6:	eb cd 40 e8 	pushm	r3,r5-r7,lr
800216ca:	1a 97       	mov	r7,sp
800216cc:	21 0d       	sub	sp,64
800216ce:	fe f6 03 ba 	ld.w	r6,pc[954]
800216d2:	1e 26       	rsub	r6,pc

	if (centralData->waypoint_set)
800216d4:	ec f8 00 00 	ld.w	r8,r6[0]
800216d8:	70 08       	ld.w	r8,r8[0x0]
800216da:	f1 38 0c fc 	ld.ub	r8,r8[3324]
800216de:	58 08       	cp.w	r8,0
800216e0:	e0 80 01 cd 	breq	80021a7a <waypoint_navigation_handler+0x3b4>
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
800216e4:	30 08       	mov	r8,0
800216e6:	ef 68 ff ff 	st.b	r7[-1],r8
800216ea:	c2 18       	rjmp	8002172c <waypoint_navigation_handler+0x66>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
800216ec:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800216f0:	ec f9 00 00 	ld.w	r9,r6[0]
800216f4:	72 09       	ld.w	r9,r9[0x0]
800216f6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800216fa:	f4 ca fc e6 	sub	r10,r10,-794
800216fe:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021702:	ec f9 00 00 	ld.w	r9,r6[0]
80021706:	72 09       	ld.w	r9,r9[0x0]
80021708:	ef 3b ff ff 	ld.ub	r11,r7[-1]
8002170c:	f6 cb fd 87 	sub	r11,r11,-633
80021710:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021714:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021718:	a3 68       	lsl	r8,0x2
8002171a:	ee 08 00 08 	add	r8,r7,r8
8002171e:	f1 49 ff f0 	st.w	r8[-16],r9

	if (centralData->waypoint_set)
	{
		uint8_t i;
		float rel_pos[3];
		for (i=0;i<3;i++)
80021722:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021726:	2f f8       	sub	r8,-1
80021728:	ef 68 ff ff 	st.b	r7[-1],r8
8002172c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021730:	30 28       	mov	r8,2
80021732:	f0 09 18 00 	cp.b	r9,r8
80021736:	fe 98 ff db 	brls	800216ec <waypoint_navigation_handler+0x26>
		{
			rel_pos[i] = centralData->waypoint_coordinates.pos[i]-centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
8002173a:	ec f8 00 00 	ld.w	r8,r6[0]
8002173e:	70 05       	ld.w	r5,r8[0x0]
80021740:	ee c8 00 10 	sub	r8,r7,16
80021744:	10 9c       	mov	r12,r8
80021746:	fe b0 f0 d5 	rcall	8001f8f0 <vector_norm_sqr>
8002174a:	18 98       	mov	r8,r12
8002174c:	eb 48 0c f8 	st.w	r5[3320],r8
		
		if (centralData->dist2wp_sqr < (centralData->current_waypoint.param2*centralData->current_waypoint.param2))
80021750:	ec f8 00 00 	ld.w	r8,r6[0]
80021754:	70 08       	ld.w	r8,r8[0x0]
80021756:	f0 fa 0c f8 	ld.w	r10,r8[3320]
8002175a:	ec f8 00 00 	ld.w	r8,r6[0]
8002175e:	70 08       	ld.w	r8,r8[0x0]
80021760:	f0 f9 0c 40 	ld.w	r9,r8[3136]
80021764:	ec f8 00 00 	ld.w	r8,r6[0]
80021768:	70 08       	ld.w	r8,r8[0x0]
8002176a:	f0 f8 0c 40 	ld.w	r8,r8[3136]
8002176e:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80021772:	30 18       	mov	r8,1
80021774:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021778:	e0 8c 00 03 	brvs	8002177e <waypoint_navigation_handler+0xb8>
8002177c:	c0 25       	brlt	80021780 <waypoint_navigation_handler+0xba>
8002177e:	30 08       	mov	r8,0
80021780:	5c 58       	castu.b	r8
80021782:	e0 80 01 80 	breq	80021a82 <waypoint_navigation_handler+0x3bc>
		{
			dbg_print("Waypoint Nr");
80021786:	fe cc 1d a2 	sub	r12,pc,7586
8002178a:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_wp_count,10);
8002178e:	ec f8 00 00 	ld.w	r8,r6[0]
80021792:	70 08       	ld.w	r8,r8[0x0]
80021794:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80021798:	5c 68       	casts.b	r8
8002179a:	30 ab       	mov	r11,10
8002179c:	10 9c       	mov	r12,r8
8002179e:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" reached, distance:");
800217a2:	fe cc 01 2e 	sub	r12,pc,302
800217a6:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(sqrt(centralData->dist2wp_sqr),10);
800217aa:	ec f8 00 00 	ld.w	r8,r6[0]
800217ae:	70 08       	ld.w	r8,r8[0x0]
800217b0:	f0 f8 0c f8 	ld.w	r8,r8[3320]
800217b4:	10 9c       	mov	r12,r8
800217b6:	f0 16 00 02 	mcall	r6[8]
800217ba:	14 98       	mov	r8,r10
800217bc:	16 99       	mov	r9,r11
800217be:	10 9a       	mov	r10,r8
800217c0:	12 9b       	mov	r11,r9
800217c2:	f0 16 00 6e 	mcall	r6[440]
800217c6:	14 98       	mov	r8,r10
800217c8:	16 99       	mov	r9,r11
800217ca:	10 9a       	mov	r10,r8
800217cc:	12 9b       	mov	r11,r9
800217ce:	f0 16 00 14 	mcall	r6[80]
800217d2:	18 98       	mov	r8,r12
800217d4:	30 ab       	mov	r11,10
800217d6:	10 9c       	mov	r12,r8
800217d8:	f0 16 00 04 	mcall	r6[16]
			dbg_print(" less than :");
800217dc:	fe cc 01 54 	sub	r12,pc,340
800217e0:	f0 16 00 01 	mcall	r6[4]
			dbg_print_num(centralData->current_waypoint.param2,10);
800217e4:	ec f8 00 00 	ld.w	r8,r6[0]
800217e8:	70 08       	ld.w	r8,r8[0x0]
800217ea:	f0 f8 0c 40 	ld.w	r8,r8[3136]
800217ee:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800217f2:	30 ab       	mov	r11,10
800217f4:	10 9c       	mov	r12,r8
800217f6:	f0 16 00 04 	mcall	r6[16]
			dbg_print(".\n");
800217fa:	fe cc 01 62 	sub	r12,pc,354
800217fe:	f0 16 00 01 	mcall	r6[4]
			mavlink_msg_mission_item_reached_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021802:	ec f8 00 00 	ld.w	r8,r6[0]
80021806:	70 08       	ld.w	r8,r8[0x0]
80021808:	f1 38 0c 66 	ld.ub	r8,r8[3174]
8002180c:	5c 68       	casts.b	r8
8002180e:	5c 88       	casts.h	r8
80021810:	5c 78       	castu.h	r8
80021812:	10 9b       	mov	r11,r8
80021814:	30 0c       	mov	r12,0
80021816:	fe b0 ef 9f 	rcall	8001f754 <mavlink_msg_mission_item_reached_send>
			
			centralData->waypoint_list[centralData->current_wp_count].current = 0;
8002181a:	ec f8 00 00 	ld.w	r8,r6[0]
8002181e:	70 0a       	ld.w	r10,r8[0x0]
80021820:	ec f8 00 00 	ld.w	r8,r6[0]
80021824:	70 08       	ld.w	r8,r8[0x0]
80021826:	f1 38 0c 66 	ld.ub	r8,r8[3174]
8002182a:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8002182e:	12 98       	mov	r8,r9
80021830:	a1 78       	lsl	r8,0x1
80021832:	12 08       	add	r8,r9
80021834:	a5 68       	lsl	r8,0x4
80021836:	f4 08 00 08 	add	r8,r10,r8
8002183a:	f0 c9 f5 a8 	sub	r9,r8,-2648
8002183e:	30 08       	mov	r8,0
80021840:	b2 88       	st.b	r9[0x0],r8
			if (centralData->current_waypoint.autocontinue == 1)
80021842:	ec f8 00 00 	ld.w	r8,r6[0]
80021846:	70 08       	ld.w	r8,r8[0x0]
80021848:	f1 39 0c 39 	ld.ub	r9,r8[3129]
8002184c:	30 18       	mov	r8,1
8002184e:	f0 09 18 00 	cp.b	r9,r8
80021852:	e0 81 01 07 	brne	80021a60 <waypoint_navigation_handler+0x39a>
			{
				dbg_print("Autocontinue towards waypoint Nr");
80021856:	fe cc 01 ba 	sub	r12,pc,442
8002185a:	f0 16 00 01 	mcall	r6[4]
				
				if (centralData->current_wp_count == (centralData->number_of_waypoints-1))
8002185e:	ec f8 00 00 	ld.w	r8,r6[0]
80021862:	70 08       	ld.w	r8,r8[0x0]
80021864:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80021868:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
8002186c:	ec f8 00 00 	ld.w	r8,r6[0]
80021870:	70 08       	ld.w	r8,r8[0x0]
80021872:	f1 08 0c 64 	ld.sh	r8,r8[3172]
80021876:	5c 78       	castu.h	r8
80021878:	20 18       	sub	r8,1
8002187a:	10 39       	cp.w	r9,r8
8002187c:	c0 81       	brne	8002188c <waypoint_navigation_handler+0x1c6>
				{
					centralData->current_wp_count = 0;
8002187e:	ec f8 00 00 	ld.w	r8,r6[0]
80021882:	70 09       	ld.w	r9,r8[0x0]
80021884:	30 08       	mov	r8,0
80021886:	f3 68 0c 66 	st.b	r9[3174],r8
8002188a:	c0 a8       	rjmp	8002189e <waypoint_navigation_handler+0x1d8>
					}else{
					centralData->current_wp_count++;
8002188c:	ec f8 00 00 	ld.w	r8,r6[0]
80021890:	70 08       	ld.w	r8,r8[0x0]
80021892:	f1 39 0c 66 	ld.ub	r9,r8[3174]
80021896:	2f f9       	sub	r9,-1
80021898:	5c 59       	castu.b	r9
8002189a:	f1 69 0c 66 	st.b	r8[3174],r9
				}
				dbg_print_num(centralData->current_wp_count,10);
8002189e:	ec f8 00 00 	ld.w	r8,r6[0]
800218a2:	70 08       	ld.w	r8,r8[0x0]
800218a4:	f1 38 0c 66 	ld.ub	r8,r8[3174]
800218a8:	5c 68       	casts.b	r8
800218aa:	30 ab       	mov	r11,10
800218ac:	10 9c       	mov	r12,r8
800218ae:	f0 16 00 04 	mcall	r6[16]
				dbg_print("\n");
800218b2:	fe cc 1b 9a 	sub	r12,pc,7066
800218b6:	f0 16 00 01 	mcall	r6[4]
				centralData->waypoint_list[centralData->current_wp_count].current = 1;
800218ba:	ec f8 00 00 	ld.w	r8,r6[0]
800218be:	70 0a       	ld.w	r10,r8[0x0]
800218c0:	ec f8 00 00 	ld.w	r8,r6[0]
800218c4:	70 08       	ld.w	r8,r8[0x0]
800218c6:	f1 38 0c 66 	ld.ub	r8,r8[3174]
800218ca:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800218ce:	12 98       	mov	r8,r9
800218d0:	a1 78       	lsl	r8,0x1
800218d2:	12 08       	add	r8,r9
800218d4:	a5 68       	lsl	r8,0x4
800218d6:	f4 08 00 08 	add	r8,r10,r8
800218da:	f0 c9 f5 a8 	sub	r9,r8,-2648
800218de:	30 18       	mov	r8,1
800218e0:	b2 88       	st.b	r9[0x0],r8
				centralData->current_waypoint = centralData->waypoint_list[centralData->current_wp_count];
800218e2:	ec f8 00 00 	ld.w	r8,r6[0]
800218e6:	70 0a       	ld.w	r10,r8[0x0]
800218e8:	ec f8 00 00 	ld.w	r8,r6[0]
800218ec:	70 0b       	ld.w	r11,r8[0x0]
800218ee:	ec f8 00 00 	ld.w	r8,r6[0]
800218f2:	70 08       	ld.w	r8,r8[0x0]
800218f4:	f1 38 0c 66 	ld.ub	r8,r8[3174]
800218f8:	f3 d8 b0 08 	bfexts	r9,r8,0x0,0x8
800218fc:	12 98       	mov	r8,r9
800218fe:	a1 78       	lsl	r8,0x1
80021900:	12 08       	add	r8,r9
80021902:	a5 68       	lsl	r8,0x4
80021904:	f6 08 00 08 	add	r8,r11,r8
80021908:	f0 c8 f5 ac 	sub	r8,r8,-2644
8002190c:	f4 cb f3 cc 	sub	r11,r10,-3124
80021910:	10 9a       	mov	r10,r8
80021912:	f6 c8 00 00 	sub	r8,r11,0
80021916:	f4 c9 00 00 	sub	r9,r10,0
8002191a:	72 0c       	ld.w	r12,r9[0x0]
8002191c:	91 0c       	st.w	r8[0x0],r12
8002191e:	72 1c       	ld.w	r12,r9[0x4]
80021920:	91 1c       	st.w	r8[0x4],r12
80021922:	72 2c       	ld.w	r12,r9[0x8]
80021924:	91 2c       	st.w	r8[0x8],r12
80021926:	72 39       	ld.w	r9,r9[0xc]
80021928:	91 39       	st.w	r8[0xc],r9
8002192a:	f6 c8 ff f0 	sub	r8,r11,-16
8002192e:	f4 c9 ff f0 	sub	r9,r10,-16
80021932:	72 0c       	ld.w	r12,r9[0x0]
80021934:	91 0c       	st.w	r8[0x0],r12
80021936:	72 1c       	ld.w	r12,r9[0x4]
80021938:	91 1c       	st.w	r8[0x4],r12
8002193a:	72 2c       	ld.w	r12,r9[0x8]
8002193c:	91 2c       	st.w	r8[0x8],r12
8002193e:	72 39       	ld.w	r9,r9[0xc]
80021940:	91 39       	st.w	r8[0xc],r9
80021942:	f6 c8 ff e0 	sub	r8,r11,-32
80021946:	f4 c9 ff e0 	sub	r9,r10,-32
8002194a:	72 0a       	ld.w	r10,r9[0x0]
8002194c:	91 0a       	st.w	r8[0x0],r10
8002194e:	72 1a       	ld.w	r10,r9[0x4]
80021950:	91 1a       	st.w	r8[0x4],r10
80021952:	72 2a       	ld.w	r10,r9[0x8]
80021954:	91 2a       	st.w	r8[0x8],r10
80021956:	72 39       	ld.w	r9,r9[0xc]
80021958:	91 39       	st.w	r8[0xc],r9
				centralData->waypoint_coordinates = set_waypoint_from_frame(centralData->current_waypoint,centralData->position_estimator.localPosition.origin);
8002195a:	ec f8 00 00 	ld.w	r8,r6[0]
8002195e:	70 05       	ld.w	r5,r8[0x0]
80021960:	ec f8 00 00 	ld.w	r8,r6[0]
80021964:	70 08       	ld.w	r8,r8[0x0]
80021966:	ec f9 00 00 	ld.w	r9,r6[0]
8002196a:	72 0e       	ld.w	lr,r9[0x0]
8002196c:	ee cc 00 40 	sub	r12,r7,64
80021970:	20 7d       	sub	sp,28
80021972:	1a 99       	mov	r9,sp
80021974:	12 9a       	mov	r10,r9
80021976:	f0 cb f6 0c 	sub	r11,r8,-2548
8002197a:	f4 c8 00 00 	sub	r8,r10,0
8002197e:	f6 c9 00 00 	sub	r9,r11,0
80021982:	72 03       	ld.w	r3,r9[0x0]
80021984:	91 03       	st.w	r8[0x0],r3
80021986:	72 13       	ld.w	r3,r9[0x4]
80021988:	91 13       	st.w	r8[0x4],r3
8002198a:	72 23       	ld.w	r3,r9[0x8]
8002198c:	91 23       	st.w	r8[0x8],r3
8002198e:	72 39       	ld.w	r9,r9[0xc]
80021990:	91 39       	st.w	r8[0xc],r9
80021992:	f6 e8 00 10 	ld.d	r8,r11[16]
80021996:	f4 e9 00 10 	st.d	r10[16],r8
8002199a:	76 68       	ld.w	r8,r11[0x18]
8002199c:	95 68       	st.w	r10[0x18],r8
8002199e:	20 cd       	sub	sp,48
800219a0:	1a 98       	mov	r8,sp
800219a2:	10 9b       	mov	r11,r8
800219a4:	fc ca f3 cc 	sub	r10,lr,-3124
800219a8:	f6 c8 00 00 	sub	r8,r11,0
800219ac:	f4 c9 00 00 	sub	r9,r10,0
800219b0:	72 0e       	ld.w	lr,r9[0x0]
800219b2:	91 0e       	st.w	r8[0x0],lr
800219b4:	72 1e       	ld.w	lr,r9[0x4]
800219b6:	91 1e       	st.w	r8[0x4],lr
800219b8:	72 2e       	ld.w	lr,r9[0x8]
800219ba:	91 2e       	st.w	r8[0x8],lr
800219bc:	72 39       	ld.w	r9,r9[0xc]
800219be:	91 39       	st.w	r8[0xc],r9
800219c0:	f6 c8 ff f0 	sub	r8,r11,-16
800219c4:	f4 c9 ff f0 	sub	r9,r10,-16
800219c8:	72 0e       	ld.w	lr,r9[0x0]
800219ca:	91 0e       	st.w	r8[0x0],lr
800219cc:	72 1e       	ld.w	lr,r9[0x4]
800219ce:	91 1e       	st.w	r8[0x4],lr
800219d0:	72 2e       	ld.w	lr,r9[0x8]
800219d2:	91 2e       	st.w	r8[0x8],lr
800219d4:	72 39       	ld.w	r9,r9[0xc]
800219d6:	91 39       	st.w	r8[0xc],r9
800219d8:	f6 c8 ff e0 	sub	r8,r11,-32
800219dc:	f4 c9 ff e0 	sub	r9,r10,-32
800219e0:	72 0a       	ld.w	r10,r9[0x0]
800219e2:	91 0a       	st.w	r8[0x0],r10
800219e4:	72 1a       	ld.w	r10,r9[0x4]
800219e6:	91 1a       	st.w	r8[0x4],r10
800219e8:	72 2a       	ld.w	r10,r9[0x8]
800219ea:	91 2a       	st.w	r8[0x8],r10
800219ec:	72 39       	ld.w	r9,r9[0xc]
800219ee:	91 39       	st.w	r8[0xc],r9
800219f0:	f0 16 01 06 	mcall	r6[1048]
800219f4:	2e dd       	sub	sp,-76
800219f6:	ea cb f3 98 	sub	r11,r5,-3176
800219fa:	ee ca 00 40 	sub	r10,r7,64
800219fe:	f6 c8 00 00 	sub	r8,r11,0
80021a02:	f4 c9 00 00 	sub	r9,r10,0
80021a06:	72 0c       	ld.w	r12,r9[0x0]
80021a08:	91 0c       	st.w	r8[0x0],r12
80021a0a:	72 1c       	ld.w	r12,r9[0x4]
80021a0c:	91 1c       	st.w	r8[0x4],r12
80021a0e:	72 2c       	ld.w	r12,r9[0x8]
80021a10:	91 2c       	st.w	r8[0x8],r12
80021a12:	72 39       	ld.w	r9,r9[0xc]
80021a14:	91 39       	st.w	r8[0xc],r9
80021a16:	f6 c8 ff f0 	sub	r8,r11,-16
80021a1a:	f4 c9 ff f0 	sub	r9,r10,-16
80021a1e:	72 0c       	ld.w	r12,r9[0x0]
80021a20:	91 0c       	st.w	r8[0x0],r12
80021a22:	72 1c       	ld.w	r12,r9[0x4]
80021a24:	91 1c       	st.w	r8[0x4],r12
80021a26:	72 2c       	ld.w	r12,r9[0x8]
80021a28:	91 2c       	st.w	r8[0x8],r12
80021a2a:	72 39       	ld.w	r9,r9[0xc]
80021a2c:	91 39       	st.w	r8[0xc],r9
80021a2e:	f6 c8 ff e0 	sub	r8,r11,-32
80021a32:	f4 c9 ff e0 	sub	r9,r10,-32
80021a36:	72 0a       	ld.w	r10,r9[0x0]
80021a38:	91 0a       	st.w	r8[0x0],r10
80021a3a:	72 1a       	ld.w	r10,r9[0x4]
80021a3c:	91 1a       	st.w	r8[0x4],r10
80021a3e:	72 2a       	ld.w	r10,r9[0x8]
80021a40:	91 2a       	st.w	r8[0x8],r10
80021a42:	72 39       	ld.w	r9,r9[0xc]
80021a44:	91 39       	st.w	r8[0xc],r9
				
				mavlink_msg_mission_current_send(MAVLINK_COMM_0,centralData->current_wp_count);
80021a46:	ec f8 00 00 	ld.w	r8,r6[0]
80021a4a:	70 08       	ld.w	r8,r8[0x0]
80021a4c:	f1 38 0c 66 	ld.ub	r8,r8[3174]
80021a50:	5c 68       	casts.b	r8
80021a52:	5c 88       	casts.h	r8
80021a54:	5c 78       	castu.h	r8
80021a56:	10 9b       	mov	r11,r8
80021a58:	30 0c       	mov	r12,0
80021a5a:	fe b0 ed 5d 	rcall	8001f514 <mavlink_msg_mission_current_send>
80021a5e:	c1 28       	rjmp	80021a82 <waypoint_navigation_handler+0x3bc>
				
				}else{
				centralData->waypoint_set = false;
80021a60:	ec f8 00 00 	ld.w	r8,r6[0]
80021a64:	70 09       	ld.w	r9,r8[0x0]
80021a66:	30 08       	mov	r8,0
80021a68:	f3 68 0c fc 	st.b	r9[3324],r8
				dbg_print("Stop\n");
80021a6c:	fe cc 03 ac 	sub	r12,pc,940
80021a70:	f0 16 00 01 	mcall	r6[4]
				
				wp_hold_init();
80021a74:	f0 16 00 b9 	mcall	r6[740]
80021a78:	c0 58       	rjmp	80021a82 <waypoint_navigation_handler+0x3bc>
			}
		}
	}else{
		init_wp();
80021a7a:	f0 16 00 90 	mcall	r6[576]
		wp_hold_init();
80021a7e:	f0 16 00 b9 	mcall	r6[740]
	}
}
80021a82:	2f 0d       	sub	sp,-64
80021a84:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
80021a88:	80 02       	ld.sh	r2,r0[0x0]
80021a8a:	15 56       	ld.sh	r6,--r10
80021a8c:	43 72       	lddsp	r2,sp[0xdc]
80021a8e:	69 74       	ld.w	r4,r4[0x5c]
80021a90:	69 63       	ld.w	r3,r4[0x58]
80021a92:	61 6c       	ld.w	r12,r0[0x58]
80021a94:	20 53       	sub	r3,5
80021a96:	74 61       	ld.w	r1,r10[0x18]
80021a98:	74 65       	ld.w	r5,r10[0x18]
80021a9a:	21 20       	sub	r0,18
80021a9c:	43 6c       	lddsp	r12,sp[0xd8]
80021a9e:	69 6d       	ld.w	sp,r4[0x58]
80021aa0:	62 69       	ld.w	r9,r1[0x18]
80021aa2:	6e 67       	ld.w	r7,r7[0x18]
80021aa4:	20 74       	sub	r4,7
80021aa6:	6f 20       	ld.w	r0,r7[0x48]
80021aa8:	73 61       	ld.w	r1,r9[0x58]
80021aaa:	66 65       	ld.w	r5,r3[0x18]
80021aac:	20 61       	sub	r1,6
80021aae:	6c 74       	ld.w	r4,r6[0x1c]
80021ab0:	69 74       	ld.w	r4,r4[0x5c]
80021ab2:	75 64       	ld.w	r4,r10[0x58]
80021ab4:	65 2e       	ld.w	lr,r2[0x48]
80021ab6:	0a 00       	add	r0,r5
80021ab8:	43 72       	lddsp	r2,sp[0xdc]
80021aba:	69 74       	ld.w	r4,r4[0x5c]
80021abc:	69 63       	ld.w	r3,r4[0x58]
80021abe:	61 6c       	ld.w	r12,r0[0x58]
80021ac0:	20 53       	sub	r3,5
80021ac2:	74 61       	ld.w	r1,r10[0x18]
80021ac4:	74 65       	ld.w	r5,r10[0x18]
80021ac6:	21 20       	sub	r0,18
80021ac8:	46 6c       	lddsp	r12,sp[0x198]
80021aca:	79 69       	ld.w	r9,r12[0x58]
80021acc:	6e 67       	ld.w	r7,r7[0x18]
80021ace:	20 74       	sub	r4,7
80021ad0:	6f 20       	ld.w	r0,r7[0x48]
80021ad2:	68 6f       	ld.w	pc,r4[0x18]
80021ad4:	6d 65       	ld.w	r5,r6[0x58]
80021ad6:	20 77       	sub	r7,7
80021ad8:	61 79       	ld.w	r9,r0[0x5c]
80021ada:	70 6f       	ld.w	pc,r8[0x18]
80021adc:	69 6e       	ld.w	lr,r4[0x58]
80021ade:	74 2e       	ld.w	lr,r10[0x8]
80021ae0:	0a 00       	add	r0,r5
80021ae2:	00 00       	add	r0,r0
80021ae4:	43 72       	lddsp	r2,sp[0xdc]
80021ae6:	69 74       	ld.w	r4,r4[0x5c]
80021ae8:	69 63       	ld.w	r3,r4[0x58]
80021aea:	61 6c       	ld.w	r12,r0[0x58]
80021aec:	20 53       	sub	r3,5
80021aee:	74 61       	ld.w	r1,r10[0x18]
80021af0:	74 65       	ld.w	r5,r10[0x18]
80021af2:	21 20       	sub	r0,18
80021af4:	50 65       	stdsp	sp[0x18],r5
80021af6:	72 66       	ld.w	r6,r9[0x18]
80021af8:	6f 72       	ld.w	r2,r7[0x5c]
80021afa:	6d 69       	ld.w	r9,r6[0x58]
80021afc:	6e 67       	ld.w	r7,r7[0x18]
80021afe:	20 63       	sub	r3,6
80021b00:	72 69       	ld.w	r9,r9[0x18]
80021b02:	74 69       	ld.w	r9,r10[0x18]
80021b04:	63 61       	ld.w	r1,r1[0x58]
80021b06:	6c 20       	ld.w	r0,r6[0x8]
80021b08:	6c 61       	ld.w	r1,r6[0x18]
80021b0a:	6e 64       	ld.w	r4,r7[0x18]
80021b0c:	69 6e       	ld.w	lr,r4[0x58]
80021b0e:	67 2e       	ld.w	lr,r3[0x48]
80021b10:	0a 00       	add	r0,r5
80021b12:	00 00       	add	r0,r0
80021b14:	43 72       	lddsp	r2,sp[0xdc]
80021b16:	69 74       	ld.w	r4,r4[0x5c]
80021b18:	69 63       	ld.w	r3,r4[0x58]
80021b1a:	61 6c       	ld.w	r12,r0[0x58]
80021b1c:	20 53       	sub	r3,5
80021b1e:	74 61       	ld.w	r1,r10[0x18]
80021b20:	74 65       	ld.w	r5,r10[0x18]
80021b22:	21 20       	sub	r0,18
80021b24:	4c 61       	lddpc	r1,80021c3c <waypoint_critical_handler+0xe8>
80021b26:	6e 64       	ld.w	r4,r7[0x18]
80021b28:	65 64       	ld.w	r4,r2[0x58]
80021b2a:	2c 20       	sub	r0,-62
80021b2c:	73 77       	ld.w	r7,r9[0x5c]
80021b2e:	69 74       	ld.w	r4,r4[0x5c]
80021b30:	63 68       	ld.w	r8,r1[0x58]
80021b32:	69 6e       	ld.w	lr,r4[0x58]
80021b34:	67 20       	ld.w	r0,r3[0x48]
80021b36:	6f 66       	ld.w	r6,r7[0x58]
80021b38:	66 20       	ld.w	r0,r3[0x8]
80021b3a:	6d 6f       	ld.w	pc,r6[0x58]
80021b3c:	74 6f       	ld.w	pc,r10[0x18]
80021b3e:	72 73       	ld.w	r3,r9[0x1c]
80021b40:	2c 20       	sub	r0,-62
80021b42:	45 6d       	lddsp	sp,sp[0x158]
80021b44:	65 72       	ld.w	r2,r2[0x5c]
80021b46:	67 65       	ld.w	r5,r3[0x58]
80021b48:	6e 63       	ld.w	r3,r7[0x18]
80021b4a:	79 20       	ld.w	r0,r12[0x48]
80021b4c:	6d 6f       	ld.w	pc,r6[0x58]
80021b4e:	64 65       	ld.w	r5,r2[0x18]
80021b50:	2e 0a       	sub	r10,-32
	...

80021b54 <waypoint_critical_handler>:

void waypoint_critical_handler()
{
80021b54:	eb cd 40 e0 	pushm	r5-r7,lr
80021b58:	1a 97       	mov	r7,sp
80021b5a:	20 7d       	sub	sp,28
80021b5c:	fe f6 02 20 	ld.w	r6,pc[544]
80021b60:	1e 26       	rsub	r6,pc
	if (!(centralData->critical_init))
80021b62:	ec f8 00 00 	ld.w	r8,r6[0]
80021b66:	70 08       	ld.w	r8,r8[0x0]
80021b68:	f1 38 0d 01 	ld.ub	r8,r8[3329]
80021b6c:	ec 18 00 01 	eorl	r8,0x1
80021b70:	5c 58       	castu.b	r8
80021b72:	c1 10       	breq	80021b94 <waypoint_critical_handler+0x40>
	{
		centralData->critical_init = true;
80021b74:	ec f8 00 00 	ld.w	r8,r6[0]
80021b78:	70 09       	ld.w	r9,r8[0x0]
80021b7a:	30 18       	mov	r8,1
80021b7c:	f3 68 0d 01 	st.b	r9[3329],r8
		dbg_print("Critical State! Climbing to safe altitude.\n");
80021b80:	fe cc 00 f4 	sub	r12,pc,244
80021b84:	f0 16 00 01 	mcall	r6[4]
		centralData->critical_behavior = CLIMB_TO_SAFE_ALT;
80021b88:	ec f8 00 00 	ld.w	r8,r6[0]
80021b8c:	70 08       	ld.w	r8,r8[0x0]
80021b8e:	30 19       	mov	r9,1
80021b90:	f1 49 0f 2c 	st.w	r8[3884],r9
	}
	
	if (!(centralData->critical_next_state))
80021b94:	ec f8 00 00 	ld.w	r8,r6[0]
80021b98:	70 08       	ld.w	r8,r8[0x0]
80021b9a:	f1 38 0d 02 	ld.ub	r8,r8[3330]
80021b9e:	ec 18 00 01 	eorl	r8,0x1
80021ba2:	5c 58       	castu.b	r8
80021ba4:	e0 80 00 a7 	breq	80021cf2 <waypoint_critical_handler+0x19e>
	{
		centralData->critical_next_state = true;
80021ba8:	ec f8 00 00 	ld.w	r8,r6[0]
80021bac:	70 09       	ld.w	r9,r8[0x0]
80021bae:	30 18       	mov	r8,1
80021bb0:	f3 68 0d 02 	st.b	r9[3330],r8
		
		Aero_Attitude_t aero_attitude;
		aero_attitude=Quat_to_Aero(centralData->imu1.attitude.qe);
80021bb4:	ec f8 00 00 	ld.w	r8,r6[0]
80021bb8:	70 09       	ld.w	r9,r8[0x0]
80021bba:	ee ca 00 10 	sub	r10,r7,16
80021bbe:	20 4d       	sub	sp,16
80021bc0:	1a 98       	mov	r8,sp
80021bc2:	20 08       	sub	r8,0
80021bc4:	20 09       	sub	r9,0
80021bc6:	72 0b       	ld.w	r11,r9[0x0]
80021bc8:	91 0b       	st.w	r8[0x0],r11
80021bca:	72 1b       	ld.w	r11,r9[0x4]
80021bcc:	91 1b       	st.w	r8[0x4],r11
80021bce:	72 2b       	ld.w	r11,r9[0x8]
80021bd0:	91 2b       	st.w	r8[0x8],r11
80021bd2:	72 39       	ld.w	r9,r9[0xc]
80021bd4:	91 39       	st.w	r8[0xc],r9
80021bd6:	14 9c       	mov	r12,r10
80021bd8:	f0 16 00 70 	mcall	r6[448]
80021bdc:	2f cd       	sub	sp,-16
		centralData->waypoint_critical_coordinates.heading = aero_attitude.rpy[2];
80021bde:	ec f8 00 00 	ld.w	r8,r6[0]
80021be2:	70 08       	ld.w	r8,r8[0x0]
80021be4:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021be8:	f1 49 0c d4 	st.w	r8[3284],r9
		
		switch (centralData->critical_behavior)
80021bec:	ec f8 00 00 	ld.w	r8,r6[0]
80021bf0:	70 08       	ld.w	r8,r8[0x0]
80021bf2:	f0 f8 0f 2c 	ld.w	r8,r8[3884]
80021bf6:	58 28       	cp.w	r8,2
80021bf8:	c2 10       	breq	80021c3a <waypoint_critical_handler+0xe6>
80021bfa:	58 38       	cp.w	r8,3
80021bfc:	c3 30       	breq	80021c62 <waypoint_critical_handler+0x10e>
80021bfe:	58 18       	cp.w	r8,1
80021c00:	c4 31       	brne	80021c86 <waypoint_critical_handler+0x132>
		{
			case CLIMB_TO_SAFE_ALT:
			centralData->waypoint_critical_coordinates.pos[X] = centralData->position_estimator.localPosition.pos[X];
80021c02:	ec f8 00 00 	ld.w	r8,r6[0]
80021c06:	70 08       	ld.w	r8,r8[0x0]
80021c08:	ec f9 00 00 	ld.w	r9,r6[0]
80021c0c:	72 09       	ld.w	r9,r9[0x0]
80021c0e:	f2 f9 09 e4 	ld.w	r9,r9[2532]
80021c12:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = centralData->position_estimator.localPosition.pos[Y];
80021c16:	ec f8 00 00 	ld.w	r8,r6[0]
80021c1a:	70 08       	ld.w	r8,r8[0x0]
80021c1c:	ec f9 00 00 	ld.w	r9,r6[0]
80021c20:	72 09       	ld.w	r9,r9[0x0]
80021c22:	f2 f9 09 e8 	ld.w	r9,r9[2536]
80021c26:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021c2a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c2e:	70 08       	ld.w	r8,r8[0x0]
80021c30:	fc 19 c1 f0 	movh	r9,0xc1f0
80021c34:	f1 49 0c d0 	st.w	r8[3280],r9
			
			break;
80021c38:	c2 78       	rjmp	80021c86 <waypoint_critical_handler+0x132>
			case FLY_TO_HOME_WP:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021c3a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c3e:	70 08       	ld.w	r8,r8[0x0]
80021c40:	30 09       	mov	r9,0
80021c42:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021c46:	ec f8 00 00 	ld.w	r8,r6[0]
80021c4a:	70 08       	ld.w	r8,r8[0x0]
80021c4c:	30 09       	mov	r9,0
80021c4e:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = -30.0;
80021c52:	ec f8 00 00 	ld.w	r8,r6[0]
80021c56:	70 08       	ld.w	r8,r8[0x0]
80021c58:	fc 19 c1 f0 	movh	r9,0xc1f0
80021c5c:	f1 49 0c d0 	st.w	r8[3280],r9
			break;
80021c60:	c1 38       	rjmp	80021c86 <waypoint_critical_handler+0x132>
			case CRITICAL_LAND:
			centralData->waypoint_critical_coordinates.pos[X] = 0.0;
80021c62:	ec f8 00 00 	ld.w	r8,r6[0]
80021c66:	70 08       	ld.w	r8,r8[0x0]
80021c68:	30 09       	mov	r9,0
80021c6a:	f1 49 0c c8 	st.w	r8[3272],r9
			centralData->waypoint_critical_coordinates.pos[Y] = 0.0;
80021c6e:	ec f8 00 00 	ld.w	r8,r6[0]
80021c72:	70 08       	ld.w	r8,r8[0x0]
80021c74:	30 09       	mov	r9,0
80021c76:	f1 49 0c cc 	st.w	r8[3276],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
80021c7a:	ec f8 00 00 	ld.w	r8,r6[0]
80021c7e:	70 08       	ld.w	r8,r8[0x0]
80021c80:	30 09       	mov	r9,0
80021c82:	f1 49 0c d0 	st.w	r8[3280],r9
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021c86:	30 08       	mov	r8,0
80021c88:	ef 68 ff ff 	st.b	r7[-1],r8
80021c8c:	c2 18       	rjmp	80021cce <waypoint_critical_handler+0x17a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
80021c8e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021c92:	ec f9 00 00 	ld.w	r9,r6[0]
80021c96:	72 09       	ld.w	r9,r9[0x0]
80021c98:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80021c9c:	f4 ca fc ce 	sub	r10,r10,-818
80021ca0:	f2 0a 03 2a 	ld.w	r10,r9[r10<<0x2]
80021ca4:	ec f9 00 00 	ld.w	r9,r6[0]
80021ca8:	72 09       	ld.w	r9,r9[0x0]
80021caa:	ef 3b ff ff 	ld.ub	r11,r7[-1]
80021cae:	f6 cb fd 87 	sub	r11,r11,-633
80021cb2:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
80021cb6:	e5 a1 09 a9 	cop	cp0,cr9,cr10,cr9,0x42
80021cba:	a3 68       	lsl	r8,0x2
80021cbc:	ee 08 00 08 	add	r8,r7,r8
80021cc0:	f1 49 ff e4 	st.w	r8[-28],r9
			centralData->waypoint_critical_coordinates.pos[Z] = 0.0;
			break;
		}
		float rel_pos[3];
		uint8_t i;
		for (i=0;i<3;i++)
80021cc4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021cc8:	2f f8       	sub	r8,-1
80021cca:	ef 68 ff ff 	st.b	r7[-1],r8
80021cce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021cd2:	30 28       	mov	r8,2
80021cd4:	f0 09 18 00 	cp.b	r9,r8
80021cd8:	fe 98 ff db 	brls	80021c8e <waypoint_critical_handler+0x13a>
		{
			rel_pos[i] = centralData->waypoint_critical_coordinates.pos[i] - centralData->position_estimator.localPosition.pos[i];
		}
		centralData->dist2wp_sqr = vector_norm_sqr(rel_pos);
80021cdc:	ec f8 00 00 	ld.w	r8,r6[0]
80021ce0:	70 05       	ld.w	r5,r8[0x0]
80021ce2:	ee c8 00 1c 	sub	r8,r7,28
80021ce6:	10 9c       	mov	r12,r8
80021ce8:	fe b0 ee 04 	rcall	8001f8f0 <vector_norm_sqr>
80021cec:	18 98       	mov	r8,r12
80021cee:	eb 48 0c f8 	st.w	r5[3320],r8
	}
	
	if (centralData->dist2wp_sqr < 3.0)
80021cf2:	ec f8 00 00 	ld.w	r8,r6[0]
80021cf6:	70 08       	ld.w	r8,r8[0x0]
80021cf8:	f0 fa 0c f8 	ld.w	r10,r8[3320]
80021cfc:	30 18       	mov	r8,1
80021cfe:	fc 19 40 40 	movh	r9,0x4040
80021d02:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80021d06:	e0 8c 00 03 	brvs	80021d0c <waypoint_critical_handler+0x1b8>
80021d0a:	c0 25       	brlt	80021d0e <waypoint_critical_handler+0x1ba>
80021d0c:	30 08       	mov	r8,0
80021d0e:	5c 58       	castu.b	r8
80021d10:	c3 20       	breq	80021d74 <waypoint_critical_handler+0x220>
	{
		centralData->critical_next_state = false;
80021d12:	ec f8 00 00 	ld.w	r8,r6[0]
80021d16:	70 09       	ld.w	r9,r8[0x0]
80021d18:	30 08       	mov	r8,0
80021d1a:	f3 68 0d 02 	st.b	r9[3330],r8
		switch (centralData->critical_behavior)
80021d1e:	ec f8 00 00 	ld.w	r8,r6[0]
80021d22:	70 08       	ld.w	r8,r8[0x0]
80021d24:	f0 f8 0f 2c 	ld.w	r8,r8[3884]
80021d28:	58 28       	cp.w	r8,2
80021d2a:	c1 00       	breq	80021d4a <waypoint_critical_handler+0x1f6>
80021d2c:	58 38       	cp.w	r8,3
80021d2e:	c1 90       	breq	80021d60 <waypoint_critical_handler+0x20c>
80021d30:	58 18       	cp.w	r8,1
80021d32:	c2 11       	brne	80021d74 <waypoint_critical_handler+0x220>
		{
			case CLIMB_TO_SAFE_ALT:
			dbg_print("Critical State! Flying to home waypoint.\n");
80021d34:	fe cc 02 7c 	sub	r12,pc,636
80021d38:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = FLY_TO_HOME_WP;
80021d3c:	ec f8 00 00 	ld.w	r8,r6[0]
80021d40:	70 08       	ld.w	r8,r8[0x0]
80021d42:	30 29       	mov	r9,2
80021d44:	f1 49 0f 2c 	st.w	r8[3884],r9
			break;
80021d48:	c1 68       	rjmp	80021d74 <waypoint_critical_handler+0x220>
			case FLY_TO_HOME_WP:
			dbg_print("Critical State! Performing critical landing.\n");
80021d4a:	fe cc 02 66 	sub	r12,pc,614
80021d4e:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_behavior = CRITICAL_LAND;
80021d52:	ec f8 00 00 	ld.w	r8,r6[0]
80021d56:	70 08       	ld.w	r8,r8[0x0]
80021d58:	30 39       	mov	r9,3
80021d5a:	f1 49 0f 2c 	st.w	r8[3884],r9
			break;
80021d5e:	c0 b8       	rjmp	80021d74 <waypoint_critical_handler+0x220>
			case CRITICAL_LAND:
			dbg_print("Critical State! Landed, switching off motors, Emergency mode.\n");
80021d60:	fe cc 02 4c 	sub	r12,pc,588
80021d64:	f0 16 00 01 	mcall	r6[4]
			centralData->critical_landing = true;
80021d68:	ec f8 00 00 	ld.w	r8,r6[0]
80021d6c:	70 09       	ld.w	r9,r8[0x0]
80021d6e:	30 18       	mov	r8,1
80021d70:	f3 68 0d 00 	st.b	r9[3328],r8
			break;
		}
	}
80021d74:	2f 9d       	sub	sp,-28
80021d76:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80021d7a:	00 00       	add	r0,r0
80021d7c:	80 02       	ld.sh	r2,r0[0x0]
80021d7e:	19 e4       	ld.ub	r4,r12[0x6]

80021d80 <buffer_full>:


#include "buffer.h"


int8_t buffer_full(Buffer_t * buffer) {
80021d80:	eb cd 40 80 	pushm	r7,lr
80021d84:	1a 97       	mov	r7,sp
80021d86:	20 1d       	sub	sp,4
80021d88:	ef 4c ff fc 	st.w	r7[-4],r12
	return (((buffer->BufferHead+1)&BUFFER_MASK) == buffer->BufferTail);
80021d8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021d90:	f1 38 01 00 	ld.ub	r8,r8[256]
80021d94:	2f f8       	sub	r8,-1
80021d96:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80021d9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021d9e:	f1 38 01 01 	ld.ub	r8,r8[257]
80021da2:	10 39       	cp.w	r9,r8
80021da4:	5f 08       	sreq	r8
}
80021da6:	10 9c       	mov	r12,r8
80021da8:	2f fd       	sub	sp,-4
80021daa:	e3 cd 80 80 	ldm	sp++,r7,pc

80021dae <buffer_put_lossy>:

void buffer_put_lossy(Buffer_t * buffer, uint8_t byte) {
80021dae:	eb cd 40 c0 	pushm	r6-r7,lr
80021db2:	1a 97       	mov	r7,sp
80021db4:	20 3d       	sub	sp,12
80021db6:	4a 46       	lddpc	r6,80021e44 <buffer_put_lossy+0x96>
80021db8:	1e 26       	rsub	r6,pc
80021dba:	ef 4c ff f8 	st.w	r7[-8],r12
80021dbe:	16 98       	mov	r8,r11
80021dc0:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
80021dc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021dc8:	f1 38 01 00 	ld.ub	r8,r8[256]
80021dcc:	2f f8       	sub	r8,-1
80021dce:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80021dd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021dd6:	f1 38 01 01 	ld.ub	r8,r8[257]
80021dda:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021dde:	f0 09 18 00 	cp.b	r9,r8
80021de2:	c0 b1       	brne	80021df8 <buffer_put_lossy+0x4a>
		//error: receive buffer overflow!!
		// lose old incoming data at the end of the buffer
		buffer->BufferTail=(buffer->BufferTail+1)&BUFFER_MASK;
80021de4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021de8:	f1 38 01 01 	ld.ub	r8,r8[257]
80021dec:	2f f8       	sub	r8,-1
80021dee:	5c 58       	castu.b	r8
80021df0:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021df4:	f3 68 01 01 	st.b	r9[257],r8
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80021df8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021dfc:	f1 38 01 00 	ld.ub	r8,r8[256]
80021e00:	10 99       	mov	r9,r8
80021e02:	ee fa ff f8 	ld.w	r10,r7[-8]
80021e06:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80021e0a:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
80021e0e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e12:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021e16:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80021e1a:	ee fc ff f8 	ld.w	r12,r7[-8]
80021e1e:	f0 16 01 02 	mcall	r6[1032]
80021e22:	18 98       	mov	r8,r12
80021e24:	5c 58       	castu.b	r8
80021e26:	c0 70       	breq	80021e34 <buffer_put_lossy+0x86>
80021e28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e2c:	30 18       	mov	r8,1
80021e2e:	f3 68 01 02 	st.b	r9[258],r8
80021e32:	c0 68       	rjmp	80021e3e <buffer_put_lossy+0x90>
80021e34:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021e38:	30 08       	mov	r8,0
80021e3a:	f3 68 01 02 	st.b	r9[258],r8
}
80021e3e:	2f dd       	sub	sp,-12
80021e40:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021e44:	80 02       	ld.sh	r2,r0[0x0]
80021e46:	1c 3c       	cp.w	r12,lr

80021e48 <buffer_put>:

int8_t buffer_put(Buffer_t * buffer, uint8_t byte) {
80021e48:	eb cd 40 c0 	pushm	r6-r7,lr
80021e4c:	1a 97       	mov	r7,sp
80021e4e:	20 3d       	sub	sp,12
80021e50:	4a 16       	lddpc	r6,80021ed4 <buffer_put+0x8c>
80021e52:	1e 26       	rsub	r6,pc
80021e54:	ef 4c ff f8 	st.w	r7[-8],r12
80021e58:	16 98       	mov	r8,r11
80021e5a:	ef 68 ff f4 	st.b	r7[-12],r8
	uint8_t tmp;
	tmp=(buffer->BufferHead+1)&BUFFER_MASK;
80021e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e62:	f1 38 01 00 	ld.ub	r8,r8[256]
80021e66:	2f f8       	sub	r8,-1
80021e68:	ef 68 ff ff 	st.b	r7[-1],r8

	if (tmp==buffer->BufferTail) {
80021e6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e70:	f1 38 01 01 	ld.ub	r8,r8[257]
80021e74:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80021e78:	f0 09 18 00 	cp.b	r9,r8
80021e7c:	c0 51       	brne	80021e86 <buffer_put+0x3e>
		//error: buffer full! return -1
		return -1;
80021e7e:	e0 68 00 ff 	mov	r8,255
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
	buffer->BufferHead=tmp;
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
}
80021e82:	10 9c       	mov	r12,r8
80021e84:	c2 48       	rjmp	80021ecc <buffer_put+0x84>
	if (tmp==buffer->BufferTail) {
		//error: buffer full! return -1
		return -1;
	}
	// store incoming data in buffer
	buffer->Buffer[buffer->BufferHead] = byte;
80021e86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021e8a:	f1 38 01 00 	ld.ub	r8,r8[256]
80021e8e:	10 99       	mov	r9,r8
80021e90:	ee fa ff f8 	ld.w	r10,r7[-8]
80021e94:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80021e98:	f4 09 0b 08 	st.b	r10[r9],r8
	buffer->BufferHead=tmp;
80021e9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ea0:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80021ea4:	f3 68 01 00 	st.b	r9[256],r8
	if (buffer_full(buffer)) buffer->full =1; else buffer->full=0;
80021ea8:	ee fc ff f8 	ld.w	r12,r7[-8]
80021eac:	f0 16 01 02 	mcall	r6[1032]
80021eb0:	18 98       	mov	r8,r12
80021eb2:	5c 58       	castu.b	r8
80021eb4:	c0 70       	breq	80021ec2 <buffer_put+0x7a>
80021eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021eba:	30 18       	mov	r8,1
80021ebc:	f3 68 01 02 	st.b	r9[258],r8
80021ec0:	c0 68       	rjmp	80021ecc <buffer_put+0x84>
80021ec2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021ec6:	30 08       	mov	r8,0
80021ec8:	f3 68 01 02 	st.b	r9[258],r8
}
80021ecc:	2f dd       	sub	sp,-12
80021ece:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80021ed2:	00 00       	add	r0,r0
80021ed4:	80 02       	ld.sh	r2,r0[0x0]
80021ed6:	1c d6       	st.w	--lr,r6

80021ed8 <buffer_get>:


uint8_t buffer_get(Buffer_t * buffer) {
80021ed8:	eb cd 40 80 	pushm	r7,lr
80021edc:	1a 97       	mov	r7,sp
80021ede:	20 2d       	sub	sp,8
80021ee0:	ef 4c ff f8 	st.w	r7[-8],r12
	uint8_t ret=0;
80021ee4:	30 08       	mov	r8,0
80021ee6:	ef 68 ff ff 	st.b	r7[-1],r8
	if (buffer->BufferHead!=buffer->BufferTail){
80021eea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021eee:	f1 39 01 00 	ld.ub	r9,r8[256]
80021ef2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021ef6:	f1 38 01 01 	ld.ub	r8,r8[257]
80021efa:	f0 09 18 00 	cp.b	r9,r8
80021efe:	c1 a0       	breq	80021f32 <buffer_get+0x5a>
		ret=buffer->Buffer[buffer->BufferTail];
80021f00:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f04:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f08:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f0c:	f2 08 07 08 	ld.ub	r8,r9[r8]
80021f10:	ef 68 ff ff 	st.b	r7[-1],r8
		buffer->BufferTail=  (buffer->BufferTail+1)&BUFFER_MASK;
80021f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80021f18:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f1c:	2f f8       	sub	r8,-1
80021f1e:	5c 58       	castu.b	r8
80021f20:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f24:	f3 68 01 01 	st.b	r9[257],r8
		buffer->full=0;
80021f28:	ee f9 ff f8 	ld.w	r9,r7[-8]
80021f2c:	30 08       	mov	r8,0
80021f2e:	f3 68 01 02 	st.b	r9[258],r8
	}
	return ret;
80021f32:	ef 38 ff ff 	ld.ub	r8,r7[-1]
}
80021f36:	10 9c       	mov	r12,r8
80021f38:	2f ed       	sub	sp,-8
80021f3a:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f3e <buffer_empty>:


int8_t buffer_empty(Buffer_t * buffer) {
80021f3e:	eb cd 40 80 	pushm	r7,lr
80021f42:	1a 97       	mov	r7,sp
80021f44:	20 1d       	sub	sp,4
80021f46:	ef 4c ff fc 	st.w	r7[-4],r12
	return (buffer->BufferHead==buffer->BufferTail);
80021f4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f4e:	f1 39 01 00 	ld.ub	r9,r8[256]
80021f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f56:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f5a:	f0 09 18 00 	cp.b	r9,r8
80021f5e:	5f 08       	sreq	r8
}
80021f60:	10 9c       	mov	r12,r8
80021f62:	2f fd       	sub	sp,-4
80021f64:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f68 <buffer_bytes_available>:

int buffer_bytes_available(Buffer_t * buffer) {
80021f68:	eb cd 40 80 	pushm	r7,lr
80021f6c:	1a 97       	mov	r7,sp
80021f6e:	20 1d       	sub	sp,4
80021f70:	ef 4c ff fc 	st.w	r7[-4],r12
	return (BUFFER_SIZE+buffer->BufferHead - buffer->BufferTail)&BUFFER_MASK;
80021f74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f78:	f1 38 01 00 	ld.ub	r8,r8[256]
80021f7c:	f0 c9 ff 00 	sub	r9,r8,-256
80021f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80021f84:	f1 38 01 01 	ld.ub	r8,r8[257]
80021f88:	f2 08 01 08 	sub	r8,r9,r8
80021f8c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
}
80021f90:	10 9c       	mov	r12,r8
80021f92:	2f fd       	sub	sp,-4
80021f94:	e3 cd 80 80 	ldm	sp++,r7,pc

80021f98 <buffer_init>:

void buffer_init(Buffer_t * buffer) {
80021f98:	eb cd 40 80 	pushm	r7,lr
80021f9c:	1a 97       	mov	r7,sp
80021f9e:	20 1d       	sub	sp,4
80021fa0:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80021fa4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fa8:	30 08       	mov	r8,0
80021faa:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
80021fae:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fb2:	30 08       	mov	r8,0
80021fb4:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80021fb8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fbc:	30 08       	mov	r8,0
80021fbe:	f3 68 01 02 	st.b	r9[258],r8
}
80021fc2:	2f fd       	sub	sp,-4
80021fc4:	e3 cd 80 80 	ldm	sp++,r7,pc

80021fc8 <buffer_clear>:

void buffer_clear(Buffer_t * buffer) {
80021fc8:	eb cd 40 80 	pushm	r7,lr
80021fcc:	1a 97       	mov	r7,sp
80021fce:	20 1d       	sub	sp,4
80021fd0:	ef 4c ff fc 	st.w	r7[-4],r12
	buffer->BufferHead=0;
80021fd4:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fd8:	30 08       	mov	r8,0
80021fda:	f3 68 01 00 	st.b	r9[256],r8
	buffer->BufferTail=0;
80021fde:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fe2:	30 08       	mov	r8,0
80021fe4:	f3 68 01 01 	st.b	r9[257],r8
	buffer->full=0;
80021fe8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80021fec:	30 08       	mov	r8,0
80021fee:	f3 68 01 02 	st.b	r9[258],r8
}
80021ff2:	2f fd       	sub	sp,-4
80021ff4:	e3 cd 80 80 	ldm	sp++,r7,pc

80021ff8 <make_buffered_stream>:

void make_buffered_stream(Buffer_t *buffer, byte_stream_t *stream) {
80021ff8:	eb cd 40 c0 	pushm	r6-r7,lr
80021ffc:	1a 97       	mov	r7,sp
80021ffe:	20 2d       	sub	sp,8
80022000:	49 16       	lddpc	r6,80022044 <make_buffered_stream+0x4c>
80022002:	1e 26       	rsub	r6,pc
80022004:	ef 4c ff fc 	st.w	r7[-4],r12
80022008:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002200c:	ec f9 01 14 	ld.w	r9,r6[276]
80022010:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022014:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put;
80022016:	ec f9 01 54 	ld.w	r9,r6[340]
8002201a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002201e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022020:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022024:	30 09       	mov	r9,0
80022026:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022028:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002202c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022030:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022032:	ec f9 00 b8 	ld.w	r9,r6[184]
80022036:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002203a:	91 49       	st.w	r8[0x10],r9
}
8002203c:	2f ed       	sub	sp,-8
8002203e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022042:	00 00       	add	r0,r0
80022044:	80 02       	ld.sh	r2,r0[0x0]
80022046:	1e 86       	andn	r6,pc

80022048 <make_buffered_stream_lossy>:

void make_buffered_stream_lossy(Buffer_t *buffer, byte_stream_t *stream) {
80022048:	eb cd 40 c0 	pushm	r6-r7,lr
8002204c:	1a 97       	mov	r7,sp
8002204e:	20 2d       	sub	sp,8
80022050:	49 16       	lddpc	r6,80022094 <make_buffered_stream_lossy+0x4c>
80022052:	1e 26       	rsub	r6,pc
80022054:	ef 4c ff fc 	st.w	r7[-4],r12
80022058:	ef 4b ff f8 	st.w	r7[-8],r11
	stream->get=&buffer_get;
8002205c:	ec f9 01 14 	ld.w	r9,r6[276]
80022060:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022064:	91 09       	st.w	r8[0x0],r9
	stream->put=&buffer_put_lossy;
80022066:	ec f9 05 28 	ld.w	r9,r6[1320]
8002206a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002206e:	91 19       	st.w	r8[0x4],r9
	stream->flush=NULL;
80022070:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022074:	30 09       	mov	r9,0
80022076:	91 29       	st.w	r8[0x8],r9
	stream->data=buffer;
80022078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002207c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022080:	91 59       	st.w	r8[0x14],r9
	stream->bytes_available=&buffer_bytes_available;
80022082:	ec f9 00 b8 	ld.w	r9,r6[184]
80022086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002208a:	91 49       	st.w	r8[0x10],r9
}
8002208c:	2f ed       	sub	sp,-8
8002208e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022092:	00 00       	add	r0,r0
80022094:	80 02       	ld.sh	r2,r0[0x0]
80022096:	1e d6       	st.w	--pc,r6

80022098 <local_to_global_position>:
#include <math.h>
#include "print_util.h"
#include "conf_platform.h"

// convert local NED coordinates to global GPS coordinates (relative to origin given in local coordinate frame)
global_position_t local_to_global_position(local_coordinates_t input){
80022098:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
8002209c:	1a 97       	mov	r7,sp
8002209e:	20 8d       	sub	sp,32
800220a0:	4d 96       	lddpc	r6,80022204 <local_to_global_position+0x16c>
800220a2:	1e 26       	rsub	r6,pc
800220a4:	ee c5 ff e0 	sub	r5,r7,-32
800220a8:	ef 4c ff e0 	st.w	r7[-32],r12
	global_position_t output;
	//output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] *2.0 / (PI * EARTH_RADIUS));
	//output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] *2.0 / (PI * EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
	output.latitude = input.origin.latitude  + rad_to_deg( input.pos[0] / EARTH_RADIUS);
800220ac:	ea e2 00 18 	ld.d	r2,r5[24]
800220b0:	6a 08       	ld.w	r8,r5[0x0]
800220b2:	10 9c       	mov	r12,r8
800220b4:	f0 16 00 02 	mcall	r6[8]
800220b8:	fc 18 40 00 	movh	r8,0x4000
800220bc:	e0 69 54 a6 	mov	r9,21670
800220c0:	ea 19 41 58 	orh	r9,0x4158
800220c4:	f0 16 00 0c 	mcall	r6[48]
800220c8:	14 98       	mov	r8,r10
800220ca:	16 99       	mov	r9,r11
800220cc:	10 9a       	mov	r10,r8
800220ce:	12 9b       	mov	r11,r9
800220d0:	30 08       	mov	r8,0
800220d2:	e0 69 80 00 	mov	r9,32768
800220d6:	ea 19 40 66 	orh	r9,0x4066
800220da:	f0 16 00 03 	mcall	r6[12]
800220de:	14 98       	mov	r8,r10
800220e0:	16 99       	mov	r9,r11
800220e2:	10 9a       	mov	r10,r8
800220e4:	12 9b       	mov	r11,r9
800220e6:	e0 68 2d 18 	mov	r8,11544
800220ea:	ea 18 54 44 	orh	r8,0x5444
800220ee:	e0 69 21 fb 	mov	r9,8699
800220f2:	ea 19 40 09 	orh	r9,0x4009
800220f6:	f0 16 00 0c 	mcall	r6[48]
800220fa:	14 98       	mov	r8,r10
800220fc:	16 99       	mov	r9,r11
800220fe:	04 9a       	mov	r10,r2
80022100:	06 9b       	mov	r11,r3
80022102:	f0 16 00 05 	mcall	r6[20]
80022106:	14 98       	mov	r8,r10
80022108:	16 99       	mov	r9,r11
8002210a:	ee e9 ff ec 	st.d	r7[-20],r8
	output.longitude= input.origin.longitude + rad_to_deg( input.pos[1] / ( EARTH_RADIUS*cos(deg_to_rad(output.latitude))));
8002210e:	ea e2 00 10 	ld.d	r2,r5[16]
80022112:	6a 18       	ld.w	r8,r5[0x4]
80022114:	10 9c       	mov	r12,r8
80022116:	f0 16 00 02 	mcall	r6[8]
8002211a:	14 90       	mov	r0,r10
8002211c:	16 91       	mov	r1,r11
8002211e:	ee ea ff ec 	ld.d	r10,r7[-20]
80022122:	e0 68 2d 18 	mov	r8,11544
80022126:	ea 18 54 44 	orh	r8,0x5444
8002212a:	e0 69 21 fb 	mov	r9,8699
8002212e:	ea 19 40 09 	orh	r9,0x4009
80022132:	f0 16 00 03 	mcall	r6[12]
80022136:	14 98       	mov	r8,r10
80022138:	16 99       	mov	r9,r11
8002213a:	10 9a       	mov	r10,r8
8002213c:	12 9b       	mov	r11,r9
8002213e:	30 08       	mov	r8,0
80022140:	e0 69 80 00 	mov	r9,32768
80022144:	ea 19 40 66 	orh	r9,0x4066
80022148:	f0 16 00 0c 	mcall	r6[48]
8002214c:	14 98       	mov	r8,r10
8002214e:	16 99       	mov	r9,r11
80022150:	10 9a       	mov	r10,r8
80022152:	12 9b       	mov	r11,r9
80022154:	f0 16 00 c1 	mcall	r6[772]
80022158:	fc 18 40 00 	movh	r8,0x4000
8002215c:	e0 69 54 a6 	mov	r9,21670
80022160:	ea 19 41 58 	orh	r9,0x4158
80022164:	f0 16 00 03 	mcall	r6[12]
80022168:	14 98       	mov	r8,r10
8002216a:	16 99       	mov	r9,r11
8002216c:	00 9a       	mov	r10,r0
8002216e:	02 9b       	mov	r11,r1
80022170:	f0 16 00 0c 	mcall	r6[48]
80022174:	14 98       	mov	r8,r10
80022176:	16 99       	mov	r9,r11
80022178:	10 9a       	mov	r10,r8
8002217a:	12 9b       	mov	r11,r9
8002217c:	30 08       	mov	r8,0
8002217e:	e0 69 80 00 	mov	r9,32768
80022182:	ea 19 40 66 	orh	r9,0x4066
80022186:	f0 16 00 03 	mcall	r6[12]
8002218a:	14 98       	mov	r8,r10
8002218c:	16 99       	mov	r9,r11
8002218e:	10 9a       	mov	r10,r8
80022190:	12 9b       	mov	r11,r9
80022192:	e0 68 2d 18 	mov	r8,11544
80022196:	ea 18 54 44 	orh	r8,0x5444
8002219a:	e0 69 21 fb 	mov	r9,8699
8002219e:	ea 19 40 09 	orh	r9,0x4009
800221a2:	f0 16 00 0c 	mcall	r6[48]
800221a6:	14 98       	mov	r8,r10
800221a8:	16 99       	mov	r9,r11
800221aa:	04 9a       	mov	r10,r2
800221ac:	06 9b       	mov	r11,r3
800221ae:	f0 16 00 05 	mcall	r6[20]
800221b2:	14 98       	mov	r8,r10
800221b4:	16 99       	mov	r9,r11
800221b6:	ee e9 ff e4 	st.d	r7[-28],r8
	output.altitude = -input.pos[2] + input.origin.altitude;
800221ba:	6a 89       	ld.w	r9,r5[0x20]
800221bc:	6a 28       	ld.w	r8,r5[0x8]
800221be:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800221c2:	ef 48 ff f4 	st.w	r7[-12],r8
	output.heading=input.heading;
800221c6:	6a 38       	ld.w	r8,r5[0xc]
800221c8:	ef 48 ff f8 	st.w	r7[-8],r8

	return output;
800221cc:	ee fa ff e0 	ld.w	r10,r7[-32]
800221d0:	ee cb 00 1c 	sub	r11,r7,28
800221d4:	f4 c8 00 00 	sub	r8,r10,0
800221d8:	f6 c9 00 00 	sub	r9,r11,0
800221dc:	72 0c       	ld.w	r12,r9[0x0]
800221de:	91 0c       	st.w	r8[0x0],r12
800221e0:	72 1c       	ld.w	r12,r9[0x4]
800221e2:	91 1c       	st.w	r8[0x4],r12
800221e4:	72 2c       	ld.w	r12,r9[0x8]
800221e6:	91 2c       	st.w	r8[0x8],r12
800221e8:	72 39       	ld.w	r9,r9[0xc]
800221ea:	91 39       	st.w	r8[0xc],r9
800221ec:	f6 e8 00 10 	ld.d	r8,r11[16]
800221f0:	f4 e9 00 10 	st.d	r10[16],r8
800221f4:	76 68       	ld.w	r8,r11[0x18]
800221f6:	95 68       	st.w	r10[0x18],r8
}
800221f8:	ee fc ff e0 	ld.w	r12,r7[-32]
800221fc:	2f 8d       	sub	sp,-32
800221fe:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80022202:	00 00       	add	r0,r0
80022204:	80 02       	ld.sh	r2,r0[0x0]
80022206:	1f 26       	ld.uh	r6,pc++

80022208 <global_to_local_position>:

// convert a global position into a local coordinate frame around the given global origin
local_coordinates_t global_to_local_position(global_position_t position, global_position_t origin) {
80022208:	eb cd 40 e8 	pushm	r3,r5-r7,lr
8002220c:	1a 97       	mov	r7,sp
8002220e:	20 ed       	sub	sp,56
80022210:	4f 16       	lddpc	r6,800223d4 <global_to_local_position+0x1cc>
80022212:	1e 26       	rsub	r6,pc
80022214:	ee c5 ff ec 	sub	r5,r7,-20
80022218:	18 93       	mov	r3,r12
	local_coordinates_t output;
	output.origin=origin;
8002221a:	ee ca 00 28 	sub	r10,r7,40
8002221e:	ea cb ff e4 	sub	r11,r5,-28
80022222:	f4 c8 00 00 	sub	r8,r10,0
80022226:	f6 c9 00 00 	sub	r9,r11,0
8002222a:	72 0c       	ld.w	r12,r9[0x0]
8002222c:	91 0c       	st.w	r8[0x0],r12
8002222e:	72 1c       	ld.w	r12,r9[0x4]
80022230:	91 1c       	st.w	r8[0x4],r12
80022232:	72 2c       	ld.w	r12,r9[0x8]
80022234:	91 2c       	st.w	r8[0x8],r12
80022236:	72 39       	ld.w	r9,r9[0xc]
80022238:	91 39       	st.w	r8[0xc],r9
8002223a:	f6 e8 00 10 	ld.d	r8,r11[16]
8002223e:	f4 e9 00 10 	st.d	r10[16],r8
80022242:	76 68       	ld.w	r8,r11[0x18]
80022244:	95 68       	st.w	r10[0x18],r8
	double small_radius=cos(deg_to_rad(position.latitude))*EARTH_RADIUS;
80022246:	ea ea 00 08 	ld.d	r10,r5[8]
8002224a:	e0 68 2d 18 	mov	r8,11544
8002224e:	ea 18 54 44 	orh	r8,0x5444
80022252:	e0 69 21 fb 	mov	r9,8699
80022256:	ea 19 40 09 	orh	r9,0x4009
8002225a:	f0 16 00 03 	mcall	r6[12]
8002225e:	14 98       	mov	r8,r10
80022260:	16 99       	mov	r9,r11
80022262:	10 9a       	mov	r10,r8
80022264:	12 9b       	mov	r11,r9
80022266:	30 08       	mov	r8,0
80022268:	e0 69 80 00 	mov	r9,32768
8002226c:	ea 19 40 66 	orh	r9,0x4066
80022270:	f0 16 00 0c 	mcall	r6[48]
80022274:	14 98       	mov	r8,r10
80022276:	16 99       	mov	r9,r11
80022278:	10 9a       	mov	r10,r8
8002227a:	12 9b       	mov	r11,r9
8002227c:	f0 16 00 c1 	mcall	r6[772]
80022280:	fc 18 40 00 	movh	r8,0x4000
80022284:	e0 69 54 a6 	mov	r9,21670
80022288:	ea 19 41 58 	orh	r9,0x4158
8002228c:	f0 16 00 03 	mcall	r6[12]
80022290:	14 98       	mov	r8,r10
80022292:	16 99       	mov	r9,r11
80022294:	ee e9 ff f8 	st.d	r7[-8],r8
	output.pos[X]=  (float)(sin(deg_to_rad((position.latitude-origin.latitude)))*EARTH_RADIUS);
80022298:	ea ea 00 08 	ld.d	r10,r5[8]
8002229c:	ea e8 00 24 	ld.d	r8,r5[36]
800222a0:	f0 16 00 11 	mcall	r6[68]
800222a4:	14 98       	mov	r8,r10
800222a6:	16 99       	mov	r9,r11
800222a8:	10 9a       	mov	r10,r8
800222aa:	12 9b       	mov	r11,r9
800222ac:	e0 68 2d 18 	mov	r8,11544
800222b0:	ea 18 54 44 	orh	r8,0x5444
800222b4:	e0 69 21 fb 	mov	r9,8699
800222b8:	ea 19 40 09 	orh	r9,0x4009
800222bc:	f0 16 00 03 	mcall	r6[12]
800222c0:	14 98       	mov	r8,r10
800222c2:	16 99       	mov	r9,r11
800222c4:	10 9a       	mov	r10,r8
800222c6:	12 9b       	mov	r11,r9
800222c8:	30 08       	mov	r8,0
800222ca:	e0 69 80 00 	mov	r9,32768
800222ce:	ea 19 40 66 	orh	r9,0x4066
800222d2:	f0 16 00 0c 	mcall	r6[48]
800222d6:	14 98       	mov	r8,r10
800222d8:	16 99       	mov	r9,r11
800222da:	10 9a       	mov	r10,r8
800222dc:	12 9b       	mov	r11,r9
800222de:	f0 16 00 bf 	mcall	r6[764]
800222e2:	fc 18 40 00 	movh	r8,0x4000
800222e6:	e0 69 54 a6 	mov	r9,21670
800222ea:	ea 19 41 58 	orh	r9,0x4158
800222ee:	f0 16 00 03 	mcall	r6[12]
800222f2:	14 98       	mov	r8,r10
800222f4:	16 99       	mov	r9,r11
800222f6:	10 9a       	mov	r10,r8
800222f8:	12 9b       	mov	r11,r9
800222fa:	f0 16 00 08 	mcall	r6[32]
800222fe:	18 98       	mov	r8,r12
80022300:	ef 48 ff c8 	st.w	r7[-56],r8
	output.pos[Y]=  (float)(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius);
80022304:	ea ea 00 00 	ld.d	r10,r5[0]
80022308:	ea e8 00 1c 	ld.d	r8,r5[28]
8002230c:	f0 16 00 11 	mcall	r6[68]
80022310:	14 98       	mov	r8,r10
80022312:	16 99       	mov	r9,r11
80022314:	10 9a       	mov	r10,r8
80022316:	12 9b       	mov	r11,r9
80022318:	e0 68 2d 18 	mov	r8,11544
8002231c:	ea 18 54 44 	orh	r8,0x5444
80022320:	e0 69 21 fb 	mov	r9,8699
80022324:	ea 19 40 09 	orh	r9,0x4009
80022328:	f0 16 00 03 	mcall	r6[12]
8002232c:	14 98       	mov	r8,r10
8002232e:	16 99       	mov	r9,r11
80022330:	10 9a       	mov	r10,r8
80022332:	12 9b       	mov	r11,r9
80022334:	30 08       	mov	r8,0
80022336:	e0 69 80 00 	mov	r9,32768
8002233a:	ea 19 40 66 	orh	r9,0x4066
8002233e:	f0 16 00 0c 	mcall	r6[48]
80022342:	14 98       	mov	r8,r10
80022344:	16 99       	mov	r9,r11
80022346:	10 9a       	mov	r10,r8
80022348:	12 9b       	mov	r11,r9
8002234a:	f0 16 00 bf 	mcall	r6[764]
8002234e:	ee e8 ff f8 	ld.d	r8,r7[-8]
80022352:	f0 16 00 03 	mcall	r6[12]
80022356:	14 98       	mov	r8,r10
80022358:	16 99       	mov	r9,r11
8002235a:	10 9a       	mov	r10,r8
8002235c:	12 9b       	mov	r11,r9
8002235e:	f0 16 00 08 	mcall	r6[32]
80022362:	18 98       	mov	r8,r12
80022364:	ef 48 ff cc 	st.w	r7[-52],r8
	output.pos[Z]=  (float)(-(position.altitude - origin.altitude));
80022368:	6a 49       	ld.w	r9,r5[0x10]
8002236a:	6a b8       	ld.w	r8,r5[0x2c]
8002236c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022370:	ee 18 80 00 	eorh	r8,0x8000
80022374:	ef 48 ff d0 	st.w	r7[-48],r8
	output.heading=position.heading;
80022378:	6a 58       	ld.w	r8,r5[0x14]
8002237a:	ef 48 ff d4 	st.w	r7[-44],r8
	//dbg_print_num(deg_to_rad((position.longitude-origin.longitude))*10000000,10);
	//dbg_print(", sin_long:");
	//dbg_print_num(sin(deg_to_rad((position.longitude-origin.longitude)))*small_radius*10000000,10);
	//dbg_print("\n");
	
	return output;
8002237e:	06 9b       	mov	r11,r3
80022380:	ee ca 00 38 	sub	r10,r7,56
80022384:	f6 c8 00 00 	sub	r8,r11,0
80022388:	f4 c9 00 00 	sub	r9,r10,0
8002238c:	72 0c       	ld.w	r12,r9[0x0]
8002238e:	91 0c       	st.w	r8[0x0],r12
80022390:	72 1c       	ld.w	r12,r9[0x4]
80022392:	91 1c       	st.w	r8[0x4],r12
80022394:	72 2c       	ld.w	r12,r9[0x8]
80022396:	91 2c       	st.w	r8[0x8],r12
80022398:	72 39       	ld.w	r9,r9[0xc]
8002239a:	91 39       	st.w	r8[0xc],r9
8002239c:	f6 c8 ff f0 	sub	r8,r11,-16
800223a0:	f4 c9 ff f0 	sub	r9,r10,-16
800223a4:	72 0c       	ld.w	r12,r9[0x0]
800223a6:	91 0c       	st.w	r8[0x0],r12
800223a8:	72 1c       	ld.w	r12,r9[0x4]
800223aa:	91 1c       	st.w	r8[0x4],r12
800223ac:	72 2c       	ld.w	r12,r9[0x8]
800223ae:	91 2c       	st.w	r8[0x8],r12
800223b0:	72 39       	ld.w	r9,r9[0xc]
800223b2:	91 39       	st.w	r8[0xc],r9
800223b4:	f6 c8 ff e0 	sub	r8,r11,-32
800223b8:	f4 c9 ff e0 	sub	r9,r10,-32
800223bc:	72 0a       	ld.w	r10,r9[0x0]
800223be:	91 0a       	st.w	r8[0x0],r10
800223c0:	72 1a       	ld.w	r10,r9[0x4]
800223c2:	91 1a       	st.w	r8[0x4],r10
800223c4:	72 2a       	ld.w	r10,r9[0x8]
800223c6:	91 2a       	st.w	r8[0x8],r10
800223c8:	72 39       	ld.w	r9,r9[0xc]
800223ca:	91 39       	st.w	r8[0xc],r9
}
800223cc:	06 9c       	mov	r12,r3
800223ce:	2f 2d       	sub	sp,-56
800223d0:	e3 cd 80 e8 	ldm	sp++,r3,r5-r7,pc
800223d4:	80 02       	ld.sh	r2,r0[0x0]
800223d6:	20 96       	sub	r6,9

800223d8 <Quat_to_Aero>:

Aero_Attitude_t Quat_to_Aero(UQuat_t qe) {
800223d8:	eb cd 40 ee 	pushm	r1-r3,r5-r7,lr
800223dc:	1a 97       	mov	r7,sp
800223de:	20 3d       	sub	sp,12
800223e0:	4d 06       	lddpc	r6,80022520 <Quat_to_Aero+0x148>
800223e2:	1e 26       	rsub	r6,pc
800223e4:	ee c5 ff e4 	sub	r5,r7,-28
800223e8:	18 91       	mov	r1,r12
	Aero_Attitude_t aero;

	aero.rpy[0]= atan2(2*(qe.s*qe.v[0] + qe.v[1]*qe.v[2]) , (qe.s*qe.s - qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] + qe.v[2]*qe.v[2])); 
800223ea:	6a 09       	ld.w	r9,r5[0x0]
800223ec:	6a 08       	ld.w	r8,r5[0x0]
800223ee:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800223f2:	6a 1a       	ld.w	r10,r5[0x4]
800223f4:	6a 18       	ld.w	r8,r5[0x4]
800223f6:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800223fa:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800223fe:	6a 2a       	ld.w	r10,r5[0x8]
80022400:	6a 28       	ld.w	r8,r5[0x8]
80022402:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022406:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002240a:	6a 3a       	ld.w	r10,r5[0xc]
8002240c:	6a 38       	ld.w	r8,r5[0xc]
8002240e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022412:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022416:	10 9c       	mov	r12,r8
80022418:	f0 16 00 02 	mcall	r6[8]
8002241c:	14 92       	mov	r2,r10
8002241e:	16 93       	mov	r3,r11
80022420:	6a 09       	ld.w	r9,r5[0x0]
80022422:	6a 18       	ld.w	r8,r5[0x4]
80022424:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022428:	6a 2a       	ld.w	r10,r5[0x8]
8002242a:	6a 38       	ld.w	r8,r5[0xc]
8002242c:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022430:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
80022434:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022438:	10 9c       	mov	r12,r8
8002243a:	f0 16 00 02 	mcall	r6[8]
8002243e:	04 98       	mov	r8,r2
80022440:	06 99       	mov	r9,r3
80022442:	f0 16 00 54 	mcall	r6[336]
80022446:	14 98       	mov	r8,r10
80022448:	16 99       	mov	r9,r11
8002244a:	10 9a       	mov	r10,r8
8002244c:	12 9b       	mov	r11,r9
8002244e:	f0 16 00 08 	mcall	r6[32]
80022452:	18 98       	mov	r8,r12
80022454:	ef 48 ff f4 	st.w	r7[-12],r8
	aero.rpy[1]=-asin(2*(qe.v[0]*qe.v[2] - qe.s*qe.v[1]));
80022458:	6a 19       	ld.w	r9,r5[0x4]
8002245a:	6a 38       	ld.w	r8,r5[0xc]
8002245c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022460:	6a 0a       	ld.w	r10,r5[0x0]
80022462:	6a 28       	ld.w	r8,r5[0x8]
80022464:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022468:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
8002246c:	fc 18 c0 00 	movh	r8,0xc000
80022470:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022474:	10 9c       	mov	r12,r8
80022476:	f0 16 00 02 	mcall	r6[8]
8002247a:	14 98       	mov	r8,r10
8002247c:	16 99       	mov	r9,r11
8002247e:	10 9a       	mov	r10,r8
80022480:	12 9b       	mov	r11,r9
80022482:	f0 16 01 84 	mcall	r6[1552]
80022486:	14 98       	mov	r8,r10
80022488:	16 99       	mov	r9,r11
8002248a:	10 9a       	mov	r10,r8
8002248c:	12 9b       	mov	r11,r9
8002248e:	f0 16 00 08 	mcall	r6[32]
80022492:	18 98       	mov	r8,r12
80022494:	ef 48 ff f8 	st.w	r7[-8],r8
	aero.rpy[2]= atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022498:	6a 09       	ld.w	r9,r5[0x0]
8002249a:	6a 08       	ld.w	r8,r5[0x0]
8002249c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800224a0:	6a 1a       	ld.w	r10,r5[0x4]
800224a2:	6a 18       	ld.w	r8,r5[0x4]
800224a4:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224a8:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
800224ac:	6a 2a       	ld.w	r10,r5[0x8]
800224ae:	6a 28       	ld.w	r8,r5[0x8]
800224b0:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224b4:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
800224b8:	6a 3a       	ld.w	r10,r5[0xc]
800224ba:	6a 38       	ld.w	r8,r5[0xc]
800224bc:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224c0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800224c4:	10 9c       	mov	r12,r8
800224c6:	f0 16 00 02 	mcall	r6[8]
800224ca:	14 92       	mov	r2,r10
800224cc:	16 93       	mov	r3,r11
800224ce:	6a 09       	ld.w	r9,r5[0x0]
800224d0:	6a 38       	ld.w	r8,r5[0xc]
800224d2:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
800224d6:	6a 1a       	ld.w	r10,r5[0x4]
800224d8:	6a 28       	ld.w	r8,r5[0x8]
800224da:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
800224de:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
800224e2:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
800224e6:	10 9c       	mov	r12,r8
800224e8:	f0 16 00 02 	mcall	r6[8]
800224ec:	04 98       	mov	r8,r2
800224ee:	06 99       	mov	r9,r3
800224f0:	f0 16 00 54 	mcall	r6[336]
800224f4:	14 98       	mov	r8,r10
800224f6:	16 99       	mov	r9,r11
800224f8:	10 9a       	mov	r10,r8
800224fa:	12 9b       	mov	r11,r9
800224fc:	f0 16 00 08 	mcall	r6[32]
80022500:	18 98       	mov	r8,r12
80022502:	ef 48 ff fc 	st.w	r7[-4],r8
	
	return aero;
80022506:	02 9a       	mov	r10,r1
80022508:	ee cb 00 0c 	sub	r11,r7,12
8002250c:	f6 e8 00 00 	ld.d	r8,r11[0]
80022510:	f4 e9 00 00 	st.d	r10[0],r8
80022514:	76 28       	ld.w	r8,r11[0x8]
80022516:	95 28       	st.w	r10[0x8],r8
}
80022518:	02 9c       	mov	r12,r1
8002251a:	2f dd       	sub	sp,-12
8002251c:	e3 cd 80 ee 	ldm	sp++,r1-r3,r5-r7,pc
80022520:	80 02       	ld.sh	r2,r0[0x0]
80022522:	22 66       	sub	r6,38

80022524 <get_yaw>:

float get_yaw(UQuat_t qe) {
80022524:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80022528:	1a 97       	mov	r7,sp
8002252a:	49 f6       	lddpc	r6,800225a4 <get_yaw+0x80>
8002252c:	1e 26       	rsub	r6,pc
8002252e:	ee c5 ff e8 	sub	r5,r7,-24
	return  atan2(2*(qe.s*qe.v[2] + qe.v[0]*qe.v[1]) , (qe.s*qe.s + qe.v[0]*qe.v[0] - qe.v[1]*qe.v[1] - qe.v[2]*qe.v[2]));
80022532:	6a 09       	ld.w	r9,r5[0x0]
80022534:	6a 08       	ld.w	r8,r5[0x0]
80022536:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
8002253a:	6a 1a       	ld.w	r10,r5[0x4]
8002253c:	6a 18       	ld.w	r8,r5[0x4]
8002253e:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022542:	e5 a0 09 98 	cop	cp0,cr9,cr9,cr8,0x40
80022546:	6a 2a       	ld.w	r10,r5[0x8]
80022548:	6a 28       	ld.w	r8,r5[0x8]
8002254a:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002254e:	e5 a1 09 98 	cop	cp0,cr9,cr9,cr8,0x42
80022552:	6a 3a       	ld.w	r10,r5[0xc]
80022554:	6a 38       	ld.w	r8,r5[0xc]
80022556:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
8002255a:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
8002255e:	10 9c       	mov	r12,r8
80022560:	f0 16 00 02 	mcall	r6[8]
80022564:	14 92       	mov	r2,r10
80022566:	16 93       	mov	r3,r11
80022568:	6a 09       	ld.w	r9,r5[0x0]
8002256a:	6a 38       	ld.w	r8,r5[0xc]
8002256c:	e5 a2 09 98 	cop	cp0,cr9,cr9,cr8,0x44
80022570:	6a 1a       	ld.w	r10,r5[0x4]
80022572:	6a 28       	ld.w	r8,r5[0x8]
80022574:	e5 a2 08 a8 	cop	cp0,cr8,cr10,cr8,0x44
80022578:	e5 a0 08 98 	cop	cp0,cr8,cr9,cr8,0x40
8002257c:	e5 a0 08 88 	cop	cp0,cr8,cr8,cr8,0x40
80022580:	10 9c       	mov	r12,r8
80022582:	f0 16 00 02 	mcall	r6[8]
80022586:	04 98       	mov	r8,r2
80022588:	06 99       	mov	r9,r3
8002258a:	f0 16 00 54 	mcall	r6[336]
8002258e:	14 98       	mov	r8,r10
80022590:	16 99       	mov	r9,r11
80022592:	10 9a       	mov	r10,r8
80022594:	12 9b       	mov	r11,r9
80022596:	f0 16 00 08 	mcall	r6[32]
8002259a:	18 98       	mov	r8,r12
}
8002259c:	10 9c       	mov	r12,r8
8002259e:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
800225a2:	00 00       	add	r0,r0
800225a4:	80 02       	ld.sh	r2,r0[0x0]
800225a6:	23 b0       	sub	r0,59

800225a8 <dbg_print_init>:

/**
 * \brief some utilities for printing strings and numbers 
 */
void dbg_print_init(byte_stream_t* debug_stream)
{
800225a8:	eb cd 40 c0 	pushm	r6-r7,lr
800225ac:	1a 97       	mov	r7,sp
800225ae:	20 1d       	sub	sp,4
800225b0:	48 66       	lddpc	r6,800225c8 <dbg_print_init+0x20>
800225b2:	1e 26       	rsub	r6,pc
800225b4:	ef 4c ff fc 	st.w	r7[-4],r12
	deb_stream=debug_stream;
800225b8:	ec f8 01 b4 	ld.w	r8,r6[436]
800225bc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800225c0:	91 09       	st.w	r8[0x0],r9
}
800225c2:	2f fd       	sub	sp,-4
800225c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800225c8:	80 02       	ld.sh	r2,r0[0x0]
800225ca:	24 36       	sub	r6,67

800225cc <putstring>:

void putstring(byte_stream_t *out_stream, const char* s) {
800225cc:	eb cd 40 80 	pushm	r7,lr
800225d0:	1a 97       	mov	r7,sp
800225d2:	20 2d       	sub	sp,8
800225d4:	ef 4c ff fc 	st.w	r7[-4],r12
800225d8:	ef 4b ff f8 	st.w	r7[-8],r11
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800225dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800225e0:	58 08       	cp.w	r8,0
800225e2:	c2 10       	breq	80022624 <putstring+0x58>
800225e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800225e8:	70 18       	ld.w	r8,r8[0x4]
800225ea:	58 08       	cp.w	r8,0
800225ec:	c1 51       	brne	80022616 <putstring+0x4a>
800225ee:	c1 c8       	rjmp	80022626 <putstring+0x5a>
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
800225f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800225f4:	70 18       	ld.w	r8,r8[0x4]
800225f6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800225fa:	13 89       	ld.ub	r9,r9[0x0]
800225fc:	12 9a       	mov	r10,r9
800225fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022602:	72 59       	ld.w	r9,r9[0x14]
80022604:	14 9b       	mov	r11,r10
80022606:	12 9c       	mov	r12,r9
80022608:	5d 18       	icall	r8
		s++;
8002260a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002260e:	2f f8       	sub	r8,-1
80022610:	ef 48 ff f8 	st.w	r7[-8],r8
80022614:	c0 28       	rjmp	80022618 <putstring+0x4c>
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
	while (*s != 0) {
80022616:	d7 03       	nop
80022618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002261c:	11 88       	ld.ub	r8,r8[0x0]
8002261e:	58 08       	cp.w	r8,0
80022620:	ce 81       	brne	800225f0 <putstring+0x24>
80022622:	c0 28       	rjmp	80022626 <putstring+0x5a>
{
	deb_stream=debug_stream;
}

void putstring(byte_stream_t *out_stream, const char* s) {
	if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022624:	d7 03       	nop
	while (*s != 0) {
		out_stream->put(out_stream->data, *s);
		s++;
	}
}
80022626:	2f ed       	sub	sp,-8
80022628:	e3 cd 80 80 	ldm	sp++,r7,pc

8002262c <putdigit>:

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
8002262c:	eb cd 40 c0 	pushm	r6-r7,lr
80022630:	1a 97       	mov	r7,sp
80022632:	20 2d       	sub	sp,8
80022634:	49 76       	lddpc	r6,80022690 <putdigit+0x64>
80022636:	1e 26       	rsub	r6,pc
80022638:	ef 4c ff fc 	st.w	r7[-4],r12
8002263c:	ef 4b ff f8 	st.w	r7[-8],r11
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022640:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022644:	58 08       	cp.w	r8,0
80022646:	c1 d0       	breq	80022680 <putdigit+0x54>
80022648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002264c:	70 18       	ld.w	r8,r8[0x4]
8002264e:	58 08       	cp.w	r8,0
80022650:	c1 a0       	breq	80022684 <putdigit+0x58>
	
if (c > 35)
80022652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022656:	e0 48 00 23 	cp.w	r8,35
8002265a:	e0 8b 00 17 	brhi	80022688 <putdigit+0x5c>
    return;
  out_stream->put(out_stream->data,  alphabet[c]);
8002265e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022662:	70 18       	ld.w	r8,r8[0x4]
80022664:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022668:	ec fa 08 c4 	ld.w	r10,r6[2244]
8002266c:	f4 09 07 09 	ld.ub	r9,r10[r9]
80022670:	12 9a       	mov	r10,r9
80022672:	ee f9 ff fc 	ld.w	r9,r7[-4]
80022676:	72 59       	ld.w	r9,r9[0x14]
80022678:	14 9b       	mov	r11,r10
8002267a:	12 9c       	mov	r12,r9
8002267c:	5d 18       	icall	r8
8002267e:	c0 68       	rjmp	8002268a <putdigit+0x5e>
}

static const char alphabet[36] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

void putdigit(byte_stream_t *out_stream, unsigned c){
if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022680:	d7 03       	nop
80022682:	c0 48       	rjmp	8002268a <putdigit+0x5e>
80022684:	d7 03       	nop
80022686:	c0 28       	rjmp	8002268a <putdigit+0x5e>
	
if (c > 35)
    return;
80022688:	d7 03       	nop
  out_stream->put(out_stream->data,  alphabet[c]);
}
8002268a:	2f ed       	sub	sp,-8
8002268c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022690:	80 02       	ld.sh	r2,r0[0x0]
80022692:	24 ba       	sub	r10,75

80022694 <putnum>:


/*
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
80022694:	eb cd 40 c0 	pushm	r6-r7,lr
80022698:	1a 97       	mov	r7,sp
8002269a:	20 7d       	sub	sp,28
8002269c:	4b 96       	lddpc	r6,80022780 <putnum+0xec>
8002269e:	1e 26       	rsub	r6,pc
800226a0:	ef 4c ff ec 	st.w	r7[-20],r12
800226a4:	ef 4b ff e8 	st.w	r7[-24],r11
800226a8:	14 98       	mov	r8,r10
800226aa:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
800226ae:	30 a8       	mov	r8,10
800226b0:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800226b4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226b8:	58 08       	cp.w	r8,0
800226ba:	c5 d0       	breq	80022774 <putnum+0xe0>
800226bc:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226c0:	70 18       	ld.w	r8,r8[0x4]
800226c2:	58 08       	cp.w	r8,0
800226c4:	c5 a0       	breq	80022778 <putnum+0xe4>
  /* Take Care of the sign */
  if(c < 0){
800226c6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800226ca:	58 08       	cp.w	r8,0
800226cc:	c1 04       	brge	800226ec <putnum+0x58>
    out_stream->put(out_stream->data,   '-');
800226ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226d2:	70 18       	ld.w	r8,r8[0x4]
800226d4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800226d8:	72 59       	ld.w	r9,r9[0x14]
800226da:	32 db       	mov	r11,45
800226dc:	12 9c       	mov	r12,r9
800226de:	5d 18       	icall	r8
    c = c*-1;
800226e0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800226e4:	5c 38       	neg	r8
800226e6:	ef 48 ff e8 	st.w	r7[-24],r8
800226ea:	c0 a8       	rjmp	800226fe <putnum+0x6a>
  } else {
	  out_stream->put(out_stream->data,  ' ');
800226ec:	ee f8 ff ec 	ld.w	r8,r7[-20]
800226f0:	70 18       	ld.w	r8,r8[0x4]
800226f2:	ee f9 ff ec 	ld.w	r9,r7[-20]
800226f6:	72 59       	ld.w	r9,r9[0x14]
800226f8:	32 0b       	mov	r11,32
800226fa:	12 9c       	mov	r12,r9
800226fc:	5d 18       	icall	r8
    
  }

  do{
    i--;
800226fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022702:	20 18       	sub	r8,1
80022704:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
80022708:	ee fa ff fc 	ld.w	r10,r7[-4]
8002270c:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022710:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022714:	f0 09 0c 08 	divs	r8,r8,r9
80022718:	12 98       	mov	r8,r9
8002271a:	5c 58       	castu.b	r8
8002271c:	ee 0a 00 09 	add	r9,r7,r10
80022720:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022724:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022728:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002272c:	f0 09 0c 08 	divs	r8,r8,r9
80022730:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022734:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022738:	58 08       	cp.w	r8,0
8002273a:	c1 75       	brlt	80022768 <putnum+0xd4>
8002273c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022740:	58 08       	cp.w	r8,0
80022742:	fe 99 ff de 	brgt	800226fe <putnum+0x6a>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022746:	c1 18       	rjmp	80022768 <putnum+0xd4>
     putdigit(out_stream, storage[i]);
80022748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002274c:	ee 08 00 08 	add	r8,r7,r8
80022750:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022754:	10 9b       	mov	r11,r8
80022756:	ee fc ff ec 	ld.w	r12,r7[-20]
8002275a:	f0 16 00 b7 	mcall	r6[732]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002275e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022762:	2f f8       	sub	r8,-1
80022764:	ef 48 ff fc 	st.w	r7[-4],r8
80022768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002276c:	58 98       	cp.w	r8,9
8002276e:	fe 9a ff ed 	brle	80022748 <putnum+0xb4>
80022772:	c0 48       	rjmp	8002277a <putnum+0xe6>
  Outputs numbers with less than 10 digits
*/
void putnum(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022774:	d7 03       	nop
80022776:	c0 28       	rjmp	8002277a <putnum+0xe6>
80022778:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
8002277a:	2f 9d       	sub	sp,-28
8002277c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022780:	80 02       	ld.sh	r2,r0[0x0]
80022782:	25 22       	sub	r2,82

80022784 <putnum_tight>:

void putnum_tight(byte_stream_t *out_stream, long c, char base){
80022784:	eb cd 40 c0 	pushm	r6-r7,lr
80022788:	1a 97       	mov	r7,sp
8002278a:	20 7d       	sub	sp,28
8002278c:	4b 46       	lddpc	r6,8002285c <putnum_tight+0xd8>
8002278e:	1e 26       	rsub	r6,pc
80022790:	ef 4c ff ec 	st.w	r7[-20],r12
80022794:	ef 4b ff e8 	st.w	r7[-24],r11
80022798:	14 98       	mov	r8,r10
8002279a:	ef 68 ff e4 	st.b	r7[-28],r8
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
8002279e:	30 a8       	mov	r8,10
800227a0:	ef 48 ff fc 	st.w	r7[-4],r8
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
800227a4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227a8:	58 08       	cp.w	r8,0
800227aa:	c5 30       	breq	80022850 <putnum_tight+0xcc>
800227ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227b0:	70 18       	ld.w	r8,r8[0x4]
800227b2:	58 08       	cp.w	r8,0
800227b4:	c5 00       	breq	80022854 <putnum_tight+0xd0>
  /* Take Care of the sign */
  if(c < 0){
800227b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800227ba:	58 08       	cp.w	r8,0
800227bc:	c0 f4       	brge	800227da <putnum_tight+0x56>
    out_stream->put(out_stream->data,   '-');
800227be:	ee f8 ff ec 	ld.w	r8,r7[-20]
800227c2:	70 18       	ld.w	r8,r8[0x4]
800227c4:	ee f9 ff ec 	ld.w	r9,r7[-20]
800227c8:	72 59       	ld.w	r9,r9[0x14]
800227ca:	32 db       	mov	r11,45
800227cc:	12 9c       	mov	r12,r9
800227ce:	5d 18       	icall	r8
    c = c*-1;
800227d0:	ee f8 ff e8 	ld.w	r8,r7[-24]
800227d4:	5c 38       	neg	r8
800227d6:	ef 48 ff e8 	st.w	r7[-24],r8
  } else {
    
  }

  do{
    i--;
800227da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800227de:	20 18       	sub	r8,1
800227e0:	ef 48 ff fc 	st.w	r7[-4],r8
    storage[i] = c % base;
800227e4:	ee fa ff fc 	ld.w	r10,r7[-4]
800227e8:	ef 39 ff e4 	ld.ub	r9,r7[-28]
800227ec:	ee f8 ff e8 	ld.w	r8,r7[-24]
800227f0:	f0 09 0c 08 	divs	r8,r8,r9
800227f4:	12 98       	mov	r8,r9
800227f6:	5c 58       	castu.b	r8
800227f8:	ee 0a 00 09 	add	r9,r7,r10
800227fc:	f3 68 ff f0 	st.b	r9[-16],r8
    c = c / base;
80022800:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022804:	ee f8 ff e8 	ld.w	r8,r7[-24]
80022808:	f0 09 0c 08 	divs	r8,r8,r9
8002280c:	ef 48 ff e8 	st.w	r7[-24],r8
  }while((i >= 0) 
  && (c > 0)
  );
80022810:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022814:	58 08       	cp.w	r8,0
80022816:	c1 75       	brlt	80022844 <putnum_tight+0xc0>
80022818:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002281c:	58 08       	cp.w	r8,0
8002281e:	fe 99 ff de 	brgt	800227da <putnum_tight+0x56>
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
80022822:	c1 18       	rjmp	80022844 <putnum_tight+0xc0>
     putdigit(out_stream, storage[i]);
80022824:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022828:	ee 08 00 08 	add	r8,r7,r8
8002282c:	f1 38 ff f0 	ld.ub	r8,r8[-16]
80022830:	10 9b       	mov	r11,r8
80022832:	ee fc ff ec 	ld.w	r12,r7[-20]
80022836:	f0 16 00 b7 	mcall	r6[732]
  && (c > 0)
  );
  /* i is the index of the last digit calculated */

  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
8002283a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002283e:	2f f8       	sub	r8,-1
80022840:	ef 48 ff fc 	st.w	r7[-4],r8
80022844:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022848:	58 98       	cp.w	r8,9
8002284a:	fe 9a ff ed 	brle	80022824 <putnum_tight+0xa0>
8002284e:	c0 48       	rjmp	80022856 <putnum_tight+0xd2>
}

void putnum_tight(byte_stream_t *out_stream, long c, char base){
  char storage[MAX_DIGITS];
  long i = MAX_DIGITS;
  if ((out_stream==NULL) || (out_stream->put==NULL)) return;
80022850:	d7 03       	nop
80022852:	c0 28       	rjmp	80022856 <putnum_tight+0xd2>
80022854:	d7 03       	nop
  /* Hence, there is no need to initialize i */
  for( ; i<MAX_DIGITS; i++){
     putdigit(out_stream, storage[i]);
  }

}
80022856:	2f 9d       	sub	sp,-28
80022858:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002285c:	80 02       	ld.sh	r2,r0[0x0]
8002285e:	26 12       	sub	r2,97
80022860:	2d 00       	sub	r0,-48
80022862:	00 00       	add	r0,r0
80022864:	2e 00       	sub	r0,-32

80022866 <putfloat>:

void putfloat(byte_stream_t *out_stream, float c, int after_digits){
80022866:	eb cd 40 c0 	pushm	r6-r7,lr
8002286a:	1a 97       	mov	r7,sp
8002286c:	20 8d       	sub	sp,32
8002286e:	4b d6       	lddpc	r6,80022960 <putfloat+0xfa>
80022870:	1e 26       	rsub	r6,pc
80022872:	ef 4c ff e8 	st.w	r7[-24],r12
80022876:	ef 4b ff e4 	st.w	r7[-28],r11
8002287a:	ef 4a ff e0 	st.w	r7[-32],r10
	int i;
	float num=c;
8002287e:	ee f8 ff e4 	ld.w	r8,r7[-28]
80022882:	ef 48 ff f0 	st.w	r7[-16],r8
	if (c<0) {
80022886:	30 18       	mov	r8,1
80022888:	ee fa ff e4 	ld.w	r10,r7[-28]
8002288c:	30 09       	mov	r9,0
8002288e:	e5 ac 00 a9 	cop	cp0,cr0,cr10,cr9,0x58
80022892:	e0 8c 00 03 	brvs	80022898 <putfloat+0x32>
80022896:	c0 25       	brlt	8002289a <putfloat+0x34>
80022898:	30 08       	mov	r8,0
8002289a:	5c 58       	castu.b	r8
8002289c:	c0 d0       	breq	800228b6 <putfloat+0x50>
		putstring(out_stream, "-");
8002289e:	fe cb 00 3e 	sub	r11,pc,62
800228a2:	ee fc ff e8 	ld.w	r12,r7[-24]
800228a6:	f0 16 00 34 	mcall	r6[208]
		num=-c;
800228aa:	ee f8 ff e4 	ld.w	r8,r7[-28]
800228ae:	ee 18 80 00 	eorh	r8,0x8000
800228b2:	ef 48 ff f0 	st.w	r7[-16],r8
	}
	int whole=abs((int)num);
800228b6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800228ba:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
800228be:	ef 48 ff fc 	st.w	r7[-4],r8
800228c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228c6:	5c 48       	abs	r8
800228c8:	ef 48 ff fc 	st.w	r7[-4],r8
800228cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800228d0:	ef 48 ff f4 	st.w	r7[-12],r8
	float after=(num-(float)whole);
800228d4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800228d8:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
800228dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800228e0:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
800228e4:	ef 48 ff f8 	st.w	r7[-8],r8

	putnum_tight(out_stream, whole, 10);
800228e8:	30 aa       	mov	r10,10
800228ea:	ee fb ff f4 	ld.w	r11,r7[-12]
800228ee:	ee fc ff e8 	ld.w	r12,r7[-24]
800228f2:	f0 16 01 4b 	mcall	r6[1324]
	putstring(out_stream, "."); 
800228f6:	fe cb 00 92 	sub	r11,pc,146
800228fa:	ee fc ff e8 	ld.w	r12,r7[-24]
800228fe:	f0 16 00 34 	mcall	r6[208]
	
	for (i=0; i<after_digits; i++) 
80022902:	30 08       	mov	r8,0
80022904:	ef 48 ff ec 	st.w	r7[-20],r8
80022908:	c2 38       	rjmp	8002294e <putfloat+0xe8>
	{
		after*=10;
8002290a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002290e:	fc 18 41 20 	movh	r8,0x4120
80022912:	e5 a2 08 98 	cop	cp0,cr8,cr9,cr8,0x44
80022916:	ef 48 ff f8 	st.w	r7[-8],r8
		putdigit(out_stream, (int)after);
8002291a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002291e:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022922:	10 9b       	mov	r11,r8
80022924:	ee fc ff e8 	ld.w	r12,r7[-24]
80022928:	f0 16 00 b7 	mcall	r6[732]
		after=after-(int)after;
8002292c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022930:	e5 ab 08 08 	cop	cp0,cr8,cr0,cr8,0x56
80022934:	e5 a6 08 08 	cop	cp0,cr8,cr0,cr8,0x4c
80022938:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002293c:	e5 a1 08 98 	cop	cp0,cr8,cr9,cr8,0x42
80022940:	ef 48 ff f8 	st.w	r7[-8],r8
	float after=(num-(float)whole);

	putnum_tight(out_stream, whole, 10);
	putstring(out_stream, "."); 
	
	for (i=0; i<after_digits; i++) 
80022944:	ee f8 ff ec 	ld.w	r8,r7[-20]
80022948:	2f f8       	sub	r8,-1
8002294a:	ef 48 ff ec 	st.w	r7[-20],r8
8002294e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80022952:	ee f8 ff e0 	ld.w	r8,r7[-32]
80022956:	10 39       	cp.w	r9,r8
80022958:	cd 95       	brlt	8002290a <putfloat+0xa4>
		after*=10;
		putdigit(out_stream, (int)after);
		after=after-(int)after;
	}
	
}
8002295a:	2f 8d       	sub	sp,-32
8002295c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022960:	80 02       	ld.sh	r2,r0[0x0]
80022962:	26 f4       	sub	r4,111
80022964:	28 00       	sub	r0,-128
80022966:	00 00       	add	r0,r0
80022968:	2c 20       	sub	r0,-62
8002296a:	00 00       	add	r0,r0
8002296c:	29 20       	sub	r0,-110
	...

80022970 <print_vector>:


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
80022970:	eb cd 40 c0 	pushm	r6-r7,lr
80022974:	1a 97       	mov	r7,sp
80022976:	20 4d       	sub	sp,16
80022978:	4a 06       	lddpc	r6,800229f8 <print_vector+0x88>
8002297a:	1e 26       	rsub	r6,pc
8002297c:	ef 4c ff f8 	st.w	r7[-8],r12
80022980:	ef 4b ff f4 	st.w	r7[-12],r11
80022984:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	putstring(out_stream, "(");
80022988:	fe cb 00 24 	sub	r11,pc,36
8002298c:	ee fc ff f8 	ld.w	r12,r7[-8]
80022990:	f0 16 00 34 	mcall	r6[208]
	for (i=0; i<3; i++) {
80022994:	30 08       	mov	r8,0
80022996:	ef 48 ff fc 	st.w	r7[-4],r8
8002299a:	c2 08       	rjmp	800229da <print_vector+0x6a>
		putfloat(out_stream, v[i], after_digits);
8002299c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229a0:	a3 68       	lsl	r8,0x2
800229a2:	ee f9 ff f4 	ld.w	r9,r7[-12]
800229a6:	f2 08 00 08 	add	r8,r9,r8
800229aa:	70 08       	ld.w	r8,r8[0x0]
800229ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800229b0:	10 9b       	mov	r11,r8
800229b2:	ee fc ff f8 	ld.w	r12,r7[-8]
800229b6:	f0 16 00 db 	mcall	r6[876]
		if (i<2) putstring(out_stream, ", ");
800229ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229be:	58 18       	cp.w	r8,1
800229c0:	e0 89 00 08 	brgt	800229d0 <print_vector+0x60>
800229c4:	fe cb 00 5c 	sub	r11,pc,92
800229c8:	ee fc ff f8 	ld.w	r12,r7[-8]
800229cc:	f0 16 00 34 	mcall	r6[208]


void print_vector(byte_stream_t *out_stream, float v[], int after_digits) {
	int i;
	putstring(out_stream, "(");
	for (i=0; i<3; i++) {
800229d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229d4:	2f f8       	sub	r8,-1
800229d6:	ef 48 ff fc 	st.w	r7[-4],r8
800229da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800229de:	58 28       	cp.w	r8,2
800229e0:	fe 9a ff de 	brle	8002299c <print_vector+0x2c>
		putfloat(out_stream, v[i], after_digits);
		if (i<2) putstring(out_stream, ", ");

	}
	putstring(out_stream, ") ");
800229e4:	fe cb 00 78 	sub	r11,pc,120
800229e8:	ee fc ff f8 	ld.w	r12,r7[-8]
800229ec:	f0 16 00 34 	mcall	r6[208]

}
800229f0:	2f cd       	sub	sp,-16
800229f2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800229f6:	00 00       	add	r0,r0
800229f8:	80 02       	ld.sh	r2,r0[0x0]
800229fa:	27 fe       	sub	lr,127

800229fc <print_quaternion>:

void print_quaternion(byte_stream_t *out_stream, UQuat_t *quat, int after_digits) {
800229fc:	eb cd 40 c0 	pushm	r6-r7,lr
80022a00:	1a 97       	mov	r7,sp
80022a02:	20 3d       	sub	sp,12
80022a04:	49 96       	lddpc	r6,80022a68 <print_quaternion+0x6c>
80022a06:	1e 26       	rsub	r6,pc
80022a08:	ef 4c ff fc 	st.w	r7[-4],r12
80022a0c:	ef 4b ff f8 	st.w	r7[-8],r11
80022a10:	ef 4a ff f4 	st.w	r7[-12],r10
	putstring(out_stream, "(");
80022a14:	fe cb 00 b0 	sub	r11,pc,176
80022a18:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a1c:	f0 16 00 34 	mcall	r6[208]
	putfloat(out_stream, quat->s, after_digits);
80022a20:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022a24:	70 08       	ld.w	r8,r8[0x0]
80022a26:	ee fa ff f4 	ld.w	r10,r7[-12]
80022a2a:	10 9b       	mov	r11,r8
80022a2c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a30:	f0 16 00 db 	mcall	r6[876]
	putstring(out_stream, ", ");
80022a34:	fe cb 00 cc 	sub	r11,pc,204
80022a38:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a3c:	f0 16 00 34 	mcall	r6[208]
	print_vector(out_stream, quat->v, after_digits);
80022a40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022a44:	2f c8       	sub	r8,-4
80022a46:	ee fa ff f4 	ld.w	r10,r7[-12]
80022a4a:	10 9b       	mov	r11,r8
80022a4c:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a50:	f0 16 00 f7 	mcall	r6[988]
	putstring(out_stream, ") ");
80022a54:	fe cb 00 e8 	sub	r11,pc,232
80022a58:	ee fc ff fc 	ld.w	r12,r7[-4]
80022a5c:	f0 16 00 34 	mcall	r6[208]
}
80022a60:	2f dd       	sub	sp,-12
80022a62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a66:	00 00       	add	r0,r0
80022a68:	80 02       	ld.sh	r2,r0[0x0]
80022a6a:	28 8a       	sub	r10,-120

80022a6c <dbg_print>:

void dbg_print(const char* s) {
80022a6c:	eb cd 40 c0 	pushm	r6-r7,lr
80022a70:	1a 97       	mov	r7,sp
80022a72:	20 1d       	sub	sp,4
80022a74:	48 86       	lddpc	r6,80022a94 <dbg_print+0x28>
80022a76:	1e 26       	rsub	r6,pc
80022a78:	ef 4c ff fc 	st.w	r7[-4],r12
	putstring(deb_stream, s);
80022a7c:	ec f8 01 b4 	ld.w	r8,r6[436]
80022a80:	70 08       	ld.w	r8,r8[0x0]
80022a82:	ee fb ff fc 	ld.w	r11,r7[-4]
80022a86:	10 9c       	mov	r12,r8
80022a88:	f0 16 00 34 	mcall	r6[208]

}
80022a8c:	2f fd       	sub	sp,-4
80022a8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022a92:	00 00       	add	r0,r0
80022a94:	80 02       	ld.sh	r2,r0[0x0]
80022a96:	28 fa       	sub	r10,-113

80022a98 <dbg_print_num>:

void dbg_print_num(long c, char base) {
80022a98:	eb cd 40 c0 	pushm	r6-r7,lr
80022a9c:	1a 97       	mov	r7,sp
80022a9e:	20 2d       	sub	sp,8
80022aa0:	48 b6       	lddpc	r6,80022acc <dbg_print_num+0x34>
80022aa2:	1e 26       	rsub	r6,pc
80022aa4:	ef 4c ff fc 	st.w	r7[-4],r12
80022aa8:	16 98       	mov	r8,r11
80022aaa:	ef 68 ff f8 	st.b	r7[-8],r8
	putnum(deb_stream, c, base);
80022aae:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022ab2:	ec f8 01 b4 	ld.w	r8,r6[436]
80022ab6:	70 08       	ld.w	r8,r8[0x0]
80022ab8:	12 9a       	mov	r10,r9
80022aba:	ee fb ff fc 	ld.w	r11,r7[-4]
80022abe:	10 9c       	mov	r12,r8
80022ac0:	f0 16 00 28 	mcall	r6[160]

}
80022ac4:	2f ed       	sub	sp,-8
80022ac6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022aca:	00 00       	add	r0,r0
80022acc:	80 02       	ld.sh	r2,r0[0x0]
80022ace:	29 26       	sub	r6,-110

80022ad0 <dbg_putfloat>:

void dbg_putfloat(float c, int after_digits) {
80022ad0:	eb cd 40 c0 	pushm	r6-r7,lr
80022ad4:	1a 97       	mov	r7,sp
80022ad6:	20 2d       	sub	sp,8
80022ad8:	48 a6       	lddpc	r6,80022b00 <dbg_putfloat+0x30>
80022ada:	1e 26       	rsub	r6,pc
80022adc:	ef 4c ff fc 	st.w	r7[-4],r12
80022ae0:	ef 4b ff f8 	st.w	r7[-8],r11
	putfloat(deb_stream, c, after_digits);
80022ae4:	ec f8 01 b4 	ld.w	r8,r6[436]
80022ae8:	70 08       	ld.w	r8,r8[0x0]
80022aea:	ee fa ff f8 	ld.w	r10,r7[-8]
80022aee:	ee fb ff fc 	ld.w	r11,r7[-4]
80022af2:	10 9c       	mov	r12,r8
80022af4:	f0 16 00 db 	mcall	r6[876]
}
80022af8:	2f ed       	sub	sp,-8
80022afa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022afe:	00 00       	add	r0,r0
80022b00:	80 02       	ld.sh	r2,r0[0x0]
80022b02:	29 5e       	sub	lr,-107

80022b04 <dbg_print_vector>:

void dbg_print_vector(float v[], int after_digits) {
80022b04:	eb cd 40 c0 	pushm	r6-r7,lr
80022b08:	1a 97       	mov	r7,sp
80022b0a:	20 2d       	sub	sp,8
80022b0c:	48 a6       	lddpc	r6,80022b34 <dbg_print_vector+0x30>
80022b0e:	1e 26       	rsub	r6,pc
80022b10:	ef 4c ff fc 	st.w	r7[-4],r12
80022b14:	ef 4b ff f8 	st.w	r7[-8],r11
	print_vector(deb_stream, v, after_digits);
80022b18:	ec f8 01 b4 	ld.w	r8,r6[436]
80022b1c:	70 08       	ld.w	r8,r8[0x0]
80022b1e:	ee fa ff f8 	ld.w	r10,r7[-8]
80022b22:	ee fb ff fc 	ld.w	r11,r7[-4]
80022b26:	10 9c       	mov	r12,r8
80022b28:	f0 16 00 f7 	mcall	r6[988]
}
80022b2c:	2f ed       	sub	sp,-8
80022b2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b32:	00 00       	add	r0,r0
80022b34:	80 02       	ld.sh	r2,r0[0x0]
80022b36:	29 92       	sub	r2,-103

80022b38 <dbg_print_quaternion>:

void dbg_print_quaternion(UQuat_t *quat, int after_digits) {
80022b38:	eb cd 40 c0 	pushm	r6-r7,lr
80022b3c:	1a 97       	mov	r7,sp
80022b3e:	20 2d       	sub	sp,8
80022b40:	48 a6       	lddpc	r6,80022b68 <dbg_print_quaternion+0x30>
80022b42:	1e 26       	rsub	r6,pc
80022b44:	ef 4c ff fc 	st.w	r7[-4],r12
80022b48:	ef 4b ff f8 	st.w	r7[-8],r11
	print_quaternion(deb_stream, quat, after_digits);
80022b4c:	ec f8 01 b4 	ld.w	r8,r6[436]
80022b50:	70 08       	ld.w	r8,r8[0x0]
80022b52:	ee fa ff f8 	ld.w	r10,r7[-8]
80022b56:	ee fb ff fc 	ld.w	r11,r7[-4]
80022b5a:	10 9c       	mov	r12,r8
80022b5c:	f0 16 01 a0 	mcall	r6[1664]
}
80022b60:	2f ed       	sub	sp,-8
80022b62:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022b66:	00 00       	add	r0,r0
80022b68:	80 02       	ld.sh	r2,r0[0x0]
80022b6a:	29 c6       	sub	r6,-100
80022b6c:	0a 00       	add	r0,r5

80022b6e <dbg_log_value>:


void dbg_log_value(const char* msg, long value, char base) {
80022b6e:	eb cd 40 c0 	pushm	r6-r7,lr
80022b72:	1a 97       	mov	r7,sp
80022b74:	20 3d       	sub	sp,12
80022b76:	49 26       	lddpc	r6,80022bbc <dbg_log_value+0x4e>
80022b78:	1e 26       	rsub	r6,pc
80022b7a:	ef 4c ff fc 	st.w	r7[-4],r12
80022b7e:	ef 4b ff f8 	st.w	r7[-8],r11
80022b82:	14 98       	mov	r8,r10
80022b84:	ef 68 ff f4 	st.b	r7[-12],r8
	dbg_print(msg);
80022b88:	ee fc ff fc 	ld.w	r12,r7[-4]
80022b8c:	f0 16 00 01 	mcall	r6[4]
	if (base>1) {
80022b90:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022b94:	30 18       	mov	r8,1
80022b96:	f0 09 18 00 	cp.b	r9,r8
80022b9a:	e0 88 00 09 	brls	80022bac <dbg_log_value+0x3e>
		dbg_print_num(value, base);
80022b9e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80022ba2:	10 9b       	mov	r11,r8
80022ba4:	ee fc ff f8 	ld.w	r12,r7[-8]
80022ba8:	f0 16 00 04 	mcall	r6[16]
	}
	dbg_print("\n");
80022bac:	fe cc 00 40 	sub	r12,pc,64
80022bb0:	f0 16 00 01 	mcall	r6[4]

}
80022bb4:	2f dd       	sub	sp,-12
80022bb6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80022bba:	00 00       	add	r0,r0
80022bbc:	80 02       	ld.sh	r2,r0[0x0]
80022bbe:	29 fc       	sub	r12,-97

80022bc0 <adcifa_get_calibration_data>:
#include "compiler.h"
#include "adcifa.h"

void adcifa_get_calibration_data(volatile avr32_adcifa_t * adcifa,
                                 adcifa_opt_t * p_adcifa_opt)
{
80022bc0:	eb cd 40 80 	pushm	r7,lr
80022bc4:	1a 97       	mov	r7,sp
80022bc6:	20 6d       	sub	sp,24
80022bc8:	ef 4c ff ec 	st.w	r7[-20],r12
80022bcc:	ef 4b ff e8 	st.w	r7[-24],r11
	// Get Offset Calibration
	signed int adc_ocal = (( *(volatile signed int*)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_OCAL_WORD)) &  AVR32_FLASHC_FROW_OCAL_MASK) >> AVR32_FLASHC_FROW_OCAL_OFFSET;
80022bd0:	e0 68 02 04 	mov	r8,516
80022bd4:	ea 18 80 80 	orh	r8,0x8080
80022bd8:	70 08       	ld.w	r8,r8[0x0]
80022bda:	e6 18 3f 00 	andh	r8,0x3f00,COH
80022bde:	b9 48       	asr	r8,0x18
80022be0:	ef 48 ff f0 	st.w	r7[-16],r8
	// Get Gain Calibration
	signed int adc_gcal = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GCAL_WORD)) &  AVR32_FLASHC_FROW_GCAL_MASK) >> AVR32_FLASHC_FROW_GCAL_OFFSET;
80022be4:	e0 68 02 04 	mov	r8,516
80022be8:	ea 18 80 80 	orh	r8,0x8080
80022bec:	70 08       	ld.w	r8,r8[0x0]
80022bee:	f1 d8 c0 0f 	bfextu	r8,r8,0x0,0xf
80022bf2:	ef 48 ff f4 	st.w	r7[-12],r8
	//  Get S/H Calibration
	signed int adc_gain0 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN0_WORD)) &  AVR32_FLASHC_FROW_GAIN0_MASK) >> AVR32_FLASHC_FROW_GAIN0_OFFSET;
80022bf6:	e0 68 02 08 	mov	r8,520
80022bfa:	ea 18 80 80 	orh	r8,0x8080
80022bfe:	70 08       	ld.w	r8,r8[0x0]
80022c00:	f1 d8 c0 0a 	bfextu	r8,r8,0x0,0xa
80022c04:	ef 48 ff f8 	st.w	r7[-8],r8
	signed int adc_gain1 = (( *(volatile signed int *)(AVR32_FLASHC_FACTORY_PAGE_ADDRESS + AVR32_FLASHC_FROW_GAIN1_WORD)) &  AVR32_FLASHC_FROW_GAIN1_MASK) >> AVR32_FLASHC_FROW_GAIN1_OFFSET;
80022c08:	e0 68 02 08 	mov	r8,520
80022c0c:	ea 18 80 80 	orh	r8,0x8080
80022c10:	70 08       	ld.w	r8,r8[0x0]
80022c12:	e6 18 03 ff 	andh	r8,0x3ff,COH
80022c16:	b1 48       	asr	r8,0x10
80022c18:	ef 48 ff fc 	st.w	r7[-4],r8

	// Get ADC Offset Calibration
	p_adcifa_opt->offset_calibration_value = adc_ocal;
80022c1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80022c20:	5c 88       	casts.h	r8
80022c22:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c26:	b2 68       	st.h	r9[0xc],r8

	// Get ADC Gain Calibration
	p_adcifa_opt->gain_calibration_value = adc_gcal ;
80022c28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022c2c:	5c 88       	casts.h	r8
80022c2e:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c32:	b2 58       	st.h	r9[0xa],r8

	// Get Sample & Hold Gain Calibration for Seq 0
	p_adcifa_opt->sh0_calibration_value = adc_gain0;
80022c34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c38:	5c 88       	casts.h	r8
80022c3a:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c3e:	b2 78       	st.h	r9[0xe],r8

	// Get Sample & Hold Gain Calibration for Seq 1
	p_adcifa_opt->sh1_calibration_value = adc_gain1;
80022c40:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022c44:	5c 88       	casts.h	r8
80022c46:	ee f9 ff e8 	ld.w	r9,r7[-24]
80022c4a:	f3 58 00 10 	st.h	r9[16],r8
}
80022c4e:	2f ad       	sub	sp,-24
80022c50:	e3 cd 80 80 	ldm	sp++,r7,pc

80022c54 <adcifa_configure>:


U8 adcifa_configure(volatile avr32_adcifa_t * adcifa,
                    adcifa_opt_t * p_adcifa_opt,
                    U32 pb_hz)
{
80022c54:	eb cd 40 80 	pushm	r7,lr
80022c58:	1a 97       	mov	r7,sp
80022c5a:	20 3d       	sub	sp,12
80022c5c:	ef 4c ff fc 	st.w	r7[-4],r12
80022c60:	ef 4b ff f8 	st.w	r7[-8],r11
80022c64:	ef 4a ff f4 	st.w	r7[-12],r10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022c68:	fc 7a 24 00 	mov	r10,-187392
80022c6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c70:	f1 38 00 08 	ld.ub	r8,r8[8]
80022c74:	f0 09 15 02 	lsl	r9,r8,0x2
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
80022c78:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c7c:	11 e8       	ld.ub	r8,r8[0x6]
80022c7e:	a3 78       	lsl	r8,0x3
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
80022c80:	10 49       	or	r9,r8
80022c82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c86:	11 f8       	ld.ub	r8,r8[0x7]
80022c88:	a5 68       	lsl	r8,0x4
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
80022c8a:	10 49       	or	r9,r8
80022c8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c90:	11 c8       	ld.ub	r8,r8[0x4]
80022c92:	a5 78       	lsl	r8,0x5
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
80022c94:	10 49       	or	r9,r8
80022c96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022c9a:	11 d8       	ld.ub	r8,r8[0x5]
80022c9c:	a7 78       	lsl	r8,0x7
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80022c9e:	f3 e8 10 08 	or	r8,r9,r8

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022ca2:	10 9b       	mov	r11,r8
	                    | (p_adcifa_opt->single_sequencer_mode << AVR32_ADCIFA_CFG_SSMQ)
	                    | (p_adcifa_opt->free_running_mode_enable << AVR32_ADCIFA_CFG_FRM)
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);
80022ca4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022ca8:	70 09       	ld.w	r9,r8[0x0]
80022caa:	e0 68 4d d3 	mov	r8,19923
80022cae:	ea 18 10 62 	orh	r8,0x1062
80022cb2:	f2 08 06 48 	mulu.d	r8,r9,r8
80022cb6:	a7 89       	lsr	r9,0x6
80022cb8:	e0 68 03 e8 	mov	r8,1000
80022cbc:	b1 39       	mul	r9,r8
80022cbe:	e0 68 4d d3 	mov	r8,19923
80022cc2:	ea 18 10 62 	orh	r8,0x1062
80022cc6:	f2 08 06 48 	mulu.d	r8,r9,r8
80022cca:	f2 08 16 0b 	lsr	r8,r9,0xb
80022cce:	b1 68       	lsl	r8,0x10

	// Sanity Check
	Assert( adcifa!=NULL );

	// Set the ADC configuration
	AVR32_ADCIFA.cfg = (p_adcifa_opt->sleep_mode_enable << AVR32_ADCIFA_CFG_SLEEP)
80022cd0:	f7 e8 10 08 	or	r8,r11,r8
80022cd4:	95 18       	st.w	r10[0x4],r8
	                    | (p_adcifa_opt->reference_source << AVR32_ADCIFA_CFG_RS)
	                    | (p_adcifa_opt->sample_and_hold_disable << AVR32_ADCIFA_CFG_SHD)
	                    | (((ADCIFA_START_UP_TIME * (p_adcifa_opt->frequency/1000))/32000) << AVR32_ADCIFA_CFG_SUT);

	// Configure Clock  (rounded up)
	adcifa->ckdiv = (((pb_hz / (2*p_adcifa_opt->frequency))-1) << AVR32_ADCIFA_CKDIV_CNT_OFFSET) & AVR32_ADCIFA_CKDIV_CNT_MASK;
80022cd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80022cda:	70 08       	ld.w	r8,r8[0x0]
80022cdc:	f0 09 15 01 	lsl	r9,r8,0x1
80022ce0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80022ce4:	f0 09 0d 08 	divu	r8,r8,r9
80022ce8:	20 18       	sub	r8,1
80022cea:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
80022cee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80022cf2:	f1 49 00 44 	st.w	r8[68],r9

	// Set ADC Offset Calibration
	ADCIFA_set_offset_calibration(p_adcifa_opt->offset_calibration_value);
80022cf6:	fc 78 24 00 	mov	r8,-187392
80022cfa:	fc 79 24 00 	mov	r9,-187392
80022cfe:	73 aa       	ld.w	r10,r9[0x68]
80022d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d04:	92 69       	ld.sh	r9,r9[0xc]
80022d06:	b9 69       	lsl	r9,0x18
80022d08:	e6 19 3f 00 	andh	r9,0x3f00,COH
80022d0c:	f5 e9 10 09 	or	r9,r10,r9
80022d10:	f1 49 00 68 	st.w	r8[104],r9

	// Set ADC Gain Calibration
	ADCIFA_set_gain_calibration(p_adcifa_opt->gain_calibration_value);
80022d14:	fc 78 24 00 	mov	r8,-187392
80022d18:	fc 79 24 00 	mov	r9,-187392
80022d1c:	73 aa       	ld.w	r10,r9[0x68]
80022d1e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d22:	92 59       	ld.sh	r9,r9[0xa]
80022d24:	f3 d9 c0 0f 	bfextu	r9,r9,0x0,0xf
80022d28:	f5 e9 10 09 	or	r9,r10,r9
80022d2c:	f1 49 00 68 	st.w	r8[104],r9

	// Set Sample & Hold Gain Calibration for seq 0
	ADCIFA_set_sh0_gain_calibration(p_adcifa_opt->sh0_calibration_value);
80022d30:	fc 78 24 00 	mov	r8,-187392
80022d34:	fc 79 24 00 	mov	r9,-187392
80022d38:	73 ba       	ld.w	r10,r9[0x6c]
80022d3a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d3e:	92 79       	ld.sh	r9,r9[0xe]
80022d40:	f3 d9 c0 0a 	bfextu	r9,r9,0x0,0xa
80022d44:	f5 e9 10 09 	or	r9,r10,r9
80022d48:	f1 49 00 6c 	st.w	r8[108],r9

	// Set Sample & Hold Gain Calibration for seq 1
	ADCIFA_set_sh1_gain_calibration(p_adcifa_opt->sh1_calibration_value);
80022d4c:	fc 78 24 00 	mov	r8,-187392
80022d50:	fc 79 24 00 	mov	r9,-187392
80022d54:	73 ba       	ld.w	r10,r9[0x6c]
80022d56:	ee f9 ff f8 	ld.w	r9,r7[-8]
80022d5a:	f3 09 00 10 	ld.sh	r9,r9[16]
80022d5e:	b1 69       	lsl	r9,0x10
80022d60:	e6 19 03 ff 	andh	r9,0x3ff,COH
80022d64:	f5 e9 10 09 	or	r9,r10,r9
80022d68:	f1 49 00 6c 	st.w	r8[108],r9

	// Enable ADCIFA
	ADCIFA_enable();
80022d6c:	fc 78 24 00 	mov	r8,-187392
80022d70:	fc 79 24 00 	mov	r9,-187392
80022d74:	72 19       	ld.w	r9,r9[0x4]
80022d76:	a1 a9       	sbr	r9,0x0
80022d78:	91 19       	st.w	r8[0x4],r9
80022d7a:	c0 28       	rjmp	80022d7e <adcifa_configure+0x12a>

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
	}
80022d7c:	d7 03       	nop
	// Enable ADCIFA
	ADCIFA_enable();

	// Wait Startup Time
	while (1) {
		if (ADCIFA_is_startup_time()) break;
80022d7e:	fc 78 24 00 	mov	r8,-187392
80022d82:	70 28       	ld.w	r8,r8[0x8]
80022d84:	e2 18 40 00 	andl	r8,0x4000,COH
80022d88:	cf a0       	breq	80022d7c <adcifa_configure+0x128>
	}

	return ADCIFA_CONFIGURATION_ACCEPTED;
80022d8a:	30 18       	mov	r8,1
}
80022d8c:	10 9c       	mov	r12,r8
80022d8e:	2f dd       	sub	sp,-12
80022d90:	e3 cd 80 80 	ldm	sp++,r7,pc

80022d94 <adcifa_configure_sequencer>:

U8 adcifa_configure_sequencer(volatile avr32_adcifa_t * adcifa,
                              U8 sequencer,
                              adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                              adcifa_sequencer_conversion_opt_t * p_adcifa_sequencer_conversion_opt)
{
80022d94:	eb cd 40 80 	pushm	r7,lr
80022d98:	1a 97       	mov	r7,sp
80022d9a:	20 bd       	sub	sp,44
80022d9c:	ef 4c ff e0 	st.w	r7[-32],r12
80022da0:	16 98       	mov	r8,r11
80022da2:	ef 4a ff d8 	st.w	r7[-40],r10
80022da6:	ef 49 ff d4 	st.w	r7[-44],r9
80022daa:	ef 68 ff dc 	st.b	r7[-36],r8
	U8 g[8]={0};
80022dae:	30 08       	mov	r8,0
80022db0:	30 09       	mov	r9,0
80022db2:	ee e9 ff f4 	st.d	r7[-12],r8
	U8 mp[8]={0};
80022db6:	30 08       	mov	r8,0
80022db8:	30 09       	mov	r9,0
80022dba:	ee e9 ff ec 	st.d	r7[-20],r8
	U8 mn[8]={0};
80022dbe:	30 08       	mov	r8,0
80022dc0:	30 09       	mov	r9,0
80022dc2:	ee e9 ff e4 	st.d	r7[-28],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch case with sequencer
	switch (sequencer) {
80022dc6:	ef 38 ff dc 	ld.ub	r8,r7[-36]
80022dca:	58 08       	cp.w	r8,0
80022dcc:	c0 60       	breq	80022dd8 <adcifa_configure_sequencer+0x44>
80022dce:	58 18       	cp.w	r8,1
80022dd0:	e0 80 00 ed 	breq	80022faa <adcifa_configure_sequencer+0x216>
80022dd4:	e0 8f 01 d7 	bral	80023182 <adcifa_configure_sequencer+0x3ee>
		// Sequencer 0
	case 0:
		// Configure Sequencer 0
		ADCIFA_configure_sequencer_0((p_adcifa_sequencer_opt->convnb-1),
80022dd8:	fc 78 24 00 	mov	r8,-187392
80022ddc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022de0:	13 89       	ld.ub	r9,r9[0x0]
80022de2:	20 19       	sub	r9,1
80022de4:	f2 0a 15 10 	lsl	r10,r9,0x10
80022de8:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022dec:	13 99       	ld.ub	r9,r9[0x1]
80022dee:	ad 69       	lsl	r9,0xc
80022df0:	12 4a       	or	r10,r9
80022df2:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022df6:	13 a9       	ld.ub	r9,r9[0x2]
80022df8:	a9 69       	lsl	r9,0x8
80022dfa:	12 4a       	or	r10,r9
80022dfc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e00:	13 b9       	ld.ub	r9,r9[0x3]
80022e02:	a3 69       	lsl	r9,0x2
80022e04:	12 4a       	or	r10,r9
80022e06:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e0a:	13 c9       	ld.ub	r9,r9[0x4]
80022e0c:	a3 79       	lsl	r9,0x3
80022e0e:	12 4a       	or	r10,r9
80022e10:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e14:	13 d9       	ld.ub	r9,r9[0x5]
80022e16:	a1 79       	lsl	r9,0x1
80022e18:	12 4a       	or	r10,r9
80022e1a:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022e1e:	13 e9       	ld.ub	r9,r9[0x6]
80022e20:	f5 e9 10 09 	or	r9,r10,r9
80022e24:	91 59       	st.w	r8[0x14],r9
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80022e26:	30 08       	mov	r8,0
80022e28:	ef 68 ff ff 	st.b	r7[-1],r8
80022e2c:	c1 68       	rjmp	80022e58 <adcifa_configure_sequencer+0xc4>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80022e2e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022e32:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022e36:	12 98       	mov	r8,r9
80022e38:	a1 78       	lsl	r8,0x1
80022e3a:	12 08       	add	r8,r9
80022e3c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022e40:	f2 08 00 08 	add	r8,r9,r8
80022e44:	11 a8       	ld.ub	r8,r8[0x2]
80022e46:	ee 0a 00 09 	add	r9,r7,r10
80022e4a:	f3 68 ff f4 	st.b	r9[-12],r8
		                             (p_adcifa_sequencer_opt->sh_mode),
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));
		// Configure Gain for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80022e4e:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022e52:	2f f8       	sub	r8,-1
80022e54:	ef 68 ff ff 	st.b	r7[-1],r8
80022e58:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022e5c:	11 88       	ld.ub	r8,r8[0x0]
80022e5e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022e62:	f0 09 18 00 	cp.b	r9,r8
80022e66:	ce 43       	brcs	80022e2e <adcifa_configure_sequencer+0x9a>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80022e68:	fc 78 24 00 	mov	r8,-187392
80022e6c:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80022e70:	f2 0a 15 1c 	lsl	r10,r9,0x1c
80022e74:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80022e78:	b9 69       	lsl	r9,0x18
80022e7a:	12 4a       	or	r10,r9
80022e7c:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80022e80:	b5 69       	lsl	r9,0x14
80022e82:	12 4a       	or	r10,r9
80022e84:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80022e88:	b1 69       	lsl	r9,0x10
80022e8a:	12 4a       	or	r10,r9
80022e8c:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80022e90:	ad 69       	lsl	r9,0xc
80022e92:	12 4a       	or	r10,r9
80022e94:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80022e98:	a9 69       	lsl	r9,0x8
80022e9a:	12 4a       	or	r10,r9
80022e9c:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80022ea0:	a5 69       	lsl	r9,0x4
80022ea2:	12 4a       	or	r10,r9
80022ea4:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80022ea8:	f5 e9 10 09 	or	r9,r10,r9
80022eac:	91 79       	st.w	r8[0x1c],r9

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80022eae:	30 08       	mov	r8,0
80022eb0:	ef 68 ff ff 	st.b	r7[-1],r8
80022eb4:	c2 68       	rjmp	80022f00 <adcifa_configure_sequencer+0x16c>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
80022eb6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022eba:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022ebe:	12 98       	mov	r8,r9
80022ec0:	a1 78       	lsl	r8,0x1
80022ec2:	12 08       	add	r8,r9
80022ec4:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022ec8:	f2 08 00 08 	add	r8,r9,r8
80022ecc:	11 88       	ld.ub	r8,r8[0x0]
80022ece:	ee 0a 00 09 	add	r9,r7,r10
80022ed2:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
80022ed6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80022eda:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022ede:	12 98       	mov	r8,r9
80022ee0:	a1 78       	lsl	r8,0x1
80022ee2:	12 08       	add	r8,r9
80022ee4:	ee f9 ff d4 	ld.w	r9,r7[-44]
80022ee8:	f2 08 00 08 	add	r8,r9,r8
80022eec:	11 98       	ld.ub	r8,r8[0x1]
80022eee:	ee 0a 00 09 	add	r9,r7,r10
80022ef2:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh0gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80022ef6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80022efa:	2f f8       	sub	r8,-1
80022efc:	ef 68 ff ff 	st.b	r7[-1],r8
80022f00:	ee f8 ff d8 	ld.w	r8,r7[-40]
80022f04:	11 88       	ld.ub	r8,r8[0x0]
80022f06:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80022f0a:	f0 09 18 00 	cp.b	r9,r8
80022f0e:	cd 43       	brcs	80022eb6 <adcifa_configure_sequencer+0x122>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel0p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
80022f10:	fc 78 24 00 	mov	r8,-187392
80022f14:	ef 39 ff f3 	ld.ub	r9,r7[-13]
80022f18:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f1c:	ef 39 ff f2 	ld.ub	r9,r7[-14]
80022f20:	b1 69       	lsl	r9,0x10
80022f22:	12 4a       	or	r10,r9
80022f24:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80022f28:	a9 69       	lsl	r9,0x8
80022f2a:	12 4a       	or	r10,r9
80022f2c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80022f30:	f5 e9 10 09 	or	r9,r10,r9
80022f34:	91 b9       	st.w	r8[0x2c],r9
80022f36:	fc 78 24 00 	mov	r8,-187392
80022f3a:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80022f3e:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f42:	ef 39 ff ee 	ld.ub	r9,r7[-18]
80022f46:	b1 69       	lsl	r9,0x10
80022f48:	12 4a       	or	r10,r9
80022f4a:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80022f4e:	a9 69       	lsl	r9,0x8
80022f50:	12 4a       	or	r10,r9
80022f52:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80022f56:	f5 e9 10 09 	or	r9,r10,r9
80022f5a:	91 99       	st.w	r8[0x24],r9
		ADCIFA_configure_muxsel0n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80022f5c:	fc 78 24 00 	mov	r8,-187392
80022f60:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80022f64:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f68:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80022f6c:	b1 69       	lsl	r9,0x10
80022f6e:	12 4a       	or	r10,r9
80022f70:	ef 39 ff e9 	ld.ub	r9,r7[-23]
80022f74:	a9 69       	lsl	r9,0x8
80022f76:	12 4a       	or	r10,r9
80022f78:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80022f7c:	f5 e9 10 09 	or	r9,r10,r9
80022f80:	91 f9       	st.w	r8[0x3c],r9
80022f82:	fc 78 24 00 	mov	r8,-187392
80022f86:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80022f8a:	f2 0a 15 18 	lsl	r10,r9,0x18
80022f8e:	ef 39 ff e6 	ld.ub	r9,r7[-26]
80022f92:	b1 69       	lsl	r9,0x10
80022f94:	12 4a       	or	r10,r9
80022f96:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80022f9a:	a9 69       	lsl	r9,0x8
80022f9c:	12 4a       	or	r10,r9
80022f9e:	ef 39 ff e4 	ld.ub	r9,r7[-28]
80022fa2:	f5 e9 10 09 	or	r9,r10,r9
80022fa6:	91 d9       	st.w	r8[0x34],r9
		break;
80022fa8:	ce d8       	rjmp	80023182 <adcifa_configure_sequencer+0x3ee>
		// Sequencer 1
	case 1:
		// Configure Sequencer 1
		ADCIFA_configure_sequencer_1((p_adcifa_sequencer_opt->convnb-1),
80022faa:	fc 78 24 00 	mov	r8,-187392
80022fae:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fb2:	13 89       	ld.ub	r9,r9[0x0]
80022fb4:	20 19       	sub	r9,1
80022fb6:	f2 0a 15 10 	lsl	r10,r9,0x10
80022fba:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fbe:	13 99       	ld.ub	r9,r9[0x1]
80022fc0:	ad 69       	lsl	r9,0xc
80022fc2:	12 4a       	or	r10,r9
80022fc4:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fc8:	13 a9       	ld.ub	r9,r9[0x2]
80022fca:	a9 69       	lsl	r9,0x8
80022fcc:	12 4a       	or	r10,r9
80022fce:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fd2:	13 b9       	ld.ub	r9,r9[0x3]
80022fd4:	a3 69       	lsl	r9,0x2
80022fd6:	12 4a       	or	r10,r9
80022fd8:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fdc:	13 c9       	ld.ub	r9,r9[0x4]
80022fde:	a3 79       	lsl	r9,0x3
80022fe0:	12 4a       	or	r10,r9
80022fe2:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022fe6:	13 d9       	ld.ub	r9,r9[0x5]
80022fe8:	a1 79       	lsl	r9,0x1
80022fea:	f5 e9 10 09 	or	r9,r10,r9
80022fee:	12 9a       	mov	r10,r9
80022ff0:	a5 aa       	sbr	r10,0x4
80022ff2:	ee f9 ff d8 	ld.w	r9,r7[-40]
80022ff6:	13 e9       	ld.ub	r9,r9[0x6]
80022ff8:	f5 e9 10 09 	or	r9,r10,r9
80022ffc:	91 69       	st.w	r8[0x18],r9
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80022ffe:	30 08       	mov	r8,0
80023000:	ef 68 ff ff 	st.b	r7[-1],r8
80023004:	c1 68       	rjmp	80023030 <adcifa_configure_sequencer+0x29c>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
80023006:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002300a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002300e:	12 98       	mov	r8,r9
80023010:	a1 78       	lsl	r8,0x1
80023012:	12 08       	add	r8,r9
80023014:	ee f9 ff d4 	ld.w	r9,r7[-44]
80023018:	f2 08 00 08 	add	r8,r9,r8
8002301c:	11 a8       	ld.ub	r8,r8[0x2]
8002301e:	ee 0a 00 09 	add	r9,r7,r10
80023022:	f3 68 ff f4 	st.b	r9[-12],r8
#endif
		                             (p_adcifa_sequencer_opt->half_word_adjustment),
		                             (p_adcifa_sequencer_opt->software_acknowledge));

		// Configure Gain for Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
80023026:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002302a:	2f f8       	sub	r8,-1
8002302c:	ef 68 ff ff 	st.b	r7[-1],r8
80023030:	ee f8 ff d8 	ld.w	r8,r7[-40]
80023034:	11 88       	ld.ub	r8,r8[0x0]
80023036:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002303a:	f0 09 18 00 	cp.b	r9,r8
8002303e:	ce 43       	brcs	80023006 <adcifa_configure_sequencer+0x272>
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);
80023040:	fc 78 24 00 	mov	r8,-187392
80023044:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80023048:	f2 0a 15 1c 	lsl	r10,r9,0x1c
8002304c:	ef 39 ff fa 	ld.ub	r9,r7[-6]
80023050:	b9 69       	lsl	r9,0x18
80023052:	12 4a       	or	r10,r9
80023054:	ef 39 ff f9 	ld.ub	r9,r7[-7]
80023058:	b5 69       	lsl	r9,0x14
8002305a:	12 4a       	or	r10,r9
8002305c:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80023060:	b1 69       	lsl	r9,0x10
80023062:	12 4a       	or	r10,r9
80023064:	ef 39 ff f7 	ld.ub	r9,r7[-9]
80023068:	ad 69       	lsl	r9,0xc
8002306a:	12 4a       	or	r10,r9
8002306c:	ef 39 ff f6 	ld.ub	r9,r7[-10]
80023070:	a9 69       	lsl	r9,0x8
80023072:	12 4a       	or	r10,r9
80023074:	ef 39 ff f5 	ld.ub	r9,r7[-11]
80023078:	a5 69       	lsl	r9,0x4
8002307a:	12 4a       	or	r10,r9
8002307c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80023080:	f5 e9 10 09 	or	r9,r10,r9
80023084:	91 89       	st.w	r8[0x20],r9

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
80023086:	30 08       	mov	r8,0
80023088:	ef 68 ff ff 	st.b	r7[-1],r8
8002308c:	c2 68       	rjmp	800230d8 <adcifa_configure_sequencer+0x344>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
8002308e:	ef 3a ff ff 	ld.ub	r10,r7[-1]
80023092:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80023096:	12 98       	mov	r8,r9
80023098:	a1 78       	lsl	r8,0x1
8002309a:	12 08       	add	r8,r9
8002309c:	ee f9 ff d4 	ld.w	r9,r7[-44]
800230a0:	f2 08 00 08 	add	r8,r9,r8
800230a4:	11 88       	ld.ub	r8,r8[0x0]
800230a6:	ee 0a 00 09 	add	r9,r7,r10
800230aa:	f3 68 ff ec 	st.b	r9[-20],r8
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
800230ae:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800230b2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230b6:	12 98       	mov	r8,r9
800230b8:	a1 78       	lsl	r8,0x1
800230ba:	12 08       	add	r8,r9
800230bc:	ee f9 ff d4 	ld.w	r9,r7[-44]
800230c0:	f2 08 00 08 	add	r8,r9,r8
800230c4:	11 98       	ld.ub	r8,r8[0x1]
800230c6:	ee 0a 00 09 	add	r9,r7,r10
800230ca:	f3 68 ff e4 	st.b	r9[-28],r8
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++)
			g[i] = p_adcifa_sequencer_conversion_opt[i].gain;
		ADCIFA_configure_sh1gain(g[7], g[6], g[5], g[4], g[3], g[2], g[1], g[0]);

		// Configure Mux for Sequencer 1
		for (i = 0 ; i < p_adcifa_sequencer_opt->convnb; i++) {
800230ce:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800230d2:	2f f8       	sub	r8,-1
800230d4:	ef 68 ff ff 	st.b	r7[-1],r8
800230d8:	ee f8 ff d8 	ld.w	r8,r7[-40]
800230dc:	11 88       	ld.ub	r8,r8[0x0]
800230de:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800230e2:	f0 09 18 00 	cp.b	r9,r8
800230e6:	cd 43       	brcs	8002308e <adcifa_configure_sequencer+0x2fa>
			mp[i] = p_adcifa_sequencer_conversion_opt[i].channel_p;
			mn[i] = p_adcifa_sequencer_conversion_opt[i].channel_n;
		}
		ADCIFA_configure_muxsel1p(mp[7], mp[6], mp[5], mp[4], mp[3], mp[2], mp[1], mp[0]);
800230e8:	fc 78 24 00 	mov	r8,-187392
800230ec:	ef 39 ff f3 	ld.ub	r9,r7[-13]
800230f0:	f2 0a 15 18 	lsl	r10,r9,0x18
800230f4:	ef 39 ff f2 	ld.ub	r9,r7[-14]
800230f8:	b1 69       	lsl	r9,0x10
800230fa:	12 4a       	or	r10,r9
800230fc:	ef 39 ff f1 	ld.ub	r9,r7[-15]
80023100:	a9 69       	lsl	r9,0x8
80023102:	12 4a       	or	r10,r9
80023104:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80023108:	f5 e9 10 09 	or	r9,r10,r9
8002310c:	91 c9       	st.w	r8[0x30],r9
8002310e:	fc 78 24 00 	mov	r8,-187392
80023112:	ef 39 ff ef 	ld.ub	r9,r7[-17]
80023116:	f2 0a 15 18 	lsl	r10,r9,0x18
8002311a:	ef 39 ff ee 	ld.ub	r9,r7[-18]
8002311e:	b1 69       	lsl	r9,0x10
80023120:	12 4a       	or	r10,r9
80023122:	ef 39 ff ed 	ld.ub	r9,r7[-19]
80023126:	a9 69       	lsl	r9,0x8
80023128:	12 4a       	or	r10,r9
8002312a:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002312e:	f5 e9 10 09 	or	r9,r10,r9
80023132:	91 a9       	st.w	r8[0x28],r9
		ADCIFA_configure_muxsel1n(mn[7], mn[6], mn[5], mn[4], mn[3], mn[2], mn[1], mn[0]);
80023134:	fc 78 24 00 	mov	r8,-187392
80023138:	ef 39 ff eb 	ld.ub	r9,r7[-21]
8002313c:	f2 0a 15 18 	lsl	r10,r9,0x18
80023140:	ef 39 ff ea 	ld.ub	r9,r7[-22]
80023144:	b1 69       	lsl	r9,0x10
80023146:	12 4a       	or	r10,r9
80023148:	ef 39 ff e9 	ld.ub	r9,r7[-23]
8002314c:	a9 69       	lsl	r9,0x8
8002314e:	12 4a       	or	r10,r9
80023150:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80023154:	f5 e9 10 09 	or	r9,r10,r9
80023158:	f1 49 00 40 	st.w	r8[64],r9
8002315c:	fc 78 24 00 	mov	r8,-187392
80023160:	ef 39 ff e7 	ld.ub	r9,r7[-25]
80023164:	f2 0a 15 18 	lsl	r10,r9,0x18
80023168:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002316c:	b1 69       	lsl	r9,0x10
8002316e:	12 4a       	or	r10,r9
80023170:	ef 39 ff e5 	ld.ub	r9,r7[-27]
80023174:	a9 69       	lsl	r9,0x8
80023176:	12 4a       	or	r10,r9
80023178:	ef 39 ff e4 	ld.ub	r9,r7[-28]
8002317c:	f5 e9 10 09 	or	r9,r10,r9
80023180:	91 e9       	st.w	r8[0x38],r9
		break;
	default:
		break;
	}
	return ADCIFA_CONFIGURATION_ACCEPTED;
80023182:	30 18       	mov	r8,1
}
80023184:	10 9c       	mov	r12,r8
80023186:	2f 5d       	sub	sp,-44
80023188:	e3 cd 80 80 	ldm	sp++,r7,pc

8002318c <adcifa_configure_window_monitor>:

void adcifa_configure_window_monitor( volatile avr32_adcifa_t * adcifa,
                                      U8 sequencer,
                                      adcifa_window_monitor_opt_t * adc_window_monitor_opt )
{
8002318c:	eb cd 40 80 	pushm	r7,lr
80023190:	1a 97       	mov	r7,sp
80023192:	20 4d       	sub	sp,16
80023194:	ef 4c ff f8 	st.w	r7[-8],r12
80023198:	16 98       	mov	r8,r11
8002319a:	ef 4a ff f0 	st.w	r7[-16],r10
8002319e:	ef 68 ff f4 	st.b	r7[-12],r8
	switch (sequencer) {
800231a2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800231a6:	58 08       	cp.w	r8,0
800231a8:	c0 40       	breq	800231b0 <adcifa_configure_window_monitor+0x24>
800231aa:	58 18       	cp.w	r8,1
800231ac:	c3 d0       	breq	80023226 <adcifa_configure_window_monitor+0x9a>
800231ae:	c7 68       	rjmp	8002329a <adcifa_configure_window_monitor+0x10e>
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
800231b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231b4:	71 e8       	ld.w	r8,r8[0x78]
800231b6:	e2 18 04 00 	andl	r8,0x400,COH
800231ba:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
800231be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800231c2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231c6:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800231ca:	ee f8 ff f0 	ld.w	r8,r7[-16]
800231ce:	11 98       	ld.ub	r8,r8[0x1]
800231d0:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
800231d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800231d8:	90 28       	ld.sh	r8,r8[0x4]
800231da:	5c 78       	castu.h	r8
800231dc:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
800231de:	10 49       	or	r9,r8
800231e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800231e4:	90 18       	ld.sh	r8,r8[0x2]
800231e6:	5c 78       	castu.h	r8
	int temp;
	case 0:
		// Configure sequencer 0
		temp = adcifa->imr & AVR32_ADCIFA_WM0_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg0 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG0_SRC_OFFSET)
800231e8:	f3 e8 10 08 	or	r8,r9,r8
800231ec:	10 99       	mov	r9,r8
800231ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231f2:	f1 49 00 58 	st.w	r8[88],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG0_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG0_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM0_MASK;
800231f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800231fa:	e0 69 04 00 	mov	r9,1024
800231fe:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg0 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG0_WM_OFFSET);
80023200:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023204:	71 69       	ld.w	r9,r8[0x58]
80023206:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002320a:	11 88       	ld.ub	r8,r8[0x0]
8002320c:	b9 68       	lsl	r8,0x18
8002320e:	10 49       	or	r9,r8
80023210:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023214:	f1 49 00 58 	st.w	r8[88],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
80023218:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002321c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023220:	f1 49 00 70 	st.w	r8[112],r9
		break;
80023224:	c3 b8       	rjmp	8002329a <adcifa_configure_window_monitor+0x10e>
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
80023226:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002322a:	71 e8       	ld.w	r8,r8[0x78]
8002322c:	e2 18 08 00 	andl	r8,0x800,COH
80023230:	ef 48 ff fc 	st.w	r7[-4],r8
		adcifa->idr = temp;         // disable interrupt if it was enabled
80023234:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023238:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002323c:	f1 49 00 74 	st.w	r8[116],r9
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
80023240:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023244:	11 98       	ld.ub	r8,r8[0x1]
80023246:	f0 09 15 1b 	lsl	r9,r8,0x1b
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
8002324a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002324e:	90 28       	ld.sh	r8,r8[0x4]
80023250:	5c 78       	castu.h	r8
80023252:	ad 68       	lsl	r8,0xc
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
80023254:	10 49       	or	r9,r8
80023256:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002325a:	90 18       	ld.sh	r8,r8[0x2]
8002325c:	5c 78       	castu.h	r8
		break;
	case 1:
		// Configure sequencer 1
		temp = adcifa->imr & AVR32_ADCIFA_WM1_MASK;
		adcifa->idr = temp;         // disable interrupt if it was enabled
		adcifa->wcfg1 = (adc_window_monitor_opt->source_index << AVR32_ADCIFA_WCFG1_SRC_OFFSET)
8002325e:	f3 e8 10 08 	or	r8,r9,r8
80023262:	10 99       	mov	r9,r8
80023264:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023268:	f1 49 00 5c 	st.w	r8[92],r9
		              | (adc_window_monitor_opt->high_threshold << AVR32_ADCIFA_WCFG1_HT_OFFSET)
		              | (adc_window_monitor_opt->low_threshold << AVR32_ADCIFA_WCFG1_LT_OFFSET);
		// Clear any pending interrupt before setting new mode
		adcifa->scr = AVR32_ADCIFA_WM1_MASK;
8002326c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023270:	e0 69 08 00 	mov	r9,2048
80023274:	91 39       	st.w	r8[0xc],r9
		adcifa->wcfg1 |= (adc_window_monitor_opt->mode << AVR32_ADCIFA_WCFG1_WM_OFFSET);
80023276:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002327a:	71 79       	ld.w	r9,r8[0x5c]
8002327c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023280:	11 88       	ld.ub	r8,r8[0x0]
80023282:	b9 68       	lsl	r8,0x18
80023284:	10 49       	or	r9,r8
80023286:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002328a:	f1 49 00 5c 	st.w	r8[92],r9
		adcifa->ier = temp;         // enable interrupt if it was enabled
8002328e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023296:	f1 49 00 70 	st.w	r8[112],r9
		break;
	default:
		break;
	}
}
8002329a:	2f cd       	sub	sp,-16
8002329c:	e3 cd 80 80 	ldm	sp++,r7,pc

800232a0 <adcifa_start_sequencer>:


void adcifa_start_sequencer(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800232a0:	eb cd 40 80 	pushm	r7,lr
800232a4:	1a 97       	mov	r7,sp
800232a6:	20 2d       	sub	sp,8
800232a8:	ef 4c ff fc 	st.w	r7[-4],r12
800232ac:	16 98       	mov	r8,r11
800232ae:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// Switch Sequencer
	switch (sequencer) {
800232b2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800232b6:	58 18       	cp.w	r8,1
800232b8:	c0 a0       	breq	800232cc <adcifa_start_sequencer+0x2c>
800232ba:	58 38       	cp.w	r8,3
800232bc:	c0 d0       	breq	800232d6 <adcifa_start_sequencer+0x36>
800232be:	58 08       	cp.w	r8,0
800232c0:	c0 f1       	brne	800232de <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK);
800232c2:	fc 78 24 00 	mov	r8,-187392
800232c6:	30 19       	mov	r9,1
800232c8:	91 09       	st.w	r8[0x0],r9
		break;
800232ca:	c0 a8       	rjmp	800232de <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC1_MASK);
800232cc:	fc 78 24 00 	mov	r8,-187392
800232d0:	30 29       	mov	r9,2
800232d2:	91 09       	st.w	r8[0x0],r9
		break;
800232d4:	c0 58       	rjmp	800232de <adcifa_start_sequencer+0x3e>
	case ADCIFA_SEQ0_SEQ1:
		ADCIFA_softsoc_sequencer(AVR32_ADCIFA_CR_SOC0_MASK | AVR32_ADCIFA_CR_SOC1_MASK);
800232d6:	fc 78 24 00 	mov	r8,-187392
800232da:	30 39       	mov	r9,3
800232dc:	91 09       	st.w	r8[0x0],r9
		break;
	default:
		break;
	}
}
800232de:	2f ed       	sub	sp,-8
800232e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800232e4 <adcifa_check_eoc>:


bool adcifa_check_eoc(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
800232e4:	eb cd 40 80 	pushm	r7,lr
800232e8:	1a 97       	mov	r7,sp
800232ea:	20 2d       	sub	sp,8
800232ec:	ef 4c ff fc 	st.w	r7[-4],r12
800232f0:	16 98       	mov	r8,r11
800232f2:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOC bit for channel
	switch (sequencer) {
800232f6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800232fa:	58 08       	cp.w	r8,0
800232fc:	c0 40       	breq	80023304 <adcifa_check_eoc+0x20>
800232fe:	58 18       	cp.w	r8,1
80023300:	c0 a0       	breq	80023314 <adcifa_check_eoc+0x30>
80023302:	c1 18       	rjmp	80023324 <adcifa_check_eoc+0x40>
	case 0:
		return ((ADCIFA_is_eoc_sequencer_0()) ? true : false);
80023304:	fc 78 24 00 	mov	r8,-187392
80023308:	70 28       	ld.w	r8,r8[0x8]
8002330a:	e2 18 00 02 	andl	r8,0x2,COH
8002330e:	5f 18       	srne	r8
80023310:	5c 58       	castu.b	r8
80023312:	c0 a8       	rjmp	80023326 <adcifa_check_eoc+0x42>
	case 1:
		return ((ADCIFA_is_eoc_sequencer_1()) ? true : false);
80023314:	fc 78 24 00 	mov	r8,-187392
80023318:	70 28       	ld.w	r8,r8[0x8]
8002331a:	e2 18 00 20 	andl	r8,0x20,COH
8002331e:	5f 18       	srne	r8
80023320:	5c 58       	castu.b	r8
80023322:	c0 28       	rjmp	80023326 <adcifa_check_eoc+0x42>
	default:
		break;
	}
	return false;
80023324:	30 08       	mov	r8,0
}
80023326:	10 9c       	mov	r12,r8
80023328:	2f ed       	sub	sp,-8
8002332a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002332e <adcifa_check_eos>:

bool adcifa_check_eos(volatile avr32_adcifa_t * adcifa, U8 sequencer)
{
8002332e:	eb cd 40 80 	pushm	r7,lr
80023332:	1a 97       	mov	r7,sp
80023334:	20 2d       	sub	sp,8
80023336:	ef 4c ff fc 	st.w	r7[-4],r12
8002333a:	16 98       	mov	r8,r11
8002333c:	ef 68 ff f8 	st.b	r7[-8],r8
	// Sanity Check
	Assert( adcifa!=NULL );

	// get SR register : EOS bit for channel
	switch (sequencer) {
80023340:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023344:	58 08       	cp.w	r8,0
80023346:	c0 40       	breq	8002334e <adcifa_check_eos+0x20>
80023348:	58 18       	cp.w	r8,1
8002334a:	c0 90       	breq	8002335c <adcifa_check_eos+0x2e>
8002334c:	c1 08       	rjmp	8002336c <adcifa_check_eos+0x3e>
	case 0:
		return ((ADCIFA_is_eos_sequencer_0()) ? true : false);
8002334e:	fc 78 24 00 	mov	r8,-187392
80023352:	70 28       	ld.w	r8,r8[0x8]
80023354:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80023358:	5c 58       	castu.b	r8
8002335a:	c0 a8       	rjmp	8002336e <adcifa_check_eos+0x40>
	case 1:
		return ((ADCIFA_is_eos_sequencer_1()) ? true : false);
8002335c:	fc 78 24 00 	mov	r8,-187392
80023360:	70 28       	ld.w	r8,r8[0x8]
80023362:	e2 18 00 10 	andl	r8,0x10,COH
80023366:	5f 18       	srne	r8
80023368:	5c 58       	castu.b	r8
8002336a:	c0 28       	rjmp	8002336e <adcifa_check_eos+0x40>
	default:
		break;
	}
	return false;
8002336c:	30 08       	mov	r8,0
}
8002336e:	10 9c       	mov	r12,r8
80023370:	2f ed       	sub	sp,-8
80023372:	e3 cd 80 80 	ldm	sp++,r7,pc

80023376 <adcifa_get_values_from_sequencer>:

U8 adcifa_get_values_from_sequencer(volatile avr32_adcifa_t * adcifa,
                                    U8 sequencer,
                                    adcifa_sequencer_opt_t * p_adcifa_sequencer_opt,
                                    S16* adcifa_values)
{
80023376:	eb cd 40 c0 	pushm	r6-r7,lr
8002337a:	1a 97       	mov	r7,sp
8002337c:	20 5d       	sub	sp,20
8002337e:	4b 46       	lddpc	r6,8002344c <adcifa_get_values_from_sequencer+0xd6>
80023380:	1e 26       	rsub	r6,pc
80023382:	ef 4c ff f8 	st.w	r7[-8],r12
80023386:	16 98       	mov	r8,r11
80023388:	ef 4a ff f0 	st.w	r7[-16],r10
8002338c:	ef 49 ff ec 	st.w	r7[-20],r9
80023390:	ef 68 ff f4 	st.b	r7[-12],r8
	U8 i;
	// Sanity Check
	Assert( adcifa!=NULL );

	// wait for end of sequence
	if(adcifa_check_eos(adcifa, sequencer) != true)
80023394:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80023398:	10 9b       	mov	r11,r8
8002339a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002339e:	f0 16 01 3f 	mcall	r6[1276]
800233a2:	18 98       	mov	r8,r12
800233a4:	ec 18 00 01 	eorl	r8,0x1
800233a8:	5c 58       	castu.b	r8
800233aa:	c0 30       	breq	800233b0 <adcifa_get_values_from_sequencer+0x3a>
		return ADCIFA_STATUS_NOT_COMPLETED;
800233ac:	30 38       	mov	r8,3
800233ae:	c4 b8       	rjmp	80023444 <adcifa_get_values_from_sequencer+0xce>

	switch (sequencer) {
800233b0:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800233b4:	58 08       	cp.w	r8,0
800233b6:	c0 40       	breq	800233be <adcifa_get_values_from_sequencer+0x48>
800233b8:	58 18       	cp.w	r8,1
800233ba:	c2 30       	breq	80023400 <adcifa_get_values_from_sequencer+0x8a>
800233bc:	c4 38       	rjmp	80023442 <adcifa_get_values_from_sequencer+0xcc>
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800233be:	30 08       	mov	r8,0
800233c0:	ef 68 ff ff 	st.b	r7[-1],r8
800233c4:	c1 58       	rjmp	800233ee <adcifa_get_values_from_sequencer+0x78>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
800233c6:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233ca:	a1 78       	lsl	r8,0x1
800233cc:	ee f9 ff ec 	ld.w	r9,r7[-20]
800233d0:	10 09       	add	r9,r8
800233d2:	fc 78 24 00 	mov	r8,-187392
800233d6:	ef 3a ff ff 	ld.ub	r10,r7[-1]
800233da:	2d fa       	sub	r10,-33
800233dc:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
800233e0:	5c 88       	casts.h	r8
800233e2:	b2 08       	st.h	r9[0x0],r8
		return ADCIFA_STATUS_NOT_COMPLETED;

	switch (sequencer) {
	case 0:
		// Read values from Sequencer 0
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
800233e4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800233e8:	2f f8       	sub	r8,-1
800233ea:	ef 68 ff ff 	st.b	r7[-1],r8
800233ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
800233f2:	11 88       	ld.ub	r8,r8[0x0]
800233f4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800233f8:	f0 09 18 00 	cp.b	r9,r8
800233fc:	ce 53       	brcs	800233c6 <adcifa_get_values_from_sequencer+0x50>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
800233fe:	c2 28       	rjmp	80023442 <adcifa_get_values_from_sequencer+0xcc>
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023400:	30 08       	mov	r8,0
80023402:	ef 68 ff ff 	st.b	r7[-1],r8
80023406:	c1 68       	rjmp	80023432 <adcifa_get_values_from_sequencer+0xbc>
			adcifa_values[i] = ADCIFA_read_resx_sequencer_1(i);
80023408:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002340c:	a1 78       	lsl	r8,0x1
8002340e:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023412:	10 09       	add	r9,r8
80023414:	fc 78 24 00 	mov	r8,-187392
80023418:	ef 3a ff ff 	ld.ub	r10,r7[-1]
8002341c:	2f 8a       	sub	r10,-8
8002341e:	2d fa       	sub	r10,-33
80023420:	f0 0a 03 28 	ld.w	r8,r8[r10<<0x2]
80023424:	5c 88       	casts.h	r8
80023426:	b2 08       	st.h	r9[0x0],r8
			adcifa_values[i] = ADCIFA_read_resx_sequencer_0(i);
		}
		break;
	case 1:
		// Read values from Sequencer 1
		for (i = 0; i < p_adcifa_sequencer_opt->convnb; i++) {
80023428:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002342c:	2f f8       	sub	r8,-1
8002342e:	ef 68 ff ff 	st.b	r7[-1],r8
80023432:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023436:	11 88       	ld.ub	r8,r8[0x0]
80023438:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002343c:	f0 09 18 00 	cp.b	r9,r8
80023440:	ce 43       	brcs	80023408 <adcifa_get_values_from_sequencer+0x92>
		break;
	default:
		break;
	}

	return ADCIFA_STATUS_COMPLETED;
80023442:	30 28       	mov	r8,2
}
80023444:	10 9c       	mov	r12,r8
80023446:	2f bd       	sub	sp,-20
80023448:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002344c:	80 02       	ld.sh	r2,r0[0x0]
8002344e:	32 04       	mov	r4,32

80023450 <adcifa_start_itimer>:

void adcifa_start_itimer(volatile avr32_adcifa_t * adcifa,
                         uint32_t timer_count)
{
80023450:	eb cd 40 80 	pushm	r7,lr
80023454:	1a 97       	mov	r7,sp
80023456:	20 2d       	sub	sp,8
80023458:	ef 4c ff fc 	st.w	r7[-4],r12
8002345c:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->itimer = timer_count;
80023460:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023464:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023468:	f1 49 00 48 	st.w	r8[72],r9
	adcifa->cr = AVR32_ADCIFA_CR_TSTART_MASK;
8002346c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023470:	30 89       	mov	r9,8
80023472:	91 09       	st.w	r8[0x0],r9
}
80023474:	2f ed       	sub	sp,-8
80023476:	e3 cd 80 80 	ldm	sp++,r7,pc

8002347a <adcifa_stop_itimer>:

void adcifa_stop_itimer(volatile avr32_adcifa_t * adcifa)
{
8002347a:	eb cd 40 80 	pushm	r7,lr
8002347e:	1a 97       	mov	r7,sp
80023480:	20 1d       	sub	sp,4
80023482:	ef 4c ff fc 	st.w	r7[-4],r12
	adcifa->cr = AVR32_ADCIFA_CR_TSTOP_MASK;
80023486:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002348a:	30 49       	mov	r9,4
8002348c:	91 09       	st.w	r8[0x0],r9
}
8002348e:	2f fd       	sub	sp,-4
80023490:	e3 cd 80 80 	ldm	sp++,r7,pc

80023494 <adcifa_enable_interrupt>:

void adcifa_enable_interrupt(volatile avr32_adcifa_t * adcifa,
                             uint32_t interrupt_flags)
{
80023494:	eb cd 40 80 	pushm	r7,lr
80023498:	1a 97       	mov	r7,sp
8002349a:	20 2d       	sub	sp,8
8002349c:	ef 4c ff fc 	st.w	r7[-4],r12
800234a0:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->ier = interrupt_flags;   // Interrupt Enable Register
800234a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234a8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234ac:	f1 49 00 70 	st.w	r8[112],r9
}
800234b0:	2f ed       	sub	sp,-8
800234b2:	e3 cd 80 80 	ldm	sp++,r7,pc

800234b6 <adcifa_disable_interrupt>:

void adcifa_disable_interrupt(volatile avr32_adcifa_t * adcifa,
                              uint32_t interrupt_flags)
{
800234b6:	eb cd 40 80 	pushm	r7,lr
800234ba:	1a 97       	mov	r7,sp
800234bc:	20 2d       	sub	sp,8
800234be:	ef 4c ff fc 	st.w	r7[-4],r12
800234c2:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->idr = interrupt_flags;   // Interrupt Disable Register
800234c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234ca:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234ce:	f1 49 00 74 	st.w	r8[116],r9
}
800234d2:	2f ed       	sub	sp,-8
800234d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800234d8 <adcifa_clear_interrupt>:

void adcifa_clear_interrupt(volatile avr32_adcifa_t * adcifa,
                            uint32_t interrupt_flags)
{
800234d8:	eb cd 40 80 	pushm	r7,lr
800234dc:	1a 97       	mov	r7,sp
800234de:	20 2d       	sub	sp,8
800234e0:	ef 4c ff fc 	st.w	r7[-4],r12
800234e4:	ef 4b ff f8 	st.w	r7[-8],r11
	adcifa->scr = interrupt_flags;   // Status Clear Register
800234e8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800234ec:	ee f9 ff f8 	ld.w	r9,r7[-8]
800234f0:	91 39       	st.w	r8[0xc],r9
}
800234f2:	2f ed       	sub	sp,-8
800234f4:	e3 cd 80 80 	ldm	sp++,r7,pc

800234f8 <ast_is_busy>:
#include <avr32/io.h>
#include "compiler.h"
#include "ast.h"

static int ast_is_busy(volatile avr32_ast_t *ast)
{
800234f8:	eb cd 40 80 	pushm	r7,lr
800234fc:	1a 97       	mov	r7,sp
800234fe:	20 1d       	sub	sp,4
80023500:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_BUSY_MASK) != 0;
80023504:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023508:	70 28       	ld.w	r8,r8[0x8]
8002350a:	e6 18 01 00 	andh	r8,0x100,COH
8002350e:	5f 18       	srne	r8
}
80023510:	10 9c       	mov	r12,r8
80023512:	2f fd       	sub	sp,-4
80023514:	e3 cd 80 80 	ldm	sp++,r7,pc

80023518 <ast_is_clkbusy>:

static int ast_is_clkbusy(volatile avr32_ast_t *ast)
{
80023518:	eb cd 40 80 	pushm	r7,lr
8002351c:	1a 97       	mov	r7,sp
8002351e:	20 1d       	sub	sp,4
80023520:	ef 4c ff fc 	st.w	r7[-4],r12
	return (ast->sr & AVR32_AST_SR_CLKBUSY_MASK) != 0;
80023524:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023528:	70 28       	ld.w	r8,r8[0x8]
8002352a:	e6 18 10 00 	andh	r8,0x1000,COH
8002352e:	5f 18       	srne	r8
}
80023530:	10 9c       	mov	r12,r8
80023532:	2f fd       	sub	sp,-4
80023534:	e3 cd 80 80 	ldm	sp++,r7,pc

80023538 <ast_init_calendar>:

int ast_init_calendar(volatile avr32_ast_t *ast,
                      unsigned char osc_type,
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{
80023538:	eb cd 40 c0 	pushm	r6-r7,lr
8002353c:	1a 97       	mov	r7,sp
8002353e:	20 4d       	sub	sp,16
80023540:	49 a6       	lddpc	r6,800235a8 <ast_init_calendar+0x70>
80023542:	1e 26       	rsub	r6,pc
80023544:	ef 4c ff fc 	st.w	r7[-4],r12
80023548:	14 98       	mov	r8,r10
8002354a:	ef 49 ff f0 	st.w	r7[-16],r9
8002354e:	16 99       	mov	r9,r11
80023550:	ef 69 ff f8 	st.b	r7[-8],r9
80023554:	ef 68 ff f4 	st.b	r7[-12],r8

	while (ast_is_clkbusy(ast));
80023558:	ee fc ff fc 	ld.w	r12,r7[-4]
8002355c:	cd ef       	rcall	80023518 <ast_is_clkbusy>
8002355e:	18 98       	mov	r8,r12
80023560:	58 08       	cp.w	r8,0
80023562:	cf b1       	brne	80023558 <ast_init_calendar+0x20>
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
80023564:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80023568:	a9 68       	lsl	r8,0x8
                      unsigned char psel,
                      ast_calendar_t ast_calendar)
{

	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
8002356a:	a1 a8       	sbr	r8,0x0
8002356c:	10 99       	mov	r9,r8
8002356e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023572:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
		psel << AVR32_AST_CR_PSEL_OFFSET ;
80023576:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002357a:	b1 68       	lsl	r8,0x10
	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_CALENDAR << AVR32_AST_CR_CAL_OFFSET |
8002357c:	a3 a8       	sbr	r8,0x2
8002357e:	10 99       	mov	r9,r8
80023580:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023584:	91 09       	st.w	r8[0x0],r9
		psel << AVR32_AST_CR_PSEL_OFFSET ;

	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023586:	ee fc ff fc 	ld.w	r12,r7[-4]
8002358a:	cb 7f       	rcall	800234f8 <ast_is_busy>
8002358c:	18 98       	mov	r8,r12
8002358e:	58 08       	cp.w	r8,0
80023590:	cf b1       	brne	80023586 <ast_init_calendar+0x4e>

	// Set the calendar
	ast_set_calendar_value(ast, ast_calendar);
80023592:	ee fb ff f0 	ld.w	r11,r7[-16]
80023596:	ee fc ff fc 	ld.w	r12,r7[-4]
8002359a:	f0 16 01 cc 	mcall	r6[1840]

	return 1;
8002359e:	30 18       	mov	r8,1
}
800235a0:	10 9c       	mov	r12,r8
800235a2:	2f cd       	sub	sp,-16
800235a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800235a8:	80 02       	ld.sh	r2,r0[0x0]
800235aa:	33 c6       	mov	r6,60

800235ac <ast_init_counter>:

int ast_init_counter(volatile avr32_ast_t *ast,
                     unsigned char osc_type,
                     unsigned char psel,
                     unsigned long ast_counter)
{
800235ac:	eb cd 40 c0 	pushm	r6-r7,lr
800235b0:	1a 97       	mov	r7,sp
800235b2:	20 4d       	sub	sp,16
800235b4:	49 46       	lddpc	r6,80023604 <ast_init_counter+0x58>
800235b6:	1e 26       	rsub	r6,pc
800235b8:	ef 4c ff fc 	st.w	r7[-4],r12
800235bc:	14 98       	mov	r8,r10
800235be:	ef 49 ff f0 	st.w	r7[-16],r9
800235c2:	16 99       	mov	r9,r11
800235c4:	ef 69 ff f8 	st.b	r7[-8],r9
800235c8:	ef 68 ff f4 	st.b	r7[-12],r8

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;
800235cc:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800235d0:	a9 68       	lsl	r8,0x8
                     unsigned char psel,
                     unsigned long ast_counter)
{

//	while (ast_is_clkbusy(ast));
	ast->clock = AVR32_AST_CLOCK_CEN_MASK |
800235d2:	a1 a8       	sbr	r8,0x0
800235d4:	10 99       	mov	r9,r8
800235d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800235da:	f1 49 00 40 	st.w	r8[64],r9
		osc_type << AVR32_AST_CLOCK_CSSEL_OFFSET;

	// Set the new AST configuration
	ast->cr =   AST_MODE_COUNTER << AVR32_AST_CR_CAL_OFFSET |
800235de:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800235e2:	b1 68       	lsl	r8,0x10
800235e4:	10 99       	mov	r9,r8
800235e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800235ea:	91 09       	st.w	r8[0x0],r9

	// Wait until the ast CTRL register is up-to-date
//	while (ast_is_busy(ast));

	// Set the calendar
	ast_set_counter_value(ast, ast_counter);
800235ec:	ee fb ff f0 	ld.w	r11,r7[-16]
800235f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800235f4:	f0 16 02 20 	mcall	r6[2176]

	return 1;
800235f8:	30 18       	mov	r8,1
}
800235fa:	10 9c       	mov	r12,r8
800235fc:	2f cd       	sub	sp,-16
800235fe:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023602:	00 00       	add	r0,r0
80023604:	80 02       	ld.sh	r2,r0[0x0]
80023606:	34 3a       	mov	r10,67

80023608 <ast_enable>:


void ast_enable(volatile avr32_ast_t *ast)
{
80023608:	eb cd 40 c0 	pushm	r6-r7,lr
8002360c:	1a 97       	mov	r7,sp
8002360e:	20 1d       	sub	sp,4
80023610:	48 e6       	lddpc	r6,80023648 <ast_enable+0x40>
80023612:	1e 26       	rsub	r6,pc
80023614:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023618:	ee fc ff fc 	ld.w	r12,r7[-4]
8002361c:	c6 ef       	rcall	800234f8 <ast_is_busy>
8002361e:	18 98       	mov	r8,r12
80023620:	58 08       	cp.w	r8,0
80023622:	cf b1       	brne	80023618 <ast_enable+0x10>
	// Enable the RTC
	ast->cr |= AVR32_AST_CR_EN_MASK;
80023624:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023628:	70 08       	ld.w	r8,r8[0x0]
8002362a:	10 99       	mov	r9,r8
8002362c:	a1 a9       	sbr	r9,0x0
8002362e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023632:	91 09       	st.w	r8[0x0],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023634:	ee fc ff fc 	ld.w	r12,r7[-4]
80023638:	c6 0f       	rcall	800234f8 <ast_is_busy>
8002363a:	18 98       	mov	r8,r12
8002363c:	58 08       	cp.w	r8,0
8002363e:	cf b1       	brne	80023634 <ast_enable+0x2c>
}
80023640:	2f fd       	sub	sp,-4
80023642:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023646:	00 00       	add	r0,r0
80023648:	80 02       	ld.sh	r2,r0[0x0]
8002364a:	34 96       	mov	r6,73

8002364c <ast_set_calendar_value>:

void ast_set_calendar_value(volatile avr32_ast_t *ast,
                            ast_calendar_t ast_calendar)
{
8002364c:	eb cd 40 c0 	pushm	r6-r7,lr
80023650:	1a 97       	mov	r7,sp
80023652:	20 2d       	sub	sp,8
80023654:	48 e6       	lddpc	r6,8002368c <ast_set_calendar_value+0x40>
80023656:	1e 26       	rsub	r6,pc
80023658:	ef 4c ff fc 	st.w	r7[-4],r12
8002365c:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
80023660:	ee fc ff fc 	ld.w	r12,r7[-4]
80023664:	c4 af       	rcall	800234f8 <ast_is_busy>
80023666:	18 98       	mov	r8,r12
80023668:	58 08       	cp.w	r8,0
8002366a:	cf b1       	brne	80023660 <ast_set_calendar_value+0x14>
	// Set the new val value
	ast->calv = ast_calendar.field;
8002366c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023670:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023674:	f1 49 00 54 	st.w	r8[84],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023678:	ee fc ff fc 	ld.w	r12,r7[-4]
8002367c:	c3 ef       	rcall	800234f8 <ast_is_busy>
8002367e:	18 98       	mov	r8,r12
80023680:	58 08       	cp.w	r8,0
80023682:	cf b1       	brne	80023678 <ast_set_calendar_value+0x2c>
}
80023684:	2f ed       	sub	sp,-8
80023686:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002368a:	00 00       	add	r0,r0
8002368c:	80 02       	ld.sh	r2,r0[0x0]
8002368e:	34 da       	mov	r10,77

80023690 <ast_set_counter_value>:

void ast_set_counter_value(volatile avr32_ast_t *ast, unsigned long ast_counter)
{
80023690:	eb cd 40 c0 	pushm	r6-r7,lr
80023694:	1a 97       	mov	r7,sp
80023696:	20 2d       	sub	sp,8
80023698:	48 d6       	lddpc	r6,800236cc <ast_set_counter_value+0x3c>
8002369a:	1e 26       	rsub	r6,pc
8002369c:	ef 4c ff fc 	st.w	r7[-4],r12
800236a0:	ef 4b ff f8 	st.w	r7[-8],r11
	// Wait until we can write into the VAL register
	while (ast_is_busy(ast));
800236a4:	ee fc ff fc 	ld.w	r12,r7[-4]
800236a8:	c2 8f       	rcall	800234f8 <ast_is_busy>
800236aa:	18 98       	mov	r8,r12
800236ac:	58 08       	cp.w	r8,0
800236ae:	cf b1       	brne	800236a4 <ast_set_counter_value+0x14>
	// Set the new val value
	ast->cv = ast_counter;
800236b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800236b4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800236b8:	91 19       	st.w	r8[0x4],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800236ba:	ee fc ff fc 	ld.w	r12,r7[-4]
800236be:	c1 df       	rcall	800234f8 <ast_is_busy>
800236c0:	18 98       	mov	r8,r12
800236c2:	58 08       	cp.w	r8,0
800236c4:	cf b1       	brne	800236ba <ast_set_counter_value+0x2a>
}
800236c6:	2f ed       	sub	sp,-8
800236c8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800236cc:	80 02       	ld.sh	r2,r0[0x0]
800236ce:	35 1e       	mov	lr,81

800236d0 <ast_get_calendar_value>:


ast_calendar_t ast_get_calendar_value(volatile avr32_ast_t *ast)
{
800236d0:	eb cd 40 80 	pushm	r7,lr
800236d4:	1a 97       	mov	r7,sp
800236d6:	20 2d       	sub	sp,8
800236d8:	ef 4c ff f8 	st.w	r7[-8],r12
	ast_calendar_t ast_calendar;
	ast_calendar.field = ast->calv;
800236dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800236e0:	71 58       	ld.w	r8,r8[0x54]
800236e2:	ef 48 ff fc 	st.w	r7[-4],r8
	return ast_calendar;
800236e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
800236ea:	10 9c       	mov	r12,r8
800236ec:	2f ed       	sub	sp,-8
800236ee:	e3 cd 80 80 	ldm	sp++,r7,pc

800236f2 <ast_get_counter_value>:


unsigned long ast_get_counter_value(volatile avr32_ast_t *ast)
{
800236f2:	eb cd 40 80 	pushm	r7,lr
800236f6:	1a 97       	mov	r7,sp
800236f8:	20 1d       	sub	sp,4
800236fa:	ef 4c ff fc 	st.w	r7[-4],r12
	return ast->cv;
800236fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023702:	70 18       	ld.w	r8,r8[0x4]
}
80023704:	10 9c       	mov	r12,r8
80023706:	2f fd       	sub	sp,-4
80023708:	e3 cd 80 80 	ldm	sp++,r7,pc

8002370c <ast_set_alarm0_value>:

void ast_set_alarm0_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
8002370c:	eb cd 40 80 	pushm	r7,lr
80023710:	1a 97       	mov	r7,sp
80023712:	20 2d       	sub	sp,8
80023714:	ef 4c ff fc 	st.w	r7[-4],r12
80023718:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar0 = alarm_value;
8002371c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023720:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023724:	91 89       	st.w	r8[0x20],r9
}
80023726:	2f ed       	sub	sp,-8
80023728:	e3 cd 80 80 	ldm	sp++,r7,pc

8002372c <ast_set_alarm1_value>:


void ast_set_alarm1_value(volatile avr32_ast_t *ast, U32 alarm_value)
{
8002372c:	eb cd 40 80 	pushm	r7,lr
80023730:	1a 97       	mov	r7,sp
80023732:	20 2d       	sub	sp,8
80023734:	ef 4c ff fc 	st.w	r7[-4],r12
80023738:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->ar1 = alarm_value;
8002373c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023740:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023744:	91 99       	st.w	r8[0x24],r9
}
80023746:	2f ed       	sub	sp,-8
80023748:	e3 cd 80 80 	ldm	sp++,r7,pc

8002374c <ast_enable_alarm0>:


void ast_enable_alarm0(volatile avr32_ast_t *ast)
{
8002374c:	eb cd 40 c0 	pushm	r6-r7,lr
80023750:	1a 97       	mov	r7,sp
80023752:	20 1d       	sub	sp,4
80023754:	48 e6       	lddpc	r6,8002378c <ast_enable_alarm0+0x40>
80023756:	1e 26       	rsub	r6,pc
80023758:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
8002375c:	ee fc ff fc 	ld.w	r12,r7[-4]
80023760:	cc ce       	rcall	800234f8 <ast_is_busy>
80023762:	18 98       	mov	r8,r12
80023764:	58 08       	cp.w	r8,0
80023766:	cf b1       	brne	8002375c <ast_enable_alarm0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM0_MASK;
80023768:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002376c:	71 28       	ld.w	r8,r8[0x48]
8002376e:	10 99       	mov	r9,r8
80023770:	a9 a9       	sbr	r9,0x8
80023772:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023776:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
8002377a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002377e:	cb de       	rcall	800234f8 <ast_is_busy>
80023780:	18 98       	mov	r8,r12
80023782:	58 08       	cp.w	r8,0
80023784:	cf b1       	brne	8002377a <ast_enable_alarm0+0x2e>
}
80023786:	2f fd       	sub	sp,-4
80023788:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002378c:	80 02       	ld.sh	r2,r0[0x0]
8002378e:	35 da       	mov	r10,93

80023790 <ast_disable_alarm0>:


void ast_disable_alarm0(volatile avr32_ast_t *ast)
{
80023790:	eb cd 40 c0 	pushm	r6-r7,lr
80023794:	1a 97       	mov	r7,sp
80023796:	20 1d       	sub	sp,4
80023798:	48 e6       	lddpc	r6,800237d0 <ast_disable_alarm0+0x40>
8002379a:	1e 26       	rsub	r6,pc
8002379c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800237a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800237a4:	ca ae       	rcall	800234f8 <ast_is_busy>
800237a6:	18 98       	mov	r8,r12
800237a8:	58 08       	cp.w	r8,0
800237aa:	cf b1       	brne	800237a0 <ast_disable_alarm0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM0_MASK;
800237ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237b0:	71 38       	ld.w	r8,r8[0x4c]
800237b2:	10 99       	mov	r9,r8
800237b4:	a9 a9       	sbr	r9,0x8
800237b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237ba:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800237be:	ee fc ff fc 	ld.w	r12,r7[-4]
800237c2:	c9 be       	rcall	800234f8 <ast_is_busy>
800237c4:	18 98       	mov	r8,r12
800237c6:	58 08       	cp.w	r8,0
800237c8:	cf b1       	brne	800237be <ast_disable_alarm0+0x2e>
}
800237ca:	2f fd       	sub	sp,-4
800237cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800237d0:	80 02       	ld.sh	r2,r0[0x0]
800237d2:	36 1e       	mov	lr,97

800237d4 <ast_enable_alarm1>:


void ast_enable_alarm1(volatile avr32_ast_t *ast)
{
800237d4:	eb cd 40 c0 	pushm	r6-r7,lr
800237d8:	1a 97       	mov	r7,sp
800237da:	20 1d       	sub	sp,4
800237dc:	48 e6       	lddpc	r6,80023814 <ast_enable_alarm1+0x40>
800237de:	1e 26       	rsub	r6,pc
800237e0:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800237e4:	ee fc ff fc 	ld.w	r12,r7[-4]
800237e8:	c8 8e       	rcall	800234f8 <ast_is_busy>
800237ea:	18 98       	mov	r8,r12
800237ec:	58 08       	cp.w	r8,0
800237ee:	cf b1       	brne	800237e4 <ast_enable_alarm1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_ALARM1_MASK;
800237f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237f4:	71 28       	ld.w	r8,r8[0x48]
800237f6:	10 99       	mov	r9,r8
800237f8:	a9 b9       	sbr	r9,0x9
800237fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800237fe:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023802:	ee fc ff fc 	ld.w	r12,r7[-4]
80023806:	c7 9e       	rcall	800234f8 <ast_is_busy>
80023808:	18 98       	mov	r8,r12
8002380a:	58 08       	cp.w	r8,0
8002380c:	cf b1       	brne	80023802 <ast_enable_alarm1+0x2e>
}
8002380e:	2f fd       	sub	sp,-4
80023810:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023814:	80 02       	ld.sh	r2,r0[0x0]
80023816:	36 62       	mov	r2,102

80023818 <ast_disable_alarm1>:


void ast_disable_alarm1(volatile avr32_ast_t *ast)
{
80023818:	eb cd 40 c0 	pushm	r6-r7,lr
8002381c:	1a 97       	mov	r7,sp
8002381e:	20 1d       	sub	sp,4
80023820:	48 e6       	lddpc	r6,80023858 <ast_disable_alarm1+0x40>
80023822:	1e 26       	rsub	r6,pc
80023824:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023828:	ee fc ff fc 	ld.w	r12,r7[-4]
8002382c:	c6 6e       	rcall	800234f8 <ast_is_busy>
8002382e:	18 98       	mov	r8,r12
80023830:	58 08       	cp.w	r8,0
80023832:	cf b1       	brne	80023828 <ast_disable_alarm1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_ALARM1_MASK;
80023834:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023838:	71 38       	ld.w	r8,r8[0x4c]
8002383a:	10 99       	mov	r9,r8
8002383c:	a9 b9       	sbr	r9,0x9
8002383e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023842:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023846:	ee fc ff fc 	ld.w	r12,r7[-4]
8002384a:	c5 7e       	rcall	800234f8 <ast_is_busy>
8002384c:	18 98       	mov	r8,r12
8002384e:	58 08       	cp.w	r8,0
80023850:	cf b1       	brne	80023846 <ast_disable_alarm1+0x2e>
}
80023852:	2f fd       	sub	sp,-4
80023854:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023858:	80 02       	ld.sh	r2,r0[0x0]
8002385a:	36 a6       	mov	r6,106

8002385c <ast_set_periodic0_value>:


void ast_set_periodic0_value(volatile avr32_ast_t *ast, avr32_ast_pir0_t pir)
{
8002385c:	eb cd 40 80 	pushm	r7,lr
80023860:	1a 97       	mov	r7,sp
80023862:	20 2d       	sub	sp,8
80023864:	ef 4c ff fc 	st.w	r7[-4],r12
80023868:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR0 = pir;
8002386c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023870:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023874:	91 c9       	st.w	r8[0x30],r9
}
80023876:	2f ed       	sub	sp,-8
80023878:	e3 cd 80 80 	ldm	sp++,r7,pc

8002387c <ast_set_periodic1_value>:


void ast_set_periodic1_value(volatile avr32_ast_t *ast, avr32_ast_pir1_t pir)
{
8002387c:	eb cd 40 80 	pushm	r7,lr
80023880:	1a 97       	mov	r7,sp
80023882:	20 2d       	sub	sp,8
80023884:	ef 4c ff fc 	st.w	r7[-4],r12
80023888:	ef 4b ff f8 	st.w	r7[-8],r11
	// Set the new val value
	ast->PIR1 = pir;
8002388c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023890:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023894:	91 d9       	st.w	r8[0x34],r9
}
80023896:	2f ed       	sub	sp,-8
80023898:	e3 cd 80 80 	ldm	sp++,r7,pc

8002389c <ast_enable_periodic0>:


void ast_enable_periodic0(volatile avr32_ast_t *ast)
{
8002389c:	eb cd 40 c0 	pushm	r6-r7,lr
800238a0:	1a 97       	mov	r7,sp
800238a2:	20 1d       	sub	sp,4
800238a4:	48 e6       	lddpc	r6,800238dc <ast_enable_periodic0+0x40>
800238a6:	1e 26       	rsub	r6,pc
800238a8:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800238ac:	ee fc ff fc 	ld.w	r12,r7[-4]
800238b0:	c2 4e       	rcall	800234f8 <ast_is_busy>
800238b2:	18 98       	mov	r8,r12
800238b4:	58 08       	cp.w	r8,0
800238b6:	cf b1       	brne	800238ac <ast_enable_periodic0+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER0_MASK;
800238b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238bc:	71 28       	ld.w	r8,r8[0x48]
800238be:	10 99       	mov	r9,r8
800238c0:	b1 a9       	sbr	r9,0x10
800238c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800238c6:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800238ca:	ee fc ff fc 	ld.w	r12,r7[-4]
800238ce:	c1 5e       	rcall	800234f8 <ast_is_busy>
800238d0:	18 98       	mov	r8,r12
800238d2:	58 08       	cp.w	r8,0
800238d4:	cf b1       	brne	800238ca <ast_enable_periodic0+0x2e>
}
800238d6:	2f fd       	sub	sp,-4
800238d8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800238dc:	80 02       	ld.sh	r2,r0[0x0]
800238de:	37 2a       	mov	r10,114

800238e0 <ast_disable_periodic0>:


void ast_disable_periodic0(volatile avr32_ast_t *ast)
{
800238e0:	eb cd 40 c0 	pushm	r6-r7,lr
800238e4:	1a 97       	mov	r7,sp
800238e6:	20 1d       	sub	sp,4
800238e8:	48 f6       	lddpc	r6,80023924 <ast_disable_periodic0+0x44>
800238ea:	1e 26       	rsub	r6,pc
800238ec:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
800238f0:	ee fc ff fc 	ld.w	r12,r7[-4]
800238f4:	c0 2e       	rcall	800234f8 <ast_is_busy>
800238f6:	18 98       	mov	r8,r12
800238f8:	58 08       	cp.w	r8,0
800238fa:	cf b1       	brne	800238f0 <ast_disable_periodic0+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
800238fc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023900:	71 38       	ld.w	r8,r8[0x4c]
80023902:	10 99       	mov	r9,r8
80023904:	b1 a9       	sbr	r9,0x10
80023906:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002390a:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
8002390e:	ee fc ff fc 	ld.w	r12,r7[-4]
80023912:	fe b0 fd f3 	rcall	800234f8 <ast_is_busy>
80023916:	18 98       	mov	r8,r12
80023918:	58 08       	cp.w	r8,0
8002391a:	cf a1       	brne	8002390e <ast_disable_periodic0+0x2e>
}
8002391c:	2f fd       	sub	sp,-4
8002391e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80023922:	00 00       	add	r0,r0
80023924:	80 02       	ld.sh	r2,r0[0x0]
80023926:	37 6e       	mov	lr,118

80023928 <ast_enable_periodic1>:


void ast_enable_periodic1(volatile avr32_ast_t *ast)
{
80023928:	eb cd 40 c0 	pushm	r6-r7,lr
8002392c:	1a 97       	mov	r7,sp
8002392e:	20 1d       	sub	sp,4
80023930:	48 f6       	lddpc	r6,8002396c <ast_enable_periodic1+0x44>
80023932:	1e 26       	rsub	r6,pc
80023934:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023938:	ee fc ff fc 	ld.w	r12,r7[-4]
8002393c:	fe b0 fd de 	rcall	800234f8 <ast_is_busy>
80023940:	18 98       	mov	r8,r12
80023942:	58 08       	cp.w	r8,0
80023944:	cf a1       	brne	80023938 <ast_enable_periodic1+0x10>
	// Enable the RTC
	ast->eve |= AVR32_AST_EVE_PER1_MASK;
80023946:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002394a:	71 28       	ld.w	r8,r8[0x48]
8002394c:	10 99       	mov	r9,r8
8002394e:	b1 b9       	sbr	r9,0x11
80023950:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023954:	f1 49 00 48 	st.w	r8[72],r9
	// Wait until write is done
	while (ast_is_busy(ast));
80023958:	ee fc ff fc 	ld.w	r12,r7[-4]
8002395c:	fe b0 fd ce 	rcall	800234f8 <ast_is_busy>
80023960:	18 98       	mov	r8,r12
80023962:	58 08       	cp.w	r8,0
80023964:	cf a1       	brne	80023958 <ast_enable_periodic1+0x30>
}
80023966:	2f fd       	sub	sp,-4
80023968:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002396c:	80 02       	ld.sh	r2,r0[0x0]
8002396e:	37 b6       	mov	r6,123

80023970 <ast_disable_periodic1>:


void ast_disable_periodic1(volatile avr32_ast_t *ast)
{
80023970:	eb cd 40 c0 	pushm	r6-r7,lr
80023974:	1a 97       	mov	r7,sp
80023976:	20 1d       	sub	sp,4
80023978:	48 f6       	lddpc	r6,800239b4 <ast_disable_periodic1+0x44>
8002397a:	1e 26       	rsub	r6,pc
8002397c:	ef 4c ff fc 	st.w	r7[-4],r12
	// Wait until the ast CTRL register is up-to-date
	while (ast_is_busy(ast));
80023980:	ee fc ff fc 	ld.w	r12,r7[-4]
80023984:	fe b0 fd ba 	rcall	800234f8 <ast_is_busy>
80023988:	18 98       	mov	r8,r12
8002398a:	58 08       	cp.w	r8,0
8002398c:	cf a1       	brne	80023980 <ast_disable_periodic1+0x10>
	// Enable the RTC
	ast->evd |= AVR32_AST_EVE_PER0_MASK;
8002398e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023992:	71 38       	ld.w	r8,r8[0x4c]
80023994:	10 99       	mov	r9,r8
80023996:	b1 a9       	sbr	r9,0x10
80023998:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002399c:	f1 49 00 4c 	st.w	r8[76],r9
	// Wait until write is done
	while (ast_is_busy(ast));
800239a0:	ee fc ff fc 	ld.w	r12,r7[-4]
800239a4:	fe b0 fd aa 	rcall	800234f8 <ast_is_busy>
800239a8:	18 98       	mov	r8,r12
800239aa:	58 08       	cp.w	r8,0
800239ac:	cf a1       	brne	800239a0 <ast_disable_periodic1+0x30>
}
800239ae:	2f fd       	sub	sp,-4
800239b0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800239b4:	80 02       	ld.sh	r2,r0[0x0]
800239b6:	37 fe       	mov	lr,127

800239b8 <dacifb_us_delay>:
 *
 * \param us Number of microseconds to wait.
 * \param hsb_mhz_up Rounded-up HSB frequency in MHz.
 */
static void dacifb_us_delay(us, hsb_mhz_up)
{
800239b8:	eb cd 40 cc 	pushm	r2-r3,r6-r7,lr
800239bc:	1a 97       	mov	r7,sp
800239be:	20 cd       	sub	sp,48
800239c0:	4d 46       	lddpc	r6,80023b10 <dacifb_us_delay+0x158>
800239c2:	1e 26       	rsub	r6,pc
800239c4:	ef 4c ff d4 	st.w	r7[-44],r12
800239c8:	ef 4b ff d0 	st.w	r7[-48],r11
	t_cpu_time timer;
    cpu_set_timeout( cpu_us_2_cy(us, hsb_mhz_up), &timer ); // timeout in 10 ms
800239cc:	ee fa ff d0 	ld.w	r10,r7[-48]
800239d0:	ee fb ff d4 	ld.w	r11,r7[-44]
800239d4:	ef 4b ff e8 	st.w	r7[-24],r11
800239d8:	ef 4a ff e4 	st.w	r7[-28],r10
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_us_2_cy(unsigned long us, unsigned long fcpu_hz)
{
  return ((unsigned long long)us * fcpu_hz + 999999) / 1000000;
800239dc:	ee f2 ff e8 	ld.w	r2,r7[-24]
800239e0:	30 03       	mov	r3,0
800239e2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800239e6:	30 09       	mov	r9,0
800239e8:	e6 08 02 4a 	mul	r10,r3,r8
800239ec:	f2 02 02 4b 	mul	r11,r9,r2
800239f0:	16 0a       	add	r10,r11
800239f2:	e4 08 06 48 	mulu.d	r8,r2,r8
800239f6:	12 0a       	add	r10,r9
800239f8:	14 99       	mov	r9,r10
800239fa:	ee 7a 42 3f 	mov	r10,999999
800239fe:	30 0b       	mov	r11,0
80023a00:	f0 0a 00 0a 	add	r10,r8,r10
80023a04:	f2 0b 00 4b 	adc	r11,r9,r11
80023a08:	ee 78 42 40 	mov	r8,1000000
80023a0c:	30 09       	mov	r9,0
80023a0e:	f0 16 01 08 	mcall	r6[1056]
80023a12:	14 98       	mov	r8,r10
80023a14:	16 99       	mov	r9,r11
80023a16:	ef 48 ff f0 	st.w	r7[-16],r8
80023a1a:	ee c8 00 28 	sub	r8,r7,40
80023a1e:	ef 48 ff ec 	st.w	r7[-20],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
80023a22:	e1 b8 00 42 	mfsr	r8,0x108
80023a26:	10 99       	mov	r9,r8
80023a28:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a2c:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
80023a2e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a32:	70 09       	ld.w	r9,r8[0x0]
80023a34:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023a38:	10 09       	add	r9,r8
80023a3a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023a3e:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
80023a40:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023a44:	30 08       	mov	r8,0
80023a46:	f3 68 00 08 	st.b	r9[8],r8
80023a4a:	ee c8 00 28 	sub	r8,r7,40
80023a4e:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
80023a52:	e1 b8 00 42 	mfsr	r8,0x108
80023a56:	ef 48 ff f8 	st.w	r7[-8],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
80023a5a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a5e:	f1 39 00 08 	ld.ub	r9,r8[8]
80023a62:	30 28       	mov	r8,2
80023a64:	f0 09 18 00 	cp.b	r9,r8
80023a68:	c0 31       	brne	80023a6e <dacifb_us_delay+0xb6>
    return false;
80023a6a:	30 08       	mov	r8,0
80023a6c:	c4 38       	rjmp	80023af2 <dacifb_us_delay+0x13a>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
80023a6e:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a72:	f1 39 00 08 	ld.ub	r9,r8[8]
80023a76:	30 18       	mov	r8,1
80023a78:	f0 09 18 00 	cp.b	r9,r8
80023a7c:	c0 31       	brne	80023a82 <dacifb_us_delay+0xca>
    return true;
80023a7e:	30 18       	mov	r8,1
80023a80:	c3 98       	rjmp	80023af2 <dacifb_us_delay+0x13a>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
80023a82:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a86:	70 09       	ld.w	r9,r8[0x0]
80023a88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a8c:	70 18       	ld.w	r8,r8[0x4]
80023a8e:	10 39       	cp.w	r9,r8
80023a90:	e0 88 00 1a 	brls	80023ac4 <dacifb_us_delay+0x10c>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
80023a94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023a98:	70 08       	ld.w	r8,r8[0x0]
80023a9a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023a9e:	10 39       	cp.w	r9,r8
80023aa0:	c1 02       	brcc	80023ac0 <dacifb_us_delay+0x108>
80023aa2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023aa6:	70 18       	ld.w	r8,r8[0x4]
80023aa8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023aac:	10 39       	cp.w	r9,r8
80023aae:	e0 88 00 09 	brls	80023ac0 <dacifb_us_delay+0x108>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023ab2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023ab6:	30 18       	mov	r8,1
80023ab8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023abc:	30 18       	mov	r8,1
80023abe:	c1 a8       	rjmp	80023af2 <dacifb_us_delay+0x13a>
    }
    return false;
80023ac0:	30 08       	mov	r8,0
80023ac2:	c1 88       	rjmp	80023af2 <dacifb_us_delay+0x13a>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
80023ac4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ac8:	70 08       	ld.w	r8,r8[0x0]
80023aca:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023ace:	10 39       	cp.w	r9,r8
80023ad0:	c0 93       	brcs	80023ae2 <dacifb_us_delay+0x12a>
80023ad2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ad6:	70 18       	ld.w	r8,r8[0x4]
80023ad8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80023adc:	10 39       	cp.w	r9,r8
80023ade:	e0 88 00 09 	brls	80023af0 <dacifb_us_delay+0x138>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
80023ae2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80023ae6:	30 18       	mov	r8,1
80023ae8:	f3 68 00 08 	st.b	r9[8],r8
      return true;
80023aec:	30 18       	mov	r8,1
80023aee:	c0 28       	rjmp	80023af2 <dacifb_us_delay+0x13a>
    }
    return false;
80023af0:	30 08       	mov	r8,0
    while(! cpu_is_timeout(&timer) );
80023af2:	58 08       	cp.w	r8,0
80023af4:	ca b0       	breq	80023a4a <dacifb_us_delay+0x92>
80023af6:	ee c8 00 28 	sub	r8,r7,40
80023afa:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_stop_timeout(t_cpu_time *cpu_time)
{
  cpu_time->timer_state = CPU_TIMER_STATE_STOPPED;
80023afe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80023b02:	30 28       	mov	r8,2
80023b04:	f3 68 00 08 	st.b	r9[8],r8
    cpu_stop_timeout(&timer);
}
80023b08:	2f 4d       	sub	sp,-48
80023b0a:	e3 cd 80 cc 	ldm	sp++,r2-r3,r6-r7,pc
80023b0e:	00 00       	add	r0,r0
80023b10:	80 02       	ld.sh	r2,r0[0x0]
80023b12:	38 46       	mov	r6,-124

80023b14 <dacifb_get_calibration_data>:
 */

void dacifb_get_calibration_data( volatile avr32_dacifb_t * dacifb,
                                dacifb_opt_t * p_dacifb_opt,
                                U8 instance)
{
80023b14:	eb cd 40 80 	pushm	r7,lr
80023b18:	1a 97       	mov	r7,sp
80023b1a:	20 5d       	sub	sp,20
80023b1c:	ef 4c ff f4 	st.w	r7[-12],r12
80023b20:	ef 4b ff f0 	st.w	r7[-16],r11
80023b24:	14 98       	mov	r8,r10
80023b26:	ef 68 ff ec 	st.b	r7[-20],r8
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data >> 16) & 0x000000FF);
    p_dacifb_opt->gain_calibration_value = ((*calibration_data >> 24) & 0x000000FF);    
  }
#else
  unsigned int* calibration_data_0 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FOURTH_WORD_ADDRESS;
80023b2a:	e0 68 02 0c 	mov	r8,524
80023b2e:	ea 18 80 80 	orh	r8,0x8080
80023b32:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int* calibration_data_1 = (unsigned int*)AVR32_FLASHC_CALIBRATION_FIVETH_WORD_ADDRESS;
80023b36:	e0 68 02 14 	mov	r8,532
80023b3a:	ea 18 80 80 	orh	r8,0x8080
80023b3e:	ef 48 ff fc 	st.w	r7[-4],r8
  if (instance == 0)
80023b42:	ef 39 ff ec 	ld.ub	r9,r7[-20]
80023b46:	30 08       	mov	r8,0
80023b48:	f0 09 18 00 	cp.b	r9,r8
80023b4c:	c1 71       	brne	80023b7a <dacifb_get_calibration_data+0x66>
  {
    p_dacifb_opt->offset_calibration_value = (*calibration_data_0 & 0x000001FF);
80023b4e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b52:	70 08       	ld.w	r8,r8[0x0]
80023b54:	5c 88       	casts.h	r8
80023b56:	5c 88       	casts.h	r8
80023b58:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023b5c:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023b60:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_0 >> 16) & 0x000000FF);  
80023b62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023b66:	70 08       	ld.w	r8,r8[0x0]
80023b68:	b1 88       	lsr	r8,0x10
80023b6a:	5c 88       	casts.h	r8
80023b6c:	5c 88       	casts.h	r8
80023b6e:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b72:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023b76:	b2 18       	st.h	r9[0x2],r8
80023b78:	c1 68       	rjmp	80023ba4 <dacifb_get_calibration_data+0x90>
  }
  else
  {
    p_dacifb_opt->offset_calibration_value = ((*calibration_data_1) & 0x000001FF);
80023b7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b7e:	70 08       	ld.w	r8,r8[0x0]
80023b80:	5c 88       	casts.h	r8
80023b82:	5c 88       	casts.h	r8
80023b84:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80023b88:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023b8c:	b2 28       	st.h	r9[0x4],r8
    p_dacifb_opt->gain_calibration_value = ((*calibration_data_1 >> 16) & 0x000000FF);    
80023b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023b92:	70 08       	ld.w	r8,r8[0x0]
80023b94:	b1 88       	lsr	r8,0x10
80023b96:	5c 88       	casts.h	r8
80023b98:	5c 88       	casts.h	r8
80023b9a:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80023b9e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80023ba2:	b2 18       	st.h	r9[0x2],r8
  }
#endif  
}
80023ba4:	2f bd       	sub	sp,-20
80023ba6:	e3 cd 80 80 	ldm	sp++,r7,pc

80023baa <dacifb_configure>:

U8 dacifb_configure(volatile avr32_dacifb_t * dacifb,
                           dacifb_opt_t * p_dacifb_opt,
                           U32 pb_hz)
{
80023baa:	eb cd 40 80 	pushm	r7,lr
80023bae:	1a 97       	mov	r7,sp
80023bb0:	20 5d       	sub	sp,20
80023bb2:	ef 4c ff f4 	st.w	r7[-12],r12
80023bb6:	ef 4b ff f0 	st.w	r7[-16],r11
80023bba:	ef 4a ff ec 	st.w	r7[-20],r10
  U32 prescaler = 0;
80023bbe:	30 08       	mov	r8,0
80023bc0:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 counter = 0;
80023bc4:	30 08       	mov	r8,0
80023bc6:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023bca:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bce:	90 28       	ld.sh	r8,r8[0x4]
80023bd0:	5c 78       	castu.h	r8
80023bd2:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
80023bd6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bda:	90 18       	ld.sh	r8,r8[0x2]
80023bdc:	5c 78       	castu.h	r8
80023bde:	b1 68       	lsl	r8,0x10
80023be0:	e6 18 01 ff 	andh	r8,0x1ff,COH
  U32 counter = 0;
  
  Assert( dacifb!=NULL );
  
  // Calibration of DAC
  dacifb->goc = (((p_dacifb_opt->offset_calibration_value<<AVR32_DACIFB_GOC_OCR_OFFSET)&AVR32_DACIFB_GOC_OCR_MASK)|
80023be4:	f3 e8 10 08 	or	r8,r9,r8
80023be8:	10 99       	mov	r9,r8
80023bea:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023bee:	91 d9       	st.w	r8[0x34],r9
                 ((p_dacifb_opt->gain_calibration_value<<AVR32_DACIFB_GOC_GCR_OFFSET)&AVR32_DACIFB_GOC_GCR_MASK));
  
  // Compute PRESC field
  prescaler = 31 - clz(pb_hz/p_dacifb_opt->prescaler_clock_hz);  
80023bf0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023bf4:	70 29       	ld.w	r9,r8[0x8]
80023bf6:	ee f8 ff ec 	ld.w	r8,r7[-20]
80023bfa:	f0 09 0d 08 	divu	r8,r8,r9
80023bfe:	f0 08 12 00 	clz	r8,r8
80023c02:	f0 08 11 1f 	rsub	r8,r8,31
80023c06:	ef 48 ff f8 	st.w	r7[-8],r8

  // Check PRESC value
  if (prescaler > (1<<AVR32_DACIFB_TCR_PRESC_SIZE))
80023c0a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c0e:	58 88       	cp.w	r8,8
80023c10:	e0 88 00 04 	brls	80023c18 <dacifb_configure+0x6e>
    return DACIFB_CONFIGURATION_REFUSED;
80023c14:	30 08       	mov	r8,0
80023c16:	c6 d8       	rjmp	80023cf0 <dacifb_configure+0x146>

  // Update prescaler_clock_hz value
  p_dacifb_opt->prescaler_clock_hz = pb_hz / (1<<prescaler);
80023c18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c1c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80023c20:	f2 08 0a 49 	lsr	r9,r9,r8
80023c24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c28:	91 29       	st.w	r8[0x8],r9
    
  // Compute CHI field  ( minimum value of 2us) 
  counter = (p_dacifb_opt->prescaler_clock_hz/DACIFB_CHI_MIN_VALUE);
80023c2a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c2e:	70 29       	ld.w	r9,r8[0x8]
80023c30:	e0 68 de 83 	mov	r8,56963
80023c34:	ea 18 43 1b 	orh	r8,0x431b
80023c38:	f2 08 06 48 	mulu.d	r8,r9,r8
80023c3c:	f2 08 16 11 	lsr	r8,r9,0x11
80023c40:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Check CHI value
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
80023c44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c48:	e0 48 00 80 	cp.w	r8,128
80023c4c:	e0 88 00 04 	brls	80023c54 <dacifb_configure+0xaa>
    return DACIFB_CONFIGURATION_REFUSED;
80023c50:	30 08       	mov	r8,0
80023c52:	c4 f8       	rjmp	80023cf0 <dacifb_configure+0x146>
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80023c54:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c58:	70 39       	ld.w	r9,r8[0xc]
80023c5a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023c5e:	b9 68       	lsl	r8,0x18
80023c60:	10 9a       	mov	r10,r8
80023c62:	e6 1a 07 00 	andh	r10,0x700,COH
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
80023c66:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023c6a:	b1 68       	lsl	r8,0x10
80023c6c:	e6 18 00 7f 	andh	r8,0x7f,COH
  if (counter > (1<<AVR32_DACIFB_TCR_CHI_SIZE))
    return DACIFB_CONFIGURATION_REFUSED;
  
  
  // Sampling Rate Frequency
  dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_PRESC_OFFSET)&AVR32_DACIFB_TCR_PRESC_MASK)|
80023c70:	f5 e8 10 08 	or	r8,r10,r8
80023c74:	10 49       	or	r9,r8
80023c76:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c7a:	91 39       	st.w	r8[0xc],r9
                  ((counter<<AVR32_DACIFB_TCR_CHI_OFFSET)&AVR32_DACIFB_TCR_CHI_MASK) );
  
  // Channel Selection
  dacifb->cfr |= ((p_dacifb_opt->channel_selection<<AVR32_DACIFB_CFR_CHC_OFFSET)&AVR32_DACIFB_CFR_CHC_MASK);
80023c7c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c80:	70 19       	ld.w	r9,r8[0x4]
80023c82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023c86:	11 98       	ld.ub	r8,r8[0x1]
80023c88:	b9 68       	lsl	r8,0x18
80023c8a:	e6 18 03 00 	andh	r8,0x300,COH
80023c8e:	10 49       	or	r9,r8
80023c90:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c94:	91 19       	st.w	r8[0x4],r9
    
  // Reference Selection
  dacifb->cfr |= ((p_dacifb_opt->reference <<AVR32_DACIFB_CFR_REF_OFFSET)&AVR32_DACIFB_CFR_REF_MASK);
80023c96:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023c9a:	70 19       	ld.w	r9,r8[0x4]
80023c9c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ca0:	11 88       	ld.ub	r8,r8[0x0]
80023ca2:	a9 68       	lsl	r8,0x8
80023ca4:	e2 18 01 00 	andl	r8,0x100,COH
80023ca8:	10 49       	or	r9,r8
80023caa:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cae:	91 19       	st.w	r8[0x4],r9

  // Dual Data
  dacifb->cfr |= ((p_dacifb_opt->dual<<AVR32_DACIFB_CFR_DDA_OFFSET)&AVR32_DACIFB_CFR_DDA_MASK);
80023cb0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cb4:	70 19       	ld.w	r9,r8[0x4]
80023cb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023cba:	11 f8       	ld.ub	r8,r8[0x7]
80023cbc:	a1 78       	lsl	r8,0x1
80023cbe:	e2 18 00 02 	andl	r8,0x2,COH
80023cc2:	10 49       	or	r9,r8
80023cc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cc8:	91 19       	st.w	r8[0x4],r9
  
  // Low Power Mode
  dacifb->cfr |= ((p_dacifb_opt->low_power <<AVR32_DACIFB_CFR_LP_OFFSET)&AVR32_DACIFB_CFR_LP_MASK);
80023cca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cce:	70 19       	ld.w	r9,r8[0x4]
80023cd0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023cd4:	11 e8       	ld.ub	r8,r8[0x6]
80023cd6:	10 49       	or	r9,r8
80023cd8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cdc:	91 19       	st.w	r8[0x4],r9
  
  // Enable DAC
  dacifb->cr |= AVR32_DACIFB_CR_EN_MASK;
80023cde:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023ce2:	70 08       	ld.w	r8,r8[0x0]
80023ce4:	10 99       	mov	r9,r8
80023ce6:	a1 a9       	sbr	r9,0x0
80023ce8:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023cec:	91 09       	st.w	r8[0x0],r9
  
  return DACIFB_CONFIGURATION_ACCEPTED;
80023cee:	30 18       	mov	r8,1
}
80023cf0:	10 9c       	mov	r12,r8
80023cf2:	2f bd       	sub	sp,-20
80023cf4:	e3 cd 80 80 	ldm	sp++,r7,pc

80023cf8 <dacifb_configure_channel>:

U8 dacifb_configure_channel( volatile avr32_dacifb_t * dacifb,
                             U8 channel,
                             dacifb_channel_opt_t * p_dacifb_channel_opt,
                             U32 prescaler_clock_hz)
{
80023cf8:	eb cd 40 80 	pushm	r7,lr
80023cfc:	1a 97       	mov	r7,sp
80023cfe:	20 7d       	sub	sp,28
80023d00:	ef 4c ff f0 	st.w	r7[-16],r12
80023d04:	16 98       	mov	r8,r11
80023d06:	ef 4a ff e8 	st.w	r7[-24],r10
80023d0a:	ef 49 ff e4 	st.w	r7[-28],r9
80023d0e:	ef 68 ff ec 	st.b	r7[-20],r8
  U32 prescaler_min = 0;
80023d12:	30 08       	mov	r8,0
80023d14:	ef 48 ff f4 	st.w	r7[-12],r8
  U32 prescaler_max = 0;
80023d18:	30 08       	mov	r8,0
80023d1a:	ef 48 ff f8 	st.w	r7[-8],r8
  U32 prescaler = 0;
80023d1e:	30 08       	mov	r8,0
80023d20:	ef 48 ff fc 	st.w	r7[-4],r8
  
  Assert( dacifb!=NULL );
  
  // Auto-refresh Mode
  if (p_dacifb_channel_opt->auto_refresh_mode == true)
80023d24:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023d28:	11 88       	ld.ub	r8,r8[0x0]
80023d2a:	58 08       	cp.w	r8,0
80023d2c:	c2 40       	breq	80023d74 <dacifb_configure_channel+0x7c>
  {
    switch(channel)
80023d2e:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023d32:	58 28       	cp.w	r8,2
80023d34:	c0 e0       	breq	80023d50 <dacifb_configure_channel+0x58>
80023d36:	58 38       	cp.w	r8,3
80023d38:	c1 50       	breq	80023d62 <dacifb_configure_channel+0x6a>
80023d3a:	58 18       	cp.w	r8,1
80023d3c:	c1 c1       	brne	80023d74 <dacifb_configure_channel+0x7c>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK);      
80023d3e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d42:	70 08       	ld.w	r8,r8[0x0]
80023d44:	10 99       	mov	r9,r8
80023d46:	bb a9       	sbr	r9,0x1a
80023d48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d4c:	91 09       	st.w	r8[0x0],r9
        break;
80023d4e:	c1 38       	rjmp	80023d74 <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->cr |= (AVR32_DACIFB_CR_ARBE_MASK );
80023d50:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d54:	70 08       	ld.w	r8,r8[0x0]
80023d56:	10 99       	mov	r9,r8
80023d58:	bb b9       	sbr	r9,0x1b
80023d5a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d5e:	91 09       	st.w	r8[0x0],r9
        break;  
80023d60:	c0 a8       	rjmp	80023d74 <dacifb_configure_channel+0x7c>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->cr |= (AVR32_DACIFB_CR_ARAE_MASK)|(AVR32_DACIFB_CR_ARBE_MASK );
80023d62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d66:	70 08       	ld.w	r8,r8[0x0]
80023d68:	10 99       	mov	r9,r8
80023d6a:	ea 19 0c 00 	orh	r9,0xc00
80023d6e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023d72:	91 09       	st.w	r8[0x0],r9
        break;  
    }
  }
  
  // Compute CHRA/CHRB fields  ( min value of 25us) 
  prescaler_min = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MIN_VALUE); 
80023d74:	ee f9 ff e4 	ld.w	r9,r7[-28]
80023d78:	e0 68 17 59 	mov	r8,5977
80023d7c:	ea 18 d1 b7 	orh	r8,0xd1b7
80023d80:	f2 08 06 48 	mulu.d	r8,r9,r8
80023d84:	f2 08 16 0f 	lsr	r8,r9,0xf
80023d88:	f0 08 12 00 	clz	r8,r8
80023d8c:	f0 08 11 1f 	rsub	r8,r8,31
80023d90:	ef 48 ff f4 	st.w	r7[-12],r8
  if (prescaler_min > 0) prescaler_min --;
80023d94:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023d98:	58 08       	cp.w	r8,0
80023d9a:	c0 60       	breq	80023da6 <dacifb_configure_channel+0xae>
80023d9c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023da0:	20 18       	sub	r8,1
80023da2:	ef 48 ff f4 	st.w	r7[-12],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
80023da6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023daa:	59 08       	cp.w	r8,16
80023dac:	e0 8b 00 07 	brhi	80023dba <dacifb_configure_channel+0xc2>
80023db0:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023db4:	59 08       	cp.w	r8,16
80023db6:	e0 88 00 05 	brls	80023dc0 <dacifb_configure_channel+0xc8>
       (prescaler_min > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;
80023dba:	30 08       	mov	r8,0
80023dbc:	e0 8f 01 87 	bral	800240ca <dacifb_configure_channel+0x3d2>
  
  // Compute CHRA/CHRB fields  ( max value of 35us) 
  prescaler_max = 31 - clz(prescaler_clock_hz/DACIFB_CHRx_MAX_VALUE); 
80023dc0:	ee f9 ff e4 	ld.w	r9,r7[-28]
80023dc4:	e0 68 27 59 	mov	r8,10073
80023dc8:	ea 18 fb a9 	orh	r8,0xfba9
80023dcc:	f2 08 06 48 	mulu.d	r8,r9,r8
80023dd0:	f2 08 16 0f 	lsr	r8,r9,0xf
80023dd4:	f0 08 12 00 	clz	r8,r8
80023dd8:	f0 08 11 1f 	rsub	r8,r8,31
80023ddc:	ef 48 ff f8 	st.w	r7[-8],r8
  if (prescaler_max > 0) prescaler_max --;
80023de0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023de4:	58 08       	cp.w	r8,0
80023de6:	c0 60       	breq	80023df2 <dacifb_configure_channel+0xfa>
80023de8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023dec:	20 18       	sub	r8,1
80023dee:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Check CHRA/CHRB fields
  if ( (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRA_SIZE)) ||
80023df2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023df6:	59 08       	cp.w	r8,16
80023df8:	e0 8b 00 07 	brhi	80023e06 <dacifb_configure_channel+0x10e>
80023dfc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e00:	59 08       	cp.w	r8,16
80023e02:	e0 88 00 04 	brls	80023e0a <dacifb_configure_channel+0x112>
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
80023e06:	30 08       	mov	r8,0
80023e08:	c6 19       	rjmp	800240ca <dacifb_configure_channel+0x3d2>
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
80023e0a:	30 08       	mov	r8,0
80023e0c:	ef 48 ff fc 	st.w	r7[-4],r8
  while ((prescaler<<1) < prescaler_min)
80023e10:	c0 68       	rjmp	80023e1c <dacifb_configure_channel+0x124>
  {
      prescaler++;
80023e12:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e16:	2f f8       	sub	r8,-1
80023e18:	ef 48 ff fc 	st.w	r7[-4],r8
       (prescaler_max > (1<<AVR32_DACIFB_TCR_CHRB_SIZE))  )
    return DACIFB_CONFIGURATION_REFUSED;      
      
  // Find value for CHRA/CHRB in the range min/max values 25us/35us and stop if it is not possible.
  prescaler = 0;
  while ((prescaler<<1) < prescaler_min)
80023e1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e20:	f0 09 15 01 	lsl	r9,r8,0x1
80023e24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80023e28:	10 39       	cp.w	r9,r8
80023e2a:	cf 43       	brcs	80023e12 <dacifb_configure_channel+0x11a>
  {
      prescaler++;
  } 
  // If value found is out of range, configuration refused 
  if ((prescaler<<1) > prescaler_max)  
80023e2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e30:	f0 09 15 01 	lsl	r9,r8,0x1
80023e34:	ee f8 ff f8 	ld.w	r8,r7[-8]
80023e38:	10 39       	cp.w	r9,r8
80023e3a:	e0 88 00 04 	brls	80023e42 <dacifb_configure_channel+0x14a>
    return DACIFB_CONFIGURATION_REFUSED;    
80023e3e:	30 08       	mov	r8,0
80023e40:	c4 59       	rjmp	800240ca <dacifb_configure_channel+0x3d2>
    
  // Refresh Time 
  switch(channel)
80023e42:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023e46:	58 28       	cp.w	r8,2
80023e48:	c1 10       	breq	80023e6a <dacifb_configure_channel+0x172>
80023e4a:	58 38       	cp.w	r8,3
80023e4c:	c1 c0       	breq	80023e84 <dacifb_configure_channel+0x18c>
80023e4e:	58 18       	cp.w	r8,1
80023e50:	c2 c1       	brne	80023ea8 <dacifb_configure_channel+0x1b0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK);      
80023e52:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e56:	70 39       	ld.w	r9,r8[0xc]
80023e58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e5c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80023e60:	10 49       	or	r9,r8
80023e62:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e66:	91 39       	st.w	r8[0xc],r9
      break;
80023e68:	c2 08       	rjmp	80023ea8 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
80023e6a:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e6e:	70 39       	ld.w	r9,r8[0xc]
80023e70:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e74:	a9 68       	lsl	r8,0x8
80023e76:	e2 18 0f 00 	andl	r8,0xf00,COH
80023e7a:	10 49       	or	r9,r8
80023e7c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e80:	91 39       	st.w	r8[0xc],r9
      break;  
80023e82:	c1 38       	rjmp	80023ea8 <dacifb_configure_channel+0x1b0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80023e84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023e88:	70 39       	ld.w	r9,r8[0xc]
80023e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e8e:	f5 d8 c0 04 	bfextu	r10,r8,0x0,0x4
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
80023e92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80023e96:	a9 68       	lsl	r8,0x8
80023e98:	e2 18 0f 00 	andl	r8,0xf00,COH
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->tcr |= ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK);
      break;  
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->tcr |= ( ((prescaler<<AVR32_DACIFB_TCR_CHRA_OFFSET)&AVR32_DACIFB_TCR_CHRA_MASK) |
80023e9c:	f5 e8 10 08 	or	r8,r10,r8
80023ea0:	10 49       	or	r9,r8
80023ea2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ea6:	91 39       	st.w	r8[0xc],r9
                          ((prescaler<<AVR32_DACIFB_TCR_CHRB_OFFSET)&AVR32_DACIFB_TCR_CHRB_MASK) );
      break;
  }

  // Trigger Mode
  switch(channel)
80023ea8:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023eac:	58 28       	cp.w	r8,2
80023eae:	c3 30       	breq	80023f14 <dacifb_configure_channel+0x21c>
80023eb0:	58 38       	cp.w	r8,3
80023eb2:	c5 e0       	breq	80023f6e <dacifb_configure_channel+0x276>
80023eb4:	58 18       	cp.w	r8,1
80023eb6:	e0 81 00 8f 	brne	80023fd4 <dacifb_configure_channel+0x2dc>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80023eba:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ebe:	11 98       	ld.ub	r8,r8[0x1]
80023ec0:	58 08       	cp.w	r8,0
80023ec2:	c0 90       	breq	80023ed4 <dacifb_configure_channel+0x1dc>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK);
80023ec4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ec8:	70 18       	ld.w	r8,r8[0x4]
80023eca:	10 99       	mov	r9,r8
80023ecc:	b1 a9       	sbr	r9,0x10
80023ece:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ed2:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80023ed4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ed8:	11 99       	ld.ub	r9,r8[0x1]
80023eda:	30 28       	mov	r8,2
80023edc:	f0 09 18 00 	cp.b	r9,r8
80023ee0:	c0 a1       	brne	80023ef4 <dacifb_configure_channel+0x1fc>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
80023ee2:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ee6:	70 28       	ld.w	r8,r8[0x8]
80023ee8:	10 99       	mov	r9,r8
80023eea:	a1 a9       	sbr	r9,0x0
80023eec:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023ef0:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80023ef2:	c7 18       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80023ef4:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ef8:	11 99       	ld.ub	r9,r8[0x1]
80023efa:	30 18       	mov	r8,1
80023efc:	f0 09 18 00 	cp.b	r9,r8
80023f00:	c6 71       	brne	80023fce <dacifb_configure_channel+0x2d6>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
80023f02:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f06:	70 08       	ld.w	r8,r8[0x0]
80023f08:	10 99       	mov	r9,r8
80023f0a:	b9 a9       	sbr	r9,0x18
80023f0c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f10:	91 09       	st.w	r8[0x0],r9
         }
      break;
80023f12:	c6 18       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_B:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80023f14:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f18:	11 98       	ld.ub	r8,r8[0x1]
80023f1a:	58 08       	cp.w	r8,0
80023f1c:	c0 90       	breq	80023f2e <dacifb_configure_channel+0x236>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_ABE_MASK);
80023f1e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f22:	70 18       	ld.w	r8,r8[0x4]
80023f24:	10 99       	mov	r9,r8
80023f26:	b1 b9       	sbr	r9,0x11
80023f28:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f2c:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80023f2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f32:	11 99       	ld.ub	r9,r8[0x1]
80023f34:	30 28       	mov	r8,2
80023f36:	f0 09 18 00 	cp.b	r9,r8
80023f3a:	c0 a1       	brne	80023f4e <dacifb_configure_channel+0x256>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
80023f3c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f40:	70 28       	ld.w	r8,r8[0x8]
80023f42:	10 99       	mov	r9,r8
80023f44:	a9 a9       	sbr	r9,0x8
80023f46:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f4a:	91 29       	st.w	r8[0x8],r9
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80023f4c:	c4 48       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLB_MASK);
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80023f4e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f52:	11 99       	ld.ub	r9,r8[0x1]
80023f54:	30 18       	mov	r8,1
80023f56:	f0 09 18 00 	cp.b	r9,r8
80023f5a:	c3 c1       	brne	80023fd2 <dacifb_configure_channel+0x2da>
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
80023f5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f60:	70 08       	ld.w	r8,r8[0x0]
80023f62:	10 99       	mov	r9,r8
80023f64:	b9 b9       	sbr	r9,0x19
80023f66:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f6a:	91 09       	st.w	r8[0x0],r9
         }
      break;    
80023f6c:	c3 48       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
    case DACIFB_CHANNEL_SELECTION_AB:
         if (p_dacifb_channel_opt->trigger_mode!=DACIFB_TRIGGER_MODE_MANUAL)
80023f6e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f72:	11 98       	ld.ub	r8,r8[0x1]
80023f74:	58 08       	cp.w	r8,0
80023f76:	c0 a0       	breq	80023f8a <dacifb_configure_channel+0x292>
         {
             dacifb->cfr |= (AVR32_DACIFB_CFR_AAE_MASK)|(AVR32_DACIFB_CFR_ABE_MASK);
80023f78:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f7c:	70 18       	ld.w	r8,r8[0x4]
80023f7e:	10 99       	mov	r9,r8
80023f80:	ea 19 00 03 	orh	r9,0x3
80023f84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f88:	91 19       	st.w	r8[0x4],r9
         }
         if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_EVENT)
80023f8a:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023f8e:	11 99       	ld.ub	r9,r8[0x1]
80023f90:	30 28       	mov	r8,2
80023f92:	f0 09 18 00 	cp.b	r9,r8
80023f96:	c0 b1       	brne	80023fac <dacifb_configure_channel+0x2b4>
         {
           dacifb->ecr |= (AVR32_DACIFB_ECR_ESLA_MASK)|(AVR32_DACIFB_ECR_ESLB_MASK);
80023f98:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023f9c:	70 28       	ld.w	r8,r8[0x8]
80023f9e:	10 99       	mov	r9,r8
80023fa0:	e8 19 01 01 	orl	r9,0x101
80023fa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fa8:	91 29       	st.w	r8[0x8],r9
80023faa:	c1 58       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
80023fac:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023fb0:	11 99       	ld.ub	r9,r8[0x1]
80023fb2:	30 18       	mov	r8,1
80023fb4:	f0 09 18 00 	cp.b	r9,r8
80023fb8:	c0 e1       	brne	80023fd4 <dacifb_configure_channel+0x2dc>
         {
           dacifb->cr  |= (AVR32_DACIFB_CR_TRAE_MASK)|(AVR32_DACIFB_CR_TRBE_MASK);
80023fba:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fbe:	70 08       	ld.w	r8,r8[0x0]
80023fc0:	10 99       	mov	r9,r8
80023fc2:	ea 19 03 00 	orh	r9,0x300
80023fc6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fca:	91 09       	st.w	r8[0x0],r9
80023fcc:	c0 48       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRAE_MASK);
         }
      break;
80023fce:	d7 03       	nop
80023fd0:	c0 28       	rjmp	80023fd4 <dacifb_configure_channel+0x2dc>
         }
         else if (p_dacifb_channel_opt->trigger_mode==DACIFB_TRIGGER_MODE_TIMER)
         {
           dacifb->cr |= (AVR32_DACIFB_CR_TRBE_MASK);
         }
      break;    
80023fd2:	d7 03       	nop
      break;  
  }
  
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
80023fd4:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80023fd8:	58 28       	cp.w	r8,2
80023fda:	c2 20       	breq	8002401e <dacifb_configure_channel+0x326>
80023fdc:	58 38       	cp.w	r8,3
80023fde:	c3 d0       	breq	80024058 <dacifb_configure_channel+0x360>
80023fe0:	58 18       	cp.w	r8,1
80023fe2:	c7 31       	brne	800240c8 <dacifb_configure_channel+0x3d0>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80023fe4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80023fe8:	70 99       	ld.w	r9,r8[0x24]
80023fea:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023fee:	11 a8       	ld.ub	r8,r8[0x2]
80023ff0:	ab 78       	lsl	r8,0xb
80023ff2:	10 9a       	mov	r10,r8
80023ff4:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
80023ff8:	ee f8 ff e8 	ld.w	r8,r7[-24]
80023ffc:	11 b8       	ld.ub	r8,r8[0x3]
80023ffe:	a9 68       	lsl	r8,0x8
80024000:	e2 18 07 00 	andl	r8,0x700,COH
80024004:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
80024006:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002400a:	11 c8       	ld.ub	r8,r8[0x4]
8002400c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
  
  // Left Adjust/ Shift Value / Data Rounding
  switch(channel)
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024010:	f5 e8 10 08 	or	r8,r10,r8
80024014:	10 49       	or	r9,r8
80024016:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002401a:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
8002401c:	c5 68       	rjmp	800240c8 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
8002401e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024022:	70 a9       	ld.w	r9,r8[0x28]
80024024:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024028:	11 a8       	ld.ub	r8,r8[0x2]
8002402a:	ab 78       	lsl	r8,0xb
8002402c:	10 9a       	mov	r10,r8
8002402e:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
80024032:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024036:	11 b8       	ld.ub	r8,r8[0x3]
80024038:	a9 68       	lsl	r8,0x8
8002403a:	e2 18 07 00 	andl	r8,0x700,COH
8002403e:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
80024040:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024044:	11 c8       	ld.ub	r8,r8[0x4]
80024046:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));      
      break;
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
8002404a:	f5 e8 10 08 	or	r8,r10,r8
8002404e:	10 49       	or	r9,r8
80024050:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024054:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
80024056:	c3 98       	rjmp	800240c8 <dacifb_configure_channel+0x3d0>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024058:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002405c:	70 99       	ld.w	r9,r8[0x24]
8002405e:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024062:	11 a8       	ld.ub	r8,r8[0x2]
80024064:	ab 78       	lsl	r8,0xb
80024066:	10 9a       	mov	r10,r8
80024068:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
8002406c:	ee f8 ff e8 	ld.w	r8,r7[-24]
80024070:	11 b8       	ld.ub	r8,r8[0x3]
80024072:	a9 68       	lsl	r8,0x8
80024074:	e2 18 07 00 	andl	r8,0x700,COH
80024078:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
8002407a:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002407e:	11 c8       	ld.ub	r8,r8[0x4]
80024080:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
80024084:	f5 e8 10 08 	or	r8,r10,r8
80024088:	10 49       	or	r9,r8
8002408a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002408e:	91 99       	st.w	r8[0x24],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
80024090:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024094:	70 a9       	ld.w	r9,r8[0x28]
80024096:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002409a:	11 a8       	ld.ub	r8,r8[0x2]
8002409c:	ab 78       	lsl	r8,0xb
8002409e:	10 9a       	mov	r10,r8
800240a0:	e2 1a 08 00 	andl	r10,0x800,COH
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
800240a4:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240a8:	11 b8       	ld.ub	r8,r8[0x3]
800240aa:	a9 68       	lsl	r8,0x8
800240ac:	e2 18 07 00 	andl	r8,0x700,COH
800240b0:	10 4a       	or	r10,r8
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
800240b2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800240b6:	11 c8       	ld.ub	r8,r8[0x4]
800240b8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
      break;    
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->drca |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCA_DSD_OFFSET)&AVR32_DACIFB_DRCA_DSD_MASK) |
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCA_DSV_OFFSET)&AVR32_DACIFB_DRCA_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCA_DRN_OFFSET)&AVR32_DACIFB_DRCA_DRN_MASK));   
         dacifb->drcb |= (((p_dacifb_channel_opt->left_adjustment<<AVR32_DACIFB_DRCB_DSD_OFFSET)&AVR32_DACIFB_DRCB_DSD_MASK) |
800240bc:	f5 e8 10 08 	or	r8,r10,r8
800240c0:	10 49       	or	r9,r8
800240c2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800240c6:	91 a9       	st.w	r8[0x28],r9
                         ((p_dacifb_channel_opt->data_shift<<AVR32_DACIFB_DRCB_DSV_OFFSET)&AVR32_DACIFB_DRCB_DSV_MASK) |
                         ((p_dacifb_channel_opt->data_round_enable<<AVR32_DACIFB_DRCB_DRN_OFFSET)&AVR32_DACIFB_DRCB_DRN_MASK));  
      break;   
  }
  return DACIFB_CONFIGURATION_ACCEPTED;
800240c8:	30 18       	mov	r8,1
}
800240ca:	10 9c       	mov	r12,r8
800240cc:	2f 9d       	sub	sp,-28
800240ce:	e3 cd 80 80 	ldm	sp++,r7,pc

800240d2 <dacifb_start_channel>:

void dacifb_start_channel(volatile avr32_dacifb_t * dacifb, 
                          U8 channel,
                          U32 cpu_hz)
{
800240d2:	eb cd 40 c0 	pushm	r6-r7,lr
800240d6:	1a 97       	mov	r7,sp
800240d8:	20 3d       	sub	sp,12
800240da:	49 b6       	lddpc	r6,80024144 <dacifb_start_channel+0x72>
800240dc:	1e 26       	rsub	r6,pc
800240de:	ef 4c ff fc 	st.w	r7[-4],r12
800240e2:	16 98       	mov	r8,r11
800240e4:	ef 4a ff f4 	st.w	r7[-12],r10
800240e8:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
  
  // Wait 2us
  dacifb_us_delay(2,cpu_hz);
800240ec:	ee fb ff f4 	ld.w	r11,r7[-12]
800240f0:	30 2c       	mov	r12,2
800240f2:	fe b0 fc 63 	rcall	800239b8 <dacifb_us_delay>
  
  switch(channel)
800240f6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800240fa:	58 28       	cp.w	r8,2
800240fc:	c0 e0       	breq	80024118 <dacifb_start_channel+0x46>
800240fe:	58 38       	cp.w	r8,3
80024100:	c1 50       	breq	8002412a <dacifb_start_channel+0x58>
80024102:	58 18       	cp.w	r8,1
80024104:	c1 c1       	brne	8002413c <dacifb_start_channel+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK);      
80024106:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002410a:	70 08       	ld.w	r8,r8[0x0]
8002410c:	10 99       	mov	r9,r8
8002410e:	b1 a9       	sbr	r9,0x10
80024110:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024114:	91 09       	st.w	r8[0x0],r9
      break;
80024116:	c1 38       	rjmp	8002413c <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->cr |= (AVR32_DACIFB_CR_BOE_MASK );
80024118:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002411c:	70 08       	ld.w	r8,r8[0x0]
8002411e:	10 99       	mov	r9,r8
80024120:	b1 b9       	sbr	r9,0x11
80024122:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024126:	91 09       	st.w	r8[0x0],r9
      break;
80024128:	c0 a8       	rjmp	8002413c <dacifb_start_channel+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
         dacifb->cr |= (AVR32_DACIFB_CR_AOE_MASK | AVR32_DACIFB_CR_BOE_MASK );
8002412a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002412e:	70 08       	ld.w	r8,r8[0x0]
80024130:	10 99       	mov	r9,r8
80024132:	ea 19 00 03 	orh	r9,0x3
80024136:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002413a:	91 09       	st.w	r8[0x0],r9
      break;    
  }
  
}
8002413c:	2f dd       	sub	sp,-12
8002413e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024142:	00 00       	add	r0,r0
80024144:	80 02       	ld.sh	r2,r0[0x0]
80024146:	3f 60       	mov	r0,-10

80024148 <dacifb_check_eoc>:


bool dacifb_check_eoc(volatile avr32_dacifb_t * dacifb, 
                      U8 channel)
{
80024148:	eb cd 40 80 	pushm	r7,lr
8002414c:	1a 97       	mov	r7,sp
8002414e:	20 2d       	sub	sp,8
80024150:	ef 4c ff fc 	st.w	r7[-4],r12
80024154:	16 98       	mov	r8,r11
80024156:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( dacifb!=NULL );
     
  // get SR register : EOC bit for channel
  return ((((dacifb->sr)&(channel<<AVR32_DACIFB_SR_DEA_OFFSET))==(channel<<AVR32_DACIFB_SR_DEA_OFFSET))? DACIFB_STATUS_COMPLETED : DACIFB_STATUS_NOT_COMPLETED);
8002415a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002415e:	70 78       	ld.w	r8,r8[0x1c]
80024160:	30 18       	mov	r8,1
}
80024162:	10 9c       	mov	r12,r8
80024164:	2f ed       	sub	sp,-8
80024166:	e3 cd 80 80 	ldm	sp++,r7,pc

8002416a <dacifb_set_value>:

void dacifb_set_value(volatile avr32_dacifb_t * dacifb, 
                      U8 channel,
                      bool dual,
                      U32 value)
{
8002416a:	eb cd 40 80 	pushm	r7,lr
8002416e:	1a 97       	mov	r7,sp
80024170:	20 4d       	sub	sp,16
80024172:	ef 4c ff fc 	st.w	r7[-4],r12
80024176:	14 98       	mov	r8,r10
80024178:	ef 49 ff f0 	st.w	r7[-16],r9
8002417c:	16 99       	mov	r9,r11
8002417e:	ef 69 ff f8 	st.b	r7[-8],r9
80024182:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert( dacifb != NULL );

  // Set new conversion value
  switch(channel)
80024186:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002418a:	58 28       	cp.w	r8,2
8002418c:	c0 b0       	breq	800241a2 <dacifb_set_value+0x38>
8002418e:	58 38       	cp.w	r8,3
80024190:	c0 f0       	breq	800241ae <dacifb_set_value+0x44>
80024192:	58 18       	cp.w	r8,1
80024194:	c2 01       	brne	800241d4 <dacifb_set_value+0x6a>
  {
    case DACIFB_CHANNEL_SELECTION_A:
         dacifb->dr0 = (value);      
80024196:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002419a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002419e:	91 b9       	st.w	r8[0x2c],r9
      break;
800241a0:	c1 a8       	rjmp	800241d4 <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_B:
         dacifb->dr1 = (value);
800241a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800241aa:	91 c9       	st.w	r8[0x30],r9
      break;
800241ac:	c1 48       	rjmp	800241d4 <dacifb_set_value+0x6a>
    case DACIFB_CHANNEL_SELECTION_AB:
       if(dual==true)
800241ae:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800241b2:	30 08       	mov	r8,0
800241b4:	f0 09 18 00 	cp.b	r9,r8
800241b8:	c0 70       	breq	800241c6 <dacifb_set_value+0x5c>
       {
         dacifb->dr0 = value;
800241ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241be:	ee f9 ff f0 	ld.w	r9,r7[-16]
800241c2:	91 b9       	st.w	r8[0x2c],r9
800241c4:	c0 88       	rjmp	800241d4 <dacifb_set_value+0x6a>
       }
       else
       {
           dacifb->dr0 = ((value&0x00FF) | ( (value&0xFF00>>16)<<16));
800241c6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800241ca:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800241ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800241d2:	91 b9       	st.w	r8[0x2c],r9
       }
      break;    
  }
}
800241d4:	2f cd       	sub	sp,-16
800241d6:	e3 cd 80 80 	ldm	sp++,r7,pc

800241da <dacifb_reload_timer>:

void dacifb_reload_timer(volatile avr32_dacifb_t * dacifb,
                         U8 channel,
                         U8 timer_us,
                         U32 prescaler_clock_hz)
{
800241da:	eb cd 40 80 	pushm	r7,lr
800241de:	1a 97       	mov	r7,sp
800241e0:	20 5d       	sub	sp,20
800241e2:	ef 4c ff f8 	st.w	r7[-8],r12
800241e6:	14 98       	mov	r8,r10
800241e8:	ef 49 ff ec 	st.w	r7[-20],r9
800241ec:	16 99       	mov	r9,r11
800241ee:	ef 69 ff f4 	st.b	r7[-12],r9
800241f2:	ef 68 ff f0 	st.b	r7[-16],r8
    U32 timer;
    
    Assert( dacifb != NULL ); 
    
    timer = ( (timer_us * prescaler_clock_hz)/1000000);
800241f6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800241fa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800241fe:	b1 39       	mul	r9,r8
80024200:	e0 68 de 83 	mov	r8,56963
80024204:	ea 18 43 1b 	orh	r8,0x431b
80024208:	f2 08 06 48 	mulu.d	r8,r9,r8
8002420c:	f2 08 16 12 	lsr	r8,r9,0x12
80024210:	ef 48 ff fc 	st.w	r7[-4],r8
    // Reload Timer Valuie
    switch(channel)
80024214:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024218:	58 28       	cp.w	r8,2
8002421a:	c0 f0       	breq	80024238 <dacifb_reload_timer+0x5e>
8002421c:	58 38       	cp.w	r8,3
8002421e:	c1 70       	breq	8002424c <dacifb_reload_timer+0x72>
80024220:	58 18       	cp.w	r8,1
80024222:	c2 71       	brne	80024270 <dacifb_reload_timer+0x96>
    {
      case DACIFB_CHANNEL_SELECTION_A:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK);      
80024224:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024228:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002422c:	10 99       	mov	r9,r8
8002422e:	bf b9       	sbr	r9,0x1f
80024230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024234:	91 e9       	st.w	r8[0x38],r9
        break;
80024236:	c1 d8       	rjmp	80024270 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_B:
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK);  
80024238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002423c:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024240:	10 99       	mov	r9,r8
80024242:	bf b9       	sbr	r9,0x1f
80024244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024248:	91 f9       	st.w	r8[0x3c],r9
        break;
8002424a:	c1 38       	rjmp	80024270 <dacifb_reload_timer+0x96>
      case DACIFB_CHANNEL_SELECTION_AB:
           dacifb->tra = (AVR32_DACIFB_TRA_TRL_MASK)|((timer<<AVR32_DACIFB_TRA_TCD_OFFSET)&AVR32_DACIFB_TRA_TCD_MASK); 
8002424c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024250:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024254:	10 99       	mov	r9,r8
80024256:	bf b9       	sbr	r9,0x1f
80024258:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002425c:	91 e9       	st.w	r8[0x38],r9
           dacifb->trb = (AVR32_DACIFB_TRB_TRL_MASK)|((timer<<AVR32_DACIFB_TRB_TCD_OFFSET)&AVR32_DACIFB_TRB_TCD_MASK); 
8002425e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024262:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
80024266:	10 99       	mov	r9,r8
80024268:	bf b9       	sbr	r9,0x1f
8002426a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002426e:	91 f9       	st.w	r8[0x3c],r9
        break;    
    }    
}
80024270:	2f bd       	sub	sp,-20
80024272:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80024278 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80024278:	eb cd 40 80 	pushm	r7,lr
8002427c:	1a 97       	mov	r7,sp
8002427e:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80024280:	e1 b8 00 00 	mfsr	r8,0x0
80024284:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80024288:	d3 03       	ssrf	0x10

	return flags;
8002428a:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002428e:	10 9c       	mov	r12,r8
80024290:	2f fd       	sub	sp,-4
80024292:	e3 cd 80 80 	ldm	sp++,r7,pc

80024296 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
80024296:	eb cd 40 80 	pushm	r7,lr
8002429a:	1a 97       	mov	r7,sp
8002429c:	20 1d       	sub	sp,4
8002429e:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
800242a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800242a6:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800242aa:	2f fd       	sub	sp,-4
800242ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800242b0 <eic_init>:
#include "eic.h"



void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
800242b0:	eb cd 40 80 	pushm	r7,lr
800242b4:	1a 97       	mov	r7,sp
800242b6:	20 4d       	sub	sp,16
800242b8:	ef 4c ff f8 	st.w	r7[-8],r12
800242bc:	ef 4b ff f4 	st.w	r7[-12],r11
800242c0:	ef 4a ff f0 	st.w	r7[-16],r10
	int i;
	for (i = 0; i < nb_lines; i++)
800242c4:	30 08       	mov	r8,0
800242c6:	ef 48 ff fc 	st.w	r7[-4],r8
800242ca:	c2 89       	rjmp	8002451a <eic_init+0x26a>
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
800242cc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800242d0:	12 98       	mov	r8,r9
800242d2:	a1 78       	lsl	r8,0x1
800242d4:	12 08       	add	r8,r9
800242d6:	a1 78       	lsl	r8,0x1
800242d8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800242dc:	f2 08 00 08 	add	r8,r9,r8
800242e0:	11 99       	ld.ub	r9,r8[0x1]
800242e2:	30 18       	mov	r8,1
800242e4:	f0 09 18 00 	cp.b	r9,r8
800242e8:	c1 51       	brne	80024312 <eic_init+0x62>
			? (eic->mode | (1 << opt[i].eic_line))
800242ea:	ee f8 ff f8 	ld.w	r8,r7[-8]
800242ee:	70 5a       	ld.w	r10,r8[0x14]
800242f0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800242f4:	12 98       	mov	r8,r9
800242f6:	a1 78       	lsl	r8,0x1
800242f8:	12 08       	add	r8,r9
800242fa:	a1 78       	lsl	r8,0x1
800242fc:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024300:	f2 08 00 08 	add	r8,r9,r8
80024304:	11 88       	ld.ub	r8,r8[0x0]
80024306:	30 19       	mov	r9,1
80024308:	f2 08 09 48 	lsl	r8,r9,r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
8002430c:	f5 e8 10 08 	or	r8,r10,r8
80024310:	c1 58       	rjmp	8002433a <eic_init+0x8a>
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
80024312:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024316:	70 5a       	ld.w	r10,r8[0x14]
80024318:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002431c:	12 98       	mov	r8,r9
8002431e:	a1 78       	lsl	r8,0x1
80024320:	12 08       	add	r8,r9
80024322:	a1 78       	lsl	r8,0x1
80024324:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024328:	f2 08 00 08 	add	r8,r9,r8
8002432c:	11 88       	ld.ub	r8,r8[0x0]
8002432e:	30 19       	mov	r9,1
80024330:	f2 08 09 48 	lsl	r8,r9,r8
80024334:	5c d8       	com	r8
{
	int i;
	for (i = 0; i < nb_lines; i++)
	{
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
80024336:	f5 e8 00 08 	and	r8,r10,r8
8002433a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002433e:	93 58       	st.w	r9[0x14],r8
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024340:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024344:	12 98       	mov	r8,r9
80024346:	a1 78       	lsl	r8,0x1
80024348:	12 08       	add	r8,r9
8002434a:	a1 78       	lsl	r8,0x1
8002434c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024350:	f2 08 00 08 	add	r8,r9,r8
80024354:	11 a9       	ld.ub	r9,r8[0x2]
80024356:	30 18       	mov	r8,1
80024358:	f0 09 18 00 	cp.b	r9,r8
8002435c:	c1 51       	brne	80024386 <eic_init+0xd6>
			? (eic->edge | (1 << opt[i].eic_line))
8002435e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024362:	70 6a       	ld.w	r10,r8[0x18]
80024364:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024368:	12 98       	mov	r8,r9
8002436a:	a1 78       	lsl	r8,0x1
8002436c:	12 08       	add	r8,r9
8002436e:	a1 78       	lsl	r8,0x1
80024370:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024374:	f2 08 00 08 	add	r8,r9,r8
80024378:	11 88       	ld.ub	r8,r8[0x0]
8002437a:	30 19       	mov	r9,1
8002437c:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
80024380:	f5 e8 10 08 	or	r8,r10,r8
80024384:	c1 58       	rjmp	800243ae <eic_init+0xfe>
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
80024386:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002438a:	70 6a       	ld.w	r10,r8[0x18]
8002438c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024390:	12 98       	mov	r8,r9
80024392:	a1 78       	lsl	r8,0x1
80024394:	12 08       	add	r8,r9
80024396:	a1 78       	lsl	r8,0x1
80024398:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002439c:	f2 08 00 08 	add	r8,r9,r8
800243a0:	11 88       	ld.ub	r8,r8[0x0]
800243a2:	30 19       	mov	r9,1
800243a4:	f2 08 09 48 	lsl	r8,r9,r8
800243a8:	5c d8       	com	r8
		// Set up mode level
		eic->mode = (opt[i].eic_mode == 1)
			? (eic->mode | (1 << opt[i].eic_line))
			: (eic->mode & ~(1 << opt[i].eic_line));
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
800243aa:	f5 e8 00 08 	and	r8,r10,r8
800243ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800243b2:	93 68       	st.w	r9[0x18],r8
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800243b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800243b8:	12 98       	mov	r8,r9
800243ba:	a1 78       	lsl	r8,0x1
800243bc:	12 08       	add	r8,r9
800243be:	a1 78       	lsl	r8,0x1
800243c0:	ee f9 ff f4 	ld.w	r9,r7[-12]
800243c4:	f2 08 00 08 	add	r8,r9,r8
800243c8:	11 b9       	ld.ub	r9,r8[0x3]
800243ca:	30 18       	mov	r8,1
800243cc:	f0 09 18 00 	cp.b	r9,r8
800243d0:	c1 51       	brne	800243fa <eic_init+0x14a>
			? (eic->level | (1 << opt[i].eic_line))
800243d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243d6:	70 7a       	ld.w	r10,r8[0x1c]
800243d8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800243dc:	12 98       	mov	r8,r9
800243de:	a1 78       	lsl	r8,0x1
800243e0:	12 08       	add	r8,r9
800243e2:	a1 78       	lsl	r8,0x1
800243e4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800243e8:	f2 08 00 08 	add	r8,r9,r8
800243ec:	11 88       	ld.ub	r8,r8[0x0]
800243ee:	30 19       	mov	r9,1
800243f0:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
800243f4:	f5 e8 10 08 	or	r8,r10,r8
800243f8:	c1 58       	rjmp	80024422 <eic_init+0x172>
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
800243fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800243fe:	70 7a       	ld.w	r10,r8[0x1c]
80024400:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024404:	12 98       	mov	r8,r9
80024406:	a1 78       	lsl	r8,0x1
80024408:	12 08       	add	r8,r9
8002440a:	a1 78       	lsl	r8,0x1
8002440c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024410:	f2 08 00 08 	add	r8,r9,r8
80024414:	11 88       	ld.ub	r8,r8[0x0]
80024416:	30 19       	mov	r9,1
80024418:	f2 08 09 48 	lsl	r8,r9,r8
8002441c:	5c d8       	com	r8
		// Set up edge type
		eic->edge = (opt[i].eic_edge == 1)
			? (eic->edge | (1 << opt[i].eic_line))
			: (eic->edge & ~(1 << opt[i].eic_line));
		// Set up level
		eic->level = (opt[i].eic_level == 1)
8002441e:	f5 e8 00 08 	and	r8,r10,r8
80024422:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024426:	93 78       	st.w	r9[0x1c],r8
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024428:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002442c:	12 98       	mov	r8,r9
8002442e:	a1 78       	lsl	r8,0x1
80024430:	12 08       	add	r8,r9
80024432:	a1 78       	lsl	r8,0x1
80024434:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024438:	f2 08 00 08 	add	r8,r9,r8
8002443c:	11 c9       	ld.ub	r9,r8[0x4]
8002443e:	30 18       	mov	r8,1
80024440:	f0 09 18 00 	cp.b	r9,r8
80024444:	c1 51       	brne	8002446e <eic_init+0x1be>
			? (eic->filter | (1 << opt[i].eic_line))
80024446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002444a:	70 8a       	ld.w	r10,r8[0x20]
8002444c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024450:	12 98       	mov	r8,r9
80024452:	a1 78       	lsl	r8,0x1
80024454:	12 08       	add	r8,r9
80024456:	a1 78       	lsl	r8,0x1
80024458:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002445c:	f2 08 00 08 	add	r8,r9,r8
80024460:	11 88       	ld.ub	r8,r8[0x0]
80024462:	30 19       	mov	r9,1
80024464:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024468:	f5 e8 10 08 	or	r8,r10,r8
8002446c:	c1 58       	rjmp	80024496 <eic_init+0x1e6>
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
8002446e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024472:	70 8a       	ld.w	r10,r8[0x20]
80024474:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024478:	12 98       	mov	r8,r9
8002447a:	a1 78       	lsl	r8,0x1
8002447c:	12 08       	add	r8,r9
8002447e:	a1 78       	lsl	r8,0x1
80024480:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024484:	f2 08 00 08 	add	r8,r9,r8
80024488:	11 88       	ld.ub	r8,r8[0x0]
8002448a:	30 19       	mov	r9,1
8002448c:	f2 08 09 48 	lsl	r8,r9,r8
80024490:	5c d8       	com	r8
		// Set up level
		eic->level = (opt[i].eic_level == 1)
			? (eic->level | (1 << opt[i].eic_line))
			: (eic->level & ~(1 << opt[i].eic_line));
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
80024492:	f5 e8 00 08 	and	r8,r10,r8
80024496:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002449a:	93 88       	st.w	r9[0x20],r8
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
8002449c:	ee f9 ff fc 	ld.w	r9,r7[-4]
800244a0:	12 98       	mov	r8,r9
800244a2:	a1 78       	lsl	r8,0x1
800244a4:	12 08       	add	r8,r9
800244a6:	a1 78       	lsl	r8,0x1
800244a8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244ac:	f2 08 00 08 	add	r8,r9,r8
800244b0:	11 d9       	ld.ub	r9,r8[0x5]
800244b2:	30 18       	mov	r8,1
800244b4:	f0 09 18 00 	cp.b	r9,r8
800244b8:	c1 51       	brne	800244e2 <eic_init+0x232>
			? (eic->async | (1 << opt[i].eic_line))
800244ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800244be:	70 aa       	ld.w	r10,r8[0x28]
800244c0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800244c4:	12 98       	mov	r8,r9
800244c6:	a1 78       	lsl	r8,0x1
800244c8:	12 08       	add	r8,r9
800244ca:	a1 78       	lsl	r8,0x1
800244cc:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244d0:	f2 08 00 08 	add	r8,r9,r8
800244d4:	11 88       	ld.ub	r8,r8[0x0]
800244d6:	30 19       	mov	r9,1
800244d8:	f2 08 09 48 	lsl	r8,r9,r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
800244dc:	f5 e8 10 08 	or	r8,r10,r8
800244e0:	c1 58       	rjmp	8002450a <eic_init+0x25a>
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
800244e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800244e6:	70 aa       	ld.w	r10,r8[0x28]
800244e8:	ee f9 ff fc 	ld.w	r9,r7[-4]
800244ec:	12 98       	mov	r8,r9
800244ee:	a1 78       	lsl	r8,0x1
800244f0:	12 08       	add	r8,r9
800244f2:	a1 78       	lsl	r8,0x1
800244f4:	ee f9 ff f4 	ld.w	r9,r7[-12]
800244f8:	f2 08 00 08 	add	r8,r9,r8
800244fc:	11 88       	ld.ub	r8,r8[0x0]
800244fe:	30 19       	mov	r9,1
80024500:	f2 08 09 48 	lsl	r8,r9,r8
80024504:	5c d8       	com	r8
		// Set up if filter is used
		eic->filter = (opt[i].eic_filter == 1)
			? (eic->filter | (1 << opt[i].eic_line))
			: (eic->filter & ~(1 << opt[i].eic_line));
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
80024506:	f5 e8 00 08 	and	r8,r10,r8
8002450a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002450e:	93 a8       	st.w	r9[0x28],r8


void eic_init(volatile avr32_eic_t *eic, const eic_options_t *opt, uint32_t nb_lines)
{
	int i;
	for (i = 0; i < nb_lines; i++)
80024510:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024514:	2f f8       	sub	r8,-1
80024516:	ef 48 ff fc 	st.w	r7[-4],r8
8002451a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002451e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80024522:	10 39       	cp.w	r9,r8
80024524:	fe 93 fe d4 	brlo	800242cc <eic_init+0x1c>
		// Set up which mode is used : asynchronous mode/ synchronous mode
		eic->async = (opt[i].eic_async == 1)
			? (eic->async | (1 << opt[i].eic_line))
			: (eic->async & ~(1 << opt[i].eic_line));
	}
}
80024528:	2f cd       	sub	sp,-16
8002452a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002452e <eic_enable_lines>:

void eic_enable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
8002452e:	eb cd 40 80 	pushm	r7,lr
80024532:	1a 97       	mov	r7,sp
80024534:	20 2d       	sub	sp,8
80024536:	ef 4c ff fc 	st.w	r7[-4],r12
8002453a:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->en = mask_lines;
8002453e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024542:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024546:	91 c9       	st.w	r8[0x30],r9
}
80024548:	2f ed       	sub	sp,-8
8002454a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002454e <eic_enable_line>:

void eic_enable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002454e:	eb cd 40 80 	pushm	r7,lr
80024552:	1a 97       	mov	r7,sp
80024554:	20 2d       	sub	sp,8
80024556:	ef 4c ff fc 	st.w	r7[-4],r12
8002455a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->en = 1 << line_number;
8002455e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024562:	30 19       	mov	r9,1
80024564:	f2 08 09 48 	lsl	r8,r9,r8
80024568:	10 99       	mov	r9,r8
8002456a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002456e:	91 c9       	st.w	r8[0x30],r9
}
80024570:	2f ed       	sub	sp,-8
80024572:	e3 cd 80 80 	ldm	sp++,r7,pc

80024576 <eic_disable_lines>:

void eic_disable_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024576:	eb cd 40 80 	pushm	r7,lr
8002457a:	1a 97       	mov	r7,sp
8002457c:	20 2d       	sub	sp,8
8002457e:	ef 4c ff fc 	st.w	r7[-4],r12
80024582:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->dis = mask_lines;
80024586:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002458a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002458e:	91 d9       	st.w	r8[0x34],r9
}
80024590:	2f ed       	sub	sp,-8
80024592:	e3 cd 80 80 	ldm	sp++,r7,pc

80024596 <eic_disable_line>:

void eic_disable_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024596:	eb cd 40 80 	pushm	r7,lr
8002459a:	1a 97       	mov	r7,sp
8002459c:	20 2d       	sub	sp,8
8002459e:	ef 4c ff fc 	st.w	r7[-4],r12
800245a2:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable line line_number
	eic->dis = 1 << line_number;
800245a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245aa:	30 19       	mov	r9,1
800245ac:	f2 08 09 48 	lsl	r8,r9,r8
800245b0:	10 99       	mov	r9,r8
800245b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245b6:	91 d9       	st.w	r8[0x34],r9
}
800245b8:	2f ed       	sub	sp,-8
800245ba:	e3 cd 80 80 	ldm	sp++,r7,pc

800245be <eic_is_line_enabled>:

bool eic_is_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
800245be:	eb cd 40 80 	pushm	r7,lr
800245c2:	1a 97       	mov	r7,sp
800245c4:	20 2d       	sub	sp,8
800245c6:	ef 4c ff fc 	st.w	r7[-4],r12
800245ca:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->ctrl & (1 << line_number)) != 0;
800245ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
800245d2:	70 e9       	ld.w	r9,r8[0x38]
800245d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800245d8:	30 1a       	mov	r10,1
800245da:	f4 08 09 48 	lsl	r8,r10,r8
800245de:	f3 e8 00 08 	and	r8,r9,r8
800245e2:	5f 18       	srne	r8
800245e4:	5c 58       	castu.b	r8
}
800245e6:	10 9c       	mov	r12,r8
800245e8:	2f ed       	sub	sp,-8
800245ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800245ee <eic_enable_interrupt_lines>:

void eic_enable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800245ee:	eb cd 40 80 	pushm	r7,lr
800245f2:	1a 97       	mov	r7,sp
800245f4:	20 2d       	sub	sp,8
800245f6:	ef 4c ff fc 	st.w	r7[-4],r12
800245fa:	ef 4b ff f8 	st.w	r7[-8],r11
	eic->ier = mask_lines;
800245fe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024602:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024606:	91 09       	st.w	r8[0x0],r9
}
80024608:	2f ed       	sub	sp,-8
8002460a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002460e <eic_enable_interrupt_line>:

void eic_enable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002460e:	eb cd 40 80 	pushm	r7,lr
80024612:	1a 97       	mov	r7,sp
80024614:	20 2d       	sub	sp,8
80024616:	ef 4c ff fc 	st.w	r7[-4],r12
8002461a:	ef 4b ff f8 	st.w	r7[-8],r11
	// Enable line line_number
	eic->ier = 1 << line_number;
8002461e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024622:	30 19       	mov	r9,1
80024624:	f2 08 09 48 	lsl	r8,r9,r8
80024628:	10 99       	mov	r9,r8
8002462a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002462e:	91 09       	st.w	r8[0x0],r9
}
80024630:	2f ed       	sub	sp,-8
80024632:	e3 cd 80 80 	ldm	sp++,r7,pc

80024636 <eic_disable_interrupt_lines>:

void eic_disable_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
80024636:	eb cd 40 c0 	pushm	r6-r7,lr
8002463a:	1a 97       	mov	r7,sp
8002463c:	20 3d       	sub	sp,12
8002463e:	48 d6       	lddpc	r6,80024670 <eic_disable_interrupt_lines+0x3a>
80024640:	1e 26       	rsub	r6,pc
80024642:	ef 4c ff f8 	st.w	r7[-8],r12
80024646:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
8002464a:	c1 7e       	rcall	80024278 <cpu_irq_save>
8002464c:	18 98       	mov	r8,r12
8002464e:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = mask_lines;
80024652:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024656:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002465a:	91 19       	st.w	r8[0x4],r9
	eic->imr;
8002465c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024660:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
80024662:	ee fc ff fc 	ld.w	r12,r7[-4]
80024666:	c1 8e       	rcall	80024296 <cpu_irq_restore>
}
80024668:	2f dd       	sub	sp,-12
8002466a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002466e:	00 00       	add	r0,r0
80024670:	80 02       	ld.sh	r2,r0[0x0]
80024672:	44 c4       	lddsp	r4,sp[0x130]

80024674 <eic_disable_interrupt_line>:

void eic_disable_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024674:	eb cd 40 c0 	pushm	r6-r7,lr
80024678:	1a 97       	mov	r7,sp
8002467a:	20 3d       	sub	sp,12
8002467c:	48 f6       	lddpc	r6,800246b8 <eic_disable_interrupt_line+0x44>
8002467e:	1e 26       	rsub	r6,pc
80024680:	ef 4c ff f8 	st.w	r7[-8],r12
80024684:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024688:	fe b0 fd f8 	rcall	80024278 <cpu_irq_save>
8002468c:	18 98       	mov	r8,r12
8002468e:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->idr = 1 << line_number;
80024692:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024696:	30 19       	mov	r9,1
80024698:	f2 08 09 48 	lsl	r8,r9,r8
8002469c:	10 99       	mov	r9,r8
8002469e:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246a2:	91 19       	st.w	r8[0x4],r9
	eic->imr;
800246a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246a8:	70 28       	ld.w	r8,r8[0x8]
	cpu_irq_restore(flags);
800246aa:	ee fc ff fc 	ld.w	r12,r7[-4]
800246ae:	fe b0 fd f4 	rcall	80024296 <cpu_irq_restore>
}
800246b2:	2f dd       	sub	sp,-12
800246b4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800246b8:	80 02       	ld.sh	r2,r0[0x0]
800246ba:	45 02       	lddsp	r2,sp[0x140]

800246bc <eic_is_interrupt_line_enabled>:

bool eic_is_interrupt_line_enabled(volatile avr32_eic_t *eic, uint32_t line_number)
{
800246bc:	eb cd 40 80 	pushm	r7,lr
800246c0:	1a 97       	mov	r7,sp
800246c2:	20 2d       	sub	sp,8
800246c4:	ef 4c ff fc 	st.w	r7[-4],r12
800246c8:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->imr & (1 << line_number)) != 0;
800246cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800246d0:	70 29       	ld.w	r9,r8[0x8]
800246d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800246d6:	30 1a       	mov	r10,1
800246d8:	f4 08 09 48 	lsl	r8,r10,r8
800246dc:	f3 e8 00 08 	and	r8,r9,r8
800246e0:	5f 18       	srne	r8
800246e2:	5c 58       	castu.b	r8
}
800246e4:	10 9c       	mov	r12,r8
800246e6:	2f ed       	sub	sp,-8
800246e8:	e3 cd 80 80 	ldm	sp++,r7,pc

800246ec <eic_clear_interrupt_lines>:

void eic_clear_interrupt_lines(volatile avr32_eic_t *eic, uint32_t mask_lines)
{
800246ec:	eb cd 40 c0 	pushm	r6-r7,lr
800246f0:	1a 97       	mov	r7,sp
800246f2:	20 3d       	sub	sp,12
800246f4:	48 d6       	lddpc	r6,80024728 <eic_clear_interrupt_lines+0x3c>
800246f6:	1e 26       	rsub	r6,pc
800246f8:	ef 4c ff f8 	st.w	r7[-8],r12
800246fc:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024700:	fe b0 fd bc 	rcall	80024278 <cpu_irq_save>
80024704:	18 98       	mov	r8,r12
80024706:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = mask_lines;
8002470a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002470e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80024712:	91 49       	st.w	r8[0x10],r9
	eic->isr;
80024714:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024718:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
8002471a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002471e:	fe b0 fd bc 	rcall	80024296 <cpu_irq_restore>
}
80024722:	2f dd       	sub	sp,-12
80024724:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024728:	80 02       	ld.sh	r2,r0[0x0]
8002472a:	45 7a       	lddsp	r10,sp[0x15c]

8002472c <eic_clear_interrupt_line>:

void eic_clear_interrupt_line(volatile avr32_eic_t *eic, uint32_t line_number)
{
8002472c:	eb cd 40 c0 	pushm	r6-r7,lr
80024730:	1a 97       	mov	r7,sp
80024732:	20 3d       	sub	sp,12
80024734:	48 f6       	lddpc	r6,80024770 <eic_clear_interrupt_line+0x44>
80024736:	1e 26       	rsub	r6,pc
80024738:	ef 4c ff f8 	st.w	r7[-8],r12
8002473c:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;
	flags = cpu_irq_save();
80024740:	fe b0 fd 9c 	rcall	80024278 <cpu_irq_save>
80024744:	18 98       	mov	r8,r12
80024746:	ef 48 ff fc 	st.w	r7[-4],r8
	eic->icr = 1 << line_number;
8002474a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002474e:	30 19       	mov	r9,1
80024750:	f2 08 09 48 	lsl	r8,r9,r8
80024754:	10 99       	mov	r9,r8
80024756:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002475a:	91 49       	st.w	r8[0x10],r9
	eic->isr;
8002475c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024760:	70 38       	ld.w	r8,r8[0xc]
	cpu_irq_restore(flags);
80024762:	ee fc ff fc 	ld.w	r12,r7[-4]
80024766:	fe b0 fd 98 	rcall	80024296 <cpu_irq_restore>
}
8002476a:	2f dd       	sub	sp,-12
8002476c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024770:	80 02       	ld.sh	r2,r0[0x0]
80024772:	45 ba       	lddsp	r10,sp[0x16c]

80024774 <eic_is_interrupt_line_pending>:

bool eic_is_interrupt_line_pending(volatile avr32_eic_t *eic, uint32_t line_number)
{
80024774:	eb cd 40 80 	pushm	r7,lr
80024778:	1a 97       	mov	r7,sp
8002477a:	20 2d       	sub	sp,8
8002477c:	ef 4c ff fc 	st.w	r7[-4],r12
80024780:	ef 4b ff f8 	st.w	r7[-8],r11
	return (eic->isr & (1 << line_number)) != 0;
80024784:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024788:	70 39       	ld.w	r9,r8[0xc]
8002478a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002478e:	30 1a       	mov	r10,1
80024790:	f4 08 09 48 	lsl	r8,r10,r8
80024794:	f3 e8 00 08 	and	r8,r9,r8
80024798:	5f 18       	srne	r8
8002479a:	5c 58       	castu.b	r8
}
8002479c:	10 9c       	mov	r12,r8
8002479e:	2f ed       	sub	sp,-8
800247a0:	e3 cd 80 80 	ldm	sp++,r7,pc

800247a4 <flashc_get_flash_size>:
 */
//! @{


unsigned int flashc_get_flash_size(void)
{
800247a4:	eb cd 40 c0 	pushm	r6-r7,lr
800247a8:	1a 97       	mov	r7,sp
800247aa:	48 86       	lddpc	r6,800247c8 <flashc_get_flash_size+0x24>
800247ac:	1e 26       	rsub	r6,pc
     512 << 10,
     768 << 10,
    1024 << 10,
    2048 << 10      
  };
  return FLASH_SIZE[(AVR32_FLASHC.pr & AVR32_FLASHC_PR_FSZ_MASK) >> AVR32_FLASHC_PR_FSZ_OFFSET];
800247ae:	fe 68 00 00 	mov	r8,-131072
800247b2:	70 38       	ld.w	r8,r8[0xc]
800247b4:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
800247b8:	ec f8 08 c0 	ld.w	r8,r6[2240]
800247bc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
     768 << 10,
    1024 << 10
  };
  return FLASH_SIZE[(AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FSZ_MASK) >> AVR32_FLASHC_FSR_FSZ_OFFSET];
#endif  
}
800247c0:	10 9c       	mov	r12,r8
800247c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800247c6:	00 00       	add	r0,r0
800247c8:	80 02       	ld.sh	r2,r0[0x0]
800247ca:	46 30       	lddsp	r0,sp[0x18c]

800247cc <flashc_get_page_count>:


unsigned int flashc_get_page_count(void)
{
800247cc:	eb cd 40 c0 	pushm	r6-r7,lr
800247d0:	1a 97       	mov	r7,sp
800247d2:	48 56       	lddpc	r6,800247e4 <flashc_get_page_count+0x18>
800247d4:	1e 26       	rsub	r6,pc
  return flashc_get_flash_size() / AVR32_FLASHC_PAGE_SIZE;
800247d6:	f0 16 00 cd 	mcall	r6[820]
800247da:	18 98       	mov	r8,r12
800247dc:	a9 98       	lsr	r8,0x9
}
800247de:	10 9c       	mov	r12,r8
800247e0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800247e4:	80 02       	ld.sh	r2,r0[0x0]
800247e6:	46 58       	lddsp	r8,sp[0x194]

800247e8 <flashc_get_page_count_per_region>:


unsigned int flashc_get_page_count_per_region(void)
{
800247e8:	eb cd 40 c0 	pushm	r6-r7,lr
800247ec:	1a 97       	mov	r7,sp
800247ee:	48 56       	lddpc	r6,80024800 <flashc_get_page_count_per_region+0x18>
800247f0:	1e 26       	rsub	r6,pc
  return flashc_get_page_count() / AVR32_FLASHC_REGIONS;
800247f2:	f0 16 01 0c 	mcall	r6[1072]
800247f6:	18 98       	mov	r8,r12
800247f8:	a5 88       	lsr	r8,0x4
}
800247fa:	10 9c       	mov	r12,r8
800247fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024800:	80 02       	ld.sh	r2,r0[0x0]
80024802:	46 74       	lddsp	r4,sp[0x19c]

80024804 <flashc_get_page_region>:


unsigned int flashc_get_page_region(int page_number)
{
80024804:	eb cd 40 e0 	pushm	r5-r7,lr
80024808:	1a 97       	mov	r7,sp
8002480a:	20 1d       	sub	sp,4
8002480c:	48 c6       	lddpc	r6,8002483c <flashc_get_page_region+0x38>
8002480e:	1e 26       	rsub	r6,pc
80024810:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((page_number >= 0) ? page_number : flashc_get_page_number()) / flashc_get_page_count_per_region();
80024814:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024818:	58 08       	cp.w	r8,0
8002481a:	c0 45       	brlt	80024822 <flashc_get_page_region+0x1e>
8002481c:	ee f5 ff fc 	ld.w	r5,r7[-4]
80024820:	c0 58       	rjmp	8002482a <flashc_get_page_region+0x26>
80024822:	f0 16 01 90 	mcall	r6[1600]
80024826:	18 98       	mov	r8,r12
80024828:	10 95       	mov	r5,r8
8002482a:	f0 16 01 1b 	mcall	r6[1132]
8002482e:	18 98       	mov	r8,r12
80024830:	ea 08 0d 08 	divu	r8,r5,r8
}
80024834:	10 9c       	mov	r12,r8
80024836:	2f fd       	sub	sp,-4
80024838:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002483c:	80 02       	ld.sh	r2,r0[0x0]
8002483e:	46 92       	lddsp	r2,sp[0x1a4]

80024840 <flashc_get_region_first_page_number>:


unsigned int flashc_get_region_first_page_number(unsigned int region)
{
80024840:	eb cd 40 c0 	pushm	r6-r7,lr
80024844:	1a 97       	mov	r7,sp
80024846:	20 1d       	sub	sp,4
80024848:	48 86       	lddpc	r6,80024868 <flashc_get_region_first_page_number+0x28>
8002484a:	1e 26       	rsub	r6,pc
8002484c:	ef 4c ff fc 	st.w	r7[-4],r12
  return region * flashc_get_page_count_per_region();
80024850:	f0 16 01 1b 	mcall	r6[1132]
80024854:	18 99       	mov	r9,r12
80024856:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002485a:	f2 08 02 48 	mul	r8,r9,r8
}
8002485e:	10 9c       	mov	r12,r8
80024860:	2f fd       	sub	sp,-4
80024862:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024866:	00 00       	add	r0,r0
80024868:	80 02       	ld.sh	r2,r0[0x0]
8002486a:	46 ce       	lddsp	lr,sp[0x1b0]

8002486c <flashc_get_wait_state>:
 */
//! @{


unsigned int flashc_get_wait_state(void)
{
8002486c:	eb cd 40 80 	pushm	r7,lr
80024870:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FWS_MASK) >> AVR32_FLASHC_FCR_FWS_OFFSET;
80024872:	fe 68 00 00 	mov	r8,-131072
80024876:	70 08       	ld.w	r8,r8[0x0]
80024878:	e2 18 00 40 	andl	r8,0x40,COH
8002487c:	a7 88       	lsr	r8,0x6
}
8002487e:	10 9c       	mov	r12,r8
80024880:	e3 cd 80 80 	ldm	sp++,r7,pc

80024884 <flashc_set_wait_state>:


void flashc_set_wait_state(unsigned int wait_state)
{
80024884:	eb cd 40 80 	pushm	r7,lr
80024888:	1a 97       	mov	r7,sp
8002488a:	20 2d       	sub	sp,8
8002488c:	ef 4c ff f8 	st.w	r7[-8],r12
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024890:	fe 68 00 00 	mov	r8,-131072
80024894:	70 08       	ld.w	r8,r8[0x0]
80024896:	30 09       	mov	r9,0
80024898:	ef 49 ff fc 	st.w	r7[-4],r9
8002489c:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.fws = wait_state;
800248a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800248a4:	5c 58       	castu.b	r8
800248a6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800248aa:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800248ae:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248b2:	f1 d9 d0 c1 	bfins	r8,r9,0x6,0x1
800248b6:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800248ba:	fe 68 00 00 	mov	r8,-131072
800248be:	ee f9 ff fc 	ld.w	r9,r7[-4]
800248c2:	91 09       	st.w	r8[0x0],r9
}
800248c4:	2f ed       	sub	sp,-8
800248c6:	e3 cd 80 80 	ldm	sp++,r7,pc

800248ca <flashc_set_bus_freq>:


void flashc_set_bus_freq(unsigned int cpu_f_hz)
{
800248ca:	eb cd 40 c0 	pushm	r6-r7,lr
800248ce:	1a 97       	mov	r7,sp
800248d0:	20 1d       	sub	sp,4
800248d2:	48 c6       	lddpc	r6,80024900 <flashc_set_bus_freq+0x36>
800248d4:	1e 26       	rsub	r6,pc
800248d6:	ef 4c ff fc 	st.w	r7[-4],r12
  if(cpu_f_hz >= AVR32_FLASHC_FWS_0_MAX_FREQ)
800248da:	ee f8 ff fc 	ld.w	r8,r7[-4]
800248de:	e0 69 8a 3f 	mov	r9,35391
800248e2:	ea 19 01 f7 	orh	r9,0x1f7
800248e6:	12 38       	cp.w	r8,r9
800248e8:	e0 88 00 06 	brls	800248f4 <flashc_set_bus_freq+0x2a>
  {
    // Set 1 WS.
    flashc_set_wait_state(1);
800248ec:	30 1c       	mov	r12,1
800248ee:	f0 16 00 a1 	mcall	r6[644]
800248f2:	c0 48       	rjmp	800248fa <flashc_set_bus_freq+0x30>
  }
  else
  {
    // Set 0 WS.
    flashc_set_wait_state(0);
800248f4:	30 0c       	mov	r12,0
800248f6:	f0 16 00 a1 	mcall	r6[644]
  }
}
800248fa:	2f fd       	sub	sp,-4
800248fc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024900:	80 02       	ld.sh	r2,r0[0x0]
80024902:	47 58       	lddsp	r8,sp[0x1d4]

80024904 <flashc_is_ready_int_enabled>:

bool flashc_is_ready_int_enabled(void)
{
80024904:	eb cd 40 80 	pushm	r7,lr
80024908:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_FRDY_MASK) != 0);
8002490a:	fe 68 00 00 	mov	r8,-131072
8002490e:	70 08       	ld.w	r8,r8[0x0]
80024910:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024914:	5c 58       	castu.b	r8
}
80024916:	10 9c       	mov	r12,r8
80024918:	e3 cd 80 80 	ldm	sp++,r7,pc

8002491c <flashc_enable_ready_int>:


void flashc_enable_ready_int(bool enable)
{
8002491c:	eb cd 40 80 	pushm	r7,lr
80024920:	1a 97       	mov	r7,sp
80024922:	20 2d       	sub	sp,8
80024924:	18 98       	mov	r8,r12
80024926:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
8002492a:	fe 68 00 00 	mov	r8,-131072
8002492e:	70 08       	ld.w	r8,r8[0x0]
80024930:	30 09       	mov	r9,0
80024932:	ef 49 ff fc 	st.w	r7[-4],r9
80024936:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.frdy = (enable != false);
8002493a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002493e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024942:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80024946:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
8002494a:	fe 68 00 00 	mov	r8,-131072
8002494e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024952:	91 09       	st.w	r8[0x0],r9
}
80024954:	2f ed       	sub	sp,-8
80024956:	e3 cd 80 80 	ldm	sp++,r7,pc

8002495a <flashc_is_lock_error_int_enabled>:


bool flashc_is_lock_error_int_enabled(void)
{
8002495a:	eb cd 40 80 	pushm	r7,lr
8002495e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_LOCKE_MASK) != 0);
80024960:	fe 68 00 00 	mov	r8,-131072
80024964:	70 08       	ld.w	r8,r8[0x0]
80024966:	e2 18 00 04 	andl	r8,0x4,COH
8002496a:	5f 18       	srne	r8
8002496c:	5c 58       	castu.b	r8
}
8002496e:	10 9c       	mov	r12,r8
80024970:	e3 cd 80 80 	ldm	sp++,r7,pc

80024974 <flashc_enable_lock_error_int>:


void flashc_enable_lock_error_int(bool enable)
{
80024974:	eb cd 40 80 	pushm	r7,lr
80024978:	1a 97       	mov	r7,sp
8002497a:	20 2d       	sub	sp,8
8002497c:	18 98       	mov	r8,r12
8002497e:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
80024982:	fe 68 00 00 	mov	r8,-131072
80024986:	70 08       	ld.w	r8,r8[0x0]
80024988:	30 09       	mov	r9,0
8002498a:	ef 49 ff fc 	st.w	r7[-4],r9
8002498e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.locke = (enable != false);
80024992:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024996:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002499a:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
8002499e:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800249a2:	fe 68 00 00 	mov	r8,-131072
800249a6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800249aa:	91 09       	st.w	r8[0x0],r9
}
800249ac:	2f ed       	sub	sp,-8
800249ae:	e3 cd 80 80 	ldm	sp++,r7,pc

800249b2 <flashc_is_prog_error_int_enabled>:


bool flashc_is_prog_error_int_enabled(void)
{
800249b2:	eb cd 40 80 	pushm	r7,lr
800249b6:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fcr & AVR32_FLASHC_FCR_PROGE_MASK) != 0);
800249b8:	fe 68 00 00 	mov	r8,-131072
800249bc:	70 08       	ld.w	r8,r8[0x0]
800249be:	e2 18 00 08 	andl	r8,0x8,COH
800249c2:	5f 18       	srne	r8
800249c4:	5c 58       	castu.b	r8
}
800249c6:	10 9c       	mov	r12,r8
800249c8:	e3 cd 80 80 	ldm	sp++,r7,pc

800249cc <flashc_enable_prog_error_int>:


void flashc_enable_prog_error_int(bool enable)
{
800249cc:	eb cd 40 80 	pushm	r7,lr
800249d0:	1a 97       	mov	r7,sp
800249d2:	20 2d       	sub	sp,8
800249d4:	18 98       	mov	r8,r12
800249d6:	ef 68 ff f8 	st.b	r7[-8],r8
  u_avr32_flashc_fcr_t u_avr32_flashc_fcr = {AVR32_FLASHC.fcr};
800249da:	fe 68 00 00 	mov	r8,-131072
800249de:	70 08       	ld.w	r8,r8[0x0]
800249e0:	30 09       	mov	r9,0
800249e2:	ef 49 ff fc 	st.w	r7[-4],r9
800249e6:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcr.FCR.proge = (enable != false);
800249ea:	ee f8 ff fc 	ld.w	r8,r7[-4]
800249ee:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800249f2:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
800249f6:	ef 48 ff fc 	st.w	r7[-4],r8
  AVR32_FLASHC.fcr = u_avr32_flashc_fcr.fcr;
800249fa:	fe 68 00 00 	mov	r8,-131072
800249fe:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024a02:	91 09       	st.w	r8[0x0],r9
}
80024a04:	2f ed       	sub	sp,-8
80024a06:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a0a <flashc_is_ready>:
 */
//! @{


bool flashc_is_ready(void)
{
80024a0a:	eb cd 40 80 	pushm	r7,lr
80024a0e:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_FRDY_MASK) != 0);
80024a10:	fe 68 00 00 	mov	r8,-131072
80024a14:	70 28       	ld.w	r8,r8[0x8]
80024a16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024a1a:	5c 58       	castu.b	r8
}
80024a1c:	10 9c       	mov	r12,r8
80024a1e:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a22 <flashc_default_wait_until_ready>:


void flashc_default_wait_until_ready(void)
{
80024a22:	eb cd 40 c0 	pushm	r6-r7,lr
80024a26:	1a 97       	mov	r7,sp
80024a28:	48 66       	lddpc	r6,80024a40 <flashc_default_wait_until_ready+0x1e>
80024a2a:	1e 26       	rsub	r6,pc
  while (!flashc_is_ready());
80024a2c:	f0 16 01 b2 	mcall	r6[1736]
80024a30:	18 98       	mov	r8,r12
80024a32:	ec 18 00 01 	eorl	r8,0x1
80024a36:	5c 58       	castu.b	r8
80024a38:	cf a1       	brne	80024a2c <flashc_default_wait_until_ready+0xa>
}
80024a3a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a3e:	00 00       	add	r0,r0
80024a40:	80 02       	ld.sh	r2,r0[0x0]
80024a42:	48 ae       	lddpc	lr,80024a68 <flashc_is_lock_error+0xe>

80024a44 <flashc_get_error_status>:
 *          Flash Status Register (FSR). This function is therefore not part of
 *          the driver's API which instead presents \ref flashc_is_lock_error
 *          and \ref flashc_is_programming_error.
 */
static unsigned int flashc_get_error_status(void)
{
80024a44:	eb cd 40 80 	pushm	r7,lr
80024a48:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fsr & (AVR32_FLASHC_FSR_LOCKE_MASK |
80024a4a:	fe 68 00 00 	mov	r8,-131072
80024a4e:	70 28       	ld.w	r8,r8[0x8]
80024a50:	e2 18 00 0c 	andl	r8,0xc,COH
                             AVR32_FLASHC_FSR_PROGE_MASK);
}
80024a54:	10 9c       	mov	r12,r8
80024a56:	e3 cd 80 80 	ldm	sp++,r7,pc

80024a5a <flashc_is_lock_error>:
//! by a function.
static unsigned int flashc_error_status = 0;


bool flashc_is_lock_error(void)
{
80024a5a:	eb cd 40 c0 	pushm	r6-r7,lr
80024a5e:	1a 97       	mov	r7,sp
80024a60:	48 66       	lddpc	r6,80024a78 <flashc_is_lock_error+0x1e>
80024a62:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_LOCKE_MASK) != 0);
80024a64:	ec f8 00 54 	ld.w	r8,r6[84]
80024a68:	70 08       	ld.w	r8,r8[0x0]
80024a6a:	e2 18 00 04 	andl	r8,0x4,COH
80024a6e:	5f 18       	srne	r8
80024a70:	5c 58       	castu.b	r8
}
80024a72:	10 9c       	mov	r12,r8
80024a74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a78:	80 02       	ld.sh	r2,r0[0x0]
80024a7a:	48 e6       	lddpc	r6,80024ab0 <flashc_get_command+0x10>

80024a7c <flashc_is_programming_error>:


bool flashc_is_programming_error(void)
{
80024a7c:	eb cd 40 c0 	pushm	r6-r7,lr
80024a80:	1a 97       	mov	r7,sp
80024a82:	48 76       	lddpc	r6,80024a9c <flashc_is_programming_error+0x20>
80024a84:	1e 26       	rsub	r6,pc
  return ((flashc_error_status & AVR32_FLASHC_FSR_PROGE_MASK) != 0);
80024a86:	ec f8 00 54 	ld.w	r8,r6[84]
80024a8a:	70 08       	ld.w	r8,r8[0x0]
80024a8c:	e2 18 00 08 	andl	r8,0x8,COH
80024a90:	5f 18       	srne	r8
80024a92:	5c 58       	castu.b	r8
}
80024a94:	10 9c       	mov	r12,r8
80024a96:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024a9a:	00 00       	add	r0,r0
80024a9c:	80 02       	ld.sh	r2,r0[0x0]
80024a9e:	49 08       	lddpc	r8,80024adc <flashc_issue_command+0xa>

80024aa0 <flashc_get_command>:
 */
//! @{


unsigned int flashc_get_command(void)
{
80024aa0:	eb cd 40 80 	pushm	r7,lr
80024aa4:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_CMD_MASK) >> AVR32_FLASHC_FCMD_CMD_OFFSET;
80024aa6:	fe 68 00 00 	mov	r8,-131072
80024aaa:	70 18       	ld.w	r8,r8[0x4]
80024aac:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80024ab0:	10 9c       	mov	r12,r8
80024ab2:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ab6 <flashc_get_page_number>:


unsigned int flashc_get_page_number(void)
{
80024ab6:	eb cd 40 80 	pushm	r7,lr
80024aba:	1a 97       	mov	r7,sp
  return (AVR32_FLASHC.fcmd & AVR32_FLASHC_FCMD_PAGEN_MASK) >> AVR32_FLASHC_FCMD_PAGEN_OFFSET;
80024abc:	fe 68 00 00 	mov	r8,-131072
80024ac0:	70 18       	ld.w	r8,r8[0x4]
80024ac2:	e4 18 00 ff 	andh	r8,0xff
80024ac6:	e0 18 ff 00 	andl	r8,0xff00
80024aca:	a9 88       	lsr	r8,0x8
}
80024acc:	10 9c       	mov	r12,r8
80024ace:	e3 cd 80 80 	ldm	sp++,r7,pc

80024ad2 <flashc_issue_command>:


void flashc_issue_command(unsigned int command, int page_number)
{
80024ad2:	eb cd 40 c0 	pushm	r6-r7,lr
80024ad6:	1a 97       	mov	r7,sp
80024ad8:	20 3d       	sub	sp,12
80024ada:	4a 06       	lddpc	r6,80024b58 <flashc_issue_command+0x86>
80024adc:	1e 26       	rsub	r6,pc
80024ade:	ef 4c ff f8 	st.w	r7[-8],r12
80024ae2:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_flashc_fcmd_t u_avr32_flashc_fcmd;
  flashc_wait_until_ready();
80024ae6:	ec f8 04 c4 	ld.w	r8,r6[1220]
80024aea:	70 08       	ld.w	r8,r8[0x0]
80024aec:	5d 18       	icall	r8
  u_avr32_flashc_fcmd.fcmd = AVR32_FLASHC.fcmd;
80024aee:	fe 68 00 00 	mov	r8,-131072
80024af2:	70 18       	ld.w	r8,r8[0x4]
80024af4:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.cmd = command;
80024af8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024afc:	5c 58       	castu.b	r8
80024afe:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80024b02:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80024b06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b0a:	f1 d9 d0 06 	bfins	r8,r9,0x0,0x6
80024b0e:	ef 48 ff fc 	st.w	r7[-4],r8
  if (page_number >= 0) u_avr32_flashc_fcmd.FCMD.pagen = page_number;
80024b12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b16:	58 08       	cp.w	r8,0
80024b18:	c0 b5       	brlt	80024b2e <flashc_issue_command+0x5c>
80024b1a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024b1e:	f3 d8 b0 10 	bfexts	r9,r8,0x0,0x10
80024b22:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024b26:	f1 d9 d1 10 	bfins	r8,r9,0x8,0x10
80024b2a:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_flashc_fcmd.FCMD.key = AVR32_FLASHC_FCMD_KEY_KEY;
80024b2e:	3a 58       	mov	r8,-91
80024b30:	ef 68 ff fc 	st.b	r7[-4],r8
  AVR32_FLASHC.fcmd = u_avr32_flashc_fcmd.fcmd;
80024b34:	fe 68 00 00 	mov	r8,-131072
80024b38:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024b3c:	91 19       	st.w	r8[0x4],r9
  flashc_error_status = flashc_get_error_status();
80024b3e:	c8 3f       	rcall	80024a44 <flashc_get_error_status>
80024b40:	18 99       	mov	r9,r12
80024b42:	ec f8 00 54 	ld.w	r8,r6[84]
80024b46:	91 09       	st.w	r8[0x0],r9
  flashc_wait_until_ready();
80024b48:	ec f8 04 c4 	ld.w	r8,r6[1220]
80024b4c:	70 08       	ld.w	r8,r8[0x0]
80024b4e:	5d 18       	icall	r8
}
80024b50:	2f dd       	sub	sp,-12
80024b52:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b56:	00 00       	add	r0,r0
80024b58:	80 02       	ld.sh	r2,r0[0x0]
80024b5a:	49 60       	lddpc	r0,80024bb0 <flashc_activate_security_bit+0x2>

80024b5c <flashc_no_operation>:
 */
//! @{


void flashc_no_operation(void)
{
80024b5c:	eb cd 40 c0 	pushm	r6-r7,lr
80024b60:	1a 97       	mov	r7,sp
80024b62:	48 56       	lddpc	r6,80024b74 <flashc_no_operation+0x18>
80024b64:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_NOP, -1);
80024b66:	3f fb       	mov	r11,-1
80024b68:	30 0c       	mov	r12,0
80024b6a:	f0 16 00 2a 	mcall	r6[168]
}
80024b6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b72:	00 00       	add	r0,r0
80024b74:	80 02       	ld.sh	r2,r0[0x0]
80024b76:	49 e8       	lddpc	r8,80024bec <flashc_get_bootloader_protected_size+0x24>

80024b78 <flashc_erase_all>:


void flashc_erase_all(void)
{
80024b78:	eb cd 40 c0 	pushm	r6-r7,lr
80024b7c:	1a 97       	mov	r7,sp
80024b7e:	48 56       	lddpc	r6,80024b90 <flashc_erase_all+0x18>
80024b80:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EA, -1);
80024b82:	3f fb       	mov	r11,-1
80024b84:	30 6c       	mov	r12,6
80024b86:	f0 16 00 2a 	mcall	r6[168]
}
80024b8a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024b8e:	00 00       	add	r0,r0
80024b90:	80 02       	ld.sh	r2,r0[0x0]
80024b92:	4a 04       	lddpc	r4,80024c10 <flashc_set_bootloader_protected_size+0x4>

80024b94 <flashc_is_security_bit_active>:
 */
//! @{


bool flashc_is_security_bit_active(void)
{
80024b94:	eb cd 40 80 	pushm	r7,lr
80024b98:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_SECURITY_MASK) != 0);
80024b9a:	fe 68 00 00 	mov	r8,-131072
80024b9e:	70 28       	ld.w	r8,r8[0x8]
80024ba0:	e2 18 00 10 	andl	r8,0x10,COH
80024ba4:	5f 18       	srne	r8
80024ba6:	5c 58       	castu.b	r8
}
80024ba8:	10 9c       	mov	r12,r8
80024baa:	e3 cd 80 80 	ldm	sp++,r7,pc

80024bae <flashc_activate_security_bit>:


void flashc_activate_security_bit(void)
{
80024bae:	eb cd 40 c0 	pushm	r6-r7,lr
80024bb2:	1a 97       	mov	r7,sp
80024bb4:	48 46       	lddpc	r6,80024bc4 <flashc_activate_security_bit+0x16>
80024bb6:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_SSB, -1);
80024bb8:	3f fb       	mov	r11,-1
80024bba:	30 9c       	mov	r12,9
80024bbc:	f0 16 00 2a 	mcall	r6[168]
}
80024bc0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024bc4:	80 02       	ld.sh	r2,r0[0x0]
80024bc6:	4a 3a       	lddpc	r10,80024c50 <flashc_set_bootloader_protected_size+0x44>

80024bc8 <flashc_get_bootloader_protected_size>:


unsigned int flashc_get_bootloader_protected_size(void)
{
80024bc8:	eb cd 40 c0 	pushm	r6-r7,lr
80024bcc:	1a 97       	mov	r7,sp
80024bce:	20 1d       	sub	sp,4
80024bd0:	48 e6       	lddpc	r6,80024c08 <flashc_get_bootloader_protected_size+0x40>
80024bd2:	1e 26       	rsub	r6,pc
  unsigned int bootprot = (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                          flashc_read_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
                                                       AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE);
80024bd4:	30 3b       	mov	r11,3
80024bd6:	31 1c       	mov	r12,17
80024bd8:	f0 16 01 32 	mcall	r6[1224]
80024bdc:	14 98       	mov	r8,r10
80024bde:	16 99       	mov	r9,r11
80024be0:	f0 08 11 07 	rsub	r8,r8,7
80024be4:	ef 48 ff fc 	st.w	r7[-4],r8
  return (bootprot) ? AVR32_FLASHC_PAGE_SIZE << bootprot : 0;
80024be8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024bec:	58 08       	cp.w	r8,0
80024bee:	c0 80       	breq	80024bfe <flashc_get_bootloader_protected_size+0x36>
80024bf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024bf4:	e0 69 02 00 	mov	r9,512
80024bf8:	f2 08 09 48 	lsl	r8,r9,r8
80024bfc:	c0 28       	rjmp	80024c00 <flashc_get_bootloader_protected_size+0x38>
80024bfe:	30 08       	mov	r8,0
}
80024c00:	10 9c       	mov	r12,r8
80024c02:	2f fd       	sub	sp,-4
80024c04:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024c08:	80 02       	ld.sh	r2,r0[0x0]
80024c0a:	4a 56       	lddpc	r6,80024c9c <flashc_set_bootloader_protected_size+0x90>

80024c0c <flashc_set_bootloader_protected_size>:


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
80024c0c:	eb cd 40 c0 	pushm	r6-r7,lr
80024c10:	1a 97       	mov	r7,sp
80024c12:	20 7d       	sub	sp,28
80024c14:	4a 46       	lddpc	r6,80024ca4 <flashc_set_bootloader_protected_size+0x98>
80024c16:	1e 26       	rsub	r6,pc
80024c18:	ef 4c ff e4 	st.w	r7[-28],r12
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80024c1c:	ee fa ff e4 	ld.w	r10,r7[-28]
80024c20:	58 0a       	cp.w	r10,0
80024c22:	c3 40       	breq	80024c8a <flashc_set_bootloader_protected_size+0x7e>
                              AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE,
                              (1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1 -
                              ((bootprot_size) ?
                               32 - clz((((min(max(bootprot_size, AVR32_FLASHC_PAGE_SIZE << 1),
80024c24:	ee fa ff e4 	ld.w	r10,r7[-28]
80024c28:	ef 4a ff f8 	st.w	r7[-8],r10
80024c2c:	e0 6a 04 00 	mov	r10,1024
80024c30:	ef 4a ff fc 	st.w	r7[-4],r10
80024c34:	ee fa ff f8 	ld.w	r10,r7[-8]
80024c38:	ee fb ff fc 	ld.w	r11,r7[-4]
80024c3c:	f4 0b 0c 4a 	max	r10,r10,r11
80024c40:	ef 4a ff f4 	st.w	r7[-12],r10
80024c44:	ee fa ff f4 	ld.w	r10,r7[-12]
80024c48:	ef 4a ff ec 	st.w	r7[-20],r10
80024c4c:	e0 7a 00 00 	mov	r10,65536
80024c50:	ef 4a ff f0 	st.w	r7[-16],r10
80024c54:	ee fa ff ec 	ld.w	r10,r7[-20]
80024c58:	ee fb ff f0 	ld.w	r11,r7[-16]
80024c5c:	f4 0b 0d 4a 	min	r10,r10,r11
80024c60:	ef 4a ff e8 	st.w	r7[-24],r10
80024c64:	ee fa ff e8 	ld.w	r10,r7[-24]
80024c68:	f4 ca fe 01 	sub	r10,r10,-511
80024c6c:	f4 cb fe 01 	sub	r11,r10,-511
80024c70:	58 0a       	cp.w	r10,0
80024c72:	f6 0a 17 50 	movlt	r10,r11
80024c76:	a9 5a       	asr	r10,0x9
80024c78:	a1 7a       	lsl	r10,0x1
80024c7a:	20 1a       	sub	r10,1
}


unsigned int flashc_set_bootloader_protected_size(unsigned int bootprot_size)
{
  flashc_set_gp_fuse_bitfield(AVR32_FLASHC_FGPFRLO_BOOTPROT_OFFSET,
80024c7c:	f4 0a 12 00 	clz	r10,r10
80024c80:	21 8a       	sub	r10,24
80024c82:	14 98       	mov	r8,r10
80024c84:	bf 5a       	asr	r10,0x1f
80024c86:	14 99       	mov	r9,r10
80024c88:	c0 38       	rjmp	80024c8e <flashc_set_bootloader_protected_size+0x82>
80024c8a:	30 78       	mov	r8,7
80024c8c:	30 09       	mov	r9,0
80024c8e:	30 3b       	mov	r11,3
80024c90:	31 1c       	mov	r12,17
80024c92:	f0 16 01 5e 	mcall	r6[1400]
                                               AVR32_FLASHC_PAGE_SIZE <<
                                               ((1 << AVR32_FLASHC_FGPFRLO_BOOTPROT_SIZE) - 1)) +
                                           AVR32_FLASHC_PAGE_SIZE - 1) /
                                          AVR32_FLASHC_PAGE_SIZE) << 1) - 1) - 1 :
                               0));
  return flashc_get_bootloader_protected_size();
80024c96:	f0 16 01 6f 	mcall	r6[1468]
80024c9a:	18 98       	mov	r8,r12
}
80024c9c:	10 9c       	mov	r12,r8
80024c9e:	2f 9d       	sub	sp,-28
80024ca0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024ca4:	80 02       	ld.sh	r2,r0[0x0]
80024ca6:	4a 9a       	lddpc	r10,80024d48 <flashc_is_region_locked+0x1c>

80024ca8 <flashc_is_external_privileged_fetch_locked>:


bool flashc_is_external_privileged_fetch_locked(void)
{
80024ca8:	eb cd 40 c0 	pushm	r6-r7,lr
80024cac:	1a 97       	mov	r7,sp
80024cae:	48 76       	lddpc	r6,80024cc8 <flashc_is_external_privileged_fetch_locked+0x20>
80024cb0:	1e 26       	rsub	r6,pc
  return (!flashc_read_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET));
80024cb2:	31 0c       	mov	r12,16
80024cb4:	f0 16 00 fa 	mcall	r6[1000]
80024cb8:	18 98       	mov	r8,r12
80024cba:	ec 18 00 01 	eorl	r8,0x1
80024cbe:	5c 58       	castu.b	r8
80024cc0:	5c 58       	castu.b	r8
}
80024cc2:	10 9c       	mov	r12,r8
80024cc4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cc8:	80 02       	ld.sh	r2,r0[0x0]
80024cca:	4b 34       	lddpc	r4,80024d94 <flashc_lock_page_region+0x36>

80024ccc <flashc_lock_external_privileged_fetch>:


void flashc_lock_external_privileged_fetch(bool lock)
{
80024ccc:	eb cd 40 c0 	pushm	r6-r7,lr
80024cd0:	1a 97       	mov	r7,sp
80024cd2:	20 1d       	sub	sp,4
80024cd4:	48 96       	lddpc	r6,80024cf8 <flashc_lock_external_privileged_fetch+0x2c>
80024cd6:	1e 26       	rsub	r6,pc
80024cd8:	18 98       	mov	r8,r12
80024cda:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_set_gp_fuse_bit(AVR32_FLASHC_FGPFRLO_EPFL_OFFSET, !lock);
80024cde:	ef 38 ff fc 	ld.ub	r8,r7[-4]
80024ce2:	ec 18 00 01 	eorl	r8,0x1
80024ce6:	5c 58       	castu.b	r8
80024ce8:	5c 58       	castu.b	r8
80024cea:	10 9b       	mov	r11,r8
80024cec:	31 0c       	mov	r12,16
80024cee:	f0 16 01 22 	mcall	r6[1160]
}
80024cf2:	2f fd       	sub	sp,-4
80024cf4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024cf8:	80 02       	ld.sh	r2,r0[0x0]
80024cfa:	4b 5a       	lddpc	r10,80024dcc <flashc_lock_region+0x30>

80024cfc <flashc_is_page_region_locked>:


bool flashc_is_page_region_locked(int page_number)
{
80024cfc:	eb cd 40 c0 	pushm	r6-r7,lr
80024d00:	1a 97       	mov	r7,sp
80024d02:	20 1d       	sub	sp,4
80024d04:	48 96       	lddpc	r6,80024d28 <flashc_is_page_region_locked+0x2c>
80024d06:	1e 26       	rsub	r6,pc
80024d08:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_is_region_locked(flashc_get_page_region(page_number));
80024d0c:	ee fc ff fc 	ld.w	r12,r7[-4]
80024d10:	f0 16 01 98 	mcall	r6[1632]
80024d14:	18 98       	mov	r8,r12
80024d16:	10 9c       	mov	r12,r8
80024d18:	f0 16 01 47 	mcall	r6[1308]
80024d1c:	18 98       	mov	r8,r12
}
80024d1e:	10 9c       	mov	r12,r8
80024d20:	2f fd       	sub	sp,-4
80024d22:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d26:	00 00       	add	r0,r0
80024d28:	80 02       	ld.sh	r2,r0[0x0]
80024d2a:	4b 8a       	lddpc	r10,80024e08 <flashc_lock_all_regions+0x34>

80024d2c <flashc_is_region_locked>:


bool flashc_is_region_locked(unsigned int region)
{
80024d2c:	eb cd 40 80 	pushm	r7,lr
80024d30:	1a 97       	mov	r7,sp
80024d32:	20 1d       	sub	sp,4
80024d34:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_LOCK0_MASK << (region & (AVR32_FLASHC_REGIONS - 1))) != 0);
80024d38:	fe 68 00 00 	mov	r8,-131072
80024d3c:	70 29       	ld.w	r9,r8[0x8]
80024d3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024d42:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80024d46:	e0 7a 00 00 	mov	r10,65536
80024d4a:	f4 08 09 48 	lsl	r8,r10,r8
80024d4e:	f3 e8 00 08 	and	r8,r9,r8
80024d52:	5f 18       	srne	r8
80024d54:	5c 58       	castu.b	r8
}
80024d56:	10 9c       	mov	r12,r8
80024d58:	2f fd       	sub	sp,-4
80024d5a:	e3 cd 80 80 	ldm	sp++,r7,pc

80024d5e <flashc_lock_page_region>:


void flashc_lock_page_region(int page_number, bool lock)
{
80024d5e:	eb cd 40 c0 	pushm	r6-r7,lr
80024d62:	1a 97       	mov	r7,sp
80024d64:	20 2d       	sub	sp,8
80024d66:	48 d6       	lddpc	r6,80024d98 <flashc_lock_page_region+0x3a>
80024d68:	1e 26       	rsub	r6,pc
80024d6a:	ef 4c ff fc 	st.w	r7[-4],r12
80024d6e:	16 98       	mov	r8,r11
80024d70:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command((lock) ? AVR32_FLASHC_FCMD_CMD_LP : AVR32_FLASHC_FCMD_CMD_UP, page_number);
80024d74:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80024d78:	30 08       	mov	r8,0
80024d7a:	f0 09 18 00 	cp.b	r9,r8
80024d7e:	c0 30       	breq	80024d84 <flashc_lock_page_region+0x26>
80024d80:	30 48       	mov	r8,4
80024d82:	c0 28       	rjmp	80024d86 <flashc_lock_page_region+0x28>
80024d84:	30 58       	mov	r8,5
80024d86:	ee fb ff fc 	ld.w	r11,r7[-4]
80024d8a:	10 9c       	mov	r12,r8
80024d8c:	f0 16 00 2a 	mcall	r6[168]
}
80024d90:	2f ed       	sub	sp,-8
80024d92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024d96:	00 00       	add	r0,r0
80024d98:	80 02       	ld.sh	r2,r0[0x0]
80024d9a:	4b ec       	lddpc	r12,80024e90 <flashc_read_gp_fuse_bit+0x54>

80024d9c <flashc_lock_region>:


void flashc_lock_region(unsigned int region, bool lock)
{
80024d9c:	eb cd 40 e0 	pushm	r5-r7,lr
80024da0:	1a 97       	mov	r7,sp
80024da2:	20 2d       	sub	sp,8
80024da4:	48 b6       	lddpc	r6,80024dd0 <flashc_lock_region+0x34>
80024da6:	1e 26       	rsub	r6,pc
80024da8:	ef 4c ff fc 	st.w	r7[-4],r12
80024dac:	16 98       	mov	r8,r11
80024dae:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_lock_page_region(flashc_get_region_first_page_number(region), lock);
80024db2:	ef 35 ff f8 	ld.ub	r5,r7[-8]
80024db6:	ee fc ff fc 	ld.w	r12,r7[-4]
80024dba:	f0 16 01 7f 	mcall	r6[1532]
80024dbe:	18 98       	mov	r8,r12
80024dc0:	0a 9b       	mov	r11,r5
80024dc2:	10 9c       	mov	r12,r8
80024dc4:	f0 16 01 fd 	mcall	r6[2036]
}
80024dc8:	2f ed       	sub	sp,-8
80024dca:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
80024dce:	00 00       	add	r0,r0
80024dd0:	80 02       	ld.sh	r2,r0[0x0]
80024dd2:	4c 2a       	lddpc	r10,80024ed8 <flashc_read_gp_fuse_bitfield+0x38>

80024dd4 <flashc_lock_all_regions>:


void flashc_lock_all_regions(bool lock)
{
80024dd4:	eb cd 40 c0 	pushm	r6-r7,lr
80024dd8:	1a 97       	mov	r7,sp
80024dda:	20 3d       	sub	sp,12
80024ddc:	49 76       	lddpc	r6,80024e38 <flashc_lock_all_regions+0x64>
80024dde:	1e 26       	rsub	r6,pc
80024de0:	18 98       	mov	r8,r12
80024de2:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status = 0;
80024de6:	30 08       	mov	r8,0
80024de8:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int region = AVR32_FLASHC_REGIONS;
80024dec:	31 08       	mov	r8,16
80024dee:	ef 48 ff fc 	st.w	r7[-4],r8
  while (region)
80024df2:	c1 68       	rjmp	80024e1e <flashc_lock_all_regions+0x4a>
  {
    flashc_lock_region(--region, lock);
80024df4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80024df8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024dfc:	20 19       	sub	r9,1
80024dfe:	ef 49 ff fc 	st.w	r7[-4],r9
80024e02:	10 9b       	mov	r11,r8
80024e04:	ee fc ff fc 	ld.w	r12,r7[-4]
80024e08:	f0 16 01 5f 	mcall	r6[1404]
    error_status |= flashc_error_status;
80024e0c:	ec f8 00 54 	ld.w	r8,r6[84]
80024e10:	70 08       	ld.w	r8,r8[0x0]
80024e12:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024e16:	f3 e8 10 08 	or	r8,r9,r8
80024e1a:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_lock_all_regions(bool lock)
{
  unsigned int error_status = 0;
  unsigned int region = AVR32_FLASHC_REGIONS;
  while (region)
80024e1e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80024e22:	58 08       	cp.w	r8,0
80024e24:	ce 81       	brne	80024df4 <flashc_lock_all_regions+0x20>
  {
    flashc_lock_region(--region, lock);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80024e26:	ec f8 00 54 	ld.w	r8,r6[84]
80024e2a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80024e2e:	91 09       	st.w	r8[0x0],r9
}
80024e30:	2f dd       	sub	sp,-12
80024e32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80024e36:	00 00       	add	r0,r0
80024e38:	80 02       	ld.sh	r2,r0[0x0]
80024e3a:	4c 62       	lddpc	r2,80024f50 <flashc_read_gp_fuse_bitfield+0xb0>

80024e3c <flashc_read_gp_fuse_bit>:
 */
//! @{


bool flashc_read_gp_fuse_bit(unsigned int gp_fuse_bit)
{
80024e3c:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024e40:	1a 97       	mov	r7,sp
80024e42:	20 1d       	sub	sp,4
80024e44:	49 66       	lddpc	r6,80024e9c <flashc_read_gp_fuse_bit+0x60>
80024e46:	1e 26       	rsub	r6,pc
80024e48:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((flashc_read_all_gp_fuses() & 1ULL << (gp_fuse_bit & 0x3F)) != 0);
80024e4c:	f0 16 00 7a 	mcall	r6[488]
80024e50:	14 98       	mov	r8,r10
80024e52:	16 99       	mov	r9,r11
80024e54:	ee fa ff fc 	ld.w	r10,r7[-4]
80024e58:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80024e5c:	14 9b       	mov	r11,r10
80024e5e:	e2 1b 00 20 	andl	r11,0x20,COH
80024e62:	30 0c       	mov	r12,0
80024e64:	f2 05 15 01 	lsl	r5,r9,0x1
80024e68:	14 9e       	mov	lr,r10
80024e6a:	ee 1e ff ff 	eorh	lr,0xffff
80024e6e:	ec 1e ff ff 	eorl	lr,0xffff
80024e72:	ea 0e 09 4e 	lsl	lr,r5,lr
80024e76:	f0 0a 0a 42 	lsr	r2,r8,r10
80024e7a:	fd e2 10 02 	or	r2,lr,r2
80024e7e:	f2 0a 0a 43 	lsr	r3,r9,r10
80024e82:	58 0b       	cp.w	r11,0
80024e84:	e6 02 17 10 	movne	r2,r3
80024e88:	f8 03 17 10 	movne	r3,r12
80024e8c:	04 98       	mov	r8,r2
80024e8e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80024e92:	5c 58       	castu.b	r8
}
80024e94:	10 9c       	mov	r12,r8
80024e96:	2f fd       	sub	sp,-4
80024e98:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80024e9c:	80 02       	ld.sh	r2,r0[0x0]
80024e9e:	4c ca       	lddpc	r10,80024fcc <flashc_read_gp_fuse_byte+0x5c>

80024ea0 <flashc_read_gp_fuse_bitfield>:


U64 flashc_read_gp_fuse_bitfield(unsigned int pos, unsigned int width)
{
80024ea0:	eb cd 40 ef 	pushm	r0-r3,r5-r7,lr
80024ea4:	1a 97       	mov	r7,sp
80024ea6:	20 5d       	sub	sp,20
80024ea8:	4b 16       	lddpc	r6,80024f6c <flashc_read_gp_fuse_bitfield+0xcc>
80024eaa:	1e 26       	rsub	r6,pc
80024eac:	ef 4c ff f0 	st.w	r7[-16],r12
80024eb0:	ef 4b ff ec 	st.w	r7[-20],r11
  return flashc_read_all_gp_fuses() >> (pos & 0x3F) & ((1ULL << min(width, 64)) - 1);
80024eb4:	f0 16 00 7a 	mcall	r6[488]
80024eb8:	14 98       	mov	r8,r10
80024eba:	16 99       	mov	r9,r11
80024ebc:	ee fa ff f0 	ld.w	r10,r7[-16]
80024ec0:	f5 da c0 06 	bfextu	r10,r10,0x0,0x6
80024ec4:	14 9b       	mov	r11,r10
80024ec6:	e2 1b 00 20 	andl	r11,0x20,COH
80024eca:	30 0c       	mov	r12,0
80024ecc:	f2 05 15 01 	lsl	r5,r9,0x1
80024ed0:	14 9e       	mov	lr,r10
80024ed2:	ee 1e ff ff 	eorh	lr,0xffff
80024ed6:	ec 1e ff ff 	eorl	lr,0xffff
80024eda:	ea 0e 09 4e 	lsl	lr,r5,lr
80024ede:	f0 0a 0a 42 	lsr	r2,r8,r10
80024ee2:	fd e2 10 02 	or	r2,lr,r2
80024ee6:	f2 0a 0a 43 	lsr	r3,r9,r10
80024eea:	58 0b       	cp.w	r11,0
80024eec:	e6 02 17 10 	movne	r2,r3
80024ef0:	f8 03 17 10 	movne	r3,r12
80024ef4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80024ef8:	ef 48 ff f8 	st.w	r7[-8],r8
80024efc:	34 08       	mov	r8,64
80024efe:	ef 48 ff fc 	st.w	r7[-4],r8
80024f02:	ee f8 ff f8 	ld.w	r8,r7[-8]
80024f06:	ee f9 ff fc 	ld.w	r9,r7[-4]
80024f0a:	f0 09 0d 48 	min	r8,r8,r9
80024f0e:	ef 48 ff f4 	st.w	r7[-12],r8
80024f12:	ee f8 ff f4 	ld.w	r8,r7[-12]
80024f16:	10 99       	mov	r9,r8
80024f18:	e2 19 00 20 	andl	r9,0x20,COH
80024f1c:	30 0a       	mov	r10,0
80024f1e:	30 1b       	mov	r11,1
80024f20:	f6 0c 16 01 	lsr	r12,r11,0x1
80024f24:	10 9b       	mov	r11,r8
80024f26:	ee 1b ff ff 	eorh	r11,0xffff
80024f2a:	ec 1b ff ff 	eorl	r11,0xffff
80024f2e:	f8 0b 0a 4b 	lsr	r11,r12,r11
80024f32:	30 0c       	mov	r12,0
80024f34:	f8 08 09 41 	lsl	r1,r12,r8
80024f38:	f7 e1 10 01 	or	r1,r11,r1
80024f3c:	30 1b       	mov	r11,1
80024f3e:	f6 08 09 40 	lsl	r0,r11,r8
80024f42:	58 09       	cp.w	r9,0
80024f44:	e0 01 17 10 	movne	r1,r0
80024f48:	f4 00 17 10 	movne	r0,r10
80024f4c:	3f f8       	mov	r8,-1
80024f4e:	3f f9       	mov	r9,-1
80024f50:	e0 08 00 0a 	add	r10,r0,r8
80024f54:	e2 09 00 4b 	adc	r11,r1,r9
80024f58:	e5 ea 00 08 	and	r8,r2,r10
80024f5c:	e7 eb 00 09 	and	r9,r3,r11
}
80024f60:	10 9a       	mov	r10,r8
80024f62:	12 9b       	mov	r11,r9
80024f64:	2f bd       	sub	sp,-20
80024f66:	e3 cd 80 ef 	ldm	sp++,r0-r3,r5-r7,pc
80024f6a:	00 00       	add	r0,r0
80024f6c:	80 02       	ld.sh	r2,r0[0x0]
80024f6e:	4d 2e       	lddpc	lr,800250b4 <flashc_erase_gp_fuse_bitfield+0x60>

80024f70 <flashc_read_gp_fuse_byte>:


U8 flashc_read_gp_fuse_byte(unsigned int gp_fuse_byte)
{
80024f70:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80024f74:	1a 97       	mov	r7,sp
80024f76:	20 1d       	sub	sp,4
80024f78:	49 66       	lddpc	r6,80024fd0 <flashc_read_gp_fuse_byte+0x60>
80024f7a:	1e 26       	rsub	r6,pc
80024f7c:	ef 4c ff fc 	st.w	r7[-4],r12
  return flashc_read_all_gp_fuses() >> ((gp_fuse_byte & 0x07) << 3);
80024f80:	f0 16 00 7a 	mcall	r6[488]
80024f84:	14 98       	mov	r8,r10
80024f86:	16 99       	mov	r9,r11
80024f88:	ee fa ff fc 	ld.w	r10,r7[-4]
80024f8c:	f5 da c0 03 	bfextu	r10,r10,0x0,0x3
80024f90:	a3 7a       	lsl	r10,0x3
80024f92:	14 9b       	mov	r11,r10
80024f94:	e2 1b 00 20 	andl	r11,0x20,COH
80024f98:	30 0c       	mov	r12,0
80024f9a:	f2 05 15 01 	lsl	r5,r9,0x1
80024f9e:	14 9e       	mov	lr,r10
80024fa0:	ee 1e ff ff 	eorh	lr,0xffff
80024fa4:	ec 1e ff ff 	eorl	lr,0xffff
80024fa8:	ea 0e 09 4e 	lsl	lr,r5,lr
80024fac:	f0 0a 0a 42 	lsr	r2,r8,r10
80024fb0:	fd e2 10 02 	or	r2,lr,r2
80024fb4:	f2 0a 0a 43 	lsr	r3,r9,r10
80024fb8:	58 0b       	cp.w	r11,0
80024fba:	e6 02 17 10 	movne	r2,r3
80024fbe:	f8 03 17 10 	movne	r3,r12
80024fc2:	f1 d2 c0 08 	bfextu	r8,r2,0x0,0x8
}
80024fc6:	10 9c       	mov	r12,r8
80024fc8:	2f fd       	sub	sp,-4
80024fca:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80024fce:	00 00       	add	r0,r0
80024fd0:	80 02       	ld.sh	r2,r0[0x0]
80024fd2:	4d fe       	lddpc	lr,8002514c <flashc_erase_gp_fuse_bitfield+0xf8>

80024fd4 <flashc_read_all_gp_fuses>:


U64 flashc_read_all_gp_fuses(void)
{
80024fd4:	eb cd 40 8c 	pushm	r2-r3,r7,lr
80024fd8:	1a 97       	mov	r7,sp
  return AVR32_FLASHC.fgpfrlo | (U64)AVR32_FLASHC.fgpfrhi << 32;
80024fda:	fe 6c 00 00 	mov	r12,-131072
80024fde:	78 6c       	ld.w	r12,r12[0x18]
80024fe0:	18 9a       	mov	r10,r12
80024fe2:	30 0b       	mov	r11,0
80024fe4:	fe 6c 00 00 	mov	r12,-131072
80024fe8:	78 5c       	ld.w	r12,r12[0x14]
80024fea:	18 92       	mov	r2,r12
80024fec:	30 03       	mov	r3,0
80024fee:	e4 09 15 00 	lsl	r9,r2,0x0
80024ff2:	30 08       	mov	r8,0
80024ff4:	f5 e8 10 02 	or	r2,r10,r8
80024ff8:	f7 e9 10 03 	or	r3,r11,r9
80024ffc:	04 98       	mov	r8,r2
80024ffe:	06 99       	mov	r9,r3
}
80025000:	10 9a       	mov	r10,r8
80025002:	12 9b       	mov	r11,r9
80025004:	e3 cd 80 8c 	ldm	sp++,r2-r3,r7,pc

80025008 <flashc_erase_gp_fuse_bit>:


bool flashc_erase_gp_fuse_bit(unsigned int gp_fuse_bit, bool check)
{
80025008:	eb cd 40 c0 	pushm	r6-r7,lr
8002500c:	1a 97       	mov	r7,sp
8002500e:	20 2d       	sub	sp,8
80025010:	49 06       	lddpc	r6,80025050 <flashc_erase_gp_fuse_bit+0x48>
80025012:	1e 26       	rsub	r6,pc
80025014:	ef 4c ff fc 	st.w	r7[-4],r12
80025018:	16 98       	mov	r8,r11
8002501a:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EGPB, gp_fuse_bit & 0x3F);
8002501e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025022:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80025026:	10 9b       	mov	r11,r8
80025028:	30 8c       	mov	r12,8
8002502a:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_read_gp_fuse_bit(gp_fuse_bit) : true;
8002502e:	ef 39 ff f8 	ld.ub	r9,r7[-8]
80025032:	30 08       	mov	r8,0
80025034:	f0 09 18 00 	cp.b	r9,r8
80025038:	c0 70       	breq	80025046 <flashc_erase_gp_fuse_bit+0x3e>
8002503a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002503e:	f0 16 00 fa 	mcall	r6[1000]
80025042:	18 98       	mov	r8,r12
80025044:	c0 28       	rjmp	80025048 <flashc_erase_gp_fuse_bit+0x40>
80025046:	30 18       	mov	r8,1
}
80025048:	10 9c       	mov	r12,r8
8002504a:	2f ed       	sub	sp,-8
8002504c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025050:	80 02       	ld.sh	r2,r0[0x0]
80025052:	4e 96       	lddpc	r6,800251f4 <flashc_erase_gp_fuse_byte+0x88>

80025054 <flashc_erase_gp_fuse_bitfield>:


bool flashc_erase_gp_fuse_bitfield(unsigned int pos, unsigned int width, bool check)
{
80025054:	eb cd 40 ec 	pushm	r2-r3,r5-r7,lr
80025058:	1a 97       	mov	r7,sp
8002505a:	20 8d       	sub	sp,32
8002505c:	4c 36       	lddpc	r6,80025168 <flashc_erase_gp_fuse_bitfield+0x114>
8002505e:	1e 26       	rsub	r6,pc
80025060:	ef 4c ff e8 	st.w	r7[-24],r12
80025064:	ef 4b ff e4 	st.w	r7[-28],r11
80025068:	14 98       	mov	r8,r10
8002506a:	ef 68 ff e0 	st.b	r7[-32],r8
  unsigned int error_status = 0;
8002506e:	30 08       	mov	r8,0
80025070:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
80025074:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025078:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
8002507c:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
80025080:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025084:	ef 48 ff f8 	st.w	r7[-8],r8
80025088:	34 08       	mov	r8,64
8002508a:	ef 48 ff fc 	st.w	r7[-4],r8
8002508e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025092:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025096:	f0 09 0d 48 	min	r8,r8,r9
8002509a:	ef 48 ff f4 	st.w	r7[-12],r8
8002509e:	ee f8 ff f4 	ld.w	r8,r7[-12]
800250a2:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
800250a6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800250aa:	ef 48 ff f0 	st.w	r7[-16],r8
800250ae:	c1 48       	rjmp	800250d6 <flashc_erase_gp_fuse_bitfield+0x82>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
800250b0:	30 0b       	mov	r11,0
800250b2:	ee fc ff f0 	ld.w	r12,r7[-16]
800250b6:	f0 16 00 f1 	mcall	r6[964]
    error_status |= flashc_error_status;
800250ba:	ec f8 00 54 	ld.w	r8,r6[84]
800250be:	70 08       	ld.w	r8,r8[0x0]
800250c0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800250c4:	f3 e8 10 08 	or	r8,r9,r8
800250c8:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++)
800250cc:	ee f8 ff f0 	ld.w	r8,r7[-16]
800250d0:	2f f8       	sub	r8,-1
800250d2:	ef 48 ff f0 	st.w	r7[-16],r8
800250d6:	ee f9 ff e8 	ld.w	r9,r7[-24]
800250da:	ee f8 ff e4 	ld.w	r8,r7[-28]
800250de:	10 09       	add	r9,r8
800250e0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800250e4:	10 39       	cp.w	r9,r8
800250e6:	fe 9b ff e5 	brhi	800250b0 <flashc_erase_gp_fuse_bitfield+0x5c>
  {
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
800250ea:	ec f8 00 54 	ld.w	r8,r6[84]
800250ee:	ee f9 ff ec 	ld.w	r9,r7[-20]
800250f2:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_bitfield(pos, width) == (1ULL << width) - 1) : true;
800250f4:	ef 39 ff e0 	ld.ub	r9,r7[-32]
800250f8:	30 08       	mov	r8,0
800250fa:	f0 09 18 00 	cp.b	r9,r8
800250fe:	c3 00       	breq	8002515e <flashc_erase_gp_fuse_bitfield+0x10a>
80025100:	ee fb ff e4 	ld.w	r11,r7[-28]
80025104:	ee fc ff e8 	ld.w	r12,r7[-24]
80025108:	f0 16 01 32 	mcall	r6[1224]
8002510c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025110:	10 99       	mov	r9,r8
80025112:	e2 19 00 20 	andl	r9,0x20,COH
80025116:	30 0c       	mov	r12,0
80025118:	30 1e       	mov	lr,1
8002511a:	fc 05 16 01 	lsr	r5,lr,0x1
8002511e:	10 9e       	mov	lr,r8
80025120:	ee 1e ff ff 	eorh	lr,0xffff
80025124:	ec 1e ff ff 	eorl	lr,0xffff
80025128:	ea 0e 0a 4e 	lsr	lr,r5,lr
8002512c:	30 05       	mov	r5,0
8002512e:	ea 08 09 43 	lsl	r3,r5,r8
80025132:	fd e3 10 03 	or	r3,lr,r3
80025136:	30 1e       	mov	lr,1
80025138:	fc 08 09 42 	lsl	r2,lr,r8
8002513c:	58 09       	cp.w	r9,0
8002513e:	e4 03 17 10 	movne	r3,r2
80025142:	f8 02 17 10 	movne	r2,r12
80025146:	3f f8       	mov	r8,-1
80025148:	3f f9       	mov	r9,-1
8002514a:	e4 08 00 08 	add	r8,r2,r8
8002514e:	e6 09 00 49 	adc	r9,r3,r9
80025152:	10 3a       	cp.w	r10,r8
80025154:	f2 0b 13 00 	cpc	r11,r9
80025158:	5f 08       	sreq	r8
8002515a:	5c 58       	castu.b	r8
8002515c:	c0 28       	rjmp	80025160 <flashc_erase_gp_fuse_bitfield+0x10c>
8002515e:	30 18       	mov	r8,1
}
80025160:	10 9c       	mov	r12,r8
80025162:	2f 8d       	sub	sp,-32
80025164:	e3 cd 80 ec 	ldm	sp++,r2-r3,r5-r7,pc
80025168:	80 02       	ld.sh	r2,r0[0x0]
8002516a:	4e e2       	lddpc	r2,80025320 <flashc_write_gp_fuse_bitfield+0x5c>

8002516c <flashc_erase_gp_fuse_byte>:


bool flashc_erase_gp_fuse_byte(unsigned int gp_fuse_byte, bool check)
{
8002516c:	eb cd 40 c0 	pushm	r6-r7,lr
80025170:	1a 97       	mov	r7,sp
80025172:	20 6d       	sub	sp,24
80025174:	4b 26       	lddpc	r6,8002523c <flashc_erase_gp_fuse_byte+0xd0>
80025176:	1e 26       	rsub	r6,pc
80025178:	ef 4c ff ec 	st.w	r7[-20],r12
8002517c:	16 98       	mov	r8,r11
8002517e:	ef 68 ff e8 	st.b	r7[-24],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
80025182:	f0 16 00 7a 	mcall	r6[488]
80025186:	14 98       	mov	r8,r10
80025188:	16 99       	mov	r9,r11
8002518a:	ee e9 ff f8 	st.d	r7[-8],r8
  flashc_erase_all_gp_fuses(false);
8002518e:	30 0c       	mov	r12,0
80025190:	f0 16 00 d7 	mcall	r6[860]
  error_status = flashc_error_status;
80025194:	ec f8 00 54 	ld.w	r8,r6[84]
80025198:	70 08       	ld.w	r8,r8[0x0]
8002519a:	ef 48 ff f0 	st.w	r7[-16],r8
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
8002519e:	30 08       	mov	r8,0
800251a0:	ef 48 ff f4 	st.w	r7[-12],r8
800251a4:	c2 b8       	rjmp	800251fa <flashc_erase_gp_fuse_byte+0x8e>
  {
    if (current_gp_fuse_byte != gp_fuse_byte)
800251a6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800251aa:	ee f8 ff ec 	ld.w	r8,r7[-20]
800251ae:	10 39       	cp.w	r9,r8
800251b0:	c1 10       	breq	800251d2 <flashc_erase_gp_fuse_byte+0x66>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
800251b2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
800251b6:	10 9b       	mov	r11,r8
800251b8:	ee fc ff f4 	ld.w	r12,r7[-12]
800251bc:	f0 16 00 8f 	mcall	r6[572]
      error_status |= flashc_error_status;
800251c0:	ec f8 00 54 	ld.w	r8,r6[84]
800251c4:	70 08       	ld.w	r8,r8[0x0]
800251c6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800251ca:	f3 e8 10 08 	or	r8,r9,r8
800251ce:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int error_status;
  unsigned int current_gp_fuse_byte;
  U64 value = flashc_read_all_gp_fuses();
  flashc_erase_all_gp_fuses(false);
  error_status = flashc_error_status;
  for (current_gp_fuse_byte = 0; current_gp_fuse_byte < 8; current_gp_fuse_byte++, value >>= 8)
800251d2:	ee f8 ff f4 	ld.w	r8,r7[-12]
800251d6:	2f f8       	sub	r8,-1
800251d8:	ef 48 ff f4 	st.w	r7[-12],r8
800251dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800251e0:	b9 68       	lsl	r8,0x18
800251e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800251e6:	a9 89       	lsr	r9,0x8
800251e8:	f3 e8 10 08 	or	r8,r9,r8
800251ec:	ef 48 ff fc 	st.w	r7[-4],r8
800251f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800251f4:	a9 88       	lsr	r8,0x8
800251f6:	ef 48 ff f8 	st.w	r7[-8],r8
800251fa:	ee f8 ff f4 	ld.w	r8,r7[-12]
800251fe:	58 78       	cp.w	r8,7
80025200:	fe 98 ff d3 	brls	800251a6 <flashc_erase_gp_fuse_byte+0x3a>
    {
      flashc_write_gp_fuse_byte(current_gp_fuse_byte, value);
      error_status |= flashc_error_status;
    }
  }
  flashc_error_status = error_status;
80025204:	ec f8 00 54 	ld.w	r8,r6[84]
80025208:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002520c:	91 09       	st.w	r8[0x0],r9
  return (check) ? (flashc_read_gp_fuse_byte(gp_fuse_byte) == 0xFF) : true;
8002520e:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80025212:	30 08       	mov	r8,0
80025214:	f0 09 18 00 	cp.b	r9,r8
80025218:	c0 d0       	breq	80025232 <flashc_erase_gp_fuse_byte+0xc6>
8002521a:	ee fc ff ec 	ld.w	r12,r7[-20]
8002521e:	f0 16 02 25 	mcall	r6[2196]
80025222:	18 98       	mov	r8,r12
80025224:	10 99       	mov	r9,r8
80025226:	3f f8       	mov	r8,-1
80025228:	f0 09 18 00 	cp.b	r9,r8
8002522c:	5f 08       	sreq	r8
8002522e:	5c 58       	castu.b	r8
80025230:	c0 28       	rjmp	80025234 <flashc_erase_gp_fuse_byte+0xc8>
80025232:	30 18       	mov	r8,1
}
80025234:	10 9c       	mov	r12,r8
80025236:	2f ad       	sub	sp,-24
80025238:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002523c:	80 02       	ld.sh	r2,r0[0x0]
8002523e:	4f fa       	lddpc	r10,80025438 <flashc_write_all_gp_fuses+0x68>

80025240 <flashc_erase_all_gp_fuses>:


bool flashc_erase_all_gp_fuses(bool check)
{
80025240:	eb cd 40 c0 	pushm	r6-r7,lr
80025244:	1a 97       	mov	r7,sp
80025246:	20 1d       	sub	sp,4
80025248:	48 f6       	lddpc	r6,80025284 <flashc_erase_all_gp_fuses+0x44>
8002524a:	1e 26       	rsub	r6,pc
8002524c:	18 98       	mov	r8,r12
8002524e:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EAGPF, -1);
80025252:	3f fb       	mov	r11,-1
80025254:	30 bc       	mov	r12,11
80025256:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? (flashc_read_all_gp_fuses() == 0xFFFFFFFFFFFFFFFFULL) : true;
8002525a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8002525e:	30 08       	mov	r8,0
80025260:	f0 09 18 00 	cp.b	r9,r8
80025264:	c0 b0       	breq	8002527a <flashc_erase_all_gp_fuses+0x3a>
80025266:	f0 16 00 7a 	mcall	r6[488]
8002526a:	14 98       	mov	r8,r10
8002526c:	16 99       	mov	r9,r11
8002526e:	f3 e8 00 08 	and	r8,r9,r8
80025272:	5b f8       	cp.w	r8,-1
80025274:	5f 08       	sreq	r8
80025276:	5c 58       	castu.b	r8
80025278:	c0 28       	rjmp	8002527c <flashc_erase_all_gp_fuses+0x3c>
8002527a:	30 18       	mov	r8,1
}
8002527c:	10 9c       	mov	r12,r8
8002527e:	2f fd       	sub	sp,-4
80025280:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025284:	80 02       	ld.sh	r2,r0[0x0]
80025286:	50 ce       	stdsp	sp[0x30],lr

80025288 <flashc_write_gp_fuse_bit>:


void flashc_write_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025288:	eb cd 40 c0 	pushm	r6-r7,lr
8002528c:	1a 97       	mov	r7,sp
8002528e:	20 2d       	sub	sp,8
80025290:	48 c6       	lddpc	r6,800252c0 <flashc_write_gp_fuse_bit+0x38>
80025292:	1e 26       	rsub	r6,pc
80025294:	ef 4c ff fc 	st.w	r7[-4],r12
80025298:	16 98       	mov	r8,r11
8002529a:	ef 68 ff f8 	st.b	r7[-8],r8
  if (!value)
8002529e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800252a2:	ec 18 00 01 	eorl	r8,0x1
800252a6:	5c 58       	castu.b	r8
800252a8:	c0 90       	breq	800252ba <flashc_write_gp_fuse_bit+0x32>
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WGPB, gp_fuse_bit & 0x3F);
800252aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800252ae:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800252b2:	10 9b       	mov	r11,r8
800252b4:	30 7c       	mov	r12,7
800252b6:	f0 16 00 2a 	mcall	r6[168]
}
800252ba:	2f ed       	sub	sp,-8
800252bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800252c0:	80 02       	ld.sh	r2,r0[0x0]
800252c2:	51 16       	stdsp	sp[0x44],r6

800252c4 <flashc_write_gp_fuse_bitfield>:


void flashc_write_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
800252c4:	eb cd 40 c0 	pushm	r6-r7,lr
800252c8:	1a 97       	mov	r7,sp
800252ca:	20 9d       	sub	sp,36
800252cc:	4b 16       	lddpc	r6,80025390 <flashc_write_gp_fuse_bitfield+0xcc>
800252ce:	1e 26       	rsub	r6,pc
800252d0:	ef 4c ff e8 	st.w	r7[-24],r12
800252d4:	ef 4b ff e4 	st.w	r7[-28],r11
800252d8:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
800252dc:	30 08       	mov	r8,0
800252de:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800252e2:	ee f8 ff e8 	ld.w	r8,r7[-24]
800252e6:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800252ea:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800252ee:	ee f8 ff e4 	ld.w	r8,r7[-28]
800252f2:	ef 48 ff f8 	st.w	r7[-8],r8
800252f6:	34 08       	mov	r8,64
800252f8:	ef 48 ff fc 	st.w	r7[-4],r8
800252fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025300:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025304:	f0 09 0d 48 	min	r8,r8,r9
80025308:	ef 48 ff f4 	st.w	r7[-12],r8
8002530c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80025310:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025314:	ee f8 ff e8 	ld.w	r8,r7[-24]
80025318:	ef 48 ff f0 	st.w	r7[-16],r8
8002531c:	c2 88       	rjmp	8002536c <flashc_write_gp_fuse_bitfield+0xa8>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
8002531e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025322:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80025326:	5c 58       	castu.b	r8
80025328:	10 9b       	mov	r11,r8
8002532a:	ee fc ff f0 	ld.w	r12,r7[-16]
8002532e:	f0 16 00 e2 	mcall	r6[904]
    error_status |= flashc_error_status;
80025332:	ec f8 00 54 	ld.w	r8,r6[84]
80025336:	70 08       	ld.w	r8,r8[0x0]
80025338:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002533c:	f3 e8 10 08 	or	r8,r9,r8
80025340:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025344:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025348:	2f f8       	sub	r8,-1
8002534a:	ef 48 ff f0 	st.w	r7[-16],r8
8002534e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025352:	bf 78       	lsl	r8,0x1f
80025354:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025358:	a1 99       	lsr	r9,0x1
8002535a:	f3 e8 10 08 	or	r8,r9,r8
8002535e:	ef 48 ff e0 	st.w	r7[-32],r8
80025362:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025366:	a1 98       	lsr	r8,0x1
80025368:	ef 48 ff dc 	st.w	r7[-36],r8
8002536c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025370:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025374:	10 09       	add	r9,r8
80025376:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002537a:	10 39       	cp.w	r9,r8
8002537c:	fe 9b ff d1 	brhi	8002531e <flashc_write_gp_fuse_bitfield+0x5a>
  {
    flashc_write_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025380:	ec f8 00 54 	ld.w	r8,r6[84]
80025384:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025388:	91 09       	st.w	r8[0x0],r9
}
8002538a:	2f 7d       	sub	sp,-36
8002538c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025390:	80 02       	ld.sh	r2,r0[0x0]
80025392:	51 52       	stdsp	sp[0x54],r2

80025394 <flashc_write_gp_fuse_byte>:


void flashc_write_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025394:	eb cd 40 c0 	pushm	r6-r7,lr
80025398:	1a 97       	mov	r7,sp
8002539a:	20 2d       	sub	sp,8
8002539c:	48 c6       	lddpc	r6,800253cc <flashc_write_gp_fuse_byte+0x38>
8002539e:	1e 26       	rsub	r6,pc
800253a0:	ef 4c ff fc 	st.w	r7[-4],r12
800253a4:	16 98       	mov	r8,r11
800253a6:	ef 68 ff f8 	st.b	r7[-8],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_PGPFB, (gp_fuse_byte & 0x07) | value << 3);
800253aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800253ae:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
800253b2:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800253b6:	a3 78       	lsl	r8,0x3
800253b8:	f3 e8 10 08 	or	r8,r9,r8
800253bc:	10 9b       	mov	r11,r8
800253be:	30 ac       	mov	r12,10
800253c0:	f0 16 00 2a 	mcall	r6[168]
}
800253c4:	2f ed       	sub	sp,-8
800253c6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800253ca:	00 00       	add	r0,r0
800253cc:	80 02       	ld.sh	r2,r0[0x0]
800253ce:	52 22       	stdsp	sp[0x88],r2

800253d0 <flashc_write_all_gp_fuses>:


void flashc_write_all_gp_fuses(U64 value)
{
800253d0:	eb cd 40 c0 	pushm	r6-r7,lr
800253d4:	1a 97       	mov	r7,sp
800253d6:	20 4d       	sub	sp,16
800253d8:	49 e6       	lddpc	r6,80025450 <flashc_write_all_gp_fuses+0x80>
800253da:	1e 26       	rsub	r6,pc
800253dc:	ee eb ff f0 	st.d	r7[-16],r10
  unsigned int error_status = 0;
800253e0:	30 08       	mov	r8,0
800253e2:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
800253e6:	30 08       	mov	r8,0
800253e8:	ef 48 ff fc 	st.w	r7[-4],r8
800253ec:	c2 58       	rjmp	80025436 <flashc_write_all_gp_fuses+0x66>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
800253ee:	ef 38 ff f7 	ld.ub	r8,r7[-9]
800253f2:	10 9b       	mov	r11,r8
800253f4:	ee fc ff fc 	ld.w	r12,r7[-4]
800253f8:	f0 16 00 8f 	mcall	r6[572]
    error_status |= flashc_error_status;
800253fc:	ec f8 00 54 	ld.w	r8,r6[84]
80025400:	70 08       	ld.w	r8,r8[0x0]
80025402:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025406:	f3 e8 10 08 	or	r8,r9,r8
8002540a:	ef 48 ff f8 	st.w	r7[-8],r8

void flashc_write_all_gp_fuses(U64 value)
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_byte;
  for (gp_fuse_byte = 0; gp_fuse_byte < 8; gp_fuse_byte++, value >>= 8)
8002540e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025412:	2f f8       	sub	r8,-1
80025414:	ef 48 ff fc 	st.w	r7[-4],r8
80025418:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002541c:	b9 68       	lsl	r8,0x18
8002541e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025422:	a9 89       	lsr	r9,0x8
80025424:	f3 e8 10 08 	or	r8,r9,r8
80025428:	ef 48 ff f4 	st.w	r7[-12],r8
8002542c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025430:	a9 88       	lsr	r8,0x8
80025432:	ef 48 ff f0 	st.w	r7[-16],r8
80025436:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002543a:	58 78       	cp.w	r8,7
8002543c:	fe 98 ff d9 	brls	800253ee <flashc_write_all_gp_fuses+0x1e>
  {
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025440:	ec f8 00 54 	ld.w	r8,r6[84]
80025444:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025448:	91 09       	st.w	r8[0x0],r9
}
8002544a:	2f cd       	sub	sp,-16
8002544c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025450:	80 02       	ld.sh	r2,r0[0x0]
80025452:	52 5e       	stdsp	sp[0x94],lr

80025454 <flashc_set_gp_fuse_bit>:


void flashc_set_gp_fuse_bit(unsigned int gp_fuse_bit, bool value)
{
80025454:	eb cd 40 c0 	pushm	r6-r7,lr
80025458:	1a 97       	mov	r7,sp
8002545a:	20 2d       	sub	sp,8
8002545c:	48 e6       	lddpc	r6,80025494 <flashc_set_gp_fuse_bit+0x40>
8002545e:	1e 26       	rsub	r6,pc
80025460:	ef 4c ff fc 	st.w	r7[-4],r12
80025464:	16 98       	mov	r8,r11
80025466:	ef 68 ff f8 	st.b	r7[-8],r8
  if (value)
8002546a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002546e:	30 08       	mov	r8,0
80025470:	f0 09 18 00 	cp.b	r9,r8
80025474:	c0 70       	breq	80025482 <flashc_set_gp_fuse_bit+0x2e>
    flashc_erase_gp_fuse_bit(gp_fuse_bit, false);
80025476:	30 0b       	mov	r11,0
80025478:	ee fc ff fc 	ld.w	r12,r7[-4]
8002547c:	f0 16 00 f1 	mcall	r6[964]
80025480:	c0 68       	rjmp	8002548c <flashc_set_gp_fuse_bit+0x38>
  else
    flashc_write_gp_fuse_bit(gp_fuse_bit, false);
80025482:	30 0b       	mov	r11,0
80025484:	ee fc ff fc 	ld.w	r12,r7[-4]
80025488:	f0 16 00 e2 	mcall	r6[904]
}
8002548c:	2f ed       	sub	sp,-8
8002548e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025492:	00 00       	add	r0,r0
80025494:	80 02       	ld.sh	r2,r0[0x0]
80025496:	52 e2       	stdsp	sp[0xb8],r2

80025498 <flashc_set_gp_fuse_bitfield>:


void flashc_set_gp_fuse_bitfield(unsigned int pos, unsigned int width, U64 value)
{
80025498:	eb cd 40 c0 	pushm	r6-r7,lr
8002549c:	1a 97       	mov	r7,sp
8002549e:	20 9d       	sub	sp,36
800254a0:	4b 16       	lddpc	r6,80025564 <flashc_set_gp_fuse_bitfield+0xcc>
800254a2:	1e 26       	rsub	r6,pc
800254a4:	ef 4c ff e8 	st.w	r7[-24],r12
800254a8:	ef 4b ff e4 	st.w	r7[-28],r11
800254ac:	ee e9 ff dc 	st.d	r7[-36],r8
  unsigned int error_status = 0;
800254b0:	30 08       	mov	r8,0
800254b2:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
800254b6:	ee f8 ff e8 	ld.w	r8,r7[-24]
800254ba:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
800254be:	ef 48 ff e8 	st.w	r7[-24],r8
  width = min(width, 64);
800254c2:	ee f8 ff e4 	ld.w	r8,r7[-28]
800254c6:	ef 48 ff f8 	st.w	r7[-8],r8
800254ca:	34 08       	mov	r8,64
800254cc:	ef 48 ff fc 	st.w	r7[-4],r8
800254d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800254d4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800254d8:	f0 09 0d 48 	min	r8,r8,r9
800254dc:	ef 48 ff f4 	st.w	r7[-12],r8
800254e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800254e4:	ef 48 ff e4 	st.w	r7[-28],r8
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
800254e8:	ee f8 ff e8 	ld.w	r8,r7[-24]
800254ec:	ef 48 ff f0 	st.w	r7[-16],r8
800254f0:	c2 88       	rjmp	80025540 <flashc_set_gp_fuse_bitfield+0xa8>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
800254f2:	ee f8 ff e0 	ld.w	r8,r7[-32]
800254f6:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800254fa:	5c 58       	castu.b	r8
800254fc:	10 9b       	mov	r11,r8
800254fe:	ee fc ff f0 	ld.w	r12,r7[-16]
80025502:	f0 16 01 22 	mcall	r6[1160]
    error_status |= flashc_error_status;
80025506:	ec f8 00 54 	ld.w	r8,r6[84]
8002550a:	70 08       	ld.w	r8,r8[0x0]
8002550c:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025510:	f3 e8 10 08 	or	r8,r9,r8
80025514:	ef 48 ff ec 	st.w	r7[-20],r8
{
  unsigned int error_status = 0;
  unsigned int gp_fuse_bit;
  pos &= 0x3F;
  width = min(width, 64);
  for (gp_fuse_bit = pos; gp_fuse_bit < pos + width; gp_fuse_bit++, value >>= 1)
80025518:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002551c:	2f f8       	sub	r8,-1
8002551e:	ef 48 ff f0 	st.w	r7[-16],r8
80025522:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025526:	bf 78       	lsl	r8,0x1f
80025528:	ee f9 ff e0 	ld.w	r9,r7[-32]
8002552c:	a1 99       	lsr	r9,0x1
8002552e:	f3 e8 10 08 	or	r8,r9,r8
80025532:	ef 48 ff e0 	st.w	r7[-32],r8
80025536:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002553a:	a1 98       	lsr	r8,0x1
8002553c:	ef 48 ff dc 	st.w	r7[-36],r8
80025540:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025544:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025548:	10 09       	add	r9,r8
8002554a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002554e:	10 39       	cp.w	r9,r8
80025550:	fe 9b ff d1 	brhi	800254f2 <flashc_set_gp_fuse_bitfield+0x5a>
  {
    flashc_set_gp_fuse_bit(gp_fuse_bit, value & 0x01);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
80025554:	ec f8 00 54 	ld.w	r8,r6[84]
80025558:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002555c:	91 09       	st.w	r8[0x0],r9
}
8002555e:	2f 7d       	sub	sp,-36
80025560:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025564:	80 02       	ld.sh	r2,r0[0x0]
80025566:	53 26       	stdsp	sp[0xc8],r6

80025568 <flashc_set_gp_fuse_byte>:


void flashc_set_gp_fuse_byte(unsigned int gp_fuse_byte, U8 value)
{
80025568:	eb cd 40 c0 	pushm	r6-r7,lr
8002556c:	1a 97       	mov	r7,sp
8002556e:	20 3d       	sub	sp,12
80025570:	49 c6       	lddpc	r6,800255e0 <flashc_set_gp_fuse_byte+0x78>
80025572:	1e 26       	rsub	r6,pc
80025574:	ef 4c ff f8 	st.w	r7[-8],r12
80025578:	16 98       	mov	r8,r11
8002557a:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int error_status;
  switch (value)
8002557e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80025582:	58 08       	cp.w	r8,0
80025584:	c0 a0       	breq	80025598 <flashc_set_gp_fuse_byte+0x30>
80025586:	e0 48 00 ff 	cp.w	r8,255
8002558a:	c0 d1       	brne	800255a4 <flashc_set_gp_fuse_byte+0x3c>
  {
  case 0xFF:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
8002558c:	30 0b       	mov	r11,0
8002558e:	ee fc ff f8 	ld.w	r12,r7[-8]
80025592:	f0 16 01 16 	mcall	r6[1112]
    break;
80025596:	c2 18       	rjmp	800255d8 <flashc_set_gp_fuse_byte+0x70>
  case 0x00:
    flashc_write_gp_fuse_byte(gp_fuse_byte, 0x00);
80025598:	30 0b       	mov	r11,0
8002559a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002559e:	f0 16 00 8f 	mcall	r6[572]
    break;
800255a2:	c1 b8       	rjmp	800255d8 <flashc_set_gp_fuse_byte+0x70>
  default:
    flashc_erase_gp_fuse_byte(gp_fuse_byte, false);
800255a4:	30 0b       	mov	r11,0
800255a6:	ee fc ff f8 	ld.w	r12,r7[-8]
800255aa:	f0 16 01 16 	mcall	r6[1112]
    error_status = flashc_error_status;
800255ae:	ec f8 00 54 	ld.w	r8,r6[84]
800255b2:	70 08       	ld.w	r8,r8[0x0]
800255b4:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_gp_fuse_byte(gp_fuse_byte, value);
800255b8:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800255bc:	10 9b       	mov	r11,r8
800255be:	ee fc ff f8 	ld.w	r12,r7[-8]
800255c2:	f0 16 00 8f 	mcall	r6[572]
    flashc_error_status |= error_status;
800255c6:	ec f8 00 54 	ld.w	r8,r6[84]
800255ca:	70 09       	ld.w	r9,r8[0x0]
800255cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800255d0:	10 49       	or	r9,r8
800255d2:	ec f8 00 54 	ld.w	r8,r6[84]
800255d6:	91 09       	st.w	r8[0x0],r9
  }
}
800255d8:	2f dd       	sub	sp,-12
800255da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800255de:	00 00       	add	r0,r0
800255e0:	80 02       	ld.sh	r2,r0[0x0]
800255e2:	53 f6       	stdsp	sp[0xfc],r6

800255e4 <flashc_set_all_gp_fuses>:


void flashc_set_all_gp_fuses(U64 value)
{
800255e4:	eb cd 40 c0 	pushm	r6-r7,lr
800255e8:	1a 97       	mov	r7,sp
800255ea:	20 3d       	sub	sp,12
800255ec:	49 86       	lddpc	r6,8002564c <flashc_set_all_gp_fuses+0x68>
800255ee:	1e 26       	rsub	r6,pc
800255f0:	ee eb ff f4 	st.d	r7[-12],r10
  unsigned int error_status;
  switch (value)
800255f4:	ee e8 ff f4 	ld.d	r8,r7[-12]
800255f8:	58 08       	cp.w	r8,0
800255fa:	5c 29       	cpc	r9
800255fc:	c0 b0       	breq	80025612 <flashc_set_all_gp_fuses+0x2e>
800255fe:	3f fa       	mov	r10,-1
80025600:	3f fb       	mov	r11,-1
80025602:	14 38       	cp.w	r8,r10
80025604:	f6 09 13 00 	cpc	r9,r11
80025608:	c0 a1       	brne	8002561c <flashc_set_all_gp_fuses+0x38>
  {
  case 0xFFFFFFFFFFFFFFFFULL:
    flashc_erase_all_gp_fuses(false);
8002560a:	30 0c       	mov	r12,0
8002560c:	f0 16 00 d7 	mcall	r6[860]
    break;
80025610:	c1 b8       	rjmp	80025646 <flashc_set_all_gp_fuses+0x62>
  case 0x0000000000000000ULL:
    flashc_write_all_gp_fuses(0x0000000000000000ULL);
80025612:	30 0a       	mov	r10,0
80025614:	30 0b       	mov	r11,0
80025616:	f0 16 00 f9 	mcall	r6[996]
    break;
8002561a:	c1 68       	rjmp	80025646 <flashc_set_all_gp_fuses+0x62>
  default:
    flashc_erase_all_gp_fuses(false);
8002561c:	30 0c       	mov	r12,0
8002561e:	f0 16 00 d7 	mcall	r6[860]
    error_status = flashc_error_status;
80025622:	ec f8 00 54 	ld.w	r8,r6[84]
80025626:	70 08       	ld.w	r8,r8[0x0]
80025628:	ef 48 ff fc 	st.w	r7[-4],r8
    flashc_write_all_gp_fuses(value);
8002562c:	ee ea ff f4 	ld.d	r10,r7[-12]
80025630:	f0 16 00 f9 	mcall	r6[996]
    flashc_error_status |= error_status;
80025634:	ec f8 00 54 	ld.w	r8,r6[84]
80025638:	70 09       	ld.w	r9,r8[0x0]
8002563a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002563e:	10 49       	or	r9,r8
80025640:	ec f8 00 54 	ld.w	r8,r6[84]
80025644:	91 09       	st.w	r8[0x0],r9
  }
}
80025646:	2f dd       	sub	sp,-12
80025648:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002564c:	80 02       	ld.sh	r2,r0[0x0]
8002564e:	54 72       	stdsp	sp[0x11c],r2

80025650 <flashc_clear_page_buffer>:
 */
//! @{


void flashc_clear_page_buffer(void)
{
80025650:	eb cd 40 c0 	pushm	r6-r7,lr
80025654:	1a 97       	mov	r7,sp
80025656:	48 56       	lddpc	r6,80025668 <flashc_clear_page_buffer+0x18>
80025658:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_CPB, -1);
8002565a:	3f fb       	mov	r11,-1
8002565c:	30 3c       	mov	r12,3
8002565e:	f0 16 00 2a 	mcall	r6[168]
}
80025662:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025666:	00 00       	add	r0,r0
80025668:	80 02       	ld.sh	r2,r0[0x0]
8002566a:	54 dc       	stdsp	sp[0x134],r12

8002566c <flashc_is_page_erased>:


bool flashc_is_page_erased(void)
{
8002566c:	eb cd 40 80 	pushm	r7,lr
80025670:	1a 97       	mov	r7,sp
  return ((AVR32_FLASHC.fsr & AVR32_FLASHC_FSR_QPRR_MASK) != 0);
80025672:	fe 68 00 00 	mov	r8,-131072
80025676:	70 28       	ld.w	r8,r8[0x8]
80025678:	e2 18 00 20 	andl	r8,0x20,COH
8002567c:	5f 18       	srne	r8
8002567e:	5c 58       	castu.b	r8
}
80025680:	10 9c       	mov	r12,r8
80025682:	e3 cd 80 80 	ldm	sp++,r7,pc

80025686 <flashc_quick_page_read>:


bool flashc_quick_page_read(int page_number)
{
80025686:	eb cd 40 c0 	pushm	r6-r7,lr
8002568a:	1a 97       	mov	r7,sp
8002568c:	20 1d       	sub	sp,4
8002568e:	48 96       	lddpc	r6,800256b0 <flashc_quick_page_read+0x2a>
80025690:	1e 26       	rsub	r6,pc
80025692:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPR, page_number);
80025696:	ee fb ff fc 	ld.w	r11,r7[-4]
8002569a:	30 cc       	mov	r12,12
8002569c:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
800256a0:	f0 16 00 e8 	mcall	r6[928]
800256a4:	18 98       	mov	r8,r12
}
800256a6:	10 9c       	mov	r12,r8
800256a8:	2f fd       	sub	sp,-4
800256aa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800256ae:	00 00       	add	r0,r0
800256b0:	80 02       	ld.sh	r2,r0[0x0]
800256b2:	55 14       	stdsp	sp[0x144],r4

800256b4 <flashc_erase_page>:


bool flashc_erase_page(int page_number, bool check)
{
800256b4:	eb cd 40 c0 	pushm	r6-r7,lr
800256b8:	1a 97       	mov	r7,sp
800256ba:	20 4d       	sub	sp,16
800256bc:	49 86       	lddpc	r6,8002571c <flashc_erase_page+0x68>
800256be:	1e 26       	rsub	r6,pc
800256c0:	ef 4c ff f4 	st.w	r7[-12],r12
800256c4:	16 98       	mov	r8,r11
800256c6:	ef 68 ff f0 	st.b	r7[-16],r8
  bool page_erased = true;
800256ca:	30 18       	mov	r8,1
800256cc:	ef 68 ff fb 	st.b	r7[-5],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EP, page_number);
800256d0:	ee fb ff f4 	ld.w	r11,r7[-12]
800256d4:	30 2c       	mov	r12,2
800256d6:	f0 16 00 2a 	mcall	r6[168]
  if (check)
800256da:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800256de:	30 08       	mov	r8,0
800256e0:	f0 09 18 00 	cp.b	r9,r8
800256e4:	c1 50       	breq	8002570e <flashc_erase_page+0x5a>
  {
    unsigned int error_status = flashc_error_status;
800256e6:	ec f8 00 54 	ld.w	r8,r6[84]
800256ea:	70 08       	ld.w	r8,r8[0x0]
800256ec:	ef 48 ff fc 	st.w	r7[-4],r8
    page_erased = flashc_quick_page_read(-1);
800256f0:	3f fc       	mov	r12,-1
800256f2:	f0 16 01 7e 	mcall	r6[1528]
800256f6:	18 98       	mov	r8,r12
800256f8:	ef 68 ff fb 	st.b	r7[-5],r8
    flashc_error_status |= error_status;
800256fc:	ec f8 00 54 	ld.w	r8,r6[84]
80025700:	70 09       	ld.w	r9,r8[0x0]
80025702:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025706:	10 49       	or	r9,r8
80025708:	ec f8 00 54 	ld.w	r8,r6[84]
8002570c:	91 09       	st.w	r8[0x0],r9
  }
  return page_erased;
8002570e:	ef 38 ff fb 	ld.ub	r8,r7[-5]
}
80025712:	10 9c       	mov	r12,r8
80025714:	2f cd       	sub	sp,-16
80025716:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002571a:	00 00       	add	r0,r0
8002571c:	80 02       	ld.sh	r2,r0[0x0]
8002571e:	55 42       	stdsp	sp[0x150],r2

80025720 <flashc_erase_all_pages>:


bool flashc_erase_all_pages(bool check)
{
80025720:	eb cd 40 e0 	pushm	r5-r7,lr
80025724:	1a 97       	mov	r7,sp
80025726:	20 4d       	sub	sp,16
80025728:	49 f6       	lddpc	r6,800257a4 <flashc_erase_all_pages+0x84>
8002572a:	1e 26       	rsub	r6,pc
8002572c:	18 98       	mov	r8,r12
8002572e:	ef 68 ff f0 	st.b	r7[-16],r8
  bool all_pages_erased = true;
80025732:	30 18       	mov	r8,1
80025734:	ef 68 ff f7 	st.b	r7[-9],r8
  unsigned int error_status = 0;
80025738:	30 08       	mov	r8,0
8002573a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int page_number = flashc_get_page_count();
8002573e:	f0 16 01 0c 	mcall	r6[1072]
80025742:	18 98       	mov	r8,r12
80025744:	ef 48 ff fc 	st.w	r7[-4],r8
  while (page_number)
80025748:	c1 f8       	rjmp	80025786 <flashc_erase_all_pages+0x66>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
8002574a:	ef 35 ff f7 	ld.ub	r5,r7[-9]
8002574e:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80025752:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025756:	20 18       	sub	r8,1
80025758:	ef 48 ff fc 	st.w	r7[-4],r8
8002575c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80025760:	12 9b       	mov	r11,r9
80025762:	10 9c       	mov	r12,r8
80025764:	f0 16 00 a8 	mcall	r6[672]
80025768:	18 98       	mov	r8,r12
8002576a:	eb e8 00 08 	and	r8,r5,r8
8002576e:	5f 18       	srne	r8
80025770:	ef 68 ff f7 	st.b	r7[-9],r8
    error_status |= flashc_error_status;
80025774:	ec f8 00 54 	ld.w	r8,r6[84]
80025778:	70 08       	ld.w	r8,r8[0x0]
8002577a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002577e:	f3 e8 10 08 	or	r8,r9,r8
80025782:	ef 48 ff f8 	st.w	r7[-8],r8
bool flashc_erase_all_pages(bool check)
{
  bool all_pages_erased = true;
  unsigned int error_status = 0;
  unsigned int page_number = flashc_get_page_count();
  while (page_number)
80025786:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002578a:	58 08       	cp.w	r8,0
8002578c:	cd f1       	brne	8002574a <flashc_erase_all_pages+0x2a>
  {
    all_pages_erased &= flashc_erase_page(--page_number, check);
    error_status |= flashc_error_status;
  }
  flashc_error_status = error_status;
8002578e:	ec f8 00 54 	ld.w	r8,r6[84]
80025792:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025796:	91 09       	st.w	r8[0x0],r9
  return all_pages_erased;
80025798:	ef 38 ff f7 	ld.ub	r8,r7[-9]
}
8002579c:	10 9c       	mov	r12,r8
8002579e:	2f cd       	sub	sp,-16
800257a0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
800257a4:	80 02       	ld.sh	r2,r0[0x0]
800257a6:	55 ae       	stdsp	sp[0x168],lr

800257a8 <flashc_write_page>:


void flashc_write_page(int page_number)
{
800257a8:	eb cd 40 c0 	pushm	r6-r7,lr
800257ac:	1a 97       	mov	r7,sp
800257ae:	20 1d       	sub	sp,4
800257b0:	48 66       	lddpc	r6,800257c8 <flashc_write_page+0x20>
800257b2:	1e 26       	rsub	r6,pc
800257b4:	ef 4c ff fc 	st.w	r7[-4],r12
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WP, page_number);
800257b8:	ee fb ff fc 	ld.w	r11,r7[-4]
800257bc:	30 1c       	mov	r12,1
800257be:	f0 16 00 2a 	mcall	r6[168]
}
800257c2:	2f fd       	sub	sp,-4
800257c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800257c8:	80 02       	ld.sh	r2,r0[0x0]
800257ca:	56 36       	stdsp	sp[0x18c],r6

800257cc <flashc_quick_user_page_read>:


bool flashc_quick_user_page_read(void)
{
800257cc:	eb cd 40 c0 	pushm	r6-r7,lr
800257d0:	1a 97       	mov	r7,sp
800257d2:	48 76       	lddpc	r6,800257ec <flashc_quick_user_page_read+0x20>
800257d4:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_QPRUP, -1);
800257d6:	3f fb       	mov	r11,-1
800257d8:	30 fc       	mov	r12,15
800257da:	f0 16 00 2a 	mcall	r6[168]
  return flashc_is_page_erased();
800257de:	f0 16 00 e8 	mcall	r6[928]
800257e2:	18 98       	mov	r8,r12
}
800257e4:	10 9c       	mov	r12,r8
800257e6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800257ea:	00 00       	add	r0,r0
800257ec:	80 02       	ld.sh	r2,r0[0x0]
800257ee:	56 58       	stdsp	sp[0x194],r8

800257f0 <flashc_erase_user_page>:


bool flashc_erase_user_page(bool check)
{
800257f0:	eb cd 40 c0 	pushm	r6-r7,lr
800257f4:	1a 97       	mov	r7,sp
800257f6:	20 1d       	sub	sp,4
800257f8:	48 c6       	lddpc	r6,80025828 <flashc_erase_user_page+0x38>
800257fa:	1e 26       	rsub	r6,pc
800257fc:	18 98       	mov	r8,r12
800257fe:	ef 68 ff fc 	st.b	r7[-4],r8
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_EUP, -1);
80025802:	3f fb       	mov	r11,-1
80025804:	30 ec       	mov	r12,14
80025806:	f0 16 00 2a 	mcall	r6[168]
  return (check) ? flashc_quick_user_page_read() : true;
8002580a:	ef 39 ff fc 	ld.ub	r9,r7[-4]
8002580e:	30 08       	mov	r8,0
80025810:	f0 09 18 00 	cp.b	r9,r8
80025814:	c0 50       	breq	8002581e <flashc_erase_user_page+0x2e>
80025816:	f0 16 02 1d 	mcall	r6[2164]
8002581a:	18 98       	mov	r8,r12
8002581c:	c0 28       	rjmp	80025820 <flashc_erase_user_page+0x30>
8002581e:	30 18       	mov	r8,1
}
80025820:	10 9c       	mov	r12,r8
80025822:	2f fd       	sub	sp,-4
80025824:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025828:	80 02       	ld.sh	r2,r0[0x0]
8002582a:	56 7e       	stdsp	sp[0x19c],lr

8002582c <flashc_write_user_page>:


void flashc_write_user_page(void)
{
8002582c:	eb cd 40 c0 	pushm	r6-r7,lr
80025830:	1a 97       	mov	r7,sp
80025832:	48 56       	lddpc	r6,80025844 <flashc_write_user_page+0x18>
80025834:	1e 26       	rsub	r6,pc
  flashc_issue_command(AVR32_FLASHC_FCMD_CMD_WUP, -1);
80025836:	3f fb       	mov	r11,-1
80025838:	30 dc       	mov	r12,13
8002583a:	f0 16 00 2a 	mcall	r6[168]
}
8002583e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025842:	00 00       	add	r0,r0
80025844:	80 02       	ld.sh	r2,r0[0x0]
80025846:	56 b8       	stdsp	sp[0x1ac],r8

80025848 <flashc_memset8>:


volatile void *flashc_memset8(volatile void *dst, U8 src, size_t nbytes, bool erase)
{
80025848:	eb cd 40 c0 	pushm	r6-r7,lr
8002584c:	1a 97       	mov	r7,sp
8002584e:	20 4d       	sub	sp,16
80025850:	49 26       	lddpc	r6,80025898 <flashc_memset8+0x50>
80025852:	1e 26       	rsub	r6,pc
80025854:	ef 4c ff fc 	st.w	r7[-4],r12
80025858:	ef 4a ff f4 	st.w	r7[-12],r10
8002585c:	12 98       	mov	r8,r9
8002585e:	16 99       	mov	r9,r11
80025860:	ef 69 ff f8 	st.b	r7[-8],r9
80025864:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset16(dst, src | (U16)src << 8, nbytes, erase);
80025868:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002586c:	ef 3a ff f8 	ld.ub	r10,r7[-8]
80025870:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80025874:	a9 68       	lsl	r8,0x8
80025876:	5c 88       	casts.h	r8
80025878:	f5 e8 10 08 	or	r8,r10,r8
8002587c:	5c 88       	casts.h	r8
8002587e:	5c 78       	castu.h	r8
80025880:	ee fa ff f4 	ld.w	r10,r7[-12]
80025884:	10 9b       	mov	r11,r8
80025886:	ee fc ff fc 	ld.w	r12,r7[-4]
8002588a:	f0 16 01 89 	mcall	r6[1572]
8002588e:	18 98       	mov	r8,r12
}
80025890:	10 9c       	mov	r12,r8
80025892:	2f cd       	sub	sp,-16
80025894:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025898:	80 02       	ld.sh	r2,r0[0x0]
8002589a:	56 d6       	stdsp	sp[0x1b4],r6

8002589c <flashc_memset16>:


volatile void *flashc_memset16(volatile void *dst, U16 src, size_t nbytes, bool erase)
{
8002589c:	eb cd 40 c0 	pushm	r6-r7,lr
800258a0:	1a 97       	mov	r7,sp
800258a2:	20 4d       	sub	sp,16
800258a4:	49 16       	lddpc	r6,800258e8 <flashc_memset16+0x4c>
800258a6:	1e 26       	rsub	r6,pc
800258a8:	ef 4c ff fc 	st.w	r7[-4],r12
800258ac:	ef 4a ff f4 	st.w	r7[-12],r10
800258b0:	12 98       	mov	r8,r9
800258b2:	16 99       	mov	r9,r11
800258b4:	ef 59 ff f8 	st.h	r7[-8],r9
800258b8:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset32(dst, src | (U32)src << 16, nbytes, erase);
800258bc:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800258c0:	ef 1a ff f8 	ld.uh	r10,r7[-8]
800258c4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800258c8:	b1 68       	lsl	r8,0x10
800258ca:	f5 e8 10 08 	or	r8,r10,r8
800258ce:	ee fa ff f4 	ld.w	r10,r7[-12]
800258d2:	10 9b       	mov	r11,r8
800258d4:	ee fc ff fc 	ld.w	r12,r7[-4]
800258d8:	f0 16 01 c4 	mcall	r6[1808]
800258dc:	18 98       	mov	r8,r12
}
800258de:	10 9c       	mov	r12,r8
800258e0:	2f cd       	sub	sp,-16
800258e2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800258e6:	00 00       	add	r0,r0
800258e8:	80 02       	ld.sh	r2,r0[0x0]
800258ea:	57 2a       	stdsp	sp[0x1c8],r10

800258ec <flashc_memset32>:


volatile void *flashc_memset32(volatile void *dst, U32 src, size_t nbytes, bool erase)
{
800258ec:	eb cd 40 cf 	pushm	r0-r3,r6-r7,lr
800258f0:	1a 97       	mov	r7,sp
800258f2:	20 6d       	sub	sp,24
800258f4:	49 56       	lddpc	r6,80025948 <flashc_memset32+0x5c>
800258f6:	1e 26       	rsub	r6,pc
800258f8:	ef 4c ff fc 	st.w	r7[-4],r12
800258fc:	ef 4b ff f8 	st.w	r7[-8],r11
80025900:	ef 4a ff f4 	st.w	r7[-12],r10
80025904:	12 98       	mov	r8,r9
80025906:	ef 68 ff f0 	st.b	r7[-16],r8
  return flashc_memset64(dst, src | (U64)src << 32, nbytes, erase);
8002590a:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002590e:	ee f0 ff f8 	ld.w	r0,r7[-8]
80025912:	30 01       	mov	r1,0
80025914:	ee f9 ff f8 	ld.w	r9,r7[-8]
80025918:	ef 49 ff ec 	st.w	r7[-20],r9
8002591c:	30 09       	mov	r9,0
8002591e:	ef 49 ff e8 	st.w	r7[-24],r9
80025922:	ee f3 ff ec 	ld.w	r3,r7[-20]
80025926:	a1 63       	lsl	r3,0x0
80025928:	30 02       	mov	r2,0
8002592a:	e1 e2 10 0a 	or	r10,r0,r2
8002592e:	e3 e3 10 0b 	or	r11,r1,r3
80025932:	ee f9 ff f4 	ld.w	r9,r7[-12]
80025936:	ee fc ff fc 	ld.w	r12,r7[-4]
8002593a:	f0 16 01 a9 	mcall	r6[1700]
8002593e:	18 98       	mov	r8,r12
}
80025940:	10 9c       	mov	r12,r8
80025942:	2f ad       	sub	sp,-24
80025944:	e3 cd 80 cf 	ldm	sp++,r0-r3,r6-r7,pc
80025948:	80 02       	ld.sh	r2,r0[0x0]
8002594a:	57 7a       	stdsp	sp[0x1dc],r10

8002594c <flashc_memset64>:


volatile void *flashc_memset64(volatile void *dst, U64 src, size_t nbytes, bool erase)
{
8002594c:	eb cd 40 c0 	pushm	r6-r7,lr
80025950:	1a 97       	mov	r7,sp
80025952:	21 bd       	sub	sp,108
80025954:	fe f6 04 14 	ld.w	r6,pc[1044]
80025958:	1e 26       	rsub	r6,pc
8002595a:	ef 4c ff a4 	st.w	r7[-92],r12
8002595e:	ee eb ff 9c 	st.d	r7[-100],r10
80025962:	ef 49 ff 98 	st.w	r7[-104],r9
80025966:	ef 68 ff 94 	st.b	r7[-108],r8
  // Use aggregated pointers to have several alignments available for a same address.
  UnionCVPtr flash_array_end;
  UnionVPtr dest;
  Union64 source = {0};
8002596a:	30 08       	mov	r8,0
8002596c:	30 09       	mov	r9,0
8002596e:	ee e9 ff d8 	st.d	r7[-40],r8
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  UnionVPtr tmp;
  unsigned int error_status = 0;
80025972:	30 08       	mov	r8,0
80025974:	ef 48 ff ec 	st.w	r7[-20],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80025978:	f0 16 00 cd 	mcall	r6[820]
8002597c:	18 99       	mov	r9,r12
8002597e:	fc 18 80 00 	movh	r8,0x8000
80025982:	f2 08 00 08 	add	r8,r9,r8
80025986:	ef 48 ff e4 	st.w	r7[-28],r8
  dest.u8ptr = dst;
8002598a:	ee f8 ff a4 	ld.w	r8,r7[-92]
8002598e:	ef 48 ff e0 	st.w	r7[-32],r8
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
80025992:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025996:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002599a:	20 18       	sub	r8,1
8002599c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800259a0:	ef 48 ff f0 	st.w	r7[-16],r8
800259a4:	c1 f8       	rjmp	800259e2 <flashc_memset64+0x96>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
800259a6:	ee f9 ff f0 	ld.w	r9,r7[-16]
800259aa:	ef 38 ff a3 	ld.ub	r8,r7[-93]
800259ae:	ee 09 00 09 	add	r9,r7,r9
800259b2:	f3 68 ff d8 	st.b	r9[-40],r8
    src >>= 8;
800259b6:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800259ba:	b9 68       	lsl	r8,0x18
800259bc:	ee f9 ff a0 	ld.w	r9,r7[-96]
800259c0:	a9 89       	lsr	r9,0x8
800259c2:	f3 e8 10 08 	or	r8,r9,r8
800259c6:	ef 48 ff a0 	st.w	r7[-96],r8
800259ca:	ee f8 ff 9c 	ld.w	r8,r7[-100]
800259ce:	a9 88       	lsr	r8,0x8
800259d0:	ef 48 ff 9c 	st.w	r7[-100],r8

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
       src; i = (i - 1) & (sizeof(U64) - 1))
800259d4:	ee f8 ff f0 	ld.w	r8,r7[-16]
800259d8:	20 18       	sub	r8,1
800259da:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800259de:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int i;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
  dest.u8ptr = dst;
  for (i = (Get_align((U32)dest.u8ptr, sizeof(U64)) - 1) & (sizeof(U64) - 1);
800259e2:	ee e8 ff 9c 	ld.d	r8,r7[-100]
800259e6:	58 08       	cp.w	r8,0
800259e8:	5c 29       	cpc	r9
800259ea:	cd e1       	brne	800259a6 <flashc_memset64+0x5a>
       src; i = (i - 1) & (sizeof(U64) - 1))
  {
    source.u8[i] = src;
    src >>= 8;
  }
  dest_end.u8ptr = dest.u8ptr + nbytes;
800259ec:	ee f9 ff e0 	ld.w	r9,r7[-32]
800259f0:	ee f8 ff 98 	ld.w	r8,r7[-104]
800259f4:	f2 08 00 08 	add	r8,r9,r8
800259f8:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
800259fc:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a00:	e0 69 ff ff 	mov	r9,65535
80025a04:	ea 19 7f ff 	orh	r9,0x7fff
80025a08:	12 38       	cp.w	r8,r9
80025a0a:	e0 8b 00 07 	brhi	80025a18 <flashc_memset64+0xcc>
  {
    dest.u8ptr = AVR32_FLASH;
80025a0e:	fc 18 80 00 	movh	r8,0x8000
80025a12:	ef 48 ff e0 	st.w	r7[-32],r8
80025a16:	c1 58       	rjmp	80025a40 <flashc_memset64+0xf4>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80025a18:	ee f9 ff e4 	ld.w	r9,r7[-28]
80025a1c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a20:	10 39       	cp.w	r9,r8
80025a22:	e0 8b 00 0f 	brhi	80025a40 <flashc_memset64+0xf4>
80025a26:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025a2a:	e0 69 ff ff 	mov	r9,65535
80025a2e:	ea 19 80 7f 	orh	r9,0x807f
80025a32:	12 38       	cp.w	r8,r9
80025a34:	e0 8b 00 06 	brhi	80025a40 <flashc_memset64+0xf4>
  {
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025a38:	fc 18 80 80 	movh	r8,0x8080
80025a3c:	ef 48 ff e0 	st.w	r7[-32],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80025a40:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a44:	e0 69 02 00 	mov	r9,512
80025a48:	ea 19 80 80 	orh	r9,0x8080
80025a4c:	12 38       	cp.w	r8,r9
80025a4e:	e0 88 00 09 	brls	80025a60 <flashc_memset64+0x114>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80025a52:	e0 68 02 00 	mov	r8,512
80025a56:	ea 18 80 80 	orh	r8,0x8080
80025a5a:	ef 48 ff d4 	st.w	r7[-44],r8
80025a5e:	c1 38       	rjmp	80025a84 <flashc_memset64+0x138>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80025a60:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a64:	fc 19 80 80 	movh	r9,0x8080
80025a68:	12 38       	cp.w	r8,r9
80025a6a:	e0 8b 00 0d 	brhi	80025a84 <flashc_memset64+0x138>
80025a6e:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025a72:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025a76:	10 39       	cp.w	r9,r8
80025a78:	e0 88 00 06 	brls	80025a84 <flashc_memset64+0x138>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80025a7c:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025a80:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
80025a84:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025a88:	a1 c8       	cbr	r8,0x0
80025a8a:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80025a8e:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025a92:	e0 18 ff fc 	andl	r8,0xfffc
80025a96:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80025a9a:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025a9e:	e0 18 ff f8 	andl	r8,0xfff8
80025aa2:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025aa6:	c4 f9       	rjmp	80025d44 <flashc_memset64+0x3f8>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80025aa8:	f0 16 01 2e 	mcall	r6[1208]
    error_status |= flashc_error_status;
80025aac:	ec f8 00 54 	ld.w	r8,r6[84]
80025ab0:	70 08       	ld.w	r8,r8[0x0]
80025ab2:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025ab6:	f3 e8 10 08 	or	r8,r9,r8
80025aba:	ef 48 ff ec 	st.w	r7[-20],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80025abe:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025ac2:	ef 48 ff f8 	st.w	r7[-8],r8
80025ac6:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025aca:	e0 18 fe 00 	andl	r8,0xfe00
80025ace:	f0 c8 fe 00 	sub	r8,r8,-512
80025ad2:	ef 48 ff fc 	st.w	r7[-4],r8
80025ad6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025ada:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ade:	f0 09 0d 48 	min	r8,r8,r9
80025ae2:	ef 48 ff f4 	st.w	r7[-12],r8
80025ae6:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
80025aea:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025aee:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025af2:	10 9a       	mov	r10,r8
80025af4:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80025af8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025afc:	10 99       	mov	r9,r8
80025afe:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025b02:	30 18       	mov	r8,1
80025b04:	12 3a       	cp.w	r10,r9
80025b06:	c0 22       	brcc	80025b0a <flashc_memset64+0x1be>
80025b08:	30 08       	mov	r8,0
80025b0a:	ef 68 ff eb 	st.b	r7[-21],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // Use a flash double-word buffer to manage unaligned accesses.
    flash_dword.u64 = source.u64;
80025b0e:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025b12:	ee e9 ff ac 	st.d	r7[-84],r8

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80025b16:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b1a:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025b1e:	c5 b0       	breq	80025bd4 <flashc_memset64+0x288>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025b20:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b24:	e0 18 fe 00 	andl	r8,0xfe00
80025b28:	ef 48 ff a8 	st.w	r7[-88],r8
80025b2c:	c0 e8       	rjmp	80025b48 <flashc_memset64+0x1fc>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80025b2e:	ee fa ff a8 	ld.w	r10,r7[-88]
80025b32:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b36:	f0 e8 00 00 	ld.d	r8,r8[0]
80025b3a:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80025b3e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b42:	2f 88       	sub	r8,-8
80025b44:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025b48:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025b4c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b50:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025b54:	10 39       	cp.w	r9,r8
80025b56:	ce c3       	brcs	80025b2e <flashc_memset64+0x1e2>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80025b58:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b5c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025b60:	c3 a0       	breq	80025bd4 <flashc_memset64+0x288>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025b62:	30 08       	mov	r8,0
80025b64:	ef 48 ff f0 	st.w	r7[-16],r8
80025b68:	c1 38       	rjmp	80025b8e <flashc_memset64+0x242>
          flash_dword.u8[i] = *tmp.u8ptr++;
80025b6a:	ee fa ff f0 	ld.w	r10,r7[-16]
80025b6e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025b72:	11 89       	ld.ub	r9,r8[0x0]
80025b74:	5c 59       	castu.b	r9
80025b76:	ee 0a 00 0a 	add	r10,r7,r10
80025b7a:	f5 69 ff ac 	st.b	r10[-84],r9
80025b7e:	2f f8       	sub	r8,-1
80025b80:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025b84:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025b88:	2f f8       	sub	r8,-1
80025b8a:	ef 48 ff f0 	st.w	r7[-16],r8
80025b8e:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025b92:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025b96:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025b9a:	10 39       	cp.w	r9,r8
80025b9c:	fe 9b ff e7 	brhi	80025b6a <flashc_memset64+0x21e>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025ba0:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025ba4:	e0 18 ff f8 	andl	r8,0xfff8
80025ba8:	ef 48 ff e0 	st.w	r7[-32],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80025bac:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025bb0:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025bb4:	10 39       	cp.w	r9,r8
80025bb6:	c0 f2       	brcc	80025bd4 <flashc_memset64+0x288>
        {
          // Write the flash double-word buffer to the page buffer and reinitialize it.
          *dest.u64ptr++ = flash_dword.u64;
80025bb8:	ee fa ff e0 	ld.w	r10,r7[-32]
80025bbc:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025bc0:	f4 e9 00 00 	st.d	r10[0],r8
80025bc4:	f4 c8 ff f8 	sub	r8,r10,-8
80025bc8:	ef 48 ff e0 	st.w	r7[-32],r8
          flash_dword.u64 = source.u64;
80025bcc:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025bd0:	ee e9 ff ac 	st.d	r7[-84],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025bd4:	ee f8 ff b4 	ld.w	r8,r7[-76]
80025bd8:	10 99       	mov	r9,r8
80025bda:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025bde:	f2 08 01 08 	sub	r8,r9,r8
80025be2:	a3 58       	asr	r8,0x3
80025be4:	ef 48 ff f0 	st.w	r7[-16],r8
80025be8:	c1 08       	rjmp	80025c08 <flashc_memset64+0x2bc>
      *dest.u64ptr++ = source.u64;
80025bea:	ee fa ff e0 	ld.w	r10,r7[-32]
80025bee:	ee e8 ff d8 	ld.d	r8,r7[-40]
80025bf2:	f4 e9 00 00 	st.d	r10[0],r8
80025bf6:	f4 c8 ff f8 	sub	r8,r10,-8
80025bfa:	ef 48 ff e0 	st.w	r7[-32],r8
        }
      }
    }

    // Write the source data to the page buffer with 64-bit alignment.
    for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80025bfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c02:	20 18       	sub	r8,1
80025c04:	ef 48 ff f0 	st.w	r7[-16],r8
80025c08:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c0c:	58 08       	cp.w	r8,0
80025c0e:	ce e1       	brne	80025bea <flashc_memset64+0x29e>
      *dest.u64ptr++ = source.u64;

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
80025c10:	ef 39 ff eb 	ld.ub	r9,r7[-21]
80025c14:	30 08       	mov	r8,0
80025c16:	f0 09 18 00 	cp.b	r9,r8
80025c1a:	c4 70       	breq	80025ca8 <flashc_memset64+0x35c>
    {
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
80025c1c:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c20:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
80025c24:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c28:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c2c:	c3 80       	breq	80025c9c <flashc_memset64+0x350>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80025c2e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025c32:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025c36:	ef 48 ff f0 	st.w	r7[-16],r8
80025c3a:	c1 38       	rjmp	80025c60 <flashc_memset64+0x314>
            flash_dword.u8[i] = *tmp.u8ptr++;
80025c3c:	ee fa ff f0 	ld.w	r10,r7[-16]
80025c40:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025c44:	11 89       	ld.ub	r9,r8[0x0]
80025c46:	5c 59       	castu.b	r9
80025c48:	ee 0a 00 0a 	add	r10,r7,r10
80025c4c:	f5 69 ff ac 	st.b	r10[-84],r9
80025c50:	2f f8       	sub	r8,-1
80025c52:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (i = Get_align((U32)dest_end.u8ptr, sizeof(U64)); i < sizeof(U64); i++)
80025c56:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c5a:	2f f8       	sub	r8,-1
80025c5c:	ef 48 ff f0 	st.w	r7[-16],r8
80025c60:	ee f8 ff f0 	ld.w	r8,r7[-16]
80025c64:	58 78       	cp.w	r8,7
80025c66:	fe 98 ff eb 	brls	80025c3c <flashc_memset64+0x2f0>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80025c6a:	ee fa ff e0 	ld.w	r10,r7[-32]
80025c6e:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025c72:	f4 e9 00 00 	st.d	r10[0],r8
80025c76:	f4 c8 ff f8 	sub	r8,r10,-8
80025c7a:	ef 48 ff e0 	st.w	r7[-32],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80025c7e:	c1 08       	rjmp	80025c9e <flashc_memset64+0x352>
          *tmp.u64ptr = *tmp.u64ptr;
80025c80:	ee fa ff a8 	ld.w	r10,r7[-88]
80025c84:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025c88:	f0 e8 00 00 	ld.d	r8,r8[0]
80025c8c:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80025c90:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025c94:	2f 88       	sub	r8,-8
80025c96:	ef 48 ff a8 	st.w	r7[-88],r8
80025c9a:	c0 28       	rjmp	80025c9e <flashc_memset64+0x352>
80025c9c:	d7 03       	nop
80025c9e:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025ca2:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025ca6:	ce d1       	brne	80025c80 <flashc_memset64+0x334>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
80025ca8:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025cac:	fc 19 80 80 	movh	r9,0x8080
80025cb0:	12 38       	cp.w	r8,r9
80025cb2:	e0 8b 00 2c 	brhi	80025d0a <flashc_memset64+0x3be>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
80025cb6:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025cba:	30 08       	mov	r8,0
80025cbc:	f0 09 18 00 	cp.b	r9,r8
80025cc0:	c0 e0       	breq	80025cdc <flashc_memset64+0x390>
      {
        flashc_erase_page(-1, false);
80025cc2:	30 0b       	mov	r11,0
80025cc4:	3f fc       	mov	r12,-1
80025cc6:	f0 16 00 a8 	mcall	r6[672]
        error_status |= flashc_error_status;
80025cca:	ec f8 00 54 	ld.w	r8,r6[84]
80025cce:	70 08       	ld.w	r8,r8[0x0]
80025cd0:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025cd4:	f3 e8 10 08 	or	r8,r9,r8
80025cd8:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_page(-1);
80025cdc:	3f fc       	mov	r12,-1
80025cde:	f0 16 00 fd 	mcall	r6[1012]
      error_status |= flashc_error_status;
80025ce2:	ec f8 00 54 	ld.w	r8,r6[84]
80025ce6:	70 08       	ld.w	r8,r8[0x0]
80025ce8:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025cec:	f3 e8 10 08 	or	r8,r9,r8
80025cf0:	ef 48 ff ec 	st.w	r7[-20],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80025cf4:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025cf8:	ee f8 ff e4 	ld.w	r8,r7[-28]
80025cfc:	10 39       	cp.w	r9,r8
80025cfe:	c2 33       	brcs	80025d44 <flashc_memset64+0x3f8>
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025d00:	fc 18 80 80 	movh	r8,0x8080
80025d04:	ef 48 ff e0 	st.w	r7[-32],r8
80025d08:	c1 e8       	rjmp	80025d44 <flashc_memset64+0x3f8>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
80025d0a:	ef 39 ff 94 	ld.ub	r9,r7[-108]
80025d0e:	30 08       	mov	r8,0
80025d10:	f0 09 18 00 	cp.b	r9,r8
80025d14:	c0 d0       	breq	80025d2e <flashc_memset64+0x3e2>
      {
        flashc_erase_user_page(false);
80025d16:	30 0c       	mov	r12,0
80025d18:	f0 16 01 33 	mcall	r6[1228]
        error_status |= flashc_error_status;
80025d1c:	ec f8 00 54 	ld.w	r8,r6[84]
80025d20:	70 08       	ld.w	r8,r8[0x0]
80025d22:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d26:	f3 e8 10 08 	or	r8,r9,r8
80025d2a:	ef 48 ff ec 	st.w	r7[-20],r8
      }
      flashc_write_user_page();
80025d2e:	f0 16 00 fc 	mcall	r6[1008]
      error_status |= flashc_error_status;
80025d32:	ec f8 00 54 	ld.w	r8,r6[84]
80025d36:	70 08       	ld.w	r8,r8[0x0]
80025d38:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d3c:	f3 e8 10 08 	or	r8,r9,r8
80025d40:	ef 48 ff ec 	st.w	r7[-20],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025d44:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025d48:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025d4c:	10 39       	cp.w	r9,r8
80025d4e:	fe 93 fe ad 	brlo	80025aa8 <flashc_memset64+0x15c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
80025d52:	ec f8 00 54 	ld.w	r8,r6[84]
80025d56:	ee f9 ff ec 	ld.w	r9,r7[-20]
80025d5a:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memset function does.
  return dst;
80025d5c:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
80025d60:	10 9c       	mov	r12,r8
80025d62:	2e 5d       	sub	sp,-108
80025d64:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80025d68:	80 02       	ld.sh	r2,r0[0x0]
80025d6a:	57 dc       	stdsp	sp[0x1f4],r12

80025d6c <flashc_memcpy>:


volatile void *flashc_memcpy(volatile void *dst, const void *src, size_t nbytes, bool erase)
{
80025d6c:	eb cd 40 c0 	pushm	r6-r7,lr
80025d70:	1a 97       	mov	r7,sp
80025d72:	21 ad       	sub	sp,104
80025d74:	fe f6 05 80 	ld.w	r6,pc[1408]
80025d78:	1e 26       	rsub	r6,pc
80025d7a:	ef 4c ff a4 	st.w	r7[-92],r12
80025d7e:	ef 4b ff a0 	st.w	r7[-96],r11
80025d82:	ef 4a ff 9c 	st.w	r7[-100],r10
80025d86:	12 98       	mov	r8,r9
80025d88:	ef 68 ff 98 	st.b	r7[-104],r8
  UnionCPtr source;
  StructCVPtr dest_end;
  UnionCVPtr flash_page_source_end;
  bool incomplete_flash_page_end;
  Union64 flash_dword;
  bool flash_dword_pending = false;
80025d8c:	30 08       	mov	r8,0
80025d8e:	ef 68 ff e7 	st.b	r7[-25],r8
  UnionVPtr tmp;
  unsigned int error_status = 0;
80025d92:	30 08       	mov	r8,0
80025d94:	ef 48 ff e8 	st.w	r7[-24],r8
  unsigned int i, j;

  // Reformat arguments.
  flash_array_end.u8ptr = AVR32_FLASH + flashc_get_flash_size();
80025d98:	f0 16 00 cd 	mcall	r6[820]
80025d9c:	18 99       	mov	r9,r12
80025d9e:	fc 18 80 00 	movh	r8,0x8000
80025da2:	f2 08 00 08 	add	r8,r9,r8
80025da6:	ef 48 ff e0 	st.w	r7[-32],r8
  dest.u8ptr = dst;
80025daa:	ee f8 ff a4 	ld.w	r8,r7[-92]
80025dae:	ef 48 ff dc 	st.w	r7[-36],r8
  source.u8ptr = src;
80025db2:	ee f8 ff a0 	ld.w	r8,r7[-96]
80025db6:	ef 48 ff d8 	st.w	r7[-40],r8
  dest_end.u8ptr = dest.u8ptr + nbytes;
80025dba:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025dbe:	ee f8 ff 9c 	ld.w	r8,r7[-100]
80025dc2:	f2 08 00 08 	add	r8,r9,r8
80025dc6:	ef 48 ff d4 	st.w	r7[-44],r8

  // If destination is outside flash, go to next flash page if any.
  if (dest.u8ptr < AVR32_FLASH)
80025dca:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025dce:	e0 6a ff ff 	mov	r10,65535
80025dd2:	ea 1a 7f ff 	orh	r10,0x7fff
80025dd6:	14 38       	cp.w	r8,r10
80025dd8:	e0 8b 00 13 	brhi	80025dfe <flashc_memcpy+0x92>
  {
    source.u8ptr += AVR32_FLASH - dest.u8ptr;
80025ddc:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025de0:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025de4:	fc 1a 80 00 	movh	r10,0x8000
80025de8:	f4 08 01 08 	sub	r8,r10,r8
80025dec:	f2 08 00 08 	add	r8,r9,r8
80025df0:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASH;
80025df4:	fc 18 80 00 	movh	r8,0x8000
80025df8:	ef 48 ff dc 	st.w	r7[-36],r8
80025dfc:	c2 18       	rjmp	80025e3e <flashc_memcpy+0xd2>
  }
  else if (flash_array_end.u8ptr <= dest.u8ptr && dest.u8ptr < AVR32_FLASHC_USER_PAGE)
80025dfe:	ee f9 ff e0 	ld.w	r9,r7[-32]
80025e02:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e06:	10 39       	cp.w	r9,r8
80025e08:	e0 8b 00 1b 	brhi	80025e3e <flashc_memcpy+0xd2>
80025e0c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e10:	e0 69 ff ff 	mov	r9,65535
80025e14:	ea 19 80 7f 	orh	r9,0x807f
80025e18:	12 38       	cp.w	r8,r9
80025e1a:	e0 8b 00 12 	brhi	80025e3e <flashc_memcpy+0xd2>
  {
    source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
80025e1e:	ee f9 ff d8 	ld.w	r9,r7[-40]
80025e22:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025e26:	fc 1a 80 80 	movh	r10,0x8080
80025e2a:	f4 08 01 08 	sub	r8,r10,r8
80025e2e:	f2 08 00 08 	add	r8,r9,r8
80025e32:	ef 48 ff d8 	st.w	r7[-40],r8
    dest.u8ptr = AVR32_FLASHC_USER_PAGE;
80025e36:	fc 18 80 80 	movh	r8,0x8080
80025e3a:	ef 48 ff dc 	st.w	r7[-36],r8
  }

  // If end of destination is outside flash, move it to the end of the previous flash page if any.
  if (dest_end.u8ptr > AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE)
80025e3e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e42:	e0 69 02 00 	mov	r9,512
80025e46:	ea 19 80 80 	orh	r9,0x8080
80025e4a:	12 38       	cp.w	r8,r9
80025e4c:	e0 88 00 09 	brls	80025e5e <flashc_memcpy+0xf2>
  {
    dest_end.u8ptr = AVR32_FLASHC_USER_PAGE + AVR32_FLASHC_USER_PAGE_SIZE;
80025e50:	e0 68 02 00 	mov	r8,512
80025e54:	ea 18 80 80 	orh	r8,0x8080
80025e58:	ef 48 ff d4 	st.w	r7[-44],r8
80025e5c:	c1 38       	rjmp	80025e82 <flashc_memcpy+0x116>
  }
  else if (AVR32_FLASHC_USER_PAGE >= dest_end.u8ptr && dest_end.u8ptr > flash_array_end.u8ptr)
80025e5e:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e62:	fc 1a 80 80 	movh	r10,0x8080
80025e66:	14 38       	cp.w	r8,r10
80025e68:	e0 8b 00 0d 	brhi	80025e82 <flashc_memcpy+0x116>
80025e6c:	ee f9 ff d4 	ld.w	r9,r7[-44]
80025e70:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e74:	10 39       	cp.w	r9,r8
80025e76:	e0 88 00 06 	brls	80025e82 <flashc_memcpy+0x116>
  {
    dest_end.u8ptr = flash_array_end.u8ptr;
80025e7a:	ee f8 ff e0 	ld.w	r8,r7[-32]
80025e7e:	ef 48 ff d4 	st.w	r7[-44],r8
  }

  // Align each end of destination pointer with its natural boundary.
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
80025e82:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025e86:	a1 c8       	cbr	r8,0x0
80025e88:	ef 48 ff cc 	st.w	r7[-52],r8
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
80025e8c:	ee f8 ff cc 	ld.w	r8,r7[-52]
80025e90:	e0 18 ff fc 	andl	r8,0xfffc
80025e94:	ef 48 ff c4 	st.w	r7[-60],r8
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));
80025e98:	ee f8 ff c4 	ld.w	r8,r7[-60]
80025e9c:	e0 18 ff f8 	andl	r8,0xfff8
80025ea0:	ef 48 ff bc 	st.w	r7[-68],r8

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
80025ea4:	e0 8f 02 16 	bral	800262d0 <flashc_memcpy+0x564>
  {
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
80025ea8:	f0 16 01 2e 	mcall	r6[1208]
    error_status |= flashc_error_status;
80025eac:	ec f8 00 54 	ld.w	r8,r6[84]
80025eb0:	70 08       	ld.w	r8,r8[0x0]
80025eb2:	ee f9 ff e8 	ld.w	r9,r7[-24]
80025eb6:	f3 e8 10 08 	or	r8,r9,r8
80025eba:	ef 48 ff e8 	st.w	r7[-24],r8

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
80025ebe:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025ec2:	ef 48 ff f8 	st.w	r7[-8],r8
80025ec6:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025eca:	e0 18 fe 00 	andl	r8,0xfe00
80025ece:	f0 c8 fe 00 	sub	r8,r8,-512
80025ed2:	ef 48 ff fc 	st.w	r7[-4],r8
80025ed6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80025eda:	ee f9 ff fc 	ld.w	r9,r7[-4]
80025ede:	f0 09 0d 48 	min	r8,r8,r9
80025ee2:	ef 48 ff f4 	st.w	r7[-12],r8
80025ee6:	ee f8 ff f4 	ld.w	r8,r7[-12]
    // Clear the page buffer in order to prepare data for a flash page write.
    flashc_clear_page_buffer();
    error_status |= flashc_error_status;

    // Determine where the source data will end in the current flash page.
    flash_page_source_end.u64ptr =
80025eea:	ef 48 ff b4 	st.w	r7[-76],r8
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025eee:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025ef2:	10 9a       	mov	r10,r8
80025ef4:	e0 1a fe 00 	andl	r10,0xfe00
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));
80025ef8:	ee f8 ff d4 	ld.w	r8,r7[-44]
80025efc:	10 99       	mov	r9,r8
80025efe:	e0 19 fe 00 	andl	r9,0xfe00
    flash_page_source_end.u64ptr =
      (U64 *)min((U32)dest_end.u64ptr,
                 Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) + AVR32_FLASHC_PAGE_SIZE);

    // Determine if the current destination page has an incomplete end.
    incomplete_flash_page_end = (Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE) >=
80025f02:	30 18       	mov	r8,1
80025f04:	12 3a       	cp.w	r10,r9
80025f06:	c0 22       	brcc	80025f0a <flashc_memcpy+0x19e>
80025f08:	30 08       	mov	r8,0
80025f0a:	ef 68 ff e6 	st.b	r7[-26],r8
                                 Align_down((U32)dest_end.u8ptr, AVR32_FLASHC_PAGE_SIZE));

    // If destination does not point to the beginning of the current flash page...
    if (!Test_align((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE))
80025f0e:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f12:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
80025f16:	c7 20       	breq	80025ffa <flashc_memcpy+0x28e>
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025f18:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f1c:	e0 18 fe 00 	andl	r8,0xfe00
80025f20:	ef 48 ff a8 	st.w	r7[-88],r8
80025f24:	c0 e8       	rjmp	80025f40 <flashc_memcpy+0x1d4>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;
80025f26:	ee fa ff a8 	ld.w	r10,r7[-88]
80025f2a:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f2e:	f0 e8 00 00 	ld.d	r8,r8[0]
80025f32:	f4 e9 00 00 	st.d	r10[0],r8
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
80025f36:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f3a:	2f 88       	sub	r8,-8
80025f3c:	ef 48 ff a8 	st.w	r7[-88],r8
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025f40:	ee f9 ff a8 	ld.w	r9,r7[-88]
80025f44:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f48:	e0 18 ff f8 	andl	r8,0xfff8
    {
      // Fill the beginning of the page buffer with the current flash page data.
      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      for (tmp.u8ptr = (U8 *)Align_down((U32)dest.u8ptr, AVR32_FLASHC_PAGE_SIZE);
80025f4c:	10 39       	cp.w	r9,r8
80025f4e:	ce c3       	brcs	80025f26 <flashc_memcpy+0x1ba>
           tmp.u64ptr < (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
           tmp.u64ptr++)
        *tmp.u64ptr = *tmp.u64ptr;

      // If destination is not 64-bit aligned...
      if (!Test_align((U32)dest.u8ptr, sizeof(U64)))
80025f50:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f54:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80025f58:	c5 10       	breq	80025ffa <flashc_memcpy+0x28e>
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025f5a:	30 08       	mov	r8,0
80025f5c:	ef 48 ff ec 	st.w	r7[-20],r8
80025f60:	c1 38       	rjmp	80025f86 <flashc_memcpy+0x21a>
          flash_dword.u8[i] = *tmp.u8ptr++;
80025f62:	ee fa ff ec 	ld.w	r10,r7[-20]
80025f66:	ee f8 ff a8 	ld.w	r8,r7[-88]
80025f6a:	11 89       	ld.ub	r9,r8[0x0]
80025f6c:	5c 59       	castu.b	r9
80025f6e:	ee 0a 00 0a 	add	r10,r7,r10
80025f72:	f5 69 ff ac 	st.b	r10[-84],r9
80025f76:	2f f8       	sub	r8,-1
80025f78:	ef 48 ff a8 	st.w	r7[-88],r8
        // Fill the beginning of the flash double-word buffer with the current
        // flash page data.
        // This is required by the hardware, even if page erase is not
        // requested, in order to be able to write successfully to erased parts
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
80025f7c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025f80:	2f f8       	sub	r8,-1
80025f82:	ef 48 ff ec 	st.w	r7[-20],r8
80025f86:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025f8a:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80025f8e:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025f92:	10 39       	cp.w	r9,r8
80025f94:	fe 9b ff e7 	brhi	80025f62 <flashc_memcpy+0x1f6>
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80025f98:	c1 28       	rjmp	80025fbc <flashc_memcpy+0x250>
          flash_dword.u8[i] = *source.u8ptr++;
80025f9a:	ee fa ff ec 	ld.w	r10,r7[-20]
80025f9e:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025fa2:	11 89       	ld.ub	r9,r8[0x0]
80025fa4:	ee 0a 00 0a 	add	r10,r7,r10
80025fa8:	f5 69 ff ac 	st.b	r10[-84],r9
80025fac:	2f f8       	sub	r8,-1
80025fae:	ef 48 ff d8 	st.w	r7[-40],r8
        // of flash pages that have already been written to.
        for (i = 0; i < Get_align((U32)dest.u8ptr, sizeof(U64)); i++)
          flash_dword.u8[i] = *tmp.u8ptr++;

        // Fill the end of the flash double-word buffer with the source data.
        for (; i < sizeof(U64); i++)
80025fb2:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025fb6:	2f f8       	sub	r8,-1
80025fb8:	ef 48 ff ec 	st.w	r7[-20],r8
80025fbc:	ee f8 ff ec 	ld.w	r8,r7[-20]
80025fc0:	58 78       	cp.w	r8,7
80025fc2:	fe 98 ff ec 	brls	80025f9a <flashc_memcpy+0x22e>
          flash_dword.u8[i] = *source.u8ptr++;

        // Align the destination pointer with its 64-bit boundary.
        dest.u64ptr = (U64 *)Align_down((U32)dest.u8ptr, sizeof(U64));
80025fc6:	ee f8 ff dc 	ld.w	r8,r7[-36]
80025fca:	e0 18 ff f8 	andl	r8,0xfff8
80025fce:	ef 48 ff dc 	st.w	r7[-36],r8

        // If the current destination double-word is not the last one...
        if (dest.u64ptr < dest_end.u64ptr)
80025fd2:	ee f9 ff dc 	ld.w	r9,r7[-36]
80025fd6:	ee f8 ff bc 	ld.w	r8,r7[-68]
80025fda:	10 39       	cp.w	r9,r8
80025fdc:	c0 c2       	brcc	80025ff4 <flashc_memcpy+0x288>
        {
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
80025fde:	ee fa ff dc 	ld.w	r10,r7[-36]
80025fe2:	ee e8 ff ac 	ld.d	r8,r7[-84]
80025fe6:	f4 e9 00 00 	st.d	r10[0],r8
80025fea:	f4 c8 ff f8 	sub	r8,r10,-8
80025fee:	ef 48 ff dc 	st.w	r7[-36],r8
80025ff2:	c0 48       	rjmp	80025ffa <flashc_memcpy+0x28e>
        }
        // If the current destination double-word is the last one, the flash
        // double-word buffer must be kept for later.
        else flash_dword_pending = true;
80025ff4:	30 18       	mov	r8,1
80025ff6:	ef 68 ff e7 	st.b	r7[-25],r8
      }
    }

    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
80025ffa:	ee f8 ff d8 	ld.w	r8,r7[-40]
80025ffe:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80026002:	c0 40       	breq	8002600a <flashc_memcpy+0x29e>
80026004:	58 28       	cp.w	r8,2
80026006:	c2 70       	breq	80026054 <flashc_memcpy+0x2e8>
80026008:	c6 18       	rjmp	800260ca <flashc_memcpy+0x35e>
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
8002600a:	ee f8 ff b4 	ld.w	r8,r7[-76]
8002600e:	10 99       	mov	r9,r8
80026010:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026014:	f2 08 01 08 	sub	r8,r9,r8
80026018:	a3 58       	asr	r8,0x3
8002601a:	ef 48 ff ec 	st.w	r7[-20],r8
8002601e:	c1 68       	rjmp	8002604a <flashc_memcpy+0x2de>
        *dest.u64ptr++ = *source.u64ptr++;
80026020:	ee fb ff dc 	ld.w	r11,r7[-36]
80026024:	ee fa ff d8 	ld.w	r10,r7[-40]
80026028:	f4 e8 00 00 	ld.d	r8,r10[0]
8002602c:	f6 e9 00 00 	st.d	r11[0],r8
80026030:	f6 c8 ff f8 	sub	r8,r11,-8
80026034:	ef 48 ff dc 	st.w	r7[-36],r8
80026038:	f4 c8 ff f8 	sub	r8,r10,-8
8002603c:	ef 48 ff d8 	st.w	r7[-40],r8
    // Read the source data with the maximal possible alignment and write it to
    // the page buffer with 64-bit alignment.
    switch (Get_align((U32)source.u8ptr, sizeof(U32)))
    {
    case 0:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026040:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026044:	20 18       	sub	r8,1
80026046:	ef 48 ff ec 	st.w	r7[-20],r8
8002604a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002604e:	58 08       	cp.w	r8,0
80026050:	ce 81       	brne	80026020 <flashc_memcpy+0x2b4>
        *dest.u64ptr++ = *source.u64ptr++;
      break;
80026052:	c7 48       	rjmp	8002613a <flashc_memcpy+0x3ce>

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026054:	ee f8 ff b4 	ld.w	r8,r7[-76]
80026058:	10 99       	mov	r9,r8
8002605a:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002605e:	f2 08 01 08 	sub	r8,r9,r8
80026062:	a3 58       	asr	r8,0x3
80026064:	ef 48 ff ec 	st.w	r7[-20],r8
80026068:	c2 c8       	rjmp	800260c0 <flashc_memcpy+0x354>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
8002606a:	30 08       	mov	r8,0
8002606c:	ef 48 ff f0 	st.w	r7[-16],r8
80026070:	c1 48       	rjmp	80026098 <flashc_memcpy+0x32c>
80026072:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026076:	ee f9 ff d8 	ld.w	r9,r7[-40]
8002607a:	92 0a       	ld.sh	r10,r9[0x0]
8002607c:	a1 78       	lsl	r8,0x1
8002607e:	ee 08 00 08 	add	r8,r7,r8
80026082:	f1 5a ff ac 	st.h	r8[-84],r10
80026086:	f2 c8 ff fe 	sub	r8,r9,-2
8002608a:	ef 48 ff d8 	st.w	r7[-40],r8
8002608e:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026092:	2f f8       	sub	r8,-1
80026094:	ef 48 ff f0 	st.w	r7[-16],r8
80026098:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002609c:	58 38       	cp.w	r8,3
8002609e:	fe 98 ff ea 	brls	80026072 <flashc_memcpy+0x306>
        *dest.u64ptr++ = flash_dword.u64;
800260a2:	ee fa ff dc 	ld.w	r10,r7[-36]
800260a6:	ee e8 ff ac 	ld.d	r8,r7[-84]
800260aa:	f4 e9 00 00 	st.d	r10[0],r8
800260ae:	f4 c8 ff f8 	sub	r8,r10,-8
800260b2:	ef 48 ff dc 	st.w	r7[-36],r8
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
        *dest.u64ptr++ = *source.u64ptr++;
      break;

    case sizeof(U16):
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800260b6:	ee f8 ff ec 	ld.w	r8,r7[-20]
800260ba:	20 18       	sub	r8,1
800260bc:	ef 48 ff ec 	st.w	r7[-20],r8
800260c0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800260c4:	58 08       	cp.w	r8,0
800260c6:	cd 21       	brne	8002606a <flashc_memcpy+0x2fe>
      {
        for (j = 0; j < sizeof(U64) / sizeof(U16); j++) flash_dword.u16[j] = *source.u16ptr++;
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;
800260c8:	c3 98       	rjmp	8002613a <flashc_memcpy+0x3ce>

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
800260ca:	ee f8 ff b4 	ld.w	r8,r7[-76]
800260ce:	10 99       	mov	r9,r8
800260d0:	ee f8 ff dc 	ld.w	r8,r7[-36]
800260d4:	f2 08 01 08 	sub	r8,r9,r8
800260d8:	a3 58       	asr	r8,0x3
800260da:	ef 48 ff ec 	st.w	r7[-20],r8
800260de:	c2 a8       	rjmp	80026132 <flashc_memcpy+0x3c6>
      {
        for (j = 0; j < sizeof(U64); j++) flash_dword.u8[j] = *source.u8ptr++;
800260e0:	30 08       	mov	r8,0
800260e2:	ef 48 ff f0 	st.w	r7[-16],r8
800260e6:	c1 28       	rjmp	8002610a <flashc_memcpy+0x39e>
800260e8:	ee fa ff f0 	ld.w	r10,r7[-16]
800260ec:	ee f8 ff d8 	ld.w	r8,r7[-40]
800260f0:	11 89       	ld.ub	r9,r8[0x0]
800260f2:	ee 0a 00 0a 	add	r10,r7,r10
800260f6:	f5 69 ff ac 	st.b	r10[-84],r9
800260fa:	2f f8       	sub	r8,-1
800260fc:	ef 48 ff d8 	st.w	r7[-40],r8
80026100:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026104:	2f f8       	sub	r8,-1
80026106:	ef 48 ff f0 	st.w	r7[-16],r8
8002610a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002610e:	58 78       	cp.w	r8,7
80026110:	fe 98 ff ec 	brls	800260e8 <flashc_memcpy+0x37c>
        *dest.u64ptr++ = flash_dword.u64;
80026114:	ee fa ff dc 	ld.w	r10,r7[-36]
80026118:	ee e8 ff ac 	ld.d	r8,r7[-84]
8002611c:	f4 e9 00 00 	st.d	r10[0],r8
80026120:	f4 c8 ff f8 	sub	r8,r10,-8
80026124:	ef 48 ff dc 	st.w	r7[-36],r8
        *dest.u64ptr++ = flash_dword.u64;
      }
      break;

    default:
      for (i = flash_page_source_end.u64ptr - dest.u64ptr; i; i--)
80026128:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002612c:	20 18       	sub	r8,1
8002612e:	ef 48 ff ec 	st.w	r7[-20],r8
80026132:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026136:	58 08       	cp.w	r8,0
80026138:	cd 41       	brne	800260e0 <flashc_memcpy+0x374>
        *dest.u64ptr++ = flash_dword.u64;
      }
    }

    // If the current destination page has an incomplete end...
    if (incomplete_flash_page_end)
8002613a:	ef 39 ff e6 	ld.ub	r9,r7[-26]
8002613e:	30 08       	mov	r8,0
80026140:	f0 09 18 00 	cp.b	r9,r8
80026144:	c6 c0       	breq	8002621c <flashc_memcpy+0x4b0>
    {
      // If the flash double-word buffer is in use, do not initialize it.
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
80026146:	ef 39 ff e7 	ld.ub	r9,r7[-25]
8002614a:	30 08       	mov	r8,0
8002614c:	f0 09 18 00 	cp.b	r9,r8
80026150:	c0 80       	breq	80026160 <flashc_memcpy+0x3f4>
80026152:	ee f8 ff d4 	ld.w	r8,r7[-44]
80026156:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002615a:	ef 48 ff ec 	st.w	r7[-20],r8
8002615e:	c1 f8       	rjmp	8002619c <flashc_memcpy+0x430>
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026160:	30 08       	mov	r8,0
80026162:	ef 48 ff ec 	st.w	r7[-20],r8
80026166:	c1 28       	rjmp	8002618a <flashc_memcpy+0x41e>
          flash_dword.u8[i] = *source.u8ptr++;
80026168:	ee fa ff ec 	ld.w	r10,r7[-20]
8002616c:	ee f8 ff d8 	ld.w	r8,r7[-40]
80026170:	11 89       	ld.ub	r9,r8[0x0]
80026172:	ee 0a 00 0a 	add	r10,r7,r10
80026176:	f5 69 ff ac 	st.b	r10[-84],r9
8002617a:	2f f8       	sub	r8,-1
8002617c:	ef 48 ff d8 	st.w	r7[-40],r8
      if (flash_dword_pending) i = Get_align((U32)dest_end.u8ptr, sizeof(U64));
      // If the flash double-word buffer is free...
      else
      {
        // Fill the beginning of the flash double-word buffer with the source data.
        for (i = 0; i < Get_align((U32)dest_end.u8ptr, sizeof(U64)); i++)
80026180:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026184:	2f f8       	sub	r8,-1
80026186:	ef 48 ff ec 	st.w	r7[-20],r8
8002618a:	ee f8 ff d4 	ld.w	r8,r7[-44]
8002618e:	f3 d8 c0 03 	bfextu	r9,r8,0x0,0x3
80026192:	ee f8 ff ec 	ld.w	r8,r7[-20]
80026196:	10 39       	cp.w	r9,r8
80026198:	fe 9b ff e8 	brhi	80026168 <flashc_memcpy+0x3fc>

      // This is required by the hardware, even if page erase is not requested,
      // in order to be able to write successfully to erased parts of flash
      // pages that have already been written to.
      {
        tmp.u8ptr = (volatile U8 *)dest_end.u8ptr;
8002619c:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261a0:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
800261a4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800261a8:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
800261ac:	c3 20       	breq	80026210 <flashc_memcpy+0x4a4>
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
800261ae:	c1 38       	rjmp	800261d4 <flashc_memcpy+0x468>
            flash_dword.u8[i] = *tmp.u8ptr++;
800261b0:	ee fa ff ec 	ld.w	r10,r7[-20]
800261b4:	ee f8 ff a8 	ld.w	r8,r7[-88]
800261b8:	11 89       	ld.ub	r9,r8[0x0]
800261ba:	5c 59       	castu.b	r9
800261bc:	ee 0a 00 0a 	add	r10,r7,r10
800261c0:	f5 69 ff ac 	st.b	r10[-84],r9
800261c4:	2f f8       	sub	r8,-1
800261c6:	ef 48 ff a8 	st.w	r7[-88],r8

        // If end of destination is not 64-bit aligned...
        if (!Test_align((U32)dest_end.u8ptr, sizeof(U64)))
        {
          // Fill the end of the flash double-word buffer with the current flash page data.
          for (; i < sizeof(U64); i++)
800261ca:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261ce:	2f f8       	sub	r8,-1
800261d0:	ef 48 ff ec 	st.w	r7[-20],r8
800261d4:	ee f8 ff ec 	ld.w	r8,r7[-20]
800261d8:	58 78       	cp.w	r8,7
800261da:	fe 98 ff eb 	brls	800261b0 <flashc_memcpy+0x444>
            flash_dword.u8[i] = *tmp.u8ptr++;

          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
800261de:	ee fa ff dc 	ld.w	r10,r7[-36]
800261e2:	ee e8 ff ac 	ld.d	r8,r7[-84]
800261e6:	f4 e9 00 00 	st.d	r10[0],r8
800261ea:	f4 c8 ff f8 	sub	r8,r10,-8
800261ee:	ef 48 ff dc 	st.w	r7[-36],r8
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
800261f2:	c1 08       	rjmp	80026212 <flashc_memcpy+0x4a6>
          *tmp.u64ptr = *tmp.u64ptr;
800261f4:	ee fa ff a8 	ld.w	r10,r7[-88]
800261f8:	ee f8 ff a8 	ld.w	r8,r7[-88]
800261fc:	f0 e8 00 00 	ld.d	r8,r8[0]
80026200:	f4 e9 00 00 	st.d	r10[0],r8
          // Write the flash double-word buffer to the page buffer.
          *dest.u64ptr++ = flash_dword.u64;
        }

        // Fill the end of the page buffer with the current flash page data.
        for (; !Test_align((U32)tmp.u64ptr, AVR32_FLASHC_PAGE_SIZE); tmp.u64ptr++)
80026204:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026208:	2f 88       	sub	r8,-8
8002620a:	ef 48 ff a8 	st.w	r7[-88],r8
8002620e:	c0 28       	rjmp	80026212 <flashc_memcpy+0x4a6>
80026210:	d7 03       	nop
80026212:	ee f8 ff a8 	ld.w	r8,r7[-88]
80026216:	f1 d8 c0 09 	bfextu	r8,r8,0x0,0x9
8002621a:	ce d1       	brne	800261f4 <flashc_memcpy+0x488>
          *tmp.u64ptr = *tmp.u64ptr;
      }
    }

    // If the current flash page is in the flash array...
    if (dest.u8ptr <= AVR32_FLASHC_USER_PAGE)
8002621c:	ee f8 ff dc 	ld.w	r8,r7[-36]
80026220:	fc 19 80 80 	movh	r9,0x8080
80026224:	12 38       	cp.w	r8,r9
80026226:	e0 8b 00 38 	brhi	80026296 <flashc_memcpy+0x52a>
    {
      // Erase the current page if requested and write it from the page buffer.
      if (erase)
8002622a:	ef 39 ff 98 	ld.ub	r9,r7[-104]
8002622e:	30 08       	mov	r8,0
80026230:	f0 09 18 00 	cp.b	r9,r8
80026234:	c0 e0       	breq	80026250 <flashc_memcpy+0x4e4>
      {
        flashc_erase_page(-1, false);
80026236:	30 0b       	mov	r11,0
80026238:	3f fc       	mov	r12,-1
8002623a:	f0 16 00 a8 	mcall	r6[672]
        error_status |= flashc_error_status;
8002623e:	ec f8 00 54 	ld.w	r8,r6[84]
80026242:	70 08       	ld.w	r8,r8[0x0]
80026244:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026248:	f3 e8 10 08 	or	r8,r9,r8
8002624c:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_page(-1);
80026250:	3f fc       	mov	r12,-1
80026252:	f0 16 00 fd 	mcall	r6[1012]
      error_status |= flashc_error_status;
80026256:	ec f8 00 54 	ld.w	r8,r6[84]
8002625a:	70 08       	ld.w	r8,r8[0x0]
8002625c:	ee f9 ff e8 	ld.w	r9,r7[-24]
80026260:	f3 e8 10 08 	or	r8,r9,r8
80026264:	ef 48 ff e8 	st.w	r7[-24],r8

      // If the end of the flash array is reached, go to the User page.
      if (dest.u8ptr >= flash_array_end.u8ptr)
80026268:	ee f9 ff dc 	ld.w	r9,r7[-36]
8002626c:	ee f8 ff e0 	ld.w	r8,r7[-32]
80026270:	10 39       	cp.w	r9,r8
80026272:	c2 f3       	brcs	800262d0 <flashc_memcpy+0x564>
      {
        source.u8ptr += AVR32_FLASHC_USER_PAGE - dest.u8ptr;
80026274:	ee f9 ff d8 	ld.w	r9,r7[-40]
80026278:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002627c:	fc 1a 80 80 	movh	r10,0x8080
80026280:	f4 08 01 08 	sub	r8,r10,r8
80026284:	f2 08 00 08 	add	r8,r9,r8
80026288:	ef 48 ff d8 	st.w	r7[-40],r8
        dest.u8ptr = AVR32_FLASHC_USER_PAGE;
8002628c:	fc 18 80 80 	movh	r8,0x8080
80026290:	ef 48 ff dc 	st.w	r7[-36],r8
80026294:	c1 e8       	rjmp	800262d0 <flashc_memcpy+0x564>
    }
    // If the current flash page is the User page...
    else
    {
      // Erase the User page if requested and write it from the page buffer.
      if (erase)
80026296:	ef 39 ff 98 	ld.ub	r9,r7[-104]
8002629a:	30 08       	mov	r8,0
8002629c:	f0 09 18 00 	cp.b	r9,r8
800262a0:	c0 d0       	breq	800262ba <flashc_memcpy+0x54e>
      {
        flashc_erase_user_page(false);
800262a2:	30 0c       	mov	r12,0
800262a4:	f0 16 01 33 	mcall	r6[1228]
        error_status |= flashc_error_status;
800262a8:	ec f8 00 54 	ld.w	r8,r6[84]
800262ac:	70 08       	ld.w	r8,r8[0x0]
800262ae:	ee f9 ff e8 	ld.w	r9,r7[-24]
800262b2:	f3 e8 10 08 	or	r8,r9,r8
800262b6:	ef 48 ff e8 	st.w	r7[-24],r8
      }
      flashc_write_user_page();
800262ba:	f0 16 00 fc 	mcall	r6[1008]
      error_status |= flashc_error_status;
800262be:	ec f8 00 54 	ld.w	r8,r6[84]
800262c2:	70 08       	ld.w	r8,r8[0x0]
800262c4:	ee f9 ff e8 	ld.w	r9,r7[-24]
800262c8:	f3 e8 10 08 	or	r8,r9,r8
800262cc:	ef 48 ff e8 	st.w	r7[-24],r8
  dest_end.u16ptr = (U16 *)Align_down((U32)dest_end.u8ptr, sizeof(U16));
  dest_end.u32ptr = (U32 *)Align_down((U32)dest_end.u16ptr, sizeof(U32));
  dest_end.u64ptr = (U64 *)Align_down((U32)dest_end.u32ptr, sizeof(U64));

  // While end of destination is not reached...
  while (dest.u8ptr < dest_end.u8ptr)
800262d0:	ee f9 ff dc 	ld.w	r9,r7[-36]
800262d4:	ee f8 ff d4 	ld.w	r8,r7[-44]
800262d8:	10 39       	cp.w	r9,r8
800262da:	fe 93 fd e7 	brlo	80025ea8 <flashc_memcpy+0x13c>
      error_status |= flashc_error_status;
    }
  }

  // Update the FLASHC error status.
  flashc_error_status = error_status;
800262de:	ec f8 00 54 	ld.w	r8,r6[84]
800262e2:	ee f9 ff e8 	ld.w	r9,r7[-24]
800262e6:	91 09       	st.w	r8[0x0],r9

  // Return the initial destination pointer as the standard memcpy function does.
  return dst;
800262e8:	ee f8 ff a4 	ld.w	r8,r7[-92]
}
800262ec:	10 9c       	mov	r12,r8
800262ee:	2e 6d       	sub	sp,-104
800262f0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800262f4:	80 02       	ld.sh	r2,r0[0x0]
800262f6:	5b fc       	cp.w	r12,-1

800262f8 <flashc_set_flash_waitstate_and_readmode>:


#if UC3C
void flashc_set_flash_waitstate_and_readmode(unsigned long cpu_f_hz)
{
800262f8:	eb cd 40 c0 	pushm	r6-r7,lr
800262fc:	1a 97       	mov	r7,sp
800262fe:	20 1d       	sub	sp,4
80026300:	49 76       	lddpc	r6,8002635c <flashc_set_flash_waitstate_and_readmode+0x64>
80026302:	1e 26       	rsub	r6,pc
80026304:	ef 4c ff fc 	st.w	r7[-4],r12
  #define AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ      33000000
  #define AVR32_FLASHC_HSEN_FWS_1_MAX_FREQ      72000000
  // These defines are missing from or wrong in the toolchain header files uc3cxxx.h
  // Put a Bugzilla 

  if(cpu_f_hz > AVR32_FLASHC_HSEN_FWS_0_MAX_FREQ)    // > 33MHz
80026308:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002630c:	e0 69 8a 40 	mov	r9,35392
80026310:	ea 19 01 f7 	orh	r9,0x1f7
80026314:	12 38       	cp.w	r8,r9
80026316:	e0 88 00 18 	brls	80026346 <flashc_set_flash_waitstate_and_readmode+0x4e>
  {
    // Set a wait-state
    flashc_set_wait_state(1);
8002631a:	30 1c       	mov	r12,1
8002631c:	f0 16 00 a1 	mcall	r6[644]
    if(cpu_f_hz <= AVR32_FLASHC_FWS_1_MAX_FREQ) // <= 66MHz and >33Mhz
80026320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026324:	e0 69 14 80 	mov	r9,5248
80026328:	ea 19 03 ef 	orh	r9,0x3ef
8002632c:	12 38       	cp.w	r8,r9
8002632e:	e0 8b 00 07 	brhi	8002633c <flashc_set_flash_waitstate_and_readmode+0x44>
    {
      // Disable the high-speed read mode.      
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
80026332:	3f fb       	mov	r11,-1
80026334:	31 1c       	mov	r12,17
80026336:	f0 16 00 2a 	mcall	r6[168]
8002633a:	c0 d8       	rjmp	80026354 <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
    else // > 66Mhz
    {
      // Enable the high-speed read mode.
      flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSEN, -1);                     
8002633c:	3f fb       	mov	r11,-1
8002633e:	31 0c       	mov	r12,16
80026340:	f0 16 00 2a 	mcall	r6[168]
80026344:	c0 88       	rjmp	80026354 <flashc_set_flash_waitstate_and_readmode+0x5c>
    }
  }
  else  // <= 33 MHz    
  {
    // Disable wait-state
    flashc_set_wait_state(0);
80026346:	30 0c       	mov	r12,0
80026348:	f0 16 00 a1 	mcall	r6[644]

    // Disable the high-speed read mode.
    flashc_issue_command(AVR32_FLASHC_FCMD_CMD_HSDIS, -1);
8002634c:	3f fb       	mov	r11,-1
8002634e:	31 1c       	mov	r12,17
80026350:	f0 16 00 2a 	mcall	r6[168]
    
  }
}
80026354:	2f fd       	sub	sp,-4
80026356:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002635a:	00 00       	add	r0,r0
8002635c:	80 02       	ld.sh	r2,r0[0x0]
8002635e:	61 86       	ld.w	r6,r0[0x60]

80026360 <gpio_enable_module>:
 */
//! @{


int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
80026360:	eb cd 40 c0 	pushm	r6-r7,lr
80026364:	1a 97       	mov	r7,sp
80026366:	20 4d       	sub	sp,16
80026368:	49 b6       	lddpc	r6,800263d4 <gpio_enable_module+0x74>
8002636a:	1e 26       	rsub	r6,pc
8002636c:	ef 4c ff f4 	st.w	r7[-12],r12
80026370:	ef 4b ff f0 	st.w	r7[-16],r11
  int status = GPIO_SUCCESS;
80026374:	30 08       	mov	r8,0
80026376:	ef 48 ff f8 	st.w	r7[-8],r8
  uint32_t i;

  for (i = 0; i < size; i++)
8002637a:	30 08       	mov	r8,0
8002637c:	ef 48 ff fc 	st.w	r7[-4],r8
80026380:	c1 d8       	rjmp	800263ba <gpio_enable_module+0x5a>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
80026382:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026386:	11 98       	ld.ub	r8,r8[0x1]
80026388:	10 99       	mov	r9,r8
8002638a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002638e:	11 88       	ld.ub	r8,r8[0x0]
80026390:	12 9b       	mov	r11,r9
80026392:	10 9c       	mov	r12,r8
80026394:	f0 16 00 3f 	mcall	r6[252]
80026398:	18 98       	mov	r8,r12
8002639a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002639e:	f3 e8 10 08 	or	r8,r9,r8
800263a2:	ef 48 ff f8 	st.w	r7[-8],r8
    gpiomap++;
800263a6:	ee f8 ff f4 	ld.w	r8,r7[-12]
800263aa:	2f e8       	sub	r8,-2
800263ac:	ef 48 ff f4 	st.w	r7[-12],r8
int gpio_enable_module(const gpio_map_t gpiomap, uint32_t size)
{
  int status = GPIO_SUCCESS;
  uint32_t i;

  for (i = 0; i < size; i++)
800263b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800263b4:	2f f8       	sub	r8,-1
800263b6:	ef 48 ff fc 	st.w	r7[-4],r8
800263ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
800263be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800263c2:	10 39       	cp.w	r9,r8
800263c4:	cd f3       	brcs	80026382 <gpio_enable_module+0x22>
  {
    status |= gpio_enable_module_pin(gpiomap->pin, gpiomap->function);
    gpiomap++;
  }

  return status;
800263c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
800263ca:	10 9c       	mov	r12,r8
800263cc:	2f cd       	sub	sp,-16
800263ce:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800263d2:	00 00       	add	r0,r0
800263d4:	80 02       	ld.sh	r2,r0[0x0]
800263d6:	61 ee       	ld.w	lr,r0[0x78]

800263d8 <gpio_enable_module_pin>:


int gpio_enable_module_pin(uint32_t pin, uint32_t function)
{
800263d8:	eb cd 40 c0 	pushm	r6-r7,lr
800263dc:	1a 97       	mov	r7,sp
800263de:	20 3d       	sub	sp,12
800263e0:	fe f6 02 94 	ld.w	r6,pc[660]
800263e4:	1e 26       	rsub	r6,pc
800263e6:	ef 4c ff f8 	st.w	r7[-8],r12
800263ea:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800263ee:	ee f8 ff f8 	ld.w	r8,r7[-8]
800263f2:	a5 98       	lsr	r8,0x5
800263f4:	a9 78       	lsl	r8,0x9
800263f6:	e0 28 e0 00 	sub	r8,57344
800263fa:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the correct function.
  switch (function)
800263fe:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026402:	58 78       	cp.w	r8,7
80026404:	e0 8b 01 26 	brhi	80026650 <gpio_enable_module_pin+0x278>
80026408:	fe c9 ff f8 	sub	r9,pc,-8
8002640c:	f2 08 00 2f 	add	pc,r9,r8<<0x2
80026410:	e0 8f 00 10 	bral	80026430 <gpio_enable_module_pin+0x58>
80026414:	e0 8f 00 30 	bral	80026474 <gpio_enable_module_pin+0x9c>
80026418:	e0 8f 00 50 	bral	800264b8 <gpio_enable_module_pin+0xe0>
8002641c:	e0 8f 00 70 	bral	800264fc <gpio_enable_module_pin+0x124>
80026420:	e0 8f 00 90 	bral	80026540 <gpio_enable_module_pin+0x168>
80026424:	e0 8f 00 b0 	bral	80026584 <gpio_enable_module_pin+0x1ac>
80026428:	e0 8f 00 d0 	bral	800265c8 <gpio_enable_module_pin+0x1f0>
8002642c:	e0 8f 00 f0 	bral	8002660c <gpio_enable_module_pin+0x234>
  {
  case 0: // A function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026430:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026434:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026438:	30 19       	mov	r9,1
8002643a:	f2 08 09 48 	lsl	r8,r9,r8
8002643e:	10 99       	mov	r9,r8
80026440:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026444:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026446:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002644a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002644e:	30 19       	mov	r9,1
80026450:	f2 08 09 48 	lsl	r8,r9,r8
80026454:	10 99       	mov	r9,r8
80026456:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002645a:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
8002645c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026460:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026464:	30 19       	mov	r9,1
80026466:	f2 08 09 48 	lsl	r8,r9,r8
8002646a:	10 99       	mov	r9,r8
8002646c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026470:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
80026472:	cf 18       	rjmp	80026654 <gpio_enable_module_pin+0x27c>

  case 1: // B function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026474:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026478:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002647c:	30 19       	mov	r9,1
8002647e:	f2 08 09 48 	lsl	r8,r9,r8
80026482:	10 99       	mov	r9,r8
80026484:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026488:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002648a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002648e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026492:	30 19       	mov	r9,1
80026494:	f2 08 09 48 	lsl	r8,r9,r8
80026498:	10 99       	mov	r9,r8
8002649a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002649e:	91 a9       	st.w	r8[0x28],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800264a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264a4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264a8:	30 19       	mov	r9,1
800264aa:	f2 08 09 48 	lsl	r8,r9,r8
800264ae:	10 99       	mov	r9,r8
800264b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264b4:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800264b6:	cc f8       	rjmp	80026654 <gpio_enable_module_pin+0x27c>

  case 2: // C function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800264b8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264bc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264c0:	30 19       	mov	r9,1
800264c2:	f2 08 09 48 	lsl	r8,r9,r8
800264c6:	10 99       	mov	r9,r8
800264c8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264cc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800264ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264d2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264d6:	30 19       	mov	r9,1
800264d8:	f2 08 09 48 	lsl	r8,r9,r8
800264dc:	10 99       	mov	r9,r8
800264de:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264e2:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
800264e4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800264e8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800264ec:	30 19       	mov	r9,1
800264ee:	f2 08 09 48 	lsl	r8,r9,r8
800264f2:	10 99       	mov	r9,r8
800264f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800264f8:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
800264fa:	ca d8       	rjmp	80026654 <gpio_enable_module_pin+0x27c>

  case 3: // D function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
800264fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026500:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026504:	30 19       	mov	r9,1
80026506:	f2 08 09 48 	lsl	r8,r9,r8
8002650a:	10 99       	mov	r9,r8
8002650c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026510:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026512:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026516:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002651a:	30 19       	mov	r9,1
8002651c:	f2 08 09 48 	lsl	r8,r9,r8
80026520:	10 99       	mov	r9,r8
80026522:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026526:	91 99       	st.w	r8[0x24],r9
#if (AVR32_GPIO_H_VERSION >= 210)
    gpio_port->pmr2c = 1 << (pin & 0x1F);
80026528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002652c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026530:	30 19       	mov	r9,1
80026532:	f2 08 09 48 	lsl	r8,r9,r8
80026536:	10 99       	mov	r9,r8
80026538:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002653c:	91 e9       	st.w	r8[0x38],r9
#endif
    break;
8002653e:	c8 b8       	rjmp	80026654 <gpio_enable_module_pin+0x27c>

#if (AVR32_GPIO_H_VERSION >= 210)
  case 4: // E function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
80026540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026544:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026548:	30 19       	mov	r9,1
8002654a:	f2 08 09 48 	lsl	r8,r9,r8
8002654e:	10 99       	mov	r9,r8
80026550:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026554:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
80026556:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002655a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002655e:	30 19       	mov	r9,1
80026560:	f2 08 09 48 	lsl	r8,r9,r8
80026564:	10 99       	mov	r9,r8
80026566:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002656a:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
8002656c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026570:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026574:	30 19       	mov	r9,1
80026576:	f2 08 09 48 	lsl	r8,r9,r8
8002657a:	10 99       	mov	r9,r8
8002657c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026580:	91 d9       	st.w	r8[0x34],r9
    break;
80026582:	c6 98       	rjmp	80026654 <gpio_enable_module_pin+0x27c>
    
  case 5: // F function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
80026584:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026588:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002658c:	30 19       	mov	r9,1
8002658e:	f2 08 09 48 	lsl	r8,r9,r8
80026592:	10 99       	mov	r9,r8
80026594:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026598:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1c = 1 << (pin & 0x1F);
8002659a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002659e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265a2:	30 19       	mov	r9,1
800265a4:	f2 08 09 48 	lsl	r8,r9,r8
800265a8:	10 99       	mov	r9,r8
800265aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265ae:	91 a9       	st.w	r8[0x28],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800265b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265b4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265b8:	30 19       	mov	r9,1
800265ba:	f2 08 09 48 	lsl	r8,r9,r8
800265be:	10 99       	mov	r9,r8
800265c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265c4:	91 d9       	st.w	r8[0x34],r9
    break;
800265c6:	c4 78       	rjmp	80026654 <gpio_enable_module_pin+0x27c>
    
  case 6: // G function.
    gpio_port->pmr0c = 1 << (pin & 0x1F);
800265c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265d0:	30 19       	mov	r9,1
800265d2:	f2 08 09 48 	lsl	r8,r9,r8
800265d6:	10 99       	mov	r9,r8
800265d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265dc:	91 69       	st.w	r8[0x18],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
800265de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265e6:	30 19       	mov	r9,1
800265e8:	f2 08 09 48 	lsl	r8,r9,r8
800265ec:	10 99       	mov	r9,r8
800265ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800265f2:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
800265f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800265f8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800265fc:	30 19       	mov	r9,1
800265fe:	f2 08 09 48 	lsl	r8,r9,r8
80026602:	10 99       	mov	r9,r8
80026604:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026608:	91 d9       	st.w	r8[0x34],r9
    break;
8002660a:	c2 58       	rjmp	80026654 <gpio_enable_module_pin+0x27c>
    
  case 7: // H function.
    gpio_port->pmr0s = 1 << (pin & 0x1F);
8002660c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026610:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026614:	30 19       	mov	r9,1
80026616:	f2 08 09 48 	lsl	r8,r9,r8
8002661a:	10 99       	mov	r9,r8
8002661c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026620:	91 59       	st.w	r8[0x14],r9
    gpio_port->pmr1s = 1 << (pin & 0x1F);
80026622:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026626:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002662a:	30 19       	mov	r9,1
8002662c:	f2 08 09 48 	lsl	r8,r9,r8
80026630:	10 99       	mov	r9,r8
80026632:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026636:	91 99       	st.w	r8[0x24],r9
    gpio_port->pmr2s = 1 << (pin & 0x1F);
80026638:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002663c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026640:	30 19       	mov	r9,1
80026642:	f2 08 09 48 	lsl	r8,r9,r8
80026646:	10 99       	mov	r9,r8
80026648:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002664c:	91 d9       	st.w	r8[0x34],r9
    break;
8002664e:	c0 38       	rjmp	80026654 <gpio_enable_module_pin+0x27c>
#endif

  default:
    return GPIO_INVALID_ARGUMENT;
80026650:	30 18       	mov	r8,1
80026652:	c0 d8       	rjmp	8002666c <gpio_enable_module_pin+0x294>
  }

  // Disable GPIO control.
  gpio_port->gperc = 1 << (pin & 0x1F);
80026654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026658:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002665c:	30 19       	mov	r9,1
8002665e:	f2 08 09 48 	lsl	r8,r9,r8
80026662:	10 99       	mov	r9,r8
80026664:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026668:	91 29       	st.w	r8[0x8],r9

  return GPIO_SUCCESS;
8002666a:	30 08       	mov	r8,0
}
8002666c:	10 9c       	mov	r12,r8
8002666e:	2f dd       	sub	sp,-12
80026670:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80026674:	80 02       	ld.sh	r2,r0[0x0]
80026676:	62 68       	ld.w	r8,r1[0x18]

80026678 <gpio_enable_gpio>:


void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
80026678:	eb cd 40 c0 	pushm	r6-r7,lr
8002667c:	1a 97       	mov	r7,sp
8002667e:	20 3d       	sub	sp,12
80026680:	49 26       	lddpc	r6,800266c8 <gpio_enable_gpio+0x50>
80026682:	1e 26       	rsub	r6,pc
80026684:	ef 4c ff f8 	st.w	r7[-8],r12
80026688:	ef 4b ff f4 	st.w	r7[-12],r11
  uint32_t i;

  for (i = 0; i < size; i++)
8002668c:	30 08       	mov	r8,0
8002668e:	ef 48 ff fc 	st.w	r7[-4],r8
80026692:	c1 18       	rjmp	800266b4 <gpio_enable_gpio+0x3c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
80026694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026698:	11 88       	ld.ub	r8,r8[0x0]
8002669a:	10 9c       	mov	r12,r8
8002669c:	f0 16 01 5a 	mcall	r6[1384]
    gpiomap++;
800266a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266a4:	2f e8       	sub	r8,-2
800266a6:	ef 48 ff f8 	st.w	r7[-8],r8

void gpio_enable_gpio(const gpio_map_t gpiomap, uint32_t size)
{
  uint32_t i;

  for (i = 0; i < size; i++)
800266aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266ae:	2f f8       	sub	r8,-1
800266b0:	ef 48 ff fc 	st.w	r7[-4],r8
800266b4:	ee f9 ff fc 	ld.w	r9,r7[-4]
800266b8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800266bc:	10 39       	cp.w	r9,r8
800266be:	ce b3       	brcs	80026694 <gpio_enable_gpio+0x1c>
  {
    gpio_enable_gpio_pin(gpiomap->pin);
    gpiomap++;
  }
}
800266c0:	2f dd       	sub	sp,-12
800266c2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800266c6:	00 00       	add	r0,r0
800266c8:	80 02       	ld.sh	r2,r0[0x0]
800266ca:	65 06       	ld.w	r6,r2[0x40]

800266cc <gpio_enable_gpio_pin>:


void gpio_enable_gpio_pin(uint32_t pin)
{
800266cc:	eb cd 40 80 	pushm	r7,lr
800266d0:	1a 97       	mov	r7,sp
800266d2:	20 2d       	sub	sp,8
800266d4:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800266d8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266dc:	a5 98       	lsr	r8,0x5
800266de:	a9 78       	lsl	r8,0x9
800266e0:	e0 28 e0 00 	sub	r8,57344
800266e4:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->oderc = 1 << (pin & 0x1F);
800266e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800266ec:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800266f0:	30 19       	mov	r9,1
800266f2:	f2 08 09 48 	lsl	r8,r9,r8
800266f6:	10 99       	mov	r9,r8
800266f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800266fc:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F);
80026700:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026704:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026708:	30 19       	mov	r9,1
8002670a:	f2 08 09 48 	lsl	r8,r9,r8
8002670e:	10 99       	mov	r9,r8
80026710:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026714:	91 19       	st.w	r8[0x4],r9
}
80026716:	2f ed       	sub	sp,-8
80026718:	e3 cd 80 80 	ldm	sp++,r7,pc

8002671c <gpio_enable_pin_pull_up>:

#endif


void gpio_enable_pin_pull_up(uint32_t pin)
{
8002671c:	eb cd 40 80 	pushm	r7,lr
80026720:	1a 97       	mov	r7,sp
80026722:	20 2d       	sub	sp,8
80026724:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026728:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002672c:	a5 98       	lsr	r8,0x5
8002672e:	a9 78       	lsl	r8,0x9
80026730:	e0 28 e0 00 	sub	r8,57344
80026734:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026738:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002673c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026740:	30 19       	mov	r9,1
80026742:	f2 08 09 48 	lsl	r8,r9,r8
80026746:	10 99       	mov	r9,r8
80026748:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002674c:	f1 49 00 74 	st.w	r8[116],r9
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
  gpio_port->pderc = 1 << (pin & 0x1F);
80026750:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026754:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026758:	30 19       	mov	r9,1
8002675a:	f2 08 09 48 	lsl	r8,r9,r8
8002675e:	10 99       	mov	r9,r8
80026760:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026764:	f1 49 00 88 	st.w	r8[136],r9
#endif
}
80026768:	2f ed       	sub	sp,-8
8002676a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002676e <gpio_disable_pin_pull_up>:


void gpio_disable_pin_pull_up(uint32_t pin)
{
8002676e:	eb cd 40 80 	pushm	r7,lr
80026772:	1a 97       	mov	r7,sp
80026774:	20 2d       	sub	sp,8
80026776:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002677a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002677e:	a5 98       	lsr	r8,0x5
80026780:	a9 78       	lsl	r8,0x9
80026782:	e0 28 e0 00 	sub	r8,57344
80026786:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
8002678a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002678e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026792:	30 19       	mov	r9,1
80026794:	f2 08 09 48 	lsl	r8,r9,r8
80026798:	10 99       	mov	r9,r8
8002679a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002679e:	f1 49 00 78 	st.w	r8[120],r9
}
800267a2:	2f ed       	sub	sp,-8
800267a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800267a8 <gpio_enable_pin_pull_down>:
/*! \brief Enables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_pull_down(uint32_t pin)
{
800267a8:	eb cd 40 80 	pushm	r7,lr
800267ac:	1a 97       	mov	r7,sp
800267ae:	20 2d       	sub	sp,8
800267b0:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800267b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267b8:	a5 98       	lsr	r8,0x5
800267ba:	a9 78       	lsl	r8,0x9
800267bc:	e0 28 e0 00 	sub	r8,57344
800267c0:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
800267c4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267c8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267cc:	30 19       	mov	r9,1
800267ce:	f2 08 09 48 	lsl	r8,r9,r8
800267d2:	10 99       	mov	r9,r8
800267d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267d8:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pders = 1 << (pin & 0x1F);
800267dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800267e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800267e4:	30 19       	mov	r9,1
800267e6:	f2 08 09 48 	lsl	r8,r9,r8
800267ea:	10 99       	mov	r9,r8
800267ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800267f0:	f1 49 00 84 	st.w	r8[132],r9
}
800267f4:	2f ed       	sub	sp,-8
800267f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800267fa <gpio_disable_pin_pull_down>:
/*! \brief Disables the pull-down resistor of a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_pull_down(uint32_t pin)
{
800267fa:	eb cd 40 80 	pushm	r7,lr
800267fe:	1a 97       	mov	r7,sp
80026800:	20 2d       	sub	sp,8
80026802:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002680a:	a5 98       	lsr	r8,0x5
8002680c:	a9 78       	lsl	r8,0x9
8002680e:	e0 28 e0 00 	sub	r8,57344
80026812:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->pderc = 1 << (pin & 0x1F);
80026816:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002681a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002681e:	30 19       	mov	r9,1
80026820:	f2 08 09 48 	lsl	r8,r9,r8
80026824:	10 99       	mov	r9,r8
80026826:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002682a:	f1 49 00 88 	st.w	r8[136],r9
}
8002682e:	2f ed       	sub	sp,-8
80026830:	e3 cd 80 80 	ldm	sp++,r7,pc

80026834 <gpio_enable_pin_buskeeper>:
/*! \brief Enables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_enable_pin_buskeeper(uint32_t pin)
{
80026834:	eb cd 40 80 	pushm	r7,lr
80026838:	1a 97       	mov	r7,sp
8002683a:	20 2d       	sub	sp,8
8002683c:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026840:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026844:	a5 98       	lsr	r8,0x5
80026846:	a9 78       	lsl	r8,0x9
80026848:	e0 28 e0 00 	sub	r8,57344
8002684c:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puers = 1 << (pin & 0x1F);
80026850:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026854:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026858:	30 19       	mov	r9,1
8002685a:	f2 08 09 48 	lsl	r8,r9,r8
8002685e:	10 99       	mov	r9,r8
80026860:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026864:	f1 49 00 74 	st.w	r8[116],r9
  gpio_port->pders = 1 << (pin & 0x1F);
80026868:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002686c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026870:	30 19       	mov	r9,1
80026872:	f2 08 09 48 	lsl	r8,r9,r8
80026876:	10 99       	mov	r9,r8
80026878:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002687c:	f1 49 00 84 	st.w	r8[132],r9
}
80026880:	2f ed       	sub	sp,-8
80026882:	e3 cd 80 80 	ldm	sp++,r7,pc

80026886 <gpio_disable_pin_buskeeper>:
/*! \brief Disables the buskeeper functionality on a pin.
 *
 * \param pin The pin number.
 */
void gpio_disable_pin_buskeeper(uint32_t pin)
{
80026886:	eb cd 40 80 	pushm	r7,lr
8002688a:	1a 97       	mov	r7,sp
8002688c:	20 2d       	sub	sp,8
8002688e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026892:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026896:	a5 98       	lsr	r8,0x5
80026898:	a9 78       	lsl	r8,0x9
8002689a:	e0 28 e0 00 	sub	r8,57344
8002689e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->puerc = 1 << (pin & 0x1F);
800268a2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268a6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268aa:	30 19       	mov	r9,1
800268ac:	f2 08 09 48 	lsl	r8,r9,r8
800268b0:	10 99       	mov	r9,r8
800268b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268b6:	f1 49 00 78 	st.w	r8[120],r9
  gpio_port->pderc = 1 << (pin & 0x1F);
800268ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268be:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800268c2:	30 19       	mov	r9,1
800268c4:	f2 08 09 48 	lsl	r8,r9,r8
800268c8:	10 99       	mov	r9,r8
800268ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800268ce:	f1 49 00 88 	st.w	r8[136],r9
}
800268d2:	2f ed       	sub	sp,-8
800268d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800268d8 <gpio_configure_pin>:

#endif

void gpio_configure_pin(uint32_t pin, uint32_t flags)
{  
800268d8:	eb cd 40 80 	pushm	r7,lr
800268dc:	1a 97       	mov	r7,sp
800268de:	20 3d       	sub	sp,12
800268e0:	ef 4c ff f8 	st.w	r7[-8],r12
800268e4:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];  
800268e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800268ec:	a5 98       	lsr	r8,0x5
800268ee:	a9 78       	lsl	r8,0x9
800268f0:	e0 28 e0 00 	sub	r8,57344
800268f4:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
    if (flags & GPIO_PULL_DOWN)
800268f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800268fc:	e2 18 00 08 	andl	r8,0x8,COH
80026900:	c0 e0       	breq	8002691c <gpio_configure_pin+0x44>
            gpio_port->pders = 1 << (pin & 0x1F);
80026902:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026906:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002690a:	30 19       	mov	r9,1
8002690c:	f2 08 09 48 	lsl	r8,r9,r8
80026910:	10 99       	mov	r9,r8
80026912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026916:	f1 49 00 84 	st.w	r8[132],r9
8002691a:	c0 d8       	rjmp	80026934 <gpio_configure_pin+0x5c>
    else
            gpio_port->pderc = 1 << (pin & 0x1F);
8002691c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026920:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026924:	30 19       	mov	r9,1
80026926:	f2 08 09 48 	lsl	r8,r9,r8
8002692a:	10 99       	mov	r9,r8
8002692c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026930:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026934:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026938:	e2 18 00 04 	andl	r8,0x4,COH
8002693c:	c0 e0       	breq	80026958 <gpio_configure_pin+0x80>
            gpio_port->puers = 1 << (pin & 0x1F);
8002693e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026942:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026946:	30 19       	mov	r9,1
80026948:	f2 08 09 48 	lsl	r8,r9,r8
8002694c:	10 99       	mov	r9,r8
8002694e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026952:	f1 49 00 74 	st.w	r8[116],r9
80026956:	c0 d8       	rjmp	80026970 <gpio_configure_pin+0x98>
    else
            gpio_port->puerc = 1 << (pin & 0x1F);
80026958:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002695c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026960:	30 19       	mov	r9,1
80026962:	f2 08 09 48 	lsl	r8,r9,r8
80026966:	10 99       	mov	r9,r8
80026968:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002696c:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)
            if (flags & GPIO_OPEN_DRAIN)
80026970:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026974:	e2 18 00 40 	andl	r8,0x40,COH
80026978:	c0 e0       	breq	80026994 <gpio_configure_pin+0xbc>
                    gpio_port->odmers = 1 << (pin & 0x1F);
8002697a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002697e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026982:	30 19       	mov	r9,1
80026984:	f2 08 09 48 	lsl	r8,r9,r8
80026988:	10 99       	mov	r9,r8
8002698a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002698e:	f1 49 00 e4 	st.w	r8[228],r9
80026992:	c0 d8       	rjmp	800269ac <gpio_configure_pin+0xd4>
            else
                    gpio_port->odmerc = 1 << (pin & 0x1F);            
80026994:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026998:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002699c:	30 19       	mov	r9,1
8002699e:	f2 08 09 48 	lsl	r8,r9,r8
800269a2:	10 99       	mov	r9,r8
800269a4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269a8:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
800269ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
800269b0:	e2 18 00 40 	andl	r8,0x40,COH
800269b4:	c0 e0       	breq	800269d0 <gpio_configure_pin+0xf8>
                    gpio_port->pders = 1 << (pin & 0x1F);
800269b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269ba:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269be:	30 19       	mov	r9,1
800269c0:	f2 08 09 48 	lsl	r8,r9,r8
800269c4:	10 99       	mov	r9,r8
800269c6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269ca:	f1 49 00 84 	st.w	r8[132],r9
800269ce:	c0 d8       	rjmp	800269e8 <gpio_configure_pin+0x110>
            else
                    gpio_port->pderc = 1 << (pin & 0x1F);
800269d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269d4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269d8:	30 19       	mov	r9,1
800269da:	f2 08 09 48 	lsl	r8,r9,r8
800269de:	10 99       	mov	r9,r8
800269e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800269e4:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
800269e8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800269ec:	e2 18 00 10 	andl	r8,0x10,COH
800269f0:	c0 e0       	breq	80026a0c <gpio_configure_pin+0x134>
                    gpio_port->odcr0s = 1 << (pin & 0x1F);
800269f2:	ee f8 ff f8 	ld.w	r8,r7[-8]
800269f6:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800269fa:	30 19       	mov	r9,1
800269fc:	f2 08 09 48 	lsl	r8,r9,r8
80026a00:	10 99       	mov	r9,r8
80026a02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a06:	f1 49 01 04 	st.w	r8[260],r9
80026a0a:	c0 d8       	rjmp	80026a24 <gpio_configure_pin+0x14c>
            else
                    gpio_port->odcr0c = 1 << (pin & 0x1F);
80026a0c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a10:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a14:	30 19       	mov	r9,1
80026a16:	f2 08 09 48 	lsl	r8,r9,r8
80026a1a:	10 99       	mov	r9,r8
80026a1c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a20:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026a24:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a28:	e2 18 00 20 	andl	r8,0x20,COH
80026a2c:	c0 e0       	breq	80026a48 <gpio_configure_pin+0x170>
                    gpio_port->odcr1s = 1 << (pin & 0x1F);
80026a2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a32:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a36:	30 19       	mov	r9,1
80026a38:	f2 08 09 48 	lsl	r8,r9,r8
80026a3c:	10 99       	mov	r9,r8
80026a3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a42:	f1 49 01 14 	st.w	r8[276],r9
80026a46:	c0 d8       	rjmp	80026a60 <gpio_configure_pin+0x188>
            else
                    gpio_port->odcr1c = 1 << (pin & 0x1F);
80026a48:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a4c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a50:	30 19       	mov	r9,1
80026a52:	f2 08 09 48 	lsl	r8,r9,r8
80026a56:	10 99       	mov	r9,r8
80026a58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a5c:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026a60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a64:	e2 18 00 80 	andl	r8,0x80,COH
80026a68:	c5 a0       	breq	80026b1c <gpio_configure_pin+0x244>
            if (flags & GPIO_BOTHEDGES)
80026a6a:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026a6e:	e2 18 01 80 	andl	r8,0x180,COH
80026a72:	c1 a0       	breq	80026aa6 <gpio_configure_pin+0x1ce>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026a74:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a78:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a7c:	30 19       	mov	r9,1
80026a7e:	f2 08 09 48 	lsl	r8,r9,r8
80026a82:	10 99       	mov	r9,r8
80026a84:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026a88:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026a8c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026a90:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026a94:	30 19       	mov	r9,1
80026a96:	f2 08 09 48 	lsl	r8,r9,r8
80026a9a:	10 99       	mov	r9,r8
80026a9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026aa0:	f1 49 00 b8 	st.w	r8[184],r9
80026aa4:	c3 c8       	rjmp	80026b1c <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_RISING)
80026aa6:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026aaa:	e2 18 02 80 	andl	r8,0x280,COH
80026aae:	c1 a0       	breq	80026ae2 <gpio_configure_pin+0x20a>
            {
                   gpio_port->imr0s = 1 << (pin & 0x1F);
80026ab0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ab4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ab8:	30 19       	mov	r9,1
80026aba:	f2 08 09 48 	lsl	r8,r9,r8
80026abe:	10 99       	mov	r9,r8
80026ac0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ac4:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = 1 << (pin & 0x1F);
80026ac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026acc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ad0:	30 19       	mov	r9,1
80026ad2:	f2 08 09 48 	lsl	r8,r9,r8
80026ad6:	10 99       	mov	r9,r8
80026ad8:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026adc:	f1 49 00 b8 	st.w	r8[184],r9
80026ae0:	c1 e8       	rjmp	80026b1c <gpio_configure_pin+0x244>
            }
            else if (flags & GPIO_FALLING)
80026ae2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026ae6:	e2 18 03 80 	andl	r8,0x380,COH
80026aea:	c1 90       	breq	80026b1c <gpio_configure_pin+0x244>
            {
                   gpio_port->imr0c = 1 << (pin & 0x1F);
80026aec:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026af0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026af4:	30 19       	mov	r9,1
80026af6:	f2 08 09 48 	lsl	r8,r9,r8
80026afa:	10 99       	mov	r9,r8
80026afc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b00:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = 1 << (pin & 0x1F);
80026b04:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b08:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b0c:	30 19       	mov	r9,1
80026b0e:	f2 08 09 48 	lsl	r8,r9,r8
80026b12:	10 99       	mov	r9,r8
80026b14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b18:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80026b1c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b20:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026b24:	5c 58       	castu.b	r8
80026b26:	c2 c0       	breq	80026b7e <gpio_configure_pin+0x2a6>
            if (flags & GPIO_INIT_HIGH)
80026b28:	ee f8 ff f4 	ld.w	r8,r7[-12]
80026b2c:	e2 18 00 02 	andl	r8,0x2,COH
80026b30:	c0 e0       	breq	80026b4c <gpio_configure_pin+0x274>
                    gpio_port->ovrs = 1 << (pin & 0x1F);
80026b32:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b36:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b3a:	30 19       	mov	r9,1
80026b3c:	f2 08 09 48 	lsl	r8,r9,r8
80026b40:	10 99       	mov	r9,r8
80026b42:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b46:	f1 49 00 54 	st.w	r8[84],r9
80026b4a:	c0 d8       	rjmp	80026b64 <gpio_configure_pin+0x28c>
            else
                    gpio_port->ovrc = 1 << (pin & 0x1F);
80026b4c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b50:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b54:	30 19       	mov	r9,1
80026b56:	f2 08 09 48 	lsl	r8,r9,r8
80026b5a:	10 99       	mov	r9,r8
80026b5c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b60:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = 1 << (pin & 0x1F);
80026b64:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b68:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b6c:	30 19       	mov	r9,1
80026b6e:	f2 08 09 48 	lsl	r8,r9,r8
80026b72:	10 99       	mov	r9,r8
80026b74:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b78:	f1 49 00 44 	st.w	r8[68],r9
80026b7c:	c0 d8       	rjmp	80026b96 <gpio_configure_pin+0x2be>
    } else {
            gpio_port->oderc = 1 << (pin & 0x1F);
80026b7e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b82:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b86:	30 19       	mov	r9,1
80026b88:	f2 08 09 48 	lsl	r8,r9,r8
80026b8c:	10 99       	mov	r9,r8
80026b8e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026b92:	f1 49 00 48 	st.w	r8[72],r9
    }

    /* Enable GPIO */
    gpio_port->gpers = 1 << (pin & 0x1F);
80026b96:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026b9a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026b9e:	30 19       	mov	r9,1
80026ba0:	f2 08 09 48 	lsl	r8,r9,r8
80026ba4:	10 99       	mov	r9,r8
80026ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026baa:	91 19       	st.w	r8[0x4],r9
}
80026bac:	2f dd       	sub	sp,-12
80026bae:	e3 cd 80 80 	ldm	sp++,r7,pc

80026bb2 <gpio_configure_group>:

void gpio_configure_group(uint32_t port, uint32_t mask, uint32_t flags)
{  
80026bb2:	eb cd 40 80 	pushm	r7,lr
80026bb6:	1a 97       	mov	r7,sp
80026bb8:	20 4d       	sub	sp,16
80026bba:	ef 4c ff f8 	st.w	r7[-8],r12
80026bbe:	ef 4b ff f4 	st.w	r7[-12],r11
80026bc2:	ef 4a ff f0 	st.w	r7[-16],r10
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];  
80026bc6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026bca:	a9 78       	lsl	r8,0x9
80026bcc:	e0 28 e0 00 	sub	r8,57344
80026bd0:	ef 48 ff fc 	st.w	r7[-4],r8

  /* Both pull-up and pull-down set means buskeeper */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
    if (flags & GPIO_PULL_DOWN)
80026bd4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026bd8:	e2 18 00 08 	andl	r8,0x8,COH
80026bdc:	c0 80       	breq	80026bec <gpio_configure_group+0x3a>
            gpio_port->pders = mask;
80026bde:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026be2:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026be6:	f1 49 00 84 	st.w	r8[132],r9
80026bea:	c0 78       	rjmp	80026bf8 <gpio_configure_group+0x46>
    else
            gpio_port->pderc = mask;
80026bec:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026bf0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026bf4:	f1 49 00 88 	st.w	r8[136],r9
#endif    
    if (flags & GPIO_PULL_UP)
80026bf8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026bfc:	e2 18 00 04 	andl	r8,0x4,COH
80026c00:	c0 80       	breq	80026c10 <gpio_configure_group+0x5e>
            gpio_port->puers = mask;
80026c02:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c06:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c0a:	f1 49 00 74 	st.w	r8[116],r9
80026c0e:	c0 78       	rjmp	80026c1c <gpio_configure_group+0x6a>
    else
            gpio_port->puerc = mask;
80026c10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c14:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c18:	f1 49 00 78 	st.w	r8[120],r9

    /* Enable open-drain mode if requested */
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED)  
            if (flags & GPIO_OPEN_DRAIN)
80026c1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c20:	e2 18 00 40 	andl	r8,0x40,COH
80026c24:	c0 80       	breq	80026c34 <gpio_configure_group+0x82>
                    gpio_port->odmers = mask;
80026c26:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c2a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c2e:	f1 49 00 e4 	st.w	r8[228],r9
80026c32:	c0 78       	rjmp	80026c40 <gpio_configure_group+0x8e>
            else
                    gpio_port->odmerc = mask;            
80026c34:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c38:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c3c:	f1 49 00 e8 	st.w	r8[232],r9

            if (flags & GPIO_OPEN_DRAIN)
80026c40:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c44:	e2 18 00 40 	andl	r8,0x40,COH
80026c48:	c0 80       	breq	80026c58 <gpio_configure_group+0xa6>
                    gpio_port->pders = mask;
80026c4a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c4e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c52:	f1 49 00 84 	st.w	r8[132],r9
80026c56:	c0 78       	rjmp	80026c64 <gpio_configure_group+0xb2>
            else
                    gpio_port->pderc = mask;
80026c58:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c5c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c60:	f1 49 00 88 	st.w	r8[136],r9
#endif 
            
#if defined(AVR32_GPIO_200_H_INCLUDED) || defined(AVR32_GPIO_210_H_INCLUDED) || defined(AVR32_GPIO_212_H_INCLUDED) 
            /* Select drive strength */
            if (flags & GPIO_DRIVE_LOW)
80026c64:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c68:	e2 18 00 10 	andl	r8,0x10,COH
80026c6c:	c0 80       	breq	80026c7c <gpio_configure_group+0xca>
                    gpio_port->odcr0s = mask;
80026c6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c72:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c76:	f1 49 01 04 	st.w	r8[260],r9
80026c7a:	c0 78       	rjmp	80026c88 <gpio_configure_group+0xd6>
            else
                    gpio_port->odcr0c = mask;
80026c7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c80:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c84:	f1 49 01 08 	st.w	r8[264],r9
            if (flags & GPIO_DRIVE_HIGH)
80026c88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026c8c:	e2 18 00 20 	andl	r8,0x20,COH
80026c90:	c0 80       	breq	80026ca0 <gpio_configure_group+0xee>
                    gpio_port->odcr1s = mask;
80026c92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026c96:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026c9a:	f1 49 01 14 	st.w	r8[276],r9
80026c9e:	c0 78       	rjmp	80026cac <gpio_configure_group+0xfa>
            else
                    gpio_port->odcr1c = mask;
80026ca0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ca4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ca8:	f1 49 01 18 	st.w	r8[280],r9
#endif

    /* Select interrupt level for group */
    if (flags & GPIO_INTERRUPT) {
80026cac:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026cb0:	e2 18 00 80 	andl	r8,0x80,COH
80026cb4:	c3 60       	breq	80026d20 <gpio_configure_group+0x16e>
            if (flags & GPIO_BOTHEDGES)
80026cb6:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026cba:	e2 18 01 80 	andl	r8,0x180,COH
80026cbe:	c0 e0       	breq	80026cda <gpio_configure_group+0x128>
            {
                   gpio_port->imr0c = mask;
80026cc0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cc4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cc8:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1c = mask;
80026ccc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cd0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cd4:	f1 49 00 b8 	st.w	r8[184],r9
80026cd8:	c2 48       	rjmp	80026d20 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_RISING)
80026cda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026cde:	e2 18 02 80 	andl	r8,0x280,COH
80026ce2:	c0 e0       	breq	80026cfe <gpio_configure_group+0x14c>
            {
                   gpio_port->imr0s = mask;
80026ce4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ce8:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cec:	f1 49 00 a4 	st.w	r8[164],r9
                   gpio_port->imr1c = mask;
80026cf0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026cf4:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026cf8:	f1 49 00 b8 	st.w	r8[184],r9
80026cfc:	c1 28       	rjmp	80026d20 <gpio_configure_group+0x16e>
            }
            else if (flags & GPIO_FALLING)
80026cfe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d02:	e2 18 03 80 	andl	r8,0x380,COH
80026d06:	c0 d0       	breq	80026d20 <gpio_configure_group+0x16e>
            {
                   gpio_port->imr0c = mask;
80026d08:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d10:	f1 49 00 a8 	st.w	r8[168],r9
                   gpio_port->imr1s = mask;
80026d14:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d18:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d1c:	f1 49 00 b4 	st.w	r8[180],r9
            }
    }

    /* Select direction and initial pin state */
    if (flags & GPIO_DIR_OUTPUT) {
80026d20:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d24:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026d28:	5c 58       	castu.b	r8
80026d2a:	c1 a0       	breq	80026d5e <gpio_configure_group+0x1ac>
            if (flags & GPIO_INIT_HIGH)
80026d2c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80026d30:	e2 18 00 02 	andl	r8,0x2,COH
80026d34:	c0 80       	breq	80026d44 <gpio_configure_group+0x192>
                    gpio_port->ovrs = mask;
80026d36:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d3a:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d3e:	f1 49 00 54 	st.w	r8[84],r9
80026d42:	c0 78       	rjmp	80026d50 <gpio_configure_group+0x19e>
            else
                    gpio_port->ovrc = mask;
80026d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d48:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d4c:	f1 49 00 58 	st.w	r8[88],r9
            gpio_port->oders = mask;
80026d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d54:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d58:	f1 49 00 44 	st.w	r8[68],r9
80026d5c:	c0 78       	rjmp	80026d6a <gpio_configure_group+0x1b8>
    } else {
            gpio_port->oderc = mask;
80026d5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d62:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d66:	f1 49 00 48 	st.w	r8[72],r9
    }
    
    /* Enable GPIO */
    gpio_port->gpers = mask;
80026d6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d6e:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026d72:	91 19       	st.w	r8[0x4],r9
}
80026d74:	2f cd       	sub	sp,-16
80026d76:	e3 cd 80 80 	ldm	sp++,r7,pc

80026d7a <gpio_get_pin_value>:

int gpio_get_pin_value(uint32_t pin)
{
80026d7a:	eb cd 40 80 	pushm	r7,lr
80026d7e:	1a 97       	mov	r7,sp
80026d80:	20 2d       	sub	sp,8
80026d82:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026d86:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026d8a:	a5 98       	lsr	r8,0x5
80026d8c:	a9 78       	lsl	r8,0x9
80026d8e:	e0 28 e0 00 	sub	r8,57344
80026d92:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->pvr >> (pin & 0x1F)) & 1;
80026d96:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026d9a:	71 89       	ld.w	r9,r8[0x60]
80026d9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026da0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026da4:	f2 08 0a 48 	lsr	r8,r9,r8
80026da8:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80026dac:	10 9c       	mov	r12,r8
80026dae:	2f ed       	sub	sp,-8
80026db0:	e3 cd 80 80 	ldm	sp++,r7,pc

80026db4 <gpio_get_gpio_pin_output_value>:


int gpio_get_gpio_pin_output_value(uint32_t pin)
{
80026db4:	eb cd 40 80 	pushm	r7,lr
80026db8:	1a 97       	mov	r7,sp
80026dba:	20 2d       	sub	sp,8
80026dbc:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026dc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dc4:	a5 98       	lsr	r8,0x5
80026dc6:	a9 78       	lsl	r8,0x9
80026dc8:	e0 28 e0 00 	sub	r8,57344
80026dcc:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ovr >> (pin & 0x1F)) & 1;
80026dd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026dd4:	71 49       	ld.w	r9,r8[0x50]
80026dd6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dda:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026dde:	f2 08 0a 48 	lsr	r8,r9,r8
80026de2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80026de6:	10 9c       	mov	r12,r8
80026de8:	2f ed       	sub	sp,-8
80026dea:	e3 cd 80 80 	ldm	sp++,r7,pc

80026dee <gpio_get_gpio_open_drain_pin_output_value>:


int gpio_get_gpio_open_drain_pin_output_value(uint32_t pin)
{
80026dee:	eb cd 40 80 	pushm	r7,lr
80026df2:	1a 97       	mov	r7,sp
80026df4:	20 2d       	sub	sp,8
80026df6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026dfa:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026dfe:	a5 98       	lsr	r8,0x5
80026e00:	a9 78       	lsl	r8,0x9
80026e02:	e0 28 e0 00 	sub	r8,57344
80026e06:	ef 48 ff fc 	st.w	r7[-4],r8
  return ((gpio_port->oder >> (pin & 0x1F)) & 1) ^ 1;
80026e0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e0e:	71 09       	ld.w	r9,r8[0x40]
80026e10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e14:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e18:	f2 08 0a 48 	lsr	r8,r9,r8
80026e1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80026e20:	5f 08       	sreq	r8
}
80026e22:	10 9c       	mov	r12,r8
80026e24:	2f ed       	sub	sp,-8
80026e26:	e3 cd 80 80 	ldm	sp++,r7,pc

80026e2a <gpio_set_gpio_pin>:


void gpio_set_gpio_pin(uint32_t pin)
{
80026e2a:	eb cd 40 80 	pushm	r7,lr
80026e2e:	1a 97       	mov	r7,sp
80026e30:	20 2d       	sub	sp,8
80026e32:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026e36:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e3a:	a5 98       	lsr	r8,0x5
80026e3c:	a9 78       	lsl	r8,0x9
80026e3e:	e0 28 e0 00 	sub	r8,57344
80026e42:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80026e46:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e4a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e4e:	30 19       	mov	r9,1
80026e50:	f2 08 09 48 	lsl	r8,r9,r8
80026e54:	10 99       	mov	r9,r8
80026e56:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e5a:	f1 49 00 54 	st.w	r8[84],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80026e5e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e62:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e66:	30 19       	mov	r9,1
80026e68:	f2 08 09 48 	lsl	r8,r9,r8
80026e6c:	10 99       	mov	r9,r8
80026e6e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e72:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
80026e76:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026e7a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026e7e:	30 19       	mov	r9,1
80026e80:	f2 08 09 48 	lsl	r8,r9,r8
80026e84:	10 99       	mov	r9,r8
80026e86:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026e8a:	91 19       	st.w	r8[0x4],r9
}
80026e8c:	2f ed       	sub	sp,-8
80026e8e:	e3 cd 80 80 	ldm	sp++,r7,pc

80026e92 <gpio_set_pin_high>:

void gpio_set_pin_high(uint32_t pin)
{
80026e92:	eb cd 40 80 	pushm	r7,lr
80026e96:	1a 97       	mov	r7,sp
80026e98:	20 2d       	sub	sp,8
80026e9a:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026e9e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ea2:	a5 98       	lsr	r8,0x5
80026ea4:	a9 78       	lsl	r8,0x9
80026ea6:	e0 28 e0 00 	sub	r8,57344
80026eaa:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 1.
80026eae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026eb2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026eb6:	30 19       	mov	r9,1
80026eb8:	f2 08 09 48 	lsl	r8,r9,r8
80026ebc:	10 99       	mov	r9,r8
80026ebe:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ec2:	f1 49 00 54 	st.w	r8[84],r9
}
80026ec6:	2f ed       	sub	sp,-8
80026ec8:	e3 cd 80 80 	ldm	sp++,r7,pc

80026ecc <gpio_set_group_high>:

void gpio_set_group_high(uint32_t port, uint32_t mask)
{
80026ecc:	eb cd 40 80 	pushm	r7,lr
80026ed0:	1a 97       	mov	r7,sp
80026ed2:	20 3d       	sub	sp,12
80026ed4:	ef 4c ff f8 	st.w	r7[-8],r12
80026ed8:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80026edc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026ee0:	a9 78       	lsl	r8,0x9
80026ee2:	e0 28 e0 00 	sub	r8,57344
80026ee6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrs  = mask; // Value to be driven on the I/O group: 1.
80026eea:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026eee:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026ef2:	f1 49 00 54 	st.w	r8[84],r9
}
80026ef6:	2f dd       	sub	sp,-12
80026ef8:	e3 cd 80 80 	ldm	sp++,r7,pc

80026efc <gpio_set_pin_low>:


void gpio_set_pin_low(uint32_t pin)
{
80026efc:	eb cd 40 80 	pushm	r7,lr
80026f00:	1a 97       	mov	r7,sp
80026f02:	20 2d       	sub	sp,8
80026f04:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026f08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f0c:	a5 98       	lsr	r8,0x5
80026f0e:	a9 78       	lsl	r8,0x9
80026f10:	e0 28 e0 00 	sub	r8,57344
80026f14:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80026f18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f1c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f20:	30 19       	mov	r9,1
80026f22:	f2 08 09 48 	lsl	r8,r9,r8
80026f26:	10 99       	mov	r9,r8
80026f28:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f2c:	f1 49 00 58 	st.w	r8[88],r9
}
80026f30:	2f ed       	sub	sp,-8
80026f32:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f36 <gpio_clr_gpio_pin>:

void gpio_clr_gpio_pin(uint32_t pin)
{
80026f36:	eb cd 40 80 	pushm	r7,lr
80026f3a:	1a 97       	mov	r7,sp
80026f3c:	20 2d       	sub	sp,8
80026f3e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026f42:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f46:	a5 98       	lsr	r8,0x5
80026f48:	a9 78       	lsl	r8,0x9
80026f4a:	e0 28 e0 00 	sub	r8,57344
80026f4e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
80026f52:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f56:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f5a:	30 19       	mov	r9,1
80026f5c:	f2 08 09 48 	lsl	r8,r9,r8
80026f60:	10 99       	mov	r9,r8
80026f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f66:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80026f6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f6e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f72:	30 19       	mov	r9,1
80026f74:	f2 08 09 48 	lsl	r8,r9,r8
80026f78:	10 99       	mov	r9,r8
80026f7a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f7e:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.  
80026f82:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026f86:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026f8a:	30 19       	mov	r9,1
80026f8c:	f2 08 09 48 	lsl	r8,r9,r8
80026f90:	10 99       	mov	r9,r8
80026f92:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026f96:	91 19       	st.w	r8[0x4],r9
}
80026f98:	2f ed       	sub	sp,-8
80026f9a:	e3 cd 80 80 	ldm	sp++,r7,pc

80026f9e <gpio_set_group_low>:

void gpio_set_group_low(uint32_t port, uint32_t mask)
{
80026f9e:	eb cd 40 80 	pushm	r7,lr
80026fa2:	1a 97       	mov	r7,sp
80026fa4:	20 3d       	sub	sp,12
80026fa6:	ef 4c ff f8 	st.w	r7[-8],r12
80026faa:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80026fae:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fb2:	a9 78       	lsl	r8,0x9
80026fb4:	e0 28 e0 00 	sub	r8,57344
80026fb8:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrc  = mask; // Value to be driven on the I/O group: 0.
80026fbc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026fc0:	ee f9 ff f4 	ld.w	r9,r7[-12]
80026fc4:	f1 49 00 58 	st.w	r8[88],r9
}
80026fc8:	2f dd       	sub	sp,-12
80026fca:	e3 cd 80 80 	ldm	sp++,r7,pc

80026fce <gpio_tgl_gpio_pin>:

void gpio_tgl_gpio_pin(uint32_t pin)
{
80026fce:	eb cd 40 80 	pushm	r7,lr
80026fd2:	1a 97       	mov	r7,sp
80026fd4:	20 2d       	sub	sp,8
80026fd6:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80026fda:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fde:	a5 98       	lsr	r8,0x5
80026fe0:	a9 78       	lsl	r8,0x9
80026fe2:	e0 28 e0 00 	sub	r8,57344
80026fe6:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80026fea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80026fee:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80026ff2:	30 19       	mov	r9,1
80026ff4:	f2 08 09 48 	lsl	r8,r9,r8
80026ff8:	10 99       	mov	r9,r8
80026ffa:	ee f8 ff fc 	ld.w	r8,r7[-4]
80026ffe:	f1 49 00 5c 	st.w	r8[92],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027002:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027006:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002700a:	30 19       	mov	r9,1
8002700c:	f2 08 09 48 	lsl	r8,r9,r8
80027010:	10 99       	mov	r9,r8
80027012:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027016:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002701a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002701e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027022:	30 19       	mov	r9,1
80027024:	f2 08 09 48 	lsl	r8,r9,r8
80027028:	10 99       	mov	r9,r8
8002702a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002702e:	91 19       	st.w	r8[0x4],r9
}
80027030:	2f ed       	sub	sp,-8
80027032:	e3 cd 80 80 	ldm	sp++,r7,pc

80027036 <gpio_toggle_pin>:

void gpio_toggle_pin(uint32_t pin)
{
80027036:	eb cd 40 80 	pushm	r7,lr
8002703a:	1a 97       	mov	r7,sp
8002703c:	20 2d       	sub	sp,8
8002703e:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027042:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027046:	a5 98       	lsr	r8,0x5
80027048:	a9 78       	lsl	r8,0x9
8002704a:	e0 28 e0 00 	sub	r8,57344
8002704e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = 1 << (pin & 0x1F); // Toggle the I/O line.
80027052:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027056:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002705a:	30 19       	mov	r9,1
8002705c:	f2 08 09 48 	lsl	r8,r9,r8
80027060:	10 99       	mov	r9,r8
80027062:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027066:	f1 49 00 5c 	st.w	r8[92],r9
}
8002706a:	2f ed       	sub	sp,-8
8002706c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027070 <gpio_toggle_group>:

void gpio_toggle_group(uint32_t port, uint32_t mask)
{
80027070:	eb cd 40 80 	pushm	r7,lr
80027074:	1a 97       	mov	r7,sp
80027076:	20 3d       	sub	sp,12
80027078:	ef 4c ff f8 	st.w	r7[-8],r12
8002707c:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[port];
80027080:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027084:	a9 78       	lsl	r8,0x9
80027086:	e0 28 e0 00 	sub	r8,57344
8002708a:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ovrt  = mask; // Toggle the I/O port.
8002708e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027092:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027096:	f1 49 00 5c 	st.w	r8[92],r9
}
8002709a:	2f dd       	sub	sp,-12
8002709c:	e3 cd 80 80 	ldm	sp++,r7,pc

800270a0 <gpio_set_gpio_open_drain_pin>:

void gpio_set_gpio_open_drain_pin(uint32_t pin)
{
800270a0:	eb cd 40 80 	pushm	r7,lr
800270a4:	1a 97       	mov	r7,sp
800270a6:	20 2d       	sub	sp,8
800270a8:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800270ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270b0:	a5 98       	lsr	r8,0x5
800270b2:	a9 78       	lsl	r8,0x9
800270b4:	e0 28 e0 00 	sub	r8,57344
800270b8:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->oderc = 1 << (pin & 0x1F); // The GPIO output driver is disabled for that pin.
800270bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270c0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270c4:	30 19       	mov	r9,1
800270c6:	f2 08 09 48 	lsl	r8,r9,r8
800270ca:	10 99       	mov	r9,r8
800270cc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270d0:	f1 49 00 48 	st.w	r8[72],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800270d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800270d8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800270dc:	30 19       	mov	r9,1
800270de:	f2 08 09 48 	lsl	r8,r9,r8
800270e2:	10 99       	mov	r9,r8
800270e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800270e8:	91 19       	st.w	r8[0x4],r9
}
800270ea:	2f ed       	sub	sp,-8
800270ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800270f0 <gpio_clr_gpio_open_drain_pin>:


void gpio_clr_gpio_open_drain_pin(uint32_t pin)
{
800270f0:	eb cd 40 80 	pushm	r7,lr
800270f4:	1a 97       	mov	r7,sp
800270f6:	20 2d       	sub	sp,8
800270f8:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800270fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027100:	a5 98       	lsr	r8,0x5
80027102:	a9 78       	lsl	r8,0x9
80027104:	e0 28 e0 00 	sub	r8,57344
80027108:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line: 0.
8002710c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027110:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027114:	30 19       	mov	r9,1
80027116:	f2 08 09 48 	lsl	r8,r9,r8
8002711a:	10 99       	mov	r9,r8
8002711c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027120:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->oders = 1 << (pin & 0x1F); // The GPIO output driver is enabled for that pin.
80027124:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027128:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002712c:	30 19       	mov	r9,1
8002712e:	f2 08 09 48 	lsl	r8,r9,r8
80027132:	10 99       	mov	r9,r8
80027134:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027138:	f1 49 00 44 	st.w	r8[68],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
8002713c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027140:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027144:	30 19       	mov	r9,1
80027146:	f2 08 09 48 	lsl	r8,r9,r8
8002714a:	10 99       	mov	r9,r8
8002714c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027150:	91 19       	st.w	r8[0x4],r9
}
80027152:	2f ed       	sub	sp,-8
80027154:	e3 cd 80 80 	ldm	sp++,r7,pc

80027158 <gpio_tgl_gpio_open_drain_pin>:


void gpio_tgl_gpio_open_drain_pin(uint32_t pin)
{
80027158:	eb cd 40 80 	pushm	r7,lr
8002715c:	1a 97       	mov	r7,sp
8002715e:	20 2d       	sub	sp,8
80027160:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027164:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027168:	a5 98       	lsr	r8,0x5
8002716a:	a9 78       	lsl	r8,0x9
8002716c:	e0 28 e0 00 	sub	r8,57344
80027170:	ef 48 ff fc 	st.w	r7[-4],r8

  gpio_port->ovrc  = 1 << (pin & 0x1F); // Value to be driven on the I/O line if the GPIO output driver is enabled: 0.
80027174:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027178:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002717c:	30 19       	mov	r9,1
8002717e:	f2 08 09 48 	lsl	r8,r9,r8
80027182:	10 99       	mov	r9,r8
80027184:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027188:	f1 49 00 58 	st.w	r8[88],r9
  gpio_port->odert = 1 << (pin & 0x1F); // The GPIO output driver is toggled for that pin.
8002718c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027190:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027194:	30 19       	mov	r9,1
80027196:	f2 08 09 48 	lsl	r8,r9,r8
8002719a:	10 99       	mov	r9,r8
8002719c:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271a0:	f1 49 00 4c 	st.w	r8[76],r9
  gpio_port->gpers = 1 << (pin & 0x1F); // The GPIO module controls that pin.
800271a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271a8:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271ac:	30 19       	mov	r9,1
800271ae:	f2 08 09 48 	lsl	r8,r9,r8
800271b2:	10 99       	mov	r9,r8
800271b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271b8:	91 19       	st.w	r8[0x4],r9
}
800271ba:	2f ed       	sub	sp,-8
800271bc:	e3 cd 80 80 	ldm	sp++,r7,pc

800271c0 <gpio_enable_pin_glitch_filter>:


void gpio_enable_pin_glitch_filter(uint32_t pin)
{
800271c0:	eb cd 40 80 	pushm	r7,lr
800271c4:	1a 97       	mov	r7,sp
800271c6:	20 2d       	sub	sp,8
800271c8:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800271cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271d0:	a5 98       	lsr	r8,0x5
800271d2:	a9 78       	lsl	r8,0x9
800271d4:	e0 28 e0 00 	sub	r8,57344
800271d8:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gfers = 1 << (pin & 0x1F);
800271dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
800271e0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800271e4:	30 19       	mov	r9,1
800271e6:	f2 08 09 48 	lsl	r8,r9,r8
800271ea:	10 99       	mov	r9,r8
800271ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
800271f0:	f1 49 00 c4 	st.w	r8[196],r9
}
800271f4:	2f ed       	sub	sp,-8
800271f6:	e3 cd 80 80 	ldm	sp++,r7,pc

800271fa <gpio_disable_pin_glitch_filter>:


void gpio_disable_pin_glitch_filter(uint32_t pin)
{
800271fa:	eb cd 40 80 	pushm	r7,lr
800271fe:	1a 97       	mov	r7,sp
80027200:	20 2d       	sub	sp,8
80027202:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002720a:	a5 98       	lsr	r8,0x5
8002720c:	a9 78       	lsl	r8,0x9
8002720e:	e0 28 e0 00 	sub	r8,57344
80027212:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->gferc = 1 << (pin & 0x1F);
80027216:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002721a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002721e:	30 19       	mov	r9,1
80027220:	f2 08 09 48 	lsl	r8,r9,r8
80027224:	10 99       	mov	r9,r8
80027226:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002722a:	f1 49 00 c8 	st.w	r8[200],r9
}
8002722e:	2f ed       	sub	sp,-8
80027230:	e3 cd 80 80 	ldm	sp++,r7,pc

80027234 <gpio_configure_edge_detector>:
 *             or \ref GPIO_FALLING_EDGE).
 *
 * \return \ref GPIO_SUCCESS or \ref GPIO_INVALID_ARGUMENT.
 */
static int gpio_configure_edge_detector(uint32_t pin, uint32_t mode)
{
80027234:	eb cd 40 80 	pushm	r7,lr
80027238:	1a 97       	mov	r7,sp
8002723a:	20 3d       	sub	sp,12
8002723c:	ef 4c ff f8 	st.w	r7[-8],r12
80027240:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027244:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027248:	a5 98       	lsr	r8,0x5
8002724a:	a9 78       	lsl	r8,0x9
8002724c:	e0 28 e0 00 	sub	r8,57344
80027250:	ef 48 ff fc 	st.w	r7[-4],r8
  
  // Configure the edge detector.
  switch (mode)
80027254:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027258:	58 18       	cp.w	r8,1
8002725a:	c1 e0       	breq	80027296 <gpio_configure_edge_detector+0x62>
8002725c:	c0 43       	brcs	80027264 <gpio_configure_edge_detector+0x30>
8002725e:	58 28       	cp.w	r8,2
80027260:	c3 40       	breq	800272c8 <gpio_configure_edge_detector+0x94>
80027262:	c4 c8       	rjmp	800272fa <gpio_configure_edge_detector+0xc6>
  {
  case GPIO_PIN_CHANGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
80027264:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027268:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002726c:	30 19       	mov	r9,1
8002726e:	f2 08 09 48 	lsl	r8,r9,r8
80027272:	10 99       	mov	r9,r8
80027274:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027278:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
8002727c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027280:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027284:	30 19       	mov	r9,1
80027286:	f2 08 09 48 	lsl	r8,r9,r8
8002728a:	10 99       	mov	r9,r8
8002728c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027290:	f1 49 00 b8 	st.w	r8[184],r9
    break;
80027294:	c3 58       	rjmp	800272fe <gpio_configure_edge_detector+0xca>

  case GPIO_RISING_EDGE:
    gpio_port->imr0s = 1 << (pin & 0x1F);
80027296:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002729a:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002729e:	30 19       	mov	r9,1
800272a0:	f2 08 09 48 	lsl	r8,r9,r8
800272a4:	10 99       	mov	r9,r8
800272a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272aa:	f1 49 00 a4 	st.w	r8[164],r9
    gpio_port->imr1c = 1 << (pin & 0x1F);
800272ae:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272b2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272b6:	30 19       	mov	r9,1
800272b8:	f2 08 09 48 	lsl	r8,r9,r8
800272bc:	10 99       	mov	r9,r8
800272be:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272c2:	f1 49 00 b8 	st.w	r8[184],r9
    break;
800272c6:	c1 c8       	rjmp	800272fe <gpio_configure_edge_detector+0xca>

  case GPIO_FALLING_EDGE:
    gpio_port->imr0c = 1 << (pin & 0x1F);
800272c8:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272cc:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272d0:	30 19       	mov	r9,1
800272d2:	f2 08 09 48 	lsl	r8,r9,r8
800272d6:	10 99       	mov	r9,r8
800272d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272dc:	f1 49 00 a8 	st.w	r8[168],r9
    gpio_port->imr1s = 1 << (pin & 0x1F);
800272e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800272e4:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800272e8:	30 19       	mov	r9,1
800272ea:	f2 08 09 48 	lsl	r8,r9,r8
800272ee:	10 99       	mov	r9,r8
800272f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800272f4:	f1 49 00 b4 	st.w	r8[180],r9
    break;
800272f8:	c0 38       	rjmp	800272fe <gpio_configure_edge_detector+0xca>

  default:
    return GPIO_INVALID_ARGUMENT;
800272fa:	30 18       	mov	r8,1
800272fc:	c0 28       	rjmp	80027300 <gpio_configure_edge_detector+0xcc>
  }

  return GPIO_SUCCESS;
800272fe:	30 08       	mov	r8,0
}
80027300:	10 9c       	mov	r12,r8
80027302:	2f dd       	sub	sp,-12
80027304:	e3 cd 80 80 	ldm	sp++,r7,pc

80027308 <gpio_enable_pin_interrupt>:


int gpio_enable_pin_interrupt(uint32_t pin, uint32_t mode)
{
80027308:	eb cd 40 c0 	pushm	r6-r7,lr
8002730c:	1a 97       	mov	r7,sp
8002730e:	20 3d       	sub	sp,12
80027310:	49 b6       	lddpc	r6,8002737c <gpio_enable_pin_interrupt+0x74>
80027312:	1e 26       	rsub	r6,pc
80027314:	ef 4c ff f8 	st.w	r7[-8],r12
80027318:	ef 4b ff f4 	st.w	r7[-12],r11
  volatile avr32_gpio_port_t  *gpio_port = &GPIO.port[pin >> 5];
8002731c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027320:	a5 98       	lsr	r8,0x5
80027322:	a9 78       	lsl	r8,0x9
80027324:	e0 28 e0 00 	sub	r8,57344
80027328:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable the glitch filter.
  gpio_port->gfers = 1 << (pin & 0x1F);
8002732c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027330:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027334:	30 19       	mov	r9,1
80027336:	f2 08 09 48 	lsl	r8,r9,r8
8002733a:	10 99       	mov	r9,r8
8002733c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027340:	f1 49 00 c4 	st.w	r8[196],r9

  // Configure the edge detector.
  if(GPIO_INVALID_ARGUMENT == gpio_configure_edge_detector(pin, mode))
80027344:	ee fb ff f4 	ld.w	r11,r7[-12]
80027348:	ee fc ff f8 	ld.w	r12,r7[-8]
8002734c:	c7 4f       	rcall	80027234 <gpio_configure_edge_detector>
8002734e:	18 98       	mov	r8,r12
80027350:	58 18       	cp.w	r8,1
80027352:	c0 31       	brne	80027358 <gpio_enable_pin_interrupt+0x50>
    return(GPIO_INVALID_ARGUMENT);
80027354:	30 18       	mov	r8,1
80027356:	c0 e8       	rjmp	80027372 <gpio_enable_pin_interrupt+0x6a>

  // Enable interrupt.
  gpio_port->iers = 1 << (pin & 0x1F);
80027358:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002735c:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027360:	30 19       	mov	r9,1
80027362:	f2 08 09 48 	lsl	r8,r9,r8
80027366:	10 99       	mov	r9,r8
80027368:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002736c:	f1 49 00 94 	st.w	r8[148],r9

  return GPIO_SUCCESS;
80027370:	30 08       	mov	r8,0
}
80027372:	10 9c       	mov	r12,r8
80027374:	2f dd       	sub	sp,-12
80027376:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002737a:	00 00       	add	r0,r0
8002737c:	80 02       	ld.sh	r2,r0[0x0]
8002737e:	71 96       	ld.w	r6,r8[0x64]

80027380 <gpio_disable_pin_interrupt>:


void gpio_disable_pin_interrupt(uint32_t pin)
{
80027380:	eb cd 40 80 	pushm	r7,lr
80027384:	1a 97       	mov	r7,sp
80027386:	20 2d       	sub	sp,8
80027388:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
8002738c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027390:	a5 98       	lsr	r8,0x5
80027392:	a9 78       	lsl	r8,0x9
80027394:	e0 28 e0 00 	sub	r8,57344
80027398:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ierc = 1 << (pin & 0x1F);
8002739c:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273a0:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273a4:	30 19       	mov	r9,1
800273a6:	f2 08 09 48 	lsl	r8,r9,r8
800273aa:	10 99       	mov	r9,r8
800273ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273b0:	f1 49 00 98 	st.w	r8[152],r9
}
800273b4:	2f ed       	sub	sp,-8
800273b6:	e3 cd 80 80 	ldm	sp++,r7,pc

800273ba <gpio_get_pin_interrupt_flag>:


int gpio_get_pin_interrupt_flag(uint32_t pin)
{
800273ba:	eb cd 40 80 	pushm	r7,lr
800273be:	1a 97       	mov	r7,sp
800273c0:	20 2d       	sub	sp,8
800273c2:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
800273c6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273ca:	a5 98       	lsr	r8,0x5
800273cc:	a9 78       	lsl	r8,0x9
800273ce:	e0 28 e0 00 	sub	r8,57344
800273d2:	ef 48 ff fc 	st.w	r7[-4],r8
  return (gpio_port->ifr >> (pin & 0x1F)) & 1;
800273d6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800273da:	f0 f9 00 d0 	ld.w	r9,r8[208]
800273de:	ee f8 ff f8 	ld.w	r8,r7[-8]
800273e2:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
800273e6:	f2 08 0a 48 	lsr	r8,r9,r8
800273ea:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
800273ee:	10 9c       	mov	r12,r8
800273f0:	2f ed       	sub	sp,-8
800273f2:	e3 cd 80 80 	ldm	sp++,r7,pc

800273f6 <gpio_clear_pin_interrupt_flag>:


void gpio_clear_pin_interrupt_flag(uint32_t pin)
{
800273f6:	eb cd 40 80 	pushm	r7,lr
800273fa:	1a 97       	mov	r7,sp
800273fc:	20 2d       	sub	sp,8
800273fe:	ef 4c ff f8 	st.w	r7[-8],r12
  volatile avr32_gpio_port_t *gpio_port = &GPIO.port[pin >> 5];
80027402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027406:	a5 98       	lsr	r8,0x5
80027408:	a9 78       	lsl	r8,0x9
8002740a:	e0 28 e0 00 	sub	r8,57344
8002740e:	ef 48 ff fc 	st.w	r7[-4],r8
  gpio_port->ifrc = 1 << (pin & 0x1F);

  // Restore interrupt enable register.
  gpio_port->ier = gpio_ier;
#else
  gpio_port->ifrc = 1 << (pin & 0x1F);
80027412:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027416:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
8002741a:	30 19       	mov	r9,1
8002741c:	f2 08 09 48 	lsl	r8,r9,r8
80027420:	10 99       	mov	r9,r8
80027422:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027426:	f1 49 00 d8 	st.w	r8[216],r9
#endif
}
8002742a:	2f ed       	sub	sp,-8
8002742c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027430 <_unhandled_interrupt>:
__attribute__((__interrupt__))
#elif (defined __ICCAVR32__)
__interrupt
#endif
static void _unhandled_interrupt(void)
{
80027430:	eb cd 40 c0 	pushm	r6-r7,lr
80027434:	1a 97       	mov	r7,sp
  // Catch unregistered interrupts.
  while (true);
80027436:	c0 08       	rjmp	80027436 <_unhandled_interrupt+0x6>

80027438 <_get_interrupt_handler>:
 * \return Interrupt handler to execute.
 *
 * \note Taken and adapted from Newlib.
 */
__int_handler _get_interrupt_handler(unsigned int int_level)
{
80027438:	eb cd 40 c0 	pushm	r6-r7,lr
8002743c:	1a 97       	mov	r7,sp
8002743e:	20 3d       	sub	sp,12
80027440:	49 a6       	lddpc	r6,800274a8 <_get_interrupt_handler+0x70>
80027442:	1e 26       	rsub	r6,pc
80027444:	ef 4c ff f4 	st.w	r7[-12],r12
  // ICR3 is mapped first, ICR0 last.
  // Code in exception.S puts int_level in R12 which is used by AVR32-GCC to
  // pass a single argument to a function.
  unsigned int int_grp = AVR32_INTC.icr[AVR32_INTC_INT3 - int_level];
80027448:	fe 78 00 00 	mov	r8,-65536
8002744c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80027450:	f2 09 11 03 	rsub	r9,r9,3
80027454:	28 09       	sub	r9,-128
80027456:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002745a:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int int_req = AVR32_INTC.irr[int_grp];
8002745e:	fe 78 00 00 	mov	r8,-65536
80027462:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027466:	2c 09       	sub	r9,-64
80027468:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002746c:	ef 48 ff fc 	st.w	r7[-4],r8
  // exception.S will provide the interrupt handler with a clean interrupt stack
  // frame, with nothing more pushed onto the stack. The interrupt handler must
  // manage the `rete' instruction, what can be done thanks to pure assembly,
  // inline assembly or the `__attribute__((__interrupt__))' C function
  // attribute.
  return (int_req) ? _int_handler_table[int_grp]._int_line_handler_table[32 - clz(int_req) - 1] : NULL;
80027470:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027474:	58 08       	cp.w	r8,0
80027476:	c1 40       	breq	8002749e <_get_interrupt_handler+0x66>
80027478:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002747c:	ec f8 02 90 	ld.w	r8,r6[656]
80027480:	a1 79       	lsl	r9,0x1
80027482:	2f f9       	sub	r9,-1
80027484:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
80027488:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002748c:	f0 08 12 00 	clz	r8,r8
80027490:	f0 08 11 1f 	rsub	r8,r8,31
80027494:	a3 68       	lsl	r8,0x2
80027496:	f2 08 00 08 	add	r8,r9,r8
8002749a:	70 08       	ld.w	r8,r8[0x0]
8002749c:	c0 28       	rjmp	800274a0 <_get_interrupt_handler+0x68>
8002749e:	30 08       	mov	r8,0
}
800274a0:	10 9c       	mov	r12,r8
800274a2:	2f dd       	sub	sp,-12
800274a4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274a8:	80 02       	ld.sh	r2,r0[0x0]
800274aa:	72 c6       	ld.w	r6,r9[0x30]

800274ac <INTC_init_evba>:

//! Init EVBA address. This sequence might also be done in the utils/startup/startup_uc3.S file.
static __inline__ void INTC_init_evba(void)
{
800274ac:	eb cd 40 c0 	pushm	r6-r7,lr
800274b0:	1a 97       	mov	r7,sp
800274b2:	48 56       	lddpc	r6,800274c4 <INTC_init_evba+0x18>
800274b4:	1e 26       	rsub	r6,pc
  Set_system_register(AVR32_EVBA, (int)&_evba );
800274b6:	ec f8 07 9c 	ld.w	r8,r6[1948]
800274ba:	e3 b8 00 01 	mtsr	0x4,r8
}
800274be:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800274c2:	00 00       	add	r0,r0
800274c4:	80 02       	ld.sh	r2,r0[0x0]
800274c6:	73 38       	ld.w	r8,r9[0x4c]

800274c8 <INTC_init_interrupts>:

void INTC_init_interrupts(void)
{
800274c8:	eb cd 40 c0 	pushm	r6-r7,lr
800274cc:	1a 97       	mov	r7,sp
800274ce:	20 2d       	sub	sp,8
800274d0:	4a 16       	lddpc	r6,80027554 <INTC_init_interrupts+0x8c>
800274d2:	1e 26       	rsub	r6,pc
  unsigned int int_grp, int_req;

  INTC_init_evba();
800274d4:	ce cf       	rcall	800274ac <INTC_init_evba>

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
800274d6:	30 08       	mov	r8,0
800274d8:	ef 48 ff f8 	st.w	r7[-8],r8
800274dc:	c3 38       	rjmp	80027542 <INTC_init_interrupts+0x7a>
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
800274de:	30 08       	mov	r8,0
800274e0:	ef 48 ff fc 	st.w	r7[-4],r8
800274e4:	c1 68       	rjmp	80027510 <INTC_init_interrupts+0x48>
    {
      // Assign _unhandled_interrupt as default interrupt handler.
      _int_handler_table[int_grp]._int_line_handler_table[int_req] = &_unhandled_interrupt;
800274e6:	ee f9 ff f8 	ld.w	r9,r7[-8]
800274ea:	ec f8 02 90 	ld.w	r8,r6[656]
800274ee:	a1 79       	lsl	r9,0x1
800274f0:	2f f9       	sub	r9,-1
800274f2:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
800274f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800274fa:	a3 68       	lsl	r8,0x2
800274fc:	f2 08 00 08 	add	r8,r9,r8
80027500:	fe c9 00 d0 	sub	r9,pc,208
80027504:	91 09       	st.w	r8[0x0],r9

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
  {
    // For all interrupt request lines of each group,
    for (int_req = 0; int_req < _int_handler_table[int_grp].num_irqs; int_req++)
80027506:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002750a:	2f f8       	sub	r8,-1
8002750c:	ef 48 ff fc 	st.w	r7[-4],r8
80027510:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027514:	ec f8 02 90 	ld.w	r8,r6[656]
80027518:	f0 09 03 39 	ld.w	r9,r8[r9<<0x3]
8002751c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027520:	10 39       	cp.w	r9,r8
80027522:	fe 9b ff e2 	brhi	800274e6 <INTC_init_interrupts+0x1e>
    }

    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
80027526:	fe 78 00 00 	mov	r8,-65536
8002752a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002752e:	ec fa 03 ec 	ld.w	r10,r6[1004]
80027532:	74 0a       	ld.w	r10,r10[0x0]
80027534:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  unsigned int int_grp, int_req;

  INTC_init_evba();

  // For all interrupt groups,
  for (int_grp = 0; int_grp < AVR32_INTC_NUM_INT_GRPS; int_grp++)
80027538:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002753c:	2f f8       	sub	r8,-1
8002753e:	ef 48 ff f8 	st.w	r7[-8],r8
80027542:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027546:	e0 48 00 2e 	cp.w	r8,46
8002754a:	fe 98 ff ca 	brls	800274de <INTC_init_interrupts+0x16>
    // Set the interrupt group priority register to its default value.
    // By default, all interrupt groups are linked to the interrupt priority
    // level 0 and to the interrupt vector _int0.
    AVR32_INTC.ipr[int_grp] = ipr_val[AVR32_INTC_INT0];
  }
}
8002754e:	2f ed       	sub	sp,-8
80027550:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027554:	80 02       	ld.sh	r2,r0[0x0]
80027556:	73 56       	ld.w	r6,r9[0x54]

80027558 <INTC_register_interrupt>:


void INTC_register_interrupt(__int_handler handler, unsigned int irq, unsigned int int_level)
{
80027558:	eb cd 40 c0 	pushm	r6-r7,lr
8002755c:	1a 97       	mov	r7,sp
8002755e:	20 4d       	sub	sp,16
80027560:	49 86       	lddpc	r6,800275c0 <INTC_register_interrupt+0x68>
80027562:	1e 26       	rsub	r6,pc
80027564:	ef 4c ff f8 	st.w	r7[-8],r12
80027568:	ef 4b ff f4 	st.w	r7[-12],r11
8002756c:	ef 4a ff f0 	st.w	r7[-16],r10
  // Determine the group of the IRQ.
  unsigned int int_grp = irq / AVR32_INTC_MAX_NUM_IRQS_PER_GRP;
80027570:	ee f8 ff f4 	ld.w	r8,r7[-12]
80027574:	a5 98       	lsr	r8,0x5
80027576:	ef 48 ff fc 	st.w	r7[-4],r8

  // Store in _int_line_handler_table_x the pointer to the interrupt handler, so
  // that _get_interrupt_handler can retrieve it when the interrupt is vectored.
  _int_handler_table[int_grp]._int_line_handler_table[irq % AVR32_INTC_MAX_NUM_IRQS_PER_GRP] = handler;
8002757a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002757e:	ec f8 02 90 	ld.w	r8,r6[656]
80027582:	a1 79       	lsl	r9,0x1
80027584:	2f f9       	sub	r9,-1
80027586:	f0 09 03 29 	ld.w	r9,r8[r9<<0x2]
8002758a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002758e:	f1 d8 c0 05 	bfextu	r8,r8,0x0,0x5
80027592:	a3 68       	lsl	r8,0x2
80027594:	f2 08 00 08 	add	r8,r9,r8
80027598:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002759c:	91 09       	st.w	r8[0x0],r9
  // Program the corresponding IPRX register to set the interrupt priority level
  // and the interrupt vector offset that will be fetched by the core interrupt
  // system.
  // NOTE: The _intx functions are intermediate assembly functions between the
  // core interrupt system and the user interrupt handler.
  AVR32_INTC.ipr[int_grp] = ipr_val[int_level & (AVR32_INTC_IPR_INTLEVEL_MASK >> AVR32_INTC_IPR_INTLEVEL_OFFSET)];
8002759e:	fe 78 00 00 	mov	r8,-65536
800275a2:	ee f9 ff fc 	ld.w	r9,r7[-4]
800275a6:	ee fa ff f0 	ld.w	r10,r7[-16]
800275aa:	f7 da c0 02 	bfextu	r11,r10,0x0,0x2
800275ae:	ec fa 03 ec 	ld.w	r10,r6[1004]
800275b2:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800275b6:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800275ba:	2f cd       	sub	sp,-16
800275bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800275c0:	80 02       	ld.sh	r2,r0[0x0]
800275c2:	73 e6       	ld.w	r6,r9[0x78]

800275c4 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
800275c4:	eb cd 40 80 	pushm	r7,lr
800275c8:	1a 97       	mov	r7,sp
800275ca:	20 1d       	sub	sp,4
800275cc:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
800275d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800275d4:	e6 18 00 01 	andh	r8,0x1,COH
800275d8:	5f 08       	sreq	r8
800275da:	5c 58       	castu.b	r8
}
800275dc:	10 9c       	mov	r12,r8
800275de:	2f fd       	sub	sp,-4
800275e0:	e3 cd 80 80 	ldm	sp++,r7,pc

800275e4 <pdca_get_handler>:
#include "compiler.h"
#include "pdca.h"


volatile avr32_pdca_channel_t *pdca_get_handler(unsigned int pdca_ch_number)
{
800275e4:	eb cd 40 80 	pushm	r7,lr
800275e8:	1a 97       	mov	r7,sp
800275ea:	20 2d       	sub	sp,8
800275ec:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = &AVR32_PDCA.channel[pdca_ch_number];
800275f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800275f4:	a7 68       	lsl	r8,0x6
800275f6:	e2 38 00 00 	sub	r8,196608
800275fa:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pdca_ch_number >= AVR32_PDCA_CHANNEL_LENGTH)
800275fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027602:	58 f8       	cp.w	r8,15
80027604:	e0 88 00 04 	brls	8002760c <pdca_get_handler+0x28>
    return (volatile avr32_pdca_channel_t *)PDCA_INVALID_ARGUMENT;
80027608:	3f f8       	mov	r8,-1
8002760a:	c0 38       	rjmp	80027610 <pdca_get_handler+0x2c>

  return pdca_channel;
8002760c:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80027610:	10 9c       	mov	r12,r8
80027612:	2f ed       	sub	sp,-8
80027614:	e3 cd 80 80 	ldm	sp++,r7,pc

80027618 <pdca_init_channel>:


int pdca_init_channel(unsigned int pdca_ch_number, const pdca_channel_options_t *opt)
{
80027618:	eb cd 40 c0 	pushm	r6-r7,lr
8002761c:	1a 97       	mov	r7,sp
8002761e:	20 4d       	sub	sp,16
80027620:	4b 26       	lddpc	r6,800276e8 <pdca_init_channel+0xd0>
80027622:	1e 26       	rsub	r6,pc
80027624:	ef 4c ff f4 	st.w	r7[-12],r12
80027628:	ef 4b ff f0 	st.w	r7[-16],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002762c:	ee fc ff f4 	ld.w	r12,r7[-12]
80027630:	f0 16 00 27 	mcall	r6[156]
80027634:	18 98       	mov	r8,r12
80027636:	ef 48 ff f8 	st.w	r7[-8],r8

  pdca_disable_interrupt_transfer_complete(pdca_ch_number); // disable channel interrupt
8002763a:	ee fc ff f4 	ld.w	r12,r7[-12]
8002763e:	f0 16 00 9e 	mcall	r6[632]
  pdca_disable_interrupt_reload_counter_zero(pdca_ch_number); // disable channel interrupt
80027642:	ee fc ff f4 	ld.w	r12,r7[-12]
80027646:	f0 16 02 07 	mcall	r6[2076]

  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002764a:	e1 b8 00 00 	mfsr	r8,0x0
8002764e:	10 9c       	mov	r12,r8
80027650:	cb af       	rcall	800275c4 <cpu_irq_is_enabled_flags>
80027652:	18 98       	mov	r8,r12
80027654:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027658:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002765c:	30 08       	mov	r8,0
8002765e:	f0 09 18 00 	cp.b	r9,r8
80027662:	c0 20       	breq	80027666 <pdca_init_channel+0x4e>
80027664:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)opt->addr;
80027666:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002766a:	70 08       	ld.w	r8,r8[0x0]
8002766c:	10 99       	mov	r9,r8
8002766e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027672:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = opt->size;
80027674:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027678:	70 19       	ld.w	r9,r8[0x4]
8002767a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002767e:	91 29       	st.w	r8[0x8],r9
  pdca_channel->psr = opt->pid;
80027680:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027684:	70 49       	ld.w	r9,r8[0x10]
80027686:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002768a:	91 19       	st.w	r8[0x4],r9
  pdca_channel->marr = (unsigned long)opt->r_addr;
8002768c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027690:	70 28       	ld.w	r8,r8[0x8]
80027692:	10 99       	mov	r9,r8
80027694:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027698:	91 39       	st.w	r8[0xc],r9
  pdca_channel->tcrr = opt->r_size;
8002769a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002769e:	70 39       	ld.w	r9,r8[0xc]
800276a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276a4:	91 49       	st.w	r8[0x10],r9
  pdca_channel->mr =
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800276a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276aa:	f1 38 00 18 	ld.ub	r8,r8[24]
800276ae:	a3 68       	lsl	r8,0x2
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
800276b0:	10 99       	mov	r9,r8
800276b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800276b6:	70 58       	ld.w	r8,r8[0x14]
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
800276b8:	10 49       	or	r9,r8
  pdca_channel->mar = (unsigned long)opt->addr;
  pdca_channel->tcr = opt->size;
  pdca_channel->psr = opt->pid;
  pdca_channel->marr = (unsigned long)opt->r_addr;
  pdca_channel->tcrr = opt->r_size;
  pdca_channel->mr =
800276ba:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276be:	91 69       	st.w	r8[0x18],r9
#if (AVR32_PDCA_H_VERSION >= 120)
opt->etrig << AVR32_PDCA_ETRIG_OFFSET |
#endif
                     opt->transfer_size << AVR32_PDCA_SIZE_OFFSET;
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800276c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276c4:	e0 69 01 00 	mov	r9,256
800276c8:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
800276ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
800276ce:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800276d0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800276d4:	30 08       	mov	r8,0
800276d6:	f0 09 18 00 	cp.b	r9,r8
800276da:	c0 20       	breq	800276de <pdca_init_channel+0xc6>
800276dc:	d5 03       	csrf	0x10

  return PDCA_SUCCESS;
800276de:	30 08       	mov	r8,0
}
800276e0:	10 9c       	mov	r12,r8
800276e2:	2f cd       	sub	sp,-16
800276e4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800276e8:	80 02       	ld.sh	r2,r0[0x0]
800276ea:	74 a6       	ld.w	r6,r10[0x28]

800276ec <pdca_get_channel_status>:


unsigned int pdca_get_channel_status(unsigned int pdca_ch_number)
{
800276ec:	eb cd 40 c0 	pushm	r6-r7,lr
800276f0:	1a 97       	mov	r7,sp
800276f2:	20 2d       	sub	sp,8
800276f4:	48 a6       	lddpc	r6,8002771c <pdca_get_channel_status+0x30>
800276f6:	1e 26       	rsub	r6,pc
800276f8:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800276fc:	ee fc ff f8 	ld.w	r12,r7[-8]
80027700:	f0 16 00 27 	mcall	r6[156]
80027704:	18 98       	mov	r8,r12
80027706:	ef 48 ff fc 	st.w	r7[-4],r8

  return (pdca_channel->sr & AVR32_PDCA_TEN_MASK) != 0;
8002770a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002770e:	70 78       	ld.w	r8,r8[0x1c]
80027710:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80027714:	10 9c       	mov	r12,r8
80027716:	2f ed       	sub	sp,-8
80027718:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002771c:	80 02       	ld.sh	r2,r0[0x0]
8002771e:	75 7a       	ld.w	r10,r10[0x5c]

80027720 <pdca_disable>:


void pdca_disable(unsigned int pdca_ch_number)
{
80027720:	eb cd 40 c0 	pushm	r6-r7,lr
80027724:	1a 97       	mov	r7,sp
80027726:	20 2d       	sub	sp,8
80027728:	48 96       	lddpc	r6,8002774c <pdca_disable+0x2c>
8002772a:	1e 26       	rsub	r6,pc
8002772c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027730:	ee fc ff f8 	ld.w	r12,r7[-8]
80027734:	f0 16 00 27 	mcall	r6[156]
80027738:	18 98       	mov	r8,r12
8002773a:	ef 48 ff fc 	st.w	r7[-4],r8

  // Disable transfer
  pdca_channel->cr = AVR32_PDCA_TDIS_MASK;
8002773e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027742:	30 29       	mov	r9,2
80027744:	91 59       	st.w	r8[0x14],r9

}
80027746:	2f ed       	sub	sp,-8
80027748:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002774c:	80 02       	ld.sh	r2,r0[0x0]
8002774e:	75 ae       	ld.w	lr,r10[0x68]

80027750 <pdca_enable>:


void pdca_enable(unsigned int pdca_ch_number)
{
80027750:	eb cd 40 c0 	pushm	r6-r7,lr
80027754:	1a 97       	mov	r7,sp
80027756:	20 2d       	sub	sp,8
80027758:	48 96       	lddpc	r6,8002777c <pdca_enable+0x2c>
8002775a:	1e 26       	rsub	r6,pc
8002775c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027760:	ee fc ff f8 	ld.w	r12,r7[-8]
80027764:	f0 16 00 27 	mcall	r6[156]
80027768:	18 98       	mov	r8,r12
8002776a:	ef 48 ff fc 	st.w	r7[-4],r8

  // Enable transfer
  pdca_channel->cr = AVR32_PDCA_TEN_MASK;
8002776e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027772:	30 19       	mov	r9,1
80027774:	91 59       	st.w	r8[0x14],r9
}
80027776:	2f ed       	sub	sp,-8
80027778:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002777c:	80 02       	ld.sh	r2,r0[0x0]
8002777e:	75 de       	ld.w	lr,r10[0x74]

80027780 <pdca_get_load_size>:


unsigned int pdca_get_load_size(unsigned int pdca_ch_number)
{
80027780:	eb cd 40 c0 	pushm	r6-r7,lr
80027784:	1a 97       	mov	r7,sp
80027786:	20 2d       	sub	sp,8
80027788:	48 96       	lddpc	r6,800277ac <pdca_get_load_size+0x2c>
8002778a:	1e 26       	rsub	r6,pc
8002778c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027790:	ee fc ff f8 	ld.w	r12,r7[-8]
80027794:	f0 16 00 27 	mcall	r6[156]
80027798:	18 98       	mov	r8,r12
8002779a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcr;
8002779e:	ee f8 ff fc 	ld.w	r8,r7[-4]
800277a2:	70 28       	ld.w	r8,r8[0x8]
}
800277a4:	10 9c       	mov	r12,r8
800277a6:	2f ed       	sub	sp,-8
800277a8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800277ac:	80 02       	ld.sh	r2,r0[0x0]
800277ae:	76 0e       	ld.w	lr,r11[0x0]

800277b0 <pdca_load_channel>:


void pdca_load_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
800277b0:	eb cd 40 c0 	pushm	r6-r7,lr
800277b4:	1a 97       	mov	r7,sp
800277b6:	20 5d       	sub	sp,20
800277b8:	49 d6       	lddpc	r6,8002782c <pdca_load_channel+0x7c>
800277ba:	1e 26       	rsub	r6,pc
800277bc:	ef 4c ff f4 	st.w	r7[-12],r12
800277c0:	ef 4b ff f0 	st.w	r7[-16],r11
800277c4:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800277c8:	ee fc ff f4 	ld.w	r12,r7[-12]
800277cc:	f0 16 00 27 	mcall	r6[156]
800277d0:	18 98       	mov	r8,r12
800277d2:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800277d6:	e1 b8 00 00 	mfsr	r8,0x0
800277da:	10 9c       	mov	r12,r8
800277dc:	cf 4e       	rcall	800275c4 <cpu_irq_is_enabled_flags>
800277de:	18 98       	mov	r8,r12
800277e0:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
800277e4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800277e8:	30 08       	mov	r8,0
800277ea:	f0 09 18 00 	cp.b	r9,r8
800277ee:	c0 20       	breq	800277f2 <pdca_load_channel+0x42>
800277f0:	d3 03       	ssrf	0x10
  pdca_channel->mar = (unsigned long)addr;
800277f2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800277f6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800277fa:	91 09       	st.w	r8[0x0],r9
  pdca_channel->tcr = size;
800277fc:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027800:	ee f9 ff ec 	ld.w	r9,r7[-20]
80027804:	91 29       	st.w	r8[0x8],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
80027806:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002780a:	e0 69 01 00 	mov	r9,256
8002780e:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
80027810:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027814:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027816:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002781a:	30 08       	mov	r8,0
8002781c:	f0 09 18 00 	cp.b	r9,r8
80027820:	c0 20       	breq	80027824 <pdca_load_channel+0x74>
80027822:	d5 03       	csrf	0x10
}
80027824:	2f bd       	sub	sp,-20
80027826:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002782a:	00 00       	add	r0,r0
8002782c:	80 02       	ld.sh	r2,r0[0x0]
8002782e:	76 3e       	ld.w	lr,r11[0xc]

80027830 <pdca_get_reload_size>:


unsigned int pdca_get_reload_size(unsigned int pdca_ch_number)
{
80027830:	eb cd 40 c0 	pushm	r6-r7,lr
80027834:	1a 97       	mov	r7,sp
80027836:	20 2d       	sub	sp,8
80027838:	48 96       	lddpc	r6,8002785c <pdca_get_reload_size+0x2c>
8002783a:	1e 26       	rsub	r6,pc
8002783c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027840:	ee fc ff f8 	ld.w	r12,r7[-8]
80027844:	f0 16 00 27 	mcall	r6[156]
80027848:	18 98       	mov	r8,r12
8002784a:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->tcrr;
8002784e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027852:	70 48       	ld.w	r8,r8[0x10]
}
80027854:	10 9c       	mov	r12,r8
80027856:	2f ed       	sub	sp,-8
80027858:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002785c:	80 02       	ld.sh	r2,r0[0x0]
8002785e:	76 be       	ld.w	lr,r11[0x2c]

80027860 <pdca_reload_channel>:


void pdca_reload_channel(unsigned int pdca_ch_number, volatile void *addr, unsigned int size)
{
80027860:	eb cd 40 c0 	pushm	r6-r7,lr
80027864:	1a 97       	mov	r7,sp
80027866:	20 5d       	sub	sp,20
80027868:	49 d6       	lddpc	r6,800278dc <pdca_reload_channel+0x7c>
8002786a:	1e 26       	rsub	r6,pc
8002786c:	ef 4c ff f4 	st.w	r7[-12],r12
80027870:	ef 4b ff f0 	st.w	r7[-16],r11
80027874:	ef 4a ff ec 	st.w	r7[-20],r10
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027878:	ee fc ff f4 	ld.w	r12,r7[-12]
8002787c:	f0 16 00 27 	mcall	r6[156]
80027880:	18 98       	mov	r8,r12
80027882:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027886:	e1 b8 00 00 	mfsr	r8,0x0
8002788a:	10 9c       	mov	r12,r8
8002788c:	c9 ce       	rcall	800275c4 <cpu_irq_is_enabled_flags>
8002788e:	18 98       	mov	r8,r12
80027890:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027894:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027898:	30 08       	mov	r8,0
8002789a:	f0 09 18 00 	cp.b	r9,r8
8002789e:	c0 20       	breq	800278a2 <pdca_reload_channel+0x42>
800278a0:	d3 03       	ssrf	0x10
  // set up next memory address
  pdca_channel->marr = (unsigned long)addr;
800278a2:	ee f9 ff f0 	ld.w	r9,r7[-16]
800278a6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278aa:	91 39       	st.w	r8[0xc],r9
  // set up next memory size
  pdca_channel->tcrr = size;
800278ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278b0:	ee f9 ff ec 	ld.w	r9,r7[-20]
800278b4:	91 49       	st.w	r8[0x10],r9
  pdca_channel->cr = AVR32_PDCA_ECLR_MASK;
800278b6:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278ba:	e0 69 01 00 	mov	r9,256
800278be:	91 59       	st.w	r8[0x14],r9
  pdca_channel->isr;
800278c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800278c4:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
800278c6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800278ca:	30 08       	mov	r8,0
800278cc:	f0 09 18 00 	cp.b	r9,r8
800278d0:	c0 20       	breq	800278d4 <pdca_reload_channel+0x74>
800278d2:	d5 03       	csrf	0x10
}
800278d4:	2f bd       	sub	sp,-20
800278d6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800278da:	00 00       	add	r0,r0
800278dc:	80 02       	ld.sh	r2,r0[0x0]
800278de:	76 ee       	ld.w	lr,r11[0x38]

800278e0 <pdca_set_peripheral_select>:


void pdca_set_peripheral_select(unsigned int pdca_ch_number, unsigned int pid)
{
800278e0:	eb cd 40 c0 	pushm	r6-r7,lr
800278e4:	1a 97       	mov	r7,sp
800278e6:	20 3d       	sub	sp,12
800278e8:	48 b6       	lddpc	r6,80027914 <pdca_set_peripheral_select+0x34>
800278ea:	1e 26       	rsub	r6,pc
800278ec:	ef 4c ff f8 	st.w	r7[-8],r12
800278f0:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800278f4:	ee fc ff f8 	ld.w	r12,r7[-8]
800278f8:	f0 16 00 27 	mcall	r6[156]
800278fc:	18 98       	mov	r8,r12
800278fe:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->psr = pid;
80027902:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027906:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002790a:	91 19       	st.w	r8[0x4],r9
}
8002790c:	2f dd       	sub	sp,-12
8002790e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027912:	00 00       	add	r0,r0
80027914:	80 02       	ld.sh	r2,r0[0x0]
80027916:	77 6e       	ld.w	lr,r11[0x58]

80027918 <pdca_set_transfer_size>:


void pdca_set_transfer_size(unsigned int pdca_ch_number, unsigned int transfer_size)
{
80027918:	eb cd 40 c0 	pushm	r6-r7,lr
8002791c:	1a 97       	mov	r7,sp
8002791e:	20 3d       	sub	sp,12
80027920:	48 e6       	lddpc	r6,80027958 <pdca_set_transfer_size+0x40>
80027922:	1e 26       	rsub	r6,pc
80027924:	ef 4c ff f8 	st.w	r7[-8],r12
80027928:	ef 4b ff f4 	st.w	r7[-12],r11
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002792c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027930:	f0 16 00 27 	mcall	r6[156]
80027934:	18 98       	mov	r8,r12
80027936:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr = (pdca_channel->mr & ~AVR32_PDCA_SIZE_MASK) |
8002793a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002793e:	70 68       	ld.w	r8,r8[0x18]
80027940:	10 99       	mov	r9,r8
80027942:	e0 19 ff fc 	andl	r9,0xfffc
80027946:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002794a:	10 49       	or	r9,r8
8002794c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027950:	91 69       	st.w	r8[0x18],r9
                     transfer_size << AVR32_PDCA_SIZE_OFFSET;
}
80027952:	2f dd       	sub	sp,-12
80027954:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027958:	80 02       	ld.sh	r2,r0[0x0]
8002795a:	77 a6       	ld.w	r6,r11[0x68]

8002795c <pdca_disable_event_trigger>:

#if (AVR32_PDCA_H_VERSION >= 120)


void pdca_disable_event_trigger(unsigned int pdca_ch_number)
{
8002795c:	eb cd 40 c0 	pushm	r6-r7,lr
80027960:	1a 97       	mov	r7,sp
80027962:	20 2d       	sub	sp,8
80027964:	48 b6       	lddpc	r6,80027990 <pdca_disable_event_trigger+0x34>
80027966:	1e 26       	rsub	r6,pc
80027968:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
8002796c:	ee fc ff f8 	ld.w	r12,r7[-8]
80027970:	f0 16 00 27 	mcall	r6[156]
80027974:	18 98       	mov	r8,r12
80027976:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr &= ~AVR32_PDCA_ETRIG_MASK;
8002797a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002797e:	70 68       	ld.w	r8,r8[0x18]
80027980:	10 99       	mov	r9,r8
80027982:	a3 c9       	cbr	r9,0x2
80027984:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027988:	91 69       	st.w	r8[0x18],r9
}
8002798a:	2f ed       	sub	sp,-8
8002798c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027990:	80 02       	ld.sh	r2,r0[0x0]
80027992:	77 ea       	ld.w	r10,r11[0x78]

80027994 <pdca_enable_event_trigger>:


void pdca_enable_event_trigger(unsigned int pdca_ch_number)
{
80027994:	eb cd 40 c0 	pushm	r6-r7,lr
80027998:	1a 97       	mov	r7,sp
8002799a:	20 2d       	sub	sp,8
8002799c:	48 b6       	lddpc	r6,800279c8 <pdca_enable_event_trigger+0x34>
8002799e:	1e 26       	rsub	r6,pc
800279a0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800279a4:	ee fc ff f8 	ld.w	r12,r7[-8]
800279a8:	f0 16 00 27 	mcall	r6[156]
800279ac:	18 98       	mov	r8,r12
800279ae:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->mr |= AVR32_PDCA_ETRIG_MASK;
800279b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279b6:	70 68       	ld.w	r8,r8[0x18]
800279b8:	10 99       	mov	r9,r8
800279ba:	a3 a9       	sbr	r9,0x2
800279bc:	ee f8 ff fc 	ld.w	r8,r7[-4]
800279c0:	91 69       	st.w	r8[0x18],r9
}
800279c2:	2f ed       	sub	sp,-8
800279c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800279c8:	80 02       	ld.sh	r2,r0[0x0]
800279ca:	78 22       	ld.w	r2,r12[0x8]

800279cc <pdca_disable_interrupt_transfer_error>:

#endif


void pdca_disable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
800279cc:	eb cd 40 c0 	pushm	r6-r7,lr
800279d0:	1a 97       	mov	r7,sp
800279d2:	20 3d       	sub	sp,12
800279d4:	49 66       	lddpc	r6,80027a2c <pdca_disable_interrupt_transfer_error+0x60>
800279d6:	1e 26       	rsub	r6,pc
800279d8:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
800279dc:	ee fc ff f4 	ld.w	r12,r7[-12]
800279e0:	f0 16 00 27 	mcall	r6[156]
800279e4:	18 98       	mov	r8,r12
800279e6:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
800279ea:	e1 b8 00 00 	mfsr	r8,0x0
800279ee:	10 9c       	mov	r12,r8
800279f0:	fe b0 fd ea 	rcall	800275c4 <cpu_irq_is_enabled_flags>
800279f4:	18 98       	mov	r8,r12
800279f6:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
800279fa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800279fe:	30 08       	mov	r8,0
80027a00:	f0 09 18 00 	cp.b	r9,r8
80027a04:	c0 20       	breq	80027a08 <pdca_disable_interrupt_transfer_error+0x3c>
80027a06:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TERR_MASK;
80027a08:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a0c:	30 49       	mov	r9,4
80027a0e:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027a10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027a14:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027a16:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a1a:	30 08       	mov	r8,0
80027a1c:	f0 09 18 00 	cp.b	r9,r8
80027a20:	c0 20       	breq	80027a24 <pdca_disable_interrupt_transfer_error+0x58>
80027a22:	d5 03       	csrf	0x10
}
80027a24:	2f dd       	sub	sp,-12
80027a26:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a2a:	00 00       	add	r0,r0
80027a2c:	80 02       	ld.sh	r2,r0[0x0]
80027a2e:	78 5a       	ld.w	r10,r12[0x14]

80027a30 <pdca_enable_interrupt_transfer_error>:


void pdca_enable_interrupt_transfer_error(unsigned int pdca_ch_number)
{
80027a30:	eb cd 40 c0 	pushm	r6-r7,lr
80027a34:	1a 97       	mov	r7,sp
80027a36:	20 2d       	sub	sp,8
80027a38:	48 96       	lddpc	r6,80027a5c <pdca_enable_interrupt_transfer_error+0x2c>
80027a3a:	1e 26       	rsub	r6,pc
80027a3c:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027a40:	ee fc ff f8 	ld.w	r12,r7[-8]
80027a44:	f0 16 00 27 	mcall	r6[156]
80027a48:	18 98       	mov	r8,r12
80027a4a:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TERR_MASK;
80027a4e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027a52:	30 49       	mov	r9,4
80027a54:	91 89       	st.w	r8[0x20],r9
}
80027a56:	2f ed       	sub	sp,-8
80027a58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027a5c:	80 02       	ld.sh	r2,r0[0x0]
80027a5e:	78 be       	ld.w	lr,r12[0x2c]

80027a60 <pdca_disable_interrupt_transfer_complete>:


void pdca_disable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027a60:	eb cd 40 c0 	pushm	r6-r7,lr
80027a64:	1a 97       	mov	r7,sp
80027a66:	20 3d       	sub	sp,12
80027a68:	49 66       	lddpc	r6,80027ac0 <pdca_disable_interrupt_transfer_complete+0x60>
80027a6a:	1e 26       	rsub	r6,pc
80027a6c:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027a70:	ee fc ff f4 	ld.w	r12,r7[-12]
80027a74:	f0 16 00 27 	mcall	r6[156]
80027a78:	18 98       	mov	r8,r12
80027a7a:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027a7e:	e1 b8 00 00 	mfsr	r8,0x0
80027a82:	10 9c       	mov	r12,r8
80027a84:	fe b0 fd a0 	rcall	800275c4 <cpu_irq_is_enabled_flags>
80027a88:	18 98       	mov	r8,r12
80027a8a:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027a8e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027a92:	30 08       	mov	r8,0
80027a94:	f0 09 18 00 	cp.b	r9,r8
80027a98:	c0 20       	breq	80027a9c <pdca_disable_interrupt_transfer_complete+0x3c>
80027a9a:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_TRC_MASK;
80027a9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027aa0:	30 29       	mov	r9,2
80027aa2:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027aa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027aa8:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027aaa:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027aae:	30 08       	mov	r8,0
80027ab0:	f0 09 18 00 	cp.b	r9,r8
80027ab4:	c0 20       	breq	80027ab8 <pdca_disable_interrupt_transfer_complete+0x58>
80027ab6:	d5 03       	csrf	0x10
}
80027ab8:	2f dd       	sub	sp,-12
80027aba:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027abe:	00 00       	add	r0,r0
80027ac0:	80 02       	ld.sh	r2,r0[0x0]
80027ac2:	78 ee       	ld.w	lr,r12[0x38]

80027ac4 <pdca_enable_interrupt_transfer_complete>:


void pdca_enable_interrupt_transfer_complete(unsigned int pdca_ch_number)
{
80027ac4:	eb cd 40 c0 	pushm	r6-r7,lr
80027ac8:	1a 97       	mov	r7,sp
80027aca:	20 2d       	sub	sp,8
80027acc:	48 96       	lddpc	r6,80027af0 <pdca_enable_interrupt_transfer_complete+0x2c>
80027ace:	1e 26       	rsub	r6,pc
80027ad0:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027ad4:	ee fc ff f8 	ld.w	r12,r7[-8]
80027ad8:	f0 16 00 27 	mcall	r6[156]
80027adc:	18 98       	mov	r8,r12
80027ade:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_TRC_MASK;
80027ae2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ae6:	30 29       	mov	r9,2
80027ae8:	91 89       	st.w	r8[0x20],r9
}
80027aea:	2f ed       	sub	sp,-8
80027aec:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027af0:	80 02       	ld.sh	r2,r0[0x0]
80027af2:	79 52       	ld.w	r2,r12[0x54]

80027af4 <pdca_disable_interrupt_reload_counter_zero>:


void pdca_disable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027af4:	eb cd 40 c0 	pushm	r6-r7,lr
80027af8:	1a 97       	mov	r7,sp
80027afa:	20 3d       	sub	sp,12
80027afc:	49 66       	lddpc	r6,80027b54 <pdca_disable_interrupt_reload_counter_zero+0x60>
80027afe:	1e 26       	rsub	r6,pc
80027b00:	ef 4c ff f4 	st.w	r7[-12],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b04:	ee fc ff f4 	ld.w	r12,r7[-12]
80027b08:	f0 16 00 27 	mcall	r6[156]
80027b0c:	18 98       	mov	r8,r12
80027b0e:	ef 48 ff f8 	st.w	r7[-8],r8

  bool global_interrupt_enabled = cpu_irq_is_enabled();
80027b12:	e1 b8 00 00 	mfsr	r8,0x0
80027b16:	10 9c       	mov	r12,r8
80027b18:	fe b0 fd 56 	rcall	800275c4 <cpu_irq_is_enabled_flags>
80027b1c:	18 98       	mov	r8,r12
80027b1e:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) cpu_irq_disable();
80027b22:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b26:	30 08       	mov	r8,0
80027b28:	f0 09 18 00 	cp.b	r9,r8
80027b2c:	c0 20       	breq	80027b30 <pdca_disable_interrupt_reload_counter_zero+0x3c>
80027b2e:	d3 03       	ssrf	0x10
  pdca_channel->idr = AVR32_PDCA_RCZ_MASK;
80027b30:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b34:	30 19       	mov	r9,1
80027b36:	91 99       	st.w	r8[0x24],r9
  pdca_channel->isr;
80027b38:	ee f8 ff f8 	ld.w	r8,r7[-8]
80027b3c:	70 b8       	ld.w	r8,r8[0x2c]
  if (global_interrupt_enabled) cpu_irq_enable();
80027b3e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80027b42:	30 08       	mov	r8,0
80027b44:	f0 09 18 00 	cp.b	r9,r8
80027b48:	c0 20       	breq	80027b4c <pdca_disable_interrupt_reload_counter_zero+0x58>
80027b4a:	d5 03       	csrf	0x10
}
80027b4c:	2f dd       	sub	sp,-12
80027b4e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b52:	00 00       	add	r0,r0
80027b54:	80 02       	ld.sh	r2,r0[0x0]
80027b56:	79 82       	ld.w	r2,r12[0x60]

80027b58 <pdca_enable_interrupt_reload_counter_zero>:


void pdca_enable_interrupt_reload_counter_zero(unsigned int pdca_ch_number)
{
80027b58:	eb cd 40 c0 	pushm	r6-r7,lr
80027b5c:	1a 97       	mov	r7,sp
80027b5e:	20 2d       	sub	sp,8
80027b60:	48 96       	lddpc	r6,80027b84 <pdca_enable_interrupt_reload_counter_zero+0x2c>
80027b62:	1e 26       	rsub	r6,pc
80027b64:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b68:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b6c:	f0 16 00 27 	mcall	r6[156]
80027b70:	18 98       	mov	r8,r12
80027b72:	ef 48 ff fc 	st.w	r7[-4],r8

  pdca_channel->ier = AVR32_PDCA_RCZ_MASK;
80027b76:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027b7a:	30 19       	mov	r9,1
80027b7c:	91 89       	st.w	r8[0x20],r9
}
80027b7e:	2f ed       	sub	sp,-8
80027b80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027b84:	80 02       	ld.sh	r2,r0[0x0]
80027b86:	79 e6       	ld.w	r6,r12[0x78]

80027b88 <pdca_get_transfer_status>:


unsigned long pdca_get_transfer_status(unsigned int pdca_ch_number)
{
80027b88:	eb cd 40 c0 	pushm	r6-r7,lr
80027b8c:	1a 97       	mov	r7,sp
80027b8e:	20 2d       	sub	sp,8
80027b90:	48 96       	lddpc	r6,80027bb4 <pdca_get_transfer_status+0x2c>
80027b92:	1e 26       	rsub	r6,pc
80027b94:	ef 4c ff f8 	st.w	r7[-8],r12
  // get the correct channel pointer
  volatile avr32_pdca_channel_t *pdca_channel = pdca_get_handler(pdca_ch_number);
80027b98:	ee fc ff f8 	ld.w	r12,r7[-8]
80027b9c:	f0 16 00 27 	mcall	r6[156]
80027ba0:	18 98       	mov	r8,r12
80027ba2:	ef 48 ff fc 	st.w	r7[-4],r8

  return pdca_channel->isr;
80027ba6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027baa:	70 b8       	ld.w	r8,r8[0x2c]
}
80027bac:	10 9c       	mov	r12,r8
80027bae:	2f ed       	sub	sp,-8
80027bb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80027bb4:	80 02       	ld.sh	r2,r0[0x0]
80027bb6:	7a 16       	ld.w	r6,sp[0x4]

80027bb8 <pevc_channel_configure>:
// See comment header in pevc.h
bool pevc_channel_configure( volatile avr32_pevc_t *pevc,
                             unsigned short int chan_id,
                             unsigned short int gen_id,
                             const pevc_evs_opt_t *pevs )
{
80027bb8:	eb cd 40 80 	pushm	r7,lr
80027bbc:	1a 97       	mov	r7,sp
80027bbe:	20 4d       	sub	sp,16
80027bc0:	ef 4c ff fc 	st.w	r7[-4],r12
80027bc4:	14 98       	mov	r8,r10
80027bc6:	ef 49 ff f0 	st.w	r7[-16],r9
80027bca:	16 99       	mov	r9,r11
80027bcc:	ef 59 ff f8 	st.h	r7[-8],r9
80027bd0:	ef 58 ff f4 	st.h	r7[-12],r8
  if( NULL != pevc )
80027bd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027bd8:	58 08       	cp.w	r8,0
80027bda:	c6 90       	breq	80027cac <pevc_channel_configure+0xf4>
  {
    if(( gen_id < PEVC_NUMBER_OF_EVENT_GENERATORS )
80027bdc:	ef 09 ff f4 	ld.sh	r9,r7[-12]
80027be0:	32 18       	mov	r8,33
80027be2:	f0 09 19 00 	cp.h	r9,r8
80027be6:	e0 8b 00 61 	brhi	80027ca8 <pevc_channel_configure+0xf0>
80027bea:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027bee:	31 58       	mov	r8,21
80027bf0:	f0 09 19 00 	cp.h	r9,r8
80027bf4:	e0 8b 00 5a 	brhi	80027ca8 <pevc_channel_configure+0xf0>
    && ( chan_id < PEVC_NUMBER_OF_EVENT_USERS ))
    {
      // Connect the generator gen_id to the channel.
      pevc->CHMX[chan_id].evmx = gen_id;
80027bf8:	ef 1a ff f8 	ld.uh	r10,r7[-8]
80027bfc:	ef 08 ff f4 	ld.sh	r8,r7[-12]
80027c00:	5c 58       	castu.b	r8
80027c02:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80027c06:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c0a:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c0e:	2c 0a       	sub	r10,-64
80027c10:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c14:	f1 db d0 06 	bfins	r8,r11,0x0,0x6
80027c18:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8

      // Configure the event shaper for the channel.
      if( NULL != pevs )
80027c1c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c20:	58 08       	cp.w	r8,0
80027c22:	c4 10       	breq	80027ca4 <pevc_channel_configure+0xec>
      {
        pevc->igfdr = pevs->igfdr;  // Only one divider for all EVS channels.
80027c24:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c28:	11 88       	ld.ub	r8,r8[0x0]
80027c2a:	10 99       	mov	r9,r8
80027c2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027c30:	91 29       	st.w	r8[0x8],r9
        pevc->EVS[gen_id].igf = pevs->igf;
80027c32:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c36:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c3a:	70 18       	ld.w	r8,r8[0x4]
80027c3c:	5c 58       	castu.b	r8
80027c3e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c42:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c4a:	28 0a       	sub	r10,-128
80027c4c:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c50:	f1 db d0 41 	bfins	r8,r11,0x2,0x1
80027c54:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evf = pevs->evf;
80027c58:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c5c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c60:	70 28       	ld.w	r8,r8[0x8]
80027c62:	5c 58       	castu.b	r8
80027c64:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c68:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c6c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c70:	28 0a       	sub	r10,-128
80027c72:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c76:	f1 db d0 21 	bfins	r8,r11,0x1,0x1
80027c7a:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
        pevc->EVS[gen_id].evr = pevs->evr;
80027c7e:	ef 1a ff f4 	ld.uh	r10,r7[-12]
80027c82:	ee f8 ff f0 	ld.w	r8,r7[-16]
80027c86:	70 38       	ld.w	r8,r8[0xc]
80027c88:	5c 58       	castu.b	r8
80027c8a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80027c8e:	f7 d8 c0 08 	bfextu	r11,r8,0x0,0x8
80027c92:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027c96:	28 0a       	sub	r10,-128
80027c98:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027c9c:	f1 db d0 01 	bfins	r8,r11,0x0,0x1
80027ca0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
      }
      return( PASS );
80027ca4:	30 08       	mov	r8,0
80027ca6:	c0 48       	rjmp	80027cae <pevc_channel_configure+0xf6>
    }
    else return( FAIL );
80027ca8:	30 18       	mov	r8,1
80027caa:	c0 28       	rjmp	80027cae <pevc_channel_configure+0xf6>
  }
  else
    return( FAIL );
80027cac:	30 18       	mov	r8,1
}
80027cae:	10 9c       	mov	r12,r8
80027cb0:	2f cd       	sub	sp,-16
80027cb2:	e3 cd 80 80 	ldm	sp++,r7,pc

80027cb6 <pevc_igfd_set>:


// See comment header in pevc.h
void pevc_igfd_set( volatile avr32_pevc_t *pevc, unsigned char igfd )
{
80027cb6:	eb cd 40 80 	pushm	r7,lr
80027cba:	1a 97       	mov	r7,sp
80027cbc:	20 2d       	sub	sp,8
80027cbe:	ef 4c ff fc 	st.w	r7[-4],r12
80027cc2:	16 98       	mov	r8,r11
80027cc4:	ef 68 ff f8 	st.b	r7[-8],r8
  Assert( NULL != pevc );
  PEVC_IGFD_SET(pevc, igfd);
80027cc8:	ef 38 ff f8 	ld.ub	r8,r7[-8]
80027ccc:	f3 d8 c0 04 	bfextu	r9,r8,0x0,0x4
80027cd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027cd4:	91 29       	st.w	r8[0x8],r9
}
80027cd6:	2f ed       	sub	sp,-8
80027cd8:	e3 cd 80 80 	ldm	sp++,r7,pc

80027cdc <pevc_channels_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80027cdc:	eb cd 40 80 	pushm	r7,lr
80027ce0:	1a 97       	mov	r7,sp
80027ce2:	20 3d       	sub	sp,12
80027ce4:	ef 4c ff fc 	st.w	r7[-4],r12
80027ce8:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE(pevc, chan_mask);
80027cec:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027cf0:	fc 1a 80 00 	movh	r10,0x8000
80027cf4:	30 0b       	mov	r11,0
80027cf6:	14 38       	cp.w	r8,r10
80027cf8:	f6 09 13 00 	cpc	r9,r11
80027cfc:	e0 8b 00 08 	brhi	80027d0c <pevc_channels_enable+0x30>
80027d00:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d04:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d08:	91 89       	st.w	r8[0x20],r9
80027d0a:	c0 68       	rjmp	80027d16 <pevc_channels_enable+0x3a>
80027d0c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d10:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d14:	91 99       	st.w	r8[0x24],r9
}
80027d16:	2f dd       	sub	sp,-12
80027d18:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d1c <pevc_channels_disable>:

// See comment header in pevc.h
void pevc_channels_disable( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask )
{
80027d1c:	eb cd 40 80 	pushm	r7,lr
80027d20:	1a 97       	mov	r7,sp
80027d22:	20 3d       	sub	sp,12
80027d24:	ef 4c ff fc 	st.w	r7[-4],r12
80027d28:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE(pevc, chan_mask);
80027d2c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027d30:	fc 1a 80 00 	movh	r10,0x8000
80027d34:	30 0b       	mov	r11,0
80027d36:	14 38       	cp.w	r8,r10
80027d38:	f6 09 13 00 	cpc	r9,r11
80027d3c:	e0 8b 00 08 	brhi	80027d4c <pevc_channels_disable+0x30>
80027d40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d48:	91 c9       	st.w	r8[0x30],r9
80027d4a:	c0 68       	rjmp	80027d56 <pevc_channels_disable+0x3a>
80027d4c:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027d50:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d54:	91 d9       	st.w	r8[0x34],r9
}
80027d56:	2f dd       	sub	sp,-12
80027d58:	e3 cd 80 80 	ldm	sp++,r7,pc

80027d5c <pevc_get_channel_status>:

// See comment header in pevc.h
bool pevc_get_channel_status( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80027d5c:	eb cd 40 80 	pushm	r7,lr
80027d60:	1a 97       	mov	r7,sp
80027d62:	20 2d       	sub	sp,8
80027d64:	ef 4c ff fc 	st.w	r7[-4],r12
80027d68:	16 98       	mov	r8,r11
80027d6a:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80027d6e:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027d72:	31 f8       	mov	r8,31
80027d74:	f0 09 19 00 	cp.h	r9,r8
80027d78:	e0 8b 00 12 	brhi	80027d9c <pevc_get_channel_status+0x40>
    return( ((pevc->chsr0) & (1 << chan_id))>>chan_id );
80027d7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027d80:	70 49       	ld.w	r9,r8[0x10]
80027d82:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027d86:	30 1a       	mov	r10,1
80027d88:	f4 08 09 48 	lsl	r8,r10,r8
80027d8c:	10 69       	and	r9,r8
80027d8e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027d92:	f2 08 0a 48 	lsr	r8,r9,r8
80027d96:	5f 18       	srne	r8
80027d98:	5c 58       	castu.b	r8
80027d9a:	c1 28       	rjmp	80027dbe <pevc_get_channel_status+0x62>
  else
    return( ((pevc->chsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80027d9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027da0:	70 59       	ld.w	r9,r8[0x14]
80027da2:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027da6:	22 08       	sub	r8,32
80027da8:	30 1a       	mov	r10,1
80027daa:	f4 08 09 48 	lsl	r8,r10,r8
80027dae:	10 69       	and	r9,r8
80027db0:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027db4:	22 08       	sub	r8,32
80027db6:	f2 08 0a 48 	lsr	r8,r9,r8
80027dba:	5f 18       	srne	r8
80027dbc:	5c 58       	castu.b	r8
}
80027dbe:	10 9c       	mov	r12,r8
80027dc0:	2f ed       	sub	sp,-8
80027dc2:	e3 cd 80 80 	ldm	sp++,r7,pc

80027dc6 <pevc_get_channel_state>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
bool pevc_get_channel_state(volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80027dc6:	eb cd 40 80 	pushm	r7,lr
80027dca:	1a 97       	mov	r7,sp
80027dcc:	20 2d       	sub	sp,8
80027dce:	ef 4c ff fc 	st.w	r7[-4],r12
80027dd2:	16 98       	mov	r8,r11
80027dd4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80027dd8:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027ddc:	31 f8       	mov	r8,31
80027dde:	f0 09 19 00 	cp.h	r9,r8
80027de2:	e0 8b 00 12 	brhi	80027e06 <pevc_get_channel_state+0x40>
    return( ((pevc->busy0) & (1 << chan_id))>>chan_id );
80027de6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027dea:	71 49       	ld.w	r9,r8[0x50]
80027dec:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027df0:	30 1a       	mov	r10,1
80027df2:	f4 08 09 48 	lsl	r8,r10,r8
80027df6:	10 69       	and	r9,r8
80027df8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027dfc:	f2 08 0a 48 	lsr	r8,r9,r8
80027e00:	5f 18       	srne	r8
80027e02:	5c 58       	castu.b	r8
80027e04:	c1 28       	rjmp	80027e28 <pevc_get_channel_state+0x62>
  else
    return( ((pevc->busy1) & (1 << (chan_id-32)))>>(chan_id-32) );
80027e06:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e0a:	71 59       	ld.w	r9,r8[0x54]
80027e0c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e10:	22 08       	sub	r8,32
80027e12:	30 1a       	mov	r10,1
80027e14:	f4 08 09 48 	lsl	r8,r10,r8
80027e18:	10 69       	and	r9,r8
80027e1a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e1e:	22 08       	sub	r8,32
80027e20:	f2 08 0a 48 	lsr	r8,r9,r8
80027e24:	5f 18       	srne	r8
80027e26:	5c 58       	castu.b	r8
}
80027e28:	10 9c       	mov	r12,r8
80027e2a:	2f ed       	sub	sp,-8
80027e2c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e30 <pevc_channel_sev_enable>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channel_sev_enable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80027e30:	eb cd 40 80 	pushm	r7,lr
80027e34:	1a 97       	mov	r7,sp
80027e36:	20 2d       	sub	sp,8
80027e38:	ef 4c ff fc 	st.w	r7[-4],r12
80027e3c:	16 98       	mov	r8,r11
80027e3e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = ENABLE;
80027e42:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027e46:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027e4a:	f0 ca ff c0 	sub	r10,r8,-64
80027e4e:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027e52:	30 1b       	mov	r11,1
80027e54:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80027e58:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80027e5c:	2f ed       	sub	sp,-8
80027e5e:	e3 cd 80 80 	ldm	sp++,r7,pc

80027e62 <pevc_channels_trigger_sev>:

// See comment header in pevc.h
void pevc_channels_trigger_sev(volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80027e62:	eb cd 40 80 	pushm	r7,lr
80027e66:	1a 97       	mov	r7,sp
80027e68:	20 3d       	sub	sp,12
80027e6a:	ef 4c ff fc 	st.w	r7[-4],r12
80027e6e:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_TRIGGER_SEV(pevc, chan_mask);
80027e72:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027e76:	fc 1a 80 00 	movh	r10,0x8000
80027e7a:	30 0b       	mov	r11,0
80027e7c:	14 38       	cp.w	r8,r10
80027e7e:	f6 09 13 00 	cpc	r9,r11
80027e82:	e0 8b 00 09 	brhi	80027e94 <pevc_channels_trigger_sev+0x32>
80027e86:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027e8a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e8e:	f1 49 00 40 	st.w	r8[64],r9
80027e92:	c0 78       	rjmp	80027ea0 <pevc_channels_trigger_sev+0x3e>
80027e94:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027e98:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027e9c:	f1 49 00 44 	st.w	r8[68],r9
}
80027ea0:	2f dd       	sub	sp,-12
80027ea2:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ea6 <pevc_channel_sev_disable>:

// See comment header in pevc.h
void pevc_channel_sev_disable( volatile avr32_pevc_t *pevc, unsigned short int chan_id )
{
80027ea6:	eb cd 40 80 	pushm	r7,lr
80027eaa:	1a 97       	mov	r7,sp
80027eac:	20 2d       	sub	sp,8
80027eae:	ef 4c ff fc 	st.w	r7[-4],r12
80027eb2:	16 98       	mov	r8,r11
80027eb4:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  pevc->CHMX[chan_id].smx = DISABLE;
80027eb8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027ebc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80027ec0:	f0 ca ff c0 	sub	r10,r8,-64
80027ec4:	f2 0a 03 28 	ld.w	r8,r9[r10<<0x2]
80027ec8:	30 0b       	mov	r11,0
80027eca:	f1 db d1 01 	bfins	r8,r11,0x8,0x1
80027ece:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
}
80027ed2:	2f ed       	sub	sp,-8
80027ed4:	e3 cd 80 80 	ldm	sp++,r7,pc

80027ed8 <pevc_channels_enable_trigger_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80027ed8:	eb cd 40 80 	pushm	r7,lr
80027edc:	1a 97       	mov	r7,sp
80027ede:	20 3d       	sub	sp,12
80027ee0:	ef 4c ff fc 	st.w	r7[-4],r12
80027ee4:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
80027ee8:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027eec:	fc 1a 80 00 	movh	r10,0x8000
80027ef0:	30 0b       	mov	r11,0
80027ef2:	14 38       	cp.w	r8,r10
80027ef4:	f6 09 13 00 	cpc	r9,r11
80027ef8:	e0 8b 00 09 	brhi	80027f0a <pevc_channels_enable_trigger_interrupt+0x32>
80027efc:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f00:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f04:	f1 49 00 90 	st.w	r8[144],r9
80027f08:	c0 78       	rjmp	80027f16 <pevc_channels_enable_trigger_interrupt+0x3e>
80027f0a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f12:	f1 49 00 94 	st.w	r8[148],r9
}
80027f16:	2f dd       	sub	sp,-12
80027f18:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f1c <pevc_channels_disable_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
80027f1c:	eb cd 40 80 	pushm	r7,lr
80027f20:	1a 97       	mov	r7,sp
80027f22:	20 3d       	sub	sp,12
80027f24:	ef 4c ff fc 	st.w	r7[-4],r12
80027f28:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_TRIGGER_INTERRUPT(pevc, chan_mask);
80027f2c:	ee e8 ff f4 	ld.d	r8,r7[-12]
80027f30:	fc 1a 80 00 	movh	r10,0x8000
80027f34:	30 0b       	mov	r11,0
80027f36:	14 38       	cp.w	r8,r10
80027f38:	f6 09 13 00 	cpc	r9,r11
80027f3c:	e0 8b 00 09 	brhi	80027f4e <pevc_channels_disable_trigger_interrupt+0x32>
80027f40:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f48:	f1 49 00 a0 	st.w	r8[160],r9
80027f4c:	c0 78       	rjmp	80027f5a <pevc_channels_disable_trigger_interrupt+0x3e>
80027f4e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80027f52:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f56:	f1 49 00 a4 	st.w	r8[164],r9
}
80027f5a:	2f dd       	sub	sp,-12
80027f5c:	e3 cd 80 80 	ldm	sp++,r7,pc

80027f60 <pevc_channel_is_trigger_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80027f60:	eb cd 40 80 	pushm	r7,lr
80027f64:	1a 97       	mov	r7,sp
80027f66:	20 2d       	sub	sp,8
80027f68:	ef 4c ff fc 	st.w	r7[-4],r12
80027f6c:	16 98       	mov	r8,r11
80027f6e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80027f72:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027f76:	31 f8       	mov	r8,31
80027f78:	f0 09 19 00 	cp.h	r9,r8
80027f7c:	e0 8b 00 13 	brhi	80027fa2 <pevc_channel_is_trigger_interrupt_enabled+0x42>
    return( ((pevc->trimr0) & (1 << chan_id))>>chan_id );
80027f80:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027f84:	f0 f9 00 80 	ld.w	r9,r8[128]
80027f88:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027f8c:	30 1a       	mov	r10,1
80027f8e:	f4 08 09 48 	lsl	r8,r10,r8
80027f92:	10 69       	and	r9,r8
80027f94:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027f98:	f2 08 0a 48 	lsr	r8,r9,r8
80027f9c:	5f 18       	srne	r8
80027f9e:	5c 58       	castu.b	r8
80027fa0:	c1 38       	rjmp	80027fc6 <pevc_channel_is_trigger_interrupt_enabled+0x66>
  else
    return( ((pevc->trimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80027fa2:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027fa6:	f0 f9 00 84 	ld.w	r9,r8[132]
80027faa:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fae:	22 08       	sub	r8,32
80027fb0:	30 1a       	mov	r10,1
80027fb2:	f4 08 09 48 	lsl	r8,r10,r8
80027fb6:	10 69       	and	r9,r8
80027fb8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027fbc:	22 08       	sub	r8,32
80027fbe:	f2 08 0a 48 	lsr	r8,r9,r8
80027fc2:	5f 18       	srne	r8
80027fc4:	5c 58       	castu.b	r8
}
80027fc6:	10 9c       	mov	r12,r8
80027fc8:	2f ed       	sub	sp,-8
80027fca:	e3 cd 80 80 	ldm	sp++,r7,pc

80027fce <pevc_channel_is_trigger_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_trigger_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80027fce:	eb cd 40 80 	pushm	r7,lr
80027fd2:	1a 97       	mov	r7,sp
80027fd4:	20 2d       	sub	sp,8
80027fd6:	ef 4c ff fc 	st.w	r7[-4],r12
80027fda:	16 98       	mov	r8,r11
80027fdc:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80027fe0:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80027fe4:	31 f8       	mov	r8,31
80027fe6:	f0 09 19 00 	cp.h	r9,r8
80027fea:	e0 8b 00 12 	brhi	8002800e <pevc_channel_is_trigger_interrupt_raised+0x40>
    return( ((pevc->trsr0) & (1 << chan_id))>>chan_id );
80027fee:	ee f8 ff fc 	ld.w	r8,r7[-4]
80027ff2:	71 89       	ld.w	r9,r8[0x60]
80027ff4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80027ff8:	30 1a       	mov	r10,1
80027ffa:	f4 08 09 48 	lsl	r8,r10,r8
80027ffe:	10 69       	and	r9,r8
80028000:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028004:	f2 08 0a 48 	lsr	r8,r9,r8
80028008:	5f 18       	srne	r8
8002800a:	5c 58       	castu.b	r8
8002800c:	c1 28       	rjmp	80028030 <pevc_channel_is_trigger_interrupt_raised+0x62>
  else
    return( ((pevc->trsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
8002800e:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028012:	71 99       	ld.w	r9,r8[0x64]
80028014:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028018:	22 08       	sub	r8,32
8002801a:	30 1a       	mov	r10,1
8002801c:	f4 08 09 48 	lsl	r8,r10,r8
80028020:	10 69       	and	r9,r8
80028022:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028026:	22 08       	sub	r8,32
80028028:	f2 08 0a 48 	lsr	r8,r9,r8
8002802c:	5f 18       	srne	r8
8002802e:	5c 58       	castu.b	r8
}
80028030:	10 9c       	mov	r12,r8
80028032:	2f ed       	sub	sp,-8
80028034:	e3 cd 80 80 	ldm	sp++,r7,pc

80028038 <pevc_channel_clear_trigger_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_trigger_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028038:	eb cd 40 80 	pushm	r7,lr
8002803c:	1a 97       	mov	r7,sp
8002803e:	20 2d       	sub	sp,8
80028040:	ef 4c ff fc 	st.w	r7[-4],r12
80028044:	16 98       	mov	r8,r11
80028046:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
8002804a:	ef 09 ff f8 	ld.sh	r9,r7[-8]
8002804e:	31 f8       	mov	r8,31
80028050:	f0 09 19 00 	cp.h	r9,r8
80028054:	e0 8b 00 0d 	brhi	8002806e <pevc_channel_clear_trigger_interrupt+0x36>
    pevc->trscr0 = (1 << chan_id);
80028058:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002805c:	30 19       	mov	r9,1
8002805e:	f2 08 09 48 	lsl	r8,r9,r8
80028062:	10 99       	mov	r9,r8
80028064:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028068:	f1 49 00 70 	st.w	r8[112],r9
8002806c:	c0 c8       	rjmp	80028084 <pevc_channel_clear_trigger_interrupt+0x4c>
  else
    pevc->trscr1 = (1 << (chan_id-32));
8002806e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028072:	22 08       	sub	r8,32
80028074:	30 19       	mov	r9,1
80028076:	f2 08 09 48 	lsl	r8,r9,r8
8002807a:	10 99       	mov	r9,r8
8002807c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028080:	f1 49 00 74 	st.w	r8[116],r9
}
80028084:	2f ed       	sub	sp,-8
80028086:	e3 cd 80 80 	ldm	sp++,r7,pc

8002808a <pevc_channels_enable_overrun_interrupt>:
/**                                                                          **/
/******************************************************************************/

// See comment header in pevc.h
void pevc_channels_enable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
8002808a:	eb cd 40 80 	pushm	r7,lr
8002808e:	1a 97       	mov	r7,sp
80028090:	20 3d       	sub	sp,12
80028092:	ef 4c ff fc 	st.w	r7[-4],r12
80028096:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_ENABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
8002809a:	ee e8 ff f4 	ld.d	r8,r7[-12]
8002809e:	fc 1a 80 00 	movh	r10,0x8000
800280a2:	30 0b       	mov	r11,0
800280a4:	14 38       	cp.w	r8,r10
800280a6:	f6 09 13 00 	cpc	r9,r11
800280aa:	e0 8b 00 09 	brhi	800280bc <pevc_channels_enable_overrun_interrupt+0x32>
800280ae:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280b2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280b6:	f1 49 00 e0 	st.w	r8[224],r9
800280ba:	c0 78       	rjmp	800280c8 <pevc_channels_enable_overrun_interrupt+0x3e>
800280bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280c0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280c4:	f1 49 00 e4 	st.w	r8[228],r9
}
800280c8:	2f dd       	sub	sp,-12
800280ca:	e3 cd 80 80 	ldm	sp++,r7,pc

800280ce <pevc_channels_disable_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channels_disable_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned long long int chan_mask)
{
800280ce:	eb cd 40 80 	pushm	r7,lr
800280d2:	1a 97       	mov	r7,sp
800280d4:	20 3d       	sub	sp,12
800280d6:	ef 4c ff fc 	st.w	r7[-4],r12
800280da:	ee eb ff f4 	st.d	r7[-12],r10
  Assert( NULL != pevc );
  PEVC_CHANNELS_DISABLE_OVERRUN_INTERRUPT(pevc, chan_mask);
800280de:	ee e8 ff f4 	ld.d	r8,r7[-12]
800280e2:	fc 1a 80 00 	movh	r10,0x8000
800280e6:	30 0b       	mov	r11,0
800280e8:	14 38       	cp.w	r8,r10
800280ea:	f6 09 13 00 	cpc	r9,r11
800280ee:	e0 8b 00 09 	brhi	80028100 <pevc_channels_disable_overrun_interrupt+0x32>
800280f2:	ee f9 ff f8 	ld.w	r9,r7[-8]
800280f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800280fa:	f1 49 00 f0 	st.w	r8[240],r9
800280fe:	c0 78       	rjmp	8002810c <pevc_channels_disable_overrun_interrupt+0x3e>
80028100:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028104:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028108:	f1 49 00 f4 	st.w	r8[244],r9
}
8002810c:	2f dd       	sub	sp,-12
8002810e:	e3 cd 80 80 	ldm	sp++,r7,pc

80028112 <pevc_channel_is_overrun_interrupt_enabled>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_enabled( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028112:	eb cd 40 80 	pushm	r7,lr
80028116:	1a 97       	mov	r7,sp
80028118:	20 2d       	sub	sp,8
8002811a:	ef 4c ff fc 	st.w	r7[-4],r12
8002811e:	16 98       	mov	r8,r11
80028120:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028124:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028128:	31 f8       	mov	r8,31
8002812a:	f0 09 19 00 	cp.h	r9,r8
8002812e:	e0 8b 00 13 	brhi	80028154 <pevc_channel_is_overrun_interrupt_enabled+0x42>
    return( ((pevc->ovimr0) & (1 << chan_id))>>chan_id );
80028132:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028136:	f0 f9 00 d0 	ld.w	r9,r8[208]
8002813a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002813e:	30 1a       	mov	r10,1
80028140:	f4 08 09 48 	lsl	r8,r10,r8
80028144:	10 69       	and	r9,r8
80028146:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002814a:	f2 08 0a 48 	lsr	r8,r9,r8
8002814e:	5f 18       	srne	r8
80028150:	5c 58       	castu.b	r8
80028152:	c1 38       	rjmp	80028178 <pevc_channel_is_overrun_interrupt_enabled+0x66>
  else
    return( ((pevc->ovimr1) & (1 << (chan_id-32)))>>(chan_id-32) );
80028154:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028158:	f0 f9 00 d4 	ld.w	r9,r8[212]
8002815c:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028160:	22 08       	sub	r8,32
80028162:	30 1a       	mov	r10,1
80028164:	f4 08 09 48 	lsl	r8,r10,r8
80028168:	10 69       	and	r9,r8
8002816a:	ef 18 ff f8 	ld.uh	r8,r7[-8]
8002816e:	22 08       	sub	r8,32
80028170:	f2 08 0a 48 	lsr	r8,r9,r8
80028174:	5f 18       	srne	r8
80028176:	5c 58       	castu.b	r8
}
80028178:	10 9c       	mov	r12,r8
8002817a:	2f ed       	sub	sp,-8
8002817c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028180 <pevc_channel_is_overrun_interrupt_raised>:

// See comment header in pevc.h
bool pevc_channel_is_overrun_interrupt_raised( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
80028180:	eb cd 40 80 	pushm	r7,lr
80028184:	1a 97       	mov	r7,sp
80028186:	20 2d       	sub	sp,8
80028188:	ef 4c ff fc 	st.w	r7[-4],r12
8002818c:	16 98       	mov	r8,r11
8002818e:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028192:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028196:	31 f8       	mov	r8,31
80028198:	f0 09 19 00 	cp.h	r9,r8
8002819c:	e0 8b 00 13 	brhi	800281c2 <pevc_channel_is_overrun_interrupt_raised+0x42>
    return( ((pevc->ovsr0) & (1 << chan_id))>>chan_id );
800281a0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281a4:	f0 f9 00 b0 	ld.w	r9,r8[176]
800281a8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281ac:	30 1a       	mov	r10,1
800281ae:	f4 08 09 48 	lsl	r8,r10,r8
800281b2:	10 69       	and	r9,r8
800281b4:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281b8:	f2 08 0a 48 	lsr	r8,r9,r8
800281bc:	5f 18       	srne	r8
800281be:	5c 58       	castu.b	r8
800281c0:	c1 38       	rjmp	800281e6 <pevc_channel_is_overrun_interrupt_raised+0x66>
  else
    return( ((pevc->ovsr1) & (1 << (chan_id-32)))>>(chan_id-32) );
800281c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800281c6:	f0 f9 00 b4 	ld.w	r9,r8[180]
800281ca:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281ce:	22 08       	sub	r8,32
800281d0:	30 1a       	mov	r10,1
800281d2:	f4 08 09 48 	lsl	r8,r10,r8
800281d6:	10 69       	and	r9,r8
800281d8:	ef 18 ff f8 	ld.uh	r8,r7[-8]
800281dc:	22 08       	sub	r8,32
800281de:	f2 08 0a 48 	lsr	r8,r9,r8
800281e2:	5f 18       	srne	r8
800281e4:	5c 58       	castu.b	r8
}
800281e6:	10 9c       	mov	r12,r8
800281e8:	2f ed       	sub	sp,-8
800281ea:	e3 cd 80 80 	ldm	sp++,r7,pc

800281ee <pevc_channel_clear_overrun_interrupt>:

// See comment header in pevc.h
void pevc_channel_clear_overrun_interrupt( volatile avr32_pevc_t *pevc, unsigned short int chan_id)
{
800281ee:	eb cd 40 80 	pushm	r7,lr
800281f2:	1a 97       	mov	r7,sp
800281f4:	20 2d       	sub	sp,8
800281f6:	ef 4c ff fc 	st.w	r7[-4],r12
800281fa:	16 98       	mov	r8,r11
800281fc:	ef 58 ff f8 	st.h	r7[-8],r8
  Assert( NULL != pevc );
  Assert( chan_id < PEVC_NUMBER_OF_EVENT_USERS );
  if(chan_id<32)
80028200:	ef 09 ff f8 	ld.sh	r9,r7[-8]
80028204:	31 f8       	mov	r8,31
80028206:	f0 09 19 00 	cp.h	r9,r8
8002820a:	e0 8b 00 0d 	brhi	80028224 <pevc_channel_clear_overrun_interrupt+0x36>
    pevc->ovscr0 = (1 << chan_id);
8002820e:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028212:	30 19       	mov	r9,1
80028214:	f2 08 09 48 	lsl	r8,r9,r8
80028218:	10 99       	mov	r9,r8
8002821a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002821e:	f1 49 00 c0 	st.w	r8[192],r9
80028222:	c0 c8       	rjmp	8002823a <pevc_channel_clear_overrun_interrupt+0x4c>
  else
    pevc->ovscr1 = (1 << (chan_id-32));
80028224:	ef 18 ff f8 	ld.uh	r8,r7[-8]
80028228:	22 08       	sub	r8,32
8002822a:	30 19       	mov	r9,1
8002822c:	f2 08 09 48 	lsl	r8,r9,r8
80028230:	10 99       	mov	r9,r8
80028232:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028236:	f1 49 00 c4 	st.w	r8[196],r9
}
8002823a:	2f ed       	sub	sp,-8
8002823c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028240 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
80028240:	eb cd 40 80 	pushm	r7,lr
80028244:	1a 97       	mov	r7,sp
80028246:	20 1d       	sub	sp,4
80028248:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002824c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028250:	e6 18 00 01 	andh	r8,0x1,COH
80028254:	5f 08       	sreq	r8
80028256:	5c 58       	castu.b	r8
}
80028258:	10 9c       	mov	r12,r8
8002825a:	2f fd       	sub	sp,-4
8002825c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028260 <scif_pclksr_statushigh_wait>:
 * \return Status.
 *   \retval 0   Status is high.
 *   \retval <0  SCIF_POLL_TIMEOUT Timeout expired before the status was high.
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
80028260:	eb cd 40 80 	pushm	r7,lr
80028264:	1a 97       	mov	r7,sp
80028266:	20 2d       	sub	sp,8
80028268:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
8002826c:	e0 78 86 a0 	mov	r8,100000
80028270:	ef 48 ff fc 	st.w	r7[-4],r8
  
  while(!(AVR32_SCIF.pclksr & statusMask))
80028274:	c0 c8       	rjmp	8002828c <scif_pclksr_statushigh_wait+0x2c>
  {
    if(--timeout == 0)
80028276:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002827a:	20 18       	sub	r8,1
8002827c:	ef 48 ff fc 	st.w	r7[-4],r8
80028280:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028284:	58 08       	cp.w	r8,0
80028286:	c0 31       	brne	8002828c <scif_pclksr_statushigh_wait+0x2c>
      return -1;
80028288:	3f f8       	mov	r8,-1
8002828a:	c0 a8       	rjmp	8002829e <scif_pclksr_statushigh_wait+0x3e>
 */
static long int scif_pclksr_statushigh_wait(unsigned long statusMask)
{
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
  
  while(!(AVR32_SCIF.pclksr & statusMask))
8002828c:	fe 78 08 00 	mov	r8,-63488
80028290:	70 59       	ld.w	r9,r8[0x14]
80028292:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028296:	f3 e8 00 08 	and	r8,r9,r8
8002829a:	ce e0       	breq	80028276 <scif_pclksr_statushigh_wait+0x16>
  {
    if(--timeout == 0)
      return -1;
  }
  return PASS;
8002829c:	30 08       	mov	r8,0
}
8002829e:	10 9c       	mov	r12,r8
800282a0:	2f ed       	sub	sp,-8
800282a2:	e3 cd 80 80 	ldm	sp++,r7,pc

800282a6 <scif_read_gplp>:

unsigned long scif_read_gplp(unsigned long gplp)
{
800282a6:	eb cd 40 80 	pushm	r7,lr
800282aa:	1a 97       	mov	r7,sp
800282ac:	20 1d       	sub	sp,4
800282ae:	ef 4c ff fc 	st.w	r7[-4],r12
  return AVR32_SCIF.gplp[gplp];
800282b2:	fe 78 08 00 	mov	r8,-63488
800282b6:	ee f9 ff fc 	ld.w	r9,r7[-4]
800282ba:	2e 99       	sub	r9,-23
800282bc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
}
800282c0:	10 9c       	mov	r12,r8
800282c2:	2f fd       	sub	sp,-4
800282c4:	e3 cd 80 80 	ldm	sp++,r7,pc

800282c8 <scif_write_gplp>:


void scif_write_gplp(int gplp, unsigned long value)
{
800282c8:	eb cd 40 80 	pushm	r7,lr
800282cc:	1a 97       	mov	r7,sp
800282ce:	20 2d       	sub	sp,8
800282d0:	ef 4c ff fc 	st.w	r7[-4],r12
800282d4:	ef 4b ff f8 	st.w	r7[-8],r11
  SCIF_UNLOCK(AVR32_SCIF_GPLP + 4*gplp); 
800282d8:	fe 78 08 00 	mov	r8,-63488
800282dc:	ee f9 ff fc 	ld.w	r9,r7[-4]
800282e0:	2e 99       	sub	r9,-23
800282e2:	a3 69       	lsl	r9,0x2
800282e4:	ea 19 aa 00 	orh	r9,0xaa00
800282e8:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.gplp[gplp] = value;
800282ea:	fe 78 08 00 	mov	r8,-63488
800282ee:	ee f9 ff fc 	ld.w	r9,r7[-4]
800282f2:	2e 99       	sub	r9,-23
800282f4:	ee fa ff f8 	ld.w	r10,r7[-8]
800282f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
800282fc:	2f ed       	sub	sp,-8
800282fe:	e3 cd 80 80 	ldm	sp++,r7,pc

80028302 <scif_start_osc>:
/**
 ** OSC0/OSC1 Functions
 **/

long int scif_start_osc(scif_osc_t osc, const scif_osc_opt_t *opt, bool wait_for_ready)
{
80028302:	eb cd 40 c0 	pushm	r6-r7,lr
80028306:	1a 97       	mov	r7,sp
80028308:	20 6d       	sub	sp,24
8002830a:	4c c6       	lddpc	r6,80028438 <scif_start_osc+0x136>
8002830c:	1e 26       	rsub	r6,pc
8002830e:	ef 4c ff f0 	st.w	r7[-16],r12
80028312:	ef 4b ff ec 	st.w	r7[-20],r11
80028316:	14 98       	mov	r8,r10
80028318:	ef 68 ff e8 	st.b	r7[-24],r8
      return -1;
    }  
  }
#endif  // AVR32SFW_INPUT_CHECK
  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
8002831c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028320:	fe 79 08 00 	mov	r9,-63488
80028324:	ee fa ff f0 	ld.w	r10,r7[-16]
80028328:	a3 68       	lsl	r8,0x2
8002832a:	ee 08 00 08 	add	r8,r7,r8
8002832e:	2f 7a       	sub	r10,-9
80028330:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028334:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure & start OSC0.
  u_avr32_scif_oscctrl.OSCCTRL[osc].mode = opt->mode;
80028338:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002833c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028340:	70 18       	ld.w	r8,r8[0x4]
80028342:	5c 58       	castu.b	r8
80028344:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028348:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002834c:	f2 08 15 02 	lsl	r8,r9,0x2
80028350:	ee 08 00 08 	add	r8,r7,r8
80028354:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028358:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
8002835c:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].gain = opt->gain;
80028360:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028364:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028368:	f1 38 00 09 	ld.ub	r8,r8[9]
8002836c:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028370:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028374:	f2 08 15 02 	lsl	r8,r9,0x2
80028378:	ee 08 00 08 	add	r8,r7,r8
8002837c:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028380:	f3 da d0 22 	bfins	r9,r10,0x1,0x2
80028384:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = opt->startup;
80028388:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002838c:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028390:	f1 38 00 08 	ld.ub	r8,r8[8]
80028394:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028398:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002839c:	f2 08 15 02 	lsl	r8,r9,0x2
800283a0:	ee 08 00 08 	add	r8,r7,r8
800283a4:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800283a8:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
800283ac:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
800283b0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283b4:	a3 68       	lsl	r8,0x2
800283b6:	ee 08 00 08 	add	r8,r7,r8
800283ba:	f0 f9 ff f4 	ld.w	r9,r8[-12]
800283be:	30 1a       	mov	r10,1
800283c0:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
800283c4:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
800283c8:	e1 b8 00 00 	mfsr	r8,0x0
800283cc:	10 9c       	mov	r12,r8
800283ce:	c3 9f       	rcall	80028240 <cpu_irq_is_enabled_flags>
800283d0:	18 98       	mov	r8,r12
800283d2:	ef 68 ff ff 	st.b	r7[-1],r8
800283d6:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);    
800283d8:	fe 78 08 00 	mov	r8,-63488
800283dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
800283e0:	2f 79       	sub	r9,-9
800283e2:	a3 69       	lsl	r9,0x2
800283e4:	ea 19 aa 00 	orh	r9,0xaa00
800283e8:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800283ea:	fe 79 08 00 	mov	r9,-63488
800283ee:	ee fa ff f0 	ld.w	r10,r7[-16]
800283f2:	ee f8 ff f0 	ld.w	r8,r7[-16]
800283f6:	2f 7a       	sub	r10,-9
800283f8:	a3 68       	lsl	r8,0x2
800283fa:	ee 08 00 08 	add	r8,r7,r8
800283fe:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028402:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028406:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002840a:	30 08       	mov	r8,0
8002840c:	f0 09 18 00 	cp.b	r9,r8
80028410:	c0 20       	breq	80028414 <scif_start_osc+0x112>
80028412:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028414:	ef 39 ff e8 	ld.ub	r9,r7[-24]
80028418:	30 08       	mov	r8,0
8002841a:	f0 09 18 00 	cp.b	r9,r8
8002841e:	c0 80       	breq	8002842e <scif_start_osc+0x12c>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
80028420:	30 1c       	mov	r12,1
80028422:	c1 ff       	rcall	80028260 <scif_pclksr_statushigh_wait>
80028424:	18 98       	mov	r8,r12
80028426:	58 08       	cp.w	r8,0
80028428:	c0 30       	breq	8002842e <scif_start_osc+0x12c>
      return -1;
8002842a:	3f f8       	mov	r8,-1
8002842c:	c0 28       	rjmp	80028430 <scif_start_osc+0x12e>
  }
  return PASS;
8002842e:	30 08       	mov	r8,0
}
80028430:	10 9c       	mov	r12,r8
80028432:	2f ad       	sub	sp,-24
80028434:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028438:	80 02       	ld.sh	r2,r0[0x0]
8002843a:	81 90       	st.w	r0[0x24],r0

8002843c <scif_is_osc_ready>:


bool scif_is_osc_ready(scif_osc_t osc)
{
8002843c:	eb cd 40 80 	pushm	r7,lr
80028440:	1a 97       	mov	r7,sp
80028442:	20 1d       	sub	sp,4
80028444:	ef 4c ff fc 	st.w	r7[-4],r12
  if (osc == SCIF_OSC0)
80028448:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002844c:	58 08       	cp.w	r8,0
8002844e:	c0 81       	brne	8002845e <scif_is_osc_ready+0x22>
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC0RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC0RDY_OFFSET);
80028450:	fe 78 08 00 	mov	r8,-63488
80028454:	70 58       	ld.w	r8,r8[0x14]
80028456:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002845a:	5c 58       	castu.b	r8
8002845c:	c0 98       	rjmp	8002846e <scif_is_osc_ready+0x32>
  }
  else
  {
    return((AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_OSC1RDY_MASK)>>AVR32_SCIF_PCLKSR_OSC1RDY_OFFSET);  
8002845e:	fe 78 08 00 	mov	r8,-63488
80028462:	70 58       	ld.w	r8,r8[0x14]
80028464:	e2 18 00 02 	andl	r8,0x2,COH
80028468:	a1 98       	lsr	r8,0x1
8002846a:	5f 18       	srne	r8
8002846c:	5c 58       	castu.b	r8
  }
}
8002846e:	10 9c       	mov	r12,r8
80028470:	2f fd       	sub	sp,-4
80028472:	e3 cd 80 80 	ldm	sp++,r7,pc

80028476 <scif_stop_osc>:


long int scif_stop_osc(scif_osc_t osc)
{
80028476:	eb cd 40 c0 	pushm	r6-r7,lr
8002847a:	1a 97       	mov	r7,sp
8002847c:	20 3d       	sub	sp,12
8002847e:	49 d6       	lddpc	r6,800284f0 <scif_stop_osc+0x7a>
80028480:	1e 26       	rsub	r6,pc
80028482:	ef 4c ff f4 	st.w	r7[-12],r12

  unsigned long temp;

  temp = AVR32_SCIF.oscctrl[osc];
80028486:	fe 78 08 00 	mov	r8,-63488
8002848a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002848e:	2f 79       	sub	r9,-9
80028490:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028494:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL_OSCEN_MASK;
80028498:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002849c:	b1 c8       	cbr	r8,0x10
8002849e:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
800284a2:	e1 b8 00 00 	mfsr	r8,0x0
800284a6:	10 9c       	mov	r12,r8
800284a8:	cc ce       	rcall	80028240 <cpu_irq_is_enabled_flags>
800284aa:	18 98       	mov	r8,r12
800284ac:	ef 68 ff ff 	st.b	r7[-1],r8
800284b0:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800284b2:	fe 78 08 00 	mov	r8,-63488
800284b6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800284ba:	2f 79       	sub	r9,-9
800284bc:	a3 69       	lsl	r9,0x2
800284be:	ea 19 aa 00 	orh	r9,0xaa00
800284c2:	91 69       	st.w	r8[0x18],r9
  // Stop OSC0.
  AVR32_SCIF.oscctrl[osc] = temp;
800284c4:	fe 78 08 00 	mov	r8,-63488
800284c8:	ee f9 ff f4 	ld.w	r9,r7[-12]
800284cc:	2f 79       	sub	r9,-9
800284ce:	ee fa ff f8 	ld.w	r10,r7[-8]
800284d2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  AVR32_LEAVE_CRITICAL_REGION( );
800284d6:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800284da:	30 08       	mov	r8,0
800284dc:	f0 09 18 00 	cp.b	r9,r8
800284e0:	c0 20       	breq	800284e4 <scif_stop_osc+0x6e>
800284e2:	d5 03       	csrf	0x10
      
  return PASS;
800284e4:	30 08       	mov	r8,0
}
800284e6:	10 9c       	mov	r12,r8
800284e8:	2f dd       	sub	sp,-12
800284ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800284ee:	00 00       	add	r0,r0
800284f0:	80 02       	ld.sh	r2,r0[0x0]
800284f2:	83 04       	st.w	r1[0x0],r4

800284f4 <scif_configure_osc_crystalmode>:


long int scif_configure_osc_crystalmode(scif_osc_t osc, unsigned int fcrystal)
{
800284f4:	eb cd 40 c0 	pushm	r6-r7,lr
800284f8:	1a 97       	mov	r7,sp
800284fa:	20 5d       	sub	sp,20
800284fc:	4d 46       	lddpc	r6,8002864c <scif_configure_osc_crystalmode+0x158>
800284fe:	1e 26       	rsub	r6,pc
80028500:	ef 4c ff f0 	st.w	r7[-16],r12
80028504:	ef 4b ff ec 	st.w	r7[-20],r11
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
  if (osc == SCIF_OSC0)
80028508:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002850c:	58 08       	cp.w	r8,0
8002850e:	c4 e1       	brne	800285aa <scif_configure_osc_crystalmode+0xb6>
  {    
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0] = AVR32_SCIF.OSCCTRL[SCIF_OSC0] ;    
80028510:	fe 78 08 00 	mov	r8,-63488
80028514:	70 98       	ld.w	r8,r8[0x24]
80028516:	ef 48 ff f4 	st.w	r7[-12],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
8002851a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002851e:	30 19       	mov	r9,1
80028520:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028524:	ef 48 ff f4 	st.w	r7[-12],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL0_GAIN_G0 :
80028528:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002852c:	ec 58 bb 9f 	cp.w	r8,899999
80028530:	e0 88 00 1b 	brls	80028566 <scif_configure_osc_crystalmode+0x72>
80028534:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028538:	e0 69 c6 bf 	mov	r9,50879
8002853c:	ea 19 00 2d 	orh	r9,0x2d
80028540:	12 38       	cp.w	r8,r9
80028542:	e0 88 00 0f 	brls	80028560 <scif_configure_osc_crystalmode+0x6c>
80028546:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002854a:	e0 69 11 ff 	mov	r9,4607
8002854e:	ea 19 00 7a 	orh	r9,0x7a
80028552:	12 38       	cp.w	r8,r9
80028554:	e0 8b 00 04 	brhi	8002855c <scif_configure_osc_crystalmode+0x68>
80028558:	30 28       	mov	r8,2
8002855a:	c0 28       	rjmp	8002855e <scif_configure_osc_crystalmode+0x6a>
8002855c:	30 38       	mov	r8,3
8002855e:	c0 28       	rjmp	80028562 <scif_configure_osc_crystalmode+0x6e>
80028560:	30 18       	mov	r8,1
80028562:	10 99       	mov	r9,r8
80028564:	c0 28       	rjmp	80028568 <scif_configure_osc_crystalmode+0x74>
80028566:	30 09       	mov	r9,0
80028568:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002856c:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
80028570:	ef 48 ff f4 	st.w	r7[-12],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL0_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL0_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
80028574:	e1 b8 00 00 	mfsr	r8,0x0
80028578:	10 9c       	mov	r12,r8
8002857a:	c6 3e       	rcall	80028240 <cpu_irq_is_enabled_flags>
8002857c:	18 98       	mov	r8,r12
8002857e:	ef 68 ff fe 	st.b	r7[-2],r8
80028582:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL);
80028584:	fe 78 08 00 	mov	r8,-63488
80028588:	32 49       	mov	r9,36
8002858a:	ea 19 aa 00 	orh	r9,0xaa00
8002858e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC0] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC0];
80028590:	fe 78 08 00 	mov	r8,-63488
80028594:	ee f9 ff f4 	ld.w	r9,r7[-12]
80028598:	91 99       	st.w	r8[0x24],r9
    AVR32_LEAVE_CRITICAL_REGION( );
8002859a:	ef 39 ff fe 	ld.ub	r9,r7[-2]
8002859e:	30 08       	mov	r8,0
800285a0:	f0 09 18 00 	cp.b	r9,r8
800285a4:	c4 f0       	breq	80028642 <scif_configure_osc_crystalmode+0x14e>
800285a6:	d5 03       	csrf	0x10
800285a8:	c4 d8       	rjmp	80028642 <scif_configure_osc_crystalmode+0x14e>
  }
  else
  { 
    // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1] = AVR32_SCIF.OSCCTRL[SCIF_OSC1] ;    
800285aa:	fe 78 08 00 	mov	r8,-63488
800285ae:	70 a8       	ld.w	r8,r8[0x28]
800285b0:	ef 48 ff f8 	st.w	r7[-8],r8
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].mode = SCIF_OSC_MODE_2PIN_CRYSTAL;
800285b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800285b8:	30 19       	mov	r9,1
800285ba:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
800285be:	ef 48 ff f8 	st.w	r7[-8],r8
    u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1].gain = (fcrystal <  900000) ? AVR32_SCIF_OSCCTRL1_GAIN_G0 :
800285c2:	ee f8 ff ec 	ld.w	r8,r7[-20]
800285c6:	ec 58 bb 9f 	cp.w	r8,899999
800285ca:	e0 88 00 1b 	brls	80028600 <scif_configure_osc_crystalmode+0x10c>
800285ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
800285d2:	e0 69 c6 bf 	mov	r9,50879
800285d6:	ea 19 00 2d 	orh	r9,0x2d
800285da:	12 38       	cp.w	r8,r9
800285dc:	e0 88 00 0f 	brls	800285fa <scif_configure_osc_crystalmode+0x106>
800285e0:	ee f8 ff ec 	ld.w	r8,r7[-20]
800285e4:	e0 69 11 ff 	mov	r9,4607
800285e8:	ea 19 00 7a 	orh	r9,0x7a
800285ec:	12 38       	cp.w	r8,r9
800285ee:	e0 8b 00 04 	brhi	800285f6 <scif_configure_osc_crystalmode+0x102>
800285f2:	30 28       	mov	r8,2
800285f4:	c0 28       	rjmp	800285f8 <scif_configure_osc_crystalmode+0x104>
800285f6:	30 38       	mov	r8,3
800285f8:	c0 28       	rjmp	800285fc <scif_configure_osc_crystalmode+0x108>
800285fa:	30 18       	mov	r8,1
800285fc:	10 99       	mov	r9,r8
800285fe:	c0 28       	rjmp	80028602 <scif_configure_osc_crystalmode+0x10e>
80028600:	30 09       	mov	r9,0
80028602:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028606:	f1 d9 d0 22 	bfins	r8,r9,0x1,0x2
8002860a:	ef 48 ff f8 	st.w	r7[-8],r8
                                                   (fcrystal < 3000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G1 :
                                                   (fcrystal < 8000000) ? AVR32_SCIF_OSCCTRL1_GAIN_G2 :
                                                                          AVR32_SCIF_OSCCTRL1_GAIN_G3;
    AVR32_ENTER_CRITICAL_REGION( );
8002860e:	e1 b8 00 00 	mfsr	r8,0x0
80028612:	10 9c       	mov	r12,r8
80028614:	c1 6e       	rcall	80028240 <cpu_irq_is_enabled_flags>
80028616:	18 98       	mov	r8,r12
80028618:	ef 68 ff ff 	st.b	r7[-1],r8
8002861c:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL1 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4);
8002861e:	fe 78 08 00 	mov	r8,-63488
80028622:	32 89       	mov	r9,40
80028624:	ea 19 aa 00 	orh	r9,0xaa00
80028628:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[SCIF_OSC1] = u_avr32_scif_oscctrl.OSCCTRL[SCIF_OSC1];
8002862a:	fe 78 08 00 	mov	r8,-63488
8002862e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028632:	91 a9       	st.w	r8[0x28],r9
    AVR32_LEAVE_CRITICAL_REGION( );
80028634:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028638:	30 08       	mov	r8,0
8002863a:	f0 09 18 00 	cp.b	r9,r8
8002863e:	c0 20       	breq	80028642 <scif_configure_osc_crystalmode+0x14e>
80028640:	d5 03       	csrf	0x10
  }

  return PASS;
80028642:	30 08       	mov	r8,0
}
80028644:	10 9c       	mov	r12,r8
80028646:	2f bd       	sub	sp,-20
80028648:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002864c:	80 02       	ld.sh	r2,r0[0x0]
8002864e:	83 82       	st.w	r1[0x20],r2

80028650 <scif_configure_osc_extmode>:

long int scif_configure_osc_extmode(scif_osc_t osc)
{
80028650:	eb cd 40 c0 	pushm	r6-r7,lr
80028654:	1a 97       	mov	r7,sp
80028656:	20 4d       	sub	sp,16
80028658:	4a 56       	lddpc	r6,800286ec <scif_configure_osc_extmode+0x9c>
8002865a:	1e 26       	rsub	r6,pc
8002865c:	ef 4c ff f0 	st.w	r7[-16],r12
  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;
  
      // Read Register
    u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;
80028660:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028664:	fe 79 08 00 	mov	r9,-63488
80028668:	ee fa ff f0 	ld.w	r10,r7[-16]
8002866c:	a3 68       	lsl	r8,0x2
8002866e:	ee 08 00 08 	add	r8,r7,r8
80028672:	2f 7a       	sub	r10,-9
80028674:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028678:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify : Configure the oscillator mode to crystal and set the gain according to the
    // cyrstal frequency.
    u_avr32_scif_oscctrl.OSCCTRL[osc].mode = SCIF_OSC_MODE_EXT_CLK;
8002867c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028680:	a3 68       	lsl	r8,0x2
80028682:	ee 08 00 08 	add	r8,r7,r8
80028686:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002868a:	30 0a       	mov	r10,0
8002868c:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028690:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028694:	e1 b8 00 00 	mfsr	r8,0x0
80028698:	10 9c       	mov	r12,r8
8002869a:	fe b0 fd d3 	rcall	80028240 <cpu_irq_is_enabled_flags>
8002869e:	18 98       	mov	r8,r12
800286a0:	ef 68 ff ff 	st.b	r7[-1],r8
800286a4:	d3 03       	ssrf	0x10
    // Unlock the write-protected OSCCTRL0 register
    SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
800286a6:	fe 78 08 00 	mov	r8,-63488
800286aa:	ee f9 ff f0 	ld.w	r9,r7[-16]
800286ae:	2f 79       	sub	r9,-9
800286b0:	a3 69       	lsl	r9,0x2
800286b2:	ea 19 aa 00 	orh	r9,0xaa00
800286b6:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
800286b8:	fe 79 08 00 	mov	r9,-63488
800286bc:	ee fa ff f0 	ld.w	r10,r7[-16]
800286c0:	ee f8 ff f0 	ld.w	r8,r7[-16]
800286c4:	2f 7a       	sub	r10,-9
800286c6:	a3 68       	lsl	r8,0x2
800286c8:	ee 08 00 08 	add	r8,r7,r8
800286cc:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800286d0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
800286d4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800286d8:	30 08       	mov	r8,0
800286da:	f0 09 18 00 	cp.b	r9,r8
800286de:	c0 20       	breq	800286e2 <scif_configure_osc_extmode+0x92>
800286e0:	d5 03       	csrf	0x10

  return PASS;
800286e2:	30 08       	mov	r8,0
}
800286e4:	10 9c       	mov	r12,r8
800286e6:	2f cd       	sub	sp,-16
800286e8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800286ec:	80 02       	ld.sh	r2,r0[0x0]
800286ee:	84 de       	ld.uh	lr,r2[0xa]

800286f0 <scif_enable_osc>:

long int scif_enable_osc(scif_osc_t osc, unsigned int startup, bool wait_for_ready)
{
800286f0:	eb cd 40 c0 	pushm	r6-r7,lr
800286f4:	1a 97       	mov	r7,sp
800286f6:	20 6d       	sub	sp,24
800286f8:	4b 86       	lddpc	r6,800287d8 <scif_enable_osc+0xe8>
800286fa:	1e 26       	rsub	r6,pc
800286fc:	ef 4c ff f0 	st.w	r7[-16],r12
80028700:	ef 4b ff ec 	st.w	r7[-20],r11
80028704:	14 98       	mov	r8,r10
80028706:	ef 68 ff e8 	st.b	r7[-24],r8

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;      
8002870a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002870e:	fe 79 08 00 	mov	r9,-63488
80028712:	ee fa ff f0 	ld.w	r10,r7[-16]
80028716:	a3 68       	lsl	r8,0x2
80028718:	ee 08 00 08 	add	r8,r7,r8
8002871c:	2f 7a       	sub	r10,-9
8002871e:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028722:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify: Configure the oscillator startup and enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].startup = startup;
80028726:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002872a:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002872e:	5c 58       	castu.b	r8
80028730:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80028734:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028738:	f2 08 15 02 	lsl	r8,r9,0x2
8002873c:	ee 08 00 08 	add	r8,r7,r8
80028740:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028744:	f3 da d1 04 	bfins	r9,r10,0x8,0x4
80028748:	f1 49 ff f4 	st.w	r8[-12],r9
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
8002874c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028750:	a3 68       	lsl	r8,0x2
80028752:	ee 08 00 08 	add	r8,r7,r8
80028756:	f0 f9 ff f4 	ld.w	r9,r8[-12]
8002875a:	30 1a       	mov	r10,1
8002875c:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
80028760:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028764:	e1 b8 00 00 	mfsr	r8,0x0
80028768:	10 9c       	mov	r12,r8
8002876a:	fe b0 fd 6b 	rcall	80028240 <cpu_irq_is_enabled_flags>
8002876e:	18 98       	mov	r8,r12
80028770:	ef 68 ff ff 	st.b	r7[-1],r8
80028774:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028776:	fe 78 08 00 	mov	r8,-63488
8002877a:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002877e:	2f 79       	sub	r9,-9
80028780:	a3 69       	lsl	r9,0x2
80028782:	ea 19 aa 00 	orh	r9,0xaa00
80028786:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028788:	fe 79 08 00 	mov	r9,-63488
8002878c:	ee fa ff f0 	ld.w	r10,r7[-16]
80028790:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028794:	2f 7a       	sub	r10,-9
80028796:	a3 68       	lsl	r8,0x2
80028798:	ee 08 00 08 	add	r8,r7,r8
8002879c:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800287a0:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800287a4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800287a8:	30 08       	mov	r8,0
800287aa:	f0 09 18 00 	cp.b	r9,r8
800287ae:	c0 20       	breq	800287b2 <scif_enable_osc+0xc2>
800287b0:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
800287b2:	ef 39 ff e8 	ld.ub	r9,r7[-24]
800287b6:	30 08       	mov	r8,0
800287b8:	f0 09 18 00 	cp.b	r9,r8
800287bc:	c0 90       	breq	800287ce <scif_enable_osc+0xde>
  {
    // Wait until OSC0 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC0RDY_MASK))
800287be:	30 1c       	mov	r12,1
800287c0:	fe b0 fd 50 	rcall	80028260 <scif_pclksr_statushigh_wait>
800287c4:	18 98       	mov	r8,r12
800287c6:	58 08       	cp.w	r8,0
800287c8:	c0 30       	breq	800287ce <scif_enable_osc+0xde>
      return -1;
800287ca:	3f f8       	mov	r8,-1
800287cc:	c0 28       	rjmp	800287d0 <scif_enable_osc+0xe0>
  }
      
  return PASS;
800287ce:	30 08       	mov	r8,0
}
800287d0:	10 9c       	mov	r12,r8
800287d2:	2f ad       	sub	sp,-24
800287d4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800287d8:	80 02       	ld.sh	r2,r0[0x0]
800287da:	85 7e       	st.w	r2[0x1c],lr

800287dc <scif_enable_extosc>:

long int scif_enable_extosc(scif_osc_t osc)
{
800287dc:	eb cd 40 c0 	pushm	r6-r7,lr
800287e0:	1a 97       	mov	r7,sp
800287e2:	20 4d       	sub	sp,16
800287e4:	4a 56       	lddpc	r6,80028878 <scif_enable_extosc+0x9c>
800287e6:	1e 26       	rsub	r6,pc
800287e8:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_oscctrl_t   u_avr32_scif_oscctrl;

  // Read Register
  u_avr32_scif_oscctrl.OSCCTRL[osc] = AVR32_SCIF.OSCCTRL[osc] ;    
800287ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
800287f0:	fe 79 08 00 	mov	r9,-63488
800287f4:	ee fa ff f0 	ld.w	r10,r7[-16]
800287f8:	a3 68       	lsl	r8,0x2
800287fa:	ee 08 00 08 	add	r8,r7,r8
800287fe:	2f 7a       	sub	r10,-9
80028800:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028804:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify : Enable the osc.
  u_avr32_scif_oscctrl.OSCCTRL[osc].oscen = ENABLE;
80028808:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002880c:	a3 68       	lsl	r8,0x2
8002880e:	ee 08 00 08 	add	r8,r7,r8
80028812:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028816:	30 1a       	mov	r10,1
80028818:	f3 da d2 01 	bfins	r9,r10,0x10,0x1
8002881c:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028820:	e1 b8 00 00 	mfsr	r8,0x0
80028824:	10 9c       	mov	r12,r8
80028826:	fe b0 fd 0d 	rcall	80028240 <cpu_irq_is_enabled_flags>
8002882a:	18 98       	mov	r8,r12
8002882c:	ef 68 ff ff 	st.b	r7[-1],r8
80028830:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL0 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL + 4*osc);
80028832:	fe 78 08 00 	mov	r8,-63488
80028836:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002883a:	2f 79       	sub	r9,-9
8002883c:	a3 69       	lsl	r9,0x2
8002883e:	ea 19 aa 00 	orh	r9,0xaa00
80028842:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.OSCCTRL[osc] = u_avr32_scif_oscctrl.OSCCTRL[osc];
80028844:	fe 79 08 00 	mov	r9,-63488
80028848:	ee fa ff f0 	ld.w	r10,r7[-16]
8002884c:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028850:	2f 7a       	sub	r10,-9
80028852:	a3 68       	lsl	r8,0x2
80028854:	ee 08 00 08 	add	r8,r7,r8
80028858:	f0 f8 ff f4 	ld.w	r8,r8[-12]
8002885c:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028860:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028864:	30 08       	mov	r8,0
80028866:	f0 09 18 00 	cp.b	r9,r8
8002886a:	c0 20       	breq	8002886e <scif_enable_extosc+0x92>
8002886c:	d5 03       	csrf	0x10
  
  return PASS;
8002886e:	30 08       	mov	r8,0
}
80028870:	10 9c       	mov	r12,r8
80028872:	2f cd       	sub	sp,-16
80028874:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028878:	80 02       	ld.sh	r2,r0[0x0]
8002887a:	86 6a       	ld.sh	r10,r3[0xc]

8002887c <scif_pll_setup>:

/**
 ** PLL0/PLL1 Functions
 **/
long int scif_pll_setup(scif_pll_t pll, const scif_pll_opt_t opt)
{
8002887c:	eb cd 40 c0 	pushm	r6-r7,lr
80028880:	1a 97       	mov	r7,sp
80028882:	20 4d       	sub	sp,16
80028884:	4d 46       	lddpc	r6,800289d4 <scif_pll_setup+0x158>
80028886:	1e 26       	rsub	r6,pc
80028888:	ee c8 ff f4 	sub	r8,r7,-12
8002888c:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028890:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028894:	fe 7a 08 00 	mov	r10,-63488
80028898:	ee fb ff f0 	ld.w	r11,r7[-16]
8002889c:	a3 69       	lsl	r9,0x2
8002889e:	ee 09 00 09 	add	r9,r7,r9
800288a2:	2f 9b       	sub	r11,-7
800288a4:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
800288a8:	f3 4a ff f4 	st.w	r9[-12],r10
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllosc  = opt.osc;
800288ac:	ee fa ff f0 	ld.w	r10,r7[-16]
800288b0:	f1 39 00 10 	ld.ub	r9,r8[16]
800288b4:	f3 d9 c0 02 	bfextu	r9,r9,0x0,0x2
800288b8:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800288bc:	f4 09 15 02 	lsl	r9,r10,0x2
800288c0:	ee 09 00 09 	add	r9,r7,r9
800288c4:	f2 fa ff f4 	ld.w	r10,r9[-12]
800288c8:	f5 db d0 22 	bfins	r10,r11,0x1,0x2
800288cc:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllopt  = opt.pll_freq | (opt.pll_div2 << 1) | (opt.pll_wbwdisable << 2);
800288d0:	ee fc ff f0 	ld.w	r12,r7[-16]
800288d4:	11 89       	ld.ub	r9,r8[0x0]
800288d6:	12 9a       	mov	r10,r9
800288d8:	11 a9       	ld.ub	r9,r8[0x2]
800288da:	a1 79       	lsl	r9,0x1
800288dc:	5c 59       	castu.b	r9
800288de:	f5 e9 10 09 	or	r9,r10,r9
800288e2:	f5 d9 c0 08 	bfextu	r10,r9,0x0,0x8
800288e6:	11 99       	ld.ub	r9,r8[0x1]
800288e8:	a3 69       	lsl	r9,0x2
800288ea:	5c 59       	castu.b	r9
800288ec:	f5 e9 10 09 	or	r9,r10,r9
800288f0:	5c 59       	castu.b	r9
800288f2:	5c 59       	castu.b	r9
800288f4:	f3 d9 c0 03 	bfextu	r9,r9,0x0,0x3
800288f8:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
800288fc:	f8 09 15 02 	lsl	r9,r12,0x2
80028900:	ee 09 00 09 	add	r9,r7,r9
80028904:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028908:	f5 db d0 63 	bfins	r10,r11,0x3,0x3
8002890c:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].plldiv   = opt.div;
80028910:	ee fa ff f0 	ld.w	r10,r7[-16]
80028914:	70 29       	ld.w	r9,r8[0x8]
80028916:	5c 59       	castu.b	r9
80028918:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
8002891c:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028920:	f4 09 15 02 	lsl	r9,r10,0x2
80028924:	ee 09 00 09 	add	r9,r7,r9
80028928:	f2 fa ff f4 	ld.w	r10,r9[-12]
8002892c:	f5 db d1 04 	bfins	r10,r11,0x8,0x4
80028930:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllmul  = opt.mul;
80028934:	ee fa ff f0 	ld.w	r10,r7[-16]
80028938:	70 19       	ld.w	r9,r8[0x4]
8002893a:	5c 59       	castu.b	r9
8002893c:	f3 d9 c0 04 	bfextu	r9,r9,0x0,0x4
80028940:	f7 d9 c0 08 	bfextu	r11,r9,0x0,0x8
80028944:	f4 09 15 02 	lsl	r9,r10,0x2
80028948:	ee 09 00 09 	add	r9,r7,r9
8002894c:	f2 fa ff f4 	ld.w	r10,r9[-12]
80028950:	f5 db d2 04 	bfins	r10,r11,0x10,0x4
80028954:	f3 4a ff f4 	st.w	r9[-12],r10
  u_avr32_scif_pll.PLL[pll].pllcount= opt.lockcount;
80028958:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002895c:	70 38       	ld.w	r8,r8[0xc]
8002895e:	5c 58       	castu.b	r8
80028960:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
80028964:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
80028968:	f2 08 15 02 	lsl	r8,r9,0x2
8002896c:	ee 08 00 08 	add	r8,r7,r8
80028970:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028974:	f3 da d3 06 	bfins	r9,r10,0x18,0x6
80028978:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
8002897c:	e1 b8 00 00 	mfsr	r8,0x0
80028980:	10 9c       	mov	r12,r8
80028982:	fe b0 fc 5f 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028986:	18 98       	mov	r8,r12
80028988:	ef 68 ff ff 	st.b	r7[-1],r8
8002898c:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
8002898e:	fe 78 08 00 	mov	r8,-63488
80028992:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028996:	2f 99       	sub	r9,-7
80028998:	a3 69       	lsl	r9,0x2
8002899a:	ea 19 aa 00 	orh	r9,0xaa00
8002899e:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
800289a0:	fe 79 08 00 	mov	r9,-63488
800289a4:	ee fa ff f0 	ld.w	r10,r7[-16]
800289a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800289ac:	2f 9a       	sub	r10,-7
800289ae:	a3 68       	lsl	r8,0x2
800289b0:	ee 08 00 08 	add	r8,r7,r8
800289b4:	f0 f8 ff f4 	ld.w	r8,r8[-12]
800289b8:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
800289bc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800289c0:	30 08       	mov	r8,0
800289c2:	f0 09 18 00 	cp.b	r9,r8
800289c6:	c0 20       	breq	800289ca <scif_pll_setup+0x14e>
800289c8:	d5 03       	csrf	0x10

  return PASS;
800289ca:	30 08       	mov	r8,0
}
800289cc:	10 9c       	mov	r12,r8
800289ce:	2f cd       	sub	sp,-16
800289d0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800289d4:	80 02       	ld.sh	r2,r0[0x0]
800289d6:	87 0a       	st.w	r3[0x0],r10

800289d8 <scif_pll_enable>:

long int scif_pll_enable(scif_pll_t pll)
{
800289d8:	eb cd 40 c0 	pushm	r6-r7,lr
800289dc:	1a 97       	mov	r7,sp
800289de:	20 4d       	sub	sp,16
800289e0:	4a 56       	lddpc	r6,80028a74 <scif_pll_enable+0x9c>
800289e2:	1e 26       	rsub	r6,pc
800289e4:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;
  
    // Read Register
    u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
800289e8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800289ec:	fe 79 08 00 	mov	r9,-63488
800289f0:	ee fa ff f0 	ld.w	r10,r7[-16]
800289f4:	a3 68       	lsl	r8,0x2
800289f6:	ee 08 00 08 	add	r8,r7,r8
800289fa:	2f 9a       	sub	r10,-7
800289fc:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028a00:	f1 49 ff f4 	st.w	r8[-12],r9
    // Modify Configuration 
    u_avr32_scif_pll.PLL[pll].pllen = ENABLE;
80028a04:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a08:	a3 68       	lsl	r8,0x2
80028a0a:	ee 08 00 08 	add	r8,r7,r8
80028a0e:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028a12:	30 1a       	mov	r10,1
80028a14:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028a18:	f1 49 ff f4 	st.w	r8[-12],r9
    AVR32_ENTER_CRITICAL_REGION( );
80028a1c:	e1 b8 00 00 	mfsr	r8,0x0
80028a20:	10 9c       	mov	r12,r8
80028a22:	fe b0 fc 0f 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028a26:	18 98       	mov	r8,r12
80028a28:	ef 68 ff ff 	st.b	r7[-1],r8
80028a2c:	d3 03       	ssrf	0x10
    // Unlock the write-protected PLL0 register
    SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028a2e:	fe 78 08 00 	mov	r8,-63488
80028a32:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028a36:	2f 99       	sub	r9,-7
80028a38:	a3 69       	lsl	r9,0x2
80028a3a:	ea 19 aa 00 	orh	r9,0xaa00
80028a3e:	91 69       	st.w	r8[0x18],r9
    // Write Back
    AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028a40:	fe 79 08 00 	mov	r9,-63488
80028a44:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a48:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a4c:	2f 9a       	sub	r10,-7
80028a4e:	a3 68       	lsl	r8,0x2
80028a50:	ee 08 00 08 	add	r8,r7,r8
80028a54:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028a58:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
    AVR32_LEAVE_CRITICAL_REGION( );
80028a5c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028a60:	30 08       	mov	r8,0
80028a62:	f0 09 18 00 	cp.b	r9,r8
80028a66:	c0 20       	breq	80028a6a <scif_pll_enable+0x92>
80028a68:	d5 03       	csrf	0x10
  
  return PASS;
80028a6a:	30 08       	mov	r8,0
}
80028a6c:	10 9c       	mov	r12,r8
80028a6e:	2f cd       	sub	sp,-16
80028a70:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028a74:	80 02       	ld.sh	r2,r0[0x0]
80028a76:	88 66       	ld.sh	r6,r4[0xc]

80028a78 <scif_pll_disable>:

long int scif_pll_disable(scif_pll_t pll)
{
80028a78:	eb cd 40 c0 	pushm	r6-r7,lr
80028a7c:	1a 97       	mov	r7,sp
80028a7e:	20 4d       	sub	sp,16
80028a80:	4a 56       	lddpc	r6,80028b14 <scif_pll_disable+0x9c>
80028a82:	1e 26       	rsub	r6,pc
80028a84:	ef 4c ff f0 	st.w	r7[-16],r12

  u_avr32_scif_pll_t   u_avr32_scif_pll;

  // Read Register
  u_avr32_scif_pll.PLL[pll] = AVR32_SCIF.PLL[pll] ;
80028a88:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028a8c:	fe 79 08 00 	mov	r9,-63488
80028a90:	ee fa ff f0 	ld.w	r10,r7[-16]
80028a94:	a3 68       	lsl	r8,0x2
80028a96:	ee 08 00 08 	add	r8,r7,r8
80028a9a:	2f 9a       	sub	r10,-7
80028a9c:	f2 0a 03 29 	ld.w	r9,r9[r10<<0x2]
80028aa0:	f1 49 ff f4 	st.w	r8[-12],r9
  // Modify Configuration 
  u_avr32_scif_pll.PLL[pll].pllen = DISABLE;
80028aa4:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028aa8:	a3 68       	lsl	r8,0x2
80028aaa:	ee 08 00 08 	add	r8,r7,r8
80028aae:	f0 f9 ff f4 	ld.w	r9,r8[-12]
80028ab2:	30 0a       	mov	r10,0
80028ab4:	f3 da d0 01 	bfins	r9,r10,0x0,0x1
80028ab8:	f1 49 ff f4 	st.w	r8[-12],r9
  AVR32_ENTER_CRITICAL_REGION( );
80028abc:	e1 b8 00 00 	mfsr	r8,0x0
80028ac0:	10 9c       	mov	r12,r8
80028ac2:	fe b0 fb bf 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028ac6:	18 98       	mov	r8,r12
80028ac8:	ef 68 ff ff 	st.b	r7[-1],r8
80028acc:	d3 03       	ssrf	0x10
  // Unlock the write-protected PLL0 register
  SCIF_UNLOCK(AVR32_SCIF_PLL + 4*pll); 
80028ace:	fe 78 08 00 	mov	r8,-63488
80028ad2:	ee f9 ff f0 	ld.w	r9,r7[-16]
80028ad6:	2f 99       	sub	r9,-7
80028ad8:	a3 69       	lsl	r9,0x2
80028ada:	ea 19 aa 00 	orh	r9,0xaa00
80028ade:	91 69       	st.w	r8[0x18],r9
  // Write Back
  AVR32_SCIF.PLL[pll] = u_avr32_scif_pll.PLL[pll];
80028ae0:	fe 79 08 00 	mov	r9,-63488
80028ae4:	ee fa ff f0 	ld.w	r10,r7[-16]
80028ae8:	ee f8 ff f0 	ld.w	r8,r7[-16]
80028aec:	2f 9a       	sub	r10,-7
80028aee:	a3 68       	lsl	r8,0x2
80028af0:	ee 08 00 08 	add	r8,r7,r8
80028af4:	f0 f8 ff f4 	ld.w	r8,r8[-12]
80028af8:	f2 0a 09 28 	st.w	r9[r10<<0x2],r8
  AVR32_LEAVE_CRITICAL_REGION( );
80028afc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028b00:	30 08       	mov	r8,0
80028b02:	f0 09 18 00 	cp.b	r9,r8
80028b06:	c0 20       	breq	80028b0a <scif_pll_disable+0x92>
80028b08:	d5 03       	csrf	0x10

  return PASS;
80028b0a:	30 08       	mov	r8,0
}
80028b0c:	10 9c       	mov	r12,r8
80028b0e:	2f cd       	sub	sp,-16
80028b10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028b14:	80 02       	ld.sh	r2,r0[0x0]
80028b16:	89 06       	st.w	r4[0x0],r6

80028b18 <scif_wait_for_pll_locked>:

long int scif_wait_for_pll_locked(scif_pll_t pll)
{
80028b18:	eb cd 40 80 	pushm	r7,lr
80028b1c:	1a 97       	mov	r7,sp
80028b1e:	20 1d       	sub	sp,4
80028b20:	ef 4c ff fc 	st.w	r7[-4],r12
  
  if (pll == SCIF_PLL0)
80028b24:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028b28:	58 08       	cp.w	r8,0
80028b2a:	c0 81       	brne	80028b3a <scif_wait_for_pll_locked+0x22>
  { 
      // Wait until PLL0 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL0_LOCK_MASK));
80028b2c:	fe 78 08 00 	mov	r8,-63488
80028b30:	70 58       	ld.w	r8,r8[0x14]
80028b32:	e2 18 00 10 	andl	r8,0x10,COH
80028b36:	cf b0       	breq	80028b2c <scif_wait_for_pll_locked+0x14>
80028b38:	c0 78       	rjmp	80028b46 <scif_wait_for_pll_locked+0x2e>
  }
  else
  {
      // Wait until PLL1 is stable and ready to be used.
      while(!(AVR32_SCIF.pclksr & AVR32_SCIF_PCLKSR_PLL1_LOCK_MASK));
80028b3a:	fe 78 08 00 	mov	r8,-63488
80028b3e:	70 58       	ld.w	r8,r8[0x14]
80028b40:	e2 18 00 20 	andl	r8,0x20,COH
80028b44:	cf b0       	breq	80028b3a <scif_wait_for_pll_locked+0x22>
  }
  
  return PASS;
80028b46:	30 08       	mov	r8,0
}
80028b48:	10 9c       	mov	r12,r8
80028b4a:	2f fd       	sub	sp,-4
80028b4c:	e3 cd 80 80 	ldm	sp++,r7,pc

80028b50 <scif_start_osc32>:
/**
 ** OSC32 Functions
 **/

long int scif_start_osc32(const scif_osc32_opt_t *opt, bool wait_for_ready)
{
80028b50:	eb cd 40 c0 	pushm	r6-r7,lr
80028b54:	1a 97       	mov	r7,sp
80028b56:	20 4d       	sub	sp,16
80028b58:	4a f6       	lddpc	r6,80028c14 <scif_start_osc32+0xc4>
80028b5a:	1e 26       	rsub	r6,pc
80028b5c:	ef 4c ff f4 	st.w	r7[-12],r12
80028b60:	16 98       	mov	r8,r11
80028b62:	ef 68 ff f0 	st.b	r7[-16],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Read Register
  u_avr32_scif_oscctrl32.oscctrl32 = AVR32_SCIF.oscctrl32 ;  
80028b66:	fe 78 08 00 	mov	r8,-63488
80028b6a:	71 38       	ld.w	r8,r8[0x4c]
80028b6c:	ef 48 ff f8 	st.w	r7[-8],r8
  
  // Modify : Configure & start OSC32.
  u_avr32_scif_oscctrl32.OSCCTRL32.mode = opt->mode;
80028b70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028b74:	70 18       	ld.w	r8,r8[0x4]
80028b76:	5c 58       	castu.b	r8
80028b78:	f1 d8 c0 02 	bfextu	r8,r8,0x0,0x2
80028b7c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028b80:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028b84:	f1 d9 d1 02 	bfins	r8,r9,0x8,0x2
80028b88:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.startup = opt->startup;
80028b8c:	ee f8 ff f4 	ld.w	r8,r7[-12]
80028b90:	f1 38 00 08 	ld.ub	r8,r8[8]
80028b94:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
80028b98:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80028b9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028ba0:	f1 d9 d2 03 	bfins	r8,r9,0x10,0x3
80028ba4:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_scif_oscctrl32.OSCCTRL32.osc32en = ENABLE;
80028ba8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028bac:	30 19       	mov	r9,1
80028bae:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80028bb2:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
80028bb6:	e1 b8 00 00 	mfsr	r8,0x0
80028bba:	10 9c       	mov	r12,r8
80028bbc:	fe b0 fb 42 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028bc0:	18 98       	mov	r8,r12
80028bc2:	ef 68 ff ff 	st.b	r7[-1],r8
80028bc6:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80028bc8:	fe 78 08 00 	mov	r8,-63488
80028bcc:	34 c9       	mov	r9,76
80028bce:	ea 19 aa 00 	orh	r9,0xaa00
80028bd2:	91 69       	st.w	r8[0x18],r9
  
  // Write Back
  AVR32_SCIF.oscctrl32 = u_avr32_scif_oscctrl32.oscctrl32;
80028bd4:	fe 78 08 00 	mov	r8,-63488
80028bd8:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028bdc:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028be0:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028be4:	30 08       	mov	r8,0
80028be6:	f0 09 18 00 	cp.b	r9,r8
80028bea:	c0 20       	breq	80028bee <scif_start_osc32+0x9e>
80028bec:	d5 03       	csrf	0x10

  if(true == wait_for_ready)
80028bee:	ef 39 ff f0 	ld.ub	r9,r7[-16]
80028bf2:	30 08       	mov	r8,0
80028bf4:	f0 09 18 00 	cp.b	r9,r8
80028bf8:	c0 90       	breq	80028c0a <scif_start_osc32+0xba>
  {
    // Wait until OSC32 is stable and ready to be used.
    if(scif_pclksr_statushigh_wait(AVR32_SCIF_PCLKSR_OSC32RDY_MASK))
80028bfa:	30 4c       	mov	r12,4
80028bfc:	fe b0 fb 32 	rcall	80028260 <scif_pclksr_statushigh_wait>
80028c00:	18 98       	mov	r8,r12
80028c02:	58 08       	cp.w	r8,0
80028c04:	c0 30       	breq	80028c0a <scif_start_osc32+0xba>
      return -1;
80028c06:	3f f8       	mov	r8,-1
80028c08:	c0 28       	rjmp	80028c0c <scif_start_osc32+0xbc>
  }
  
  return PASS;
80028c0a:	30 08       	mov	r8,0
}
80028c0c:	10 9c       	mov	r12,r8
80028c0e:	2f cd       	sub	sp,-16
80028c10:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c14:	80 02       	ld.sh	r2,r0[0x0]
80028c16:	89 de       	st.w	r4[0x34],lr

80028c18 <scif_stop_osc32>:


long scif_stop_osc32()
{
80028c18:	eb cd 40 c0 	pushm	r6-r7,lr
80028c1c:	1a 97       	mov	r7,sp
80028c1e:	20 2d       	sub	sp,8
80028c20:	49 76       	lddpc	r6,80028c7c <scif_stop_osc32+0x64>
80028c22:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.oscctrl32;
80028c24:	fe 78 08 00 	mov	r8,-63488
80028c28:	71 38       	ld.w	r8,r8[0x4c]
80028c2a:	ef 48 ff f8 	st.w	r7[-8],r8
  temp &= ~AVR32_SCIF_OSCCTRL32_OSC32EN_MASK;
80028c2e:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028c32:	a1 c8       	cbr	r8,0x0
80028c34:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80028c38:	e1 b8 00 00 	mfsr	r8,0x0
80028c3c:	10 9c       	mov	r12,r8
80028c3e:	fe b0 fb 01 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028c42:	18 98       	mov	r8,r12
80028c44:	ef 68 ff ff 	st.b	r7[-1],r8
80028c48:	d3 03       	ssrf	0x10
  // Unlock the write-protected OSCCTRL32 register
  SCIF_UNLOCK(AVR32_SCIF_OSCCTRL32);
80028c4a:	fe 78 08 00 	mov	r8,-63488
80028c4e:	34 c9       	mov	r9,76
80028c50:	ea 19 aa 00 	orh	r9,0xaa00
80028c54:	91 69       	st.w	r8[0x18],r9
  
  // Stop OSC32.
  AVR32_SCIF.oscctrl32 = temp;
80028c56:	fe 78 08 00 	mov	r8,-63488
80028c5a:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028c5e:	f1 49 00 4c 	st.w	r8[76],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028c62:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028c66:	30 08       	mov	r8,0
80028c68:	f0 09 18 00 	cp.b	r9,r8
80028c6c:	c0 20       	breq	80028c70 <scif_stop_osc32+0x58>
80028c6e:	d5 03       	csrf	0x10

  return PASS;
80028c70:	30 08       	mov	r8,0
}
80028c72:	10 9c       	mov	r12,r8
80028c74:	2f ed       	sub	sp,-8
80028c76:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028c7a:	00 00       	add	r0,r0
80028c7c:	80 02       	ld.sh	r2,r0[0x0]
80028c7e:	8a a6       	ld.uh	r6,r5[0x4]

80028c80 <scif_start_rc8M>:
/**
 ** 8MHz RCosc Functions
 **/

void scif_start_rc8M(void)
{
80028c80:	eb cd 40 c0 	pushm	r6-r7,lr
80028c84:	1a 97       	mov	r7,sp
80028c86:	20 2d       	sub	sp,8
80028c88:	49 66       	lddpc	r6,80028ce0 <scif_start_rc8M+0x60>
80028c8a:	1e 26       	rsub	r6,pc
  unsigned int* calibration_bits = (unsigned int*)0x80800200;
80028c8c:	e0 68 02 00 	mov	r8,512
80028c90:	ea 18 80 80 	orh	r8,0x8080
80028c94:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_ENTER_CRITICAL_REGION( );
80028c98:	e1 b8 00 00 	mfsr	r8,0x0
80028c9c:	10 9c       	mov	r12,r8
80028c9e:	fe b0 fa d1 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028ca2:	18 98       	mov	r8,r12
80028ca4:	ef 68 ff ff 	st.b	r7[-1],r8
80028ca8:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80028caa:	fe 78 08 00 	mov	r8,-63488
80028cae:	34 89       	mov	r9,72
80028cb0:	ea 19 aa 00 	orh	r9,0xaa00
80028cb4:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rccr8 = AVR32_SCIF_RCCR8_RCOSC8_EN_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
80028cb6:	fe 78 08 00 	mov	r8,-63488
80028cba:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028cbe:	72 09       	ld.w	r9,r9[0x0]
80028cc0:	f3 d9 c0 08 	bfextu	r9,r9,0x0,0x8
80028cc4:	b9 a9       	sbr	r9,0x18
80028cc6:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028cca:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028cce:	30 08       	mov	r8,0
80028cd0:	f0 09 18 00 	cp.b	r9,r8
80028cd4:	c0 20       	breq	80028cd8 <scif_start_rc8M+0x58>
80028cd6:	d5 03       	csrf	0x10
}
80028cd8:	2f ed       	sub	sp,-8
80028cda:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028cde:	00 00       	add	r0,r0
80028ce0:	80 02       	ld.sh	r2,r0[0x0]
80028ce2:	8b 0e       	st.w	r5[0x0],lr

80028ce4 <scif_stop_rc8M>:

void scif_stop_rc8M(void)
{
80028ce4:	eb cd 40 c0 	pushm	r6-r7,lr
80028ce8:	1a 97       	mov	r7,sp
80028cea:	20 2d       	sub	sp,8
80028cec:	49 66       	lddpc	r6,80028d44 <scif_stop_rc8M+0x60>
80028cee:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rccr8;
80028cf0:	fe 78 08 00 	mov	r8,-63488
80028cf4:	71 28       	ld.w	r8,r8[0x48]
80028cf6:	ef 48 ff f8 	st.w	r7[-8],r8
  
  AVR32_ENTER_CRITICAL_REGION( );
80028cfa:	e1 b8 00 00 	mfsr	r8,0x0
80028cfe:	10 9c       	mov	r12,r8
80028d00:	fe b0 fa a0 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028d04:	18 98       	mov	r8,r12
80028d06:	ef 68 ff ff 	st.b	r7[-1],r8
80028d0a:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC8MCR register
  SCIF_UNLOCK(AVR32_SCIF_RCCR8);
80028d0c:	fe 78 08 00 	mov	r8,-63488
80028d10:	34 89       	mov	r9,72
80028d12:	ea 19 aa 00 	orh	r9,0xaa00
80028d16:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RCCR8_RCOSC8_EN_MASK;
80028d18:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028d1c:	b9 c8       	cbr	r8,0x18
80028d1e:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rccr8 = temp;
80028d22:	fe 78 08 00 	mov	r8,-63488
80028d26:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028d2a:	f1 49 00 48 	st.w	r8[72],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028d2e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d32:	30 08       	mov	r8,0
80028d34:	f0 09 18 00 	cp.b	r9,r8
80028d38:	c0 20       	breq	80028d3c <scif_stop_rc8M+0x58>
80028d3a:	d5 03       	csrf	0x10
}
80028d3c:	2f ed       	sub	sp,-8
80028d3e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d42:	00 00       	add	r0,r0
80028d44:	80 02       	ld.sh	r2,r0[0x0]
80028d46:	8b 72       	st.w	r5[0x1c],r2

80028d48 <scif_start_rc120M>:
/**
 ** 120MHz RCosc Functions
 **/

void scif_start_rc120M(void)
{
80028d48:	eb cd 40 c0 	pushm	r6-r7,lr
80028d4c:	1a 97       	mov	r7,sp
80028d4e:	20 1d       	sub	sp,4
80028d50:	49 06       	lddpc	r6,80028d90 <scif_start_rc120M+0x48>
80028d52:	1e 26       	rsub	r6,pc
  AVR32_ENTER_CRITICAL_REGION( );
80028d54:	e1 b8 00 00 	mfsr	r8,0x0
80028d58:	10 9c       	mov	r12,r8
80028d5a:	fe b0 fa 73 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028d5e:	18 98       	mov	r8,r12
80028d60:	ef 68 ff ff 	st.b	r7[-1],r8
80028d64:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80028d66:	fe 78 08 00 	mov	r8,-63488
80028d6a:	35 89       	mov	r9,88
80028d6c:	ea 19 aa 00 	orh	r9,0xaa00
80028d70:	91 69       	st.w	r8[0x18],r9
  AVR32_SCIF.rc120mcr = AVR32_SCIF_RC120MCR_EN_MASK;
80028d72:	fe 78 08 00 	mov	r8,-63488
80028d76:	30 19       	mov	r9,1
80028d78:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028d7c:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028d80:	30 08       	mov	r8,0
80028d82:	f0 09 18 00 	cp.b	r9,r8
80028d86:	c0 20       	breq	80028d8a <scif_start_rc120M+0x42>
80028d88:	d5 03       	csrf	0x10
}
80028d8a:	2f fd       	sub	sp,-4
80028d8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028d90:	80 02       	ld.sh	r2,r0[0x0]
80028d92:	8b d6       	st.w	r5[0x34],r6

80028d94 <scif_stop_rc120M>:

void scif_stop_rc120M(void)
{
80028d94:	eb cd 40 c0 	pushm	r6-r7,lr
80028d98:	1a 97       	mov	r7,sp
80028d9a:	20 2d       	sub	sp,8
80028d9c:	49 66       	lddpc	r6,80028df4 <scif_stop_rc120M+0x60>
80028d9e:	1e 26       	rsub	r6,pc
  unsigned long temp = AVR32_SCIF.rc120mcr;
80028da0:	fe 78 08 00 	mov	r8,-63488
80028da4:	71 68       	ld.w	r8,r8[0x58]
80028da6:	ef 48 ff f8 	st.w	r7[-8],r8

  AVR32_ENTER_CRITICAL_REGION( );
80028daa:	e1 b8 00 00 	mfsr	r8,0x0
80028dae:	10 9c       	mov	r12,r8
80028db0:	fe b0 fa 48 	rcall	80028240 <cpu_irq_is_enabled_flags>
80028db4:	18 98       	mov	r8,r12
80028db6:	ef 68 ff ff 	st.b	r7[-1],r8
80028dba:	d3 03       	ssrf	0x10
  // Unlock the write-protected RC120MCR register
  SCIF_UNLOCK(AVR32_SCIF_RC120MCR);
80028dbc:	fe 78 08 00 	mov	r8,-63488
80028dc0:	35 89       	mov	r9,88
80028dc2:	ea 19 aa 00 	orh	r9,0xaa00
80028dc6:	91 69       	st.w	r8[0x18],r9
  temp &= ~AVR32_SCIF_RC120MCR_EN_MASK;
80028dc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80028dcc:	a1 c8       	cbr	r8,0x0
80028dce:	ef 48 ff f8 	st.w	r7[-8],r8
  AVR32_SCIF.rc120mcr = temp;
80028dd2:	fe 78 08 00 	mov	r8,-63488
80028dd6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028dda:	f1 49 00 58 	st.w	r8[88],r9
  AVR32_LEAVE_CRITICAL_REGION( );
80028dde:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80028de2:	30 08       	mov	r8,0
80028de4:	f0 09 18 00 	cp.b	r9,r8
80028de8:	c0 20       	breq	80028dec <scif_stop_rc120M+0x58>
80028dea:	d5 03       	csrf	0x10
}
80028dec:	2f ed       	sub	sp,-8
80028dee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028df2:	00 00       	add	r0,r0
80028df4:	80 02       	ld.sh	r2,r0[0x0]
80028df6:	8c 22       	ld.sh	r2,r6[0x4]

80028df8 <scif_start_gclk>:
/**
 ** Generic Clock Functions
 **/

long int scif_start_gclk(unsigned int gclk, const scif_gclk_opt_t *opt)
{
80028df8:	eb cd 40 80 	pushm	r7,lr
80028dfc:	1a 97       	mov	r7,sp
80028dfe:	20 2d       	sub	sp,8
80028e00:	ef 4c ff fc 	st.w	r7[-4],r12
80028e04:	ef 4b ff f8 	st.w	r7[-8],r11
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80028e08:	fe 78 08 00 	mov	r8,-63488
80028e0c:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028e10:	2e 79       	sub	r9,-25
80028e12:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028e16:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028e1a:	5c 58       	castu.b	r8
80028e1c:	c0 30       	breq	80028e22 <scif_start_gclk+0x2a>
    return -1;
80028e1e:	3f f8       	mov	r8,-1
80028e20:	c2 08       	rjmp	80028e60 <scif_start_gclk+0x68>

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80028e22:	fe 78 08 00 	mov	r8,-63488
80028e26:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028e2a:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e2e:	74 1a       	ld.w	r10,r10[0x4]
80028e30:	b1 6a       	lsl	r10,0x10
80028e32:	14 9b       	mov	r11,r10
80028e34:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80028e38:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e3c:	74 2a       	ld.w	r10,r10[0x8]
80028e3e:	a1 7a       	lsl	r10,0x1
80028e40:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
80028e44:	14 4b       	or	r11,r10
80028e46:	ee fa ff f8 	ld.w	r10,r7[-8]
80028e4a:	74 0a       	ld.w	r10,r10[0x0]
80028e4c:	a9 6a       	lsl	r10,0x8
80028e4e:	e2 1a 0f 00 	andl	r10,0xf00,COH
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);
80028e52:	f7 ea 10 0a 	or	r10,r11,r10
  // If the generic clock is already enabled, return an error.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
    return -1;

  // Configure & start the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((opt->divider << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80028e56:	a1 aa       	sbr	r10,0x0
80028e58:	2e 79       	sub	r9,-25
80028e5a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((opt->diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((opt->clock_source << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK)
                            |(AVR32_SCIF_GCCTRL_CEN_MASK);

  return PASS;
80028e5e:	30 08       	mov	r8,0
}
80028e60:	10 9c       	mov	r12,r8
80028e62:	2f ed       	sub	sp,-8
80028e64:	e3 cd 80 80 	ldm	sp++,r7,pc

80028e68 <scif_stop_gclk>:


long int scif_stop_gclk(unsigned int gclk)
{
80028e68:	eb cd 40 80 	pushm	r7,lr
80028e6c:	1a 97       	mov	r7,sp
80028e6e:	20 2d       	sub	sp,8
80028e70:	ef 4c ff f8 	st.w	r7[-8],r12
  unsigned int  timeout = SCIF_POLL_TIMEOUT;
80028e74:	e0 78 86 a0 	mov	r8,100000
80028e78:	ef 48 ff fc 	st.w	r7[-4],r8
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
80028e7c:	fe 78 08 00 	mov	r8,-63488
80028e80:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028e84:	fe 7a 08 00 	mov	r10,-63488
80028e88:	ee fb ff f8 	ld.w	r11,r7[-8]
80028e8c:	2e 7b       	sub	r11,-25
80028e8e:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028e92:	a1 ca       	cbr	r10,0x0
80028e94:	2e 79       	sub	r9,-25
80028e96:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80028e9a:	c0 c8       	rjmp	80028eb2 <scif_stop_gclk+0x4a>
  {
    if(--timeout == 0)
80028e9c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028ea0:	20 18       	sub	r8,1
80028ea2:	ef 48 ff fc 	st.w	r7[-4],r8
80028ea6:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028eaa:	58 08       	cp.w	r8,0
80028eac:	c0 31       	brne	80028eb2 <scif_stop_gclk+0x4a>
      return -1;
80028eae:	3f f8       	mov	r8,-1
80028eb0:	c0 d8       	rjmp	80028eca <scif_stop_gclk+0x62>

  // Stop the generic clock.
  AVR32_SCIF.gcctrl[gclk] &= ~AVR32_SCIF_GCCTRL_CEN_MASK;
  
  // Wait until the generic clock is actually stopped.
  while(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80028eb2:	fe 78 08 00 	mov	r8,-63488
80028eb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028eba:	2e 79       	sub	r9,-25
80028ebc:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028ec0:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028ec4:	5c 58       	castu.b	r8
80028ec6:	ce b1       	brne	80028e9c <scif_stop_gclk+0x34>
  {
    if(--timeout == 0)
      return -1;
  }
  
  return PASS;
80028ec8:	30 08       	mov	r8,0
}
80028eca:	10 9c       	mov	r12,r8
80028ecc:	2f ed       	sub	sp,-8
80028ece:	e3 cd 80 80 	ldm	sp++,r7,pc

80028ed2 <scif_gc_setup>:


long int scif_gc_setup(unsigned int gclk, scif_gcctrl_oscsel_t clk_src, unsigned int diven, unsigned int divfactor)
{
80028ed2:	eb cd 40 c0 	pushm	r6-r7,lr
80028ed6:	1a 97       	mov	r7,sp
80028ed8:	20 5d       	sub	sp,20
80028eda:	4a f6       	lddpc	r6,80028f94 <scif_gc_setup+0xc2>
80028edc:	1e 26       	rsub	r6,pc
80028ede:	ef 4c ff f8 	st.w	r7[-8],r12
80028ee2:	ef 4b ff f4 	st.w	r7[-12],r11
80028ee6:	ef 4a ff f0 	st.w	r7[-16],r10
80028eea:	ef 49 ff ec 	st.w	r7[-20],r9
  int restart_gc = false;
80028eee:	30 08       	mov	r8,0
80028ef0:	ef 48 ff fc 	st.w	r7[-4],r8
  
  
  // Change the division factor to conform to the equation: fgclk = fsrc/divfactor = fsrc/(2*(div+1))
  divfactor = (divfactor>>1) -1;
80028ef4:	ee f8 ff ec 	ld.w	r8,r7[-20]
80028ef8:	a1 98       	lsr	r8,0x1
80028efa:	20 18       	sub	r8,1
80028efc:	ef 48 ff ec 	st.w	r7[-20],r8
      return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, disable it before changing its setup.
  if(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK)
80028f00:	fe 78 08 00 	mov	r8,-63488
80028f04:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f08:	2e 79       	sub	r9,-25
80028f0a:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028f0e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028f12:	5c 58       	castu.b	r8
80028f14:	c0 d0       	breq	80028f2e <scif_gc_setup+0x5c>
  {
    restart_gc = true;
80028f16:	30 18       	mov	r8,1
80028f18:	ef 48 ff fc 	st.w	r7[-4],r8
    if(scif_stop_gclk(gclk) < 0)
80028f1c:	ee fc ff f8 	ld.w	r12,r7[-8]
80028f20:	f0 16 02 22 	mcall	r6[2184]
80028f24:	18 98       	mov	r8,r12
80028f26:	58 08       	cp.w	r8,0
80028f28:	c0 34       	brge	80028f2e <scif_gc_setup+0x5c>
      return -1;  // Could not stop the generic clock.
80028f2a:	3f f8       	mov	r8,-1
80028f2c:	c2 f8       	rjmp	80028f8a <scif_gc_setup+0xb8>
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80028f2e:	fe 78 08 00 	mov	r8,-63488
80028f32:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f36:	ee fa ff ec 	ld.w	r10,r7[-20]
80028f3a:	b1 6a       	lsl	r10,0x10
80028f3c:	14 9b       	mov	r11,r10
80028f3e:	e6 1b 00 ff 	andh	r11,0xff,COH
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
80028f42:	ee fa ff f0 	ld.w	r10,r7[-16]
80028f46:	a1 7a       	lsl	r10,0x1
80028f48:	e2 1a 00 02 	andl	r10,0x2,COH
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
80028f4c:	14 4b       	or	r11,r10
80028f4e:	ee fa ff f4 	ld.w	r10,r7[-12]
80028f52:	a9 6a       	lsl	r10,0x8
80028f54:	e2 1a 0f 00 	andl	r10,0xf00,COH
    if(scif_stop_gclk(gclk) < 0)
      return -1;  // Could not stop the generic clock.
  }

  // Setup the generic clock.
  AVR32_SCIF.gcctrl[gclk] = ((divfactor << AVR32_SCIF_GCCTRL_DIV_OFFSET)&AVR32_SCIF_GCCTRL_DIV_MASK)
80028f58:	f7 ea 10 0a 	or	r10,r11,r10
80028f5c:	2e 79       	sub	r9,-25
80028f5e:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
                            |((diven << AVR32_SCIF_GCCTRL_DIVEN_OFFSET)&AVR32_SCIF_GCCTRL_DIVEN_MASK)
                            |((clk_src << AVR32_SCIF_GCCTRL_OSCSEL_OFFSET)&AVR32_SCIF_GCCTRL_OSCSEL_MASK);
                            
  // Restart the gc if it previously was enabled.
  if(true == restart_gc)
80028f62:	ee f8 ff fc 	ld.w	r8,r7[-4]
80028f66:	58 18       	cp.w	r8,1
80028f68:	c1 01       	brne	80028f88 <scif_gc_setup+0xb6>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK ;
80028f6a:	fe 78 08 00 	mov	r8,-63488
80028f6e:	ee f9 ff f8 	ld.w	r9,r7[-8]
80028f72:	fe 7a 08 00 	mov	r10,-63488
80028f76:	ee fb ff f8 	ld.w	r11,r7[-8]
80028f7a:	2e 7b       	sub	r11,-25
80028f7c:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028f80:	a1 aa       	sbr	r10,0x0
80028f82:	2e 79       	sub	r9,-25
80028f84:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10

  return PASS;
80028f88:	30 08       	mov	r8,0
}
80028f8a:	10 9c       	mov	r12,r8
80028f8c:	2f bd       	sub	sp,-20
80028f8e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80028f92:	00 00       	add	r0,r0
80028f94:	80 02       	ld.sh	r2,r0[0x0]
80028f96:	8d 60       	st.w	r6[0x18],r0

80028f98 <scif_gc_enable>:


long int scif_gc_enable(unsigned int gclk)
{
80028f98:	eb cd 40 80 	pushm	r7,lr
80028f9c:	1a 97       	mov	r7,sp
80028f9e:	20 1d       	sub	sp,4
80028fa0:	ef 4c ff fc 	st.w	r7[-4],r12
    return -1;
  }
#endif  // AVR32SFW_INPUT_CHECK

  // If the generic clock is already enabled, do nothing.
  if(!(AVR32_SCIF.gcctrl[gclk] & AVR32_SCIF_GCCTRL_CEN_MASK))
80028fa4:	fe 78 08 00 	mov	r8,-63488
80028fa8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028fac:	2e 79       	sub	r9,-25
80028fae:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
80028fb2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80028fb6:	c1 01       	brne	80028fd6 <scif_gc_enable+0x3e>
    AVR32_SCIF.gcctrl[gclk] |= AVR32_SCIF_GCCTRL_CEN_MASK;
80028fb8:	fe 78 08 00 	mov	r8,-63488
80028fbc:	ee f9 ff fc 	ld.w	r9,r7[-4]
80028fc0:	fe 7a 08 00 	mov	r10,-63488
80028fc4:	ee fb ff fc 	ld.w	r11,r7[-4]
80028fc8:	2e 7b       	sub	r11,-25
80028fca:	f4 0b 03 2a 	ld.w	r10,r10[r11<<0x2]
80028fce:	a1 aa       	sbr	r10,0x0
80028fd0:	2e 79       	sub	r9,-25
80028fd2:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
    
  return PASS;
80028fd6:	30 08       	mov	r8,0

}
80028fd8:	10 9c       	mov	r12,r8
80028fda:	2f fd       	sub	sp,-4
80028fdc:	e3 cd 80 80 	ldm	sp++,r7,pc

80028fe0 <scif_bod18_enable_irq>:

void scif_bod18_enable_irq(void)
{
80028fe0:	eb cd 40 80 	pushm	r7,lr
80028fe4:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BODDET_MASK ;
80028fe6:	fe 78 08 00 	mov	r8,-63488
80028fea:	34 09       	mov	r9,64
80028fec:	91 09       	st.w	r8[0x0],r9
}
80028fee:	e3 cd 80 80 	ldm	sp++,r7,pc

80028ff2 <scif_bod18_disable_irq>:

void scif_bod18_disable_irq(void)
{
80028ff2:	eb cd 40 c0 	pushm	r6-r7,lr
80028ff6:	1a 97       	mov	r7,sp
80028ff8:	20 1d       	sub	sp,4
80028ffa:	49 26       	lddpc	r6,80029040 <scif_bod18_disable_irq+0x4e>
80028ffc:	1e 26       	rsub	r6,pc
  bool global_interrupt_enabled = Is_global_interrupt_enabled();
80028ffe:	e1 b8 00 00 	mfsr	r8,0x0
80029002:	10 9c       	mov	r12,r8
80029004:	fe b0 f9 1e 	rcall	80028240 <cpu_irq_is_enabled_flags>
80029008:	18 98       	mov	r8,r12
8002900a:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8002900e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029012:	30 08       	mov	r8,0
80029014:	f0 09 18 00 	cp.b	r9,r8
80029018:	c0 20       	breq	8002901c <scif_bod18_disable_irq+0x2a>
8002901a:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BODDET_MASK;
8002901c:	fe 78 08 00 	mov	r8,-63488
80029020:	34 09       	mov	r9,64
80029022:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
80029024:	fe 78 08 00 	mov	r8,-63488
80029028:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
8002902a:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002902e:	30 08       	mov	r8,0
80029030:	f0 09 18 00 	cp.b	r9,r8
80029034:	c0 20       	breq	80029038 <scif_bod18_disable_irq+0x46>
80029036:	d5 03       	csrf	0x10
}
80029038:	2f fd       	sub	sp,-4
8002903a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002903e:	00 00       	add	r0,r0
80029040:	80 02       	ld.sh	r2,r0[0x0]
80029042:	8e 80       	ld.uh	r0,r7[0x0]

80029044 <scif_bod18_clear_irq>:

void scif_bod18_clear_irq(void)
{
80029044:	eb cd 40 80 	pushm	r7,lr
80029048:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BODDET_MASK;
8002904a:	fe 78 08 00 	mov	r8,-63488
8002904e:	34 09       	mov	r9,64
80029050:	91 49       	st.w	r8[0x10],r9
}
80029052:	e3 cd 80 80 	ldm	sp++,r7,pc

80029056 <scif_bod18_get_irq_status>:

unsigned long scif_bod18_get_irq_status(void)
{
80029056:	eb cd 40 80 	pushm	r7,lr
8002905a:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BODDET_MASK) != 0);
8002905c:	fe 78 08 00 	mov	r8,-63488
80029060:	70 38       	ld.w	r8,r8[0xc]
80029062:	e2 18 00 40 	andl	r8,0x40,COH
80029066:	5f 18       	srne	r8
}
80029068:	10 9c       	mov	r12,r8
8002906a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002906e <scif_bod18_get_irq_enable_bit>:

unsigned long scif_bod18_get_irq_enable_bit(void)
{
8002906e:	eb cd 40 80 	pushm	r7,lr
80029072:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BODDET_MASK) != 0);
80029074:	fe 78 08 00 	mov	r8,-63488
80029078:	70 28       	ld.w	r8,r8[0x8]
8002907a:	e2 18 00 40 	andl	r8,0x40,COH
8002907e:	5f 18       	srne	r8
}
80029080:	10 9c       	mov	r12,r8
80029082:	e3 cd 80 80 	ldm	sp++,r7,pc

80029086 <scif_bod18_get_level>:

unsigned long scif_bod18_get_level(void)
{
80029086:	eb cd 40 80 	pushm	r7,lr
8002908a:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod & AVR32_SCIF_BOD_LEVEL_MASK) >> AVR32_SCIF_BOD_LEVEL_OFFSET;
8002908c:	fe 78 08 00 	mov	r8,-63488
80029090:	70 b8       	ld.w	r8,r8[0x2c]
80029092:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029096:	10 9c       	mov	r12,r8
80029098:	e3 cd 80 80 	ldm	sp++,r7,pc

8002909c <scif_bod33_enable_irq>:

void scif_bod33_enable_irq(void)
{
8002909c:	eb cd 40 80 	pushm	r7,lr
800290a0:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD33DET_MASK ;
800290a2:	fe 78 08 00 	mov	r8,-63488
800290a6:	e0 69 00 80 	mov	r9,128
800290aa:	91 09       	st.w	r8[0x0],r9
}
800290ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800290b0 <scif_bod33_disable_irq>:

void scif_bod33_disable_irq(void)
{
800290b0:	eb cd 40 c0 	pushm	r6-r7,lr
800290b4:	1a 97       	mov	r7,sp
800290b6:	20 1d       	sub	sp,4
800290b8:	49 26       	lddpc	r6,80029100 <scif_bod33_disable_irq+0x50>
800290ba:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
800290bc:	e1 b8 00 00 	mfsr	r8,0x0
800290c0:	10 9c       	mov	r12,r8
800290c2:	fe b0 f8 bf 	rcall	80028240 <cpu_irq_is_enabled_flags>
800290c6:	18 98       	mov	r8,r12
800290c8:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
800290cc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290d0:	30 08       	mov	r8,0
800290d2:	f0 09 18 00 	cp.b	r9,r8
800290d6:	c0 20       	breq	800290da <scif_bod33_disable_irq+0x2a>
800290d8:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD33DET_MASK;
800290da:	fe 78 08 00 	mov	r8,-63488
800290de:	e0 69 00 80 	mov	r9,128
800290e2:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800290e4:	fe 78 08 00 	mov	r8,-63488
800290e8:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800290ea:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800290ee:	30 08       	mov	r8,0
800290f0:	f0 09 18 00 	cp.b	r9,r8
800290f4:	c0 20       	breq	800290f8 <scif_bod33_disable_irq+0x48>
800290f6:	d5 03       	csrf	0x10
}
800290f8:	2f fd       	sub	sp,-4
800290fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800290fe:	00 00       	add	r0,r0
80029100:	80 02       	ld.sh	r2,r0[0x0]
80029102:	8f 3e       	st.w	r7[0xc],lr

80029104 <scif_bod33_clear_irq>:
 
void scif_bod33_clear_irq(void)
{
80029104:	eb cd 40 80 	pushm	r7,lr
80029108:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD33DET_MASK;
8002910a:	fe 78 08 00 	mov	r8,-63488
8002910e:	e0 69 00 80 	mov	r9,128
80029112:	91 49       	st.w	r8[0x10],r9
}
80029114:	e3 cd 80 80 	ldm	sp++,r7,pc

80029118 <scif_bod33_get_irq_status>:
 
unsigned long scif_bod33_get_irq_status(void)
{
80029118:	eb cd 40 80 	pushm	r7,lr
8002911c:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD33DET_MASK) != 0);
8002911e:	fe 78 08 00 	mov	r8,-63488
80029122:	70 38       	ld.w	r8,r8[0xc]
80029124:	e2 18 00 80 	andl	r8,0x80,COH
80029128:	5f 18       	srne	r8
}
8002912a:	10 9c       	mov	r12,r8
8002912c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029130 <scif_bod33_get_irq_enable_bit>:
 
unsigned long scif_bod33_get_irq_enable_bit(void)
{
80029130:	eb cd 40 80 	pushm	r7,lr
80029134:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD33DET_MASK) != 0);
80029136:	fe 78 08 00 	mov	r8,-63488
8002913a:	70 28       	ld.w	r8,r8[0x8]
8002913c:	e2 18 00 80 	andl	r8,0x80,COH
80029140:	5f 18       	srne	r8
}
80029142:	10 9c       	mov	r12,r8
80029144:	e3 cd 80 80 	ldm	sp++,r7,pc

80029148 <scif_bod33_get_level>:
 
unsigned long scif_bod33_get_level(void)
{
80029148:	eb cd 40 80 	pushm	r7,lr
8002914c:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod33 & AVR32_SCIF_BOD33_LEVEL_MASK) >> AVR32_SCIF_BOD33_LEVEL_OFFSET;
8002914e:	fe 78 08 00 	mov	r8,-63488
80029152:	70 d8       	ld.w	r8,r8[0x34]
80029154:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029158:	10 9c       	mov	r12,r8
8002915a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002915e <scif_bod50_enable_irq>:

void scif_bod50_enable_irq(void)
{
8002915e:	eb cd 40 80 	pushm	r7,lr
80029162:	1a 97       	mov	r7,sp
  AVR32_SCIF.ier = AVR32_SCIF_IER_BOD50DET_MASK ;
80029164:	fe 78 08 00 	mov	r8,-63488
80029168:	e0 69 01 00 	mov	r9,256
8002916c:	91 09       	st.w	r8[0x0],r9
}
8002916e:	e3 cd 80 80 	ldm	sp++,r7,pc

80029172 <scif_bod50_disable_irq>:

void scif_bod50_disable_irq(void)
{
80029172:	eb cd 40 c0 	pushm	r6-r7,lr
80029176:	1a 97       	mov	r7,sp
80029178:	20 1d       	sub	sp,4
8002917a:	49 26       	lddpc	r6,800291c0 <scif_bod50_disable_irq+0x4e>
8002917c:	1e 26       	rsub	r6,pc
   bool global_interrupt_enabled = Is_global_interrupt_enabled();
8002917e:	e1 b8 00 00 	mfsr	r8,0x0
80029182:	10 9c       	mov	r12,r8
80029184:	fe b0 f8 5e 	rcall	80028240 <cpu_irq_is_enabled_flags>
80029188:	18 98       	mov	r8,r12
8002918a:	ef 68 ff ff 	st.b	r7[-1],r8

  if (global_interrupt_enabled) Disable_global_interrupt();
8002918e:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029192:	30 08       	mov	r8,0
80029194:	f0 09 18 00 	cp.b	r9,r8
80029198:	c0 20       	breq	8002919c <scif_bod50_disable_irq+0x2a>
8002919a:	d3 03       	ssrf	0x10
  AVR32_SCIF.idr = AVR32_SCIF_IDR_BOD50DET_MASK;
8002919c:	fe 78 08 00 	mov	r8,-63488
800291a0:	e0 69 01 00 	mov	r9,256
800291a4:	91 19       	st.w	r8[0x4],r9
  AVR32_SCIF.isr;
800291a6:	fe 78 08 00 	mov	r8,-63488
800291aa:	70 38       	ld.w	r8,r8[0xc]
  if (global_interrupt_enabled) Enable_global_interrupt();
800291ac:	ef 39 ff ff 	ld.ub	r9,r7[-1]
800291b0:	30 08       	mov	r8,0
800291b2:	f0 09 18 00 	cp.b	r9,r8
800291b6:	c0 20       	breq	800291ba <scif_bod50_disable_irq+0x48>
800291b8:	d5 03       	csrf	0x10
}
800291ba:	2f fd       	sub	sp,-4
800291bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800291c0:	80 02       	ld.sh	r2,r0[0x0]
800291c2:	90 00       	ld.sh	r0,r8[0x0]

800291c4 <scif_bod50_clear_irq>:
 
void scif_bod50_clear_irq(void)
{
800291c4:	eb cd 40 80 	pushm	r7,lr
800291c8:	1a 97       	mov	r7,sp
  AVR32_SCIF.icr = AVR32_SCIF_ICR_BOD50DET_MASK;
800291ca:	fe 78 08 00 	mov	r8,-63488
800291ce:	e0 69 01 00 	mov	r9,256
800291d2:	91 49       	st.w	r8[0x10],r9
}
800291d4:	e3 cd 80 80 	ldm	sp++,r7,pc

800291d8 <scif_bod50_get_irq_status>:
 
unsigned long scif_bod50_get_irq_status(void)
{
800291d8:	eb cd 40 80 	pushm	r7,lr
800291dc:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.isr & AVR32_SCIF_ISR_BOD50DET_MASK) != 0);
800291de:	fe 78 08 00 	mov	r8,-63488
800291e2:	70 38       	ld.w	r8,r8[0xc]
800291e4:	e2 18 01 00 	andl	r8,0x100,COH
800291e8:	5f 18       	srne	r8
}
800291ea:	10 9c       	mov	r12,r8
800291ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800291f0 <scif_bod50_get_irq_enable_bit>:
 
unsigned long scif_bod50_get_irq_enable_bit(void)
{
800291f0:	eb cd 40 80 	pushm	r7,lr
800291f4:	1a 97       	mov	r7,sp
  return ((AVR32_SCIF.imr & AVR32_SCIF_IMR_BOD50DET_MASK) != 0);
800291f6:	fe 78 08 00 	mov	r8,-63488
800291fa:	70 28       	ld.w	r8,r8[0x8]
800291fc:	e2 18 01 00 	andl	r8,0x100,COH
80029200:	5f 18       	srne	r8
}
80029202:	10 9c       	mov	r12,r8
80029204:	e3 cd 80 80 	ldm	sp++,r7,pc

80029208 <scif_bod50_get_level>:
 
unsigned long scif_bod50_get_level(void)
{
80029208:	eb cd 40 80 	pushm	r7,lr
8002920c:	1a 97       	mov	r7,sp
  return (AVR32_SCIF.bod50 & AVR32_SCIF_BOD50_LEVEL_MASK) >> AVR32_SCIF_BOD50_LEVEL_OFFSET;
8002920e:	fe 78 08 00 	mov	r8,-63488
80029212:	70 e8       	ld.w	r8,r8[0x38]
80029214:	f1 d8 c0 06 	bfextu	r8,r8,0x0,0x6
}
80029218:	10 9c       	mov	r12,r8
8002921a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029220 <getBaudDiv>:

#endif


int16_t getBaudDiv(const unsigned int baudrate, uint32_t pba_hz)
{
80029220:	eb cd 40 80 	pushm	r7,lr
80029224:	1a 97       	mov	r7,sp
80029226:	20 3d       	sub	sp,12
80029228:	ef 4c ff f8 	st.w	r7[-8],r12
8002922c:	ef 4b ff f4 	st.w	r7[-12],r11
  int baudDiv = (pba_hz + baudrate / 2) / baudrate;
80029230:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029234:	f0 09 16 01 	lsr	r9,r8,0x1
80029238:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002923c:	f2 08 00 08 	add	r8,r9,r8
80029240:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029244:	f0 09 0d 08 	divu	r8,r8,r9
80029248:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv <= 0 || baudDiv > 255) {
8002924c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029250:	58 08       	cp.w	r8,0
80029252:	e0 8a 00 08 	brle	80029262 <getBaudDiv+0x42>
80029256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002925a:	e0 48 00 ff 	cp.w	r8,255
8002925e:	e0 8a 00 04 	brle	80029266 <getBaudDiv+0x46>
    return -1;
80029262:	3f f8       	mov	r8,-1
80029264:	c0 48       	rjmp	8002926c <getBaudDiv+0x4c>
  }

  return baudDiv;
80029266:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002926a:	5c 88       	casts.h	r8
}
8002926c:	10 9c       	mov	r12,r8
8002926e:	2f dd       	sub	sp,-12
80029270:	e3 cd 80 80 	ldm	sp++,r7,pc

80029274 <spi_initSlave>:

spi_status_t spi_initSlave(volatile avr32_spi_t *spi,
                           unsigned char bits,
                           unsigned char spi_mode)
{
80029274:	eb cd 40 80 	pushm	r7,lr
80029278:	1a 97       	mov	r7,sp
8002927a:	20 3d       	sub	sp,12
8002927c:	ef 4c ff fc 	st.w	r7[-4],r12
80029280:	16 99       	mov	r9,r11
80029282:	14 98       	mov	r8,r10
80029284:	ef 69 ff f8 	st.b	r7[-8],r9
80029288:	ef 68 ff f4 	st.b	r7[-12],r8
  if (spi_mode > 3 ||
8002928c:	ef 39 ff f4 	ld.ub	r9,r7[-12]
80029290:	30 38       	mov	r8,3
80029292:	f0 09 18 00 	cp.b	r9,r8
80029296:	e0 8b 00 10 	brhi	800292b6 <spi_initSlave+0x42>
8002929a:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002929e:	30 78       	mov	r8,7
800292a0:	f0 09 18 00 	cp.b	r9,r8
800292a4:	e0 88 00 09 	brls	800292b6 <spi_initSlave+0x42>
800292a8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800292ac:	31 08       	mov	r8,16
800292ae:	f0 09 18 00 	cp.b	r9,r8
800292b2:	e0 88 00 04 	brls	800292ba <spi_initSlave+0x46>
      bits < 8 || bits > 16) {
    return SPI_ERROR_ARGUMENT;
800292b6:	30 28       	mov	r8,2
800292b8:	c1 f8       	rjmp	800292f6 <spi_initSlave+0x82>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
800292ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292be:	e0 69 00 80 	mov	r9,128
800292c2:	91 09       	st.w	r8[0x0],r9

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800292c4:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800292c8:	a1 98       	lsr	r8,0x1
800292ca:	5c 58       	castu.b	r8
800292cc:	10 99       	mov	r9,r8
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
800292ce:	ef 38 ff f4 	ld.ub	r8,r7[-12]
800292d2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800292d6:	c0 31       	brne	800292dc <spi_initSlave+0x68>
800292d8:	30 28       	mov	r8,2
800292da:	c0 28       	rjmp	800292de <spi_initSlave+0x6a>
800292dc:	30 08       	mov	r8,0
800292de:	10 49       	or	r9,r8
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);
800292e0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800292e4:	20 88       	sub	r8,8
800292e6:	a5 68       	lsl	r8,0x4

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  spi->csr0 = ((spi_mode >> 1) << AVR32_SPI_CSR0_CPOL_OFFSET) |
800292e8:	f3 e8 10 08 	or	r8,r9,r8
800292ec:	10 99       	mov	r9,r8
800292ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
800292f2:	91 c9       	st.w	r8[0x30],r9
              (((spi_mode & 0x1) ^ 0x1) << AVR32_SPI_CSR0_NCPHA_OFFSET) |
              ((bits - 8) << AVR32_SPI_CSR0_BITS_OFFSET);

  return SPI_OK;
800292f4:	30 08       	mov	r8,0
}
800292f6:	10 9c       	mov	r12,r8
800292f8:	2f dd       	sub	sp,-12
800292fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800292fe <spi_initTest>:


spi_status_t spi_initTest(volatile avr32_spi_t *spi)
{
800292fe:	eb cd 40 80 	pushm	r7,lr
80029302:	1a 97       	mov	r7,sp
80029304:	20 1d       	sub	sp,4
80029306:	ef 4c ff fc 	st.w	r7[-4],r12
  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
8002930a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002930e:	e0 69 00 80 	mov	r9,128
80029312:	91 09       	st.w	r8[0x0],r9
  spi->mr |= AVR32_SPI_MR_MSTR_MASK | // Master Mode.
80029314:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029318:	70 18       	ld.w	r8,r8[0x4]
8002931a:	10 99       	mov	r9,r8
8002931c:	e8 19 00 81 	orl	r9,0x81
80029320:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029324:	91 19       	st.w	r8[0x4],r9
             AVR32_SPI_MR_LLB_MASK;   // Local Loopback.

  return SPI_OK;
80029326:	30 08       	mov	r8,0
}
80029328:	10 9c       	mov	r12,r8
8002932a:	2f fd       	sub	sp,-4
8002932c:	e3 cd 80 80 	ldm	sp++,r7,pc

80029330 <spi_initMaster>:


spi_status_t spi_initMaster(volatile avr32_spi_t *spi, const spi_options_t *options)
{
80029330:	eb cd 40 80 	pushm	r7,lr
80029334:	1a 97       	mov	r7,sp
80029336:	20 3d       	sub	sp,12
80029338:	ef 4c ff f8 	st.w	r7[-8],r12
8002933c:	ef 4b ff f4 	st.w	r7[-12],r11
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (options->modfdis > 1) {
80029340:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029344:	f1 39 00 0d 	ld.ub	r9,r8[13]
80029348:	30 18       	mov	r8,1
8002934a:	f0 09 18 00 	cp.b	r9,r8
8002934e:	e0 88 00 04 	brls	80029356 <spi_initMaster+0x26>
    return SPI_ERROR_ARGUMENT;
80029352:	30 28       	mov	r8,2
80029354:	c3 48       	rjmp	800293bc <spi_initMaster+0x8c>
  }

  // Reset.
  spi->cr = AVR32_SPI_CR_SWRST_MASK;
80029356:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002935a:	e0 69 00 80 	mov	r9,128
8002935e:	91 09       	st.w	r8[0x0],r9

  // Master Mode.
  u_avr32_spi_mr.mr = spi->mr;
80029360:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029364:	70 18       	ld.w	r8,r8[0x4]
80029366:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.mstr = 1;
8002936a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002936e:	30 19       	mov	r9,1
80029370:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029374:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.modfdis = options->modfdis;
80029378:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002937c:	f1 38 00 0d 	ld.ub	r8,r8[13]
80029380:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029384:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029388:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002938c:	f1 d9 d0 81 	bfins	r8,r9,0x4,0x1
80029390:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.llb = 0;
80029394:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029398:	30 09       	mov	r9,0
8002939a:	f1 d9 d0 e1 	bfins	r8,r9,0x7,0x1
8002939e:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcs = (1 << AVR32_SPI_MR_PCS_SIZE) - 1;
800293a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800293a6:	30 f9       	mov	r9,15
800293a8:	f1 d9 d2 04 	bfins	r8,r9,0x10,0x4
800293ac:	ef 48 ff fc 	st.w	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
800293b0:	ee f9 ff fc 	ld.w	r9,r7[-4]
800293b4:	ee f8 ff f8 	ld.w	r8,r7[-8]
800293b8:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
800293ba:	30 08       	mov	r8,0
}
800293bc:	10 9c       	mov	r12,r8
800293be:	2f dd       	sub	sp,-12
800293c0:	e3 cd 80 80 	ldm	sp++,r7,pc

800293c4 <spi_selectionMode>:

spi_status_t spi_selectionMode(volatile avr32_spi_t *spi,
                               unsigned char variable_ps,
                               unsigned char pcs_decode,
                               unsigned char delay)
{
800293c4:	eb cd 40 80 	pushm	r7,lr
800293c8:	1a 97       	mov	r7,sp
800293ca:	20 5d       	sub	sp,20
800293cc:	ef 4c ff f8 	st.w	r7[-8],r12
800293d0:	12 98       	mov	r8,r9
800293d2:	16 99       	mov	r9,r11
800293d4:	ef 69 ff f4 	st.b	r7[-12],r9
800293d8:	14 99       	mov	r9,r10
800293da:	ef 69 ff f0 	st.b	r7[-16],r9
800293de:	ef 68 ff ec 	st.b	r7[-20],r8
  u_avr32_spi_mr_t u_avr32_spi_mr;

  if (variable_ps > 1 ||
800293e2:	ef 39 ff f4 	ld.ub	r9,r7[-12]
800293e6:	30 18       	mov	r8,1
800293e8:	f0 09 18 00 	cp.b	r9,r8
800293ec:	e0 8b 00 09 	brhi	800293fe <spi_selectionMode+0x3a>
800293f0:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800293f4:	30 18       	mov	r8,1
800293f6:	f0 09 18 00 	cp.b	r9,r8
800293fa:	e0 88 00 04 	brls	80029402 <spi_selectionMode+0x3e>
      pcs_decode > 1) {
    return SPI_ERROR_ARGUMENT;
800293fe:	30 28       	mov	r8,2
80029400:	c2 88       	rjmp	80029450 <spi_selectionMode+0x8c>
  }

  u_avr32_spi_mr.mr = spi->mr;
80029402:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029406:	70 18       	ld.w	r8,r8[0x4]
80029408:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.ps = variable_ps;
8002940c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
80029410:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029414:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029418:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002941c:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029420:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.pcsdec = pcs_decode;
80029424:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029428:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002942c:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029430:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029434:	f1 d9 d0 41 	bfins	r8,r9,0x2,0x1
80029438:	ef 48 ff fc 	st.w	r7[-4],r8
  u_avr32_spi_mr.MR.dlybcs = delay;
8002943c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029440:	ef 68 ff fc 	st.b	r7[-4],r8
  spi->mr = u_avr32_spi_mr.mr;
80029444:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029448:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002944c:	91 19       	st.w	r8[0x4],r9

  return SPI_OK;
8002944e:	30 08       	mov	r8,0
}
80029450:	10 9c       	mov	r12,r8
80029452:	2f bd       	sub	sp,-20
80029454:	e3 cd 80 80 	ldm	sp++,r7,pc

80029458 <spi_selectChip>:


spi_status_t spi_selectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
80029458:	eb cd 40 80 	pushm	r7,lr
8002945c:	1a 97       	mov	r7,sp
8002945e:	20 2d       	sub	sp,8
80029460:	ef 4c ff fc 	st.w	r7[-4],r12
80029464:	16 98       	mov	r8,r11
80029466:	ef 68 ff f8 	st.b	r7[-8],r8
#ifdef FREERTOS_USED
  while (pdFALSE == xSemaphoreTake(xSPIMutex, 20));
#endif

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
8002946a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002946e:	70 18       	ld.w	r8,r8[0x4]
80029470:	10 99       	mov	r9,r8
80029472:	ea 19 00 0f 	orh	r9,0xf
80029476:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002947a:	91 19       	st.w	r8[0x4],r9

  if (spi->mr & AVR32_SPI_MR_PCSDEC_MASK) {
8002947c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029480:	70 18       	ld.w	r8,r8[0x4]
80029482:	e2 18 00 04 	andl	r8,0x4,COH
80029486:	c1 90       	breq	800294b8 <spi_selectChip+0x60>
    // The signal is decoded; allow up to 15 chips.
    if (chip > 14) {
80029488:	ef 39 ff f8 	ld.ub	r9,r7[-8]
8002948c:	30 e8       	mov	r8,14
8002948e:	f0 09 18 00 	cp.b	r9,r8
80029492:	e0 88 00 04 	brls	8002949a <spi_selectChip+0x42>
      return SPI_ERROR_ARGUMENT;
80029496:	30 28       	mov	r8,2
80029498:	c2 88       	rjmp	800294e8 <spi_selectChip+0x90>
    }

    spi->mr &= ~AVR32_SPI_MR_PCS_MASK | (chip << AVR32_SPI_MR_PCS_OFFSET);
8002949a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002949e:	70 19       	ld.w	r9,r8[0x4]
800294a0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800294a4:	b1 68       	lsl	r8,0x10
800294a6:	ea 18 ff f0 	orh	r8,0xfff0
800294aa:	e8 18 ff ff 	orl	r8,0xffff
800294ae:	10 69       	and	r9,r8
800294b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294b4:	91 19       	st.w	r8[0x4],r9
800294b6:	c1 88       	rjmp	800294e6 <spi_selectChip+0x8e>
  } else {
    if (chip > 3) {
800294b8:	ef 39 ff f8 	ld.ub	r9,r7[-8]
800294bc:	30 38       	mov	r8,3
800294be:	f0 09 18 00 	cp.b	r9,r8
800294c2:	e0 88 00 04 	brls	800294ca <spi_selectChip+0x72>
      return SPI_ERROR_ARGUMENT;
800294c6:	30 28       	mov	r8,2
800294c8:	c1 08       	rjmp	800294e8 <spi_selectChip+0x90>
    }

    spi->mr &= ~(1 << (AVR32_SPI_MR_PCS_OFFSET + chip));
800294ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294ce:	70 19       	ld.w	r9,r8[0x4]
800294d0:	ef 38 ff f8 	ld.ub	r8,r7[-8]
800294d4:	2f 08       	sub	r8,-16
800294d6:	30 1a       	mov	r10,1
800294d8:	f4 08 09 48 	lsl	r8,r10,r8
800294dc:	5c d8       	com	r8
800294de:	10 69       	and	r9,r8
800294e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800294e4:	91 19       	st.w	r8[0x4],r9
  }

  return SPI_OK;
800294e6:	30 08       	mov	r8,0
}
800294e8:	10 9c       	mov	r12,r8
800294ea:	2f ed       	sub	sp,-8
800294ec:	e3 cd 80 80 	ldm	sp++,r7,pc

800294f0 <spi_unselectChip>:


spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
800294f0:	eb cd 40 80 	pushm	r7,lr
800294f4:	1a 97       	mov	r7,sp
800294f6:	20 3d       	sub	sp,12
800294f8:	ef 4c ff f8 	st.w	r7[-8],r12
800294fc:	16 98       	mov	r8,r11
800294fe:	ef 68 ff f4 	st.b	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
80029502:	e0 68 3a 98 	mov	r8,15000
80029506:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
8002950a:	c0 f8       	rjmp	80029528 <spi_unselectChip+0x38>
    if (!timeout--) {
8002950c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029510:	58 08       	cp.w	r8,0
80029512:	5f 08       	sreq	r8
80029514:	5c 58       	castu.b	r8
80029516:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002951a:	20 19       	sub	r9,1
8002951c:	ef 49 ff fc 	st.w	r7[-4],r9
80029520:	58 08       	cp.w	r8,0
80029522:	c0 30       	breq	80029528 <spi_unselectChip+0x38>
      return SPI_ERROR_TIMEOUT;
80029524:	30 18       	mov	r8,1
80029526:	c1 68       	rjmp	80029552 <spi_unselectChip+0x62>

spi_status_t spi_unselectChip(volatile avr32_spi_t *spi, unsigned char chip)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TXEMPTY_MASK)) {
80029528:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002952c:	70 48       	ld.w	r8,r8[0x10]
8002952e:	e2 18 02 00 	andl	r8,0x200,COH
80029532:	ce d0       	breq	8002950c <spi_unselectChip+0x1c>
      return SPI_ERROR_TIMEOUT;
    }
  }

  // Assert all lines; no peripheral is selected.
  spi->mr |= AVR32_SPI_MR_PCS_MASK;
80029534:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029538:	70 18       	ld.w	r8,r8[0x4]
8002953a:	10 99       	mov	r9,r8
8002953c:	ea 19 00 0f 	orh	r9,0xf
80029540:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029544:	91 19       	st.w	r8[0x4],r9

  // Last transfer, so deassert the current NPCS if CSAAT is set.
  spi->cr = AVR32_SPI_CR_LASTXFER_MASK;
80029546:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002954a:	fc 19 01 00 	movh	r9,0x100
8002954e:	91 09       	st.w	r8[0x0],r9

#ifdef FREERTOS_USED
  xSemaphoreGive(xSPIMutex);
#endif

  return SPI_OK;
80029550:	30 08       	mov	r8,0
}
80029552:	10 9c       	mov	r12,r8
80029554:	2f dd       	sub	sp,-12
80029556:	e3 cd 80 80 	ldm	sp++,r7,pc

8002955a <spi_setupChipReg>:


spi_status_t spi_setupChipReg(volatile avr32_spi_t *spi,
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
8002955a:	eb cd 40 c0 	pushm	r6-r7,lr
8002955e:	1a 97       	mov	r7,sp
80029560:	20 5d       	sub	sp,20
80029562:	4e 06       	lddpc	r6,800296e0 <spi_setupChipReg+0x186>
80029564:	1e 26       	rsub	r6,pc
80029566:	ef 4c ff f4 	st.w	r7[-12],r12
8002956a:	ef 4b ff f0 	st.w	r7[-16],r11
8002956e:	ef 4a ff ec 	st.w	r7[-20],r10
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
80029572:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029576:	f1 39 00 0c 	ld.ub	r9,r8[12]
8002957a:	30 38       	mov	r8,3
8002957c:	f0 09 18 00 	cp.b	r9,r8
80029580:	e0 8b 00 1d 	brhi	800295ba <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
80029584:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029588:	f1 39 00 0b 	ld.ub	r9,r8[11]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002958c:	30 18       	mov	r8,1
8002958e:	f0 09 18 00 	cp.b	r9,r8
80029592:	e0 8b 00 14 	brhi	800295ba <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
80029596:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002959a:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
8002959e:	30 78       	mov	r8,7
800295a0:	f0 09 18 00 	cp.b	r9,r8
800295a4:	e0 88 00 0b 	brls	800295ba <spi_setupChipReg+0x60>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
800295a8:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295ac:	f1 39 00 08 	ld.ub	r9,r8[8]
                              const spi_options_t *options,
                              uint32_t pba_hz)
{
  u_avr32_spi_csr_t u_avr32_spi_csr;

  if (options->spi_mode > 3 ||
800295b0:	31 08       	mov	r8,16
800295b2:	f0 09 18 00 	cp.b	r9,r8
800295b6:	e0 88 00 04 	brls	800295be <spi_setupChipReg+0x64>
      options->stay_act > 1 ||
      options->bits < 8 || options->bits > 16) {
    return SPI_ERROR_ARGUMENT;
800295ba:	30 28       	mov	r8,2
800295bc:	c8 d8       	rjmp	800296d6 <spi_setupChipReg+0x17c>
  }

  int baudDiv = getBaudDiv(options->baudrate, pba_hz);
800295be:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295c2:	70 18       	ld.w	r8,r8[0x4]
800295c4:	ee fb ff ec 	ld.w	r11,r7[-20]
800295c8:	10 9c       	mov	r12,r8
800295ca:	f0 16 01 29 	mcall	r6[1188]
800295ce:	18 98       	mov	r8,r12
800295d0:	ef 48 ff fc 	st.w	r7[-4],r8

  if (baudDiv < 0) {
800295d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800295d8:	58 08       	cp.w	r8,0
800295da:	c0 34       	brge	800295e0 <spi_setupChipReg+0x86>
    return SPI_ERROR_ARGUMENT;
800295dc:	30 28       	mov	r8,2
800295de:	c7 c8       	rjmp	800296d6 <spi_setupChipReg+0x17c>
  }

  // Will use CSR0 offsets; these are the same for CSR0 to CSR3.
  u_avr32_spi_csr.csr = 0;
800295e0:	30 08       	mov	r8,0
800295e2:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.cpol   = options->spi_mode >> 1;
800295e6:	ee f8 ff f0 	ld.w	r8,r7[-16]
800295ea:	f1 38 00 0c 	ld.ub	r8,r8[12]
800295ee:	a1 98       	lsr	r8,0x1
800295f0:	5c 58       	castu.b	r8
800295f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
800295f6:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
800295fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
800295fe:	f1 d9 d0 01 	bfins	r8,r9,0x0,0x1
80029602:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.ncpha  = (options->spi_mode & 0x1) ^ 0x1;
80029606:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002960a:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002960e:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029612:	5f 08       	sreq	r8
80029614:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029618:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002961c:	f1 d9 d0 21 	bfins	r8,r9,0x1,0x1
80029620:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.csaat  = options->stay_act;
80029624:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029628:	f1 38 00 0b 	ld.ub	r8,r8[11]
8002962c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029630:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029634:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029638:	f1 d9 d0 61 	bfins	r8,r9,0x3,0x1
8002963c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.bits   = options->bits - 8;
80029640:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029644:	f1 38 00 08 	ld.ub	r8,r8[8]
80029648:	20 88       	sub	r8,8
8002964a:	5c 58       	castu.b	r8
8002964c:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
80029650:	f3 d8 c0 08 	bfextu	r9,r8,0x0,0x8
80029654:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029658:	f1 d9 d0 84 	bfins	r8,r9,0x4,0x4
8002965c:	ef 48 ff f8 	st.w	r7[-8],r8
  u_avr32_spi_csr.CSR.scbr   = baudDiv;
80029660:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029664:	5c 58       	castu.b	r8
80029666:	ef 68 ff fa 	st.b	r7[-6],r8
  u_avr32_spi_csr.CSR.dlybs  = options->spck_delay;
8002966a:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002966e:	f1 38 00 09 	ld.ub	r8,r8[9]
80029672:	ef 68 ff f9 	st.b	r7[-7],r8
  u_avr32_spi_csr.CSR.dlybct = options->trans_delay;
80029676:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002967a:	f1 38 00 0a 	ld.ub	r8,r8[10]
8002967e:	ef 68 ff f8 	st.b	r7[-8],r8

  switch(options->reg) {
80029682:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029686:	11 88       	ld.ub	r8,r8[0x0]
80029688:	58 18       	cp.w	r8,1
8002968a:	c1 10       	breq	800296ac <spi_setupChipReg+0x152>
8002968c:	e0 89 00 05 	brgt	80029696 <spi_setupChipReg+0x13c>
80029690:	58 08       	cp.w	r8,0
80029692:	c0 70       	breq	800296a0 <spi_setupChipReg+0x146>
80029694:	c1 e8       	rjmp	800296d0 <spi_setupChipReg+0x176>
80029696:	58 28       	cp.w	r8,2
80029698:	c1 00       	breq	800296b8 <spi_setupChipReg+0x15e>
8002969a:	58 38       	cp.w	r8,3
8002969c:	c1 40       	breq	800296c4 <spi_setupChipReg+0x16a>
8002969e:	c1 98       	rjmp	800296d0 <spi_setupChipReg+0x176>
    case 0:
      spi->csr0 = u_avr32_spi_csr.csr;
800296a0:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296a4:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296a8:	91 c9       	st.w	r8[0x30],r9
      break;
800296aa:	c1 58       	rjmp	800296d4 <spi_setupChipReg+0x17a>
    case 1:
      spi->csr1 = u_avr32_spi_csr.csr;
800296ac:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296b0:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296b4:	91 d9       	st.w	r8[0x34],r9
      break;
800296b6:	c0 f8       	rjmp	800296d4 <spi_setupChipReg+0x17a>
    case 2:
      spi->csr2 = u_avr32_spi_csr.csr;
800296b8:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296c0:	91 e9       	st.w	r8[0x38],r9
      break;
800296c2:	c0 98       	rjmp	800296d4 <spi_setupChipReg+0x17a>
    case 3:
      spi->csr3 = u_avr32_spi_csr.csr;
800296c4:	ee f9 ff f8 	ld.w	r9,r7[-8]
800296c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800296cc:	91 f9       	st.w	r8[0x3c],r9
      break;
800296ce:	c0 38       	rjmp	800296d4 <spi_setupChipReg+0x17a>
    default:
      return SPI_ERROR_ARGUMENT;
800296d0:	30 28       	mov	r8,2
800296d2:	c0 28       	rjmp	800296d6 <spi_setupChipReg+0x17c>
      while(1);
    }
  }
#endif

  return SPI_OK;
800296d4:	30 08       	mov	r8,0
}
800296d6:	10 9c       	mov	r12,r8
800296d8:	2f bd       	sub	sp,-20
800296da:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800296de:	00 00       	add	r0,r0
800296e0:	80 02       	ld.sh	r2,r0[0x0]
800296e2:	93 e8       	st.w	r9[0x38],r8

800296e4 <spi_enable>:


void spi_enable(volatile avr32_spi_t *spi)
{
800296e4:	eb cd 40 80 	pushm	r7,lr
800296e8:	1a 97       	mov	r7,sp
800296ea:	20 1d       	sub	sp,4
800296ec:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIEN_MASK;
800296f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
800296f4:	30 19       	mov	r9,1
800296f6:	91 09       	st.w	r8[0x0],r9
}
800296f8:	2f fd       	sub	sp,-4
800296fa:	e3 cd 80 80 	ldm	sp++,r7,pc

800296fe <spi_disable>:


void spi_disable(volatile avr32_spi_t *spi)
{
800296fe:	eb cd 40 80 	pushm	r7,lr
80029702:	1a 97       	mov	r7,sp
80029704:	20 1d       	sub	sp,4
80029706:	ef 4c ff fc 	st.w	r7[-4],r12
  spi->cr = AVR32_SPI_CR_SPIDIS_MASK;
8002970a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002970e:	30 29       	mov	r9,2
80029710:	91 09       	st.w	r8[0x0],r9
}
80029712:	2f fd       	sub	sp,-4
80029714:	e3 cd 80 80 	ldm	sp++,r7,pc

80029718 <spi_is_enabled>:


int spi_is_enabled(volatile avr32_spi_t *spi)
{
80029718:	eb cd 40 80 	pushm	r7,lr
8002971c:	1a 97       	mov	r7,sp
8002971e:	20 1d       	sub	sp,4
80029720:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_SPIENS_MASK) != 0;
80029724:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029728:	70 48       	ld.w	r8,r8[0x10]
8002972a:	e6 18 00 01 	andh	r8,0x1,COH
8002972e:	5f 18       	srne	r8
}
80029730:	10 9c       	mov	r12,r8
80029732:	2f fd       	sub	sp,-4
80029734:	e3 cd 80 80 	ldm	sp++,r7,pc

80029738 <spi_writeRegisterEmptyCheck>:

unsigned char spi_writeRegisterEmptyCheck(volatile avr32_spi_t *spi)
{
80029738:	eb cd 40 80 	pushm	r7,lr
8002973c:	1a 97       	mov	r7,sp
8002973e:	20 1d       	sub	sp,4
80029740:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0);
80029744:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029748:	70 48       	ld.w	r8,r8[0x10]
8002974a:	e2 18 00 02 	andl	r8,0x2,COH
8002974e:	5f 18       	srne	r8
}
80029750:	10 9c       	mov	r12,r8
80029752:	2f fd       	sub	sp,-4
80029754:	e3 cd 80 80 	ldm	sp++,r7,pc

80029758 <spi_write>:


spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
80029758:	eb cd 40 80 	pushm	r7,lr
8002975c:	1a 97       	mov	r7,sp
8002975e:	20 3d       	sub	sp,12
80029760:	ef 4c ff f8 	st.w	r7[-8],r12
80029764:	16 98       	mov	r8,r11
80029766:	ef 58 ff f4 	st.h	r7[-12],r8
  unsigned int timeout = SPI_TIMEOUT;
8002976a:	e0 68 3a 98 	mov	r8,15000
8002976e:	ef 48 ff fc 	st.w	r7[-4],r8

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029772:	c0 f8       	rjmp	80029790 <spi_write+0x38>
    if (!timeout--) {
80029774:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029778:	58 08       	cp.w	r8,0
8002977a:	5f 08       	sreq	r8
8002977c:	5c 58       	castu.b	r8
8002977e:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029782:	20 19       	sub	r9,1
80029784:	ef 49 ff fc 	st.w	r7[-4],r9
80029788:	58 08       	cp.w	r8,0
8002978a:	c0 30       	breq	80029790 <spi_write+0x38>
      return SPI_ERROR_TIMEOUT;
8002978c:	30 18       	mov	r8,1
8002978e:	c0 d8       	rjmp	800297a8 <spi_write+0x50>

spi_status_t spi_write(volatile avr32_spi_t *spi, uint16_t data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029790:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029794:	70 48       	ld.w	r8,r8[0x10]
80029796:	e2 18 00 02 	andl	r8,0x2,COH
8002979a:	ce d0       	breq	80029774 <spi_write+0x1c>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002979c:	ef 19 ff f4 	ld.uh	r9,r7[-12]
800297a0:	ee f8 ff f8 	ld.w	r8,r7[-8]
800297a4:	91 39       	st.w	r8[0xc],r9

  return SPI_OK;
800297a6:	30 08       	mov	r8,0
}
800297a8:	10 9c       	mov	r12,r8
800297aa:	2f dd       	sub	sp,-12
800297ac:	e3 cd 80 80 	ldm	sp++,r7,pc

800297b0 <spi_variableSlaveWrite>:


spi_status_t spi_variableSlaveWrite(volatile avr32_spi_t *spi, uint16_t data,
                                    uint8_t pcs, uint8_t lastxfer)
{
800297b0:	eb cd 40 80 	pushm	r7,lr
800297b4:	1a 97       	mov	r7,sp
800297b6:	20 5d       	sub	sp,20
800297b8:	ef 4c ff f8 	st.w	r7[-8],r12
800297bc:	12 98       	mov	r8,r9
800297be:	16 99       	mov	r9,r11
800297c0:	ef 59 ff f4 	st.h	r7[-12],r9
800297c4:	14 99       	mov	r9,r10
800297c6:	ef 69 ff f0 	st.b	r7[-16],r9
800297ca:	ef 68 ff ec 	st.b	r7[-20],r8
  unsigned int timeout = SPI_TIMEOUT;
800297ce:	e0 68 3a 98 	mov	r8,15000
800297d2:	ef 48 ff fc 	st.w	r7[-4],r8

  if (pcs > 14 || lastxfer > 1) {
800297d6:	ef 39 ff f0 	ld.ub	r9,r7[-16]
800297da:	30 e8       	mov	r8,14
800297dc:	f0 09 18 00 	cp.b	r9,r8
800297e0:	e0 8b 00 09 	brhi	800297f2 <spi_variableSlaveWrite+0x42>
800297e4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
800297e8:	30 18       	mov	r8,1
800297ea:	f0 09 18 00 	cp.b	r9,r8
800297ee:	e0 88 00 12 	brls	80029812 <spi_variableSlaveWrite+0x62>
    return SPI_ERROR_ARGUMENT;
800297f2:	30 28       	mov	r8,2
800297f4:	c2 68       	rjmp	80029840 <spi_variableSlaveWrite+0x90>
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
    if (!timeout--) {
800297f6:	ee f8 ff fc 	ld.w	r8,r7[-4]
800297fa:	58 08       	cp.w	r8,0
800297fc:	5f 08       	sreq	r8
800297fe:	5c 58       	castu.b	r8
80029800:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029804:	20 19       	sub	r9,1
80029806:	ef 49 ff fc 	st.w	r7[-4],r9
8002980a:	58 08       	cp.w	r8,0
8002980c:	c0 40       	breq	80029814 <spi_variableSlaveWrite+0x64>
      return SPI_ERROR_TIMEOUT;
8002980e:	30 18       	mov	r8,1
80029810:	c1 88       	rjmp	80029840 <spi_variableSlaveWrite+0x90>

  if (pcs > 14 || lastxfer > 1) {
    return SPI_ERROR_ARGUMENT;
  }

  while (!(spi->sr & AVR32_SPI_SR_TDRE_MASK)) {
80029812:	d7 03       	nop
80029814:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029818:	70 48       	ld.w	r8,r8[0x10]
8002981a:	e2 18 00 02 	andl	r8,0x2,COH
8002981e:	ce c0       	breq	800297f6 <spi_variableSlaveWrite+0x46>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029820:	ef 19 ff f4 	ld.uh	r9,r7[-12]
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
80029824:	ef 38 ff f0 	ld.ub	r8,r7[-16]
80029828:	b1 68       	lsl	r8,0x10
8002982a:	10 49       	or	r9,r8
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);
8002982c:	ef 38 ff ec 	ld.ub	r8,r7[-20]
80029830:	b9 68       	lsl	r8,0x18
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  spi->tdr = (data << AVR32_SPI_TDR_TD_OFFSET) |
80029832:	f3 e8 10 08 	or	r8,r9,r8
80029836:	10 99       	mov	r9,r8
80029838:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002983c:	91 39       	st.w	r8[0xc],r9
             (pcs << AVR32_SPI_TDR_PCS_OFFSET) |
             (lastxfer << AVR32_SPI_TDR_LASTXFER_OFFSET);

  return SPI_OK;
8002983e:	30 08       	mov	r8,0
}
80029840:	10 9c       	mov	r12,r8
80029842:	2f bd       	sub	sp,-20
80029844:	e3 cd 80 80 	ldm	sp++,r7,pc

80029848 <spi_writeEndCheck>:


unsigned char spi_writeEndCheck(volatile avr32_spi_t *spi)
{
80029848:	eb cd 40 80 	pushm	r7,lr
8002984c:	1a 97       	mov	r7,sp
8002984e:	20 1d       	sub	sp,4
80029850:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_TXEMPTY_MASK) != 0);
80029854:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029858:	70 48       	ld.w	r8,r8[0x10]
8002985a:	e2 18 02 00 	andl	r8,0x200,COH
8002985e:	5f 18       	srne	r8
}
80029860:	10 9c       	mov	r12,r8
80029862:	2f fd       	sub	sp,-4
80029864:	e3 cd 80 80 	ldm	sp++,r7,pc

80029868 <spi_readRegisterFullCheck>:


unsigned char spi_readRegisterFullCheck(volatile avr32_spi_t *spi)
{
80029868:	eb cd 40 80 	pushm	r7,lr
8002986c:	1a 97       	mov	r7,sp
8002986e:	20 1d       	sub	sp,4
80029870:	ef 4c ff fc 	st.w	r7[-4],r12
  return ((spi->sr & AVR32_SPI_SR_RDRF_MASK) != 0);
80029874:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029878:	70 48       	ld.w	r8,r8[0x10]
8002987a:	5c 58       	castu.b	r8
8002987c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
}
80029880:	10 9c       	mov	r12,r8
80029882:	2f fd       	sub	sp,-4
80029884:	e3 cd 80 80 	ldm	sp++,r7,pc

80029888 <spi_read>:


spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
80029888:	eb cd 40 80 	pushm	r7,lr
8002988c:	1a 97       	mov	r7,sp
8002988e:	20 3d       	sub	sp,12
80029890:	ef 4c ff f8 	st.w	r7[-8],r12
80029894:	ef 4b ff f4 	st.w	r7[-12],r11
  unsigned int timeout = SPI_TIMEOUT;
80029898:	e0 68 3a 98 	mov	r8,15000
8002989c:	ef 48 ff fc 	st.w	r7[-4],r8

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800298a0:	c0 f8       	rjmp	800298be <spi_read+0x36>
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) {
    if (!timeout--) {
800298a2:	ee f8 ff fc 	ld.w	r8,r7[-4]
800298a6:	58 08       	cp.w	r8,0
800298a8:	5f 08       	sreq	r8
800298aa:	5c 58       	castu.b	r8
800298ac:	ee f9 ff fc 	ld.w	r9,r7[-4]
800298b0:	20 19       	sub	r9,1
800298b2:	ef 49 ff fc 	st.w	r7[-4],r9
800298b6:	58 08       	cp.w	r8,0
800298b8:	c0 30       	breq	800298be <spi_read+0x36>
      return SPI_ERROR_TIMEOUT;
800298ba:	30 18       	mov	r8,1
800298bc:	c1 18       	rjmp	800298de <spi_read+0x56>

spi_status_t spi_read(volatile avr32_spi_t *spi, unsigned short *data)
{
  unsigned int timeout = SPI_TIMEOUT;

  while ((spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) !=
800298be:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298c2:	70 48       	ld.w	r8,r8[0x10]
800298c4:	e2 18 02 01 	andl	r8,0x201,COH
800298c8:	e0 48 02 01 	cp.w	r8,513
800298cc:	ce b1       	brne	800298a2 <spi_read+0x1a>
    if (!timeout--) {
      return SPI_ERROR_TIMEOUT;
    }
  }

  *data = spi->rdr >> AVR32_SPI_RDR_RD_OFFSET;
800298ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
800298d2:	70 28       	ld.w	r8,r8[0x8]
800298d4:	5c 88       	casts.h	r8
800298d6:	ee f9 ff f4 	ld.w	r9,r7[-12]
800298da:	b2 08       	st.h	r9[0x0],r8

  return SPI_OK;
800298dc:	30 08       	mov	r8,0
}
800298de:	10 9c       	mov	r12,r8
800298e0:	2f dd       	sub	sp,-12
800298e2:	e3 cd 80 80 	ldm	sp++,r7,pc

800298e6 <spi_getStatus>:


unsigned char spi_getStatus(volatile avr32_spi_t *spi)
{
800298e6:	eb cd 40 80 	pushm	r7,lr
800298ea:	1a 97       	mov	r7,sp
800298ec:	20 3d       	sub	sp,12
800298ee:	ef 4c ff f4 	st.w	r7[-12],r12
  spi_status_t ret = SPI_OK;
800298f2:	30 08       	mov	r8,0
800298f4:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned long sr = spi->sr;
800298f8:	ee f8 ff f4 	ld.w	r8,r7[-12]
800298fc:	70 48       	ld.w	r8,r8[0x10]
800298fe:	ef 48 ff fc 	st.w	r7[-4],r8

  if (sr & AVR32_SPI_SR_OVRES_MASK) {
80029902:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029906:	e2 18 00 08 	andl	r8,0x8,COH
8002990a:	c0 40       	breq	80029912 <spi_getStatus+0x2c>
    ret = SPI_ERROR_OVERRUN;
8002990c:	30 38       	mov	r8,3
8002990e:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (sr & AVR32_SPI_SR_MODF_MASK) {
80029912:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029916:	e2 18 00 04 	andl	r8,0x4,COH
8002991a:	c0 60       	breq	80029926 <spi_getStatus+0x40>
    ret += SPI_ERROR_MODE_FAULT;
8002991c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029920:	2f c8       	sub	r8,-4
80029922:	ef 48 ff f8 	st.w	r7[-8],r8
  }

  if (ret == (SPI_ERROR_OVERRUN + SPI_ERROR_MODE_FAULT)) {
80029926:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002992a:	58 78       	cp.w	r8,7
8002992c:	c0 31       	brne	80029932 <spi_getStatus+0x4c>
    return SPI_ERROR_OVERRUN_AND_MODE_FAULT;
8002992e:	30 58       	mov	r8,5
80029930:	c0 b8       	rjmp	80029946 <spi_getStatus+0x60>
  }
  else if (ret > 0) {
80029932:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029936:	58 08       	cp.w	r8,0
80029938:	e0 8a 00 06 	brle	80029944 <spi_getStatus+0x5e>
    return ret;
8002993c:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029940:	5c 58       	castu.b	r8
80029942:	c0 28       	rjmp	80029946 <spi_getStatus+0x60>
  } else {
    return SPI_OK;
80029944:	30 08       	mov	r8,0
  }
}
80029946:	10 9c       	mov	r12,r8
80029948:	2f dd       	sub	sp,-12
8002994a:	e3 cd 80 80 	ldm	sp++,r7,pc
	...

80029950 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
80029950:	eb cd 40 80 	pushm	r7,lr
80029954:	1a 97       	mov	r7,sp
80029956:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
80029958:	e1 b8 00 00 	mfsr	r8,0x0
8002995c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
80029960:	d3 03       	ssrf	0x10

	return flags;
80029962:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
80029966:	10 9c       	mov	r12,r8
80029968:	2f fd       	sub	sp,-4
8002996a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002996e <cpu_irq_is_enabled_flags>:

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002996e:	eb cd 40 80 	pushm	r7,lr
80029972:	1a 97       	mov	r7,sp
80029974:	20 1d       	sub	sp,4
80029976:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002997a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002997e:	e6 18 00 01 	andh	r8,0x1,COH
80029982:	5f 08       	sreq	r8
80029984:	5c 58       	castu.b	r8
}
80029986:	10 9c       	mov	r12,r8
80029988:	2f fd       	sub	sp,-4
8002998a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002998e <cpu_irq_restore>:

static inline void cpu_irq_restore(irqflags_t flags)
{
8002998e:	eb cd 40 80 	pushm	r7,lr
80029992:	1a 97       	mov	r7,sp
80029994:	20 1d       	sub	sp,4
80029996:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002999a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002999e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
800299a2:	2f fd       	sub	sp,-4
800299a4:	e3 cd 80 80 	ldm	sp++,r7,pc

800299a8 <twim_master_interrupt_handler>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler,CONF_TWIM_IRQ_GROUP,CONF_TWIM_IRQ_LEVEL)
{
800299a8:	eb cd 40 c0 	pushm	r6-r7,lr
800299ac:	1a 97       	mov	r7,sp
800299ae:	20 1d       	sub	sp,4
800299b0:	4d 96       	lddpc	r6,80029b14 <twim_master_interrupt_handler+0x16c>
800299b2:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
800299b4:	ec f8 00 40 	ld.w	r8,r6[64]
800299b8:	70 08       	ld.w	r8,r8[0x0]
800299ba:	70 79       	ld.w	r9,r8[0x1c]
800299bc:	ec f8 01 08 	ld.w	r8,r6[264]
800299c0:	70 08       	ld.w	r8,r8[0x0]
800299c2:	f3 e8 00 08 	and	r8,r9,r8
800299c6:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
800299ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299ce:	e2 18 07 00 	andl	r8,0x700,COH
800299d2:	c2 30       	breq	80029a18 <twim_master_interrupt_handler+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
800299d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
800299d8:	e2 18 03 00 	andl	r8,0x300,COH
800299dc:	c0 30       	breq	800299e2 <twim_master_interrupt_handler+0x3a>
800299de:	3f c8       	mov	r8,-4
800299e0:	c0 28       	rjmp	800299e4 <twim_master_interrupt_handler+0x3c>
800299e2:	3f e8       	mov	r8,-2
800299e4:	ec f9 00 7c 	ld.w	r9,r6[124]
800299e8:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
800299ea:	ec f8 00 40 	ld.w	r8,r6[64]
800299ee:	70 09       	ld.w	r9,r8[0x0]
800299f0:	72 38       	ld.w	r8,r9[0xc]
800299f2:	30 0a       	mov	r10,0
800299f4:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
800299f8:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
800299fa:	ec f8 00 40 	ld.w	r8,r6[64]
800299fe:	70 08       	ld.w	r8,r8[0x0]
80029a00:	3f f9       	mov	r9,-1
80029a02:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029a04:	ec f8 00 40 	ld.w	r8,r6[64]
80029a08:	70 08       	ld.w	r8,r8[0x0]
80029a0a:	3f f9       	mov	r9,-1
80029a0c:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029a0e:	ec f9 00 bc 	ld.w	r9,r6[188]
80029a12:	30 08       	mov	r8,0
80029a14:	b2 88       	st.b	r9[0x0],r8
80029a16:	c7 a8       	rjmp	80029b0a <twim_master_interrupt_handler+0x162>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029a18:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a1c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029a20:	5c 58       	castu.b	r8
80029a22:	c2 d0       	breq	80029a7c <twim_master_interrupt_handler+0xd4>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029a24:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a28:	70 09       	ld.w	r9,r8[0x0]
80029a2a:	ec f8 00 40 	ld.w	r8,r6[64]
80029a2e:	70 08       	ld.w	r8,r8[0x0]
80029a30:	70 58       	ld.w	r8,r8[0x14]
80029a32:	5c 58       	castu.b	r8
80029a34:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029a36:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a3a:	70 08       	ld.w	r8,r8[0x0]
80029a3c:	f0 c9 ff ff 	sub	r9,r8,-1
80029a40:	ec f8 00 c0 	ld.w	r8,r6[192]
80029a44:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029a46:	ec f8 01 58 	ld.w	r8,r6[344]
80029a4a:	70 08       	ld.w	r8,r8[0x0]
80029a4c:	f0 c9 00 01 	sub	r9,r8,1
80029a50:	ec f8 01 58 	ld.w	r8,r6[344]
80029a54:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029a56:	ec f8 01 58 	ld.w	r8,r6[344]
80029a5a:	70 08       	ld.w	r8,r8[0x0]
80029a5c:	58 08       	cp.w	r8,0
80029a5e:	c5 61       	brne	80029b0a <twim_master_interrupt_handler+0x162>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029a60:	ec f8 00 40 	ld.w	r8,r6[64]
80029a64:	70 08       	ld.w	r8,r8[0x0]
80029a66:	30 19       	mov	r9,1
80029a68:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029a6a:	ec f9 00 bc 	ld.w	r9,r6[188]
80029a6e:	30 08       	mov	r8,0
80029a70:	b2 88       	st.b	r9[0x0],r8
			transfer_status=true;
80029a72:	ec f8 00 7c 	ld.w	r8,r6[124]
80029a76:	30 19       	mov	r9,1
80029a78:	91 09       	st.w	r8[0x0],r9
80029a7a:	c4 88       	rjmp	80029b0a <twim_master_interrupt_handler+0x162>
			
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029a7c:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029a80:	e2 18 00 02 	andl	r8,0x2,COH
80029a84:	c4 30       	breq	80029b0a <twim_master_interrupt_handler+0x162>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029a86:	ec f8 00 88 	ld.w	r8,r6[136]
80029a8a:	70 08       	ld.w	r8,r8[0x0]
80029a8c:	58 08       	cp.w	r8,0
80029a8e:	c0 b1       	brne	80029aa4 <twim_master_interrupt_handler+0xfc>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029a90:	ec f8 00 40 	ld.w	r8,r6[64]
80029a94:	70 08       	ld.w	r8,r8[0x0]
80029a96:	30 29       	mov	r9,2
80029a98:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029a9a:	ec f9 00 bc 	ld.w	r9,r6[188]
80029a9e:	30 08       	mov	r8,0
80029aa0:	b2 88       	st.b	r9[0x0],r8
80029aa2:	c3 48       	rjmp	80029b0a <twim_master_interrupt_handler+0x162>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029aa4:	ec f8 00 40 	ld.w	r8,r6[64]
80029aa8:	70 0a       	ld.w	r10,r8[0x0]
80029aaa:	ec f8 00 90 	ld.w	r8,r6[144]
80029aae:	70 08       	ld.w	r8,r8[0x0]
80029ab0:	11 89       	ld.ub	r9,r8[0x0]
80029ab2:	5c 59       	castu.b	r9
80029ab4:	95 69       	st.w	r10[0x18],r9
80029ab6:	f0 c9 ff ff 	sub	r9,r8,-1
80029aba:	ec f8 00 90 	ld.w	r8,r6[144]
80029abe:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029ac0:	ec f8 00 88 	ld.w	r8,r6[136]
80029ac4:	70 08       	ld.w	r8,r8[0x0]
80029ac6:	f0 c9 00 01 	sub	r9,r8,1
80029aca:	ec f8 00 88 	ld.w	r8,r6[136]
80029ace:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029ad0:	ec f8 00 88 	ld.w	r8,r6[136]
80029ad4:	70 08       	ld.w	r8,r8[0x0]
80029ad6:	58 08       	cp.w	r8,0
80029ad8:	c1 91       	brne	80029b0a <twim_master_interrupt_handler+0x162>
				// Check for next transfer
				if(twim_next) {
80029ada:	ec f8 00 bc 	ld.w	r8,r6[188]
80029ade:	11 88       	ld.ub	r8,r8[0x0]
80029ae0:	5c 58       	castu.b	r8
80029ae2:	c1 40       	breq	80029b0a <twim_master_interrupt_handler+0x162>
					twim_next = false;
80029ae4:	ec f9 00 bc 	ld.w	r9,r6[188]
80029ae8:	30 08       	mov	r8,0
80029aea:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029aec:	ec f8 02 10 	ld.w	r8,r6[528]
80029af0:	70 08       	ld.w	r8,r8[0x0]
80029af2:	70 49       	ld.w	r9,r8[0x10]
80029af4:	ec f8 00 88 	ld.w	r8,r6[136]
80029af8:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029afa:	ec f8 02 10 	ld.w	r8,r6[528]
80029afe:	70 08       	ld.w	r8,r8[0x0]
80029b00:	70 38       	ld.w	r8,r8[0xc]
80029b02:	10 99       	mov	r9,r8
80029b04:	ec f8 00 90 	ld.w	r8,r6[144]
80029b08:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029b0a:	2f fd       	sub	sp,-4
80029b0c:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029b10:	d6 03       	rete
80029b12:	00 00       	add	r0,r0
80029b14:	80 02       	ld.sh	r2,r0[0x0]
80029b16:	98 36       	ld.sh	r6,r12[0x6]

80029b18 <twim_master_interrupt_handler2>:
/** 
 * \internal  
 * \brief TWI interrupt handler.
 */
ISR(twim_master_interrupt_handler2,AVR32_TWIM1_GROUP,CONF_TWIM_IRQ_LEVEL)
{
80029b18:	eb cd 40 c0 	pushm	r6-r7,lr
80029b1c:	1a 97       	mov	r7,sp
80029b1e:	20 1d       	sub	sp,4
80029b20:	4d 76       	lddpc	r6,80029c7c <twim_master_interrupt_handler2+0x164>
80029b22:	1e 26       	rsub	r6,pc
	// get masked status register value
	uint32_t status = twim_inst->sr & twim_it_mask;
80029b24:	ec f8 00 40 	ld.w	r8,r6[64]
80029b28:	70 08       	ld.w	r8,r8[0x0]
80029b2a:	70 79       	ld.w	r9,r8[0x1c]
80029b2c:	ec f8 01 08 	ld.w	r8,r6[264]
80029b30:	70 08       	ld.w	r8,r8[0x0]
80029b32:	f3 e8 00 08 	and	r8,r9,r8
80029b36:	ef 48 ff fc 	st.w	r7[-4],r8
	// this is a NACK
	if (status & AVR32_TWIM_SR_STD_MASK) {
80029b3a:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b3e:	e2 18 07 00 	andl	r8,0x700,COH
80029b42:	c2 30       	breq	80029b88 <twim_master_interrupt_handler2+0x70>
		//if we get a nak, clear the valid bit in cmdr, 
		//otherwise the command will be resent.
		transfer_status =(status & AVR32_TWIM_IER_NAK_MASK) ? 
80029b44:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b48:	e2 18 03 00 	andl	r8,0x300,COH
80029b4c:	c0 30       	breq	80029b52 <twim_master_interrupt_handler2+0x3a>
80029b4e:	3f c8       	mov	r8,-4
80029b50:	c0 28       	rjmp	80029b54 <twim_master_interrupt_handler2+0x3c>
80029b52:	3f e8       	mov	r8,-2
80029b54:	ec f9 00 7c 	ld.w	r9,r6[124]
80029b58:	93 08       	st.w	r9[0x0],r8
							TWI_RECEIVE_NACK : TWI_ARBITRATION_LOST;
		twim_inst->CMDR.valid = 0;
80029b5a:	ec f8 00 40 	ld.w	r8,r6[64]
80029b5e:	70 09       	ld.w	r9,r8[0x0]
80029b60:	72 38       	ld.w	r8,r9[0xc]
80029b62:	30 0a       	mov	r10,0
80029b64:	f1 da d1 e1 	bfins	r8,r10,0xf,0x1
80029b68:	93 38       	st.w	r9[0xc],r8
		twim_inst->scr = ~0UL;
80029b6a:	ec f8 00 40 	ld.w	r8,r6[64]
80029b6e:	70 08       	ld.w	r8,r8[0x0]
80029b70:	3f f9       	mov	r9,-1
80029b72:	91 b9       	st.w	r8[0x2c],r9
		twim_inst->idr = ~0UL;
80029b74:	ec f8 00 40 	ld.w	r8,r6[64]
80029b78:	70 08       	ld.w	r8,r8[0x0]
80029b7a:	3f f9       	mov	r9,-1
80029b7c:	91 99       	st.w	r8[0x24],r9
		twim_next = false;
80029b7e:	ec f9 00 bc 	ld.w	r9,r6[188]
80029b82:	30 08       	mov	r8,0
80029b84:	b2 88       	st.b	r9[0x0],r8
80029b86:	c7 68       	rjmp	80029c72 <twim_master_interrupt_handler2+0x15a>
	}
	// this is a RXRDY
	else if (status & AVR32_TWIM_SR_RXRDY_MASK) {
80029b88:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029b8c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
80029b90:	5c 58       	castu.b	r8
80029b92:	c2 90       	breq	80029be4 <twim_master_interrupt_handler2+0xcc>
		// get data from Receive Holding Register
		*twim_rx_data = twim_inst->rhr;
80029b94:	ec f8 00 c0 	ld.w	r8,r6[192]
80029b98:	70 09       	ld.w	r9,r8[0x0]
80029b9a:	ec f8 00 40 	ld.w	r8,r6[64]
80029b9e:	70 08       	ld.w	r8,r8[0x0]
80029ba0:	70 58       	ld.w	r8,r8[0x14]
80029ba2:	5c 58       	castu.b	r8
80029ba4:	b2 88       	st.b	r9[0x0],r8
		twim_rx_data++;
80029ba6:	ec f8 00 c0 	ld.w	r8,r6[192]
80029baa:	70 08       	ld.w	r8,r8[0x0]
80029bac:	f0 c9 ff ff 	sub	r9,r8,-1
80029bb0:	ec f8 00 c0 	ld.w	r8,r6[192]
80029bb4:	91 09       	st.w	r8[0x0],r9
		// decrease recieved bytes number
		twim_rx_nb_bytes--;
80029bb6:	ec f8 01 58 	ld.w	r8,r6[344]
80029bba:	70 08       	ld.w	r8,r8[0x0]
80029bbc:	f0 c9 00 01 	sub	r9,r8,1
80029bc0:	ec f8 01 58 	ld.w	r8,r6[344]
80029bc4:	91 09       	st.w	r8[0x0],r9
		// receive complete
		if (twim_rx_nb_bytes == 0) {
80029bc6:	ec f8 01 58 	ld.w	r8,r6[344]
80029bca:	70 08       	ld.w	r8,r8[0x0]
80029bcc:	58 08       	cp.w	r8,0
80029bce:	c5 21       	brne	80029c72 <twim_master_interrupt_handler2+0x15a>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_RXRDY_MASK;
80029bd0:	ec f8 00 40 	ld.w	r8,r6[64]
80029bd4:	70 08       	ld.w	r8,r8[0x0]
80029bd6:	30 19       	mov	r9,1
80029bd8:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029bda:	ec f9 00 bc 	ld.w	r9,r6[188]
80029bde:	30 08       	mov	r8,0
80029be0:	b2 88       	st.b	r9[0x0],r8
80029be2:	c4 88       	rjmp	80029c72 <twim_master_interrupt_handler2+0x15a>
		}
	}
	// this is a TXRDY
	else if (status & AVR32_TWIM_SR_TXRDY_MASK) {
80029be4:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029be8:	e2 18 00 02 	andl	r8,0x2,COH
80029bec:	c4 30       	breq	80029c72 <twim_master_interrupt_handler2+0x15a>
		// no more bytes to transmit
		if (twim_tx_nb_bytes == 0) {
80029bee:	ec f8 00 88 	ld.w	r8,r6[136]
80029bf2:	70 08       	ld.w	r8,r8[0x0]
80029bf4:	58 08       	cp.w	r8,0
80029bf6:	c0 b1       	brne	80029c0c <twim_master_interrupt_handler2+0xf4>
			// finish the receive operation
			twim_inst->idr = AVR32_TWIM_IDR_TXRDY_MASK;
80029bf8:	ec f8 00 40 	ld.w	r8,r6[64]
80029bfc:	70 08       	ld.w	r8,r8[0x0]
80029bfe:	30 29       	mov	r9,2
80029c00:	91 99       	st.w	r8[0x24],r9
			// set busy to false
			twim_next = false;
80029c02:	ec f9 00 bc 	ld.w	r9,r6[188]
80029c06:	30 08       	mov	r8,0
80029c08:	b2 88       	st.b	r9[0x0],r8
80029c0a:	c3 48       	rjmp	80029c72 <twim_master_interrupt_handler2+0x15a>
		} else {
			// put the byte in the Transmit Holding Register
			twim_inst->thr = *twim_tx_data++;
80029c0c:	ec f8 00 40 	ld.w	r8,r6[64]
80029c10:	70 0a       	ld.w	r10,r8[0x0]
80029c12:	ec f8 00 90 	ld.w	r8,r6[144]
80029c16:	70 08       	ld.w	r8,r8[0x0]
80029c18:	11 89       	ld.ub	r9,r8[0x0]
80029c1a:	5c 59       	castu.b	r9
80029c1c:	95 69       	st.w	r10[0x18],r9
80029c1e:	f0 c9 ff ff 	sub	r9,r8,-1
80029c22:	ec f8 00 90 	ld.w	r8,r6[144]
80029c26:	91 09       	st.w	r8[0x0],r9
			// decrease transmited bytes number
			twim_tx_nb_bytes--;
80029c28:	ec f8 00 88 	ld.w	r8,r6[136]
80029c2c:	70 08       	ld.w	r8,r8[0x0]
80029c2e:	f0 c9 00 01 	sub	r9,r8,1
80029c32:	ec f8 00 88 	ld.w	r8,r6[136]
80029c36:	91 09       	st.w	r8[0x0],r9
			if (twim_tx_nb_bytes == 0) {
80029c38:	ec f8 00 88 	ld.w	r8,r6[136]
80029c3c:	70 08       	ld.w	r8,r8[0x0]
80029c3e:	58 08       	cp.w	r8,0
80029c40:	c1 91       	brne	80029c72 <twim_master_interrupt_handler2+0x15a>
				// Check for next transfer
				if(twim_next) {
80029c42:	ec f8 00 bc 	ld.w	r8,r6[188]
80029c46:	11 88       	ld.ub	r8,r8[0x0]
80029c48:	5c 58       	castu.b	r8
80029c4a:	c1 40       	breq	80029c72 <twim_master_interrupt_handler2+0x15a>
					twim_next = false;
80029c4c:	ec f9 00 bc 	ld.w	r9,r6[188]
80029c50:	30 08       	mov	r8,0
80029c52:	b2 88       	st.b	r9[0x0],r8
					twim_tx_nb_bytes = twim_package->length;
80029c54:	ec f8 02 10 	ld.w	r8,r6[528]
80029c58:	70 08       	ld.w	r8,r8[0x0]
80029c5a:	70 49       	ld.w	r9,r8[0x10]
80029c5c:	ec f8 00 88 	ld.w	r8,r6[136]
80029c60:	91 09       	st.w	r8[0x0],r9
					twim_tx_data = twim_package->buffer;
80029c62:	ec f8 02 10 	ld.w	r8,r6[528]
80029c66:	70 08       	ld.w	r8,r8[0x0]
80029c68:	70 38       	ld.w	r8,r8[0xc]
80029c6a:	10 99       	mov	r9,r8
80029c6c:	ec f8 00 90 	ld.w	r8,r6[144]
80029c70:	91 09       	st.w	r8[0x0],r9
				}
			}
		}
	}
	return;
}
80029c72:	2f fd       	sub	sp,-4
80029c74:	e3 cd 40 c0 	ldm	sp++,r6-r7,lr
80029c78:	d6 03       	rete
80029c7a:	00 00       	add	r0,r0
80029c7c:	80 02       	ld.sh	r2,r0[0x0]
80029c7e:	99 a6       	st.w	r12[0x28],r6

80029c80 <twim_set_speed>:
 * \retval STATUS_OK        Transaction is successful
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 */
status_code_t twim_set_speed (volatile avr32_twim_t *twim, uint32_t speed,
		uint32_t pba_hz)
{
80029c80:	eb cd 40 80 	pushm	r7,lr
80029c84:	1a 97       	mov	r7,sp
80029c86:	20 5d       	sub	sp,20
80029c88:	ef 4c ff f4 	st.w	r7[-12],r12
80029c8c:	ef 4b ff f0 	st.w	r7[-16],r11
80029c90:	ef 4a ff ec 	st.w	r7[-20],r10
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
80029c94:	30 08       	mov	r8,0
80029c96:	ef 68 ff ff 	st.b	r7[-1],r8
	f_prescaled = (pba_hz / speed / 2);
80029c9a:	ee f8 ff ec 	ld.w	r8,r7[-20]
80029c9e:	ee f9 ff f0 	ld.w	r9,r7[-16]
80029ca2:	f0 09 0d 08 	divu	r8,r8,r9
80029ca6:	a1 98       	lsr	r8,0x1
80029ca8:	ef 48 ff f8 	st.w	r7[-8],r8
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80029cac:	c0 b8       	rjmp	80029cc2 <twim_set_speed+0x42>
		// increase clock divider
		cwgr_exp++;
80029cae:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029cb2:	2f f8       	sub	r8,-1
80029cb4:	ef 68 ff ff 	st.b	r7[-1],r8
		// divide f_prescaled value
		f_prescaled /= 2;
80029cb8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cbc:	a1 98       	lsr	r8,0x1
80029cbe:	ef 48 ff f8 	st.w	r7[-8],r8
{
	uint32_t f_prescaled;
	uint8_t cwgr_exp = 0;
	f_prescaled = (pba_hz / speed / 2);
	// f_prescaled must fit in 8 bits, cwgr_exp must fit in 3 bits
	while ((f_prescaled > 0xFF) && (cwgr_exp <= 0x7)) {
80029cc2:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cc6:	e0 48 00 ff 	cp.w	r8,255
80029cca:	e0 88 00 09 	brls	80029cdc <twim_set_speed+0x5c>
80029cce:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029cd2:	30 78       	mov	r8,7
80029cd4:	f0 09 18 00 	cp.b	r9,r8
80029cd8:	fe 98 ff eb 	brls	80029cae <twim_set_speed+0x2e>
		// increase clock divider
		cwgr_exp++;
		// divide f_prescaled value
		f_prescaled /= 2;
	}
	if (cwgr_exp > 0x7) {
80029cdc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029ce0:	30 78       	mov	r8,7
80029ce2:	f0 09 18 00 	cp.b	r9,r8
80029ce6:	e0 88 00 04 	brls	80029cee <twim_set_speed+0x6e>
		return ERR_INVALID_ARG;
80029cea:	3f 88       	mov	r8,-8
80029cec:	c1 a8       	rjmp	80029d20 <twim_set_speed+0xa0>
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80029cee:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cf2:	f0 09 16 01 	lsr	r9,r8,0x1
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
80029cf6:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029cfa:	a1 98       	lsr	r8,0x1
80029cfc:	ee fa ff f8 	ld.w	r10,r7[-8]
80029d00:	f4 08 01 08 	sub	r8,r10,r8
80029d04:	a9 68       	lsl	r8,0x8
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
80029d06:	10 49       	or	r9,r8
80029d08:	ef 38 ff ff 	ld.ub	r8,r7[-1]
80029d0c:	bd 68       	lsl	r8,0x1c
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
80029d0e:	10 49       	or	r9,r8
80029d10:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029d14:	b1 68       	lsl	r8,0x10
	}
	if (cwgr_exp > 0x7) {
		return ERR_INVALID_ARG;
	}
	// set clock waveform generator register
	twim->cwgr = ((f_prescaled/2) << AVR32_TWIM_CWGR_LOW_OFFSET)
80029d16:	10 49       	or	r9,r8
80029d18:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d1c:	91 19       	st.w	r8[0x4],r9
			| ((f_prescaled - f_prescaled/2) << AVR32_TWIM_CWGR_HIGH_OFFSET)
			| (cwgr_exp << AVR32_TWIM_CWGR_EXP_OFFSET)
			| (0     << AVR32_TWIM_CWGR_DATA_OFFSET)
			| (f_prescaled << AVR32_TWIM_CWGR_STASTO_OFFSET);
	return STATUS_OK;
80029d1e:	30 08       	mov	r8,0
}
80029d20:	10 9c       	mov	r12,r8
80029d22:	2f bd       	sub	sp,-20
80029d24:	e3 cd 80 80 	ldm	sp++,r7,pc

80029d28 <twim_master_init>:
 * \retval ERR_INVALID_ARG  Invalid arg resulting in wrong CWGR Exponential
 * \retval ERR_IO_ERROR     NACK is received or Bus Arbitration lost
 */
status_code_t twim_master_init (volatile avr32_twim_t *twim,
		const twim_options_t *opt)
{
80029d28:	eb cd 40 c0 	pushm	r6-r7,lr
80029d2c:	1a 97       	mov	r7,sp
80029d2e:	20 4d       	sub	sp,16
80029d30:	4c 06       	lddpc	r6,80029e30 <twim_master_init+0x108>
80029d32:	1e 26       	rsub	r6,pc
80029d34:	ef 4c ff f4 	st.w	r7[-12],r12
80029d38:	ef 4b ff f0 	st.w	r7[-16],r11
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80029d3c:	e1 b8 00 00 	mfsr	r8,0x0
80029d40:	10 9c       	mov	r12,r8
80029d42:	c1 6e       	rcall	8002996e <cpu_irq_is_enabled_flags>
80029d44:	18 98       	mov	r8,r12
80029d46:	ef 68 ff fb 	st.b	r7[-5],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80029d4a:	ec f8 00 7c 	ld.w	r8,r6[124]
80029d4e:	30 09       	mov	r9,0
80029d50:	91 09       	st.w	r8[0x0],r9
	// Disable TWI interrupts
	if (global_interrupt_enabled) {
80029d52:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80029d56:	30 08       	mov	r8,0
80029d58:	f0 09 18 00 	cp.b	r9,r8
80029d5c:	c0 20       	breq	80029d60 <twim_master_init+0x38>
		cpu_irq_disable ();
80029d5e:	d3 03       	ssrf	0x10
	}
	twim->idr = ~0UL;
80029d60:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d64:	3f f9       	mov	r9,-1
80029d66:	91 99       	st.w	r8[0x24],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
80029d68:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d6c:	30 19       	mov	r9,1
80029d6e:	91 09       	st.w	r8[0x0],r9
	// Reset TWI
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
80029d70:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d74:	e0 69 00 80 	mov	r9,128
80029d78:	91 09       	st.w	r8[0x0],r9
	if (global_interrupt_enabled) {
80029d7a:	ef 39 ff fb 	ld.ub	r9,r7[-5]
80029d7e:	30 08       	mov	r8,0
80029d80:	f0 09 18 00 	cp.b	r9,r8
80029d84:	c0 20       	breq	80029d88 <twim_master_init+0x60>
		cpu_irq_enable ();
80029d86:	d5 03       	csrf	0x10
	}
	// Clear SR
	twim->scr = ~0UL;
80029d88:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029d8c:	3f f9       	mov	r9,-1
80029d8e:	91 b9       	st.w	r8[0x2c],r9
	
	// register Register twim_master_interrupt_handler interrupt on level CONF_TWIM_IRQ_LEVEL
	irqflags_t flags = cpu_irq_save();
80029d90:	fe b0 fd e0 	rcall	80029950 <cpu_irq_save>
80029d94:	18 98       	mov	r8,r12
80029d96:	ef 48 ff fc 	st.w	r7[-4],r8
	irq_register_handler(twim_master_interrupt_handler,
80029d9a:	30 1a       	mov	r10,1
80029d9c:	e0 6b 03 20 	mov	r11,800
80029da0:	fe cc 03 f8 	sub	r12,pc,1016
80029da4:	f0 16 00 3b 	mcall	r6[236]
			CONF_TWIM_IRQ_LINE, CONF_TWIM_IRQ_LEVEL);
	irq_register_handler(twim_master_interrupt_handler2,
80029da8:	30 1a       	mov	r10,1
80029daa:	e0 6b 03 40 	mov	r11,832
80029dae:	fe cc 02 96 	sub	r12,pc,662
80029db2:	f0 16 00 3b 	mcall	r6[236]
	AVR32_TWIM1_IRQ , CONF_TWIM_IRQ_LEVEL);
	cpu_irq_restore(flags);
80029db6:	ee fc ff fc 	ld.w	r12,r7[-4]
80029dba:	fe b0 fd ea 	rcall	8002998e <cpu_irq_restore>
	
	if (opt->smbus) {
80029dbe:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dc2:	f1 38 00 0c 	ld.ub	r8,r8[12]
80029dc6:	58 08       	cp.w	r8,0
80029dc8:	c0 90       	breq	80029dda <twim_master_init+0xb2>
		// Enable SMBUS Transfer
		twim->cr = AVR32_TWIM_CR_SMEN_MASK;
80029dca:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029dce:	31 09       	mov	r9,16
80029dd0:	91 09       	st.w	r8[0x0],r9
		twim->smbtr = (uint32_t) -1;
80029dd2:	ee f8 ff f4 	ld.w	r8,r7[-12]
80029dd6:	3f f9       	mov	r9,-1
80029dd8:	91 29       	st.w	r8[0x8],r9
	}
	// Select the speed
	if (twim_set_speed (twim, opt->speed, opt->pba_hz) == 
80029dda:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029dde:	70 09       	ld.w	r9,r8[0x0]
80029de0:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029de4:	70 18       	ld.w	r8,r8[0x4]
80029de6:	12 9a       	mov	r10,r9
80029de8:	10 9b       	mov	r11,r8
80029dea:	ee fc ff f4 	ld.w	r12,r7[-12]
80029dee:	f0 16 01 37 	mcall	r6[1244]
80029df2:	18 98       	mov	r8,r12
80029df4:	5b 88       	cp.w	r8,-8
80029df6:	c0 31       	brne	80029dfc <twim_master_init+0xd4>
			ERR_INVALID_ARG) {
		return ERR_INVALID_ARG;
80029df8:	3f 88       	mov	r8,-8
80029dfa:	c1 68       	rjmp	80029e26 <twim_master_init+0xfe>
	}
	// Probe the component
	twim_probe (twim, opt->chip);
80029dfc:	ee f8 ff f0 	ld.w	r8,r7[-16]
80029e00:	70 28       	ld.w	r8,r8[0x8]
80029e02:	10 9b       	mov	r11,r8
80029e04:	ee fc ff f4 	ld.w	r12,r7[-12]
80029e08:	f0 16 01 0f 	mcall	r6[1084]
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
80029e0c:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e10:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
80029e12:	5b c8       	cp.w	r8,-4
80029e14:	c0 60       	breq	80029e20 <twim_master_init+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
80029e16:	ec f8 00 7c 	ld.w	r8,r6[124]
80029e1a:	70 08       	ld.w	r8,r8[0x0]
		return ERR_INVALID_ARG;
	}
	// Probe the component
	twim_probe (twim, opt->chip);
	//Check for nack and abitration
	if (transfer_status == TWI_RECEIVE_NACK
80029e1c:	5b e8       	cp.w	r8,-2
80029e1e:	c0 31       	brne	80029e24 <twim_master_init+0xfc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
80029e20:	3f f8       	mov	r8,-1
80029e22:	c0 28       	rjmp	80029e26 <twim_master_init+0xfe>
	}
	return STATUS_OK;
80029e24:	30 08       	mov	r8,0
}
80029e26:	10 9c       	mov	r12,r8
80029e28:	2f cd       	sub	sp,-16
80029e2a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e2e:	00 00       	add	r0,r0
80029e30:	80 02       	ld.sh	r2,r0[0x0]
80029e32:	9b b6       	st.w	sp[0x2c],r6

80029e34 <twim_disable_interrupt>:
 * \brief Disable the TWI interrupts and clear its status register
 *
 * \param twim         Base address of the TWIM (i.e. &AVR32_TWI).
 */
void twim_disable_interrupt (volatile avr32_twim_t *twim)
{
80029e34:	eb cd 40 c0 	pushm	r6-r7,lr
80029e38:	1a 97       	mov	r7,sp
80029e3a:	20 2d       	sub	sp,8
80029e3c:	48 f6       	lddpc	r6,80029e78 <twim_disable_interrupt+0x44>
80029e3e:	1e 26       	rsub	r6,pc
80029e40:	ef 4c ff f8 	st.w	r7[-8],r12
	bool global_interrupt_enabled = cpu_irq_is_enabled ();
80029e44:	e1 b8 00 00 	mfsr	r8,0x0
80029e48:	10 9c       	mov	r12,r8
80029e4a:	fe b0 fd 92 	rcall	8002996e <cpu_irq_is_enabled_flags>
80029e4e:	18 98       	mov	r8,r12
80029e50:	ef 68 ff ff 	st.b	r7[-1],r8
	if (global_interrupt_enabled) {
80029e54:	ef 39 ff ff 	ld.ub	r9,r7[-1]
80029e58:	30 08       	mov	r8,0
80029e5a:	f0 09 18 00 	cp.b	r9,r8
80029e5e:	c0 20       	breq	80029e62 <twim_disable_interrupt+0x2e>
		cpu_irq_disable ();
80029e60:	d3 03       	ssrf	0x10
	}
	// Clear the interrupt flags
	twim->idr = ~0UL;
80029e62:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e66:	3f f9       	mov	r9,-1
80029e68:	91 99       	st.w	r8[0x24],r9
	// Clear the status flags
	twim->scr = ~0UL;
80029e6a:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029e6e:	3f f9       	mov	r9,-1
80029e70:	91 b9       	st.w	r8[0x2c],r9
}
80029e72:	2f ed       	sub	sp,-8
80029e74:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029e78:	80 02       	ld.sh	r2,r0[0x0]
80029e7a:	9c c2       	ld.uh	r2,lr[0x8]

80029e7c <twim_probe>:
 * \param chip_addr       Address of the chip which is searched for
 * \retval STATUS_OK      Slave Found
 * \retval ERR_IO_ERROR   ANAK received or Bus Arbitration lost
 */
status_code_t twim_probe (volatile avr32_twim_t *twim, uint32_t chip_addr)
{
80029e7c:	eb cd 40 c0 	pushm	r6-r7,lr
80029e80:	1a 97       	mov	r7,sp
80029e82:	20 3d       	sub	sp,12
80029e84:	48 c6       	lddpc	r6,80029eb4 <twim_probe+0x38>
80029e86:	1e 26       	rsub	r6,pc
80029e88:	ef 4c ff f8 	st.w	r7[-8],r12
80029e8c:	ef 4b ff f4 	st.w	r7[-12],r11
	uint8_t data[1] = { 0 };
80029e90:	30 08       	mov	r8,0
80029e92:	ef 68 ff fc 	st.b	r7[-4],r8
	return (twim_write (twim,data,0,chip_addr,0));
80029e96:	ee cb 00 04 	sub	r11,r7,4
80029e9a:	30 08       	mov	r8,0
80029e9c:	ee f9 ff f4 	ld.w	r9,r7[-12]
80029ea0:	30 0a       	mov	r10,0
80029ea2:	ee fc ff f8 	ld.w	r12,r7[-8]
80029ea6:	f0 16 00 36 	mcall	r6[216]
80029eaa:	18 98       	mov	r8,r12
}
80029eac:	10 9c       	mov	r12,r8
80029eae:	2f dd       	sub	sp,-12
80029eb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
80029eb4:	80 02       	ld.sh	r2,r0[0x0]
80029eb6:	9d 0a       	st.w	lr[0x0],r10

80029eb8 <twim_read_packet>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
80029eb8:	eb cd 40 c0 	pushm	r6-r7,lr
80029ebc:	1a 97       	mov	r7,sp
80029ebe:	20 2d       	sub	sp,8
80029ec0:	4e 76       	lddpc	r6,8002a05c <twim_read_packet+0x1a4>
80029ec2:	1e 26       	rsub	r6,pc
80029ec4:	ef 4c ff fc 	st.w	r7[-4],r12
80029ec8:	ef 4b ff f8 	st.w	r7[-8],r11
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
80029ecc:	ee f8 ff fc 	ld.w	r8,r7[-4]
80029ed0:	30 29       	mov	r9,2
80029ed2:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
80029ed4:	ec f8 00 40 	ld.w	r8,r6[64]
80029ed8:	ee f9 ff fc 	ld.w	r9,r7[-4]
80029edc:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
80029ede:	ec f8 00 40 	ld.w	r8,r6[64]
80029ee2:	70 08       	ld.w	r8,r8[0x0]
80029ee4:	10 9c       	mov	r12,r8
80029ee6:	f0 16 00 82 	mcall	r6[520]
	// get a pointer to applicative data
	twim_rx_data = package->buffer;
80029eea:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029eee:	70 38       	ld.w	r8,r8[0xc]
80029ef0:	10 99       	mov	r9,r8
80029ef2:	ec f8 00 c0 	ld.w	r8,r6[192]
80029ef6:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = package->length;
80029ef8:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029efc:	70 49       	ld.w	r9,r8[0x10]
80029efe:	ec f8 01 58 	ld.w	r8,r6[344]
80029f02:	91 09       	st.w	r8[0x0],r9
	// Set next write transfer to false
	twim_next = false;
80029f04:	ec f9 00 bc 	ld.w	r9,r6[188]
80029f08:	30 08       	mov	r8,0
80029f0a:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
80029f0c:	ec f8 00 7c 	ld.w	r8,r6[124]
80029f10:	30 09       	mov	r9,0
80029f12:	91 09       	st.w	r8[0x0],r9
	//check if internal address access is performed
	if (package->addr_length) {
80029f14:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f18:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f1c:	58 08       	cp.w	r8,0
80029f1e:	c5 60       	breq	80029fca <twim_read_packet+0x112>
		// Reset the TWIM module to clear the THR register
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
80029f20:	ec f8 00 40 	ld.w	r8,r6[64]
80029f24:	70 08       	ld.w	r8,r8[0x0]
80029f26:	30 19       	mov	r9,1
80029f28:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_SWRST_MASK;
80029f2a:	ec f8 00 40 	ld.w	r8,r6[64]
80029f2e:	70 08       	ld.w	r8,r8[0x0]
80029f30:	e0 69 00 80 	mov	r9,128
80029f34:	91 09       	st.w	r8[0x0],r9
		twim_inst->cr = AVR32_TWIM_CR_MDIS_MASK;
80029f36:	ec f8 00 40 	ld.w	r8,r6[64]
80029f3a:	70 08       	ld.w	r8,r8[0x0]
80029f3c:	30 29       	mov	r9,2
80029f3e:	91 09       	st.w	r8[0x0],r9
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
80029f40:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f44:	2f c8       	sub	r8,-4
80029f46:	10 99       	mov	r9,r8
80029f48:	ec f8 00 90 	ld.w	r8,r6[144]
80029f4c:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
80029f4e:	ec f8 00 90 	ld.w	r8,r6[144]
80029f52:	70 09       	ld.w	r9,r8[0x0]
80029f54:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f58:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f5c:	f0 08 11 04 	rsub	r8,r8,4
80029f60:	10 09       	add	r9,r8
80029f62:	ec f8 00 90 	ld.w	r8,r6[144]
80029f66:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
80029f68:	ee f8 ff f8 	ld.w	r8,r7[-8]
80029f6c:	f1 38 00 08 	ld.ub	r8,r8[8]
80029f70:	10 99       	mov	r9,r8
80029f72:	ec f8 00 88 	ld.w	r8,r6[136]
80029f76:	91 09       	st.w	r8[0x0],r9
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
80029f78:	ec f8 01 08 	ld.w	r8,r6[264]
80029f7c:	e0 69 07 03 	mov	r9,1795
80029f80:	91 09       	st.w	r8[0x0],r9
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029f82:	ec f8 00 40 	ld.w	r8,r6[64]
80029f86:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029f88:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029f8c:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029f8e:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80029f92:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029f96:	f3 39 00 08 	ld.ub	r9,r9[8]
80029f9a:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029f9c:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_nb_bytes = package->addr_length;
		// mask NACK, TXRDY and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | 
				AVR32_TWIM_IER_TXRDY_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029fa0:	e8 19 a0 00 	orl	r9,0xa000
80029fa4:	91 39       	st.w	r8[0xc],r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80029fa6:	ec f8 00 40 	ld.w	r8,r6[64]
80029faa:	70 08       	ld.w	r8,r8[0x0]
80029fac:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fb0:	72 09       	ld.w	r9,r9[0x0]
80029fb2:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029fb6:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fba:	72 49       	ld.w	r9,r9[0x10]
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80029fbc:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029fbe:	f5 e9 10 09 	or	r9,r10,r9
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
80029fc2:	e8 19 e0 01 	orl	r9,0xe001
80029fc6:	91 49       	st.w	r8[0x10],r9
80029fc8:	c1 b8       	rjmp	80029ffe <twim_read_packet+0x146>
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_tx_nb_bytes = 0;
80029fca:	ec f8 00 88 	ld.w	r8,r6[136]
80029fce:	30 09       	mov	r9,0
80029fd0:	91 09       	st.w	r8[0x0],r9
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
80029fd2:	ec f8 01 08 	ld.w	r8,r6[264]
80029fd6:	e0 69 07 01 	mov	r9,1793
80029fda:	91 09       	st.w	r8[0x0],r9
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029fdc:	ec f8 00 40 	ld.w	r8,r6[64]
80029fe0:	70 08       	ld.w	r8,r8[0x0]
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029fe2:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029fe6:	72 09       	ld.w	r9,r9[0x0]
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029fe8:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029fec:	ee f9 ff f8 	ld.w	r9,r7[-8]
80029ff0:	72 49       	ld.w	r9,r9[0x10]
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
80029ff2:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
80029ff4:	f5 e9 10 09 	or	r9,r10,r9
	} else {
		twim_tx_nb_bytes = 0;
		// mask NACK and RXRDY interrupts
		twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
		// Set the command register to initiate the transfer
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
80029ff8:	e8 19 e0 01 	orl	r9,0xe001
80029ffc:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
80029ffe:	ec f8 00 40 	ld.w	r8,r6[64]
8002a002:	70 08       	ld.w	r8,r8[0x0]
8002a004:	ec f9 01 08 	ld.w	r9,r6[264]
8002a008:	72 09       	ld.w	r9,r9[0x0]
8002a00a:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a00c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a010:	30 19       	mov	r9,1
8002a012:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a014:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a016:	c0 38       	rjmp	8002a01c <twim_read_packet+0x164>
		cpu_relax();
8002a018:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a01c:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a020:	70 08       	ld.w	r8,r8[0x0]
8002a022:	58 08       	cp.w	r8,0
8002a024:	c0 61       	brne	8002a030 <twim_read_packet+0x178>
8002a026:	f0 16 00 72 	mcall	r6[456]
8002a02a:	18 98       	mov	r8,r12
8002a02c:	58 08       	cp.w	r8,0
8002a02e:	cf 50       	breq	8002a018 <twim_read_packet+0x160>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a030:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a034:	30 29       	mov	r9,2
8002a036:	91 09       	st.w	r8[0x0],r9
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a038:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a03c:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a03e:	5b c8       	cp.w	r8,-4
8002a040:	c0 60       	breq	8002a04c <twim_read_packet+0x194>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a042:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a046:	70 08       	ld.w	r8,r8[0x0]
	while (!(transfer_status) && !(twim_status ())) {
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	if (transfer_status == TWI_RECEIVE_NACK
8002a048:	5b e8       	cp.w	r8,-2
8002a04a:	c0 31       	brne	8002a050 <twim_read_packet+0x198>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a04c:	3f f8       	mov	r8,-1
8002a04e:	c0 28       	rjmp	8002a052 <twim_read_packet+0x19a>
	}
	return STATUS_OK;
8002a050:	30 08       	mov	r8,0
}
8002a052:	10 9c       	mov	r12,r8
8002a054:	2f ed       	sub	sp,-8
8002a056:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a05a:	00 00       	add	r0,r0
8002a05c:	80 02       	ld.sh	r2,r0[0x0]
8002a05e:	9d 46       	st.w	lr[0x10],r6

8002a060 <twim_read>:
 * \retval STATUS_OK      If all bytes were read successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_read (volatile avr32_twim_t *twim, uint8_t *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a060:	eb cd 40 c0 	pushm	r6-r7,lr
8002a064:	1a 97       	mov	r7,sp
8002a066:	20 5d       	sub	sp,20
8002a068:	4c c6       	lddpc	r6,8002a198 <twim_read+0x138>
8002a06a:	1e 26       	rsub	r6,pc
8002a06c:	ef 4c ff fc 	st.w	r7[-4],r12
8002a070:	ef 4b ff f8 	st.w	r7[-8],r11
8002a074:	ef 4a ff f4 	st.w	r7[-12],r10
8002a078:	ef 49 ff f0 	st.w	r7[-16],r9
8002a07c:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a080:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a084:	30 19       	mov	r9,1
8002a086:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a088:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a08c:	e0 69 00 80 	mov	r9,128
8002a090:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a092:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a096:	30 29       	mov	r9,2
8002a098:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a09a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a09e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a0a2:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a0a4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0a8:	70 08       	ld.w	r8,r8[0x0]
8002a0aa:	10 9c       	mov	r12,r8
8002a0ac:	f0 16 00 82 	mcall	r6[520]
	// get a pointer to applicative data
	twim_rx_data = buffer;
8002a0b0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a0b4:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a0b8:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to read
	twim_rx_nb_bytes = nbytes;
8002a0ba:	ec f8 01 58 	ld.w	r8,r6[344]
8002a0be:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a0c2:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a0c4:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a0c8:	30 08       	mov	r8,0
8002a0ca:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a0cc:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a0d0:	30 09       	mov	r9,0
8002a0d2:	91 09       	st.w	r8[0x0],r9
	//tenbit need special handling
	if (tenbit)	{
8002a0d4:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a0d8:	30 08       	mov	r8,0
8002a0da:	f0 09 18 00 	cp.b	r9,r8
8002a0de:	c1 a0       	breq	8002a112 <twim_read+0xb2>
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a0e0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0e4:	70 08       	ld.w	r8,r8[0x0]
8002a0e6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a0ea:	a1 79       	lsl	r9,0x1
8002a0ec:	e8 19 a8 00 	orl	r9,0xa800
8002a0f0:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a0f2:	ec f8 00 40 	ld.w	r8,r6[64]
8002a0f6:	70 08       	ld.w	r8,r8[0x0]
8002a0f8:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a0fc:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a100:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a104:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a106:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim_inst->ncmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a10a:	e8 19 f8 01 	orl	r9,0xf801
8002a10e:	91 49       	st.w	r8[0x10],r9
8002a110:	c1 08       	rjmp	8002a130 <twim_read+0xd0>
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a112:	ec f8 00 40 	ld.w	r8,r6[64]
8002a116:	70 08       	ld.w	r8,r8[0x0]
8002a118:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a11c:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a120:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a124:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a126:	f5 e9 10 09 	or	r9,r10,r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
	} else {
		twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a12a:	e8 19 e0 01 	orl	r9,0xe001
8002a12e:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| (AVR32_TWIM_CMDR_READ_MASK);
	}
	// mask NACK and RXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_RXRDY_MASK;
8002a130:	ec f8 01 08 	ld.w	r8,r6[264]
8002a134:	e0 69 07 01 	mov	r9,1793
8002a138:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a13a:	ec f8 00 40 	ld.w	r8,r6[64]
8002a13e:	70 08       	ld.w	r8,r8[0x0]
8002a140:	ec f9 01 08 	ld.w	r9,r6[264]
8002a144:	72 09       	ld.w	r9,r9[0x0]
8002a146:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a148:	ec f8 00 40 	ld.w	r8,r6[64]
8002a14c:	70 08       	ld.w	r8,r8[0x0]
8002a14e:	30 19       	mov	r9,1
8002a150:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a152:	d5 03       	csrf	0x10
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a154:	c0 38       	rjmp	8002a15a <twim_read+0xfa>
		cpu_relax();
8002a156:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// get data
	while (!(transfer_status) && !(twim_status ())) {
8002a15a:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a15e:	70 08       	ld.w	r8,r8[0x0]
8002a160:	58 08       	cp.w	r8,0
8002a162:	c0 61       	brne	8002a16e <twim_read+0x10e>
8002a164:	f0 16 00 72 	mcall	r6[456]
8002a168:	18 98       	mov	r8,r12
8002a16a:	58 08       	cp.w	r8,0
8002a16c:	cf 50       	breq	8002a156 <twim_read+0xf6>
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a16e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a172:	30 29       	mov	r9,2
8002a174:	91 09       	st.w	r8[0x0],r9
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a176:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a17a:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a17c:	5b c8       	cp.w	r8,-4
8002a17e:	c0 60       	breq	8002a18a <twim_read+0x12a>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a180:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a184:	70 08       	ld.w	r8,r8[0x0]
		cpu_relax();
	}
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
	//Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a186:	5b e8       	cp.w	r8,-2
8002a188:	c0 31       	brne	8002a18e <twim_read+0x12e>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a18a:	3f f8       	mov	r8,-1
8002a18c:	c0 28       	rjmp	8002a190 <twim_read+0x130>
	}
	return STATUS_OK;
8002a18e:	30 08       	mov	r8,0
}
8002a190:	10 9c       	mov	r12,r8
8002a192:	2f bd       	sub	sp,-20
8002a194:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a198:	80 02       	ld.sh	r2,r0[0x0]
8002a19a:	9e ee       	ld.uh	lr,pc[0xc]

8002a19c <twim_write_packet>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write_packet (volatile avr32_twim_t *twim,
		const twim_package_t *package)
{
8002a19c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a1a0:	1a 97       	mov	r7,sp
8002a1a2:	20 2d       	sub	sp,8
8002a1a4:	4f 16       	lddpc	r6,8002a368 <twim_write_packet+0x1cc>
8002a1a6:	1e 26       	rsub	r6,pc
8002a1a8:	ef 4c ff fc 	st.w	r7[-4],r12
8002a1ac:	ef 4b ff f8 	st.w	r7[-8],r11
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a1b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1b4:	30 19       	mov	r9,1
8002a1b6:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a1b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1bc:	e0 69 00 80 	mov	r9,128
8002a1c0:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a1c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a1c6:	30 29       	mov	r9,2
8002a1c8:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a1ca:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1ce:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a1d2:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a1d4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a1d8:	70 08       	ld.w	r8,r8[0x0]
8002a1da:	10 9c       	mov	r12,r8
8002a1dc:	f0 16 00 82 	mcall	r6[520]
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a1e0:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a1e4:	30 09       	mov	r9,0
8002a1e6:	91 09       	st.w	r8[0x0],r9
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_STD_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a1e8:	ec f8 01 08 	ld.w	r8,r6[264]
8002a1ec:	e0 69 07 02 	mov	r9,1794
8002a1f0:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a1f2:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a1f6:	30 08       	mov	r8,0
8002a1f8:	b2 88       	st.b	r9[0x0],r8
	//check if internal address access is performed
	if (package->addr_length) {
8002a1fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a1fe:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a202:	58 08       	cp.w	r8,0
8002a204:	c6 40       	breq	8002a2cc <twim_write_packet+0x130>
		// selection of first valid byte of the address
		twim_tx_data = (uint8_t *) (&(package->addr));
8002a206:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a20a:	2f c8       	sub	r8,-4
8002a20c:	10 99       	mov	r9,r8
8002a20e:	ec f8 00 90 	ld.w	r8,r6[144]
8002a212:	91 09       	st.w	r8[0x0],r9
		twim_tx_data += (4 - package->addr_length);
8002a214:	ec f8 00 90 	ld.w	r8,r6[144]
8002a218:	70 09       	ld.w	r9,r8[0x0]
8002a21a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a21e:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a222:	f0 08 11 04 	rsub	r8,r8,4
8002a226:	10 09       	add	r9,r8
8002a228:	ec f8 00 90 	ld.w	r8,r6[144]
8002a22c:	91 09       	st.w	r8[0x0],r9
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
8002a22e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a232:	f1 38 00 08 	ld.ub	r8,r8[8]
8002a236:	10 99       	mov	r9,r8
8002a238:	ec f8 00 88 	ld.w	r8,r6[136]
8002a23c:	91 09       	st.w	r8[0x0],r9
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a23e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a242:	70 08       	ld.w	r8,r8[0x0]
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a244:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a248:	72 09       	ld.w	r9,r9[0x0]
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a24a:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->addr_length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a24e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a252:	f3 39 00 08 	ld.ub	r9,r9[8]
8002a256:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a258:	f5 e9 10 09 	or	r9,r10,r9
		twim_tx_data = (uint8_t *) (&(package->addr));
		twim_tx_data += (4 - package->addr_length);
		// set the number of bytes to transmit
		twim_tx_nb_bytes = package->addr_length;
		// Initiate the transfer to send the internal address
		twim_inst->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a25c:	e8 19 a0 00 	orl	r9,0xa000
8002a260:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// set next transfer to true
		twim_next = true;
8002a262:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a266:	30 18       	mov	r8,1
8002a268:	b2 88       	st.b	r9[0x0],r8
		// Set the number of bytes & address for next transfer
		twim_package = package;
8002a26a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a26e:	ec f8 02 10 	ld.w	r8,r6[528]
8002a272:	91 09       	st.w	r8[0x0],r9
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a274:	ec f8 00 40 	ld.w	r8,r6[64]
8002a278:	70 08       	ld.w	r8,r8[0x0]
8002a27a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a27e:	72 09       	ld.w	r9,r9[0x0]
8002a280:	f2 0a 15 01 	lsl	r10,r9,0x1
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a284:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a288:	72 49       	ld.w	r9,r9[0x10]
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a28a:	b1 69       	lsl	r9,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a28c:	f5 e9 10 09 	or	r9,r10,r9
		// set next transfer to true
		twim_next = true;
		// Set the number of bytes & address for next transfer
		twim_package = package;
		// set the next command register to followup with the previous command
		twim_inst->ncmdr = ((package->chip) << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a290:	e8 19 e0 00 	orl	r9,0xe000
8002a294:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (AVR32_TWIM_CMDR_STOP_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
		// update IMR through IER
		twim_inst->ier = twim_it_mask;
8002a296:	ec f8 00 40 	ld.w	r8,r6[64]
8002a29a:	70 08       	ld.w	r8,r8[0x0]
8002a29c:	ec f9 01 08 	ld.w	r9,r6[264]
8002a2a0:	72 09       	ld.w	r9,r9[0x0]
8002a2a2:	91 89       	st.w	r8[0x20],r9
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a2a4:	ec f8 00 40 	ld.w	r8,r6[64]
8002a2a8:	70 08       	ld.w	r8,r8[0x0]
8002a2aa:	30 19       	mov	r9,1
8002a2ac:	91 09       	st.w	r8[0x0],r9
		// Enable all interrupts
		cpu_irq_enable ();
8002a2ae:	d5 03       	csrf	0x10
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a2b0:	c0 38       	rjmp	8002a2b6 <twim_write_packet+0x11a>
		cpu_relax();
8002a2b2:	fe cf ff fc 	sub	pc,pc,-4
		// Enable master transfer
		twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
		// Enable all interrupts
		cpu_irq_enable ();
		// wait until Busy to be false
		while (!(transfer_status) && !(twim_status ())) {
8002a2b6:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a2ba:	70 08       	ld.w	r8,r8[0x0]
8002a2bc:	58 08       	cp.w	r8,0
8002a2be:	c3 f1       	brne	8002a33c <twim_write_packet+0x1a0>
8002a2c0:	f0 16 00 72 	mcall	r6[456]
8002a2c4:	18 98       	mov	r8,r12
8002a2c6:	58 08       	cp.w	r8,0
8002a2c8:	cf 50       	breq	8002a2b2 <twim_write_packet+0x116>
8002a2ca:	c3 98       	rjmp	8002a33c <twim_write_packet+0x1a0>
		cpu_relax();
		}
	} else {
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
8002a2cc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2d0:	70 38       	ld.w	r8,r8[0xc]
8002a2d2:	10 99       	mov	r9,r8
8002a2d4:	ec f8 00 90 	ld.w	r8,r6[144]
8002a2d8:	91 09       	st.w	r8[0x0],r9
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
8002a2da:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2de:	70 49       	ld.w	r9,r8[0x10]
8002a2e0:	ec f8 00 88 	ld.w	r8,r6[136]
8002a2e4:	91 09       	st.w	r8[0x0],r9
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2ea:	70 08       	ld.w	r8,r8[0x0]
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a2ec:	f0 09 15 01 	lsl	r9,r8,0x1
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2f0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a2f4:	70 48       	ld.w	r8,r8[0x10]
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (package->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a2f6:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a2f8:	f3 e8 10 08 	or	r8,r9,r8
	// get a pointer to applicative data
	twim_tx_data = package->buffer;
	// get a copy of nb bytes to write
	twim_tx_nb_bytes = package->length;
	// initiate the transfer to send the data
	twim->cmdr = (package->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a2fc:	10 99       	mov	r9,r8
8002a2fe:	e8 19 e0 00 	orl	r9,0xe000
8002a302:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a306:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK) 
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a308:	ec f8 00 40 	ld.w	r8,r6[64]
8002a30c:	70 08       	ld.w	r8,r8[0x0]
8002a30e:	ec f9 01 08 	ld.w	r9,r6[264]
8002a312:	72 09       	ld.w	r9,r9[0x0]
8002a314:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a316:	ec f8 00 40 	ld.w	r8,r6[64]
8002a31a:	70 08       	ld.w	r8,r8[0x0]
8002a31c:	30 19       	mov	r9,1
8002a31e:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a320:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a322:	c0 38       	rjmp	8002a328 <twim_write_packet+0x18c>
		cpu_relax();
8002a324:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a328:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a32c:	70 08       	ld.w	r8,r8[0x0]
8002a32e:	58 08       	cp.w	r8,0
8002a330:	c0 61       	brne	8002a33c <twim_write_packet+0x1a0>
8002a332:	f0 16 00 72 	mcall	r6[456]
8002a336:	18 98       	mov	r8,r12
8002a338:	58 08       	cp.w	r8,0
8002a33a:	cf 50       	breq	8002a324 <twim_write_packet+0x188>
		cpu_relax();
	}}
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a33c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a340:	30 29       	mov	r9,2
8002a342:	91 09       	st.w	r8[0x0],r9
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a344:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a348:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a34a:	5b c8       	cp.w	r8,-4
8002a34c:	c0 60       	breq	8002a358 <twim_write_packet+0x1bc>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a34e:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a352:	70 08       	ld.w	r8,r8[0x0]
#if AVR32_TWIM_H_VERSION > 101	//Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	// Check for nack
	if (transfer_status == TWI_RECEIVE_NACK
8002a354:	5b e8       	cp.w	r8,-2
8002a356:	c0 31       	brne	8002a35c <twim_write_packet+0x1c0>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a358:	3f f8       	mov	r8,-1
8002a35a:	c0 28       	rjmp	8002a35e <twim_write_packet+0x1c2>
	}
	return STATUS_OK;
8002a35c:	30 08       	mov	r8,0
}
8002a35e:	10 9c       	mov	r12,r8
8002a360:	2f ed       	sub	sp,-8
8002a362:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a366:	00 00       	add	r0,r0
8002a368:	80 02       	ld.sh	r2,r0[0x0]
8002a36a:	a0 2a       	st.h	r0[0x4],r10

8002a36c <twim_write>:
 * \retval STATUS_OK      If all bytes were send successfully
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_write (volatile avr32_twim_t *twim, uint8_t const *buffer,
		uint32_t nbytes, uint32_t saddr, bool tenbit)
{
8002a36c:	eb cd 40 c0 	pushm	r6-r7,lr
8002a370:	1a 97       	mov	r7,sp
8002a372:	20 5d       	sub	sp,20
8002a374:	4b f6       	lddpc	r6,8002a470 <twim_write+0x104>
8002a376:	1e 26       	rsub	r6,pc
8002a378:	ef 4c ff fc 	st.w	r7[-4],r12
8002a37c:	ef 4b ff f8 	st.w	r7[-8],r11
8002a380:	ef 4a ff f4 	st.w	r7[-12],r10
8002a384:	ef 49 ff f0 	st.w	r7[-16],r9
8002a388:	ef 68 ff ec 	st.b	r7[-20],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a38c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a390:	30 19       	mov	r9,1
8002a392:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a394:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a398:	e0 69 00 80 	mov	r9,128
8002a39c:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a39e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a3a2:	30 29       	mov	r9,2
8002a3a4:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a3a6:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a3ae:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a3b0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3b4:	70 08       	ld.w	r8,r8[0x0]
8002a3b6:	10 9c       	mov	r12,r8
8002a3b8:	f0 16 00 82 	mcall	r6[520]
	// get a pointer to applicative data
	twim_tx_data = buffer;
8002a3bc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002a3c0:	ec f8 00 90 	ld.w	r8,r6[144]
8002a3c4:	91 09       	st.w	r8[0x0],r9
	// set the number of bytes to transmit
	twim_tx_nb_bytes = nbytes;
8002a3c6:	ec f8 00 88 	ld.w	r8,r6[136]
8002a3ca:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a3ce:	91 09       	st.w	r8[0x0],r9
	// Set next transfer to false
	twim_next = false;
8002a3d0:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a3d4:	30 08       	mov	r8,0
8002a3d6:	b2 88       	st.b	r9[0x0],r8
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
8002a3d8:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a3dc:	30 09       	mov	r9,0
8002a3de:	91 09       	st.w	r8[0x0],r9
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3e0:	ec f8 00 40 	ld.w	r8,r6[64]
8002a3e4:	70 08       	ld.w	r8,r8[0x0]
8002a3e6:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002a3ea:	f2 0a 15 01 	lsl	r10,r9,0x1
			| (nbytes << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a3ee:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a3f2:	b1 69       	lsl	r9,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a3f4:	12 4a       	or	r10,r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a3f6:	ef 39 ff ec 	ld.ub	r9,r7[-20]
8002a3fa:	ab 79       	lsl	r9,0xb
	// Set next transfer to false
	twim_next = false;
	// Initialize bus transfer status
	transfer_status = TWI_SUCCESS;
	// set the command to start the transfer
	twim_inst->cmdr = (saddr << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a3fc:	f5 e9 10 09 	or	r9,r10,r9
8002a400:	e8 19 e0 00 	orl	r9,0xe000
8002a404:	91 39       	st.w	r8[0xc],r9
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (0 << AVR32_TWIM_CMDR_READ_OFFSET);
	// mask NACK and TXRDY interrupts
	twim_it_mask = AVR32_TWIM_IER_NAK_MASK | AVR32_TWIM_IER_TXRDY_MASK;
8002a406:	ec f8 01 08 	ld.w	r8,r6[264]
8002a40a:	e0 69 03 02 	mov	r9,770
8002a40e:	91 09       	st.w	r8[0x0],r9
	// update IMR through IER
	twim_inst->ier = twim_it_mask;
8002a410:	ec f8 00 40 	ld.w	r8,r6[64]
8002a414:	70 08       	ld.w	r8,r8[0x0]
8002a416:	ec f9 01 08 	ld.w	r9,r6[264]
8002a41a:	72 09       	ld.w	r9,r9[0x0]
8002a41c:	91 89       	st.w	r8[0x20],r9
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
8002a41e:	ec f8 00 40 	ld.w	r8,r6[64]
8002a422:	70 08       	ld.w	r8,r8[0x0]
8002a424:	30 19       	mov	r9,1
8002a426:	91 09       	st.w	r8[0x0],r9
	// Enable all interrupts
	cpu_irq_enable ();
8002a428:	d5 03       	csrf	0x10
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a42a:	c0 38       	rjmp	8002a430 <twim_write+0xc4>
		cpu_relax();
8002a42c:	fe cf ff fc 	sub	pc,pc,-4
	// Enable master transfer
	twim_inst->cr = AVR32_TWIM_CR_MEN_MASK;
	// Enable all interrupts
	cpu_irq_enable ();
	// send data
	while (!(transfer_status) && !(twim_status ())) {
8002a430:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a434:	70 08       	ld.w	r8,r8[0x0]
8002a436:	58 08       	cp.w	r8,0
8002a438:	c0 61       	brne	8002a444 <twim_write+0xd8>
8002a43a:	f0 16 00 72 	mcall	r6[456]
8002a43e:	18 98       	mov	r8,r12
8002a440:	58 08       	cp.w	r8,0
8002a442:	cf 50       	breq	8002a42c <twim_write+0xc0>
		cpu_relax();
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a444:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a448:	30 29       	mov	r9,2
8002a44a:	91 09       	st.w	r8[0x0],r9
#endif
	if (transfer_status == TWI_RECEIVE_NACK
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a44c:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a450:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a452:	5b c8       	cp.w	r8,-4
8002a454:	c0 60       	breq	8002a460 <twim_write+0xf4>
			|| transfer_status == TWI_ARBITRATION_LOST) {
8002a456:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a45a:	70 08       	ld.w	r8,r8[0x0]
	}
#if AVR32_TWIM_H_VERSION > 101	// Removed in twim100 module due to IC bug
	// Disable master transfer
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
#endif
	if (transfer_status == TWI_RECEIVE_NACK
8002a45c:	5b e8       	cp.w	r8,-2
8002a45e:	c0 31       	brne	8002a464 <twim_write+0xf8>
			|| transfer_status == TWI_ARBITRATION_LOST) {
		return ERR_IO_ERROR;
8002a460:	3f f8       	mov	r8,-1
8002a462:	c0 28       	rjmp	8002a466 <twim_write+0xfa>
	}
	return STATUS_OK;
8002a464:	30 08       	mov	r8,0
}
8002a466:	10 9c       	mov	r12,r8
8002a468:	2f bd       	sub	sp,-20
8002a46a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a46e:	00 00       	add	r0,r0
8002a470:	80 02       	ld.sh	r2,r0[0x0]
8002a472:	a1 fa       	*unknown*

8002a474 <twim_chained_transfer>:
 * \retval ERR_IO_ERROR   NACK received or Bus Arbitration lost
 */
status_code_t twim_chained_transfer (volatile avr32_twim_t *twim,
		volatile twim_transfer_t *first,
		volatile twim_transfer_t *second, bool tenbit)
{
8002a474:	eb cd 40 c0 	pushm	r6-r7,lr
8002a478:	1a 97       	mov	r7,sp
8002a47a:	20 4d       	sub	sp,16
8002a47c:	fe f6 03 4c 	ld.w	r6,pc[844]
8002a480:	1e 26       	rsub	r6,pc
8002a482:	ef 4c ff fc 	st.w	r7[-4],r12
8002a486:	ef 4b ff f8 	st.w	r7[-8],r11
8002a48a:	ef 4a ff f4 	st.w	r7[-12],r10
8002a48e:	12 98       	mov	r8,r9
8002a490:	ef 68 ff f0 	st.b	r7[-16],r8
	// Reset the TWIM module to clear the THR register
	twim->cr = AVR32_TWIM_CR_MEN_MASK;
8002a494:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a498:	30 19       	mov	r9,1
8002a49a:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_SWRST_MASK;
8002a49c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4a0:	e0 69 00 80 	mov	r9,128
8002a4a4:	91 09       	st.w	r8[0x0],r9
	twim->cr = AVR32_TWIM_CR_MDIS_MASK;
8002a4a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4aa:	30 29       	mov	r9,2
8002a4ac:	91 09       	st.w	r8[0x0],r9
	// Set pointer to TWIM instance for IT
	twim_inst = twim;
8002a4ae:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a4b6:	91 09       	st.w	r8[0x0],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
8002a4b8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a4bc:	70 08       	ld.w	r8,r8[0x0]
8002a4be:	10 9c       	mov	r12,r8
8002a4c0:	f0 16 00 82 	mcall	r6[520]
	// Set next transfer to false
	twim_next = false;
8002a4c4:	ec f9 00 bc 	ld.w	r9,r6[188]
8002a4c8:	30 08       	mov	r8,0
8002a4ca:	b2 88       	st.b	r9[0x0],r8
	transfer_status = TWI_SUCCESS;
8002a4cc:	ec f8 00 7c 	ld.w	r8,r6[124]
8002a4d0:	30 09       	mov	r9,0
8002a4d2:	91 09       	st.w	r8[0x0],r9
	if (tenbit && first->read) {
8002a4d4:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a4d8:	30 08       	mov	r8,0
8002a4da:	f0 09 18 00 	cp.b	r9,r8
8002a4de:	c3 00       	breq	8002a53e <twim_chained_transfer+0xca>
8002a4e0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4e4:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a4e8:	5c 58       	castu.b	r8
8002a4ea:	c2 a0       	breq	8002a53e <twim_chained_transfer+0xca>
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (0 << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a4ec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a4f0:	70 08       	ld.w	r8,r8[0x0]
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a4f2:	a1 78       	lsl	r8,0x1
8002a4f4:	10 99       	mov	r9,r8
8002a4f6:	e8 19 a8 00 	orl	r9,0xa800
8002a4fa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a4fe:	91 39       	st.w	r8[0xc],r9
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a500:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a504:	70 08       	ld.w	r8,r8[0x0]
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a506:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a50a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a50e:	70 28       	ld.w	r8,r8[0x8]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a510:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a512:	f3 e8 10 08 	or	r8,r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (0 << AVR32_TWIM_CMDR_READ_OFFSET);

		twim->ncmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a516:	10 99       	mov	r9,r8
8002a518:	e8 19 b8 01 	orl	r9,0xb801
8002a51c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a520:	91 49       	st.w	r8[0x10],r9
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a522:	c0 38       	rjmp	8002a528 <twim_chained_transfer+0xb4>
			cpu_relax();
8002a524:	fe cf ff fc 	sub	pc,pc,-4
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| (AVR32_TWIM_CMDR_TENBIT_MASK)
				| (AVR32_TWIM_CMDR_REPSAME_MASK)
				| (AVR32_TWIM_CMDR_READ_MASK);
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a528:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a52c:	70 78       	ld.w	r8,r8[0x1c]
8002a52e:	e2 18 00 08 	andl	r8,0x8,COH
8002a532:	cf 90       	breq	8002a524 <twim_chained_transfer+0xb0>
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002a534:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a538:	30 89       	mov	r9,8
8002a53a:	91 b9       	st.w	r8[0x2c],r9
	// Disable the TWIM interrupts
	twim_disable_interrupt (twim_inst);
	// Set next transfer to false
	twim_next = false;
	transfer_status = TWI_SUCCESS;
	if (tenbit && first->read) {
8002a53c:	c1 c8       	rjmp	8002a574 <twim_chained_transfer+0x100>
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a53e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a542:	70 08       	ld.w	r8,r8[0x0]
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a544:	f0 09 15 01 	lsl	r9,r8,0x1
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a548:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a54c:	70 28       	ld.w	r8,r8[0x8]
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a54e:	b1 68       	lsl	r8,0x10
				| (AVR32_TWIM_CMDR_VALID_MASK)
8002a550:	10 49       	or	r9,r8
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a552:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a556:	ab 78       	lsl	r8,0xb
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a558:	10 49       	or	r9,r8
				| (first->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
				| (AVR32_TWIM_CMDR_VALID_MASK)
				| (AVR32_TWIM_CMDR_START_MASK)
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a55a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a55e:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a562:	5c 58       	castu.b	r8
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			cpu_relax();
		}
		twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
	} else {
		twim->cmdr = (first->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a564:	f3 e8 10 08 	or	r8,r9,r8
8002a568:	10 99       	mov	r9,r8
8002a56a:	e8 19 a0 00 	orl	r9,0xa000
8002a56e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a572:	91 39       	st.w	r8[0xc],r9
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a574:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a578:	70 08       	ld.w	r8,r8[0x0]
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a57a:	f0 09 15 01 	lsl	r9,r8,0x1
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a57e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a582:	70 28       	ld.w	r8,r8[0x8]
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
8002a584:	b1 68       	lsl	r8,0x10
			| (AVR32_TWIM_CMDR_VALID_MASK)
8002a586:	10 49       	or	r9,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
8002a588:	ef 38 ff f0 	ld.ub	r8,r7[-16]
8002a58c:	ab 78       	lsl	r8,0xb
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a58e:	f3 e8 10 0a 	or	r10,r9,r8
			| (second->length << AVR32_TWIM_CMDR_NBYTES_OFFSET)
			| (AVR32_TWIM_CMDR_VALID_MASK)
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
8002a592:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002a596:	30 08       	mov	r8,0
8002a598:	f0 09 18 00 	cp.b	r9,r8
8002a59c:	c0 90       	breq	8002a5ae <twim_chained_transfer+0x13a>
8002a59e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a5a2:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5a6:	5c 58       	castu.b	r8
8002a5a8:	c0 30       	breq	8002a5ae <twim_chained_transfer+0x13a>
8002a5aa:	30 18       	mov	r8,1
8002a5ac:	c0 28       	rjmp	8002a5b0 <twim_chained_transfer+0x13c>
8002a5ae:	30 08       	mov	r8,0
8002a5b0:	ad 68       	lsl	r8,0xc
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5b2:	f5 e8 10 09 	or	r9,r10,r8
			| (AVR32_TWIM_CMDR_START_MASK)
			| (AVR32_TWIM_CMDR_STOP_MASK)
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
8002a5b6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a5ba:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5be:	5c 58       	castu.b	r8
				| (0 << AVR32_TWIM_CMDR_STOP_OFFSET)
				| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
				| ((first->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);
	}

	twim->ncmdr = (second->chip << AVR32_TWIM_CMDR_SADR_OFFSET)
8002a5c0:	f3 e8 10 08 	or	r8,r9,r8
8002a5c4:	10 99       	mov	r9,r8
8002a5c6:	e8 19 e0 00 	orl	r9,0xe000
8002a5ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a5ce:	91 49       	st.w	r8[0x10],r9
			| ((tenbit ? 1 : 0) << AVR32_TWIM_CMDR_TENBIT_OFFSET)
			| (((tenbit && second->read) ? 1 : 0) 
			<< AVR32_TWIM_CMDR_REPSAME_OFFSET)
			| ((second->read ? 1 : 0) << AVR32_TWIM_CMDR_READ_OFFSET);

	if (first->read) {
8002a5d0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5d4:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a5d8:	5c 58       	castu.b	r8
8002a5da:	c3 80       	breq	8002a64a <twim_chained_transfer+0x1d6>
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
8002a5dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a5e0:	70 18       	ld.w	r8,r8[0x4]
8002a5e2:	10 99       	mov	r9,r8
8002a5e4:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a5e8:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a5ea:	c1 58       	rjmp	8002a614 <twim_chained_transfer+0x1a0>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a5ec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a5f0:	70 78       	ld.w	r8,r8[0x1c]
8002a5f2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a5f6:	5c 58       	castu.b	r8
8002a5f8:	c0 e0       	breq	8002a614 <twim_chained_transfer+0x1a0>
				*twim_rx_data++ = twim->rhr;
8002a5fa:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a5fe:	70 08       	ld.w	r8,r8[0x0]
8002a600:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a604:	72 59       	ld.w	r9,r9[0x14]
8002a606:	5c 59       	castu.b	r9
8002a608:	b0 89       	st.b	r8[0x0],r9
8002a60a:	f0 c9 ff ff 	sub	r9,r8,-1
8002a60e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a612:	91 09       	st.w	r8[0x0],r9

	if (first->read) {
		// get a pointer to applicative data
		twim_rx_data = first->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a614:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a618:	70 78       	ld.w	r8,r8[0x1c]
8002a61a:	e2 18 00 08 	andl	r8,0x8,COH
8002a61e:	ce 70       	breq	8002a5ec <twim_chained_transfer+0x178>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
				*twim_rx_data++ = twim->rhr;
			}
		}
		if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a620:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a624:	70 78       	ld.w	r8,r8[0x1c]
8002a626:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a62a:	5c 58       	castu.b	r8
8002a62c:	c4 40       	breq	8002a6b4 <twim_chained_transfer+0x240>
			*twim_rx_data++ = twim->rhr;
8002a62e:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a632:	70 08       	ld.w	r8,r8[0x0]
8002a634:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a638:	72 59       	ld.w	r9,r9[0x14]
8002a63a:	5c 59       	castu.b	r9
8002a63c:	b0 89       	st.b	r8[0x0],r9
8002a63e:	f0 c9 ff ff 	sub	r9,r8,-1
8002a642:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a646:	91 09       	st.w	r8[0x0],r9
8002a648:	c3 68       	rjmp	8002a6b4 <twim_chained_transfer+0x240>
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
8002a64a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a64e:	70 18       	ld.w	r8,r8[0x4]
8002a650:	10 99       	mov	r9,r8
8002a652:	ec f8 00 90 	ld.w	r8,r6[144]
8002a656:	91 09       	st.w	r8[0x0],r9
		twim_tx_nb_bytes = first->length;
8002a658:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a65c:	70 29       	ld.w	r9,r8[0x8]
8002a65e:	ec f8 00 88 	ld.w	r8,r6[136]
8002a662:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a664:	c2 28       	rjmp	8002a6a8 <twim_chained_transfer+0x234>
			if ((twim_tx_nb_bytes > 0) &&
8002a666:	ec f8 00 88 	ld.w	r8,r6[136]
8002a66a:	70 08       	ld.w	r8,r8[0x0]
8002a66c:	58 08       	cp.w	r8,0
8002a66e:	c1 d0       	breq	8002a6a8 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002a670:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a674:	70 78       	ld.w	r8,r8[0x1c]
8002a676:	e2 18 00 02 	andl	r8,0x2,COH
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
			if ((twim_tx_nb_bytes > 0) &&
8002a67a:	c1 70       	breq	8002a6a8 <twim_chained_transfer+0x234>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
				twim->thr = *twim_tx_data++;
8002a67c:	ec f8 00 90 	ld.w	r8,r6[144]
8002a680:	70 08       	ld.w	r8,r8[0x0]
8002a682:	11 89       	ld.ub	r9,r8[0x0]
8002a684:	5c 59       	castu.b	r9
8002a686:	12 9a       	mov	r10,r9
8002a688:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a68c:	93 6a       	st.w	r9[0x18],r10
8002a68e:	f0 c9 ff ff 	sub	r9,r8,-1
8002a692:	ec f8 00 90 	ld.w	r8,r6[144]
8002a696:	91 09       	st.w	r8[0x0],r9
				twim_tx_nb_bytes--;
8002a698:	ec f8 00 88 	ld.w	r8,r6[136]
8002a69c:	70 08       	ld.w	r8,r8[0x0]
8002a69e:	f0 c9 00 01 	sub	r9,r8,1
8002a6a2:	ec f8 00 88 	ld.w	r8,r6[136]
8002a6a6:	91 09       	st.w	r8[0x0],r9
	} else {
		// get a pointer to applicative data
		twim_tx_data = first->buffer;
		twim_tx_nb_bytes = first->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_CCOMP_MASK)) {
8002a6a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6ac:	70 78       	ld.w	r8,r8[0x1c]
8002a6ae:	e2 18 00 08 	andl	r8,0x8,COH
8002a6b2:	cd a0       	breq	8002a666 <twim_chained_transfer+0x1f2>
				twim_tx_nb_bytes--;
			}
		}
	}

	twim->scr = AVR32_TWIM_SR_CCOMP_MASK;
8002a6b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6b8:	30 89       	mov	r9,8
8002a6ba:	91 b9       	st.w	r8[0x2c],r9

	if (second->read) {
8002a6bc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a6c0:	f1 38 00 0c 	ld.ub	r8,r8[12]
8002a6c4:	5c 58       	castu.b	r8
8002a6c6:	c2 40       	breq	8002a70e <twim_chained_transfer+0x29a>
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
8002a6c8:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a6cc:	70 18       	ld.w	r8,r8[0x4]
8002a6ce:	10 99       	mov	r9,r8
8002a6d0:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a6d4:	91 09       	st.w	r8[0x0],r9
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a6d6:	c1 58       	rjmp	8002a700 <twim_chained_transfer+0x28c>
			if (twim->sr & AVR32_TWIM_SR_RXRDY_MASK) {
8002a6d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a6dc:	70 78       	ld.w	r8,r8[0x1c]
8002a6de:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002a6e2:	5c 58       	castu.b	r8
8002a6e4:	c0 e0       	breq	8002a700 <twim_chained_transfer+0x28c>
				*twim_rx_data++ = twim->rhr;
8002a6e6:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a6ea:	70 08       	ld.w	r8,r8[0x0]
8002a6ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a6f0:	72 59       	ld.w	r9,r9[0x14]
8002a6f2:	5c 59       	castu.b	r9
8002a6f4:	b0 89       	st.b	r8[0x0],r9
8002a6f6:	f0 c9 ff ff 	sub	r9,r8,-1
8002a6fa:	ec f8 00 c0 	ld.w	r8,r6[192]
8002a6fe:	91 09       	st.w	r8[0x0],r9

	if (second->read) {
		// get a pointer to applicative data
		twim_rx_data = second->buffer;
		// get data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a700:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a704:	70 78       	ld.w	r8,r8[0x1c]
8002a706:	e2 18 00 10 	andl	r8,0x10,COH
8002a70a:	ce 70       	breq	8002a6d8 <twim_chained_transfer+0x264>
8002a70c:	c3 68       	rjmp	8002a778 <twim_chained_transfer+0x304>
				*twim_rx_data++ = twim->rhr;
			}
		}
	} else {
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
8002a70e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a712:	70 18       	ld.w	r8,r8[0x4]
8002a714:	10 99       	mov	r9,r8
8002a716:	ec f8 00 90 	ld.w	r8,r6[144]
8002a71a:	91 09       	st.w	r8[0x0],r9
		
		twim_tx_nb_bytes = second->length;
8002a71c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a720:	70 29       	ld.w	r9,r8[0x8]
8002a722:	ec f8 00 88 	ld.w	r8,r6[136]
8002a726:	91 09       	st.w	r8[0x0],r9
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a728:	c2 28       	rjmp	8002a76c <twim_chained_transfer+0x2f8>
			if ((twim_tx_nb_bytes > 0) && 
8002a72a:	ec f8 00 88 	ld.w	r8,r6[136]
8002a72e:	70 08       	ld.w	r8,r8[0x0]
8002a730:	58 08       	cp.w	r8,0
8002a732:	c1 d0       	breq	8002a76c <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
8002a734:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a738:	70 78       	ld.w	r8,r8[0x1c]
8002a73a:	e2 18 00 02 	andl	r8,0x2,COH
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
			if ((twim_tx_nb_bytes > 0) && 
8002a73e:	c1 70       	breq	8002a76c <twim_chained_transfer+0x2f8>
					(twim->sr & AVR32_TWIM_SR_TXRDY_MASK)) {
			twim->thr = *twim_tx_data++;
8002a740:	ec f8 00 90 	ld.w	r8,r6[144]
8002a744:	70 08       	ld.w	r8,r8[0x0]
8002a746:	11 89       	ld.ub	r9,r8[0x0]
8002a748:	5c 59       	castu.b	r9
8002a74a:	12 9a       	mov	r10,r9
8002a74c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a750:	93 6a       	st.w	r9[0x18],r10
8002a752:	f0 c9 ff ff 	sub	r9,r8,-1
8002a756:	ec f8 00 90 	ld.w	r8,r6[144]
8002a75a:	91 09       	st.w	r8[0x0],r9
			twim_tx_nb_bytes--;
8002a75c:	ec f8 00 88 	ld.w	r8,r6[136]
8002a760:	70 08       	ld.w	r8,r8[0x0]
8002a762:	f0 c9 00 01 	sub	r9,r8,1
8002a766:	ec f8 00 88 	ld.w	r8,r6[136]
8002a76a:	91 09       	st.w	r8[0x0],r9
		// get a pointer to applicative data
		twim_tx_data = second->buffer;
		
		twim_tx_nb_bytes = second->length;
		// send data
		while (!(twim->sr & AVR32_TWIM_SR_IDLE_MASK)) {
8002a76c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a770:	70 78       	ld.w	r8,r8[0x1c]
8002a772:	e2 18 00 10 	andl	r8,0x10,COH
8002a776:	cd a0       	breq	8002a72a <twim_chained_transfer+0x2b6>
			twim_tx_nb_bytes--;
			}
		}
	}

	if (twim->sr & AVR32_TWIM_SR_ARBLST_MASK) {
8002a778:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a77c:	70 78       	ld.w	r8,r8[0x1c]
8002a77e:	e2 18 04 00 	andl	r8,0x400,COH
8002a782:	c0 80       	breq	8002a792 <twim_chained_transfer+0x31e>
		twim->scr = AVR32_TWIM_SCR_ARBLST_MASK;
8002a784:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a788:	e0 69 04 00 	mov	r9,1024
8002a78c:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002a78e:	3f f8       	mov	r8,-1
8002a790:	c1 88       	rjmp	8002a7c0 <twim_chained_transfer+0x34c>
	}

	if (twim->sr & AVR32_TWIM_SR_NAK_MASK) {
8002a792:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a796:	70 78       	ld.w	r8,r8[0x1c]
8002a798:	e2 18 03 00 	andl	r8,0x300,COH
8002a79c:	c1 10       	breq	8002a7be <twim_chained_transfer+0x34a>
		twim->cmdr = twim->cmdr ^ AVR32_TWIM_CMDR_VALID_MASK;
8002a79e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7a2:	70 38       	ld.w	r8,r8[0xc]
8002a7a4:	10 99       	mov	r9,r8
8002a7a6:	ec 19 80 00 	eorl	r9,0x8000
8002a7aa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7ae:	91 39       	st.w	r8[0xc],r9
		twim->scr = AVR32_TWIM_SCR_NAK_MASK;
8002a7b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7b4:	e0 69 03 00 	mov	r9,768
8002a7b8:	91 b9       	st.w	r8[0x2c],r9
		return ERR_IO_ERROR;
8002a7ba:	3f f8       	mov	r8,-1
8002a7bc:	c0 28       	rjmp	8002a7c0 <twim_chained_transfer+0x34c>
	}
	return STATUS_OK;
8002a7be:	30 08       	mov	r8,0
}
8002a7c0:	10 9c       	mov	r12,r8
8002a7c2:	2f cd       	sub	sp,-16
8002a7c4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a7c8:	80 02       	ld.sh	r2,r0[0x0]
8002a7ca:	a3 04       	ld.d	r4,r1

8002a7cc <twim_status>:

/**
 * \brief Information about the current status of the TWI Bus
 */
uint8_t twim_status ( void )
{
8002a7cc:	eb cd 40 c0 	pushm	r6-r7,lr
8002a7d0:	1a 97       	mov	r7,sp
8002a7d2:	20 1d       	sub	sp,4
8002a7d4:	48 a6       	lddpc	r6,8002a7fc <twim_status+0x30>
8002a7d6:	1e 26       	rsub	r6,pc
	uint32_t status = twim_inst->sr;
8002a7d8:	ec f8 00 40 	ld.w	r8,r6[64]
8002a7dc:	70 08       	ld.w	r8,r8[0x0]
8002a7de:	70 78       	ld.w	r8,r8[0x1c]
8002a7e0:	ef 48 ff fc 	st.w	r7[-4],r8
	if ((status & AVR32_TWIM_SR_IDLE_MASK)
8002a7e4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a7e8:	e2 18 00 10 	andl	r8,0x10,COH
8002a7ec:	c0 30       	breq	8002a7f2 <twim_status+0x26>
#if AVR32_TWIM_H_VERSION > 101 ||(status&AVR32_TWIM_SR_BUSFREE_MASK)
#endif 
		) {
		return 1;
8002a7ee:	30 18       	mov	r8,1
8002a7f0:	c0 28       	rjmp	8002a7f4 <twim_status+0x28>
	} else {
		return 0;
8002a7f2:	30 08       	mov	r8,0
	}
}
8002a7f4:	10 9c       	mov	r12,r8
8002a7f6:	2f fd       	sub	sp,-4
8002a7f8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002a7fc:	80 02       	ld.sh	r2,r0[0x0]
8002a7fe:	a6 5a       	st.h	r3[0xa],r10

8002a800 <cpu_irq_is_enabled_flags>:

	return flags;
}

static inline bool cpu_irq_is_enabled_flags(irqflags_t flags)
{
8002a800:	eb cd 40 80 	pushm	r7,lr
8002a804:	1a 97       	mov	r7,sp
8002a806:	20 1d       	sub	sp,4
8002a808:	ef 4c ff fc 	st.w	r7[-4],r12
	return !(flags & AVR32_SR_GM_MASK);
8002a80c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a810:	e6 18 00 01 	andh	r8,0x1,COH
8002a814:	5f 08       	sreq	r8
8002a816:	5c 58       	castu.b	r8
}
8002a818:	10 9c       	mov	r12,r8
8002a81a:	2f fd       	sub	sp,-4
8002a81c:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a820 <usart_set_async_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_async_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002a820:	eb cd 40 80 	pushm	r7,lr
8002a824:	1a 97       	mov	r7,sp
8002a826:	20 7d       	sub	sp,28
8002a828:	ef 4c ff ec 	st.w	r7[-20],r12
8002a82c:	ef 4b ff e8 	st.w	r7[-24],r11
8002a830:	ef 4a ff e4 	st.w	r7[-28],r10
  unsigned int over = (pba_hz >= 16 * baudrate) ? 16 : 8;
8002a834:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a838:	f0 09 15 04 	lsl	r9,r8,0x4
8002a83c:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a840:	10 39       	cp.w	r9,r8
8002a842:	e0 8b 00 04 	brhi	8002a84a <usart_set_async_baudrate+0x2a>
8002a846:	31 08       	mov	r8,16
8002a848:	c0 28       	rjmp	8002a84c <usart_set_async_baudrate+0x2c>
8002a84a:	30 88       	mov	r8,8
8002a84c:	ef 48 ff f0 	st.w	r7[-16],r8
  unsigned int cd_fp = ((1 << AVR32_USART_BRGR_FP_SIZE) * pba_hz + (over * baudrate) / 2) / (over * baudrate);
8002a850:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002a854:	f0 09 15 03 	lsl	r9,r8,0x3
8002a858:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a85c:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002a860:	f4 08 02 48 	mul	r8,r10,r8
8002a864:	a1 98       	lsr	r8,0x1
8002a866:	f2 08 00 08 	add	r8,r9,r8
8002a86a:	ee fa ff f0 	ld.w	r10,r7[-16]
8002a86e:	ee f9 ff e8 	ld.w	r9,r7[-24]
8002a872:	f4 09 02 49 	mul	r9,r10,r9
8002a876:	f0 09 0d 08 	divu	r8,r8,r9
8002a87a:	ef 48 ff f4 	st.w	r7[-12],r8
  unsigned int cd = cd_fp >> AVR32_USART_BRGR_FP_SIZE;
8002a87e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a882:	a3 98       	lsr	r8,0x3
8002a884:	ef 48 ff f8 	st.w	r7[-8],r8
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);
8002a888:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a88c:	f1 d8 c0 03 	bfextu	r8,r8,0x0,0x3
8002a890:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002a894:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a898:	58 08       	cp.w	r8,0
8002a89a:	c0 70       	breq	8002a8a8 <usart_set_async_baudrate+0x88>
8002a89c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8a0:	e0 48 ff ff 	cp.w	r8,65535
8002a8a4:	e0 88 00 04 	brls	8002a8ac <usart_set_async_baudrate+0x8c>
    return USART_INVALID_INPUT;
8002a8a8:	30 18       	mov	r8,1
8002a8aa:	c2 08       	rjmp	8002a8ea <usart_set_async_baudrate+0xca>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
8002a8ac:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a8b0:	70 18       	ld.w	r8,r8[0x4]
8002a8b2:	10 99       	mov	r9,r8
8002a8b4:	e4 19 ff f7 	andh	r9,0xfff7
8002a8b8:	e0 19 fe cf 	andl	r9,0xfecf
  unsigned int fp = cd_fp & ((1 << AVR32_USART_BRGR_FP_SIZE) - 1);

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
    return USART_INVALID_INPUT;

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002a8bc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a8c0:	59 08       	cp.w	r8,16
8002a8c2:	c0 40       	breq	8002a8ca <usart_set_async_baudrate+0xaa>
8002a8c4:	e8 68 00 00 	mov	r8,524288
8002a8c8:	c0 28       	rjmp	8002a8cc <usart_set_async_baudrate+0xac>
8002a8ca:	30 08       	mov	r8,0
8002a8cc:	10 49       	or	r9,r8
8002a8ce:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a8d2:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
                fp << AVR32_USART_BRGR_FP_OFFSET;
8002a8d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a8d8:	f0 09 15 10 	lsl	r9,r8,0x10
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              ((over == 16) ? AVR32_USART_MR_OVER_X16 : AVR32_USART_MR_OVER_X8) << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET |
8002a8dc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a8e0:	10 49       	or	r9,r8
8002a8e2:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002a8e6:	91 89       	st.w	r8[0x20],r9
                fp << AVR32_USART_BRGR_FP_OFFSET;

  return USART_SUCCESS;
8002a8e8:	30 08       	mov	r8,0
}
8002a8ea:	10 9c       	mov	r12,r8
8002a8ec:	2f 9d       	sub	sp,-28
8002a8ee:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a8f2 <usart_set_sync_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_sync_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002a8f2:	eb cd 40 80 	pushm	r7,lr
8002a8f6:	1a 97       	mov	r7,sp
8002a8f8:	20 4d       	sub	sp,16
8002a8fa:	ef 4c ff f8 	st.w	r7[-8],r12
8002a8fe:	ef 4b ff f4 	st.w	r7[-12],r11
8002a902:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002a906:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a90a:	f0 09 16 01 	lsr	r9,r8,0x1
8002a90e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a912:	f2 08 00 08 	add	r8,r9,r8
8002a916:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a91a:	f0 09 0d 08 	divu	r8,r8,r9
8002a91e:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002a922:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a926:	58 08       	cp.w	r8,0
8002a928:	c0 70       	breq	8002a936 <usart_set_sync_master_baudrate+0x44>
8002a92a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a92e:	e0 48 ff ff 	cp.w	r8,65535
8002a932:	e0 88 00 04 	brls	8002a93a <usart_set_sync_master_baudrate+0x48>
    return USART_INVALID_INPUT;
8002a936:	30 18       	mov	r8,1
8002a938:	c1 18       	rjmp	8002a95a <usart_set_sync_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002a93a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a93e:	70 18       	ld.w	r8,r8[0x4]
8002a940:	e0 18 fe cf 	andl	r8,0xfecf
8002a944:	10 99       	mov	r9,r8
8002a946:	a9 a9       	sbr	r9,0x8
8002a948:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a94c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002a94e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a952:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a956:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002a958:	30 08       	mov	r8,0
}
8002a95a:	10 9c       	mov	r12,r8
8002a95c:	2f cd       	sub	sp,-16
8002a95e:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a962 <usart_set_sync_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_sync_slave_baudrate(volatile avr32_usart_t *usart)
{
8002a962:	eb cd 40 80 	pushm	r7,lr
8002a966:	1a 97       	mov	r7,sp
8002a968:	20 1d       	sub	sp,4
8002a96a:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002a96e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a972:	70 18       	ld.w	r8,r8[0x4]
8002a974:	10 99       	mov	r9,r8
8002a976:	e8 19 01 30 	orl	r9,0x130
8002a97a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a97e:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_SYNC_MASK;

  return USART_SUCCESS;
8002a980:	30 08       	mov	r8,0
}
8002a982:	10 9c       	mov	r12,r8
8002a984:	2f fd       	sub	sp,-4
8002a986:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a98a <usart_set_iso7816_clock>:
 *
 * \retval USART_SUCCESS        ISO7816 clock successfully initialized.
 * \retval USART_INVALID_INPUT  ISO7816 clock set point is out of range for the given input clock frequency.
 */
static int usart_set_iso7816_clock(volatile avr32_usart_t *usart, unsigned int clock, unsigned long pba_hz)
{
8002a98a:	eb cd 40 80 	pushm	r7,lr
8002a98e:	1a 97       	mov	r7,sp
8002a990:	20 4d       	sub	sp,16
8002a992:	ef 4c ff f8 	st.w	r7[-8],r12
8002a996:	ef 4b ff f4 	st.w	r7[-12],r11
8002a99a:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + clock / 2) / clock;
8002a99e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002a9a2:	f0 09 16 01 	lsr	r9,r8,0x1
8002a9a6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002a9aa:	f2 08 00 08 	add	r8,r9,r8
8002a9ae:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002a9b2:	f0 09 0d 08 	divu	r8,r8,r9
8002a9b6:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 1 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002a9ba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9be:	58 08       	cp.w	r8,0
8002a9c0:	c0 70       	breq	8002a9ce <usart_set_iso7816_clock+0x44>
8002a9c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002a9c6:	e0 48 ff ff 	cp.w	r8,65535
8002a9ca:	e0 88 00 04 	brls	8002a9d2 <usart_set_iso7816_clock+0x48>
    return USART_INVALID_INPUT;
8002a9ce:	30 18       	mov	r8,1
8002a9d0:	c1 28       	rjmp	8002a9f4 <usart_set_iso7816_clock+0x6a>

  usart->mr = (usart->mr & ~(AVR32_USART_MR_USCLKS_MASK |
8002a9d2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9d6:	70 18       	ld.w	r8,r8[0x4]
8002a9d8:	10 99       	mov	r9,r8
8002a9da:	e4 19 ff f7 	andh	r9,0xfff7
8002a9de:	e0 19 fe cf 	andl	r9,0xfecf
8002a9e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9e6:	91 19       	st.w	r8[0x4],r9
                             AVR32_USART_MR_SYNC_MASK |
                             AVR32_USART_MR_OVER_MASK)) |
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET |
              AVR32_USART_MR_OVER_X16 << AVR32_USART_MR_OVER_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002a9e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002a9ec:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002a9f0:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002a9f2:	30 08       	mov	r8,0
}
8002a9f4:	10 9c       	mov	r12,r8
8002a9f6:	2f cd       	sub	sp,-16
8002a9f8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002a9fc <usart_set_spi_master_baudrate>:
 *
 * \retval USART_SUCCESS        Baud rate successfully initialized.
 * \retval USART_INVALID_INPUT  Baud rate set point is out of range for the given input clock frequency.
 */
static int usart_set_spi_master_baudrate(volatile avr32_usart_t *usart, unsigned int baudrate, unsigned long pba_hz)
{
8002a9fc:	eb cd 40 80 	pushm	r7,lr
8002aa00:	1a 97       	mov	r7,sp
8002aa02:	20 4d       	sub	sp,16
8002aa04:	ef 4c ff f8 	st.w	r7[-8],r12
8002aa08:	ef 4b ff f4 	st.w	r7[-12],r11
8002aa0c:	ef 4a ff f0 	st.w	r7[-16],r10
  unsigned int cd = (pba_hz + baudrate / 2) / baudrate;
8002aa10:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002aa14:	f0 09 16 01 	lsr	r9,r8,0x1
8002aa18:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002aa1c:	f2 08 00 08 	add	r8,r9,r8
8002aa20:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002aa24:	f0 09 0d 08 	divu	r8,r8,r9
8002aa28:	ef 48 ff fc 	st.w	r7[-4],r8

  if (cd < 4 || cd > (1 << AVR32_USART_BRGR_CD_SIZE) - 1)
8002aa2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa30:	58 38       	cp.w	r8,3
8002aa32:	e0 88 00 08 	brls	8002aa42 <usart_set_spi_master_baudrate+0x46>
8002aa36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa3a:	e0 48 ff ff 	cp.w	r8,65535
8002aa3e:	e0 88 00 04 	brls	8002aa46 <usart_set_spi_master_baudrate+0x4a>
    return USART_INVALID_INPUT;
8002aa42:	30 18       	mov	r8,1
8002aa44:	c1 08       	rjmp	8002aa64 <usart_set_spi_master_baudrate+0x68>

  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002aa46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa4a:	70 18       	ld.w	r8,r8[0x4]
8002aa4c:	10 99       	mov	r9,r8
8002aa4e:	e0 19 ff cf 	andl	r9,0xffcf
8002aa52:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa56:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_MCK << AVR32_USART_MR_USCLKS_OFFSET;

  usart->brgr = cd << AVR32_USART_BRGR_CD_OFFSET;
8002aa58:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aa5c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002aa60:	91 89       	st.w	r8[0x20],r9

  return USART_SUCCESS;
8002aa62:	30 08       	mov	r8,0
}
8002aa64:	10 9c       	mov	r12,r8
8002aa66:	2f cd       	sub	sp,-16
8002aa68:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aa6c <usart_set_spi_slave_baudrate>:
 * \param usart Base address of the USART instance.
 *
 * \retval USART_SUCCESS  Baud rate successfully initialized.
 */
static int usart_set_spi_slave_baudrate(volatile avr32_usart_t *usart)
{
8002aa6c:	eb cd 40 80 	pushm	r7,lr
8002aa70:	1a 97       	mov	r7,sp
8002aa72:	20 1d       	sub	sp,4
8002aa74:	ef 4c ff fc 	st.w	r7[-4],r12
  usart->mr = (usart->mr & ~AVR32_USART_MR_USCLKS_MASK) |
8002aa78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa7c:	70 18       	ld.w	r8,r8[0x4]
8002aa7e:	10 99       	mov	r9,r8
8002aa80:	e8 19 00 30 	orl	r9,0x30
8002aa84:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aa88:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_USCLKS_SCK << AVR32_USART_MR_USCLKS_OFFSET;

  return USART_SUCCESS;
8002aa8a:	30 08       	mov	r8,0
}
8002aa8c:	10 9c       	mov	r12,r8
8002aa8e:	2f fd       	sub	sp,-4
8002aa90:	e3 cd 80 80 	ldm	sp++,r7,pc

8002aa94 <usart_reset>:
 */
//! @{


void usart_reset(volatile avr32_usart_t *usart)
{
8002aa94:	eb cd 40 c0 	pushm	r6-r7,lr
8002aa98:	1a 97       	mov	r7,sp
8002aa9a:	20 2d       	sub	sp,8
8002aa9c:	49 a6       	lddpc	r6,8002ab04 <usart_reset+0x70>
8002aa9e:	1e 26       	rsub	r6,pc
8002aaa0:	ef 4c ff f8 	st.w	r7[-8],r12
  bool global_interrupt_enabled = cpu_irq_is_enabled();
8002aaa4:	e1 b8 00 00 	mfsr	r8,0x0
8002aaa8:	10 9c       	mov	r12,r8
8002aaaa:	ca be       	rcall	8002a800 <cpu_irq_is_enabled_flags>
8002aaac:	18 98       	mov	r8,r12
8002aaae:	ef 68 ff ff 	st.b	r7[-1],r8

  // Disable all USART interrupts.
  // Interrupts needed should be set explicitly on every reset.
  if (global_interrupt_enabled) cpu_irq_disable();
8002aab2:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002aab6:	30 08       	mov	r8,0
8002aab8:	f0 09 18 00 	cp.b	r9,r8
8002aabc:	c0 20       	breq	8002aac0 <usart_reset+0x2c>
8002aabe:	d3 03       	ssrf	0x10
  usart->idr = 0xFFFFFFFF;
8002aac0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aac4:	3f f9       	mov	r9,-1
8002aac6:	91 39       	st.w	r8[0xc],r9
  usart->csr;
8002aac8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aacc:	70 58       	ld.w	r8,r8[0x14]
  if (global_interrupt_enabled) cpu_irq_enable();
8002aace:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002aad2:	30 08       	mov	r8,0
8002aad4:	f0 09 18 00 	cp.b	r9,r8
8002aad8:	c0 20       	breq	8002aadc <usart_reset+0x48>
8002aada:	d5 03       	csrf	0x10

  // Reset mode and other registers that could cause unpredictable behavior after reset.
  usart->mr = 0;
8002aadc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aae0:	30 09       	mov	r9,0
8002aae2:	91 19       	st.w	r8[0x4],r9
  usart->rtor = 0;
8002aae4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aae8:	30 09       	mov	r9,0
8002aaea:	91 99       	st.w	r8[0x24],r9
  usart->ttgr = 0;
8002aaec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aaf0:	30 09       	mov	r9,0
8002aaf2:	91 a9       	st.w	r8[0x28],r9

  // Shutdown TX and RX (will be re-enabled when setup has successfully completed),
  // reset status bits and turn off DTR and RTS.
  usart->cr = AVR32_USART_CR_RSTRX_MASK   |
8002aaf4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aaf8:	ea 69 61 0c 	mov	r9,680204
8002aafc:	91 09       	st.w	r8[0x0],r9
#ifndef AVR32_USART_440_H_INCLUDED
// Note: Modem Signal Management DTR-DSR-DCD-RI are not included in USART rev.440.
              AVR32_USART_CR_DTRDIS_MASK  |
#endif
              AVR32_USART_CR_RTSDIS_MASK;
}
8002aafe:	2f ed       	sub	sp,-8
8002ab00:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ab04:	80 02       	ld.sh	r2,r0[0x0]
8002ab06:	a9 22       	st.d	r4++,r2

8002ab08 <usart_init_rs232>:


int usart_init_rs232(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002ab08:	eb cd 40 c0 	pushm	r6-r7,lr
8002ab0c:	1a 97       	mov	r7,sp
8002ab0e:	20 3d       	sub	sp,12
8002ab10:	4d 86       	lddpc	r6,8002ac70 <usart_init_rs232+0x168>
8002ab12:	1e 26       	rsub	r6,pc
8002ab14:	ef 4c ff fc 	st.w	r7[-4],r12
8002ab18:	ef 4b ff f8 	st.w	r7[-8],r11
8002ab1c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ab20:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ab24:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002ab28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab2c:	58 08       	cp.w	r8,0
8002ab2e:	c3 80       	breq	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ab30:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab34:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab36:	30 48       	mov	r8,4
8002ab38:	f0 09 18 00 	cp.b	r9,r8
8002ab3c:	e0 88 00 31 	brls	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ab40:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab44:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab46:	30 98       	mov	r8,9
8002ab48:	f0 09 18 00 	cp.b	r9,r8
8002ab4c:	e0 8b 00 29 	brhi	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002ab50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab54:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab56:	30 78       	mov	r8,7
8002ab58:	f0 09 18 00 	cp.b	r9,r8
8002ab5c:	e0 8b 00 21 	brhi	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
8002ab60:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab64:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab66:	e0 68 01 01 	mov	r8,257
8002ab6a:	f0 09 19 00 	cp.h	r9,r8
8002ab6e:	e0 8b 00 18 	brhi	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002ab72:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab76:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab7a:	30 38       	mov	r8,3
8002ab7c:	f0 09 18 00 	cp.b	r9,r8
8002ab80:	e0 8b 00 0f 	brhi	8002ab9e <usart_init_rs232+0x96>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002ab84:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ab88:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ab8c:	70 08       	ld.w	r8,r8[0x0]
8002ab8e:	12 9a       	mov	r10,r9
8002ab90:	10 9b       	mov	r11,r8
8002ab92:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ab96:	c4 5e       	rcall	8002a820 <usart_set_async_baudrate>
8002ab98:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ab9a:	58 18       	cp.w	r8,1
8002ab9c:	c0 31       	brne	8002aba2 <usart_init_rs232+0x9a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_async_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002ab9e:	30 18       	mov	r8,1
8002aba0:	c6 48       	rjmp	8002ac68 <usart_init_rs232+0x160>

  if (opt->charlength == 9)
8002aba2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aba6:	11 c9       	ld.ub	r9,r8[0x4]
8002aba8:	30 98       	mov	r8,9
8002abaa:	f0 09 18 00 	cp.b	r9,r8
8002abae:	c0 a1       	brne	8002abc2 <usart_init_rs232+0xba>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002abb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abb4:	70 18       	ld.w	r8,r8[0x4]
8002abb6:	10 99       	mov	r9,r8
8002abb8:	b1 b9       	sbr	r9,0x11
8002abba:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abbe:	91 19       	st.w	r8[0x4],r9
8002abc0:	c0 d8       	rjmp	8002abda <usart_init_rs232+0xd2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002abc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abc6:	70 19       	ld.w	r9,r8[0x4]
8002abc8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abcc:	11 c8       	ld.ub	r8,r8[0x4]
8002abce:	20 58       	sub	r8,5
8002abd0:	a7 68       	lsl	r8,0x6
8002abd2:	10 49       	or	r9,r8
8002abd4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abd8:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002abda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abde:	70 19       	ld.w	r9,r8[0x4]
8002abe0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abe4:	11 d8       	ld.ub	r8,r8[0x5]
8002abe6:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002abea:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002abee:	f1 38 00 08 	ld.ub	r8,r8[8]
8002abf2:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002abf4:	f5 e8 10 08 	or	r8,r10,r8
8002abf8:	10 49       	or	r9,r8
8002abfa:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002abfe:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002ac00:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac04:	90 39       	ld.sh	r9,r8[0x6]
8002ac06:	30 28       	mov	r8,2
8002ac08:	f0 09 19 00 	cp.h	r9,r8
8002ac0c:	e0 88 00 14 	brls	8002ac34 <usart_init_rs232+0x12c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002ac10:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac14:	70 18       	ld.w	r8,r8[0x4]
8002ac16:	10 99       	mov	r9,r8
8002ac18:	ad b9       	sbr	r9,0xd
8002ac1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac1e:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002ac20:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac24:	90 38       	ld.sh	r8,r8[0x6]
8002ac26:	5c 78       	castu.h	r8
8002ac28:	20 28       	sub	r8,2
8002ac2a:	10 99       	mov	r9,r8
8002ac2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac30:	91 a9       	st.w	r8[0x28],r9
8002ac32:	c0 d8       	rjmp	8002ac4c <usart_init_rs232+0x144>
  }
  else
    // Insert 1, 1.5 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002ac34:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac38:	70 19       	ld.w	r9,r8[0x4]
8002ac3a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac3e:	90 38       	ld.sh	r8,r8[0x6]
8002ac40:	5c 78       	castu.h	r8
8002ac42:	ad 68       	lsl	r8,0xc
8002ac44:	10 49       	or	r9,r8
8002ac46:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac4a:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002ac4c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac50:	70 18       	ld.w	r8,r8[0x4]
8002ac52:	10 99       	mov	r9,r8
8002ac54:	e0 19 ff f0 	andl	r9,0xfff0
8002ac58:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac5c:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002ac5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ac62:	35 09       	mov	r9,80
8002ac64:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002ac66:	30 08       	mov	r8,0
}
8002ac68:	10 9c       	mov	r12,r8
8002ac6a:	2f dd       	sub	sp,-12
8002ac6c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ac70:	80 02       	ld.sh	r2,r0[0x0]
8002ac72:	a9 96       	lsr	r6,0x9

8002ac74 <usart_init_rs232_tx_only>:


int usart_init_rs232_tx_only(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002ac74:	eb cd 40 c0 	pushm	r6-r7,lr
8002ac78:	1a 97       	mov	r7,sp
8002ac7a:	20 3d       	sub	sp,12
8002ac7c:	4d c6       	lddpc	r6,8002adec <usart_init_rs232_tx_only+0x178>
8002ac7e:	1e 26       	rsub	r6,pc
8002ac80:	ef 4c ff fc 	st.w	r7[-4],r12
8002ac84:	ef 4b ff f8 	st.w	r7[-8],r11
8002ac88:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002ac8c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ac90:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002ac94:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ac98:	58 08       	cp.w	r8,0
8002ac9a:	c4 00       	breq	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002ac9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aca0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aca2:	30 48       	mov	r8,4
8002aca4:	f0 09 18 00 	cp.b	r9,r8
8002aca8:	e0 88 00 39 	brls	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002acac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acb0:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002acb2:	30 98       	mov	r8,9
8002acb4:	f0 09 18 00 	cp.b	r9,r8
8002acb8:	e0 8b 00 31 	brhi	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002acbc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acc0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002acc2:	30 78       	mov	r8,7
8002acc4:	f0 09 18 00 	cp.b	r9,r8
8002acc8:	e0 8b 00 29 	brhi	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002accc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acd0:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002acd2:	30 18       	mov	r8,1
8002acd4:	f0 09 19 00 	cp.h	r9,r8
8002acd8:	c2 10       	breq	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002acda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acde:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ace0:	e0 68 01 01 	mov	r8,257
8002ace4:	f0 09 19 00 	cp.h	r9,r8
8002ace8:	e0 8b 00 19 	brhi	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002acec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002acf0:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002acf4:	30 38       	mov	r8,3
8002acf6:	f0 09 18 00 	cp.b	r9,r8
8002acfa:	e0 8b 00 10 	brhi	8002ad1a <usart_init_rs232_tx_only+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002acfe:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002ad02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad06:	70 08       	ld.w	r8,r8[0x0]
8002ad08:	12 9a       	mov	r10,r9
8002ad0a:	10 9b       	mov	r11,r8
8002ad0c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ad10:	fe b0 fd f1 	rcall	8002a8f2 <usart_set_sync_master_baudrate>
8002ad14:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002ad16:	58 18       	cp.w	r8,1
8002ad18:	c0 31       	brne	8002ad1e <usart_init_rs232_tx_only+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002ad1a:	30 18       	mov	r8,1
8002ad1c:	c6 48       	rjmp	8002ade4 <usart_init_rs232_tx_only+0x170>

  if (opt->charlength == 9)
8002ad1e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad22:	11 c9       	ld.ub	r9,r8[0x4]
8002ad24:	30 98       	mov	r8,9
8002ad26:	f0 09 18 00 	cp.b	r9,r8
8002ad2a:	c0 a1       	brne	8002ad3e <usart_init_rs232_tx_only+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002ad2c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad30:	70 18       	ld.w	r8,r8[0x4]
8002ad32:	10 99       	mov	r9,r8
8002ad34:	b1 b9       	sbr	r9,0x11
8002ad36:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad3a:	91 19       	st.w	r8[0x4],r9
8002ad3c:	c0 d8       	rjmp	8002ad56 <usart_init_rs232_tx_only+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002ad3e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad42:	70 19       	ld.w	r9,r8[0x4]
8002ad44:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad48:	11 c8       	ld.ub	r8,r8[0x4]
8002ad4a:	20 58       	sub	r8,5
8002ad4c:	a7 68       	lsl	r8,0x6
8002ad4e:	10 49       	or	r9,r8
8002ad50:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad54:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002ad56:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad5a:	70 19       	ld.w	r9,r8[0x4]
8002ad5c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad60:	11 d8       	ld.ub	r8,r8[0x5]
8002ad62:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002ad66:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad6a:	f1 38 00 08 	ld.ub	r8,r8[8]
8002ad6e:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002ad70:	f5 e8 10 08 	or	r8,r10,r8
8002ad74:	10 49       	or	r9,r8
8002ad76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad7a:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002ad7c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ad80:	90 39       	ld.sh	r9,r8[0x6]
8002ad82:	30 28       	mov	r8,2
8002ad84:	f0 09 19 00 	cp.h	r9,r8
8002ad88:	e0 88 00 14 	brls	8002adb0 <usart_init_rs232_tx_only+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002ad8c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad90:	70 18       	ld.w	r8,r8[0x4]
8002ad92:	10 99       	mov	r9,r8
8002ad94:	ad b9       	sbr	r9,0xd
8002ad96:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ad9a:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002ad9c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ada0:	90 38       	ld.sh	r8,r8[0x6]
8002ada2:	5c 78       	castu.h	r8
8002ada4:	20 28       	sub	r8,2
8002ada6:	10 99       	mov	r9,r8
8002ada8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adac:	91 a9       	st.w	r8[0x28],r9
8002adae:	c0 d8       	rjmp	8002adc8 <usart_init_rs232_tx_only+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002adb0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adb4:	70 19       	ld.w	r9,r8[0x4]
8002adb6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002adba:	90 38       	ld.sh	r8,r8[0x6]
8002adbc:	5c 78       	castu.h	r8
8002adbe:	ad 68       	lsl	r8,0xc
8002adc0:	10 49       	or	r9,r8
8002adc2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adc6:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002adc8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adcc:	70 18       	ld.w	r8,r8[0x4]
8002adce:	10 99       	mov	r9,r8
8002add0:	e0 19 ff f0 	andl	r9,0xfff0
8002add4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002add8:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable only output as input is not possible in synchronous mode without
  // transferring clock.
  usart->cr = AVR32_USART_CR_TXEN_MASK;
8002adda:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002adde:	34 09       	mov	r9,64
8002ade0:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002ade2:	30 08       	mov	r8,0
}
8002ade4:	10 9c       	mov	r12,r8
8002ade6:	2f dd       	sub	sp,-12
8002ade8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002adec:	80 02       	ld.sh	r2,r0[0x0]
8002adee:	ab 02       	ld.d	r2,r5

8002adf0 <usart_init_hw_handshaking>:


int usart_init_hw_handshaking(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002adf0:	eb cd 40 c0 	pushm	r6-r7,lr
8002adf4:	1a 97       	mov	r7,sp
8002adf6:	20 3d       	sub	sp,12
8002adf8:	49 26       	lddpc	r6,8002ae40 <usart_init_hw_handshaking+0x50>
8002adfa:	1e 26       	rsub	r6,pc
8002adfc:	ef 4c ff fc 	st.w	r7[-4],r12
8002ae00:	ef 4b ff f8 	st.w	r7[-8],r11
8002ae04:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002ae08:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ae0c:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ae10:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae14:	f0 16 00 6b 	mcall	r6[428]
8002ae18:	18 98       	mov	r8,r12
8002ae1a:	58 18       	cp.w	r8,1
8002ae1c:	c0 31       	brne	8002ae22 <usart_init_hw_handshaking+0x32>
    return USART_INVALID_INPUT;
8002ae1e:	30 18       	mov	r8,1
8002ae20:	c0 c8       	rjmp	8002ae38 <usart_init_hw_handshaking+0x48>

  // Set hardware handshaking mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002ae22:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae26:	70 18       	ld.w	r8,r8[0x4]
8002ae28:	e0 18 ff f0 	andl	r8,0xfff0
8002ae2c:	10 99       	mov	r9,r8
8002ae2e:	a1 b9       	sbr	r9,0x1
8002ae30:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae34:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_HARDWARE << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002ae36:	30 08       	mov	r8,0
}
8002ae38:	10 9c       	mov	r12,r8
8002ae3a:	2f dd       	sub	sp,-12
8002ae3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ae40:	80 02       	ld.sh	r2,r0[0x0]
8002ae42:	ac 7e       	st.h	r6[0xe],lr

8002ae44 <usart_init_modem>:


int usart_init_modem(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002ae44:	eb cd 40 c0 	pushm	r6-r7,lr
8002ae48:	1a 97       	mov	r7,sp
8002ae4a:	20 3d       	sub	sp,12
8002ae4c:	49 36       	lddpc	r6,8002ae98 <usart_init_modem+0x54>
8002ae4e:	1e 26       	rsub	r6,pc
8002ae50:	ef 4c ff fc 	st.w	r7[-4],r12
8002ae54:	ef 4b ff f8 	st.w	r7[-8],r11
8002ae58:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002ae5c:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ae60:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ae64:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ae68:	f0 16 00 6b 	mcall	r6[428]
8002ae6c:	18 98       	mov	r8,r12
8002ae6e:	58 18       	cp.w	r8,1
8002ae70:	c0 31       	brne	8002ae76 <usart_init_modem+0x32>
    return USART_INVALID_INPUT;
8002ae72:	30 18       	mov	r8,1
8002ae74:	c0 d8       	rjmp	8002ae8e <usart_init_modem+0x4a>

  // Set modem mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002ae76:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae7a:	70 18       	ld.w	r8,r8[0x4]
8002ae7c:	e0 18 ff f0 	andl	r8,0xfff0
8002ae80:	10 99       	mov	r9,r8
8002ae82:	e8 19 00 03 	orl	r9,0x3
8002ae86:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002ae8a:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_MODEM << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002ae8c:	30 08       	mov	r8,0
}
8002ae8e:	10 9c       	mov	r12,r8
8002ae90:	2f dd       	sub	sp,-12
8002ae92:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ae96:	00 00       	add	r0,r0
8002ae98:	80 02       	ld.sh	r2,r0[0x0]
8002ae9a:	ac d2       	st.b	r6[0x5],r2

8002ae9c <usart_init_sync_master>:


int usart_init_sync_master(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002ae9c:	eb cd 40 c0 	pushm	r6-r7,lr
8002aea0:	1a 97       	mov	r7,sp
8002aea2:	20 3d       	sub	sp,12
8002aea4:	4d e6       	lddpc	r6,8002b01c <usart_init_sync_master+0x180>
8002aea6:	1e 26       	rsub	r6,pc
8002aea8:	ef 4c ff fc 	st.w	r7[-4],r12
8002aeac:	ef 4b ff f8 	st.w	r7[-8],r11
8002aeb0:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002aeb4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002aeb8:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002aebc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aec0:	58 08       	cp.w	r8,0
8002aec2:	c4 00       	breq	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002aec4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aec8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aeca:	30 48       	mov	r8,4
8002aecc:	f0 09 18 00 	cp.b	r9,r8
8002aed0:	e0 88 00 39 	brls	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
8002aed4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aed8:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aeda:	30 98       	mov	r8,9
8002aedc:	f0 09 18 00 	cp.b	r9,r8
8002aee0:	e0 8b 00 31 	brhi	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002aee4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aee8:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aeea:	30 78       	mov	r8,7
8002aeec:	f0 09 18 00 	cp.b	r9,r8
8002aef0:	e0 8b 00 29 	brhi	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002aef4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002aef8:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002aefa:	30 18       	mov	r8,1
8002aefc:	f0 09 19 00 	cp.h	r9,r8
8002af00:	c2 10       	breq	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002af02:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af06:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af08:	e0 68 01 01 	mov	r8,257
8002af0c:	f0 09 19 00 	cp.h	r9,r8
8002af10:	e0 8b 00 19 	brhi	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002af14:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af18:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af1c:	30 38       	mov	r8,3
8002af1e:	f0 09 18 00 	cp.b	r9,r8
8002af22:	e0 8b 00 10 	brhi	8002af42 <usart_init_sync_master+0xa6>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002af26:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002af2a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af2e:	70 08       	ld.w	r8,r8[0x0]
8002af30:	12 9a       	mov	r10,r9
8002af32:	10 9b       	mov	r11,r8
8002af34:	ee fc ff fc 	ld.w	r12,r7[-4]
8002af38:	fe b0 fc dd 	rcall	8002a8f2 <usart_set_sync_master_baudrate>
8002af3c:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002af3e:	58 18       	cp.w	r8,1
8002af40:	c0 31       	brne	8002af46 <usart_init_sync_master+0xaa>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002af42:	30 18       	mov	r8,1
8002af44:	c6 78       	rjmp	8002b012 <usart_init_sync_master+0x176>

  if (opt->charlength == 9)
8002af46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af4a:	11 c9       	ld.ub	r9,r8[0x4]
8002af4c:	30 98       	mov	r8,9
8002af4e:	f0 09 18 00 	cp.b	r9,r8
8002af52:	c0 a1       	brne	8002af66 <usart_init_sync_master+0xca>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002af54:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af58:	70 18       	ld.w	r8,r8[0x4]
8002af5a:	10 99       	mov	r9,r8
8002af5c:	b1 b9       	sbr	r9,0x11
8002af5e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af62:	91 19       	st.w	r8[0x4],r9
8002af64:	c0 d8       	rjmp	8002af7e <usart_init_sync_master+0xe2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002af66:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af6a:	70 19       	ld.w	r9,r8[0x4]
8002af6c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af70:	11 c8       	ld.ub	r8,r8[0x4]
8002af72:	20 58       	sub	r8,5
8002af74:	a7 68       	lsl	r8,0x6
8002af76:	10 49       	or	r9,r8
8002af78:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af7c:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002af7e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002af82:	70 19       	ld.w	r9,r8[0x4]
8002af84:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af88:	11 d8       	ld.ub	r8,r8[0x5]
8002af8a:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002af8e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002af92:	f1 38 00 08 	ld.ub	r8,r8[8]
8002af96:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002af98:	f5 e8 10 08 	or	r8,r10,r8
8002af9c:	10 49       	or	r9,r8
8002af9e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afa2:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002afa4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afa8:	90 39       	ld.sh	r9,r8[0x6]
8002afaa:	30 28       	mov	r8,2
8002afac:	f0 09 19 00 	cp.h	r9,r8
8002afb0:	e0 88 00 14 	brls	8002afd8 <usart_init_sync_master+0x13c>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002afb4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afb8:	70 18       	ld.w	r8,r8[0x4]
8002afba:	10 99       	mov	r9,r8
8002afbc:	ad b9       	sbr	r9,0xd
8002afbe:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afc2:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002afc4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afc8:	90 38       	ld.sh	r8,r8[0x6]
8002afca:	5c 78       	castu.h	r8
8002afcc:	20 28       	sub	r8,2
8002afce:	10 99       	mov	r9,r8
8002afd0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afd4:	91 a9       	st.w	r8[0x28],r9
8002afd6:	c0 d8       	rjmp	8002aff0 <usart_init_sync_master+0x154>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002afd8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afdc:	70 19       	ld.w	r9,r8[0x4]
8002afde:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002afe2:	90 38       	ld.sh	r8,r8[0x6]
8002afe4:	5c 78       	castu.h	r8
8002afe6:	ad 68       	lsl	r8,0xc
8002afe8:	10 49       	or	r9,r8
8002afea:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002afee:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002aff0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002aff4:	70 18       	ld.w	r8,r8[0x4]
8002aff6:	e4 18 ff fb 	andh	r8,0xfffb
8002affa:	e0 18 ff f0 	andl	r8,0xfff0
8002affe:	10 99       	mov	r9,r8
8002b000:	b3 a9       	sbr	r9,0x12
8002b002:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b006:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_CLKO_MASK;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b008:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b00c:	35 09       	mov	r9,80
8002b00e:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b010:	30 08       	mov	r8,0
}
8002b012:	10 9c       	mov	r12,r8
8002b014:	2f dd       	sub	sp,-12
8002b016:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b01a:	00 00       	add	r0,r0
8002b01c:	80 02       	ld.sh	r2,r0[0x0]
8002b01e:	ad 2a       	st.d	r6++,r10

8002b020 <usart_init_sync_slave>:


int usart_init_sync_slave(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b020:	eb cd 40 c0 	pushm	r6-r7,lr
8002b024:	1a 97       	mov	r7,sp
8002b026:	20 3d       	sub	sp,12
8002b028:	4d 96       	lddpc	r6,8002b18c <usart_init_sync_slave+0x16c>
8002b02a:	1e 26       	rsub	r6,pc
8002b02c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b030:	ef 4b ff f8 	st.w	r7[-8],r11
8002b034:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b038:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b03c:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002b040:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b044:	58 08       	cp.w	r8,0
8002b046:	c3 90       	breq	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b048:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b04c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b04e:	30 48       	mov	r8,4
8002b050:	f0 09 18 00 	cp.b	r9,r8
8002b054:	e0 88 00 32 	brls	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b058:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b05c:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b05e:	30 98       	mov	r8,9
8002b060:	f0 09 18 00 	cp.b	r9,r8
8002b064:	e0 8b 00 2a 	brhi	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
8002b068:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b06c:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b06e:	30 78       	mov	r8,7
8002b070:	f0 09 18 00 	cp.b	r9,r8
8002b074:	e0 8b 00 22 	brhi	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b078:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b07c:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b07e:	30 18       	mov	r8,1
8002b080:	f0 09 19 00 	cp.h	r9,r8
8002b084:	c1 a0       	breq	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
8002b086:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b08a:	90 39       	ld.sh	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b08c:	e0 68 01 01 	mov	r8,257
8002b090:	f0 09 19 00 	cp.h	r9,r8
8002b094:	e0 8b 00 12 	brhi	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
8002b098:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b09c:	f1 39 00 08 	ld.ub	r9,r8[8]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b0a0:	30 38       	mov	r8,3
8002b0a2:	f0 09 18 00 	cp.b	r9,r8
8002b0a6:	e0 8b 00 09 	brhi	8002b0b8 <usart_init_sync_slave+0x98>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b0aa:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b0ae:	fe b0 fc 5a 	rcall	8002a962 <usart_set_sync_slave_baudrate>
8002b0b2:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b0b4:	58 18       	cp.w	r8,1
8002b0b6:	c0 31       	brne	8002b0bc <usart_init_sync_slave+0x9c>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->paritytype > 7 ||
      opt->stopbits == 1 || opt->stopbits > 2 + 255 ||
      opt->channelmode > 3 ||
      usart_set_sync_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b0b8:	30 18       	mov	r8,1
8002b0ba:	c6 48       	rjmp	8002b182 <usart_init_sync_slave+0x162>

  if (opt->charlength == 9)
8002b0bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0c0:	11 c9       	ld.ub	r9,r8[0x4]
8002b0c2:	30 98       	mov	r8,9
8002b0c4:	f0 09 18 00 	cp.b	r9,r8
8002b0c8:	c0 a1       	brne	8002b0dc <usart_init_sync_slave+0xbc>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b0ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0ce:	70 18       	ld.w	r8,r8[0x4]
8002b0d0:	10 99       	mov	r9,r8
8002b0d2:	b1 b9       	sbr	r9,0x11
8002b0d4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0d8:	91 19       	st.w	r8[0x4],r9
8002b0da:	c0 d8       	rjmp	8002b0f4 <usart_init_sync_slave+0xd4>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b0dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0e0:	70 19       	ld.w	r9,r8[0x4]
8002b0e2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0e6:	11 c8       	ld.ub	r8,r8[0x4]
8002b0e8:	20 58       	sub	r8,5
8002b0ea:	a7 68       	lsl	r8,0x6
8002b0ec:	10 49       	or	r9,r8
8002b0ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0f2:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b0f4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b0f8:	70 19       	ld.w	r9,r8[0x4]
8002b0fa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b0fe:	11 d8       	ld.ub	r8,r8[0x5]
8002b100:	f0 0a 15 09 	lsl	r10,r8,0x9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;
8002b104:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b108:	f1 38 00 08 	ld.ub	r8,r8[8]
8002b10c:	af 68       	lsl	r8,0xe
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b10e:	f5 e8 10 08 	or	r8,r10,r8
8002b112:	10 49       	or	r9,r8
8002b114:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b118:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET;

  if (opt->stopbits > USART_2_STOPBITS)
8002b11a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b11e:	90 39       	ld.sh	r9,r8[0x6]
8002b120:	30 28       	mov	r8,2
8002b122:	f0 09 19 00 	cp.h	r9,r8
8002b126:	e0 88 00 14 	brls	8002b14e <usart_init_sync_slave+0x12e>
  {
    // Set two stop bits
    usart->mr |= AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET;
8002b12a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b12e:	70 18       	ld.w	r8,r8[0x4]
8002b130:	10 99       	mov	r9,r8
8002b132:	ad b9       	sbr	r9,0xd
8002b134:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b138:	91 19       	st.w	r8[0x4],r9
    // and a timeguard period gives the rest.
    usart->ttgr = opt->stopbits - USART_2_STOPBITS;
8002b13a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b13e:	90 38       	ld.sh	r8,r8[0x6]
8002b140:	5c 78       	castu.h	r8
8002b142:	20 28       	sub	r8,2
8002b144:	10 99       	mov	r9,r8
8002b146:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b14a:	91 a9       	st.w	r8[0x28],r9
8002b14c:	c0 d8       	rjmp	8002b166 <usart_init_sync_slave+0x146>
  }
  else
    // Insert 1 or 2 stop bits.
    usart->mr |= opt->stopbits << AVR32_USART_MR_NBSTOP_OFFSET;
8002b14e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b152:	70 19       	ld.w	r9,r8[0x4]
8002b154:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b158:	90 38       	ld.sh	r8,r8[0x6]
8002b15a:	5c 78       	castu.h	r8
8002b15c:	ad 68       	lsl	r8,0xc
8002b15e:	10 49       	or	r9,r8
8002b160:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b164:	91 19       	st.w	r8[0x4],r9

  // Set normal mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b166:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b16a:	70 18       	ld.w	r8,r8[0x4]
8002b16c:	10 99       	mov	r9,r8
8002b16e:	e0 19 ff f0 	andl	r9,0xfff0
8002b172:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b176:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_NORMAL << AVR32_USART_MR_MODE_OFFSET;

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b178:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b17c:	35 09       	mov	r9,80
8002b17e:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b180:	30 08       	mov	r8,0
}
8002b182:	10 9c       	mov	r12,r8
8002b184:	2f dd       	sub	sp,-12
8002b186:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b18a:	00 00       	add	r0,r0
8002b18c:	80 02       	ld.sh	r2,r0[0x0]
8002b18e:	ae ae       	st.b	r7[0x2],lr

8002b190 <usart_init_rs485>:


int usart_init_rs485(volatile avr32_usart_t *usart, const usart_options_t *opt, long pba_hz)
{
8002b190:	eb cd 40 c0 	pushm	r6-r7,lr
8002b194:	1a 97       	mov	r7,sp
8002b196:	20 3d       	sub	sp,12
8002b198:	49 26       	lddpc	r6,8002b1e0 <usart_init_rs485+0x50>
8002b19a:	1e 26       	rsub	r6,pc
8002b19c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b1a0:	ef 4b ff f8 	st.w	r7[-8],r11
8002b1a4:	ef 4a ff f4 	st.w	r7[-12],r10
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b1a8:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b1ac:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b1b0:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b1b4:	f0 16 00 6b 	mcall	r6[428]
8002b1b8:	18 98       	mov	r8,r12
8002b1ba:	58 18       	cp.w	r8,1
8002b1bc:	c0 31       	brne	8002b1c2 <usart_init_rs485+0x32>
    return USART_INVALID_INPUT;
8002b1be:	30 18       	mov	r8,1
8002b1c0:	c0 c8       	rjmp	8002b1d8 <usart_init_rs485+0x48>

  // Set RS485 mode.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b1c2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1c6:	70 18       	ld.w	r8,r8[0x4]
8002b1c8:	e0 18 ff f0 	andl	r8,0xfff0
8002b1cc:	10 99       	mov	r9,r8
8002b1ce:	a1 a9       	sbr	r9,0x0
8002b1d0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b1d4:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MR_MODE_RS485 << AVR32_USART_MR_MODE_OFFSET;

  return USART_SUCCESS;
8002b1d6:	30 08       	mov	r8,0
}
8002b1d8:	10 9c       	mov	r12,r8
8002b1da:	2f dd       	sub	sp,-12
8002b1dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b1e0:	80 02       	ld.sh	r2,r0[0x0]
8002b1e2:	b0 1e       	st.h	r8[0x2],lr

8002b1e4 <usart_init_IrDA>:


int usart_init_IrDA(volatile avr32_usart_t *usart, const usart_options_t *opt,
                    long pba_hz, unsigned char irda_filter)
{
8002b1e4:	eb cd 40 c0 	pushm	r6-r7,lr
8002b1e8:	1a 97       	mov	r7,sp
8002b1ea:	20 4d       	sub	sp,16
8002b1ec:	49 96       	lddpc	r6,8002b250 <usart_init_IrDA+0x6c>
8002b1ee:	1e 26       	rsub	r6,pc
8002b1f0:	ef 4c ff fc 	st.w	r7[-4],r12
8002b1f4:	ef 4b ff f8 	st.w	r7[-8],r11
8002b1f8:	ef 4a ff f4 	st.w	r7[-12],r10
8002b1fc:	12 98       	mov	r8,r9
8002b1fe:	ef 68 ff f0 	st.b	r7[-16],r8
  // First: Setup standard RS232.
  if (usart_init_rs232(usart, opt, pba_hz) == USART_INVALID_INPUT)
8002b202:	ee fa ff f4 	ld.w	r10,r7[-12]
8002b206:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b20a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b20e:	f0 16 00 6b 	mcall	r6[428]
8002b212:	18 98       	mov	r8,r12
8002b214:	58 18       	cp.w	r8,1
8002b216:	c0 31       	brne	8002b21c <usart_init_IrDA+0x38>
    return USART_INVALID_INPUT;
8002b218:	30 18       	mov	r8,1
8002b21a:	c1 78       	rjmp	8002b248 <usart_init_IrDA+0x64>

  // Set IrDA filter.
  usart->ifr = irda_filter;
8002b21c:	ef 39 ff f0 	ld.ub	r9,r7[-16]
8002b220:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b224:	f1 49 00 4c 	st.w	r8[76],r9

  // Set IrDA mode and activate filtering of input.
  usart->mr = (usart->mr & ~AVR32_USART_MR_MODE_MASK) |
8002b228:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b22c:	70 18       	ld.w	r8,r8[0x4]
8002b22e:	e4 18 ef ff 	andh	r8,0xefff
8002b232:	e0 18 ff f0 	andl	r8,0xfff0
8002b236:	10 99       	mov	r9,r8
8002b238:	ea 19 10 00 	orh	r9,0x1000
8002b23c:	e8 19 00 08 	orl	r9,0x8
8002b240:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b244:	91 19       	st.w	r8[0x4],r9
              AVR32_USART_MODE_IRDA << AVR32_USART_MR_MODE_OFFSET |
              AVR32_USART_MR_FILTER_MASK;

  return USART_SUCCESS;
8002b246:	30 08       	mov	r8,0
}
8002b248:	10 9c       	mov	r12,r8
8002b24a:	2f cd       	sub	sp,-16
8002b24c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b250:	80 02       	ld.sh	r2,r0[0x0]
8002b252:	b0 72       	st.h	r8[0xe],r2

8002b254 <usart_init_iso7816>:


int usart_init_iso7816(volatile avr32_usart_t *usart, const usart_iso7816_options_t *opt, int t, long pba_hz)
{
8002b254:	eb cd 40 c0 	pushm	r6-r7,lr
8002b258:	1a 97       	mov	r7,sp
8002b25a:	20 5d       	sub	sp,20
8002b25c:	4c 46       	lddpc	r6,8002b36c <usart_init_iso7816+0x118>
8002b25e:	1e 26       	rsub	r6,pc
8002b260:	ef 4c ff f8 	st.w	r7[-8],r12
8002b264:	ef 4b ff f4 	st.w	r7[-12],r11
8002b268:	ef 4a ff f0 	st.w	r7[-16],r10
8002b26c:	ef 49 ff ec 	st.w	r7[-20],r9
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b270:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b274:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002b278:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b27c:	58 08       	cp.w	r8,0
8002b27e:	c0 90       	breq	8002b290 <usart_init_iso7816+0x3c>
      opt->paritytype > 1)
8002b280:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b284:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b286:	30 18       	mov	r8,1
8002b288:	f0 09 18 00 	cp.b	r9,r8
8002b28c:	e0 88 00 04 	brls	8002b294 <usart_init_iso7816+0x40>
      opt->paritytype > 1)
    return USART_INVALID_INPUT;
8002b290:	30 18       	mov	r8,1
8002b292:	c6 98       	rjmp	8002b364 <usart_init_iso7816+0x110>

  if (t == 0)
8002b294:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b298:	58 08       	cp.w	r8,0
8002b29a:	c0 c1       	brne	8002b2b2 <usart_init_iso7816+0x5e>
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b29c:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2a0:	70 58       	ld.w	r8,r8[0x14]
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
8002b2a2:	b1 68       	lsl	r8,0x10

  if (t == 0)
  {
    // Set USART mode to ISO7816, T=0.
    // The T=0 protocol always uses 2 stop bits.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T0 << AVR32_USART_MR_MODE_OFFSET |
8002b2a4:	e8 18 20 04 	orl	r8,0x2004
8002b2a8:	10 99       	mov	r9,r8
8002b2aa:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2ae:	91 19       	st.w	r8[0x4],r9
8002b2b0:	c1 98       	rjmp	8002b2e2 <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_2 << AVR32_USART_MR_NBSTOP_OFFSET |
                opt->bit_order << AVR32_USART_MR_MSBF_OFFSET; // Allow MSBF in T=0.
  }
  else if (t == 1)
8002b2b2:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b2b6:	58 18       	cp.w	r8,1
8002b2b8:	c1 31       	brne	8002b2de <usart_init_iso7816+0x8a>
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b2ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2be:	70 58       	ld.w	r8,r8[0x14]
8002b2c0:	58 08       	cp.w	r8,0
8002b2c2:	c0 71       	brne	8002b2d0 <usart_init_iso7816+0x7c>
        opt->max_iterations != 0)
8002b2c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2c8:	f1 38 00 10 	ld.ub	r8,r8[16]
  }
  else if (t == 1)
  {
    // Only LSB first in the T=1 protocol.
    // max_iterations field is only used in T=0 mode.
    if (opt->bit_order != 0 ||
8002b2cc:	58 08       	cp.w	r8,0
8002b2ce:	c0 30       	breq	8002b2d4 <usart_init_iso7816+0x80>
        opt->max_iterations != 0)
      return USART_INVALID_INPUT;
8002b2d0:	30 18       	mov	r8,1
8002b2d2:	c4 98       	rjmp	8002b364 <usart_init_iso7816+0x110>

    // Set USART mode to ISO7816, T=1.
    // The T=1 protocol always uses 1 stop bit.
    usart->mr = AVR32_USART_MR_MODE_ISO7816_T1 << AVR32_USART_MR_MODE_OFFSET |
8002b2d4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b2d8:	30 69       	mov	r9,6
8002b2da:	91 19       	st.w	r8[0x4],r9
8002b2dc:	c0 38       	rjmp	8002b2e2 <usart_init_iso7816+0x8e>
                AVR32_USART_MR_NBSTOP_1 << AVR32_USART_MR_NBSTOP_OFFSET;
  }
  else
    return USART_INVALID_INPUT;
8002b2de:	30 18       	mov	r8,1
8002b2e0:	c4 28       	rjmp	8002b364 <usart_init_iso7816+0x110>

  if (usart_set_iso7816_clock(usart, opt->iso7816_hz, pba_hz) == USART_INVALID_INPUT)
8002b2e2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002b2e6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b2ea:	70 08       	ld.w	r8,r8[0x0]
8002b2ec:	12 9a       	mov	r10,r9
8002b2ee:	10 9b       	mov	r11,r8
8002b2f0:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b2f4:	fe b0 fb 4b 	rcall	8002a98a <usart_set_iso7816_clock>
8002b2f8:	18 98       	mov	r8,r12
8002b2fa:	58 18       	cp.w	r8,1
8002b2fc:	c0 31       	brne	8002b302 <usart_init_iso7816+0xae>
    return USART_INVALID_INPUT;
8002b2fe:	30 18       	mov	r8,1
8002b300:	c3 28       	rjmp	8002b364 <usart_init_iso7816+0x110>

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;
8002b302:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b306:	90 28       	ld.sh	r8,r8[0x4]
8002b308:	f3 d8 c0 10 	bfextu	r9,r8,0x0,0x10
8002b30c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b310:	f1 49 00 40 	st.w	r8[64],r9

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b314:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b318:	70 19       	ld.w	r9,r8[0x4]
8002b31a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b31e:	11 e8       	ld.ub	r8,r8[0x6]
8002b320:	a9 78       	lsl	r8,0x9
               AVR32_USART_MR_CLKO_MASK | // Enable clock output.
8002b322:	10 9a       	mov	r10,r8
8002b324:	b3 aa       	sbr	r10,0x12
               opt->inhibit_nack << AVR32_USART_MR_INACK_OFFSET |
8002b326:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b32a:	70 28       	ld.w	r8,r8[0x8]
8002b32c:	b5 68       	lsl	r8,0x14
8002b32e:	10 4a       	or	r10,r8
               opt->dis_suc_nack << AVR32_USART_MR_DSNACK_OFFSET |
8002b330:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b334:	70 38       	ld.w	r8,r8[0xc]
8002b336:	b5 78       	lsl	r8,0x15
8002b338:	10 4a       	or	r10,r8
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;
8002b33a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b33e:	f1 38 00 10 	ld.ub	r8,r8[16]
8002b342:	b9 68       	lsl	r8,0x18

  // Set FIDI register: bit rate = selected clock/FI_DI_ratio/16.
  usart->fidi = opt->fidi_ratio;

  // Set ISO7816 spesific options in the MODE register.
  usart->mr |= opt->paritytype << AVR32_USART_MR_PAR_OFFSET |
8002b344:	f5 e8 10 08 	or	r8,r10,r8
8002b348:	10 49       	or	r9,r8
8002b34a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b34e:	91 19       	st.w	r8[0x4],r9
8002b350:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b354:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_iso7816_enable_receiver(volatile avr32_usart_t *usart)
{
  usart->cr = AVR32_USART_CR_TXDIS_MASK | AVR32_USART_CR_RXEN_MASK;
8002b358:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b35c:	e0 69 00 90 	mov	r9,144
8002b360:	91 09       	st.w	r8[0x0],r9
               opt->max_iterations << AVR32_USART_MR_MAX_ITERATION_OFFSET;

  // Setup complete; enable the receiver by default.
  usart_iso7816_enable_receiver(usart);

  return USART_SUCCESS;
8002b362:	30 08       	mov	r8,0
}
8002b364:	10 9c       	mov	r12,r8
8002b366:	2f bd       	sub	sp,-20
8002b368:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b36c:	80 02       	ld.sh	r2,r0[0x0]
8002b36e:	b0 e2       	st.b	r8[0x6],r2

8002b370 <usart_init_lin_master>:
    defined(AVR32_USART_440_H_INCLUDED) || \
    defined(AVR32_USART_602_H_INCLUDED)


int usart_init_lin_master(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b370:	eb cd 40 c0 	pushm	r6-r7,lr
8002b374:	1a 97       	mov	r7,sp
8002b376:	20 3d       	sub	sp,12
8002b378:	49 66       	lddpc	r6,8002b3d0 <usart_init_lin_master+0x60>
8002b37a:	1e 26       	rsub	r6,pc
8002b37c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b380:	ef 4b ff f8 	st.w	r7[-8],r11
8002b384:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b388:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b38c:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b390:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b394:	10 9a       	mov	r10,r8
8002b396:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b39a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b39e:	fe b0 fa 41 	rcall	8002a820 <usart_set_async_baudrate>
8002b3a2:	18 98       	mov	r8,r12
8002b3a4:	58 18       	cp.w	r8,1
8002b3a6:	c0 31       	brne	8002b3ac <usart_init_lin_master+0x3c>
    return USART_INVALID_INPUT;
8002b3a8:	30 18       	mov	r8,1
8002b3aa:	c0 f8       	rjmp	8002b3c8 <usart_init_lin_master+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_MASTER << AVR32_USART_MR_MODE_OFFSET;  // LIN master mode.
8002b3ac:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3b0:	70 18       	ld.w	r8,r8[0x4]
8002b3b2:	10 99       	mov	r9,r8
8002b3b4:	e8 19 00 0a 	orl	r9,0xa
8002b3b8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3bc:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b3be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b3c2:	35 09       	mov	r9,80
8002b3c4:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b3c6:	30 08       	mov	r8,0
}
8002b3c8:	10 9c       	mov	r12,r8
8002b3ca:	2f dd       	sub	sp,-12
8002b3cc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b3d0:	80 02       	ld.sh	r2,r0[0x0]
8002b3d2:	b1 fe       	*unknown*

8002b3d4 <usart_init_lin_slave>:


int usart_init_lin_slave(volatile avr32_usart_t *usart, unsigned long baudrate, long pba_hz)
{
8002b3d4:	eb cd 40 c0 	pushm	r6-r7,lr
8002b3d8:	1a 97       	mov	r7,sp
8002b3da:	20 3d       	sub	sp,12
8002b3dc:	49 66       	lddpc	r6,8002b434 <usart_init_lin_slave+0x60>
8002b3de:	1e 26       	rsub	r6,pc
8002b3e0:	ef 4c ff fc 	st.w	r7[-4],r12
8002b3e4:	ef 4b ff f8 	st.w	r7[-8],r11
8002b3e8:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b3ec:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b3f0:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (usart_set_async_baudrate(usart, baudrate, pba_hz) == USART_INVALID_INPUT)
8002b3f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b3f8:	10 9a       	mov	r10,r8
8002b3fa:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b3fe:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b402:	fe b0 fa 0f 	rcall	8002a820 <usart_set_async_baudrate>
8002b406:	18 98       	mov	r8,r12
8002b408:	58 18       	cp.w	r8,1
8002b40a:	c0 31       	brne	8002b410 <usart_init_lin_slave+0x3c>
    return USART_INVALID_INPUT;
8002b40c:	30 18       	mov	r8,1
8002b40e:	c0 f8       	rjmp	8002b42c <usart_init_lin_slave+0x58>

  usart->mr |= AVR32_USART_MR_MODE_LIN_SLAVE << AVR32_USART_MR_MODE_OFFSET; // LIN slave mode.
8002b410:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b414:	70 18       	ld.w	r8,r8[0x4]
8002b416:	10 99       	mov	r9,r8
8002b418:	e8 19 00 0b 	orl	r9,0xb
8002b41c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b420:	91 19       	st.w	r8[0x4],r9

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b422:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b426:	35 09       	mov	r9,80
8002b428:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b42a:	30 08       	mov	r8,0
}
8002b42c:	10 9c       	mov	r12,r8
8002b42e:	2f dd       	sub	sp,-12
8002b430:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b434:	80 02       	ld.sh	r2,r0[0x0]
8002b436:	b2 62       	st.h	r9[0xc],r2

8002b438 <usart_init_spi_master>:


int usart_init_spi_master(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b438:	eb cd 40 c0 	pushm	r6-r7,lr
8002b43c:	1a 97       	mov	r7,sp
8002b43e:	20 3d       	sub	sp,12
8002b440:	4c 46       	lddpc	r6,8002b550 <usart_init_spi_master+0x118>
8002b442:	1e 26       	rsub	r6,pc
8002b444:	ef 4c ff fc 	st.w	r7[-4],r12
8002b448:	ef 4b ff f8 	st.w	r7[-8],r11
8002b44c:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b450:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b454:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002b458:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b45c:	58 08       	cp.w	r8,0
8002b45e:	c2 f0       	breq	8002b4bc <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b460:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b464:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b466:	30 48       	mov	r8,4
8002b468:	f0 09 18 00 	cp.b	r9,r8
8002b46c:	e0 88 00 28 	brls	8002b4bc <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b470:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b474:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b476:	30 98       	mov	r8,9
8002b478:	f0 09 18 00 	cp.b	r9,r8
8002b47c:	e0 8b 00 20 	brhi	8002b4bc <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b480:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b484:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b486:	30 38       	mov	r8,3
8002b488:	f0 09 18 00 	cp.b	r9,r8
8002b48c:	e0 8b 00 18 	brhi	8002b4bc <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b490:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b494:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b496:	30 38       	mov	r8,3
8002b498:	f0 09 18 00 	cp.b	r9,r8
8002b49c:	e0 8b 00 10 	brhi	8002b4bc <usart_init_spi_master+0x84>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
8002b4a0:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002b4a4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4a8:	70 08       	ld.w	r8,r8[0x0]
8002b4aa:	12 9a       	mov	r10,r9
8002b4ac:	10 9b       	mov	r11,r8
8002b4ae:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b4b2:	fe b0 fa a5 	rcall	8002a9fc <usart_set_spi_master_baudrate>
8002b4b6:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b4b8:	58 18       	cp.w	r8,1
8002b4ba:	c0 31       	brne	8002b4c0 <usart_init_spi_master+0x88>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_master_baudrate(usart, opt->baudrate, pba_hz) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b4bc:	30 18       	mov	r8,1
8002b4be:	c4 48       	rjmp	8002b546 <usart_init_spi_master+0x10e>

  if (opt->charlength == 9)
8002b4c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4c4:	11 c9       	ld.ub	r9,r8[0x4]
8002b4c6:	30 98       	mov	r8,9
8002b4c8:	f0 09 18 00 	cp.b	r9,r8
8002b4cc:	c0 a1       	brne	8002b4e0 <usart_init_spi_master+0xa8>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b4ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4d2:	70 18       	ld.w	r8,r8[0x4]
8002b4d4:	10 99       	mov	r9,r8
8002b4d6:	b1 b9       	sbr	r9,0x11
8002b4d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4dc:	91 19       	st.w	r8[0x4],r9
8002b4de:	c0 d8       	rjmp	8002b4f8 <usart_init_spi_master+0xc0>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b4e0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4e4:	70 19       	ld.w	r9,r8[0x4]
8002b4e6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b4ea:	11 c8       	ld.ub	r8,r8[0x4]
8002b4ec:	20 58       	sub	r8,5
8002b4ee:	a7 68       	lsl	r8,0x6
8002b4f0:	10 49       	or	r9,r8
8002b4f2:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4f6:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b4f8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b4fc:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b4fe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b502:	11 d8       	ld.ub	r8,r8[0x5]
8002b504:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b508:	c0 41       	brne	8002b510 <usart_init_spi_master+0xd8>
8002b50a:	e0 68 01 0e 	mov	r8,270
8002b50e:	c0 28       	rjmp	8002b512 <usart_init_spi_master+0xda>
8002b510:	30 e8       	mov	r8,14
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b512:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b516:	15 ea       	ld.ub	r10,r10[0x6]
8002b518:	af 6a       	lsl	r10,0xe
8002b51a:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
8002b51e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b522:	11 d8       	ld.ub	r8,r8[0x5]
8002b524:	a1 98       	lsr	r8,0x1
8002b526:	5c 58       	castu.b	r8
8002b528:	b1 68       	lsl	r8,0x10
8002b52a:	f5 e8 10 08 	or	r8,r10,r8
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_MASTER << AVR32_USART_MR_MODE_OFFSET | // SPI master mode.
8002b52e:	f3 e8 10 08 	or	r8,r9,r8
8002b532:	10 99       	mov	r9,r8
8002b534:	b3 a9       	sbr	r9,0x12
8002b536:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b53a:	91 19       	st.w	r8[0x4],r9
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET |            // SPI clock polarity.
               AVR32_USART_MR_CLKO_MASK;                                      // Drive SCK pin.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b53c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b540:	35 09       	mov	r9,80
8002b542:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b544:	30 08       	mov	r8,0
}
8002b546:	10 9c       	mov	r12,r8
8002b548:	2f dd       	sub	sp,-12
8002b54a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b54e:	00 00       	add	r0,r0
8002b550:	80 02       	ld.sh	r2,r0[0x0]
8002b552:	b2 c6       	st.b	r9[0x4],r6

8002b554 <usart_init_spi_slave>:


int usart_init_spi_slave(volatile avr32_usart_t *usart, const usart_spi_options_t *opt, long pba_hz)
{
8002b554:	eb cd 40 c0 	pushm	r6-r7,lr
8002b558:	1a 97       	mov	r7,sp
8002b55a:	20 3d       	sub	sp,12
8002b55c:	4b f6       	lddpc	r6,8002b658 <usart_init_spi_slave+0x104>
8002b55e:	1e 26       	rsub	r6,pc
8002b560:	ef 4c ff fc 	st.w	r7[-4],r12
8002b564:	ef 4b ff f8 	st.w	r7[-8],r11
8002b568:	ef 4a ff f4 	st.w	r7[-12],r10
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);
8002b56c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b570:	f0 16 00 4d 	mcall	r6[308]

  // Check input values.
  if (!opt || // Null pointer.
8002b574:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b578:	58 08       	cp.w	r8,0
8002b57a:	c2 80       	breq	8002b5ca <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b57c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b580:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b582:	30 48       	mov	r8,4
8002b584:	f0 09 18 00 	cp.b	r9,r8
8002b588:	e0 88 00 21 	brls	8002b5ca <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
8002b58c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b590:	11 c9       	ld.ub	r9,r8[0x4]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b592:	30 98       	mov	r8,9
8002b594:	f0 09 18 00 	cp.b	r9,r8
8002b598:	e0 8b 00 19 	brhi	8002b5ca <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
8002b59c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5a0:	11 d9       	ld.ub	r9,r8[0x5]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b5a2:	30 38       	mov	r8,3
8002b5a4:	f0 09 18 00 	cp.b	r9,r8
8002b5a8:	e0 8b 00 11 	brhi	8002b5ca <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
8002b5ac:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5b0:	11 e9       	ld.ub	r9,r8[0x6]
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b5b2:	30 38       	mov	r8,3
8002b5b4:	f0 09 18 00 	cp.b	r9,r8
8002b5b8:	e0 8b 00 09 	brhi	8002b5ca <usart_init_spi_slave+0x76>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
8002b5bc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b5c0:	fe b0 fa 56 	rcall	8002aa6c <usart_set_spi_slave_baudrate>
8002b5c4:	18 98       	mov	r8,r12
{
  // Reset the USART and shutdown TX and RX.
  usart_reset(usart);

  // Check input values.
  if (!opt || // Null pointer.
8002b5c6:	58 18       	cp.w	r8,1
8002b5c8:	c0 31       	brne	8002b5ce <usart_init_spi_slave+0x7a>
      opt->charlength < 5 || opt->charlength > 9 ||
      opt->spimode > 3 ||
      opt->channelmode > 3 ||
      usart_set_spi_slave_baudrate(usart) == USART_INVALID_INPUT)
    return USART_INVALID_INPUT;
8002b5ca:	30 18       	mov	r8,1
8002b5cc:	c4 18       	rjmp	8002b64e <usart_init_spi_slave+0xfa>

  if (opt->charlength == 9)
8002b5ce:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5d2:	11 c9       	ld.ub	r9,r8[0x4]
8002b5d4:	30 98       	mov	r8,9
8002b5d6:	f0 09 18 00 	cp.b	r9,r8
8002b5da:	c0 a1       	brne	8002b5ee <usart_init_spi_slave+0x9a>
  {
    // Character length set to 9 bits. MODE9 dominates CHRL.
    usart->mr |= AVR32_USART_MR_MODE9_MASK;
8002b5dc:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5e0:	70 18       	ld.w	r8,r8[0x4]
8002b5e2:	10 99       	mov	r9,r8
8002b5e4:	b1 b9       	sbr	r9,0x11
8002b5e6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5ea:	91 19       	st.w	r8[0x4],r9
8002b5ec:	c0 d8       	rjmp	8002b606 <usart_init_spi_slave+0xb2>
  }
  else
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
8002b5ee:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b5f2:	70 19       	ld.w	r9,r8[0x4]
8002b5f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b5f8:	11 c8       	ld.ub	r8,r8[0x4]
8002b5fa:	20 58       	sub	r8,5
8002b5fc:	a7 68       	lsl	r8,0x6
8002b5fe:	10 49       	or	r9,r8
8002b600:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b604:	91 19       	st.w	r8[0x4],r9
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002b606:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b60a:	70 19       	ld.w	r9,r8[0x4]
               ((opt->spimode & 0x1) ^ 0x1) << AVR32_USART_MR_SYNC_OFFSET |   // SPI clock phase.
8002b60c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b610:	11 d8       	ld.ub	r8,r8[0x5]
8002b612:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002b616:	c0 41       	brne	8002b61e <usart_init_spi_slave+0xca>
8002b618:	e0 68 01 0f 	mov	r8,271
8002b61c:	c0 28       	rjmp	8002b620 <usart_init_spi_slave+0xcc>
8002b61e:	30 f8       	mov	r8,15
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
8002b620:	ee fa ff f8 	ld.w	r10,r7[-8]
8002b624:	15 ea       	ld.ub	r10,r10[0x6]
8002b626:	af 6a       	lsl	r10,0xe
8002b628:	f1 ea 10 0a 	or	r10,r8,r10
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.
8002b62c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b630:	11 d8       	ld.ub	r8,r8[0x5]
8002b632:	a1 98       	lsr	r8,0x1
8002b634:	5c 58       	castu.b	r8
8002b636:	b1 68       	lsl	r8,0x10
  {
    // CHRL gives the character length (- 5) when MODE9 = 0.
    usart->mr |= (opt->charlength - 5) << AVR32_USART_MR_CHRL_OFFSET;
  }

  usart->mr |= AVR32_USART_MR_MODE_SPI_SLAVE << AVR32_USART_MR_MODE_OFFSET |  // SPI slave mode.
8002b638:	f5 e8 10 08 	or	r8,r10,r8
8002b63c:	10 49       	or	r9,r8
8002b63e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b642:	91 19       	st.w	r8[0x4],r9
               opt->channelmode << AVR32_USART_MR_CHMODE_OFFSET |             // Channel mode.
               (opt->spimode >> 1) << AVR32_USART_MR_MSBF_OFFSET;             // SPI clock polarity.

  // Setup complete; enable communication.
  // Enable input and output.
  usart->cr = AVR32_USART_CR_RXEN_MASK |
8002b644:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b648:	35 09       	mov	r9,80
8002b64a:	91 09       	st.w	r8[0x0],r9
              AVR32_USART_CR_TXEN_MASK;

  return USART_SUCCESS;
8002b64c:	30 08       	mov	r8,0
}
8002b64e:	10 9c       	mov	r12,r8
8002b650:	2f dd       	sub	sp,-12
8002b652:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b656:	00 00       	add	r0,r0
8002b658:	80 02       	ld.sh	r2,r0[0x0]
8002b65a:	b3 e2       	*unknown*

8002b65c <usart_spi_selectChip>:
 */
//! @{


int usart_spi_selectChip(volatile avr32_usart_t *usart)
{
8002b65c:	eb cd 40 80 	pushm	r7,lr
8002b660:	1a 97       	mov	r7,sp
8002b662:	20 1d       	sub	sp,4
8002b664:	ef 4c ff fc 	st.w	r7[-4],r12
  // Force the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSEN_MASK;
8002b668:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b66c:	e4 69 00 00 	mov	r9,262144
8002b670:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b672:	30 08       	mov	r8,0
}
8002b674:	10 9c       	mov	r12,r8
8002b676:	2f fd       	sub	sp,-4
8002b678:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b67c <usart_spi_unselectChip>:


int usart_spi_unselectChip(volatile avr32_usart_t *usart)
{
8002b67c:	eb cd 40 80 	pushm	r7,lr
8002b680:	1a 97       	mov	r7,sp
8002b682:	20 3d       	sub	sp,12
8002b684:	ef 4c ff f4 	st.w	r7[-12],r12
  int timeout = USART_DEFAULT_TIMEOUT;
8002b688:	e0 68 27 10 	mov	r8,10000
8002b68c:	ef 48 ff f8 	st.w	r7[-8],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002b690:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b694:	58 08       	cp.w	r8,0
8002b696:	5f 08       	sreq	r8
8002b698:	5c 58       	castu.b	r8
8002b69a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b69e:	20 19       	sub	r9,1
8002b6a0:	ef 49 ff f8 	st.w	r7[-8],r9
8002b6a4:	58 08       	cp.w	r8,0
8002b6a6:	c0 30       	breq	8002b6ac <usart_spi_unselectChip+0x30>
8002b6a8:	3f f8       	mov	r8,-1
8002b6aa:	c1 38       	rjmp	8002b6d0 <usart_spi_unselectChip+0x54>
8002b6ac:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6b0:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_empty(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXEMPTY_MASK) != 0;
8002b6b4:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b6b8:	70 58       	ld.w	r8,r8[0x14]
8002b6ba:	e2 18 02 00 	andl	r8,0x200,COH
8002b6be:	5f 18       	srne	r8
  } while (!usart_tx_empty(usart));
8002b6c0:	58 08       	cp.w	r8,0
8002b6c2:	ce 70       	breq	8002b690 <usart_spi_unselectChip+0x14>

  // Release the SPI chip select.
  usart->cr = AVR32_USART_CR_RTSDIS_MASK;
8002b6c4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6c8:	e8 69 00 00 	mov	r9,524288
8002b6cc:	91 09       	st.w	r8[0x0],r9

  return USART_SUCCESS;
8002b6ce:	30 08       	mov	r8,0
}
8002b6d0:	10 9c       	mov	r12,r8
8002b6d2:	2f dd       	sub	sp,-12
8002b6d4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b6d8 <usart_send_address>:
 */
//! @{


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
8002b6d8:	eb cd 40 c0 	pushm	r6-r7,lr
8002b6dc:	1a 97       	mov	r7,sp
8002b6de:	20 5d       	sub	sp,20
8002b6e0:	49 96       	lddpc	r6,8002b744 <usart_send_address+0x6c>
8002b6e2:	1e 26       	rsub	r6,pc
8002b6e4:	ef 4c ff f0 	st.w	r7[-16],r12
8002b6e8:	ef 4b ff ec 	st.w	r7[-20],r11
8002b6ec:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b6f0:	ef 48 ff f4 	st.w	r7[-12],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static __inline__ int usart_mode_is_multidrop(volatile avr32_usart_t *usart)
{
  return ((usart->mr >> AVR32_USART_MR_PAR_OFFSET) & AVR32_USART_MR_PAR_MULTI) == AVR32_USART_MR_PAR_MULTI;
8002b6f4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b6f8:	70 18       	ld.w	r8,r8[0x4]
8002b6fa:	a9 98       	lsr	r8,0x9
8002b6fc:	e2 18 00 06 	andl	r8,0x6,COH
8002b700:	58 68       	cp.w	r8,6
8002b702:	5f 08       	sreq	r8


int usart_send_address(volatile avr32_usart_t *usart, int address)
{
  // Check if USART is in multidrop / RS485 mode.
  if (!usart_mode_is_multidrop(usart)) return USART_MODE_FAULT;
8002b704:	58 08       	cp.w	r8,0
8002b706:	c0 31       	brne	8002b70c <usart_send_address+0x34>
8002b708:	30 58       	mov	r8,5
8002b70a:	c1 88       	rjmp	8002b73a <usart_send_address+0x62>

  // Prepare to send an address.
  usart->cr = AVR32_USART_CR_SENDA_MASK;
8002b70c:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b710:	e0 69 10 00 	mov	r9,4096
8002b714:	91 09       	st.w	r8[0x0],r9
8002b716:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b71a:	ef 48 ff fc 	st.w	r7[-4],r8
8002b71e:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002b722:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void usart_bw_write_char(volatile avr32_usart_t *usart, int c)
{
  while (usart_write_char(usart, c) != USART_SUCCESS);
8002b726:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b72a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b72e:	f0 16 01 1d 	mcall	r6[1140]
8002b732:	18 98       	mov	r8,r12
8002b734:	58 08       	cp.w	r8,0
8002b736:	cf 81       	brne	8002b726 <usart_send_address+0x4e>

  // Write the address to TX.
  usart_bw_write_char(usart, address);

  return USART_SUCCESS;
8002b738:	30 08       	mov	r8,0
}
8002b73a:	10 9c       	mov	r12,r8
8002b73c:	2f bd       	sub	sp,-20
8002b73e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b742:	00 00       	add	r0,r0
8002b744:	80 02       	ld.sh	r2,r0[0x0]
8002b746:	b5 66       	lsl	r6,0x14

8002b748 <usart_write_char>:


int usart_write_char(volatile avr32_usart_t *usart, int c)
{
8002b748:	eb cd 40 80 	pushm	r7,lr
8002b74c:	1a 97       	mov	r7,sp
8002b74e:	20 3d       	sub	sp,12
8002b750:	ef 4c ff f8 	st.w	r7[-8],r12
8002b754:	ef 4b ff f4 	st.w	r7[-12],r11
8002b758:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b75c:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_tx_ready(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_TXRDY_MASK) != 0;
8002b760:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b764:	70 58       	ld.w	r8,r8[0x14]
8002b766:	e2 18 00 02 	andl	r8,0x2,COH
8002b76a:	5f 18       	srne	r8
  if (usart_tx_ready(usart))
8002b76c:	58 08       	cp.w	r8,0
8002b76e:	c0 a0       	breq	8002b782 <usart_write_char+0x3a>
  {
    usart->thr = (c << AVR32_USART_THR_TXCHR_OFFSET) & AVR32_USART_THR_TXCHR_MASK;
8002b770:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b774:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b778:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b77c:	91 79       	st.w	r8[0x1c],r9
    return USART_SUCCESS;
8002b77e:	30 08       	mov	r8,0
8002b780:	c0 28       	rjmp	8002b784 <usart_write_char+0x3c>
  }
  else
    return USART_TX_BUSY;
8002b782:	30 28       	mov	r8,2
}
8002b784:	10 9c       	mov	r12,r8
8002b786:	2f dd       	sub	sp,-12
8002b788:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b78c <usart_putchar>:


int usart_putchar(volatile avr32_usart_t *usart, int c)
{
8002b78c:	eb cd 40 c0 	pushm	r6-r7,lr
8002b790:	1a 97       	mov	r7,sp
8002b792:	20 3d       	sub	sp,12
8002b794:	49 36       	lddpc	r6,8002b7e0 <usart_putchar+0x54>
8002b796:	1e 26       	rsub	r6,pc
8002b798:	ef 4c ff f8 	st.w	r7[-8],r12
8002b79c:	ef 4b ff f4 	st.w	r7[-12],r11
  int timeout = USART_DEFAULT_TIMEOUT;
8002b7a0:	e0 68 27 10 	mov	r8,10000
8002b7a4:	ef 48 ff fc 	st.w	r7[-4],r8

  do
  {
    if (!timeout--) return USART_FAILURE;
8002b7a8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b7ac:	58 08       	cp.w	r8,0
8002b7ae:	5f 08       	sreq	r8
8002b7b0:	5c 58       	castu.b	r8
8002b7b2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b7b6:	20 19       	sub	r9,1
8002b7b8:	ef 49 ff fc 	st.w	r7[-4],r9
8002b7bc:	58 08       	cp.w	r8,0
8002b7be:	c0 30       	breq	8002b7c4 <usart_putchar+0x38>
8002b7c0:	3f f8       	mov	r8,-1
8002b7c2:	c0 b8       	rjmp	8002b7d8 <usart_putchar+0x4c>
  } while (usart_write_char(usart, c) != USART_SUCCESS);
8002b7c4:	ee fb ff f4 	ld.w	r11,r7[-12]
8002b7c8:	ee fc ff f8 	ld.w	r12,r7[-8]
8002b7cc:	f0 16 01 1d 	mcall	r6[1140]
8002b7d0:	18 98       	mov	r8,r12
8002b7d2:	58 08       	cp.w	r8,0
8002b7d4:	ce a1       	brne	8002b7a8 <usart_putchar+0x1c>

  return USART_SUCCESS;
8002b7d6:	30 08       	mov	r8,0
}
8002b7d8:	10 9c       	mov	r12,r8
8002b7da:	2f dd       	sub	sp,-12
8002b7dc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b7e0:	80 02       	ld.sh	r2,r0[0x0]
8002b7e2:	b6 1a       	st.h	r11[0x2],r10

8002b7e4 <usart_read_char>:


int usart_read_char(volatile avr32_usart_t *usart, int *c)
{
8002b7e4:	eb cd 40 80 	pushm	r7,lr
8002b7e8:	1a 97       	mov	r7,sp
8002b7ea:	20 3d       	sub	sp,12
8002b7ec:	ef 4c ff f8 	st.w	r7[-8],r12
8002b7f0:	ef 4b ff f4 	st.w	r7[-12],r11
  // Check for errors: frame, parity and overrun. In RS485 mode, a parity error
  // would mean that an address char has been received.
  if (usart->csr & (AVR32_USART_CSR_OVRE_MASK |
8002b7f4:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b7f8:	70 58       	ld.w	r8,r8[0x14]
8002b7fa:	e2 18 00 e0 	andl	r8,0xe0,COH
8002b7fe:	c0 30       	breq	8002b804 <usart_read_char+0x20>
                    AVR32_USART_CSR_FRAME_MASK |
                    AVR32_USART_CSR_PARE_MASK))
    return USART_RX_ERROR;
8002b800:	30 48       	mov	r8,4
8002b802:	c1 68       	rjmp	8002b82e <usart_read_char+0x4a>
8002b804:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b808:	ef 48 ff fc 	st.w	r7[-4],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline int usart_test_hit(volatile avr32_usart_t *usart)
{
  return (usart->csr & AVR32_USART_CSR_RXRDY_MASK) != 0;
8002b80c:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b810:	70 58       	ld.w	r8,r8[0x14]
8002b812:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1

  // No error; if we really did receive a char, read it and return SUCCESS.
  if (usart_test_hit(usart))
8002b816:	c0 b0       	breq	8002b82c <usart_read_char+0x48>
  {
    *c = (usart->rhr & AVR32_USART_RHR_RXCHR_MASK) >> AVR32_USART_RHR_RXCHR_OFFSET;
8002b818:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b81c:	70 68       	ld.w	r8,r8[0x18]
8002b81e:	f3 d8 c0 09 	bfextu	r9,r8,0x0,0x9
8002b822:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002b826:	91 09       	st.w	r8[0x0],r9
    return USART_SUCCESS;
8002b828:	30 08       	mov	r8,0
8002b82a:	c0 28       	rjmp	8002b82e <usart_read_char+0x4a>
  }
  else
    return USART_RX_EMPTY;
8002b82c:	30 38       	mov	r8,3
}
8002b82e:	10 9c       	mov	r12,r8
8002b830:	2f dd       	sub	sp,-12
8002b832:	e3 cd 80 80 	ldm	sp++,r7,pc

8002b836 <usart_getchar>:


int usart_getchar(volatile avr32_usart_t *usart)
{
8002b836:	eb cd 40 c0 	pushm	r6-r7,lr
8002b83a:	1a 97       	mov	r7,sp
8002b83c:	20 3d       	sub	sp,12
8002b83e:	49 06       	lddpc	r6,8002b87c <usart_getchar+0x46>
8002b840:	1e 26       	rsub	r6,pc
8002b842:	ef 4c ff f4 	st.w	r7[-12],r12
  int c, ret;

  while ((ret = usart_read_char(usart, &c)) == USART_RX_EMPTY);
8002b846:	ee c8 00 08 	sub	r8,r7,8
8002b84a:	10 9b       	mov	r11,r8
8002b84c:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b850:	f0 16 02 02 	mcall	r6[2056]
8002b854:	18 98       	mov	r8,r12
8002b856:	ef 48 ff fc 	st.w	r7[-4],r8
8002b85a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b85e:	58 38       	cp.w	r8,3
8002b860:	cf 30       	breq	8002b846 <usart_getchar+0x10>

  if (ret == USART_RX_ERROR)
8002b862:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002b866:	58 48       	cp.w	r8,4
8002b868:	c0 31       	brne	8002b86e <usart_getchar+0x38>
    return USART_FAILURE;
8002b86a:	3f f8       	mov	r8,-1
8002b86c:	c0 38       	rjmp	8002b872 <usart_getchar+0x3c>

  return c;
8002b86e:	ee f8 ff f8 	ld.w	r8,r7[-8]
}
8002b872:	10 9c       	mov	r12,r8
8002b874:	2f dd       	sub	sp,-12
8002b876:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b87a:	00 00       	add	r0,r0
8002b87c:	80 02       	ld.sh	r2,r0[0x0]
8002b87e:	b6 c4       	st.b	r11[0x4],r4

8002b880 <usart_write_line>:


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
8002b880:	eb cd 40 c0 	pushm	r6-r7,lr
8002b884:	1a 97       	mov	r7,sp
8002b886:	20 2d       	sub	sp,8
8002b888:	48 e6       	lddpc	r6,8002b8c0 <usart_write_line+0x40>
8002b88a:	1e 26       	rsub	r6,pc
8002b88c:	ef 4c ff fc 	st.w	r7[-4],r12
8002b890:	ef 4b ff f8 	st.w	r7[-8],r11
  while (*string != '\0')
8002b894:	c0 e8       	rjmp	8002b8b0 <usart_write_line+0x30>
    usart_putchar(usart, *string++);
8002b896:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b89a:	11 88       	ld.ub	r8,r8[0x0]
8002b89c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002b8a0:	2f f9       	sub	r9,-1
8002b8a2:	ef 49 ff f8 	st.w	r7[-8],r9
8002b8a6:	10 9b       	mov	r11,r8
8002b8a8:	ee fc ff fc 	ld.w	r12,r7[-4]
8002b8ac:	f0 16 00 a9 	mcall	r6[676]
}


void usart_write_line(volatile avr32_usart_t *usart, const char *string)
{
  while (*string != '\0')
8002b8b0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8b4:	11 88       	ld.ub	r8,r8[0x0]
8002b8b6:	58 08       	cp.w	r8,0
8002b8b8:	ce f1       	brne	8002b896 <usart_write_line+0x16>
    usart_putchar(usart, *string++);
}
8002b8ba:	2f ed       	sub	sp,-8
8002b8bc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b8c0:	80 02       	ld.sh	r2,r0[0x0]
8002b8c2:	b7 0e       	ld.d	lr,r11
8002b8c4:	45 72       	lddsp	r2,sp[0x15c]
8002b8c6:	72 6f       	ld.w	pc,r9[0x18]
8002b8c8:	72 21       	ld.w	r1,r9[0x8]
8002b8ca:	21 21       	sub	r1,18
8002b8cc:	0d 0a       	ld.w	r10,r6++
	...

8002b8d0 <usart_get_echo_line>:


int usart_get_echo_line(volatile avr32_usart_t *usart)
{
8002b8d0:	eb cd 40 c0 	pushm	r6-r7,lr
8002b8d4:	1a 97       	mov	r7,sp
8002b8d6:	20 3d       	sub	sp,12
8002b8d8:	49 e6       	lddpc	r6,8002b950 <usart_get_echo_line+0x80>
8002b8da:	1e 26       	rsub	r6,pc
8002b8dc:	ef 4c ff f4 	st.w	r7[-12],r12
  int rx_char;
  int retval = USART_SUCCESS;
8002b8e0:	30 08       	mov	r8,0
8002b8e2:	ef 48 ff fc 	st.w	r7[-4],r8
8002b8e6:	c0 28       	rjmp	8002b8ea <usart_get_echo_line+0x1a>
    if (rx_char == '\r')
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
      break;
    }
  }
8002b8e8:	d7 03       	nop
  int rx_char;
  int retval = USART_SUCCESS;

  while (1)
  {
    rx_char = usart_getchar(usart);
8002b8ea:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b8ee:	f0 16 01 ce 	mcall	r6[1848]
8002b8f2:	18 98       	mov	r8,r12
8002b8f4:	ef 48 ff f8 	st.w	r7[-8],r8
    if (rx_char == USART_FAILURE)
8002b8f8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b8fc:	5b f8       	cp.w	r8,-1
8002b8fe:	c0 b1       	brne	8002b914 <usart_get_echo_line+0x44>
    {
      usart_write_line(usart, "Error!!!\r\n");
8002b900:	fe cb 00 3c 	sub	r11,pc,60
8002b904:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b908:	f0 16 01 63 	mcall	r6[1420]
      retval = USART_FAILURE;
8002b90c:	3f f8       	mov	r8,-1
8002b90e:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002b912:	c1 98       	rjmp	8002b944 <usart_get_echo_line+0x74>
    }
    if (rx_char == '\x03')
8002b914:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b918:	58 38       	cp.w	r8,3
8002b91a:	c0 51       	brne	8002b924 <usart_get_echo_line+0x54>
    {
      retval = USART_FAILURE;
8002b91c:	3f f8       	mov	r8,-1
8002b91e:	ef 48 ff fc 	st.w	r7[-4],r8
      break;
8002b922:	c1 18       	rjmp	8002b944 <usart_get_echo_line+0x74>
    }
    usart_putchar(usart, rx_char);
8002b924:	ee fb ff f8 	ld.w	r11,r7[-8]
8002b928:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b92c:	f0 16 00 a9 	mcall	r6[676]
    if (rx_char == '\r')
8002b930:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002b934:	58 d8       	cp.w	r8,13
8002b936:	cd 91       	brne	8002b8e8 <usart_get_echo_line+0x18>
    { // Add a LF and consider this as the end of the line.
      usart_putchar(usart, '\n');
8002b938:	30 ab       	mov	r11,10
8002b93a:	ee fc ff f4 	ld.w	r12,r7[-12]
8002b93e:	f0 16 00 a9 	mcall	r6[676]
      break;
8002b942:	d7 03       	nop
    }
  }

  return retval;
8002b944:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002b948:	10 9c       	mov	r12,r8
8002b94a:	2f dd       	sub	sp,-12
8002b94c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b950:	80 02       	ld.sh	r2,r0[0x0]
8002b952:	b7 5e       	asr	lr,0x17

8002b954 <delay_init>:
#endif

//_____ D E C L A R A T I O N S ____________________________________________

void delay_init(unsigned long fcpu_hz)
{
8002b954:	eb cd 40 c0 	pushm	r6-r7,lr
8002b958:	1a 97       	mov	r7,sp
8002b95a:	20 1d       	sub	sp,4
8002b95c:	48 66       	lddpc	r6,8002b974 <delay_init+0x20>
8002b95e:	1e 26       	rsub	r6,pc
8002b960:	ef 4c ff fc 	st.w	r7[-4],r12
#ifndef FREERTOS_USED
  s_fcpu_hz = fcpu_hz;
8002b964:	ec f8 04 e0 	ld.w	r8,r6[1248]
8002b968:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002b96c:	91 09       	st.w	r8[0x0],r9
#endif
}
8002b96e:	2f fd       	sub	sp,-4
8002b970:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002b974:	80 02       	ld.sh	r2,r0[0x0]
8002b976:	b7 e2       	*unknown*

8002b978 <delay_ms>:


void delay_ms(unsigned long delay)
{
8002b978:	eb cd 40 c0 	pushm	r6-r7,lr
8002b97c:	1a 97       	mov	r7,sp
8002b97e:	20 cd       	sub	sp,48
8002b980:	4d 36       	lddpc	r6,8002bacc <delay_ms+0x154>
8002b982:	1e 26       	rsub	r6,pc
8002b984:	ef 4c ff d0 	st.w	r7[-48],r12
#if (defined FREERTOS_USED)
  vTaskDelay( (portTickType)TASK_DELAY_MS(delay) );
#elif (defined NUTOS_USED)
  NutSleep(delay);
#else
  cpu_delay_ms(delay, s_fcpu_hz);
8002b988:	ec fc 04 e0 	ld.w	r12,r6[1248]
8002b98c:	78 0c       	ld.w	r12,r12[0x0]
8002b98e:	ee fe ff d0 	ld.w	lr,r7[-48]
8002b992:	ef 4e ff e4 	st.w	r7[-28],lr
8002b996:	ef 4c ff e0 	st.w	r7[-32],r12
8002b99a:	ee fc ff e4 	ld.w	r12,r7[-28]
8002b99e:	ef 4c ff ec 	st.w	r7[-20],r12
8002b9a2:	ee fc ff e0 	ld.w	r12,r7[-32]
8002b9a6:	ef 4c ff e8 	st.w	r7[-24],r12
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline uint32_t cpu_ms_2_cy(unsigned long ms, unsigned long fcpu_hz)
{
  return ((unsigned long long)ms * fcpu_hz + 999) / 1000;
8002b9aa:	ee fa ff ec 	ld.w	r10,r7[-20]
8002b9ae:	30 0b       	mov	r11,0
8002b9b0:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002b9b4:	30 09       	mov	r9,0
8002b9b6:	f6 08 02 4c 	mul	r12,r11,r8
8002b9ba:	f2 0a 02 4e 	mul	lr,r9,r10
8002b9be:	1c 0c       	add	r12,lr
8002b9c0:	f4 08 06 48 	mulu.d	r8,r10,r8
8002b9c4:	12 0c       	add	r12,r9
8002b9c6:	18 99       	mov	r9,r12
8002b9c8:	e0 6a 03 e7 	mov	r10,999
8002b9cc:	30 0b       	mov	r11,0
8002b9ce:	f0 0a 00 0a 	add	r10,r8,r10
8002b9d2:	f2 0b 00 4b 	adc	r11,r9,r11
8002b9d6:	e0 68 03 e8 	mov	r8,1000
8002b9da:	30 09       	mov	r9,0
8002b9dc:	f0 16 01 08 	mcall	r6[1056]
8002b9e0:	14 98       	mov	r8,r10
8002b9e2:	16 99       	mov	r9,r11
__attribute__((__always_inline__))
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
8002b9e4:	ef 48 ff f4 	st.w	r7[-12],r8
8002b9e8:	ee c8 00 2c 	sub	r8,r7,44
8002b9ec:	ef 48 ff f0 	st.w	r7[-16],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline void cpu_set_timeout(unsigned long delay, t_cpu_time *cpu_time)
{
  cpu_time->delay_start_cycle = Get_system_register(AVR32_COUNT);
8002b9f0:	e1 b8 00 42 	mfsr	r8,0x108
8002b9f4:	10 99       	mov	r9,r8
8002b9f6:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002b9fa:	91 09       	st.w	r8[0x0],r9
  cpu_time->delay_end_cycle   = cpu_time->delay_start_cycle + delay;
8002b9fc:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba00:	70 09       	ld.w	r9,r8[0x0]
8002ba02:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002ba06:	10 09       	add	r9,r8
8002ba08:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002ba0c:	91 19       	st.w	r8[0x4],r9
  cpu_time->timer_state       = CPU_TIMER_STATE_STARTED;
8002ba0e:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002ba12:	30 08       	mov	r8,0
8002ba14:	f3 68 00 08 	st.b	r9[8],r8
8002ba18:	ee c8 00 2c 	sub	r8,r7,44
8002ba1c:	ef 48 ff f8 	st.w	r7[-8],r8
#if (defined __GNUC__)
__attribute__((__always_inline__))
#endif
static inline unsigned long cpu_is_timeout(t_cpu_time *cpu_time)
{
  unsigned long current_cycle_count = Get_system_register(AVR32_COUNT);
8002ba20:	e1 b8 00 42 	mfsr	r8,0x108
8002ba24:	ef 48 ff fc 	st.w	r7[-4],r8

  if( cpu_time->timer_state==CPU_TIMER_STATE_STOPPED )
8002ba28:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba2c:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ba30:	30 28       	mov	r8,2
8002ba32:	f0 09 18 00 	cp.b	r9,r8
8002ba36:	c0 31       	brne	8002ba3c <delay_ms+0xc4>
    return false;
8002ba38:	30 08       	mov	r8,0
8002ba3a:	c4 38       	rjmp	8002bac0 <delay_ms+0x148>

  // Test if the timeout as already occured.
  else if (cpu_time->timer_state == CPU_TIMER_STATE_REACHED)
8002ba3c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba40:	f1 39 00 08 	ld.ub	r9,r8[8]
8002ba44:	30 18       	mov	r8,1
8002ba46:	f0 09 18 00 	cp.b	r9,r8
8002ba4a:	c0 31       	brne	8002ba50 <delay_ms+0xd8>
    return true;
8002ba4c:	30 18       	mov	r8,1
8002ba4e:	c3 98       	rjmp	8002bac0 <delay_ms+0x148>

  // If the ending cycle count of this timeout is wrapped, ...
  else if (cpu_time->delay_start_cycle > cpu_time->delay_end_cycle)
8002ba50:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba54:	70 09       	ld.w	r9,r8[0x0]
8002ba56:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba5a:	70 18       	ld.w	r8,r8[0x4]
8002ba5c:	10 39       	cp.w	r9,r8
8002ba5e:	e0 88 00 1a 	brls	8002ba92 <delay_ms+0x11a>
  {
    if (current_cycle_count < cpu_time->delay_start_cycle && current_cycle_count > cpu_time->delay_end_cycle)
8002ba62:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba66:	70 08       	ld.w	r8,r8[0x0]
8002ba68:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba6c:	10 39       	cp.w	r9,r8
8002ba6e:	c1 02       	brcc	8002ba8e <delay_ms+0x116>
8002ba70:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba74:	70 18       	ld.w	r8,r8[0x4]
8002ba76:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba7a:	10 39       	cp.w	r9,r8
8002ba7c:	e0 88 00 09 	brls	8002ba8e <delay_ms+0x116>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002ba80:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002ba84:	30 18       	mov	r8,1
8002ba86:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002ba8a:	30 18       	mov	r8,1
8002ba8c:	c1 a8       	rjmp	8002bac0 <delay_ms+0x148>
    }
    return false;
8002ba8e:	30 08       	mov	r8,0
8002ba90:	c1 88       	rjmp	8002bac0 <delay_ms+0x148>
  }
  else
  {
    if (current_cycle_count < cpu_time->delay_start_cycle || current_cycle_count > cpu_time->delay_end_cycle)
8002ba92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ba96:	70 08       	ld.w	r8,r8[0x0]
8002ba98:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ba9c:	10 39       	cp.w	r9,r8
8002ba9e:	c0 93       	brcs	8002bab0 <delay_ms+0x138>
8002baa0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002baa4:	70 18       	ld.w	r8,r8[0x4]
8002baa6:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002baaa:	10 39       	cp.w	r9,r8
8002baac:	e0 88 00 09 	brls	8002babe <delay_ms+0x146>
    {
      cpu_time->timer_state = CPU_TIMER_STATE_REACHED;
8002bab0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bab4:	30 18       	mov	r8,1
8002bab6:	f3 68 00 08 	st.b	r9[8],r8
      return true;
8002baba:	30 18       	mov	r8,1
8002babc:	c0 28       	rjmp	8002bac0 <delay_ms+0x148>
    }
    return false;
8002babe:	30 08       	mov	r8,0
#endif
static inline void cpu_delay_ms(unsigned long delay, unsigned long fcpu_hz)
{
  t_cpu_time timer;
  cpu_set_timeout( cpu_ms_2_cy(delay, fcpu_hz), &timer);
  while( !cpu_is_timeout(&timer) );
8002bac0:	58 08       	cp.w	r8,0
8002bac2:	ca b0       	breq	8002ba18 <delay_ms+0xa0>
#endif
}
8002bac4:	2f 4d       	sub	sp,-48
8002bac6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002baca:	00 00       	add	r0,r0
8002bacc:	80 02       	ld.sh	r2,r0[0x0]
8002bace:	b8 06       	st.h	r12[0x0],r6

8002bad0 <_stext>:

  .global _stext
  .type _stext, @function
_stext:
  // Set initial stack pointer.
  lda.w   sp, _estack
8002bad0:	48 dd       	lddpc	sp,8002bb04 <udata_clear_loop_end+0x4>

  // Set up EVBA so interrupts can be enabled.
  lda.w   r0, _evba
8002bad2:	fe c0 a8 d2 	sub	r0,pc,-22318
  mtsr    AVR32_EVBA, r0
8002bad6:	e3 b0 00 01 	mtsr	0x4,r0

  // Enable the exception processing.
  csrf    AVR32_SR_EM_OFFSET

  // Load initialized data having a global lifetime from the data LMA.
  lda.w   r0, _data
8002bada:	d5 53       	csrf	0x15
  lda.w   r1, _edata
8002badc:	48 b0       	lddpc	r0,8002bb08 <udata_clear_loop_end+0x8>
  cp      r0, r1
8002bade:	48 c1       	lddpc	r1,8002bb0c <udata_clear_loop_end+0xc>
  brhs    idata_load_loop_end
8002bae0:	02 30       	cp.w	r0,r1
  lda.w   r2, _data_lma
8002bae2:	c0 62       	brcc	8002baee <idata_load_loop_end>
idata_load_loop:
  ld.d    r4, r2++
8002bae4:	48 b2       	lddpc	r2,8002bb10 <udata_clear_loop_end+0x10>

8002bae6 <idata_load_loop>:
  st.d    r0++, r4
8002bae6:	a5 05       	ld.d	r4,r2++
  cp      r0, r1
8002bae8:	a1 24       	st.d	r0++,r4
  brlo    idata_load_loop
8002baea:	02 30       	cp.w	r0,r1
idata_load_loop_end:

  // Clear uninitialized data having a global lifetime in the blank static storage section.
  lda.w   r0, __bss_start
8002baec:	cf d3       	brcs	8002bae6 <idata_load_loop>

8002baee <idata_load_loop_end>:
  lda.w   r1, _end
8002baee:	48 a0       	lddpc	r0,8002bb14 <udata_clear_loop_end+0x14>
  cp      r0, r1
8002baf0:	48 a1       	lddpc	r1,8002bb18 <udata_clear_loop_end+0x18>
  brhs    udata_clear_loop_end
8002baf2:	02 30       	cp.w	r0,r1
  mov     r2, 0
8002baf4:	c0 62       	brcc	8002bb00 <udata_clear_loop_end>
  mov     r3, 0
8002baf6:	30 02       	mov	r2,0
udata_clear_loop:
  st.d    r0++, r2
8002baf8:	30 03       	mov	r3,0

8002bafa <udata_clear_loop>:
  cp      r0, r1
8002bafa:	a1 22       	st.d	r0++,r2
  brlo    udata_clear_loop
8002bafc:	02 30       	cp.w	r0,r1
  // Safety: Set the default "return" @ to the exit routine address.
  lda.w   lr, exit
#endif

  // Start the show.
  lda.w   pc, main
8002bafe:	cf e3       	brcs	8002bafa <udata_clear_loop>

8002bb00 <udata_clear_loop_end>:
8002bb00:	fe cf e7 f4 	sub	pc,pc,-6156
8002bb04:	00 01       	add	r1,r0
8002bb06:	00 00       	add	r0,r0
8002bb08:	00 00       	add	r0,r0
8002bb0a:	00 04       	add	r4,r0
8002bb0c:	00 00       	add	r0,r0
8002bb0e:	20 e0       	sub	r0,14
8002bb10:	80 03       	ld.sh	r3,r0[0x0]
8002bb12:	1a 48       	or	r8,sp
8002bb14:	00 00       	add	r0,r0
8002bb16:	20 e0       	sub	r0,14
8002bb18:	00 00       	add	r0,r0
8002bb1a:	97 10       	st.w	r11[0x4],r0

8002bb1c <board_init>:
8002bb1c:	eb cd 40 c0 	pushm	r6-r7,lr
#if defined (CONF_BOARD_AT45DBX)
#define AT45DBX_MEM_CNT             1
#endif

void board_init(void)
{
8002bb20:	1a 97       	mov	r7,sp
8002bb22:	48 76       	lddpc	r6,8002bb3c <board_init+0x20>
8002bb24:	1e 26       	rsub	r6,pc
		sizeof(AT45DBX_SPI_GPIO_MAP) / sizeof(AT45DBX_SPI_GPIO_MAP[0]));
#endif

	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).        
	gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002bb26:	30 1b       	mov	r11,1
8002bb28:	32 0c       	mov	r12,32
8002bb2a:	f0 16 00 3d 	mcall	r6[244]
	gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
8002bb2e:	30 1b       	mov	r11,1
8002bb30:	32 1c       	mov	r12,33
8002bb32:	f0 16 00 3d 	mcall	r6[244]
  };

  // TWI gpio pins cofiguration
  gpio_enable_module(TWI_GPIO_MAP, sizeof(TWI_GPIO_MAP) / sizeof(TWI_GPIO_MAP[0]));
#endif
}
8002bb36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bb3a:	00 00       	add	r0,r0
8002bb3c:	80 02       	ld.sh	r2,r0[0x0]
8002bb3e:	b9 a8       	sbr	r8,0x18

8002bb40 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002bb40:	eb cd 40 80 	pushm	r7,lr
8002bb44:	1a 97       	mov	r7,sp
8002bb46:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002bb48:	e1 b8 00 00 	mfsr	r8,0x0
8002bb4c:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002bb50:	d3 03       	ssrf	0x10

	return flags;
8002bb52:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bb56:	10 9c       	mov	r12,r8
8002bb58:	2f fd       	sub	sp,-4
8002bb5a:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb5e <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002bb5e:	eb cd 40 80 	pushm	r7,lr
8002bb62:	1a 97       	mov	r7,sp
8002bb64:	20 1d       	sub	sp,4
8002bb66:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002bb6a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bb6e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002bb72:	2f fd       	sub	sp,-4
8002bb74:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bb78 <osc_priv_enable_osc0>:
 */
#include <osc.h>

#ifdef BOARD_OSC0_HZ
void osc_priv_enable_osc0(void)
{
8002bb78:	eb cd 40 c0 	pushm	r6-r7,lr
8002bb7c:	1a 97       	mov	r7,sp
8002bb7e:	20 1d       	sub	sp,4
8002bb80:	48 c6       	lddpc	r6,8002bbb0 <osc_priv_enable_osc0+0x38>
8002bb82:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bb84:	cd ef       	rcall	8002bb40 <cpu_irq_save>
8002bb86:	18 98       	mov	r8,r12
8002bb88:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002bb8c:	fe 78 08 00 	mov	r8,-63488
8002bb90:	32 49       	mov	r9,36
8002bb92:	ea 19 aa 00 	orh	r9,0xaa00
8002bb96:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] =
8002bb98:	fe 78 08 00 	mov	r8,-63488
8002bb9c:	e0 79 0c 07 	mov	r9,68615
8002bba0:	91 99       	st.w	r8[0x24],r9
			(OSC0_STARTUP_VALUE << AVR32_SCIF_OSCCTRL_STARTUP)
			| (OSC0_GAIN_VALUE << AVR32_SCIF_OSCCTRL_GAIN)
			| (OSC0_MODE_VALUE << AVR32_SCIF_OSCCTRL_MODE)
			| (1U << AVR32_SCIF_OSCCTRL_OSCEN);
	cpu_irq_restore(flags);
8002bba2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bba6:	cd cf       	rcall	8002bb5e <cpu_irq_restore>
}
8002bba8:	2f fd       	sub	sp,-4
8002bbaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bbae:	00 00       	add	r0,r0
8002bbb0:	80 02       	ld.sh	r2,r0[0x0]
8002bbb2:	ba 06       	st.h	sp[0x0],r6

8002bbb4 <osc_priv_disable_osc0>:

void osc_priv_disable_osc0(void)
{
8002bbb4:	eb cd 40 c0 	pushm	r6-r7,lr
8002bbb8:	1a 97       	mov	r7,sp
8002bbba:	20 1d       	sub	sp,4
8002bbbc:	48 b6       	lddpc	r6,8002bbe8 <osc_priv_disable_osc0+0x34>
8002bbbe:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bbc0:	cc 0f       	rcall	8002bb40 <cpu_irq_save>
8002bbc2:	18 98       	mov	r8,r12
8002bbc4:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL;
8002bbc8:	fe 78 08 00 	mov	r8,-63488
8002bbcc:	32 49       	mov	r9,36
8002bbce:	ea 19 aa 00 	orh	r9,0xaa00
8002bbd2:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl[0] = 0;
8002bbd4:	fe 78 08 00 	mov	r8,-63488
8002bbd8:	30 09       	mov	r9,0
8002bbda:	91 99       	st.w	r8[0x24],r9
	cpu_irq_restore(flags);
8002bbdc:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bbe0:	cb ff       	rcall	8002bb5e <cpu_irq_restore>
}
8002bbe2:	2f fd       	sub	sp,-4
8002bbe4:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bbe8:	80 02       	ld.sh	r2,r0[0x0]
8002bbea:	ba 42       	st.h	sp[0x8],r2

8002bbec <osc_priv_enable_osc32>:
}
#endif /* BOARD_OSC0_HZ */

#ifdef BOARD_OSC32_HZ
void osc_priv_enable_osc32(void)
{
8002bbec:	eb cd 40 c0 	pushm	r6-r7,lr
8002bbf0:	1a 97       	mov	r7,sp
8002bbf2:	20 1d       	sub	sp,4
8002bbf4:	48 c6       	lddpc	r6,8002bc24 <osc_priv_enable_osc32+0x38>
8002bbf6:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bbf8:	ca 4f       	rcall	8002bb40 <cpu_irq_save>
8002bbfa:	18 98       	mov	r8,r12
8002bbfc:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002bc00:	fe 78 08 00 	mov	r8,-63488
8002bc04:	34 c9       	mov	r9,76
8002bc06:	ea 19 aa 00 	orh	r9,0xaa00
8002bc0a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 =
8002bc0c:	fe 78 08 00 	mov	r8,-63488
8002bc10:	e2 69 01 01 	mov	r9,131329
8002bc14:	f1 49 00 4c 	st.w	r8[76],r9
			(OSC32_STARTUP_VALUE << AVR32_SCIF_OSCCTRL32_STARTUP)
			| (OSC32_MODE_VALUE << AVR32_SCIF_OSCCTRL32_MODE)
			| (1U << AVR32_SCIF_OSCCTRL32_OSC32EN);
	cpu_irq_restore(flags);
8002bc18:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc1c:	ca 1f       	rcall	8002bb5e <cpu_irq_restore>
}
8002bc1e:	2f fd       	sub	sp,-4
8002bc20:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc24:	80 02       	ld.sh	r2,r0[0x0]
8002bc26:	ba 7a       	st.h	sp[0xe],r10

8002bc28 <osc_priv_disable_osc32>:

void osc_priv_disable_osc32(void)
{
8002bc28:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc2c:	1a 97       	mov	r7,sp
8002bc2e:	20 1d       	sub	sp,4
8002bc30:	48 c6       	lddpc	r6,8002bc60 <osc_priv_disable_osc32+0x38>
8002bc32:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bc34:	c8 6f       	rcall	8002bb40 <cpu_irq_save>
8002bc36:	18 98       	mov	r8,r12
8002bc38:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_OSCCTRL32;
8002bc3c:	fe 78 08 00 	mov	r8,-63488
8002bc40:	34 c9       	mov	r9,76
8002bc42:	ea 19 aa 00 	orh	r9,0xaa00
8002bc46:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.oscctrl32 = 0;
8002bc48:	fe 78 08 00 	mov	r8,-63488
8002bc4c:	30 09       	mov	r9,0
8002bc4e:	f1 49 00 4c 	st.w	r8[76],r9
	cpu_irq_restore(flags);
8002bc52:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bc56:	c8 4f       	rcall	8002bb5e <cpu_irq_restore>
}
8002bc58:	2f fd       	sub	sp,-4
8002bc5a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bc5e:	00 00       	add	r0,r0
8002bc60:	80 02       	ld.sh	r2,r0[0x0]
8002bc62:	ba b6       	st.b	sp[0x3],r6

8002bc64 <osc_priv_enable_rc8m>:
#endif /* BOARD_OSC0_HZ */

void osc_priv_enable_rc8m(void)
{
8002bc64:	eb cd 40 c0 	pushm	r6-r7,lr
8002bc68:	1a 97       	mov	r7,sp
8002bc6a:	20 3d       	sub	sp,12
8002bc6c:	49 d6       	lddpc	r6,8002bce0 <osc_priv_enable_rc8m+0x7c>
8002bc6e:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;
    uint32_t* calibration_bits = (uint32_t*)0x80800200;
8002bc70:	e0 68 02 00 	mov	r8,512
8002bc74:	ea 18 80 80 	orh	r8,0x8080
8002bc78:	ef 48 ff fc 	st.w	r7[-4],r8
	/* Wait for the CALIB field to be updated from fuses after reset */
	while (!(AVR32_SCIF.rccr8 & AVR32_SCIF_RCCR8_FCD_MASK)) {
8002bc7c:	fe 78 08 00 	mov	r8,-63488
8002bc80:	71 28       	ld.w	r8,r8[0x48]
8002bc82:	e6 18 00 01 	andh	r8,0x1,COH
8002bc86:	cf b0       	breq	8002bc7c <osc_priv_enable_rc8m+0x18>
		/* Do nothing */
	}

	/* Enable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002bc88:	c5 cf       	rcall	8002bb40 <cpu_irq_save>
8002bc8a:	18 98       	mov	r8,r12
8002bc8c:	ef 48 ff f4 	st.w	r7[-12],r8
	rccr8 = AVR32_SCIF.rccr8;
8002bc90:	fe 78 08 00 	mov	r8,-63488
8002bc94:	71 28       	ld.w	r8,r8[0x48]
8002bc96:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | ((*calibration_bits)&AVR32_SCIF_RCCR8_CALIB_MASK);
8002bc9a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bc9e:	70 08       	ld.w	r8,r8[0x0]
8002bca0:	f1 d8 c0 08 	bfextu	r8,r8,0x0,0x8
8002bca4:	b1 a8       	sbr	r8,0x10
8002bca6:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bcaa:	f3 e8 00 08 	and	r8,r9,r8
8002bcae:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 |= 1U << AVR32_SCIF_RCOSC8_EN;
8002bcb2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002bcb6:	b9 a8       	sbr	r8,0x18
8002bcb8:	ef 48 ff f8 	st.w	r7[-8],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002bcbc:	fe 78 08 00 	mov	r8,-63488
8002bcc0:	34 89       	mov	r9,72
8002bcc2:	ea 19 aa 00 	orh	r9,0xaa00
8002bcc6:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002bcc8:	fe 78 08 00 	mov	r8,-63488
8002bccc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bcd0:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002bcd4:	ee fc ff f4 	ld.w	r12,r7[-12]
8002bcd8:	c4 3f       	rcall	8002bb5e <cpu_irq_restore>
}
8002bcda:	2f dd       	sub	sp,-12
8002bcdc:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bce0:	80 02       	ld.sh	r2,r0[0x0]
8002bce2:	ba f2       	st.b	sp[0x7],r2

8002bce4 <osc_priv_disable_rc8m>:

void osc_priv_disable_rc8m(void)
{
8002bce4:	eb cd 40 c0 	pushm	r6-r7,lr
8002bce8:	1a 97       	mov	r7,sp
8002bcea:	20 2d       	sub	sp,8
8002bcec:	49 36       	lddpc	r6,8002bd38 <osc_priv_disable_rc8m+0x54>
8002bcee:	1e 26       	rsub	r6,pc
	irqflags_t flags;
	uint32_t   rccr8;

	/* Disable the oscillator without touching the CALIB and FCD fields */
	flags = cpu_irq_save();
8002bcf0:	c2 8f       	rcall	8002bb40 <cpu_irq_save>
8002bcf2:	18 98       	mov	r8,r12
8002bcf4:	ef 48 ff f8 	st.w	r7[-8],r8
	rccr8 = AVR32_SCIF.rccr8;
8002bcf8:	fe 78 08 00 	mov	r8,-63488
8002bcfc:	71 28       	ld.w	r8,r8[0x48]
8002bcfe:	ef 48 ff fc 	st.w	r7[-4],r8
	rccr8 &= AVR32_SCIF_RCCR8_FCD_MASK | AVR32_SCIF_RCCR8_CALIB_MASK;
8002bd02:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bd06:	e4 18 00 01 	andh	r8,0x1
8002bd0a:	e0 18 00 ff 	andl	r8,0xff
8002bd0e:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RCCR8;
8002bd12:	fe 78 08 00 	mov	r8,-63488
8002bd16:	34 89       	mov	r9,72
8002bd18:	ea 19 aa 00 	orh	r9,0xaa00
8002bd1c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rccr8 = rccr8;
8002bd1e:	fe 78 08 00 	mov	r8,-63488
8002bd22:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002bd26:	f1 49 00 48 	st.w	r8[72],r9
	cpu_irq_restore(flags);
8002bd2a:	ee fc ff f8 	ld.w	r12,r7[-8]
8002bd2e:	c1 8f       	rcall	8002bb5e <cpu_irq_restore>
}
8002bd30:	2f ed       	sub	sp,-8
8002bd32:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd36:	00 00       	add	r0,r0
8002bd38:	80 02       	ld.sh	r2,r0[0x0]
8002bd3a:	bb 72       	lsl	r2,0x1b

8002bd3c <osc_priv_enable_rc120m>:

void osc_priv_enable_rc120m(void)
{
8002bd3c:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd40:	1a 97       	mov	r7,sp
8002bd42:	20 1d       	sub	sp,4
8002bd44:	48 c6       	lddpc	r6,8002bd74 <osc_priv_enable_rc120m+0x38>
8002bd46:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bd48:	cf ce       	rcall	8002bb40 <cpu_irq_save>
8002bd4a:	18 98       	mov	r8,r12
8002bd4c:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002bd50:	fe 78 08 00 	mov	r8,-63488
8002bd54:	35 89       	mov	r9,88
8002bd56:	ea 19 aa 00 	orh	r9,0xaa00
8002bd5a:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 1U << AVR32_SCIF_RC120MCR_EN;
8002bd5c:	fe 78 08 00 	mov	r8,-63488
8002bd60:	30 19       	mov	r9,1
8002bd62:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002bd66:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bd6a:	cf ae       	rcall	8002bb5e <cpu_irq_restore>
}
8002bd6c:	2f fd       	sub	sp,-4
8002bd6e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bd72:	00 00       	add	r0,r0
8002bd74:	80 02       	ld.sh	r2,r0[0x0]
8002bd76:	bb ca       	cbr	r10,0x1a

8002bd78 <osc_priv_disable_rc120m>:

void osc_priv_disable_rc120m(void)
{
8002bd78:	eb cd 40 c0 	pushm	r6-r7,lr
8002bd7c:	1a 97       	mov	r7,sp
8002bd7e:	20 1d       	sub	sp,4
8002bd80:	48 c6       	lddpc	r6,8002bdb0 <osc_priv_disable_rc120m+0x38>
8002bd82:	1e 26       	rsub	r6,pc
	irqflags_t flags;

	flags = cpu_irq_save();
8002bd84:	cd ee       	rcall	8002bb40 <cpu_irq_save>
8002bd86:	18 98       	mov	r8,r12
8002bd88:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | AVR32_SCIF_RC120MCR;
8002bd8c:	fe 78 08 00 	mov	r8,-63488
8002bd90:	35 89       	mov	r9,88
8002bd92:	ea 19 aa 00 	orh	r9,0xaa00
8002bd96:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.rc120mcr = 0;
8002bd98:	fe 78 08 00 	mov	r8,-63488
8002bd9c:	30 09       	mov	r9,0
8002bd9e:	f1 49 00 58 	st.w	r8[88],r9
	cpu_irq_restore(flags);
8002bda2:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bda6:	cd ce       	rcall	8002bb5e <cpu_irq_restore>
}
8002bda8:	2f fd       	sub	sp,-4
8002bdaa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bdae:	00 00       	add	r0,r0
8002bdb0:	80 02       	ld.sh	r2,r0[0x0]
8002bdb2:	bc 06       	st.h	lr[0x0],r6

8002bdb4 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002bdb4:	eb cd 40 80 	pushm	r7,lr
8002bdb8:	1a 97       	mov	r7,sp
8002bdba:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002bdbc:	e1 b8 00 00 	mfsr	r8,0x0
8002bdc0:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002bdc4:	d3 03       	ssrf	0x10

	return flags;
8002bdc6:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bdca:	10 9c       	mov	r12,r8
8002bdcc:	2f fd       	sub	sp,-4
8002bdce:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bdd2 <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002bdd2:	eb cd 40 80 	pushm	r7,lr
8002bdd6:	1a 97       	mov	r7,sp
8002bdd8:	20 1d       	sub	sp,4
8002bdda:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002bdde:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bde2:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002bde6:	2f fd       	sub	sp,-4
8002bde8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bdec <pll_config_write>:
#include <avr32/io.h>
#include <compiler.h>
#include <pll.h>

void pll_config_write(const struct pll_config *cfg, unsigned int pll_id)
{
8002bdec:	eb cd 40 c0 	pushm	r6-r7,lr
8002bdf0:	1a 97       	mov	r7,sp
8002bdf2:	20 3d       	sub	sp,12
8002bdf4:	49 26       	lddpc	r6,8002be3c <pll_config_write+0x50>
8002bdf6:	1e 26       	rsub	r6,pc
8002bdf8:	ef 4c ff f8 	st.w	r7[-8],r12
8002bdfc:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002be00:	cd af       	rcall	8002bdb4 <cpu_irq_save>
8002be02:	18 98       	mov	r8,r12
8002be04:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002be08:	fe 78 08 00 	mov	r8,-63488
8002be0c:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be10:	2f 99       	sub	r9,-7
8002be12:	a3 69       	lsl	r9,0x2
8002be14:	ea 19 aa 00 	orh	r9,0xaa00
8002be18:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl;
8002be1a:	fe 78 08 00 	mov	r8,-63488
8002be1e:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be22:	ee fa ff f8 	ld.w	r10,r7[-8]
8002be26:	74 0a       	ld.w	r10,r10[0x0]
8002be28:	2f 99       	sub	r9,-7
8002be2a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002be2e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002be32:	cd 0f       	rcall	8002bdd2 <cpu_irq_restore>
}
8002be34:	2f dd       	sub	sp,-12
8002be36:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be3a:	00 00       	add	r0,r0
8002be3c:	80 02       	ld.sh	r2,r0[0x0]
8002be3e:	bc 7a       	st.h	lr[0xe],r10

8002be40 <pll_enable>:

void pll_enable(const struct pll_config *cfg, unsigned int pll_id)
{
8002be40:	eb cd 40 c0 	pushm	r6-r7,lr
8002be44:	1a 97       	mov	r7,sp
8002be46:	20 3d       	sub	sp,12
8002be48:	49 26       	lddpc	r6,8002be90 <pll_enable+0x50>
8002be4a:	1e 26       	rsub	r6,pc
8002be4c:	ef 4c ff f8 	st.w	r7[-8],r12
8002be50:	ef 4b ff f4 	st.w	r7[-12],r11
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002be54:	cb 0f       	rcall	8002bdb4 <cpu_irq_save>
8002be56:	18 98       	mov	r8,r12
8002be58:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002be5c:	fe 78 08 00 	mov	r8,-63488
8002be60:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be64:	2f 99       	sub	r9,-7
8002be66:	a3 69       	lsl	r9,0x2
8002be68:	ea 19 aa 00 	orh	r9,0xaa00
8002be6c:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = cfg->ctrl | (1U << AVR32_SCIF_PLLEN);
8002be6e:	fe 78 08 00 	mov	r8,-63488
8002be72:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002be76:	ee fa ff f8 	ld.w	r10,r7[-8]
8002be7a:	74 0a       	ld.w	r10,r10[0x0]
8002be7c:	a1 aa       	sbr	r10,0x0
8002be7e:	2f 99       	sub	r9,-7
8002be80:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002be84:	ee fc ff fc 	ld.w	r12,r7[-4]
8002be88:	ca 5f       	rcall	8002bdd2 <cpu_irq_restore>
}
8002be8a:	2f dd       	sub	sp,-12
8002be8c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002be90:	80 02       	ld.sh	r2,r0[0x0]
8002be92:	bc ce       	st.b	lr[0x4],lr

8002be94 <pll_disable>:

void pll_disable(unsigned int pll_id)
{
8002be94:	eb cd 40 c0 	pushm	r6-r7,lr
8002be98:	1a 97       	mov	r7,sp
8002be9a:	20 2d       	sub	sp,8
8002be9c:	49 06       	lddpc	r6,8002bedc <pll_disable+0x48>
8002be9e:	1e 26       	rsub	r6,pc
8002bea0:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(pll_id < NR_PLLS);

	flags = cpu_irq_save();
8002bea4:	c8 8f       	rcall	8002bdb4 <cpu_irq_save>
8002bea6:	18 98       	mov	r8,r12
8002bea8:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_SCIF.unlock = 0xaa000000 | (AVR32_SCIF_PLL + (4 * pll_id));
8002beac:	fe 78 08 00 	mov	r8,-63488
8002beb0:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002beb4:	2f 99       	sub	r9,-7
8002beb6:	a3 69       	lsl	r9,0x2
8002beb8:	ea 19 aa 00 	orh	r9,0xaa00
8002bebc:	91 69       	st.w	r8[0x18],r9
	AVR32_SCIF.pll[pll_id] = 0;
8002bebe:	fe 78 08 00 	mov	r8,-63488
8002bec2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002bec6:	2f 99       	sub	r9,-7
8002bec8:	30 0a       	mov	r10,0
8002beca:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
	cpu_irq_restore(flags);
8002bece:	ee fc ff fc 	ld.w	r12,r7[-4]
8002bed2:	c8 0f       	rcall	8002bdd2 <cpu_irq_restore>
}
8002bed4:	2f ed       	sub	sp,-8
8002bed6:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002beda:	00 00       	add	r0,r0
8002bedc:	80 02       	ld.sh	r2,r0[0x0]
8002bede:	bd 22       	st.d	lr++,r2

8002bee0 <cpu_irq_save>:
#endif

typedef uint32_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
8002bee0:	eb cd 40 80 	pushm	r7,lr
8002bee4:	1a 97       	mov	r7,sp
8002bee6:	20 1d       	sub	sp,4
	irqflags_t flags;

	flags = sysreg_read(AVR32_SR);
8002bee8:	e1 b8 00 00 	mfsr	r8,0x0
8002beec:	ef 48 ff fc 	st.w	r7[-4],r8
	cpu_irq_disable();
8002bef0:	d3 03       	ssrf	0x10

	return flags;
8002bef2:	ee f8 ff fc 	ld.w	r8,r7[-4]
}
8002bef6:	10 9c       	mov	r12,r8
8002bef8:	2f fd       	sub	sp,-4
8002befa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002befe <cpu_irq_restore>:
{
	return !(flags & AVR32_SR_GM_MASK);
}

static inline void cpu_irq_restore(irqflags_t flags)
{
8002befe:	eb cd 40 80 	pushm	r7,lr
8002bf02:	1a 97       	mov	r7,sp
8002bf04:	20 1d       	sub	sp,4
8002bf06:	ef 4c ff fc 	st.w	r7[-4],r12
   // Don't work with sysreg_write(AVR32_SR, flags)
   if( cpu_irq_is_enabled_flags(flags) ) {
      cpu_irq_enable();
   }
#else
	sysreg_write(AVR32_SR, flags);
8002bf0a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002bf0e:	e3 b8 00 00 	mtsr	0x0,r8
#endif
	barrier();
}
8002bf12:	2f fd       	sub	sp,-4
8002bf14:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bf18 <osc_enable>:
extern void osc_priv_enable_rc120m(void);
extern void osc_priv_disable_rc120m(void);
extern bool osc_priv_rc120m_is_ready(void);

static inline void osc_enable(uint8_t id)
{
8002bf18:	eb cd 40 c0 	pushm	r6-r7,lr
8002bf1c:	1a 97       	mov	r7,sp
8002bf1e:	20 1d       	sub	sp,4
8002bf20:	49 16       	lddpc	r6,8002bf64 <osc_enable+0x4c>
8002bf22:	1e 26       	rsub	r6,pc
8002bf24:	18 98       	mov	r8,r12
8002bf26:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002bf2a:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bf2e:	58 28       	cp.w	r8,2
8002bf30:	c1 10       	breq	8002bf52 <osc_enable+0x3a>
8002bf32:	e0 89 00 05 	brgt	8002bf3c <osc_enable+0x24>
8002bf36:	58 08       	cp.w	r8,0
8002bf38:	c0 70       	breq	8002bf46 <osc_enable+0x2e>
8002bf3a:	c1 18       	rjmp	8002bf5c <osc_enable+0x44>
8002bf3c:	58 38       	cp.w	r8,3
8002bf3e:	c0 70       	breq	8002bf4c <osc_enable+0x34>
8002bf40:	58 48       	cp.w	r8,4
8002bf42:	c0 b0       	breq	8002bf58 <osc_enable+0x40>
8002bf44:	c0 c8       	rjmp	8002bf5c <osc_enable+0x44>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		osc_priv_enable_osc0();
8002bf46:	f0 16 01 e9 	mcall	r6[1956]
		break;
8002bf4a:	c0 98       	rjmp	8002bf5c <osc_enable+0x44>
		break;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		osc_priv_enable_osc32();
8002bf4c:	f0 16 01 e0 	mcall	r6[1920]
		break;
8002bf50:	c0 68       	rjmp	8002bf5c <osc_enable+0x44>
#endif

	case OSC_ID_RC8M:
		osc_priv_enable_rc8m();
8002bf52:	f0 16 01 74 	mcall	r6[1488]
		break;
8002bf56:	c0 38       	rjmp	8002bf5c <osc_enable+0x44>

	case OSC_ID_RC120M:
		osc_priv_enable_rc120m();
8002bf58:	f0 16 01 9f 	mcall	r6[1660]

	default:
		/* unhandled_case(id); */
		break;
	}
}
8002bf5c:	2f fd       	sub	sp,-4
8002bf5e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002bf62:	00 00       	add	r0,r0
8002bf64:	80 02       	ld.sh	r2,r0[0x0]
8002bf66:	bd a6       	sbr	r6,0x1c

8002bf68 <osc_is_ready>:
		break;
	}
}

static inline bool osc_is_ready(uint8_t id)
{
8002bf68:	eb cd 40 80 	pushm	r7,lr
8002bf6c:	1a 97       	mov	r7,sp
8002bf6e:	20 1d       	sub	sp,4
8002bf70:	18 98       	mov	r8,r12
8002bf72:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002bf76:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bf7a:	58 38       	cp.w	r8,3
8002bf7c:	c1 50       	breq	8002bfa6 <osc_is_ready+0x3e>
8002bf7e:	e0 89 00 07 	brgt	8002bf8c <osc_is_ready+0x24>
8002bf82:	58 08       	cp.w	r8,0
8002bf84:	c0 90       	breq	8002bf96 <osc_is_ready+0x2e>
8002bf86:	58 28       	cp.w	r8,2
8002bf88:	c1 70       	breq	8002bfb6 <osc_is_ready+0x4e>
8002bf8a:	c2 88       	rjmp	8002bfda <osc_is_ready+0x72>
8002bf8c:	58 48       	cp.w	r8,4
8002bf8e:	c1 c0       	breq	8002bfc6 <osc_is_ready+0x5e>
8002bf90:	58 58       	cp.w	r8,5
8002bf92:	c2 20       	breq	8002bfd6 <osc_is_ready+0x6e>
8002bf94:	c2 38       	rjmp	8002bfda <osc_is_ready+0x72>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC0RDY));
8002bf96:	fe 78 08 00 	mov	r8,-63488
8002bf9a:	70 58       	ld.w	r8,r8[0x14]
8002bf9c:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bfa0:	5f 18       	srne	r8
8002bfa2:	5c 58       	castu.b	r8
8002bfa4:	c1 c8       	rjmp	8002bfdc <osc_is_ready+0x74>
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC1RDY));
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return !!(AVR32_SCIF.pclksr & (1 << AVR32_SCIF_OSC32RDY));
8002bfa6:	fe 78 08 00 	mov	r8,-63488
8002bfaa:	70 58       	ld.w	r8,r8[0x14]
8002bfac:	e2 18 00 04 	andl	r8,0x4,COH
8002bfb0:	5f 18       	srne	r8
8002bfb2:	5c 58       	castu.b	r8
8002bfb4:	c1 48       	rjmp	8002bfdc <osc_is_ready+0x74>
#endif

	case OSC_ID_RC8M:
		return !!(AVR32_SCIF.pclksr & (1U << AVR32_SCIF_RCOSC8MRDY));
8002bfb6:	fe 78 08 00 	mov	r8,-63488
8002bfba:	70 58       	ld.w	r8,r8[0x14]
8002bfbc:	e2 18 00 08 	andl	r8,0x8,COH
8002bfc0:	5f 18       	srne	r8
8002bfc2:	5c 58       	castu.b	r8
8002bfc4:	c0 c8       	rjmp	8002bfdc <osc_is_ready+0x74>

	case OSC_ID_RC120M:
		return !!(AVR32_SCIF.rc120mcr & (1 << AVR32_SCIF_RC120MCR_EN));
8002bfc6:	fe 78 08 00 	mov	r8,-63488
8002bfca:	71 68       	ld.w	r8,r8[0x58]
8002bfcc:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002bfd0:	5f 18       	srne	r8
8002bfd2:	5c 58       	castu.b	r8
8002bfd4:	c0 48       	rjmp	8002bfdc <osc_is_ready+0x74>

	case OSC_ID_RCSYS:
		/* RCSYS is always ready */
		return true;
8002bfd6:	30 18       	mov	r8,1
8002bfd8:	c0 28       	rjmp	8002bfdc <osc_is_ready+0x74>

	default:
		/* unhandled_case(id); */
		return false;
8002bfda:	30 08       	mov	r8,0
	}
}
8002bfdc:	10 9c       	mov	r12,r8
8002bfde:	2f fd       	sub	sp,-4
8002bfe0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002bfe4 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002bfe4:	eb cd 40 80 	pushm	r7,lr
8002bfe8:	1a 97       	mov	r7,sp
8002bfea:	20 1d       	sub	sp,4
8002bfec:	18 98       	mov	r8,r12
8002bfee:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002bff2:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002bff6:	58 38       	cp.w	r8,3
8002bff8:	c1 20       	breq	8002c01c <osc_get_rate+0x38>
8002bffa:	e0 89 00 07 	brgt	8002c008 <osc_get_rate+0x24>
8002bffe:	58 08       	cp.w	r8,0
8002c000:	c0 90       	breq	8002c012 <osc_get_rate+0x2e>
8002c002:	58 28       	cp.w	r8,2
8002c004:	c0 f0       	breq	8002c022 <osc_get_rate+0x3e>
8002c006:	c1 b8       	rjmp	8002c03c <osc_get_rate+0x58>
8002c008:	58 48       	cp.w	r8,4
8002c00a:	c1 10       	breq	8002c02c <osc_get_rate+0x48>
8002c00c:	58 58       	cp.w	r8,5
8002c00e:	c1 40       	breq	8002c036 <osc_get_rate+0x52>
8002c010:	c1 68       	rjmp	8002c03c <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c012:	e0 68 24 00 	mov	r8,9216
8002c016:	ea 18 00 f4 	orh	r8,0xf4
8002c01a:	c1 28       	rjmp	8002c03e <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c01c:	e0 68 80 00 	mov	r8,32768
8002c020:	c0 f8       	rjmp	8002c03e <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c022:	e0 68 12 00 	mov	r8,4608
8002c026:	ea 18 00 7a 	orh	r8,0x7a
8002c02a:	c0 a8       	rjmp	8002c03e <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c02c:	e0 68 0e 00 	mov	r8,3584
8002c030:	ea 18 07 27 	orh	r8,0x727
8002c034:	c0 58       	rjmp	8002c03e <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c036:	e0 78 c1 38 	mov	r8,115000
8002c03a:	c0 28       	rjmp	8002c03e <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c03c:	30 08       	mov	r8,0
	}
}
8002c03e:	10 9c       	mov	r12,r8
8002c040:	2f fd       	sub	sp,-4
8002c042:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c046 <osc_wait_ready>:
 * to become stable and ready to use as a clock source.
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
8002c046:	eb cd 40 c0 	pushm	r6-r7,lr
8002c04a:	1a 97       	mov	r7,sp
8002c04c:	20 1d       	sub	sp,4
8002c04e:	48 96       	lddpc	r6,8002c070 <osc_wait_ready+0x2a>
8002c050:	1e 26       	rsub	r6,pc
8002c052:	18 98       	mov	r8,r12
8002c054:	ef 68 ff fc 	st.b	r7[-4],r8
	while (!osc_is_ready(id)) {
8002c058:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c05c:	10 9c       	mov	r12,r8
8002c05e:	c8 5f       	rcall	8002bf68 <osc_is_ready>
8002c060:	18 98       	mov	r8,r12
8002c062:	ec 18 00 01 	eorl	r8,0x1
8002c066:	5c 58       	castu.b	r8
8002c068:	cf 81       	brne	8002c058 <osc_wait_ready+0x12>
		/* Do nothing */
	}
}
8002c06a:	2f fd       	sub	sp,-4
8002c06c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c070:	80 02       	ld.sh	r2,r0[0x0]
8002c072:	be d4       	st.b	pc[0x5],r4

8002c074 <pll_config_set_option>:
			* CONFIG_PLL##pll_id##_MUL)                            \
			/ CONFIG_PLL##pll_id##_DIV)

static inline void pll_config_set_option(struct pll_config *cfg,
		unsigned int option)
{
8002c074:	eb cd 40 80 	pushm	r7,lr
8002c078:	1a 97       	mov	r7,sp
8002c07a:	20 2d       	sub	sp,8
8002c07c:	ef 4c ff fc 	st.w	r7[-4],r12
8002c080:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(option < PLL_NR_OPTIONS);

	cfg->ctrl |= 1U << (AVR32_SCIF_PLLOPT + option);
8002c084:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c088:	70 09       	ld.w	r9,r8[0x0]
8002c08a:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c08e:	2f d8       	sub	r8,-3
8002c090:	30 1a       	mov	r10,1
8002c092:	f4 08 09 48 	lsl	r8,r10,r8
8002c096:	10 49       	or	r9,r8
8002c098:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c09c:	91 09       	st.w	r8[0x0],r9
}
8002c09e:	2f ed       	sub	sp,-8
8002c0a0:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c0a4 <pll_config_init>:
 * The PLL options #PLL_OPT_VCO_RANGE_LOW and #PLL_OPT_OUTPUT_DIV will
 * be set automatically based on the calculated target frequency.
 */
static inline void pll_config_init(struct pll_config *cfg,
		enum pll_source src, unsigned int div, unsigned int mul)
{
8002c0a4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c0a8:	1a 97       	mov	r7,sp
8002c0aa:	20 5d       	sub	sp,20
8002c0ac:	4b 46       	lddpc	r6,8002c17c <pll_config_init+0xd8>
8002c0ae:	1e 26       	rsub	r6,pc
8002c0b0:	ef 4c ff f8 	st.w	r7[-8],r12
8002c0b4:	ef 4b ff f4 	st.w	r7[-12],r11
8002c0b8:	ef 4a ff f0 	st.w	r7[-16],r10
8002c0bc:	ef 49 ff ec 	st.w	r7[-20],r9
	uint32_t vco_hz;

	Assert(src < PLL_NR_SOURCES);

	/* Calculate internal VCO frequency */
	vco_hz = osc_get_rate(src) * mul;
8002c0c0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c0c4:	5c 58       	castu.b	r8
8002c0c6:	10 9c       	mov	r12,r8
8002c0c8:	c8 ef       	rcall	8002bfe4 <osc_get_rate>
8002c0ca:	18 99       	mov	r9,r12
8002c0cc:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c0d0:	f2 08 02 48 	mul	r8,r9,r8
8002c0d4:	ef 48 ff fc 	st.w	r7[-4],r8
	vco_hz /= div;
8002c0d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0dc:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c0e0:	f0 09 0d 08 	divu	r8,r8,r9
8002c0e4:	ef 48 ff fc 	st.w	r7[-4],r8
	Assert(vco_hz >= PLL_MIN_HZ);
	Assert(vco_hz <= PLL_MAX_HZ);

	cfg->ctrl = 0;
8002c0e8:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c0ec:	30 09       	mov	r9,0
8002c0ee:	91 09       	st.w	r8[0x0],r9

	/* Bring the internal VCO frequency up to the minimum value */
	if ((vco_hz < PLL_MIN_HZ * 2) && (mul <= 8)) {
8002c0f0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c0f4:	e0 69 b3 ff 	mov	r9,46079
8002c0f8:	ea 19 04 c4 	orh	r9,0x4c4
8002c0fc:	12 38       	cp.w	r8,r9
8002c0fe:	e0 8b 00 15 	brhi	8002c128 <pll_config_init+0x84>
8002c102:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c106:	58 88       	cp.w	r8,8
8002c108:	e0 8b 00 10 	brhi	8002c128 <pll_config_init+0x84>
		mul *= 2;
8002c10c:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c110:	a1 78       	lsl	r8,0x1
8002c112:	ef 48 ff ec 	st.w	r7[-20],r8
		vco_hz *= 2;
8002c116:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c11a:	a1 78       	lsl	r8,0x1
8002c11c:	ef 48 ff fc 	st.w	r7[-4],r8
		pll_config_set_option(cfg, PLL_OPT_OUTPUT_DIV);
8002c120:	30 1b       	mov	r11,1
8002c122:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c126:	ca 7f       	rcall	8002c074 <pll_config_set_option>
	}

	/* Set VCO frequency range according to calculated value */
	if (vco_hz < PLL_VCO_LOW_THRESHOLD)
8002c128:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c12c:	e0 69 fe 7f 	mov	r9,65151
8002c130:	ea 19 0a 21 	orh	r9,0xa21
8002c134:	12 38       	cp.w	r8,r9
8002c136:	e0 8b 00 06 	brhi	8002c142 <pll_config_init+0x9e>
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);
8002c13a:	30 0b       	mov	r11,0
8002c13c:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c140:	c9 af       	rcall	8002c074 <pll_config_set_option>

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c142:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c146:	70 09       	ld.w	r9,r8[0x0]
8002c148:	ee f8 ff ec 	ld.w	r8,r7[-20]
8002c14c:	20 18       	sub	r8,1
8002c14e:	f0 0a 15 10 	lsl	r10,r8,0x10
		| (div << AVR32_SCIF_PLLDIV)
8002c152:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c156:	a9 68       	lsl	r8,0x8
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
8002c158:	10 4a       	or	r10,r8
		| (src << AVR32_SCIF_PLLOSC);
8002c15a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c15e:	a1 78       	lsl	r8,0x1
		pll_config_set_option(cfg, PLL_OPT_VCO_RANGE_LOW);

	Assert(mul > 2 && mul <= 16);
	Assert(div > 0 && div <= 15);

	cfg->ctrl |= ((mul - 1) << AVR32_SCIF_PLLMUL)
8002c160:	f5 e8 10 08 	or	r8,r10,r8
8002c164:	f3 e8 10 08 	or	r8,r9,r8
8002c168:	10 99       	mov	r9,r8
8002c16a:	ea 19 3f 00 	orh	r9,0x3f00
8002c16e:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c172:	91 09       	st.w	r8[0x0],r9
		| (div << AVR32_SCIF_PLLDIV)
		| (PLL_MAX_STARTUP_CYCLES << AVR32_SCIF_PLLCOUNT)
		| (src << AVR32_SCIF_PLLOSC);
}
8002c174:	2f bd       	sub	sp,-20
8002c176:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c17a:	00 00       	add	r0,r0
8002c17c:	80 02       	ld.sh	r2,r0[0x0]
8002c17e:	bf 32       	mul	r2,pc

8002c180 <pll_is_locked>:
extern void pll_config_write(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_enable(const struct pll_config *cfg, unsigned int pll_id);
extern void pll_disable(unsigned int pll_id);

static inline bool pll_is_locked(unsigned int pll_id)
{
8002c180:	eb cd 40 80 	pushm	r7,lr
8002c184:	1a 97       	mov	r7,sp
8002c186:	20 1d       	sub	sp,4
8002c188:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	return !!(AVR32_SCIF.pclksr & (1U << (AVR32_SCIF_PLL0_LOCK + pll_id)));
8002c18c:	fe 78 08 00 	mov	r8,-63488
8002c190:	70 59       	ld.w	r9,r8[0x14]
8002c192:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c196:	2f c8       	sub	r8,-4
8002c198:	30 1a       	mov	r10,1
8002c19a:	f4 08 09 48 	lsl	r8,r10,r8
8002c19e:	f3 e8 00 08 	and	r8,r9,r8
8002c1a2:	5f 18       	srne	r8
8002c1a4:	5c 58       	castu.b	r8
}
8002c1a6:	10 9c       	mov	r12,r8
8002c1a8:	2f fd       	sub	sp,-4
8002c1aa:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c1ae <pll_enable_source_sync>:

static inline void pll_enable_source_sync(enum pll_source src)
{
8002c1ae:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1b2:	1a 97       	mov	r7,sp
8002c1b4:	20 1d       	sub	sp,4
8002c1b6:	49 06       	lddpc	r6,8002c1f4 <pll_enable_source_sync+0x46>
8002c1b8:	1e 26       	rsub	r6,pc
8002c1ba:	ef 4c ff fc 	st.w	r7[-4],r12
	switch (src) {
8002c1be:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1c2:	58 18       	cp.w	r8,1
8002c1c4:	e0 88 00 05 	brls	8002c1ce <pll_enable_source_sync+0x20>
8002c1c8:	58 28       	cp.w	r8,2
8002c1ca:	c0 d0       	breq	8002c1e4 <pll_enable_source_sync+0x36>
8002c1cc:	c1 08       	rjmp	8002c1ec <pll_enable_source_sync+0x3e>
	case PLL_SRC_OSC0: /* Fall through */
	case PLL_SRC_OSC1:
		osc_enable(src);
8002c1ce:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1d2:	5c 58       	castu.b	r8
8002c1d4:	10 9c       	mov	r12,r8
8002c1d6:	ca 1e       	rcall	8002bf18 <osc_enable>
		osc_wait_ready(src);
8002c1d8:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c1dc:	5c 58       	castu.b	r8
8002c1de:	10 9c       	mov	r12,r8
8002c1e0:	c3 3f       	rcall	8002c046 <osc_wait_ready>
		break;
8002c1e2:	c0 58       	rjmp	8002c1ec <pll_enable_source_sync+0x3e>

	case PLL_SRC_RC8M:
		osc_enable(OSC_ID_RC8M);
8002c1e4:	30 2c       	mov	r12,2
8002c1e6:	c9 9e       	rcall	8002bf18 <osc_enable>
		osc_wait_ready(OSC_ID_RC8M);
8002c1e8:	30 2c       	mov	r12,2
8002c1ea:	c2 ef       	rcall	8002c046 <osc_wait_ready>

	default:
		// unhandled_case(src);
		break;
	}
}
8002c1ec:	2f fd       	sub	sp,-4
8002c1ee:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c1f2:	00 00       	add	r0,r0
8002c1f4:	80 02       	ld.sh	r2,r0[0x0]
8002c1f6:	c0 3c       	rcall	8002c1fc <pll_wait_for_lock+0x4>

8002c1f8 <pll_wait_for_lock>:
 *
 * \retval STATUS_OK The PLL is now locked.
 * \retval ERR_TIMEOUT Timed out waiting for PLL to become locked.
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
8002c1f8:	eb cd 40 c0 	pushm	r6-r7,lr
8002c1fc:	1a 97       	mov	r7,sp
8002c1fe:	20 1d       	sub	sp,4
8002c200:	48 96       	lddpc	r6,8002c224 <pll_wait_for_lock+0x2c>
8002c202:	1e 26       	rsub	r6,pc
8002c204:	ef 4c ff fc 	st.w	r7[-4],r12
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
8002c208:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c20c:	cb af       	rcall	8002c180 <pll_is_locked>
8002c20e:	18 98       	mov	r8,r12
8002c210:	ec 18 00 01 	eorl	r8,0x1
8002c214:	5c 58       	castu.b	r8
8002c216:	cf 91       	brne	8002c208 <pll_wait_for_lock+0x10>
		/* Do nothing */
	}

	return 0;
8002c218:	30 08       	mov	r8,0
}
8002c21a:	10 9c       	mov	r12,r8
8002c21c:	2f fd       	sub	sp,-4
8002c21e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c222:	00 00       	add	r0,r0
8002c224:	80 02       	ld.sh	r2,r0[0x0]
8002c226:	c0 86       	brmi	8002c236 <genclk_config_defaults+0xe>

8002c228 <genclk_config_defaults>:
	uint32_t ctrl;
};

static inline void genclk_config_defaults(struct genclk_config *cfg,
		unsigned int id)
{
8002c228:	eb cd 40 80 	pushm	r7,lr
8002c22c:	1a 97       	mov	r7,sp
8002c22e:	20 2d       	sub	sp,8
8002c230:	ef 4c ff fc 	st.w	r7[-4],r12
8002c234:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = 0;
8002c238:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c23c:	30 09       	mov	r9,0
8002c23e:	91 09       	st.w	r8[0x0],r9
}
8002c240:	2f ed       	sub	sp,-8
8002c242:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c246 <genclk_config_set_source>:
	AVR32_SCIF.gcctrl[id] = cfg->ctrl;
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
8002c246:	eb cd 40 80 	pushm	r7,lr
8002c24a:	1a 97       	mov	r7,sp
8002c24c:	20 2d       	sub	sp,8
8002c24e:	ef 4c ff fc 	st.w	r7[-4],r12
8002c252:	ef 4b ff f8 	st.w	r7[-8],r11
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c256:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c25a:	70 08       	ld.w	r8,r8[0x0]
8002c25c:	10 99       	mov	r9,r8
8002c25e:	e0 19 f0 ff 	andl	r9,0xf0ff
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
8002c262:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c266:	a9 68       	lsl	r8,0x8
}

static inline void genclk_config_set_source(struct genclk_config *cfg,
		enum genclk_source src)
{
	cfg->ctrl = (cfg->ctrl & ~AVR32_SCIF_GCCTRL_OSCSEL_MASK)
8002c268:	10 49       	or	r9,r8
8002c26a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c26e:	91 09       	st.w	r8[0x0],r9
			| (src << AVR32_SCIF_GCCTRL_OSCSEL);
}
8002c270:	2f ed       	sub	sp,-8
8002c272:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c276 <genclk_config_set_divider>:

static inline void genclk_config_set_divider(struct genclk_config *cfg,
		unsigned int divider)
{
8002c276:	eb cd 40 80 	pushm	r7,lr
8002c27a:	1a 97       	mov	r7,sp
8002c27c:	20 2d       	sub	sp,8
8002c27e:	ef 4c ff fc 	st.w	r7[-4],r12
8002c282:	ef 4b ff f8 	st.w	r7[-8],r11
	Assert(divider > 0 && divider <= GENCLK_DIV_MAX);

	/* Clear all the bits we're about to modify */
	cfg->ctrl &= ~(AVR32_SCIF_GCCTRL_DIVEN_MASK
8002c286:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c28a:	70 08       	ld.w	r8,r8[0x0]
8002c28c:	10 99       	mov	r9,r8
8002c28e:	e4 19 ff 00 	andh	r9,0xff00
8002c292:	e0 19 ff fd 	andl	r9,0xfffd
8002c296:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c29a:	91 09       	st.w	r8[0x0],r9
			| AVR32_SCIF_GCCTRL_DIV_MASK);

	if (divider > 1) {
8002c29c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2a0:	58 18       	cp.w	r8,1
8002c2a2:	e0 88 00 17 	brls	8002c2d0 <genclk_config_set_divider+0x5a>
		cfg->ctrl |= 1U << AVR32_SCIF_GCCTRL_DIVEN;
8002c2a6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2aa:	70 08       	ld.w	r8,r8[0x0]
8002c2ac:	10 99       	mov	r9,r8
8002c2ae:	a1 b9       	sbr	r9,0x1
8002c2b0:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2b4:	91 09       	st.w	r8[0x0],r9
		cfg->ctrl |= (((divider + 1) / 2) - 1) << AVR32_SCIF_GCCTRL_DIV;
8002c2b6:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2ba:	70 09       	ld.w	r9,r8[0x0]
8002c2bc:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002c2c0:	2f f8       	sub	r8,-1
8002c2c2:	a1 98       	lsr	r8,0x1
8002c2c4:	20 18       	sub	r8,1
8002c2c6:	b1 68       	lsl	r8,0x10
8002c2c8:	10 49       	or	r9,r8
8002c2ca:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002c2ce:	91 09       	st.w	r8[0x0],r9
	}
}
8002c2d0:	2f ed       	sub	sp,-8
8002c2d2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c2d6 <genclk_enable>:

static inline void genclk_enable(const struct genclk_config *cfg,
		unsigned int id)
{
8002c2d6:	eb cd 40 80 	pushm	r7,lr
8002c2da:	1a 97       	mov	r7,sp
8002c2dc:	20 2d       	sub	sp,8
8002c2de:	ef 4c ff fc 	st.w	r7[-4],r12
8002c2e2:	ef 4b ff f8 	st.w	r7[-8],r11
	AVR32_SCIF.gcctrl[id] = cfg->ctrl | (1U << AVR32_SCIF_GCCTRL_CEN);
8002c2e6:	fe 78 08 00 	mov	r8,-63488
8002c2ea:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c2ee:	ee fa ff fc 	ld.w	r10,r7[-4]
8002c2f2:	74 0a       	ld.w	r10,r10[0x0]
8002c2f4:	a1 aa       	sbr	r10,0x0
8002c2f6:	2e 79       	sub	r9,-25
8002c2f8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c2fc:	2f ed       	sub	sp,-8
8002c2fe:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c302 <genclk_disable>:

static inline void genclk_disable(unsigned int id)
{
8002c302:	eb cd 40 80 	pushm	r7,lr
8002c306:	1a 97       	mov	r7,sp
8002c308:	20 1d       	sub	sp,4
8002c30a:	ef 4c ff fc 	st.w	r7[-4],r12
	AVR32_SCIF.gcctrl[id] = 0;
8002c30e:	fe 78 08 00 	mov	r8,-63488
8002c312:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c316:	2e 79       	sub	r9,-25
8002c318:	30 0a       	mov	r10,0
8002c31a:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
}
8002c31e:	2f fd       	sub	sp,-4
8002c320:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c324 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c324:	eb cd 40 c0 	pushm	r6-r7,lr
8002c328:	1a 97       	mov	r7,sp
8002c32a:	48 56       	lddpc	r6,8002c33c <sysclk_get_main_hz+0x18>
8002c32c:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c32e:	30 0c       	mov	r12,0
8002c330:	c5 ae       	rcall	8002bfe4 <osc_get_rate>
8002c332:	18 98       	mov	r8,r12
8002c334:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c336:	10 9c       	mov	r12,r8
8002c338:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c33c:	80 02       	ld.sh	r2,r0[0x0]
8002c33e:	c1 b0       	breq	8002c374 <sysclk_priv_enable_module+0x34>

8002c340 <sysclk_priv_enable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be enabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_enable_module(unsigned int bus_id, unsigned int module_index)
{
8002c340:	eb cd 40 c0 	pushm	r6-r7,lr
8002c344:	1a 97       	mov	r7,sp
8002c346:	20 4d       	sub	sp,16
8002c348:	49 d6       	lddpc	r6,8002c3bc <sysclk_priv_enable_module+0x7c>
8002c34a:	1e 26       	rsub	r6,pc
8002c34c:	ef 4c ff f4 	st.w	r7[-12],r12
8002c350:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c354:	fe b0 fd c6 	rcall	8002bee0 <cpu_irq_save>
8002c358:	18 98       	mov	r8,r12
8002c35a:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Enable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c35e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c362:	a3 68       	lsl	r8,0x2
8002c364:	e0 28 fb e0 	sub	r8,64480
8002c368:	70 08       	ld.w	r8,r8[0x0]
8002c36a:	ef 48 ff fc 	st.w	r7[-4],r8
	mask |= 1U << module_index;
8002c36e:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c372:	30 19       	mov	r9,1
8002c374:	f2 08 09 48 	lsl	r8,r9,r8
8002c378:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c37c:	f3 e8 10 08 	or	r8,r9,r8
8002c380:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c384:	fe 78 04 00 	mov	r8,-64512
8002c388:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c38c:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c390:	32 09       	mov	r9,32
8002c392:	ea 19 aa 00 	orh	r9,0xaa00
8002c396:	f4 09 00 09 	add	r9,r10,r9
8002c39a:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c39e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c3a2:	a3 68       	lsl	r8,0x2
8002c3a4:	e0 28 fb e0 	sub	r8,64480
8002c3a8:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3ac:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c3ae:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c3b2:	fe b0 fd a6 	rcall	8002befe <cpu_irq_restore>
}
8002c3b6:	2f cd       	sub	sp,-16
8002c3b8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c3bc:	80 02       	ld.sh	r2,r0[0x0]
8002c3be:	c1 ce       	rcall	8002bff6 <osc_get_rate+0x12>

8002c3c0 <sysclk_priv_disable_module>:
 * \param bus_id Bus index, given by the \c AVR32_PM_CLK_GRP_xxx definitions.
 * \param module_index Index of the module to be disabled. This is the
 * bit number in the corresponding xxxMASK register.
 */
void sysclk_priv_disable_module(unsigned int bus_id, unsigned int module_index)
{
8002c3c0:	eb cd 40 c0 	pushm	r6-r7,lr
8002c3c4:	1a 97       	mov	r7,sp
8002c3c6:	20 4d       	sub	sp,16
8002c3c8:	49 e6       	lddpc	r6,8002c440 <sysclk_priv_disable_module+0x80>
8002c3ca:	1e 26       	rsub	r6,pc
8002c3cc:	ef 4c ff f4 	st.w	r7[-12],r12
8002c3d0:	ef 4b ff f0 	st.w	r7[-16],r11
	irqflags_t flags;
	uint32_t   mask;

	flags = cpu_irq_save();
8002c3d4:	fe b0 fd 86 	rcall	8002bee0 <cpu_irq_save>
8002c3d8:	18 98       	mov	r8,r12
8002c3da:	ef 48 ff f8 	st.w	r7[-8],r8

	/* Disable the clock */
	mask = *(&AVR32_PM.cpumask + bus_id);
8002c3de:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c3e2:	a3 68       	lsl	r8,0x2
8002c3e4:	e0 28 fb e0 	sub	r8,64480
8002c3e8:	70 08       	ld.w	r8,r8[0x0]
8002c3ea:	ef 48 ff fc 	st.w	r7[-4],r8
	mask &= ~(1U << module_index);
8002c3ee:	ee f8 ff f0 	ld.w	r8,r7[-16]
8002c3f2:	30 19       	mov	r9,1
8002c3f4:	f2 08 09 48 	lsl	r8,r9,r8
8002c3f8:	5c d8       	com	r8
8002c3fa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c3fe:	f3 e8 00 08 	and	r8,r9,r8
8002c402:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000020 + (4 * bus_id);
8002c406:	fe 78 04 00 	mov	r8,-64512
8002c40a:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c40e:	f2 0a 15 02 	lsl	r10,r9,0x2
8002c412:	32 09       	mov	r9,32
8002c414:	ea 19 aa 00 	orh	r9,0xaa00
8002c418:	f4 09 00 09 	add	r9,r10,r9
8002c41c:	f1 49 00 58 	st.w	r8[88],r9
	*(&AVR32_PM.cpumask + bus_id) = mask;
8002c420:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002c424:	a3 68       	lsl	r8,0x2
8002c426:	e0 28 fb e0 	sub	r8,64480
8002c42a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c42e:	91 09       	st.w	r8[0x0],r9

	cpu_irq_restore(flags);
8002c430:	ee fc ff f8 	ld.w	r12,r7[-8]
8002c434:	fe b0 fd 65 	rcall	8002befe <cpu_irq_restore>
}
8002c438:	2f cd       	sub	sp,-16
8002c43a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c43e:	00 00       	add	r0,r0
8002c440:	80 02       	ld.sh	r2,r0[0x0]
8002c442:	c2 4e       	rcall	8002c08a <pll_config_set_option+0x16>

8002c444 <sysclk_set_prescalers>:
 * \param pbc_shift The PBC clock will be divided by \f$2^{pbc\_shift}\f$
 */
void sysclk_set_prescalers(unsigned int cpu_shift,
		unsigned int pba_shift, unsigned int pbb_shift,
		unsigned int pbc_shift)
{
8002c444:	eb cd 40 c0 	pushm	r6-r7,lr
8002c448:	1a 97       	mov	r7,sp
8002c44a:	20 9d       	sub	sp,36
8002c44c:	4b f6       	lddpc	r6,8002c548 <sysclk_set_prescalers+0x104>
8002c44e:	1e 26       	rsub	r6,pc
8002c450:	ef 4c ff e8 	st.w	r7[-24],r12
8002c454:	ef 4b ff e4 	st.w	r7[-28],r11
8002c458:	ef 4a ff e0 	st.w	r7[-32],r10
8002c45c:	ef 49 ff dc 	st.w	r7[-36],r9
	irqflags_t flags;
	uint32_t   cpu_cksel = 0;
8002c460:	30 08       	mov	r8,0
8002c462:	ef 48 ff f0 	st.w	r7[-16],r8
	uint32_t   pba_cksel = 0;
8002c466:	30 08       	mov	r8,0
8002c468:	ef 48 ff f4 	st.w	r7[-12],r8
	uint32_t   pbb_cksel = 0;
8002c46c:	30 08       	mov	r8,0
8002c46e:	ef 48 ff f8 	st.w	r7[-8],r8
	uint32_t   pbc_cksel = 0;
8002c472:	30 08       	mov	r8,0
8002c474:	ef 48 ff fc 	st.w	r7[-4],r8

	Assert(cpu_shift <= pba_shift);
	Assert(cpu_shift <= pbb_shift);

	if (cpu_shift > 0)
8002c478:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c47c:	58 08       	cp.w	r8,0
8002c47e:	c0 80       	breq	8002c48e <sysclk_set_prescalers+0x4a>
		cpu_cksel = ((cpu_shift - 1) << AVR32_PM_CPUSEL)
8002c480:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002c484:	20 18       	sub	r8,1
8002c486:	a5 68       	lsl	r8,0x4
8002c488:	a7 b8       	sbr	r8,0x7
8002c48a:	ef 48 ff f0 	st.w	r7[-16],r8
				| (1U << AVR32_PM_CPUDIV);

	if (pba_shift > 0)
8002c48e:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c492:	58 08       	cp.w	r8,0
8002c494:	c0 80       	breq	8002c4a4 <sysclk_set_prescalers+0x60>
		pba_cksel = ((pba_shift - 1) << AVR32_PM_PBASEL)
8002c496:	ee f8 ff e4 	ld.w	r8,r7[-28]
8002c49a:	20 18       	sub	r8,1
8002c49c:	ad 68       	lsl	r8,0xc
8002c49e:	a7 b8       	sbr	r8,0x7
8002c4a0:	ef 48 ff f4 	st.w	r7[-12],r8
				| (1U << AVR32_PM_PBADIV);

	if (pbb_shift > 0)
8002c4a4:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c4a8:	58 08       	cp.w	r8,0
8002c4aa:	c0 80       	breq	8002c4ba <sysclk_set_prescalers+0x76>
		pbb_cksel = ((pbb_shift - 1) << AVR32_PM_PBBSEL)
8002c4ac:	ee f8 ff e0 	ld.w	r8,r7[-32]
8002c4b0:	20 18       	sub	r8,1
8002c4b2:	b1 68       	lsl	r8,0x10
8002c4b4:	a7 b8       	sbr	r8,0x7
8002c4b6:	ef 48 ff f8 	st.w	r7[-8],r8
				| (1U << AVR32_PM_PBBDIV);

	if (pbc_shift > 0)
8002c4ba:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c4be:	58 08       	cp.w	r8,0
8002c4c0:	c0 80       	breq	8002c4d0 <sysclk_set_prescalers+0x8c>
		pbc_cksel = ((pbc_shift - 1) << AVR32_PM_PBCSEL)
8002c4c2:	ee f8 ff dc 	ld.w	r8,r7[-36]
8002c4c6:	20 18       	sub	r8,1
8002c4c8:	b5 68       	lsl	r8,0x14
8002c4ca:	a7 b8       	sbr	r8,0x7
8002c4cc:	ef 48 ff fc 	st.w	r7[-4],r8
				| (1U << AVR32_PM_PBCDIV);

	flags = cpu_irq_save();
8002c4d0:	fe b0 fd 08 	rcall	8002bee0 <cpu_irq_save>
8002c4d4:	18 98       	mov	r8,r12
8002c4d6:	ef 48 ff ec 	st.w	r7[-20],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_CPUSEL;
8002c4da:	fe 78 04 00 	mov	r8,-64512
8002c4de:	30 49       	mov	r9,4
8002c4e0:	ea 19 aa 00 	orh	r9,0xaa00
8002c4e4:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.cpusel = cpu_cksel;
8002c4e8:	fe 78 04 00 	mov	r8,-64512
8002c4ec:	ee f9 ff f0 	ld.w	r9,r7[-16]
8002c4f0:	91 19       	st.w	r8[0x4],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBASEL;
8002c4f2:	fe 78 04 00 	mov	r8,-64512
8002c4f6:	30 c9       	mov	r9,12
8002c4f8:	ea 19 aa 00 	orh	r9,0xaa00
8002c4fc:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbasel = pba_cksel;
8002c500:	fe 78 04 00 	mov	r8,-64512
8002c504:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002c508:	91 39       	st.w	r8[0xc],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBBSEL;
8002c50a:	fe 78 04 00 	mov	r8,-64512
8002c50e:	31 09       	mov	r9,16
8002c510:	ea 19 aa 00 	orh	r9,0xaa00
8002c514:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbb_cksel;
8002c518:	fe 78 04 00 	mov	r8,-64512
8002c51c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c520:	91 49       	st.w	r8[0x10],r9
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_PBCSEL;
8002c522:	fe 78 04 00 	mov	r8,-64512
8002c526:	31 49       	mov	r9,20
8002c528:	ea 19 aa 00 	orh	r9,0xaa00
8002c52c:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.pbbsel = pbc_cksel;
8002c530:	fe 78 04 00 	mov	r8,-64512
8002c534:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c538:	91 49       	st.w	r8[0x10],r9
	cpu_irq_restore(flags);
8002c53a:	ee fc ff ec 	ld.w	r12,r7[-20]
8002c53e:	fe b0 fc e0 	rcall	8002befe <cpu_irq_restore>
}
8002c542:	2f 7d       	sub	sp,-36
8002c544:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c548:	80 02       	ld.sh	r2,r0[0x0]
8002c54a:	c2 d2       	brcc	8002c5a4 <sysclk_enable_usb+0x14>

8002c54c <sysclk_set_source>:
 *
 * \param src The new system clock source. Must be one of the constants
 * from the <em>System Clock Sources</em> section.
 */
void sysclk_set_source(uint_fast8_t src)
{
8002c54c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c550:	1a 97       	mov	r7,sp
8002c552:	20 2d       	sub	sp,8
8002c554:	48 e6       	lddpc	r6,8002c58c <sysclk_set_source+0x40>
8002c556:	1e 26       	rsub	r6,pc
8002c558:	ef 4c ff f8 	st.w	r7[-8],r12
	irqflags_t flags;

	Assert(src <= SYSCLK_SRC_RC8M);

	flags = cpu_irq_save();
8002c55c:	fe b0 fc c2 	rcall	8002bee0 <cpu_irq_save>
8002c560:	18 98       	mov	r8,r12
8002c562:	ef 48 ff fc 	st.w	r7[-4],r8
	AVR32_PM.unlock = 0xaa000000 | AVR32_PM_MCCTRL;
8002c566:	fe 78 04 00 	mov	r8,-64512
8002c56a:	fc 19 aa 00 	movh	r9,0xaa00
8002c56e:	f1 49 00 58 	st.w	r8[88],r9
	AVR32_PM.mcctrl = src;
8002c572:	fe 78 04 00 	mov	r8,-64512
8002c576:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002c57a:	91 09       	st.w	r8[0x0],r9
	cpu_irq_restore(flags);
8002c57c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002c580:	fe b0 fc bf 	rcall	8002befe <cpu_irq_restore>
}
8002c584:	2f ed       	sub	sp,-8
8002c586:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c58a:	00 00       	add	r0,r0
8002c58c:	80 02       	ld.sh	r2,r0[0x0]
8002c58e:	c3 da       	rjmp	8002c208 <pll_wait_for_lock+0x10>

8002c590 <sysclk_enable_usb>:
 * \pre The USB generick clock must be configurated to 48MHz.
 * CONFIG_USBCLK_SOURCE and CONFIG_USBCLK_DIV must be defined with proper
 * configuration. The selected clock source must also be configured.
 */
void sysclk_enable_usb(void)
{
8002c590:	eb cd 40 c0 	pushm	r6-r7,lr
8002c594:	1a 97       	mov	r7,sp
8002c596:	20 3d       	sub	sp,12
8002c598:	49 66       	lddpc	r6,8002c5f0 <sysclk_enable_usb+0x60>
8002c59a:	1e 26       	rsub	r6,pc
	struct genclk_config gcfg;

	genclk_config_defaults(&gcfg, AVR32_USBC_GCLK_NUM);
8002c59c:	ee c8 00 04 	sub	r8,r7,4
8002c5a0:	30 0b       	mov	r11,0
8002c5a2:	10 9c       	mov	r12,r8
8002c5a4:	c4 2e       	rcall	8002c228 <genclk_config_defaults>
#endif

#ifdef CONFIG_PLL1_SOURCE
	case USBCLK_SRC_PLL1: {
		struct pll_config pllcfg;
		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002c5a6:	30 0c       	mov	r12,0
8002c5a8:	c0 3e       	rcall	8002c1ae <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 1);
8002c5aa:	ee c8 00 0c 	sub	r8,r7,12
8002c5ae:	30 39       	mov	r9,3
8002c5b0:	30 1a       	mov	r10,1
8002c5b2:	30 0b       	mov	r11,0
8002c5b4:	10 9c       	mov	r12,r8
8002c5b6:	fe b0 fd 77 	rcall	8002c0a4 <pll_config_init>
		pll_enable(&pllcfg, 1);
8002c5ba:	ee c8 00 0c 	sub	r8,r7,12
8002c5be:	30 1b       	mov	r11,1
8002c5c0:	10 9c       	mov	r12,r8
8002c5c2:	f0 16 00 b2 	mcall	r6[712]
		pll_wait_for_lock(1);
8002c5c6:	30 1c       	mov	r12,1
8002c5c8:	c1 8e       	rcall	8002c1f8 <pll_wait_for_lock>
		genclk_config_set_source(&gcfg, GENCLK_SRC_PLL1);
8002c5ca:	ee c8 00 04 	sub	r8,r7,4
8002c5ce:	30 6b       	mov	r11,6
8002c5d0:	10 9c       	mov	r12,r8
8002c5d2:	c3 ae       	rcall	8002c246 <genclk_config_set_source>
	default:
		/* unhandled_case(CONFIG_USBCLK_SOURCE); */
		break;
	}

	genclk_config_set_divider(&gcfg, CONFIG_USBCLK_DIV);
8002c5d4:	ee c8 00 04 	sub	r8,r7,4
8002c5d8:	30 1b       	mov	r11,1
8002c5da:	10 9c       	mov	r12,r8
8002c5dc:	c4 de       	rcall	8002c276 <genclk_config_set_divider>
	genclk_enable(&gcfg, AVR32_USBC_GCLK_NUM);
8002c5de:	ee c8 00 04 	sub	r8,r7,4
8002c5e2:	30 0b       	mov	r11,0
8002c5e4:	10 9c       	mov	r12,r8
8002c5e6:	c7 8e       	rcall	8002c2d6 <genclk_enable>
}
8002c5e8:	2f dd       	sub	sp,-12
8002c5ea:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c5ee:	00 00       	add	r0,r0
8002c5f0:	80 02       	ld.sh	r2,r0[0x0]
8002c5f2:	c4 1e       	rcall	8002c274 <genclk_config_set_source+0x2e>

8002c5f4 <sysclk_disable_usb>:

/**
 * \brief Disable the USB generic clock
 */
void sysclk_disable_usb(void)
{
8002c5f4:	eb cd 40 c0 	pushm	r6-r7,lr
8002c5f8:	1a 97       	mov	r7,sp
8002c5fa:	48 46       	lddpc	r6,8002c608 <sysclk_disable_usb+0x14>
8002c5fc:	1e 26       	rsub	r6,pc
   genclk_disable(AVR32_USBC_GCLK_NUM);
8002c5fe:	30 0c       	mov	r12,0
8002c600:	c8 1e       	rcall	8002c302 <genclk_disable>
}
8002c602:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c606:	00 00       	add	r0,r0
8002c608:	80 02       	ld.sh	r2,r0[0x0]
8002c60a:	c4 80       	breq	8002c69a <osc_get_rate+0x16>

8002c60c <sysclk_init>:
#endif // CONFIG_USBCLK_SOURCE


void sysclk_init(void)
{
8002c60c:	eb cd 40 c0 	pushm	r6-r7,lr
8002c610:	1a 97       	mov	r7,sp
8002c612:	20 2d       	sub	sp,8
8002c614:	49 b6       	lddpc	r6,8002c680 <sysclk_init+0x74>
8002c616:	1e 26       	rsub	r6,pc

#ifdef CONFIG_PLL0_SOURCE

		struct pll_config pllcfg;

		pll_enable_source_sync(CONFIG_PLL0_SOURCE);
8002c618:	30 0c       	mov	r12,0
8002c61a:	fe b0 fd ca 	rcall	8002c1ae <pll_enable_source_sync>
		pll_config_defaults(&pllcfg, 0);
8002c61e:	ee c8 00 04 	sub	r8,r7,4
8002c622:	30 49       	mov	r9,4
8002c624:	30 1a       	mov	r10,1
8002c626:	30 0b       	mov	r11,0
8002c628:	10 9c       	mov	r12,r8
8002c62a:	fe b0 fd 3d 	rcall	8002c0a4 <pll_config_init>
		pll_enable(&pllcfg, 0);
8002c62e:	ee c8 00 04 	sub	r8,r7,4
8002c632:	30 0b       	mov	r11,0
8002c634:	10 9c       	mov	r12,r8
8002c636:	f0 16 00 b2 	mcall	r6[712]
		pll_wait_for_lock(0);
8002c63a:	30 0c       	mov	r12,0
8002c63c:	fe b0 fd de 	rcall	8002c1f8 <pll_wait_for_lock>

#ifdef CONFIG_PLL1_SOURCE
	
		struct pll_config pllcfg1;

		pll_enable_source_sync(CONFIG_PLL1_SOURCE);
8002c640:	30 0c       	mov	r12,0
8002c642:	fe b0 fd b6 	rcall	8002c1ae <pll_enable_source_sync>
		pll_config_defaults(&pllcfg1, 1);
8002c646:	ee c8 00 08 	sub	r8,r7,8
8002c64a:	30 39       	mov	r9,3
8002c64c:	30 1a       	mov	r10,1
8002c64e:	30 0b       	mov	r11,0
8002c650:	10 9c       	mov	r12,r8
8002c652:	fe b0 fd 29 	rcall	8002c0a4 <pll_config_init>
		pll_enable(&pllcfg1, 1);
8002c656:	ee c8 00 08 	sub	r8,r7,8
8002c65a:	30 1b       	mov	r11,1
8002c65c:	10 9c       	mov	r12,r8
8002c65e:	f0 16 00 b2 	mcall	r6[712]
		pll_wait_for_lock(1);
8002c662:	30 1c       	mov	r12,1
8002c664:	fe b0 fd ca 	rcall	8002c1f8 <pll_wait_for_lock>


	case SYSCLK_SRC_PLL0: {

		// Set a flash wait state depending on the new cpu frequency.
		flash_set_bus_freq(sysclk_get_main_hz());
8002c668:	c5 ee       	rcall	8002c324 <sysclk_get_main_hz>
8002c66a:	18 98       	mov	r8,r12
8002c66c:	10 9c       	mov	r12,r8
8002c66e:	f0 16 01 67 	mcall	r6[1436]
		sysclk_set_source(SYSCLK_SRC_PLL0);
8002c672:	30 3c       	mov	r12,3
8002c674:	f0 16 01 cd 	mcall	r6[1844]

#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
	/* Signal that the internal frequencies are setup */
	sysclk_initialized = true;
#endif
}
8002c678:	2f ed       	sub	sp,-8
8002c67a:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c67e:	00 00       	add	r0,r0
8002c680:	80 02       	ld.sh	r2,r0[0x0]
8002c682:	c4 9a       	rjmp	8002c314 <genclk_disable+0x12>

8002c684 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002c684:	eb cd 40 80 	pushm	r7,lr
8002c688:	1a 97       	mov	r7,sp
8002c68a:	20 1d       	sub	sp,4
8002c68c:	18 98       	mov	r8,r12
8002c68e:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002c692:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002c696:	58 38       	cp.w	r8,3
8002c698:	c1 20       	breq	8002c6bc <osc_get_rate+0x38>
8002c69a:	e0 89 00 07 	brgt	8002c6a8 <osc_get_rate+0x24>
8002c69e:	58 08       	cp.w	r8,0
8002c6a0:	c0 90       	breq	8002c6b2 <osc_get_rate+0x2e>
8002c6a2:	58 28       	cp.w	r8,2
8002c6a4:	c0 f0       	breq	8002c6c2 <osc_get_rate+0x3e>
8002c6a6:	c1 b8       	rjmp	8002c6dc <osc_get_rate+0x58>
8002c6a8:	58 48       	cp.w	r8,4
8002c6aa:	c1 10       	breq	8002c6cc <osc_get_rate+0x48>
8002c6ac:	58 58       	cp.w	r8,5
8002c6ae:	c1 40       	breq	8002c6d6 <osc_get_rate+0x52>
8002c6b0:	c1 68       	rjmp	8002c6dc <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002c6b2:	e0 68 24 00 	mov	r8,9216
8002c6b6:	ea 18 00 f4 	orh	r8,0xf4
8002c6ba:	c1 28       	rjmp	8002c6de <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002c6bc:	e0 68 80 00 	mov	r8,32768
8002c6c0:	c0 f8       	rjmp	8002c6de <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002c6c2:	e0 68 12 00 	mov	r8,4608
8002c6c6:	ea 18 00 7a 	orh	r8,0x7a
8002c6ca:	c0 a8       	rjmp	8002c6de <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002c6cc:	e0 68 0e 00 	mov	r8,3584
8002c6d0:	ea 18 07 27 	orh	r8,0x727
8002c6d4:	c0 58       	rjmp	8002c6de <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002c6d6:	e0 78 c1 38 	mov	r8,115000
8002c6da:	c0 28       	rjmp	8002c6de <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002c6dc:	30 08       	mov	r8,0
	}
}
8002c6de:	10 9c       	mov	r12,r8
8002c6e0:	2f fd       	sub	sp,-4
8002c6e2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c6e6 <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002c6e6:	eb cd 40 c0 	pushm	r6-r7,lr
8002c6ea:	1a 97       	mov	r7,sp
8002c6ec:	48 56       	lddpc	r6,8002c700 <sysclk_get_main_hz+0x1a>
8002c6ee:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002c6f0:	30 0c       	mov	r12,0
8002c6f2:	cc 9f       	rcall	8002c684 <osc_get_rate>
8002c6f4:	18 98       	mov	r8,r12
8002c6f6:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002c6f8:	10 9c       	mov	r12,r8
8002c6fa:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c6fe:	00 00       	add	r0,r0
8002c700:	80 02       	ld.sh	r2,r0[0x0]
8002c702:	c5 72       	brcc	8002c7b0 <spi_set_chipselect_delay_bs+0x14>

8002c704 <sysclk_get_pba_hz>:
 * \brief Return the current rate in Hz of the Peripheral Bus A clock
 *
 * \return Frequency of the Peripheral Bus A clock, in Hz.
 */
static inline uint32_t sysclk_get_pba_hz(void)
{
8002c704:	eb cd 40 c0 	pushm	r6-r7,lr
8002c708:	1a 97       	mov	r7,sp
8002c70a:	48 46       	lddpc	r6,8002c718 <sysclk_get_pba_hz+0x14>
8002c70c:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_PBA_DIV;
8002c70e:	ce cf       	rcall	8002c6e6 <sysclk_get_main_hz>
8002c710:	18 98       	mov	r8,r12
}
8002c712:	10 9c       	mov	r12,r8
8002c714:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002c718:	80 02       	ld.sh	r2,r0[0x0]
8002c71a:	c5 90       	breq	8002c7cc <spi_set_chipselect_delay_bs+0x30>

8002c71c <spi_set_chipselect_delay_bct>:
 * \param delay       Delay.
 */

static inline void spi_set_chipselect_delay_bct(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002c71c:	eb cd 40 80 	pushm	r7,lr
8002c720:	1a 97       	mov	r7,sp
8002c722:	20 3d       	sub	sp,12
8002c724:	ef 4c ff fc 	st.w	r7[-4],r12
8002c728:	16 99       	mov	r9,r11
8002c72a:	14 98       	mov	r8,r10
8002c72c:	ef 69 ff f8 	st.b	r7[-8],r9
8002c730:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002c734:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c738:	58 18       	cp.w	r8,1
8002c73a:	c1 40       	breq	8002c762 <spi_set_chipselect_delay_bct+0x46>
8002c73c:	e0 89 00 05 	brgt	8002c746 <spi_set_chipselect_delay_bct+0x2a>
8002c740:	58 08       	cp.w	r8,0
8002c742:	c0 70       	breq	8002c750 <spi_set_chipselect_delay_bct+0x34>
8002c744:	c2 98       	rjmp	8002c796 <spi_set_chipselect_delay_bct+0x7a>
8002c746:	58 28       	cp.w	r8,2
8002c748:	c1 60       	breq	8002c774 <spi_set_chipselect_delay_bct+0x58>
8002c74a:	58 38       	cp.w	r8,3
8002c74c:	c1 d0       	breq	8002c786 <spi_set_chipselect_delay_bct+0x6a>
8002c74e:	c2 48       	rjmp	8002c796 <spi_set_chipselect_delay_bct+0x7a>
    case 0:
      spi->CSR0.dlybct = delay;
8002c750:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c754:	72 c8       	ld.w	r8,r9[0x30]
8002c756:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c75a:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c75e:	93 c8       	st.w	r9[0x30],r8
      break;
8002c760:	c1 b8       	rjmp	8002c796 <spi_set_chipselect_delay_bct+0x7a>
    case 1:
      spi->CSR1.dlybct  = delay;
8002c762:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c766:	72 d8       	ld.w	r8,r9[0x34]
8002c768:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c76c:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c770:	93 d8       	st.w	r9[0x34],r8
      break;
8002c772:	c1 28       	rjmp	8002c796 <spi_set_chipselect_delay_bct+0x7a>
    case 2:
      spi->CSR2.dlybct  = delay;
8002c774:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c778:	72 e8       	ld.w	r8,r9[0x38]
8002c77a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c77e:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c782:	93 e8       	st.w	r9[0x38],r8
      break;
8002c784:	c0 98       	rjmp	8002c796 <spi_set_chipselect_delay_bct+0x7a>
    case 3:
      spi->CSR3.dlybct  = delay;
8002c786:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c78a:	72 f8       	ld.w	r8,r9[0x3c]
8002c78c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c790:	f1 da d3 08 	bfins	r8,r10,0x18,0x8
8002c794:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002c796:	2f dd       	sub	sp,-12
8002c798:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c79c <spi_set_chipselect_delay_bs>:
 * \param chip_select Chip Select.
 * \param delay       Delay.
 */
static inline void spi_set_chipselect_delay_bs(volatile avr32_spi_t *spi,
                        uint8_t chip_select, uint8_t delay)
{
8002c79c:	eb cd 40 80 	pushm	r7,lr
8002c7a0:	1a 97       	mov	r7,sp
8002c7a2:	20 3d       	sub	sp,12
8002c7a4:	ef 4c ff fc 	st.w	r7[-4],r12
8002c7a8:	16 99       	mov	r9,r11
8002c7aa:	14 98       	mov	r8,r10
8002c7ac:	ef 69 ff f8 	st.b	r7[-8],r9
8002c7b0:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert(chip_select>3);
  switch(chip_select) {
8002c7b4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c7b8:	58 18       	cp.w	r8,1
8002c7ba:	c1 40       	breq	8002c7e2 <spi_set_chipselect_delay_bs+0x46>
8002c7bc:	e0 89 00 05 	brgt	8002c7c6 <spi_set_chipselect_delay_bs+0x2a>
8002c7c0:	58 08       	cp.w	r8,0
8002c7c2:	c0 70       	breq	8002c7d0 <spi_set_chipselect_delay_bs+0x34>
8002c7c4:	c2 98       	rjmp	8002c816 <spi_set_chipselect_delay_bs+0x7a>
8002c7c6:	58 28       	cp.w	r8,2
8002c7c8:	c1 60       	breq	8002c7f4 <spi_set_chipselect_delay_bs+0x58>
8002c7ca:	58 38       	cp.w	r8,3
8002c7cc:	c1 d0       	breq	8002c806 <spi_set_chipselect_delay_bs+0x6a>
8002c7ce:	c2 48       	rjmp	8002c816 <spi_set_chipselect_delay_bs+0x7a>
    case 0:
      spi->CSR0.dlybs = delay;
8002c7d0:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7d4:	72 c8       	ld.w	r8,r9[0x30]
8002c7d6:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c7da:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c7de:	93 c8       	st.w	r9[0x30],r8
      break;
8002c7e0:	c1 b8       	rjmp	8002c816 <spi_set_chipselect_delay_bs+0x7a>
    case 1:
      spi->CSR1.dlybs  = delay;
8002c7e2:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7e6:	72 d8       	ld.w	r8,r9[0x34]
8002c7e8:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c7ec:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c7f0:	93 d8       	st.w	r9[0x34],r8
      break;
8002c7f2:	c1 28       	rjmp	8002c816 <spi_set_chipselect_delay_bs+0x7a>
    case 2:
      spi->CSR2.dlybs  = delay;
8002c7f4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c7f8:	72 e8       	ld.w	r8,r9[0x38]
8002c7fa:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c7fe:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c802:	93 e8       	st.w	r9[0x38],r8
      break;
8002c804:	c0 98       	rjmp	8002c816 <spi_set_chipselect_delay_bs+0x7a>
    case 3:
      spi->CSR3.dlybs  = delay;
8002c806:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c80a:	72 f8       	ld.w	r8,r9[0x3c]
8002c80c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c810:	f1 da d2 08 	bfins	r8,r10,0x10,0x8
8002c814:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002c816:	2f dd       	sub	sp,-12
8002c818:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c81c <spi_set_bits_per_transfer>:
 * \param chip_select Chip Select.
 * \param len         Bits per Transfer [8...16].
 */
static inline void spi_set_bits_per_transfer(volatile avr32_spi_t *spi, uint8_t chip_select,
                        uint8_t len)
{
8002c81c:	eb cd 40 80 	pushm	r7,lr
8002c820:	1a 97       	mov	r7,sp
8002c822:	20 3d       	sub	sp,12
8002c824:	ef 4c ff fc 	st.w	r7[-4],r12
8002c828:	16 99       	mov	r9,r11
8002c82a:	14 98       	mov	r8,r10
8002c82c:	ef 69 ff f8 	st.b	r7[-8],r9
8002c830:	ef 68 ff f4 	st.b	r7[-12],r8
  Assert((len>8)&&(len<16));
  switch(chip_select) {
8002c834:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c838:	58 18       	cp.w	r8,1
8002c83a:	c1 a0       	breq	8002c86e <spi_set_bits_per_transfer+0x52>
8002c83c:	e0 89 00 05 	brgt	8002c846 <spi_set_bits_per_transfer+0x2a>
8002c840:	58 08       	cp.w	r8,0
8002c842:	c0 70       	breq	8002c850 <spi_set_bits_per_transfer+0x34>
8002c844:	c4 18       	rjmp	8002c8c6 <spi_set_bits_per_transfer+0xaa>
8002c846:	58 28       	cp.w	r8,2
8002c848:	c2 20       	breq	8002c88c <spi_set_bits_per_transfer+0x70>
8002c84a:	58 38       	cp.w	r8,3
8002c84c:	c2 f0       	breq	8002c8aa <spi_set_bits_per_transfer+0x8e>
8002c84e:	c3 c8       	rjmp	8002c8c6 <spi_set_bits_per_transfer+0xaa>
    case 0:
      spi->CSR0.bits = len - 8;
8002c850:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c854:	20 88       	sub	r8,8
8002c856:	5c 58       	castu.b	r8
8002c858:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c85c:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c860:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c864:	72 c8       	ld.w	r8,r9[0x30]
8002c866:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c86a:	93 c8       	st.w	r9[0x30],r8
      break;
8002c86c:	c2 d8       	rjmp	8002c8c6 <spi_set_bits_per_transfer+0xaa>
    case 1:
      spi->CSR1.bits  = len - 8;
8002c86e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c872:	20 88       	sub	r8,8
8002c874:	5c 58       	castu.b	r8
8002c876:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c87a:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c87e:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c882:	72 d8       	ld.w	r8,r9[0x34]
8002c884:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c888:	93 d8       	st.w	r9[0x34],r8
      break;
8002c88a:	c1 e8       	rjmp	8002c8c6 <spi_set_bits_per_transfer+0xaa>
    case 2:
      spi->CSR2.bits  = len - 8;
8002c88c:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c890:	20 88       	sub	r8,8
8002c892:	5c 58       	castu.b	r8
8002c894:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c898:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c89c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c8a0:	72 e8       	ld.w	r8,r9[0x38]
8002c8a2:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c8a6:	93 e8       	st.w	r9[0x38],r8
      break;
8002c8a8:	c0 f8       	rjmp	8002c8c6 <spi_set_bits_per_transfer+0xaa>
    case 3:
      spi->CSR3.bits  = len - 8;
8002c8aa:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c8ae:	20 88       	sub	r8,8
8002c8b0:	5c 58       	castu.b	r8
8002c8b2:	f1 d8 c0 04 	bfextu	r8,r8,0x0,0x4
8002c8b6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002c8ba:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c8be:	72 f8       	ld.w	r8,r9[0x3c]
8002c8c0:	f1 da d0 84 	bfins	r8,r10,0x4,0x4
8002c8c4:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002c8c6:	2f dd       	sub	sp,-12
8002c8c8:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c8cc <spi_set_baudrate_register>:
 * \param chip_select Chip Select.
 * \param scbr        Baudrate Register.
 */
static inline void spi_set_baudrate_register(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t scbr)
{
8002c8cc:	eb cd 40 80 	pushm	r7,lr
8002c8d0:	1a 97       	mov	r7,sp
8002c8d2:	20 3d       	sub	sp,12
8002c8d4:	ef 4c ff fc 	st.w	r7[-4],r12
8002c8d8:	16 99       	mov	r9,r11
8002c8da:	14 98       	mov	r8,r10
8002c8dc:	ef 69 ff f8 	st.b	r7[-8],r9
8002c8e0:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002c8e4:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c8e8:	58 18       	cp.w	r8,1
8002c8ea:	c1 40       	breq	8002c912 <spi_set_baudrate_register+0x46>
8002c8ec:	e0 89 00 05 	brgt	8002c8f6 <spi_set_baudrate_register+0x2a>
8002c8f0:	58 08       	cp.w	r8,0
8002c8f2:	c0 70       	breq	8002c900 <spi_set_baudrate_register+0x34>
8002c8f4:	c2 98       	rjmp	8002c946 <spi_set_baudrate_register+0x7a>
8002c8f6:	58 28       	cp.w	r8,2
8002c8f8:	c1 60       	breq	8002c924 <spi_set_baudrate_register+0x58>
8002c8fa:	58 38       	cp.w	r8,3
8002c8fc:	c1 d0       	breq	8002c936 <spi_set_baudrate_register+0x6a>
8002c8fe:	c2 48       	rjmp	8002c946 <spi_set_baudrate_register+0x7a>
    case 0:
      spi->CSR0.scbr = scbr;
8002c900:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c904:	72 c8       	ld.w	r8,r9[0x30]
8002c906:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c90a:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c90e:	93 c8       	st.w	r9[0x30],r8
      break;
8002c910:	c1 b8       	rjmp	8002c946 <spi_set_baudrate_register+0x7a>
    case 1:
      spi->CSR1.scbr  = scbr;
8002c912:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c916:	72 d8       	ld.w	r8,r9[0x34]
8002c918:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c91c:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c920:	93 d8       	st.w	r9[0x34],r8
      break;
8002c922:	c1 28       	rjmp	8002c946 <spi_set_baudrate_register+0x7a>
    case 2:
      spi->CSR2.scbr  = scbr;
8002c924:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c928:	72 e8       	ld.w	r8,r9[0x38]
8002c92a:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c92e:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c932:	93 e8       	st.w	r9[0x38],r8
      break;
8002c934:	c0 98       	rjmp	8002c946 <spi_set_baudrate_register+0x7a>
    case 3:
      spi->CSR3.scbr  = scbr;
8002c936:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c93a:	72 f8       	ld.w	r8,r9[0x3c]
8002c93c:	ef 3a ff f4 	ld.ub	r10,r7[-12]
8002c940:	f1 da d1 08 	bfins	r8,r10,0x8,0x8
8002c944:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002c946:	2f dd       	sub	sp,-12
8002c948:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c94c <spi_enable_active_mode>:
 *
 * \param spi         Base address of the SPI instance.
 * \param chip_select Chip Select.
 */
static inline void spi_enable_active_mode(volatile avr32_spi_t *spi,uint8_t chip_select)
{
8002c94c:	eb cd 40 80 	pushm	r7,lr
8002c950:	1a 97       	mov	r7,sp
8002c952:	20 2d       	sub	sp,8
8002c954:	ef 4c ff fc 	st.w	r7[-4],r12
8002c958:	16 98       	mov	r8,r11
8002c95a:	ef 68 ff f8 	st.b	r7[-8],r8
  switch(chip_select) {
8002c95e:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c962:	58 18       	cp.w	r8,1
8002c964:	c1 30       	breq	8002c98a <spi_enable_active_mode+0x3e>
8002c966:	e0 89 00 05 	brgt	8002c970 <spi_enable_active_mode+0x24>
8002c96a:	58 08       	cp.w	r8,0
8002c96c:	c0 70       	breq	8002c97a <spi_enable_active_mode+0x2e>
8002c96e:	c2 58       	rjmp	8002c9b8 <spi_enable_active_mode+0x6c>
8002c970:	58 28       	cp.w	r8,2
8002c972:	c1 40       	breq	8002c99a <spi_enable_active_mode+0x4e>
8002c974:	58 38       	cp.w	r8,3
8002c976:	c1 a0       	breq	8002c9aa <spi_enable_active_mode+0x5e>
8002c978:	c2 08       	rjmp	8002c9b8 <spi_enable_active_mode+0x6c>
    case 0:
      spi->CSR0.csaat = 1;
8002c97a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c97e:	72 c8       	ld.w	r8,r9[0x30]
8002c980:	30 1a       	mov	r10,1
8002c982:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c986:	93 c8       	st.w	r9[0x30],r8
      break;
8002c988:	c1 88       	rjmp	8002c9b8 <spi_enable_active_mode+0x6c>
    case 1:
      spi->CSR1.csaat  = 1;
8002c98a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c98e:	72 d8       	ld.w	r8,r9[0x34]
8002c990:	30 1a       	mov	r10,1
8002c992:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c996:	93 d8       	st.w	r9[0x34],r8
      break;
8002c998:	c1 08       	rjmp	8002c9b8 <spi_enable_active_mode+0x6c>
    case 2:
      spi->CSR2.csaat  = 1;
8002c99a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c99e:	72 e8       	ld.w	r8,r9[0x38]
8002c9a0:	30 1a       	mov	r10,1
8002c9a2:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9a6:	93 e8       	st.w	r9[0x38],r8
      break;
8002c9a8:	c0 88       	rjmp	8002c9b8 <spi_enable_active_mode+0x6c>
    case 3:
      spi->CSR3.csaat  = 1;
8002c9aa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002c9ae:	72 f8       	ld.w	r8,r9[0x3c]
8002c9b0:	30 1a       	mov	r10,1
8002c9b2:	f1 da d0 61 	bfins	r8,r10,0x3,0x1
8002c9b6:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002c9b8:	2f ed       	sub	sp,-8
8002c9ba:	e3 cd 80 80 	ldm	sp++,r7,pc

8002c9be <spi_set_mode>:
 * \param chip_select Chip Select.
 * \param flags       SPI Mode.
 */
static inline void spi_set_mode(volatile avr32_spi_t *spi,uint8_t chip_select,
                        uint8_t flags)
{
8002c9be:	eb cd 40 80 	pushm	r7,lr
8002c9c2:	1a 97       	mov	r7,sp
8002c9c4:	20 3d       	sub	sp,12
8002c9c6:	ef 4c ff fc 	st.w	r7[-4],r12
8002c9ca:	16 99       	mov	r9,r11
8002c9cc:	14 98       	mov	r8,r10
8002c9ce:	ef 69 ff f8 	st.b	r7[-8],r9
8002c9d2:	ef 68 ff f4 	st.b	r7[-12],r8
  switch(chip_select) {
8002c9d6:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002c9da:	58 18       	cp.w	r8,1
8002c9dc:	c2 70       	breq	8002ca2a <spi_set_mode+0x6c>
8002c9de:	e0 89 00 05 	brgt	8002c9e8 <spi_set_mode+0x2a>
8002c9e2:	58 08       	cp.w	r8,0
8002c9e4:	c0 70       	breq	8002c9f2 <spi_set_mode+0x34>
8002c9e6:	c7 58       	rjmp	8002cad0 <spi_set_mode+0x112>
8002c9e8:	58 28       	cp.w	r8,2
8002c9ea:	c3 c0       	breq	8002ca62 <spi_set_mode+0xa4>
8002c9ec:	58 38       	cp.w	r8,3
8002c9ee:	c5 60       	breq	8002ca9a <spi_set_mode+0xdc>
8002c9f0:	c7 08       	rjmp	8002cad0 <spi_set_mode+0x112>
    case 0:
      spi->CSR0.cpol = flags >> 1;
8002c9f2:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002c9f6:	a1 98       	lsr	r8,0x1
8002c9f8:	5c 58       	castu.b	r8
8002c9fa:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002c9fe:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca02:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca06:	72 c8       	ld.w	r8,r9[0x30]
8002ca08:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca0c:	93 c8       	st.w	r9[0x30],r8
      spi->CSR0.ncpha = (flags & 0x1) ^ 0x1;
8002ca0e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca12:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca16:	5f 08       	sreq	r8
8002ca18:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca1c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca20:	72 c8       	ld.w	r8,r9[0x30]
8002ca22:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ca26:	93 c8       	st.w	r9[0x30],r8
      break;
8002ca28:	c5 48       	rjmp	8002cad0 <spi_set_mode+0x112>
    case 1:
      spi->CSR1.cpol  = flags >> 1;
8002ca2a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca2e:	a1 98       	lsr	r8,0x1
8002ca30:	5c 58       	castu.b	r8
8002ca32:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca36:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca3a:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca3e:	72 d8       	ld.w	r8,r9[0x34]
8002ca40:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca44:	93 d8       	st.w	r9[0x34],r8
      spi->CSR1.ncpha = (flags & 0x1) ^ 0x1;
8002ca46:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca4a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca4e:	5f 08       	sreq	r8
8002ca50:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca54:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca58:	72 d8       	ld.w	r8,r9[0x34]
8002ca5a:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ca5e:	93 d8       	st.w	r9[0x34],r8
      break;
8002ca60:	c3 88       	rjmp	8002cad0 <spi_set_mode+0x112>
    case 2:
      spi->CSR2.cpol  = flags >> 1;
8002ca62:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca66:	a1 98       	lsr	r8,0x1
8002ca68:	5c 58       	castu.b	r8
8002ca6a:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca6e:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca72:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca76:	72 e8       	ld.w	r8,r9[0x38]
8002ca78:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002ca7c:	93 e8       	st.w	r9[0x38],r8
      spi->CSR2.ncpha = (flags & 0x1) ^ 0x1;
8002ca7e:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca82:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002ca86:	5f 08       	sreq	r8
8002ca88:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002ca8c:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002ca90:	72 e8       	ld.w	r8,r9[0x38]
8002ca92:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002ca96:	93 e8       	st.w	r9[0x38],r8
      break;
8002ca98:	c1 c8       	rjmp	8002cad0 <spi_set_mode+0x112>
    case 3:
      spi->CSR3.cpol  = flags >> 1;
8002ca9a:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002ca9e:	a1 98       	lsr	r8,0x1
8002caa0:	5c 58       	castu.b	r8
8002caa2:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002caa6:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002caaa:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002caae:	72 f8       	ld.w	r8,r9[0x3c]
8002cab0:	f1 da d0 01 	bfins	r8,r10,0x0,0x1
8002cab4:	93 f8       	st.w	r9[0x3c],r8
      spi->CSR3.ncpha = (flags & 0x1) ^ 0x1;
8002cab6:	ef 38 ff f4 	ld.ub	r8,r7[-12]
8002caba:	f1 d8 c0 01 	bfextu	r8,r8,0x0,0x1
8002cabe:	5f 08       	sreq	r8
8002cac0:	f5 d8 c0 08 	bfextu	r10,r8,0x0,0x8
8002cac4:	ee f9 ff fc 	ld.w	r9,r7[-4]
8002cac8:	72 f8       	ld.w	r8,r9[0x3c]
8002caca:	f1 da d0 21 	bfins	r8,r10,0x1,0x1
8002cace:	93 f8       	st.w	r9[0x3c],r8
      break;
  }
}
8002cad0:	2f dd       	sub	sp,-12
8002cad2:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cad6 <spi_put>:
 * \param spi Base address of the SPI instance.
 * \param data The data byte to be loaded 
 *
 */
static inline void spi_put(volatile avr32_spi_t *spi, uint16_t data)
{
8002cad6:	eb cd 40 80 	pushm	r7,lr
8002cada:	1a 97       	mov	r7,sp
8002cadc:	20 2d       	sub	sp,8
8002cade:	ef 4c ff fc 	st.w	r7[-4],r12
8002cae2:	16 98       	mov	r8,r11
8002cae4:	ef 58 ff f8 	st.h	r7[-8],r8
	spi->tdr = data << AVR32_SPI_TDR_TD_OFFSET;
8002cae8:	ef 19 ff f8 	ld.uh	r9,r7[-8]
8002caec:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002caf0:	91 39       	st.w	r8[0xc],r9
}
8002caf2:	2f ed       	sub	sp,-8
8002caf4:	e3 cd 80 80 	ldm	sp++,r7,pc

8002caf8 <spi_get>:
 * \param spi Base address of the SPI instance.
 * \return The data byte 
 *
 */
static inline uint16_t spi_get(volatile avr32_spi_t *spi)
{
8002caf8:	eb cd 40 80 	pushm	r7,lr
8002cafc:	1a 97       	mov	r7,sp
8002cafe:	20 1d       	sub	sp,4
8002cb00:	ef 4c ff fc 	st.w	r7[-4],r12
	return (spi->rdr >> AVR32_SPI_RDR_RD_OFFSET);
8002cb04:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb08:	70 28       	ld.w	r8,r8[0x8]
8002cb0a:	5c 88       	casts.h	r8
}
8002cb0c:	10 9c       	mov	r12,r8
8002cb0e:	2f fd       	sub	sp,-4
8002cb10:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb14 <spi_is_tx_ready>:
 * \return Status.
 *   \retval 1  All transmissions complete.
 *   \retval 0  Transmissions not complete.
 */
static inline bool spi_is_tx_ready(volatile avr32_spi_t *spi)
{
8002cb14:	eb cd 40 80 	pushm	r7,lr
8002cb18:	1a 97       	mov	r7,sp
8002cb1a:	20 1d       	sub	sp,4
8002cb1c:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & AVR32_SPI_SR_TDRE_MASK) != 0;
8002cb20:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb24:	70 48       	ld.w	r8,r8[0x10]
8002cb26:	e2 18 00 02 	andl	r8,0x2,COH
8002cb2a:	5f 18       	srne	r8
8002cb2c:	5c 58       	castu.b	r8
}
8002cb2e:	10 9c       	mov	r12,r8
8002cb30:	2f fd       	sub	sp,-4
8002cb32:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb36 <spi_is_rx_ready>:
 * \param spi Base address of the SPI instance.
 *
 * \return \c 1 if the SPI Receiver is ready, otherwise \c 0.
 */
static inline bool spi_is_rx_ready(volatile avr32_spi_t *spi)
{
8002cb36:	eb cd 40 80 	pushm	r7,lr
8002cb3a:	1a 97       	mov	r7,sp
8002cb3c:	20 1d       	sub	sp,4
8002cb3e:	ef 4c ff fc 	st.w	r7[-4],r12
  return (spi->sr & (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK)) ==
8002cb42:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cb46:	70 48       	ld.w	r8,r8[0x10]
8002cb48:	e2 18 02 01 	andl	r8,0x201,COH
8002cb4c:	e0 48 02 01 	cp.w	r8,513
8002cb50:	5f 08       	sreq	r8
8002cb52:	5c 58       	castu.b	r8
         (AVR32_SPI_SR_RDRF_MASK | AVR32_SPI_SR_TXEMPTY_MASK);
}
8002cb54:	10 9c       	mov	r12,r8
8002cb56:	2f fd       	sub	sp,-4
8002cb58:	e3 cd 80 80 	ldm	sp++,r7,pc

8002cb5c <spi_write_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to write
 *
 */
static inline void spi_write_single(volatile avr32_spi_t *spi, uint8_t data)
{
8002cb5c:	eb cd 40 c0 	pushm	r6-r7,lr
8002cb60:	1a 97       	mov	r7,sp
8002cb62:	20 2d       	sub	sp,8
8002cb64:	48 86       	lddpc	r6,8002cb84 <spi_write_single+0x28>
8002cb66:	1e 26       	rsub	r6,pc
8002cb68:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb6c:	16 98       	mov	r8,r11
8002cb6e:	ef 68 ff f8 	st.b	r7[-8],r8
	spi_put(spi,(uint16_t)data);
8002cb72:	ef 38 ff f8 	ld.ub	r8,r7[-8]
8002cb76:	10 9b       	mov	r11,r8
8002cb78:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cb7c:	ca df       	rcall	8002cad6 <spi_put>
}
8002cb7e:	2f ed       	sub	sp,-8
8002cb80:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cb84:	80 02       	ld.sh	r2,r0[0x0]
8002cb86:	c9 ea       	rjmp	8002c8c2 <spi_set_bits_per_transfer+0xa6>

8002cb88 <spi_read_single>:
 * \param spi    Base address of the SPI instance.
 * \param data   Data to read
 *
 */
static inline void spi_read_single(volatile avr32_spi_t *spi, uint8_t *data)
{
8002cb88:	eb cd 40 c0 	pushm	r6-r7,lr
8002cb8c:	1a 97       	mov	r7,sp
8002cb8e:	20 2d       	sub	sp,8
8002cb90:	48 96       	lddpc	r6,8002cbb4 <spi_read_single+0x2c>
8002cb92:	1e 26       	rsub	r6,pc
8002cb94:	ef 4c ff fc 	st.w	r7[-4],r12
8002cb98:	ef 4b ff f8 	st.w	r7[-8],r11
	*data = (uint8_t)spi_get(spi);
8002cb9c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cba0:	ca cf       	rcall	8002caf8 <spi_get>
8002cba2:	18 98       	mov	r8,r12
8002cba4:	5c 88       	casts.h	r8
8002cba6:	5c 58       	castu.b	r8
8002cba8:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cbac:	b2 88       	st.b	r9[0x0],r8
}
8002cbae:	2f ed       	sub	sp,-8
8002cbb0:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cbb4:	80 02       	ld.sh	r2,r0[0x0]
8002cbb6:	ca 16       	brmi	8002caf8 <spi_get>

8002cbb8 <spi_master_setup_device>:


void spi_master_setup_device(volatile avr32_spi_t *spi, struct spi_device *device, 
     spi_flags_t flags, uint32_t baud_rate,
     board_spi_select_id_t sel_id)
{
8002cbb8:	eb cd 40 c0 	pushm	r6-r7,lr
8002cbbc:	1a 97       	mov	r7,sp
8002cbbe:	20 5d       	sub	sp,20
8002cbc0:	4a 76       	lddpc	r6,8002cc5c <spi_master_setup_device+0xa4>
8002cbc2:	1e 26       	rsub	r6,pc
8002cbc4:	ef 4c ff fc 	st.w	r7[-4],r12
8002cbc8:	ef 4b ff f8 	st.w	r7[-8],r11
8002cbcc:	ef 49 ff f0 	st.w	r7[-16],r9
8002cbd0:	14 99       	mov	r9,r10
8002cbd2:	ef 69 ff f4 	st.b	r7[-12],r9
8002cbd6:	ef 68 ff ec 	st.b	r7[-20],r8
  spi_set_chipselect_delay_bct(spi,device->id,CONFIG_SPI_MASTER_DELAY_BCT);
8002cbda:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbde:	11 88       	ld.ub	r8,r8[0x0]
8002cbe0:	30 0a       	mov	r10,0
8002cbe2:	10 9b       	mov	r11,r8
8002cbe4:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cbe8:	fe b0 fd 9a 	rcall	8002c71c <spi_set_chipselect_delay_bct>
  spi_set_chipselect_delay_bs(spi,device->id,CONFIG_SPI_MASTER_DELAY_BS);
8002cbec:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cbf0:	11 88       	ld.ub	r8,r8[0x0]
8002cbf2:	30 0a       	mov	r10,0
8002cbf4:	10 9b       	mov	r11,r8
8002cbf6:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cbfa:	fe b0 fd d1 	rcall	8002c79c <spi_set_chipselect_delay_bs>
  spi_set_bits_per_transfer(spi,device->id,CONFIG_SPI_MASTER_BITS_PER_TRANSFER);
8002cbfe:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc02:	11 88       	ld.ub	r8,r8[0x0]
8002cc04:	30 8a       	mov	r10,8
8002cc06:	10 9b       	mov	r11,r8
8002cc08:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc0c:	c0 8e       	rcall	8002c81c <spi_set_bits_per_transfer>
  spi_set_baudrate_register(spi,device->id,getBaudDiv(baud_rate, sysclk_get_pba_hz()));
8002cc0e:	fe b0 fd 7b 	rcall	8002c704 <sysclk_get_pba_hz>
8002cc12:	18 98       	mov	r8,r12
8002cc14:	10 9b       	mov	r11,r8
8002cc16:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cc1a:	f0 16 01 29 	mcall	r6[1188]
8002cc1e:	18 98       	mov	r8,r12
8002cc20:	5c 58       	castu.b	r8
8002cc22:	10 99       	mov	r9,r8
8002cc24:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc28:	11 88       	ld.ub	r8,r8[0x0]
8002cc2a:	12 9a       	mov	r10,r9
8002cc2c:	10 9b       	mov	r11,r8
8002cc2e:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc32:	c4 de       	rcall	8002c8cc <spi_set_baudrate_register>
  spi_enable_active_mode(spi,device->id);
8002cc34:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc38:	11 88       	ld.ub	r8,r8[0x0]
8002cc3a:	10 9b       	mov	r11,r8
8002cc3c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc40:	c8 6e       	rcall	8002c94c <spi_enable_active_mode>
  spi_set_mode(spi,device->id,flags);
8002cc42:	ef 39 ff f4 	ld.ub	r9,r7[-12]
8002cc46:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc4a:	11 88       	ld.ub	r8,r8[0x0]
8002cc4c:	12 9a       	mov	r10,r9
8002cc4e:	10 9b       	mov	r11,r8
8002cc50:	ee fc ff fc 	ld.w	r12,r7[-4]
8002cc54:	cb 5e       	rcall	8002c9be <spi_set_mode>
    {
      while(1);
    }
  }
#endif
}
8002cc56:	2f bd       	sub	sp,-20
8002cc58:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cc5c:	80 02       	ld.sh	r2,r0[0x0]
8002cc5e:	ca 46       	brmi	8002cba6 <spi_read_single+0x1e>

8002cc60 <spi_read_packet>:

status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
8002cc60:	eb cd 40 c0 	pushm	r6-r7,lr
8002cc64:	1a 97       	mov	r7,sp
8002cc66:	20 6d       	sub	sp,24
8002cc68:	4b 66       	lddpc	r6,8002cd40 <spi_read_packet+0xe0>
8002cc6a:	1e 26       	rsub	r6,pc
8002cc6c:	ef 4c ff f0 	st.w	r7[-16],r12
8002cc70:	ef 4b ff ec 	st.w	r7[-20],r11
8002cc74:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002cc78:	e0 68 3a 98 	mov	r8,15000
8002cc7c:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;  
  size_t i=0;  
8002cc80:	30 08       	mov	r8,0
8002cc82:	ef 48 ff fc 	st.w	r7[-4],r8
  while(len) {
8002cc86:	c5 48       	rjmp	8002cd2e <spi_read_packet+0xce>
  	 timeout = SPI_TIMEOUT;
8002cc88:	e0 68 3a 98 	mov	r8,15000
8002cc8c:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_tx_ready(spi)) {
8002cc90:	c0 f8       	rjmp	8002ccae <spi_read_packet+0x4e>
       if (!timeout--) {
8002cc92:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cc96:	58 08       	cp.w	r8,0
8002cc98:	5f 08       	sreq	r8
8002cc9a:	5c 58       	castu.b	r8
8002cc9c:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cca0:	20 19       	sub	r9,1
8002cca2:	ef 49 ff f8 	st.w	r7[-8],r9
8002cca6:	58 08       	cp.w	r8,0
8002cca8:	c0 30       	breq	8002ccae <spi_read_packet+0x4e>
         return ERR_TIMEOUT;
8002ccaa:	3f d8       	mov	r8,-3
8002ccac:	c4 68       	rjmp	8002cd38 <spi_read_packet+0xd8>
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
  	 timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002ccae:	ee fc ff f0 	ld.w	r12,r7[-16]
8002ccb2:	c3 1f       	rcall	8002cb14 <spi_is_tx_ready>
8002ccb4:	18 98       	mov	r8,r12
8002ccb6:	ec 18 00 01 	eorl	r8,0x1
8002ccba:	5c 58       	castu.b	r8
8002ccbc:	ce b1       	brne	8002cc92 <spi_read_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
8002ccbe:	e0 6b 00 ff 	mov	r11,255
8002ccc2:	ee fc ff f0 	ld.w	r12,r7[-16]
8002ccc6:	c4 bf       	rcall	8002cb5c <spi_write_single>
     timeout = SPI_TIMEOUT;
8002ccc8:	e0 68 3a 98 	mov	r8,15000
8002cccc:	ef 48 ff f8 	st.w	r7[-8],r8
     while (!spi_is_rx_ready(spi)) {
8002ccd0:	c0 f8       	rjmp	8002ccee <spi_read_packet+0x8e>
       if (!timeout--) {
8002ccd2:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ccd6:	58 08       	cp.w	r8,0
8002ccd8:	5f 08       	sreq	r8
8002ccda:	5c 58       	castu.b	r8
8002ccdc:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002cce0:	20 19       	sub	r9,1
8002cce2:	ef 49 ff f8 	st.w	r7[-8],r9
8002cce6:	58 08       	cp.w	r8,0
8002cce8:	c0 30       	breq	8002ccee <spi_read_packet+0x8e>
         return ERR_TIMEOUT;
8002ccea:	3f d8       	mov	r8,-3
8002ccec:	c2 68       	rjmp	8002cd38 <spi_read_packet+0xd8>
         return ERR_TIMEOUT;
       }
     }
     spi_write_single(spi,CONFIG_SPI_MASTER_DUMMY);
     timeout = SPI_TIMEOUT;
     while (!spi_is_rx_ready(spi)) {
8002ccee:	ee fc ff f0 	ld.w	r12,r7[-16]
8002ccf2:	c2 2f       	rcall	8002cb36 <spi_is_rx_ready>
8002ccf4:	18 98       	mov	r8,r12
8002ccf6:	ec 18 00 01 	eorl	r8,0x1
8002ccfa:	5c 58       	castu.b	r8
8002ccfc:	ce b1       	brne	8002ccd2 <spi_read_packet+0x72>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     spi_read_single(spi,&val);
8002ccfe:	ee c8 00 09 	sub	r8,r7,9
8002cd02:	10 9b       	mov	r11,r8
8002cd04:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cd08:	c4 0f       	rcall	8002cb88 <spi_read_single>
     data[i] = val;
8002cd0a:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002cd0e:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cd12:	10 09       	add	r9,r8
8002cd14:	ef 38 ff f7 	ld.ub	r8,r7[-9]
8002cd18:	b2 88       	st.b	r9[0x0],r8
     i++;
8002cd1a:	ee f8 ff fc 	ld.w	r8,r7[-4]
8002cd1e:	2f f8       	sub	r8,-1
8002cd20:	ef 48 ff fc 	st.w	r7[-4],r8
     len--;
8002cd24:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cd28:	20 18       	sub	r8,1
8002cd2a:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_read_packet(volatile avr32_spi_t *spi,uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  uint8_t val;  
  size_t i=0;  
  while(len) {
8002cd2e:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cd32:	58 08       	cp.w	r8,0
8002cd34:	ca a1       	brne	8002cc88 <spi_read_packet+0x28>
     spi_read_single(spi,&val);
     data[i] = val;
     i++;
     len--;
  }
  return STATUS_OK;
8002cd36:	30 08       	mov	r8,0
}
8002cd38:	10 9c       	mov	r12,r8
8002cd3a:	2f ad       	sub	sp,-24
8002cd3c:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cd40:	80 02       	ld.sh	r2,r0[0x0]
8002cd42:	ca ee       	rcall	8002ca9e <spi_set_mode+0xe0>

8002cd44 <spi_write_packet>:

status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
8002cd44:	eb cd 40 c0 	pushm	r6-r7,lr
8002cd48:	1a 97       	mov	r7,sp
8002cd4a:	20 6d       	sub	sp,24
8002cd4c:	4a 76       	lddpc	r6,8002cde8 <spi_write_packet+0xa4>
8002cd4e:	1e 26       	rsub	r6,pc
8002cd50:	ef 4c ff f0 	st.w	r7[-16],r12
8002cd54:	ef 4b ff ec 	st.w	r7[-20],r11
8002cd58:	ef 4a ff e8 	st.w	r7[-24],r10
  unsigned int timeout = SPI_TIMEOUT;
8002cd5c:	e0 68 3a 98 	mov	r8,15000
8002cd60:	ef 48 ff f4 	st.w	r7[-12],r8
  size_t i=0;
8002cd64:	30 08       	mov	r8,0
8002cd66:	ef 48 ff f8 	st.w	r7[-8],r8
  uint8_t val;
  while(len) {
8002cd6a:	c3 58       	rjmp	8002cdd4 <spi_write_packet+0x90>
     timeout = SPI_TIMEOUT;
8002cd6c:	e0 68 3a 98 	mov	r8,15000
8002cd70:	ef 48 ff f4 	st.w	r7[-12],r8
     while (!spi_is_tx_ready(spi)) {
8002cd74:	c0 f8       	rjmp	8002cd92 <spi_write_packet+0x4e>
       if (!timeout--) {
8002cd76:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cd7a:	58 08       	cp.w	r8,0
8002cd7c:	5f 08       	sreq	r8
8002cd7e:	5c 58       	castu.b	r8
8002cd80:	ee f9 ff f4 	ld.w	r9,r7[-12]
8002cd84:	20 19       	sub	r9,1
8002cd86:	ef 49 ff f4 	st.w	r7[-12],r9
8002cd8a:	58 08       	cp.w	r8,0
8002cd8c:	c0 30       	breq	8002cd92 <spi_write_packet+0x4e>
         return ERR_TIMEOUT;
8002cd8e:	3f d8       	mov	r8,-3
8002cd90:	c2 78       	rjmp	8002cdde <spi_write_packet+0x9a>
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
     timeout = SPI_TIMEOUT;
     while (!spi_is_tx_ready(spi)) {
8002cd92:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cd96:	cb fe       	rcall	8002cb14 <spi_is_tx_ready>
8002cd98:	18 98       	mov	r8,r12
8002cd9a:	ec 18 00 01 	eorl	r8,0x1
8002cd9e:	5c 58       	castu.b	r8
8002cda0:	ce b1       	brne	8002cd76 <spi_write_packet+0x32>
       if (!timeout--) {
         return ERR_TIMEOUT;
       }
     }
     val = data[i];     
8002cda2:	ee f9 ff ec 	ld.w	r9,r7[-20]
8002cda6:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cdaa:	f2 08 00 08 	add	r8,r9,r8
8002cdae:	11 88       	ld.ub	r8,r8[0x0]
8002cdb0:	ef 68 ff ff 	st.b	r7[-1],r8
     spi_write_single(spi,val);
8002cdb4:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002cdb8:	10 9b       	mov	r11,r8
8002cdba:	ee fc ff f0 	ld.w	r12,r7[-16]
8002cdbe:	cc fe       	rcall	8002cb5c <spi_write_single>
     i++;
8002cdc0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002cdc4:	2f f8       	sub	r8,-1
8002cdc6:	ef 48 ff f8 	st.w	r7[-8],r8
     len--;
8002cdca:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cdce:	20 18       	sub	r8,1
8002cdd0:	ef 48 ff e8 	st.w	r7[-24],r8
status_code_t spi_write_packet(volatile avr32_spi_t *spi, const uint8_t *data, size_t len)
{
  unsigned int timeout = SPI_TIMEOUT;
  size_t i=0;
  uint8_t val;
  while(len) {
8002cdd4:	ee f8 ff e8 	ld.w	r8,r7[-24]
8002cdd8:	58 08       	cp.w	r8,0
8002cdda:	cc 91       	brne	8002cd6c <spi_write_packet+0x28>
     val = data[i];     
     spi_write_single(spi,val);
     i++;
     len--;
  }
  return STATUS_OK;
8002cddc:	30 08       	mov	r8,0
}
8002cdde:	10 9c       	mov	r12,r8
8002cde0:	2f ad       	sub	sp,-24
8002cde2:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cde6:	00 00       	add	r0,r0
8002cde8:	80 02       	ld.sh	r2,r0[0x0]
8002cdea:	cb d2       	brcc	8002cd64 <spi_write_packet+0x20>

8002cdec <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002cdec:	eb cd 40 c0 	pushm	r6-r7,lr
8002cdf0:	1a 97       	mov	r7,sp
8002cdf2:	20 3d       	sub	sp,12
8002cdf4:	49 06       	lddpc	r6,8002ce34 <mav_array_memcpy+0x48>
8002cdf6:	1e 26       	rsub	r6,pc
8002cdf8:	ef 4c ff fc 	st.w	r7[-4],r12
8002cdfc:	ef 4b ff f8 	st.w	r7[-8],r11
8002ce00:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002ce04:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002ce08:	58 08       	cp.w	r8,0
8002ce0a:	c0 91       	brne	8002ce1c <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002ce0c:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ce10:	30 0b       	mov	r11,0
8002ce12:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce16:	f0 16 00 31 	mcall	r6[196]
8002ce1a:	c0 98       	rjmp	8002ce2c <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002ce1c:	ee fa ff f4 	ld.w	r10,r7[-12]
8002ce20:	ee fb ff f8 	ld.w	r11,r7[-8]
8002ce24:	ee fc ff fc 	ld.w	r12,r7[-4]
8002ce28:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002ce2c:	2f dd       	sub	sp,-12
8002ce2e:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ce32:	00 00       	add	r0,r0
8002ce34:	80 02       	ld.sh	r2,r0[0x0]
8002ce36:	cc 7a       	rjmp	8002cbc4 <spi_master_setup_device+0xc>

8002ce38 <osc_get_rate>:
/**
 * \todo RC8M may run at either 8 MHz or 1 MHz. Currently, we assume
 * it's always running at 8 MHz.
 */
static inline uint32_t osc_get_rate(uint8_t id)
{
8002ce38:	eb cd 40 80 	pushm	r7,lr
8002ce3c:	1a 97       	mov	r7,sp
8002ce3e:	20 1d       	sub	sp,4
8002ce40:	18 98       	mov	r8,r12
8002ce42:	ef 68 ff fc 	st.b	r7[-4],r8
	switch (id) {
8002ce46:	ef 38 ff fc 	ld.ub	r8,r7[-4]
8002ce4a:	58 38       	cp.w	r8,3
8002ce4c:	c1 20       	breq	8002ce70 <osc_get_rate+0x38>
8002ce4e:	e0 89 00 07 	brgt	8002ce5c <osc_get_rate+0x24>
8002ce52:	58 08       	cp.w	r8,0
8002ce54:	c0 90       	breq	8002ce66 <osc_get_rate+0x2e>
8002ce56:	58 28       	cp.w	r8,2
8002ce58:	c0 f0       	breq	8002ce76 <osc_get_rate+0x3e>
8002ce5a:	c1 b8       	rjmp	8002ce90 <osc_get_rate+0x58>
8002ce5c:	58 48       	cp.w	r8,4
8002ce5e:	c1 10       	breq	8002ce80 <osc_get_rate+0x48>
8002ce60:	58 58       	cp.w	r8,5
8002ce62:	c1 40       	breq	8002ce8a <osc_get_rate+0x52>
8002ce64:	c1 68       	rjmp	8002ce90 <osc_get_rate+0x58>
#ifdef BOARD_OSC0_HZ
	case OSC_ID_OSC0:
		return BOARD_OSC0_HZ;
8002ce66:	e0 68 24 00 	mov	r8,9216
8002ce6a:	ea 18 00 f4 	orh	r8,0xf4
8002ce6e:	c1 28       	rjmp	8002ce92 <osc_get_rate+0x5a>
		return BOARD_OSC1_HZ;
#endif

#ifdef BOARD_OSC32_HZ
	case OSC_ID_OSC32:
		return BOARD_OSC32_HZ;
8002ce70:	e0 68 80 00 	mov	r8,32768
8002ce74:	c0 f8       	rjmp	8002ce92 <osc_get_rate+0x5a>
#endif

	case OSC_ID_RC8M:
		return OSC_RC8M_NOMINAL_HZ;
8002ce76:	e0 68 12 00 	mov	r8,4608
8002ce7a:	ea 18 00 7a 	orh	r8,0x7a
8002ce7e:	c0 a8       	rjmp	8002ce92 <osc_get_rate+0x5a>

	case OSC_ID_RC120M:
		return OSC_RC120M_NOMINAL_HZ;
8002ce80:	e0 68 0e 00 	mov	r8,3584
8002ce84:	ea 18 07 27 	orh	r8,0x727
8002ce88:	c0 58       	rjmp	8002ce92 <osc_get_rate+0x5a>

	case OSC_ID_RCSYS:
		return OSC_RCSYS_NOMINAL_HZ;
8002ce8a:	e0 78 c1 38 	mov	r8,115000
8002ce8e:	c0 28       	rjmp	8002ce92 <osc_get_rate+0x5a>

	default:
		/* unhandled_case(id); */
		return 0;
8002ce90:	30 08       	mov	r8,0
	}
}
8002ce92:	10 9c       	mov	r12,r8
8002ce94:	2f fd       	sub	sp,-4
8002ce96:	e3 cd 80 80 	ldm	sp++,r7,pc

8002ce9a <sysclk_get_main_hz>:
 */
#if (defined CONFIG_SYSCLK_DEFAULT_RETURNS_SLOW_OSC)
extern bool sysclk_initialized;
#endif
static inline uint32_t sysclk_get_main_hz(void)
{
8002ce9a:	eb cd 40 c0 	pushm	r6-r7,lr
8002ce9e:	1a 97       	mov	r7,sp
8002cea0:	48 56       	lddpc	r6,8002ceb4 <sysclk_get_main_hz+0x1a>
8002cea2:	1e 26       	rsub	r6,pc
		return BOARD_OSC1_HZ;
#endif

#ifdef CONFIG_PLL0_SOURCE
	case SYSCLK_SRC_PLL0:
		return pll_get_default_rate(0);
8002cea4:	30 0c       	mov	r12,0
8002cea6:	cc 9f       	rcall	8002ce38 <osc_get_rate>
8002cea8:	18 98       	mov	r8,r12
8002ceaa:	a3 68       	lsl	r8,0x2

	default:
		/* unhandled_case(CONFIG_SYSCLK_SOURCE); */
		return 0;
	}
}
8002ceac:	10 9c       	mov	r12,r8
8002ceae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002ceb2:	00 00       	add	r0,r0
8002ceb4:	80 02       	ld.sh	r2,r0[0x0]
8002ceb6:	cd 26       	brmi	8002ce5a <osc_get_rate+0x22>

8002ceb8 <sysclk_get_cpu_hz>:
 * clocks.
 *
 * \return Frequency of the CPU clock, in Hz.
 */
static inline uint32_t sysclk_get_cpu_hz(void)
{
8002ceb8:	eb cd 40 c0 	pushm	r6-r7,lr
8002cebc:	1a 97       	mov	r7,sp
8002cebe:	48 46       	lddpc	r6,8002cecc <sysclk_get_cpu_hz+0x14>
8002cec0:	1e 26       	rsub	r6,pc
	return sysclk_get_main_hz() >> CONFIG_SYSCLK_CPU_DIV;
8002cec2:	ce cf       	rcall	8002ce9a <sysclk_get_main_hz>
8002cec4:	18 98       	mov	r8,r12
}
8002cec6:	10 9c       	mov	r12,r8
8002cec8:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cecc:	80 02       	ld.sh	r2,r0[0x0]
8002cece:	cd 44       	brge	8002ce76 <osc_get_rate+0x3e>

8002ced0 <sleepmgr_init>:
 * Sets all lock counts to 0, except the very last one, which is set to 1. This
 * is done to simplify the algorithm for finding the deepest allowable sleep
 * mode in \ref sleepmgr_enter_sleep.
 */
static inline void sleepmgr_init(void)
{
8002ced0:	eb cd 40 c0 	pushm	r6-r7,lr
8002ced4:	1a 97       	mov	r7,sp
8002ced6:	20 1d       	sub	sp,4
8002ced8:	49 06       	lddpc	r6,8002cf18 <sleepmgr_init+0x48>
8002ceda:	1e 26       	rsub	r6,pc
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002cedc:	30 08       	mov	r8,0
8002cede:	ef 68 ff ff 	st.b	r7[-1],r8
8002cee2:	c0 d8       	rjmp	8002cefc <sleepmgr_init+0x2c>
		sleepmgr_locks[i] = 0;
8002cee4:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002cee8:	ec fa 04 14 	ld.w	r10,r6[1044]
8002ceec:	30 08       	mov	r8,0
8002ceee:	f4 09 0b 08 	st.b	r10[r9],r8
static inline void sleepmgr_init(void)
{
#ifdef CONFIG_SLEEPMGR_ENABLE
	uint8_t i;

	for (i = 0; i < SLEEPMGR_NR_OF_MODES - 1; i++) {
8002cef2:	ef 38 ff ff 	ld.ub	r8,r7[-1]
8002cef6:	2f f8       	sub	r8,-1
8002cef8:	ef 68 ff ff 	st.b	r7[-1],r8
8002cefc:	ef 39 ff ff 	ld.ub	r9,r7[-1]
8002cf00:	30 58       	mov	r8,5
8002cf02:	f0 09 18 00 	cp.b	r9,r8
8002cf06:	fe 98 ff ef 	brls	8002cee4 <sleepmgr_init+0x14>
		sleepmgr_locks[i] = 0;
	}
	sleepmgr_locks[SLEEPMGR_NR_OF_MODES - 1] = 1;
8002cf0a:	ec f9 04 14 	ld.w	r9,r6[1044]
8002cf0e:	30 18       	mov	r8,1
8002cf10:	b2 e8       	st.b	r9[0x6],r8
#endif /* CONFIG_SLEEPMGR_ENABLE */
}
8002cf12:	2f fd       	sub	sp,-4
8002cf14:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002cf18:	80 02       	ld.sh	r2,r0[0x0]
8002cf1a:	cd 5e       	rcall	8002ccc4 <spi_read_packet+0x64>
8002cf1c:	42 6f       	lddsp	pc,sp[0x98]
8002cf1e:	61 72       	ld.w	r2,r0[0x5c]
8002cf20:	64 20       	ld.w	r0,r2[0x8]
8002cf22:	69 6e       	ld.w	lr,r4[0x58]
8002cf24:	69 74       	ld.w	r4,r4[0x5c]
8002cf26:	69 61       	ld.w	r1,r4[0x58]
8002cf28:	6c 69       	ld.w	r9,r6[0x18]
8002cf2a:	73 65       	ld.w	r5,r9[0x58]
8002cf2c:	64 2e       	ld.w	lr,r2[0x8]
8002cf2e:	0a 00       	add	r0,r5

8002cf30 <initialise_board>:
#include "bmp085.h"
#include "analog_monitor.h"

//static volatile board_hardware_t board_hardware;

void initialise_board(central_data_t *centralData) {
8002cf30:	eb cd 40 e0 	pushm	r5-r7,lr
8002cf34:	1a 97       	mov	r7,sp
8002cf36:	20 3d       	sub	sp,12
8002cf38:	4f 66       	lddpc	r6,8002d110 <initialise_board+0x1e0>
8002cf3a:	1e 26       	rsub	r6,pc
8002cf3c:	ef 4c ff f4 	st.w	r7[-12],r12
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002cf40:	30 88       	mov	r8,8
8002cf42:	ef 48 ff fc 	st.w	r7[-4],r8

	irq_initialize_vectors();
8002cf46:	f0 16 01 23 	mcall	r6[1164]
	cpu_irq_enable();
8002cf4a:	d5 03       	csrf	0x10
	Disable_global_interrupt();
8002cf4c:	d3 03       	ssrf	0x10
		
	// Initialize the sleep manager
	sleepmgr_init();
8002cf4e:	cc 1f       	rcall	8002ced0 <sleepmgr_init>
	sysclk_init();
8002cf50:	f0 16 01 52 	mcall	r6[1352]
	board_init();
8002cf54:	f0 16 01 ad 	mcall	r6[1716]
	delay_init(sysclk_get_cpu_hz());
8002cf58:	cb 0f       	rcall	8002ceb8 <sysclk_get_cpu_hz>
8002cf5a:	18 98       	mov	r8,r12
8002cf5c:	10 9c       	mov	r12,r8
8002cf5e:	f0 16 01 be 	mcall	r6[1784]
	init_time_keeper();
8002cf62:	f0 16 02 05 	mcall	r6[2068]
		
	INTC_init_interrupts();
8002cf66:	f0 16 01 23 	mcall	r6[1164]
		
		
	if (init_i2c(0)!=STATUS_OK) {
8002cf6a:	30 0c       	mov	r12,0
8002cf6c:	f0 16 00 ea 	mcall	r6[936]
8002cf70:	18 98       	mov	r8,r12
8002cf72:	58 08       	cp.w	r8,0
8002cf74:	c0 20       	breq	8002cf78 <initialise_board+0x48>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002cf76:	c0 08       	rjmp	8002cf76 <initialise_board+0x46>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};
	if (init_i2c(1)!=STATUS_OK) {
8002cf78:	30 1c       	mov	r12,1
8002cf7a:	f0 16 00 ea 	mcall	r6[936]
8002cf7e:	18 98       	mov	r8,r12
8002cf80:	58 08       	cp.w	r8,0
8002cf82:	c0 20       	breq	8002cf86 <initialise_board+0x56>
		//putstring(STDOUT, "Error initialising I2C\n");
		while (1==1);
8002cf84:	c0 08       	rjmp	8002cf84 <initialise_board+0x54>
		} else {
		//putstring(STDOUT, "initialised I2C.\n");
	};

	LED_Off(LED1);
8002cf86:	30 2c       	mov	r12,2
8002cf88:	f0 16 01 72 	mcall	r6[1480]
	// Configure the pins connected to LEDs as output and set their default
	// initial state to high (LEDs off).
	//gpio_configure_pin(LED0_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);
	//gpio_configure_pin(LED1_GPIO,GPIO_DIR_OUTPUT | GPIO_INIT_LOW);

	init_Servos();
8002cf8c:	f0 16 02 2c 	mcall	r6[2224]
	set_servos(&servo_failsafe);
8002cf90:	ec fc 08 bc 	ld.w	r12,r6[2236]
8002cf94:	f0 16 00 af 	mcall	r6[700]
	
		
	init_UART_int(0);
8002cf98:	30 0c       	mov	r12,0
8002cf9a:	f0 16 00 ab 	mcall	r6[684]
	register_write_stream(get_UART_handle(0), &(centralData->xbee_out_stream));
8002cf9e:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfa2:	f0 c5 fa 44 	sub	r5,r8,-1468
8002cfa6:	30 0c       	mov	r12,0
8002cfa8:	f0 16 00 6c 	mcall	r6[432]
8002cfac:	18 98       	mov	r8,r12
8002cfae:	0a 9b       	mov	r11,r5
8002cfb0:	10 9c       	mov	r12,r8
8002cfb2:	f0 16 00 dc 	mcall	r6[880]
				
		
	init_UART_int(3);
8002cfb6:	30 3c       	mov	r12,3
8002cfb8:	f0 16 00 ab 	mcall	r6[684]
	make_buffered_stream(&(centralData->gps_buffer), &(centralData->gps_stream_in));
8002cfbc:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfc0:	f0 c9 f8 e0 	sub	r9,r8,-1824
8002cfc4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfc8:	f0 c8 f9 e4 	sub	r8,r8,-1564
8002cfcc:	12 9b       	mov	r11,r9
8002cfce:	10 9c       	mov	r12,r8
8002cfd0:	f0 16 01 75 	mcall	r6[1492]
	register_read_stream(get_UART_handle(3), &(centralData->gps_stream_in));
8002cfd4:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cfd8:	f0 c5 f8 e0 	sub	r5,r8,-1824
8002cfdc:	30 3c       	mov	r12,3
8002cfde:	f0 16 00 6c 	mcall	r6[432]
8002cfe2:	18 98       	mov	r8,r12
8002cfe4:	0a 9b       	mov	r11,r5
8002cfe6:	10 9c       	mov	r12,r8
8002cfe8:	f0 16 00 c9 	mcall	r6[804]
	register_write_stream(get_UART_handle(3), &(centralData->gps_stream_out));
8002cfec:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002cff0:	f0 c5 f8 c8 	sub	r5,r8,-1848
8002cff4:	30 3c       	mov	r12,3
8002cff6:	f0 16 00 6c 	mcall	r6[432]
8002cffa:	18 98       	mov	r8,r12
8002cffc:	0a 9b       	mov	r11,r5
8002cffe:	10 9c       	mov	r12,r8
8002d000:	f0 16 00 dc 	mcall	r6[880]
		
	init_UART_int(4);
8002d004:	30 4c       	mov	r12,4
8002d006:	f0 16 00 ab 	mcall	r6[684]
	register_write_stream(get_UART_handle(4), &(centralData->wired_out_stream));
8002d00a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d00e:	f0 c5 fa 14 	sub	r5,r8,-1516
8002d012:	30 4c       	mov	r12,4
8002d014:	f0 16 00 6c 	mcall	r6[432]
8002d018:	18 98       	mov	r8,r12
8002d01a:	0a 9b       	mov	r11,r5
8002d01c:	10 9c       	mov	r12,r8
8002d01e:	f0 16 00 dc 	mcall	r6[880]


	make_buffered_stream_lossy(&(centralData->xbee_in_buffer), &(centralData->xbee_in_stream));
8002d022:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d026:	f0 c9 fa 2c 	sub	r9,r8,-1492
8002d02a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d02e:	f0 c8 fc 4c 	sub	r8,r8,-948
8002d032:	12 9b       	mov	r11,r9
8002d034:	10 9c       	mov	r12,r8
8002d036:	f0 16 00 f8 	mcall	r6[992]
	make_buffered_stream_lossy(&(centralData->wired_in_buffer), &(centralData->wired_in_stream));
8002d03a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d03e:	f0 c9 f9 fc 	sub	r9,r8,-1540
8002d042:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d046:	f0 c8 fb 49 	sub	r8,r8,-1207
8002d04a:	12 9b       	mov	r11,r9
8002d04c:	10 9c       	mov	r12,r8
8002d04e:	f0 16 00 f8 	mcall	r6[992]
	register_read_stream(get_UART_handle(4), &(centralData->wired_in_stream));
8002d052:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d056:	f0 c5 f9 fc 	sub	r5,r8,-1540
8002d05a:	30 4c       	mov	r12,4
8002d05c:	f0 16 00 6c 	mcall	r6[432]
8002d060:	18 98       	mov	r8,r12
8002d062:	0a 9b       	mov	r11,r5
8002d064:	10 9c       	mov	r12,r8
8002d066:	f0 16 00 c9 	mcall	r6[804]
	register_read_stream(get_UART_handle(0), &(centralData->xbee_in_stream));
8002d06a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d06e:	f0 c5 fa 2c 	sub	r5,r8,-1492
8002d072:	30 0c       	mov	r12,0
8002d074:	f0 16 00 6c 	mcall	r6[432]
8002d078:	18 98       	mov	r8,r12
8002d07a:	0a 9b       	mov	r11,r5
8002d07c:	10 9c       	mov	r12,r8
8002d07e:	f0 16 00 c9 	mcall	r6[804]

		
	// connect abstracted aliases to hardware ports


	centralData->telemetry_down_stream=&(centralData->xbee_out_stream);
8002d082:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d086:	f0 c9 fa 44 	sub	r9,r8,-1468
8002d08a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d08e:	f1 49 0a 44 	st.w	r8[2628],r9
	centralData->telemetry_up_stream=&(centralData->xbee_in_stream);
8002d092:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d096:	f0 c9 fa 2c 	sub	r9,r8,-1492
8002d09a:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d09e:	f1 49 0a 48 	st.w	r8[2632],r9
	centralData->debug_out_stream=&(centralData->wired_out_stream);
8002d0a2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0a6:	f0 c9 fa 14 	sub	r9,r8,-1516
8002d0aa:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0ae:	f1 49 0a 4c 	st.w	r8[2636],r9
	centralData->debug_in_stream=&(centralData->wired_in_stream);
8002d0b2:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0b6:	f0 c9 f9 fc 	sub	r9,r8,-1540
8002d0ba:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0be:	f1 49 0a 50 	st.w	r8[2640],r9
	centralData->telemetry_up_stream  =&(centralData->wired_in_stream);		
	centralData->debug_out_stream     =&(centralData->xbee_out_stream);
	centralData->debug_in_stream      =&(centralData->xbee_in_stream);
*/

	init_analog_monitor();
8002d0c2:	f0 16 01 c9 	mcall	r6[1828]
	// init mavlink
	init_mavlink(centralData->telemetry_down_stream, centralData->telemetry_up_stream, MAVLINK_SYS_ID);
8002d0c6:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0ca:	f0 f9 0a 48 	ld.w	r9,r8[2632]
8002d0ce:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0d2:	f0 f8 0a 44 	ld.w	r8,r8[2628]
8002d0d6:	32 ca       	mov	r10,44
8002d0d8:	12 9b       	mov	r11,r9
8002d0da:	10 9c       	mov	r12,r8
8002d0dc:	f0 16 01 d6 	mcall	r6[1880]
		
	// init debug output
	dbg_print_init(centralData->debug_out_stream);
8002d0e0:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0e4:	f0 f8 0a 4c 	ld.w	r8,r8[2636]
8002d0e8:	10 9c       	mov	r12,r8
8002d0ea:	f0 16 01 6c 	mcall	r6[1456]
		
	init_imu(&(centralData->imu1));
8002d0ee:	ee f8 ff f4 	ld.w	r8,r7[-12]
8002d0f2:	10 9c       	mov	r12,r8
8002d0f4:	f0 16 01 78 	mcall	r6[1504]
	init_bmp085();
8002d0f8:	f0 16 01 f1 	mcall	r6[1988]

	rc_init();
8002d0fc:	f0 16 01 42 	mcall	r6[1288]


	Enable_global_interrupt();
8002d100:	d5 03       	csrf	0x10
	dbg_print("Board initialised.\n");
8002d102:	fe cc 01 e6 	sub	r12,pc,486
8002d106:	f0 16 00 01 	mcall	r6[4]
}
8002d10a:	2f dd       	sub	sp,-12
8002d10c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8002d110:	80 02       	ld.sh	r2,r0[0x0]
8002d112:	cd be       	rcall	8002cec8 <sysclk_get_cpu_hz+0x10>

8002d114 <mav_array_memcpy>:

/*
  like memcpy(), but if src is NULL, do a memset to zero
*/
static void mav_array_memcpy(void *dest, const void *src, size_t n)
{
8002d114:	eb cd 40 c0 	pushm	r6-r7,lr
8002d118:	1a 97       	mov	r7,sp
8002d11a:	20 3d       	sub	sp,12
8002d11c:	49 06       	lddpc	r6,8002d15c <mav_array_memcpy+0x48>
8002d11e:	1e 26       	rsub	r6,pc
8002d120:	ef 4c ff fc 	st.w	r7[-4],r12
8002d124:	ef 4b ff f8 	st.w	r7[-8],r11
8002d128:	ef 4a ff f4 	st.w	r7[-12],r10
	if (src == NULL) {
8002d12c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d130:	58 08       	cp.w	r8,0
8002d132:	c0 91       	brne	8002d144 <mav_array_memcpy+0x30>
		memset(dest, 0, n);
8002d134:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d138:	30 0b       	mov	r11,0
8002d13a:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d13e:	f0 16 00 31 	mcall	r6[196]
8002d142:	c0 98       	rjmp	8002d154 <mav_array_memcpy+0x40>
	} else {
		memcpy(dest, src, n);
8002d144:	ee fa ff f4 	ld.w	r10,r7[-12]
8002d148:	ee fb ff f8 	ld.w	r11,r7[-8]
8002d14c:	ee fc ff fc 	ld.w	r12,r7[-4]
8002d150:	f0 16 00 1b 	mcall	r6[108]
	}
}
8002d154:	2f dd       	sub	sp,-12
8002d156:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d15a:	00 00       	add	r0,r0
8002d15c:	80 02       	ld.sh	r2,r0[0x0]
8002d15e:	cf a2       	brcc	8002d152 <mav_array_memcpy+0x3e>
8002d160:	44 65       	lddsp	r5,sp[0x118]
8002d162:	62 75       	ld.w	r5,r1[0x1c]
8002d164:	67 20       	ld.w	r0,r3[0x48]
8002d166:	73 74       	ld.w	r4,r9[0x5c]
8002d168:	72 65       	ld.w	r5,r9[0x18]
8002d16a:	61 6d       	ld.w	sp,r0[0x58]
8002d16c:	20 69       	sub	r9,6
8002d16e:	6e 69       	ld.w	r9,r7[0x18]
8002d170:	74 69       	ld.w	r9,r10[0x18]
8002d172:	61 6c       	ld.w	r12,r0[0x58]
8002d174:	69 73       	ld.w	r3,r4[0x5c]
8002d176:	65 64       	ld.w	r4,r2[0x58]
8002d178:	0a 00       	add	r0,r5

8002d17a <initialisation>:
#include "orca.h"
//#include "flashvault.h"

central_data_t *centralData;

void initialisation() {
8002d17a:	eb cd 40 c0 	pushm	r6-r7,lr
8002d17e:	1a 97       	mov	r7,sp
8002d180:	20 2d       	sub	sp,8
8002d182:	4e 26       	lddpc	r6,8002d308 <initialisation+0x18e>
8002d184:	1e 26       	rsub	r6,pc
	int i;
	enum GPS_Engine_Setting engine_nav_settings = GPS_ENGINE_AIRBORNE_4G;
8002d186:	30 88       	mov	r8,8
8002d188:	ef 48 ff fc 	st.w	r7[-4],r8

	centralData = get_central_data();
8002d18c:	f0 16 00 33 	mcall	r6[204]
8002d190:	18 99       	mov	r9,r12
8002d192:	ec f8 00 00 	ld.w	r8,r6[0]
8002d196:	91 09       	st.w	r8[0x0],r9
	initialise_board(centralData);
8002d198:	ec f8 00 00 	ld.w	r8,r6[0]
8002d19c:	70 08       	ld.w	r8,r8[0x0]
8002d19e:	10 9c       	mov	r12,r8
8002d1a0:	f0 16 02 29 	mcall	r6[2212]
	initialise_central_data();
8002d1a4:	f0 16 01 c0 	mcall	r6[1792]
	

	init_radar_modules();
8002d1a8:	f0 16 01 73 	mcall	r6[1484]
	dbg_print("Debug stream initialised\n");
8002d1ac:	fe cc 00 4c 	sub	r12,pc,76
8002d1b0:	f0 16 00 01 	mcall	r6[4]

	//init_gps_ubx(engine_nav_settings);
	
	set_servos(&servo_failsafe);
8002d1b4:	ec fc 08 b8 	ld.w	r12,r6[2232]
8002d1b8:	f0 16 00 af 	mcall	r6[700]
	
	//delay_ms(1000);
	init_stabilisation();
8002d1bc:	f0 16 01 94 	mcall	r6[1616]
	
	init_onboard_parameters();
8002d1c0:	f0 16 01 ee 	mcall	r6[1976]
	init_mavlink_actions();
8002d1c4:	f0 16 01 de 	mcall	r6[1912]
	init_pos_integration(&centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);
8002d1c8:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1cc:	70 08       	ld.w	r8,r8[0x0]
8002d1ce:	f0 ca f8 b0 	sub	r10,r8,-1872
8002d1d2:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1d6:	70 08       	ld.w	r8,r8[0x0]
8002d1d8:	f0 c9 f2 f4 	sub	r9,r8,-3340
8002d1dc:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1e0:	70 08       	ld.w	r8,r8[0x0]
8002d1e2:	f0 c8 f6 7c 	sub	r8,r8,-2436
8002d1e6:	12 9b       	mov	r11,r9
8002d1e8:	10 9c       	mov	r12,r8
8002d1ea:	f0 16 01 7a 	mcall	r6[1512]
	
	centralData->imu1.attitude.calibration_level=LEVELING;	
8002d1ee:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1f2:	70 09       	ld.w	r9,r8[0x0]
8002d1f4:	30 18       	mov	r8,1
8002d1f6:	f3 68 00 b8 	st.b	r9[184],r8
	centralData->mav_state = MAV_STATE_CALIBRATING;
8002d1fa:	ec f8 00 00 	ld.w	r8,r6[0]
8002d1fe:	70 09       	ld.w	r9,r8[0x0]
8002d200:	30 28       	mov	r8,2
8002d202:	f3 68 0d 05 	st.b	r9[3333],r8
	centralData->mav_mode = MAV_MODE_PREFLIGHT;
8002d206:	ec f8 00 00 	ld.w	r8,r6[0]
8002d20a:	70 09       	ld.w	r9,r8[0x0]
8002d20c:	30 08       	mov	r8,0
8002d20e:	f3 68 0d 04 	st.b	r9[3332],r8

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d212:	e0 68 01 90 	mov	r8,400
8002d216:	ef 48 ff f8 	st.w	r7[-8],r8
8002d21a:	c2 68       	rjmp	8002d266 <initialisation+0xec>
		imu_get_raw_data(&(centralData->imu1));
8002d21c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d220:	70 08       	ld.w	r8,r8[0x0]
8002d222:	10 9c       	mov	r12,r8
8002d224:	f0 16 00 9a 	mcall	r6[616]
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
8002d228:	ec f8 00 00 	ld.w	r8,r6[0]
8002d22c:	70 08       	ld.w	r8,r8[0x0]
8002d22e:	f0 c9 f8 b0 	sub	r9,r8,-1872
8002d232:	ec f8 00 00 	ld.w	r8,r6[0]
8002d236:	70 08       	ld.w	r8,r8[0x0]
8002d238:	f0 ca f2 f4 	sub	r10,r8,-3340
8002d23c:	ec f8 00 00 	ld.w	r8,r6[0]
8002d240:	70 08       	ld.w	r8,r8[0x0]
8002d242:	f0 cb f6 7c 	sub	r11,r8,-2436
8002d246:	ec f8 00 00 	ld.w	r8,r6[0]
8002d24a:	70 08       	ld.w	r8,r8[0x0]
8002d24c:	10 9c       	mov	r12,r8
8002d24e:	f0 16 00 9b 	mcall	r6[620]
		mavlink_protocol_update();	
8002d252:	f0 16 00 e9 	mcall	r6[932]
		delay_ms(5);
8002d256:	30 5c       	mov	r12,5
8002d258:	f0 16 01 0a 	mcall	r6[1064]
	centralData->imu1.attitude.calibration_level=LEVELING;	
	centralData->mav_state = MAV_STATE_CALIBRATING;
	centralData->mav_mode = MAV_MODE_PREFLIGHT;

//	calibrate_Gyros(&centralData->imu1);
	for (i=400; i>0; i--) {
8002d25c:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d260:	20 18       	sub	r8,1
8002d262:	ef 48 ff f8 	st.w	r7[-8],r8
8002d266:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d26a:	58 08       	cp.w	r8,0
8002d26c:	fe 99 ff d8 	brgt	8002d21c <initialisation+0xa2>
	for (i=100; i>0; i--) {
		imu_update(&(centralData->imu1), &centralData->position_estimator, &centralData->pressure, &centralData->GPS_data);	
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
8002d270:	ec f8 00 00 	ld.w	r8,r6[0]
8002d274:	70 09       	ld.w	r9,r8[0x0]
8002d276:	30 08       	mov	r8,0
8002d278:	f3 68 00 b8 	st.b	r9[184],r8
	//reset position estimate
	for (i=0; i<3; i++) {
8002d27c:	30 08       	mov	r8,0
8002d27e:	ef 48 ff f8 	st.w	r7[-8],r8
8002d282:	c2 48       	rjmp	8002d2ca <initialisation+0x150>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
8002d284:	ec f8 00 00 	ld.w	r8,r6[0]
8002d288:	70 08       	ld.w	r8,r8[0x0]
8002d28a:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d28e:	f2 c9 fd 94 	sub	r9,r9,-620
8002d292:	30 0a       	mov	r10,0
8002d294:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.vel[i]=0.0;
8002d298:	ec f8 00 00 	ld.w	r8,r6[0]
8002d29c:	70 08       	ld.w	r8,r8[0x0]
8002d29e:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2a2:	f2 c9 fd 91 	sub	r9,r9,-623
8002d2a6:	30 0a       	mov	r10,0
8002d2a8:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		centralData->position_estimator.localPosition.pos[i]=0.0;
8002d2ac:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2b0:	70 08       	ld.w	r8,r8[0x0]
8002d2b2:	ee f9 ff f8 	ld.w	r9,r7[-8]
8002d2b6:	f2 c9 fd 87 	sub	r9,r9,-633
8002d2ba:	30 0a       	mov	r10,0
8002d2bc:	f0 09 09 2a 	st.w	r8[r9<<0x2],r10
		mavlink_protocol_update();			
		delay_ms(5);
	}*/
	centralData->imu1.attitude.calibration_level=OFF;
	//reset position estimate
	for (i=0; i<3; i++) {
8002d2c0:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2c4:	2f f8       	sub	r8,-1
8002d2c6:	ef 48 ff f8 	st.w	r7[-8],r8
8002d2ca:	ee f8 ff f8 	ld.w	r8,r7[-8]
8002d2ce:	58 28       	cp.w	r8,2
8002d2d0:	fe 9a ff da 	brle	8002d284 <initialisation+0x10a>
		// clean acceleration estimate without gravity:
		centralData->position_estimator.vel_bf[i]=0.0;
		centralData->position_estimator.vel[i]=0.0;
		centralData->position_estimator.localPosition.pos[i]=0.0;
	}
	centralData->mav_state = MAV_STATE_STANDBY;
8002d2d4:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2d8:	70 09       	ld.w	r9,r8[0x0]
8002d2da:	30 38       	mov	r8,3
8002d2dc:	f3 68 0d 05 	st.b	r9[3333],r8
	centralData->mav_mode = MAV_MODE_MANUAL_DISARMED;
8002d2e0:	ec f8 00 00 	ld.w	r8,r6[0]
8002d2e4:	70 09       	ld.w	r9,r8[0x0]
8002d2e6:	34 08       	mov	r8,64
8002d2e8:	f3 68 0d 04 	st.b	r9[3332],r8
	init_nav();
8002d2ec:	f0 16 01 c7 	mcall	r6[1820]
	init_waypoint_handler();
8002d2f0:	f0 16 01 64 	mcall	r6[1424]
	//e_init();
	
	init_neighbors();
8002d2f4:	f0 16 01 95 	mcall	r6[1620]
	init_orca();
8002d2f8:	f0 16 02 12 	mcall	r6[2120]
	
	LED_On(LED1);
8002d2fc:	30 2c       	mov	r12,2
8002d2fe:	f0 16 01 4d 	mcall	r6[1332]
}
8002d302:	2f ed       	sub	sp,-8
8002d304:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
8002d308:	80 02       	ld.sh	r2,r0[0x0]
8002d30a:	d0 08       	*unknown*

8002d30c <main>:



void main (void)
{
8002d30c:	eb cd 40 c0 	pushm	r6-r7,lr
8002d310:	1a 97       	mov	r7,sp
8002d312:	48 b6       	lddpc	r6,8002d33c <main+0x30>
8002d314:	1e 26       	rsub	r6,pc
	
	initialisation();
8002d316:	f0 16 01 e2 	mcall	r6[1928]
	
	create_tasks();
8002d31a:	f0 16 02 1e 	mcall	r6[2168]
	
	// turn on simulation mode: 1: simulation mode, 0: reality
	centralData->simulation_mode = 1;
8002d31e:	ec f8 00 00 	ld.w	r8,r6[0]
8002d322:	70 08       	ld.w	r8,r8[0x0]
8002d324:	30 19       	mov	r9,1
8002d326:	f1 49 0d 08 	st.w	r8[3336],r9
	// main loop
	
	while (1==1) {
		
		//run_scheduler_update(get_main_taskset(), FIXED_PRIORITY);
		run_scheduler_update(get_main_taskset(), ROUND_ROBIN);
8002d32a:	f0 16 01 0b 	mcall	r6[1068]
8002d32e:	18 98       	mov	r8,r12
8002d330:	30 0b       	mov	r11,0
8002d332:	10 9c       	mov	r12,r8
8002d334:	f0 16 00 f4 	mcall	r6[976]
		
		//LED_On(LED1);

		
	}		
8002d338:	cf 9b       	rjmp	8002d32a <main+0x1e>
8002d33a:	00 00       	add	r0,r0
8002d33c:	80 02       	ld.sh	r2,r0[0x0]
8002d33e:	d1 98       	*unknown*

8002d340 <cos>:
8002d340:	d4 21       	pushm	r4-r7,lr
8002d342:	20 4d       	sub	sp,16
8002d344:	e0 6e 21 fb 	mov	lr,8699
8002d348:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d34c:	14 98       	mov	r8,r10
8002d34e:	16 99       	mov	r9,r11
8002d350:	16 95       	mov	r5,r11
8002d352:	14 96       	mov	r6,r10
8002d354:	16 97       	mov	r7,r11
8002d356:	16 94       	mov	r4,r11
8002d358:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d35c:	1c 3c       	cp.w	r12,lr
8002d35e:	e0 89 00 05 	brgt	8002d368 <cos+0x28>
8002d362:	30 08       	mov	r8,0
8002d364:	30 09       	mov	r9,0
8002d366:	c1 a8       	rjmp	8002d39a <cos+0x5a>
8002d368:	e0 65 ff ff 	mov	r5,65535
8002d36c:	ea 15 7f ef 	orh	r5,0x7fef
8002d370:	0a 3c       	cp.w	r12,r5
8002d372:	e0 8a 00 05 	brle	8002d37c <cos+0x3c>
8002d376:	e0 a0 17 bd 	rcall	800302f0 <__avr32_f64_sub>
8002d37a:	c2 68       	rjmp	8002d3c6 <cos+0x86>
8002d37c:	1a 9c       	mov	r12,sp
8002d37e:	e0 a0 0b 47 	rcall	8002ea0c <__ieee754_rem_pio2>
8002d382:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d386:	58 1c       	cp.w	r12,1
8002d388:	c0 c0       	breq	8002d3a0 <cos+0x60>
8002d38a:	58 2c       	cp.w	r12,2
8002d38c:	c1 10       	breq	8002d3ae <cos+0x6e>
8002d38e:	fa e8 00 08 	ld.d	r8,sp[8]
8002d392:	fa ea 00 00 	ld.d	r10,sp[0]
8002d396:	58 0c       	cp.w	r12,0
8002d398:	c1 41       	brne	8002d3c0 <cos+0x80>
8002d39a:	e0 a0 0e 37 	rcall	8002f008 <__kernel_cos>
8002d39e:	c1 48       	rjmp	8002d3c6 <cos+0x86>
8002d3a0:	fa e8 00 08 	ld.d	r8,sp[8]
8002d3a4:	fa ea 00 00 	ld.d	r10,sp[0]
8002d3a8:	e0 a0 12 94 	rcall	8002f8d0 <__kernel_sin>
8002d3ac:	c0 78       	rjmp	8002d3ba <cos+0x7a>
8002d3ae:	fa e8 00 08 	ld.d	r8,sp[8]
8002d3b2:	fa ea 00 00 	ld.d	r10,sp[0]
8002d3b6:	e0 a0 0e 29 	rcall	8002f008 <__kernel_cos>
8002d3ba:	ee 1b 80 00 	eorh	r11,0x8000
8002d3be:	c0 48       	rjmp	8002d3c6 <cos+0x86>
8002d3c0:	30 1c       	mov	r12,1
8002d3c2:	e0 a0 12 87 	rcall	8002f8d0 <__kernel_sin>
8002d3c6:	2f cd       	sub	sp,-16
8002d3c8:	d8 22       	popm	r4-r7,pc
8002d3ca:	d7 03       	nop

8002d3cc <sin>:
8002d3cc:	d4 21       	pushm	r4-r7,lr
8002d3ce:	20 4d       	sub	sp,16
8002d3d0:	e0 6e 21 fb 	mov	lr,8699
8002d3d4:	ea 1e 3f e9 	orh	lr,0x3fe9
8002d3d8:	14 98       	mov	r8,r10
8002d3da:	16 99       	mov	r9,r11
8002d3dc:	16 95       	mov	r5,r11
8002d3de:	14 96       	mov	r6,r10
8002d3e0:	16 97       	mov	r7,r11
8002d3e2:	16 94       	mov	r4,r11
8002d3e4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002d3e8:	1c 3c       	cp.w	r12,lr
8002d3ea:	e0 89 00 06 	brgt	8002d3f6 <sin+0x2a>
8002d3ee:	30 0c       	mov	r12,0
8002d3f0:	30 08       	mov	r8,0
8002d3f2:	30 09       	mov	r9,0
8002d3f4:	c1 b8       	rjmp	8002d42a <sin+0x5e>
8002d3f6:	e0 65 ff ff 	mov	r5,65535
8002d3fa:	ea 15 7f ef 	orh	r5,0x7fef
8002d3fe:	0a 3c       	cp.w	r12,r5
8002d400:	e0 8a 00 05 	brle	8002d40a <sin+0x3e>
8002d404:	e0 a0 17 76 	rcall	800302f0 <__avr32_f64_sub>
8002d408:	c2 78       	rjmp	8002d456 <sin+0x8a>
8002d40a:	1a 9c       	mov	r12,sp
8002d40c:	e0 a0 0b 00 	rcall	8002ea0c <__ieee754_rem_pio2>
8002d410:	f9 dc c0 02 	bfextu	r12,r12,0x0,0x2
8002d414:	58 1c       	cp.w	r12,1
8002d416:	c0 d0       	breq	8002d430 <sin+0x64>
8002d418:	58 2c       	cp.w	r12,2
8002d41a:	c1 20       	breq	8002d43e <sin+0x72>
8002d41c:	fa e8 00 08 	ld.d	r8,sp[8]
8002d420:	fa ea 00 00 	ld.d	r10,sp[0]
8002d424:	58 0c       	cp.w	r12,0
8002d426:	c1 41       	brne	8002d44e <sin+0x82>
8002d428:	30 1c       	mov	r12,1
8002d42a:	e0 a0 12 53 	rcall	8002f8d0 <__kernel_sin>
8002d42e:	c1 48       	rjmp	8002d456 <sin+0x8a>
8002d430:	fa e8 00 08 	ld.d	r8,sp[8]
8002d434:	fa ea 00 00 	ld.d	r10,sp[0]
8002d438:	e0 a0 0d e8 	rcall	8002f008 <__kernel_cos>
8002d43c:	c0 d8       	rjmp	8002d456 <sin+0x8a>
8002d43e:	30 1c       	mov	r12,1
8002d440:	fa e8 00 08 	ld.d	r8,sp[8]
8002d444:	fa ea 00 00 	ld.d	r10,sp[0]
8002d448:	e0 a0 12 44 	rcall	8002f8d0 <__kernel_sin>
8002d44c:	c0 38       	rjmp	8002d452 <sin+0x86>
8002d44e:	e0 a0 0d dd 	rcall	8002f008 <__kernel_cos>
8002d452:	ee 1b 80 00 	eorh	r11,0x8000
8002d456:	2f cd       	sub	sp,-16
8002d458:	d8 22       	popm	r4-r7,pc
8002d45a:	d7 03       	nop

8002d45c <asin>:
8002d45c:	d4 31       	pushm	r0-r7,lr
8002d45e:	20 9d       	sub	sp,36
8002d460:	4a 17       	lddpc	r7,8002d4e4 <asin+0x88>
8002d462:	14 94       	mov	r4,r10
8002d464:	16 95       	mov	r5,r11
8002d466:	cf 3d       	rcall	8002d84c <__ieee754_asin>
8002d468:	6e 08       	ld.w	r8,r7[0x0]
8002d46a:	14 92       	mov	r2,r10
8002d46c:	16 93       	mov	r3,r11
8002d46e:	5b f8       	cp.w	r8,-1
8002d470:	c3 50       	breq	8002d4da <asin+0x7e>
8002d472:	08 9a       	mov	r10,r4
8002d474:	0a 9b       	mov	r11,r5
8002d476:	e0 a0 15 37 	rcall	8002fee4 <__isnand>
8002d47a:	18 96       	mov	r6,r12
8002d47c:	c2 f1       	brne	8002d4da <asin+0x7e>
8002d47e:	08 9a       	mov	r10,r4
8002d480:	0a 9b       	mov	r11,r5
8002d482:	e0 a0 14 95 	rcall	8002fdac <fabs>
8002d486:	14 98       	mov	r8,r10
8002d488:	16 99       	mov	r9,r11
8002d48a:	30 0a       	mov	r10,0
8002d48c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d490:	e0 a0 19 56 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d494:	c2 30       	breq	8002d4da <asin+0x7e>
8002d496:	30 18       	mov	r8,1
8002d498:	50 08       	stdsp	sp[0x0],r8
8002d49a:	49 48       	lddpc	r8,8002d4e8 <asin+0x8c>
8002d49c:	50 86       	stdsp	sp[0x20],r6
8002d49e:	50 18       	stdsp	sp[0x4],r8
8002d4a0:	fa e5 00 08 	st.d	sp[8],r4
8002d4a4:	fa e5 00 10 	st.d	sp[16],r4
8002d4a8:	49 1c       	lddpc	r12,8002d4ec <asin+0x90>
8002d4aa:	e0 a0 15 2c 	rcall	8002ff02 <nan>
8002d4ae:	fa eb 00 18 	st.d	sp[24],r10
8002d4b2:	6e 08       	ld.w	r8,r7[0x0]
8002d4b4:	58 28       	cp.w	r8,2
8002d4b6:	c0 50       	breq	8002d4c0 <asin+0x64>
8002d4b8:	1a 9c       	mov	r12,sp
8002d4ba:	e0 a0 15 23 	rcall	8002ff00 <matherr>
8002d4be:	c0 51       	brne	8002d4c8 <asin+0x6c>
8002d4c0:	e0 a0 1d 56 	rcall	80030f6c <__errno>
8002d4c4:	32 18       	mov	r8,33
8002d4c6:	99 08       	st.w	r12[0x0],r8
8002d4c8:	40 88       	lddsp	r8,sp[0x20]
8002d4ca:	58 08       	cp.w	r8,0
8002d4cc:	c0 50       	breq	8002d4d6 <asin+0x7a>
8002d4ce:	e0 a0 1d 4f 	rcall	80030f6c <__errno>
8002d4d2:	40 88       	lddsp	r8,sp[0x20]
8002d4d4:	99 08       	st.w	r12[0x0],r8
8002d4d6:	fa e2 00 18 	ld.d	r2,sp[24]
8002d4da:	04 9a       	mov	r10,r2
8002d4dc:	06 9b       	mov	r11,r3
8002d4de:	2f 7d       	sub	sp,-36
8002d4e0:	d8 32       	popm	r0-r7,pc
8002d4e2:	d7 03       	nop
8002d4e4:	00 00       	add	r0,r0
8002d4e6:	1f e8       	ld.ub	r8,pc[0x6]
8002d4e8:	80 03       	ld.sh	r3,r0[0x0]
8002d4ea:	17 74       	ld.ub	r4,--r11
8002d4ec:	80 03       	ld.sh	r3,r0[0x0]
8002d4ee:	17 78       	ld.ub	r8,--r11

8002d4f0 <atan2>:
8002d4f0:	d4 01       	pushm	lr
8002d4f2:	e0 a0 04 25 	rcall	8002dd3c <__ieee754_atan2>
8002d4f6:	d8 02       	popm	pc

8002d4f8 <pow>:
8002d4f8:	d4 31       	pushm	r0-r7,lr
8002d4fa:	20 cd       	sub	sp,48
8002d4fc:	10 94       	mov	r4,r8
8002d4fe:	14 92       	mov	r2,r10
8002d500:	16 93       	mov	r3,r11
8002d502:	12 95       	mov	r5,r9
8002d504:	e0 a0 05 32 	rcall	8002df68 <__ieee754_pow>
8002d508:	4b f6       	lddpc	r6,8002d604 <pow+0x10c>
8002d50a:	14 90       	mov	r0,r10
8002d50c:	16 91       	mov	r1,r11
8002d50e:	6c 08       	ld.w	r8,r6[0x0]
8002d510:	5b f8       	cp.w	r8,-1
8002d512:	e0 80 01 46 	breq	8002d79e <pow+0x2a6>
8002d516:	08 9a       	mov	r10,r4
8002d518:	0a 9b       	mov	r11,r5
8002d51a:	e0 a0 14 e5 	rcall	8002fee4 <__isnand>
8002d51e:	50 2c       	stdsp	sp[0x8],r12
8002d520:	e0 81 01 3f 	brne	8002d79e <pow+0x2a6>
8002d524:	04 9a       	mov	r10,r2
8002d526:	06 9b       	mov	r11,r3
8002d528:	e0 a0 14 de 	rcall	8002fee4 <__isnand>
8002d52c:	18 97       	mov	r7,r12
8002d52e:	c2 40       	breq	8002d576 <pow+0x7e>
8002d530:	30 08       	mov	r8,0
8002d532:	30 09       	mov	r9,0
8002d534:	08 9a       	mov	r10,r4
8002d536:	0a 9b       	mov	r11,r5
8002d538:	e0 a0 18 bb 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d53c:	e0 80 01 31 	breq	8002d79e <pow+0x2a6>
8002d540:	30 18       	mov	r8,1
8002d542:	50 38       	stdsp	sp[0xc],r8
8002d544:	4b 18       	lddpc	r8,8002d608 <pow+0x110>
8002d546:	40 2c       	lddsp	r12,sp[0x8]
8002d548:	50 48       	stdsp	sp[0x10],r8
8002d54a:	fc 19 3f f0 	movh	r9,0x3ff0
8002d54e:	30 08       	mov	r8,0
8002d550:	fa e3 00 14 	st.d	sp[20],r2
8002d554:	fa e5 00 1c 	st.d	sp[28],r4
8002d558:	50 bc       	stdsp	sp[0x2c],r12
8002d55a:	fa e9 00 24 	st.d	sp[36],r8
8002d55e:	6c 0a       	ld.w	r10,r6[0x0]
8002d560:	5b fa       	cp.w	r10,-1
8002d562:	5f 0b       	sreq	r11
8002d564:	58 2a       	cp.w	r10,2
8002d566:	5f 0a       	sreq	r10
8002d568:	f5 eb 10 0b 	or	r11,r10,r11
8002d56c:	f8 0b 18 00 	cp.b	r11,r12
8002d570:	e0 81 01 0e 	brne	8002d78c <pow+0x294>
8002d574:	c8 08       	rjmp	8002d674 <pow+0x17c>
8002d576:	30 08       	mov	r8,0
8002d578:	30 09       	mov	r9,0
8002d57a:	04 9a       	mov	r10,r2
8002d57c:	06 9b       	mov	r11,r3
8002d57e:	e0 a0 18 98 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d582:	c4 50       	breq	8002d60c <pow+0x114>
8002d584:	30 08       	mov	r8,0
8002d586:	30 09       	mov	r9,0
8002d588:	08 9a       	mov	r10,r4
8002d58a:	0a 9b       	mov	r11,r5
8002d58c:	e0 a0 18 91 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d590:	c1 70       	breq	8002d5be <pow+0xc6>
8002d592:	30 18       	mov	r8,1
8002d594:	50 38       	stdsp	sp[0xc],r8
8002d596:	49 d8       	lddpc	r8,8002d608 <pow+0x110>
8002d598:	30 09       	mov	r9,0
8002d59a:	50 48       	stdsp	sp[0x10],r8
8002d59c:	50 b7       	stdsp	sp[0x2c],r7
8002d59e:	30 08       	mov	r8,0
8002d5a0:	fa e3 00 14 	st.d	sp[20],r2
8002d5a4:	fa e9 00 24 	st.d	sp[36],r8
8002d5a8:	fa e5 00 1c 	st.d	sp[28],r4
8002d5ac:	6c 08       	ld.w	r8,r6[0x0]
8002d5ae:	58 08       	cp.w	r8,0
8002d5b0:	c6 20       	breq	8002d674 <pow+0x17c>
8002d5b2:	30 08       	mov	r8,0
8002d5b4:	fc 19 3f f0 	movh	r9,0x3ff0
8002d5b8:	fa e9 00 24 	st.d	sp[36],r8
8002d5bc:	ce 88       	rjmp	8002d78c <pow+0x294>
8002d5be:	08 9a       	mov	r10,r4
8002d5c0:	0a 9b       	mov	r11,r5
8002d5c2:	e0 a0 13 f9 	rcall	8002fdb4 <finite>
8002d5c6:	e0 80 00 ec 	breq	8002d79e <pow+0x2a6>
8002d5ca:	30 08       	mov	r8,0
8002d5cc:	30 09       	mov	r9,0
8002d5ce:	08 9a       	mov	r10,r4
8002d5d0:	0a 9b       	mov	r11,r5
8002d5d2:	e0 a0 18 b5 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d5d6:	e0 80 00 e4 	breq	8002d79e <pow+0x2a6>
8002d5da:	30 18       	mov	r8,1
8002d5dc:	50 b7       	stdsp	sp[0x2c],r7
8002d5de:	50 38       	stdsp	sp[0xc],r8
8002d5e0:	fa e3 00 14 	st.d	sp[20],r2
8002d5e4:	48 98       	lddpc	r8,8002d608 <pow+0x110>
8002d5e6:	fa e5 00 1c 	st.d	sp[28],r4
8002d5ea:	50 48       	stdsp	sp[0x10],r8
8002d5ec:	6c 08       	ld.w	r8,r6[0x0]
8002d5ee:	58 08       	cp.w	r8,0
8002d5f0:	c3 30       	breq	8002d656 <pow+0x15e>
8002d5f2:	30 0a       	mov	r10,0
8002d5f4:	f0 6b 00 00 	mov	r11,-1048576
8002d5f8:	fa eb 00 24 	st.d	sp[36],r10
8002d5fc:	58 28       	cp.w	r8,2
8002d5fe:	c4 10       	breq	8002d680 <pow+0x188>
8002d600:	c3 a8       	rjmp	8002d674 <pow+0x17c>
8002d602:	d7 03       	nop
8002d604:	00 00       	add	r0,r0
8002d606:	1f e8       	ld.ub	r8,pc[0x6]
8002d608:	80 03       	ld.sh	r3,r0[0x0]
8002d60a:	17 7c       	ld.ub	r12,--r11
8002d60c:	00 9a       	mov	r10,r0
8002d60e:	02 9b       	mov	r11,r1
8002d610:	e0 a0 13 d2 	rcall	8002fdb4 <finite>
8002d614:	18 97       	mov	r7,r12
8002d616:	e0 81 00 8f 	brne	8002d734 <pow+0x23c>
8002d61a:	04 9a       	mov	r10,r2
8002d61c:	06 9b       	mov	r11,r3
8002d61e:	e0 a0 13 cb 	rcall	8002fdb4 <finite>
8002d622:	e0 80 00 89 	breq	8002d734 <pow+0x23c>
8002d626:	08 9a       	mov	r10,r4
8002d628:	0a 9b       	mov	r11,r5
8002d62a:	e0 a0 13 c5 	rcall	8002fdb4 <finite>
8002d62e:	e0 80 00 83 	breq	8002d734 <pow+0x23c>
8002d632:	00 9a       	mov	r10,r0
8002d634:	02 9b       	mov	r11,r1
8002d636:	e0 a0 14 57 	rcall	8002fee4 <__isnand>
8002d63a:	4b e8       	lddpc	r8,8002d730 <pow+0x238>
8002d63c:	58 0c       	cp.w	r12,0
8002d63e:	c2 50       	breq	8002d688 <pow+0x190>
8002d640:	50 48       	stdsp	sp[0x10],r8
8002d642:	50 b7       	stdsp	sp[0x2c],r7
8002d644:	30 18       	mov	r8,1
8002d646:	fa e3 00 14 	st.d	sp[20],r2
8002d64a:	fa e5 00 1c 	st.d	sp[28],r4
8002d64e:	50 38       	stdsp	sp[0xc],r8
8002d650:	6c 07       	ld.w	r7,r6[0x0]
8002d652:	58 07       	cp.w	r7,0
8002d654:	c0 61       	brne	8002d660 <pow+0x168>
8002d656:	30 08       	mov	r8,0
8002d658:	30 09       	mov	r9,0
8002d65a:	fa e9 00 24 	st.d	sp[36],r8
8002d65e:	c0 b8       	rjmp	8002d674 <pow+0x17c>
8002d660:	30 08       	mov	r8,0
8002d662:	30 09       	mov	r9,0
8002d664:	10 9a       	mov	r10,r8
8002d666:	12 9b       	mov	r11,r9
8002d668:	e0 a0 18 9e 	rcall	800307a4 <__avr32_f64_div>
8002d66c:	fa eb 00 24 	st.d	sp[36],r10
8002d670:	58 27       	cp.w	r7,2
8002d672:	c0 70       	breq	8002d680 <pow+0x188>
8002d674:	fa cc ff f4 	sub	r12,sp,-12
8002d678:	e0 a0 14 44 	rcall	8002ff00 <matherr>
8002d67c:	e0 81 00 88 	brne	8002d78c <pow+0x294>
8002d680:	e0 a0 1c 76 	rcall	80030f6c <__errno>
8002d684:	32 18       	mov	r8,33
8002d686:	c8 28       	rjmp	8002d78a <pow+0x292>
8002d688:	50 48       	stdsp	sp[0x10],r8
8002d68a:	50 bc       	stdsp	sp[0x2c],r12
8002d68c:	30 38       	mov	r8,3
8002d68e:	fa e3 00 14 	st.d	sp[20],r2
8002d692:	50 38       	stdsp	sp[0xc],r8
8002d694:	fa e5 00 1c 	st.d	sp[28],r4
8002d698:	6c 08       	ld.w	r8,r6[0x0]
8002d69a:	58 08       	cp.w	r8,0
8002d69c:	c2 81       	brne	8002d6ec <pow+0x1f4>
8002d69e:	fc 18 e0 00 	movh	r8,0xe000
8002d6a2:	e0 69 ff ff 	mov	r9,65535
8002d6a6:	ea 19 47 ef 	orh	r9,0x47ef
8002d6aa:	04 9a       	mov	r10,r2
8002d6ac:	fa e9 00 24 	st.d	sp[36],r8
8002d6b0:	06 9b       	mov	r11,r3
8002d6b2:	30 08       	mov	r8,0
8002d6b4:	30 09       	mov	r9,0
8002d6b6:	e0 a0 18 43 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d6ba:	c5 c0       	breq	8002d772 <pow+0x27a>
8002d6bc:	fc 19 3f e0 	movh	r9,0x3fe0
8002d6c0:	30 08       	mov	r8,0
8002d6c2:	08 9a       	mov	r10,r4
8002d6c4:	0a 9b       	mov	r11,r5
8002d6c6:	e0 a0 15 29 	rcall	80030118 <__avr32_f64_mul>
8002d6ca:	16 99       	mov	r9,r11
8002d6cc:	50 0a       	stdsp	sp[0x0],r10
8002d6ce:	50 19       	stdsp	sp[0x4],r9
8002d6d0:	e0 a0 14 1e 	rcall	8002ff0c <rint>
8002d6d4:	40 19       	lddsp	r9,sp[0x4]
8002d6d6:	40 08       	lddsp	r8,sp[0x0]
8002d6d8:	e0 a0 17 eb 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d6dc:	c4 b1       	brne	8002d772 <pow+0x27a>
8002d6de:	fc 18 e0 00 	movh	r8,0xe000
8002d6e2:	e0 69 ff ff 	mov	r9,65535
8002d6e6:	ea 19 c7 ef 	orh	r9,0xc7ef
8002d6ea:	c4 28       	rjmp	8002d76e <pow+0x276>
8002d6ec:	30 08       	mov	r8,0
8002d6ee:	fc 19 7f f0 	movh	r9,0x7ff0
8002d6f2:	04 9a       	mov	r10,r2
8002d6f4:	fa e9 00 24 	st.d	sp[36],r8
8002d6f8:	06 9b       	mov	r11,r3
8002d6fa:	30 08       	mov	r8,0
8002d6fc:	30 09       	mov	r9,0
8002d6fe:	e0 a0 18 1f 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d702:	c3 80       	breq	8002d772 <pow+0x27a>
8002d704:	fc 19 3f e0 	movh	r9,0x3fe0
8002d708:	30 08       	mov	r8,0
8002d70a:	08 9a       	mov	r10,r4
8002d70c:	0a 9b       	mov	r11,r5
8002d70e:	e0 a0 15 05 	rcall	80030118 <__avr32_f64_mul>
8002d712:	16 99       	mov	r9,r11
8002d714:	50 0a       	stdsp	sp[0x0],r10
8002d716:	50 19       	stdsp	sp[0x4],r9
8002d718:	e0 a0 13 fa 	rcall	8002ff0c <rint>
8002d71c:	40 19       	lddsp	r9,sp[0x4]
8002d71e:	40 08       	lddsp	r8,sp[0x0]
8002d720:	e0 a0 17 c7 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d724:	c2 71       	brne	8002d772 <pow+0x27a>
8002d726:	30 08       	mov	r8,0
8002d728:	f0 69 00 00 	mov	r9,-1048576
8002d72c:	c2 18       	rjmp	8002d76e <pow+0x276>
8002d72e:	d7 03       	nop
8002d730:	80 03       	ld.sh	r3,r0[0x0]
8002d732:	17 7c       	ld.ub	r12,--r11
8002d734:	30 08       	mov	r8,0
8002d736:	30 09       	mov	r9,0
8002d738:	00 9a       	mov	r10,r0
8002d73a:	02 9b       	mov	r11,r1
8002d73c:	e0 a0 17 b9 	rcall	800306ae <__avr32_f64_cmp_eq>
8002d740:	c2 f0       	breq	8002d79e <pow+0x2a6>
8002d742:	04 9a       	mov	r10,r2
8002d744:	06 9b       	mov	r11,r3
8002d746:	e0 a0 13 37 	rcall	8002fdb4 <finite>
8002d74a:	c2 a0       	breq	8002d79e <pow+0x2a6>
8002d74c:	08 9a       	mov	r10,r4
8002d74e:	0a 9b       	mov	r11,r5
8002d750:	e0 a0 13 32 	rcall	8002fdb4 <finite>
8002d754:	c2 50       	breq	8002d79e <pow+0x2a6>
8002d756:	30 48       	mov	r8,4
8002d758:	50 38       	stdsp	sp[0xc],r8
8002d75a:	49 48       	lddpc	r8,8002d7a8 <pow+0x2b0>
8002d75c:	50 48       	stdsp	sp[0x10],r8
8002d75e:	30 08       	mov	r8,0
8002d760:	fa e3 00 14 	st.d	sp[20],r2
8002d764:	50 b8       	stdsp	sp[0x2c],r8
8002d766:	fa e5 00 1c 	st.d	sp[28],r4
8002d76a:	30 08       	mov	r8,0
8002d76c:	30 09       	mov	r9,0
8002d76e:	fa e9 00 24 	st.d	sp[36],r8
8002d772:	48 f8       	lddpc	r8,8002d7ac <pow+0x2b4>
8002d774:	70 08       	ld.w	r8,r8[0x0]
8002d776:	58 28       	cp.w	r8,2
8002d778:	c0 60       	breq	8002d784 <pow+0x28c>
8002d77a:	fa cc ff f4 	sub	r12,sp,-12
8002d77e:	e0 a0 13 c1 	rcall	8002ff00 <matherr>
8002d782:	c0 51       	brne	8002d78c <pow+0x294>
8002d784:	e0 a0 1b f4 	rcall	80030f6c <__errno>
8002d788:	32 28       	mov	r8,34
8002d78a:	99 08       	st.w	r12[0x0],r8
8002d78c:	40 b8       	lddsp	r8,sp[0x2c]
8002d78e:	58 08       	cp.w	r8,0
8002d790:	c0 50       	breq	8002d79a <pow+0x2a2>
8002d792:	e0 a0 1b ed 	rcall	80030f6c <__errno>
8002d796:	40 b8       	lddsp	r8,sp[0x2c]
8002d798:	99 08       	st.w	r12[0x0],r8
8002d79a:	fa e0 00 24 	ld.d	r0,sp[36]
8002d79e:	00 9a       	mov	r10,r0
8002d7a0:	02 9b       	mov	r11,r1
8002d7a2:	2f 4d       	sub	sp,-48
8002d7a4:	d8 32       	popm	r0-r7,pc
8002d7a6:	d7 03       	nop
8002d7a8:	80 03       	ld.sh	r3,r0[0x0]
8002d7aa:	17 7c       	ld.ub	r12,--r11
8002d7ac:	00 00       	add	r0,r0
8002d7ae:	1f e8       	ld.ub	r8,pc[0x6]

8002d7b0 <sqrt>:
8002d7b0:	d4 31       	pushm	r0-r7,lr
8002d7b2:	20 9d       	sub	sp,36
8002d7b4:	4a 47       	lddpc	r7,8002d844 <sqrt+0x94>
8002d7b6:	14 94       	mov	r4,r10
8002d7b8:	16 95       	mov	r5,r11
8002d7ba:	e0 a0 0b 61 	rcall	8002ee7c <__ieee754_sqrt>
8002d7be:	6e 08       	ld.w	r8,r7[0x0]
8002d7c0:	14 92       	mov	r2,r10
8002d7c2:	16 93       	mov	r3,r11
8002d7c4:	5b f8       	cp.w	r8,-1
8002d7c6:	c3 a0       	breq	8002d83a <sqrt+0x8a>
8002d7c8:	08 9a       	mov	r10,r4
8002d7ca:	0a 9b       	mov	r11,r5
8002d7cc:	e0 a0 13 8c 	rcall	8002fee4 <__isnand>
8002d7d0:	18 96       	mov	r6,r12
8002d7d2:	c3 41       	brne	8002d83a <sqrt+0x8a>
8002d7d4:	30 08       	mov	r8,0
8002d7d6:	30 09       	mov	r9,0
8002d7d8:	08 9a       	mov	r10,r4
8002d7da:	0a 9b       	mov	r11,r5
8002d7dc:	e0 a0 17 b0 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d7e0:	c2 d0       	breq	8002d83a <sqrt+0x8a>
8002d7e2:	30 18       	mov	r8,1
8002d7e4:	50 86       	stdsp	sp[0x20],r6
8002d7e6:	50 08       	stdsp	sp[0x0],r8
8002d7e8:	fa e5 00 08 	st.d	sp[8],r4
8002d7ec:	49 78       	lddpc	r8,8002d848 <sqrt+0x98>
8002d7ee:	fa e5 00 10 	st.d	sp[16],r4
8002d7f2:	50 18       	stdsp	sp[0x4],r8
8002d7f4:	6e 07       	ld.w	r7,r7[0x0]
8002d7f6:	58 07       	cp.w	r7,0
8002d7f8:	c0 61       	brne	8002d804 <sqrt+0x54>
8002d7fa:	30 08       	mov	r8,0
8002d7fc:	30 09       	mov	r9,0
8002d7fe:	fa e9 00 18 	st.d	sp[24],r8
8002d802:	c0 b8       	rjmp	8002d818 <sqrt+0x68>
8002d804:	30 08       	mov	r8,0
8002d806:	30 09       	mov	r9,0
8002d808:	10 9a       	mov	r10,r8
8002d80a:	12 9b       	mov	r11,r9
8002d80c:	e0 a0 17 cc 	rcall	800307a4 <__avr32_f64_div>
8002d810:	fa eb 00 18 	st.d	sp[24],r10
8002d814:	58 27       	cp.w	r7,2
8002d816:	c0 50       	breq	8002d820 <sqrt+0x70>
8002d818:	1a 9c       	mov	r12,sp
8002d81a:	e0 a0 13 73 	rcall	8002ff00 <matherr>
8002d81e:	c0 51       	brne	8002d828 <sqrt+0x78>
8002d820:	e0 a0 1b a6 	rcall	80030f6c <__errno>
8002d824:	32 18       	mov	r8,33
8002d826:	99 08       	st.w	r12[0x0],r8
8002d828:	40 88       	lddsp	r8,sp[0x20]
8002d82a:	58 08       	cp.w	r8,0
8002d82c:	c0 50       	breq	8002d836 <sqrt+0x86>
8002d82e:	e0 a0 1b 9f 	rcall	80030f6c <__errno>
8002d832:	40 88       	lddsp	r8,sp[0x20]
8002d834:	99 08       	st.w	r12[0x0],r8
8002d836:	fa e2 00 18 	ld.d	r2,sp[24]
8002d83a:	04 9a       	mov	r10,r2
8002d83c:	06 9b       	mov	r11,r3
8002d83e:	2f 7d       	sub	sp,-36
8002d840:	d8 32       	popm	r0-r7,pc
8002d842:	d7 03       	nop
8002d844:	00 00       	add	r0,r0
8002d846:	1f e8       	ld.ub	r8,pc[0x6]
8002d848:	80 03       	ld.sh	r3,r0[0x0]
8002d84a:	17 80       	ld.ub	r0,r11[0x0]

8002d84c <__ieee754_asin>:
8002d84c:	d4 31       	pushm	r0-r7,lr
8002d84e:	20 5d       	sub	sp,20
8002d850:	50 0b       	stdsp	sp[0x0],r11
8002d852:	16 96       	mov	r6,r11
8002d854:	14 97       	mov	r7,r10
8002d856:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002d85a:	e0 68 ff ff 	mov	r8,65535
8002d85e:	ea 18 3f ef 	orh	r8,0x3fef
8002d862:	10 35       	cp.w	r5,r8
8002d864:	e0 8a 00 32 	brle	8002d8c8 <__ieee754_asin+0x7c>
8002d868:	fc 1a c0 10 	movh	r10,0xc010
8002d86c:	14 05       	add	r5,r10
8002d86e:	0e 45       	or	r5,r7
8002d870:	c1 f1       	brne	8002d8ae <__ieee754_asin+0x62>
8002d872:	e0 68 2d 18 	mov	r8,11544
8002d876:	ea 18 54 44 	orh	r8,0x5444
8002d87a:	e0 69 21 fb 	mov	r9,8699
8002d87e:	ea 19 3f f9 	orh	r9,0x3ff9
8002d882:	0e 9a       	mov	r10,r7
8002d884:	e0 a0 14 4a 	rcall	80030118 <__avr32_f64_mul>
8002d888:	e0 68 5c 07 	mov	r8,23559
8002d88c:	ea 18 33 14 	orh	r8,0x3314
8002d890:	14 94       	mov	r4,r10
8002d892:	16 95       	mov	r5,r11
8002d894:	e0 69 a6 26 	mov	r9,42534
8002d898:	ea 19 3c 91 	orh	r9,0x3c91
8002d89c:	0c 9b       	mov	r11,r6
8002d89e:	0e 9a       	mov	r10,r7
8002d8a0:	e0 a0 14 3c 	rcall	80030118 <__avr32_f64_mul>
8002d8a4:	14 98       	mov	r8,r10
8002d8a6:	16 99       	mov	r9,r11
8002d8a8:	08 9a       	mov	r10,r4
8002d8aa:	0a 9b       	mov	r11,r5
8002d8ac:	ce 48       	rjmp	8002da74 <__ieee754_asin+0x228>
8002d8ae:	0c 99       	mov	r9,r6
8002d8b0:	0e 98       	mov	r8,r7
8002d8b2:	0e 9a       	mov	r10,r7
8002d8b4:	e0 a0 15 1e 	rcall	800302f0 <__avr32_f64_sub>
8002d8b8:	14 98       	mov	r8,r10
8002d8ba:	16 99       	mov	r9,r11
8002d8bc:	e0 a0 17 74 	rcall	800307a4 <__avr32_f64_div>
8002d8c0:	16 96       	mov	r6,r11
8002d8c2:	14 97       	mov	r7,r10
8002d8c4:	e0 8f 02 37 	bral	8002dd32 <__ieee754_asin+0x4e6>
8002d8c8:	e0 68 ff ff 	mov	r8,65535
8002d8cc:	ea 18 3f df 	orh	r8,0x3fdf
8002d8d0:	10 35       	cp.w	r5,r8
8002d8d2:	e0 89 00 d4 	brgt	8002da7a <__ieee754_asin+0x22e>
8002d8d6:	e0 68 ff ff 	mov	r8,65535
8002d8da:	ea 18 3e 3f 	orh	r8,0x3e3f
8002d8de:	10 35       	cp.w	r5,r8
8002d8e0:	e0 89 00 17 	brgt	8002d90e <__ieee754_asin+0xc2>
8002d8e4:	e0 68 75 9c 	mov	r8,30108
8002d8e8:	ea 18 88 00 	orh	r8,0x8800
8002d8ec:	e0 69 e4 3c 	mov	r9,58428
8002d8f0:	ea 19 7e 37 	orh	r9,0x7e37
8002d8f4:	e0 a0 15 cc 	rcall	8003048c <__avr32_f64_add>
8002d8f8:	14 98       	mov	r8,r10
8002d8fa:	16 99       	mov	r9,r11
8002d8fc:	30 0a       	mov	r10,0
8002d8fe:	fc 1b 3f f0 	movh	r11,0x3ff0
8002d902:	e0 a0 17 1d 	rcall	8003073c <__avr32_f64_cmp_lt>
8002d906:	e0 80 00 ba 	breq	8002da7a <__ieee754_asin+0x22e>
8002d90a:	e0 8f 02 14 	bral	8002dd32 <__ieee754_asin+0x4e6>
8002d90e:	16 99       	mov	r9,r11
8002d910:	14 98       	mov	r8,r10
8002d912:	e0 a0 14 03 	rcall	80030118 <__avr32_f64_mul>
8002d916:	e0 68 f7 09 	mov	r8,63241
8002d91a:	ea 18 0d fd 	orh	r8,0xdfd
8002d91e:	14 94       	mov	r4,r10
8002d920:	16 95       	mov	r5,r11
8002d922:	e0 69 3d e1 	mov	r9,15841
8002d926:	ea 19 3f 02 	orh	r9,0x3f02
8002d92a:	e0 a0 13 f7 	rcall	80030118 <__avr32_f64_mul>
8002d92e:	e0 68 b2 88 	mov	r8,45704
8002d932:	ea 18 75 01 	orh	r8,0x7501
8002d936:	e0 69 ef e0 	mov	r9,61408
8002d93a:	ea 19 3f 49 	orh	r9,0x3f49
8002d93e:	e0 a0 15 a7 	rcall	8003048c <__avr32_f64_add>
8002d942:	14 98       	mov	r8,r10
8002d944:	16 99       	mov	r9,r11
8002d946:	08 9a       	mov	r10,r4
8002d948:	0a 9b       	mov	r11,r5
8002d94a:	e0 a0 13 e7 	rcall	80030118 <__avr32_f64_mul>
8002d94e:	e0 68 8f 3b 	mov	r8,36667
8002d952:	ea 18 b5 68 	orh	r8,0xb568
8002d956:	e0 69 82 28 	mov	r9,33320
8002d95a:	ea 19 3f a4 	orh	r9,0x3fa4
8002d95e:	e0 a0 14 c9 	rcall	800302f0 <__avr32_f64_sub>
8002d962:	14 98       	mov	r8,r10
8002d964:	16 99       	mov	r9,r11
8002d966:	08 9a       	mov	r10,r4
8002d968:	0a 9b       	mov	r11,r5
8002d96a:	e0 a0 13 d7 	rcall	80030118 <__avr32_f64_mul>
8002d96e:	e0 68 44 55 	mov	r8,17493
8002d972:	ea 18 0e 88 	orh	r8,0xe88
8002d976:	e0 69 c1 55 	mov	r9,49493
8002d97a:	ea 19 3f c9 	orh	r9,0x3fc9
8002d97e:	e0 a0 15 87 	rcall	8003048c <__avr32_f64_add>
8002d982:	14 98       	mov	r8,r10
8002d984:	16 99       	mov	r9,r11
8002d986:	08 9a       	mov	r10,r4
8002d988:	0a 9b       	mov	r11,r5
8002d98a:	e0 a0 13 c7 	rcall	80030118 <__avr32_f64_mul>
8002d98e:	e0 68 6f 7d 	mov	r8,28541
8002d992:	ea 18 03 eb 	orh	r8,0x3eb
8002d996:	e0 69 d6 12 	mov	r9,54802
8002d99a:	ea 19 3f d4 	orh	r9,0x3fd4
8002d99e:	e0 a0 14 a9 	rcall	800302f0 <__avr32_f64_sub>
8002d9a2:	14 98       	mov	r8,r10
8002d9a4:	16 99       	mov	r9,r11
8002d9a6:	08 9a       	mov	r10,r4
8002d9a8:	0a 9b       	mov	r11,r5
8002d9aa:	e0 a0 13 b7 	rcall	80030118 <__avr32_f64_mul>
8002d9ae:	e0 68 55 55 	mov	r8,21845
8002d9b2:	ea 18 55 55 	orh	r8,0x5555
8002d9b6:	e0 69 55 55 	mov	r9,21845
8002d9ba:	ea 19 3f c5 	orh	r9,0x3fc5
8002d9be:	e0 a0 15 67 	rcall	8003048c <__avr32_f64_add>
8002d9c2:	14 98       	mov	r8,r10
8002d9c4:	16 99       	mov	r9,r11
8002d9c6:	08 9a       	mov	r10,r4
8002d9c8:	0a 9b       	mov	r11,r5
8002d9ca:	e0 a0 13 a7 	rcall	80030118 <__avr32_f64_mul>
8002d9ce:	e0 68 92 82 	mov	r8,37506
8002d9d2:	ea 18 b1 2e 	orh	r8,0xb12e
8002d9d6:	14 92       	mov	r2,r10
8002d9d8:	16 93       	mov	r3,r11
8002d9da:	e0 69 b8 c5 	mov	r9,47301
8002d9de:	ea 19 3f b3 	orh	r9,0x3fb3
8002d9e2:	08 9a       	mov	r10,r4
8002d9e4:	0a 9b       	mov	r11,r5
8002d9e6:	e0 a0 13 99 	rcall	80030118 <__avr32_f64_mul>
8002d9ea:	e0 68 01 59 	mov	r8,345
8002d9ee:	ea 18 1b 8d 	orh	r8,0x1b8d
8002d9f2:	e0 69 06 6c 	mov	r9,1644
8002d9f6:	ea 19 3f e6 	orh	r9,0x3fe6
8002d9fa:	e0 a0 14 7b 	rcall	800302f0 <__avr32_f64_sub>
8002d9fe:	14 98       	mov	r8,r10
8002da00:	16 99       	mov	r9,r11
8002da02:	08 9a       	mov	r10,r4
8002da04:	0a 9b       	mov	r11,r5
8002da06:	e0 a0 13 89 	rcall	80030118 <__avr32_f64_mul>
8002da0a:	e0 68 8a c8 	mov	r8,35528
8002da0e:	ea 18 9c 59 	orh	r8,0x9c59
8002da12:	e0 69 2a e5 	mov	r9,10981
8002da16:	ea 19 40 00 	orh	r9,0x4000
8002da1a:	e0 a0 15 39 	rcall	8003048c <__avr32_f64_add>
8002da1e:	14 98       	mov	r8,r10
8002da20:	16 99       	mov	r9,r11
8002da22:	08 9a       	mov	r10,r4
8002da24:	0a 9b       	mov	r11,r5
8002da26:	e0 a0 13 79 	rcall	80030118 <__avr32_f64_mul>
8002da2a:	e0 68 2d 4b 	mov	r8,11595
8002da2e:	ea 18 1c 8a 	orh	r8,0x1c8a
8002da32:	e0 69 3a 27 	mov	r9,14887
8002da36:	ea 19 40 03 	orh	r9,0x4003
8002da3a:	e0 a0 14 5b 	rcall	800302f0 <__avr32_f64_sub>
8002da3e:	14 98       	mov	r8,r10
8002da40:	16 99       	mov	r9,r11
8002da42:	08 9a       	mov	r10,r4
8002da44:	0a 9b       	mov	r11,r5
8002da46:	e0 a0 13 69 	rcall	80030118 <__avr32_f64_mul>
8002da4a:	30 08       	mov	r8,0
8002da4c:	fc 19 3f f0 	movh	r9,0x3ff0
8002da50:	e0 a0 15 1e 	rcall	8003048c <__avr32_f64_add>
8002da54:	14 98       	mov	r8,r10
8002da56:	16 99       	mov	r9,r11
8002da58:	04 9a       	mov	r10,r2
8002da5a:	06 9b       	mov	r11,r3
8002da5c:	e0 a0 16 a4 	rcall	800307a4 <__avr32_f64_div>
8002da60:	14 98       	mov	r8,r10
8002da62:	16 99       	mov	r9,r11
8002da64:	0e 9a       	mov	r10,r7
8002da66:	0c 9b       	mov	r11,r6
8002da68:	e0 a0 13 58 	rcall	80030118 <__avr32_f64_mul>
8002da6c:	14 98       	mov	r8,r10
8002da6e:	16 99       	mov	r9,r11
8002da70:	0e 9a       	mov	r10,r7
8002da72:	0c 9b       	mov	r11,r6
8002da74:	e0 a0 15 0c 	rcall	8003048c <__avr32_f64_add>
8002da78:	c2 4b       	rjmp	8002d8c0 <__ieee754_asin+0x74>
8002da7a:	0c 9b       	mov	r11,r6
8002da7c:	0e 9a       	mov	r10,r7
8002da7e:	e0 a0 11 97 	rcall	8002fdac <fabs>
8002da82:	14 98       	mov	r8,r10
8002da84:	16 99       	mov	r9,r11
8002da86:	30 0a       	mov	r10,0
8002da88:	fc 1b 3f f0 	movh	r11,0x3ff0
8002da8c:	e0 a0 14 32 	rcall	800302f0 <__avr32_f64_sub>
8002da90:	30 08       	mov	r8,0
8002da92:	fc 19 3f e0 	movh	r9,0x3fe0
8002da96:	e0 a0 13 41 	rcall	80030118 <__avr32_f64_mul>
8002da9a:	e0 68 f7 09 	mov	r8,63241
8002da9e:	ea 18 0d fd 	orh	r8,0xdfd
8002daa2:	16 97       	mov	r7,r11
8002daa4:	14 96       	mov	r6,r10
8002daa6:	e0 69 3d e1 	mov	r9,15841
8002daaa:	ea 19 3f 02 	orh	r9,0x3f02
8002daae:	e0 a0 13 35 	rcall	80030118 <__avr32_f64_mul>
8002dab2:	e0 68 b2 88 	mov	r8,45704
8002dab6:	ea 18 75 01 	orh	r8,0x7501
8002daba:	e0 69 ef e0 	mov	r9,61408
8002dabe:	ea 19 3f 49 	orh	r9,0x3f49
8002dac2:	e0 a0 14 e5 	rcall	8003048c <__avr32_f64_add>
8002dac6:	14 98       	mov	r8,r10
8002dac8:	16 99       	mov	r9,r11
8002daca:	0c 9a       	mov	r10,r6
8002dacc:	0e 9b       	mov	r11,r7
8002dace:	e0 a0 13 25 	rcall	80030118 <__avr32_f64_mul>
8002dad2:	e0 68 8f 3b 	mov	r8,36667
8002dad6:	ea 18 b5 68 	orh	r8,0xb568
8002dada:	e0 69 82 28 	mov	r9,33320
8002dade:	ea 19 3f a4 	orh	r9,0x3fa4
8002dae2:	e0 a0 14 07 	rcall	800302f0 <__avr32_f64_sub>
8002dae6:	14 98       	mov	r8,r10
8002dae8:	16 99       	mov	r9,r11
8002daea:	0c 9a       	mov	r10,r6
8002daec:	0e 9b       	mov	r11,r7
8002daee:	e0 a0 13 15 	rcall	80030118 <__avr32_f64_mul>
8002daf2:	e0 68 44 55 	mov	r8,17493
8002daf6:	ea 18 0e 88 	orh	r8,0xe88
8002dafa:	e0 69 c1 55 	mov	r9,49493
8002dafe:	ea 19 3f c9 	orh	r9,0x3fc9
8002db02:	e0 a0 14 c5 	rcall	8003048c <__avr32_f64_add>
8002db06:	14 98       	mov	r8,r10
8002db08:	16 99       	mov	r9,r11
8002db0a:	0c 9a       	mov	r10,r6
8002db0c:	0e 9b       	mov	r11,r7
8002db0e:	e0 a0 13 05 	rcall	80030118 <__avr32_f64_mul>
8002db12:	e0 68 6f 7d 	mov	r8,28541
8002db16:	ea 18 03 eb 	orh	r8,0x3eb
8002db1a:	e0 69 d6 12 	mov	r9,54802
8002db1e:	ea 19 3f d4 	orh	r9,0x3fd4
8002db22:	e0 a0 13 e7 	rcall	800302f0 <__avr32_f64_sub>
8002db26:	14 98       	mov	r8,r10
8002db28:	16 99       	mov	r9,r11
8002db2a:	0c 9a       	mov	r10,r6
8002db2c:	0e 9b       	mov	r11,r7
8002db2e:	e0 a0 12 f5 	rcall	80030118 <__avr32_f64_mul>
8002db32:	e0 68 55 55 	mov	r8,21845
8002db36:	ea 18 55 55 	orh	r8,0x5555
8002db3a:	e0 69 55 55 	mov	r9,21845
8002db3e:	ea 19 3f c5 	orh	r9,0x3fc5
8002db42:	e0 a0 14 a5 	rcall	8003048c <__avr32_f64_add>
8002db46:	14 98       	mov	r8,r10
8002db48:	16 99       	mov	r9,r11
8002db4a:	0c 9a       	mov	r10,r6
8002db4c:	0e 9b       	mov	r11,r7
8002db4e:	e0 a0 12 e5 	rcall	80030118 <__avr32_f64_mul>
8002db52:	e0 68 92 82 	mov	r8,37506
8002db56:	ea 18 b1 2e 	orh	r8,0xb12e
8002db5a:	e0 69 b8 c5 	mov	r9,47301
8002db5e:	ea 19 3f b3 	orh	r9,0x3fb3
8002db62:	14 90       	mov	r0,r10
8002db64:	16 91       	mov	r1,r11
8002db66:	0c 9a       	mov	r10,r6
8002db68:	0e 9b       	mov	r11,r7
8002db6a:	e0 a0 12 d7 	rcall	80030118 <__avr32_f64_mul>
8002db6e:	e0 68 01 59 	mov	r8,345
8002db72:	ea 18 1b 8d 	orh	r8,0x1b8d
8002db76:	e0 69 06 6c 	mov	r9,1644
8002db7a:	ea 19 3f e6 	orh	r9,0x3fe6
8002db7e:	e0 a0 13 b9 	rcall	800302f0 <__avr32_f64_sub>
8002db82:	14 98       	mov	r8,r10
8002db84:	16 99       	mov	r9,r11
8002db86:	0c 9a       	mov	r10,r6
8002db88:	0e 9b       	mov	r11,r7
8002db8a:	e0 a0 12 c7 	rcall	80030118 <__avr32_f64_mul>
8002db8e:	e0 68 8a c8 	mov	r8,35528
8002db92:	ea 18 9c 59 	orh	r8,0x9c59
8002db96:	e0 69 2a e5 	mov	r9,10981
8002db9a:	ea 19 40 00 	orh	r9,0x4000
8002db9e:	e0 a0 14 77 	rcall	8003048c <__avr32_f64_add>
8002dba2:	14 98       	mov	r8,r10
8002dba4:	16 99       	mov	r9,r11
8002dba6:	0c 9a       	mov	r10,r6
8002dba8:	0e 9b       	mov	r11,r7
8002dbaa:	e0 a0 12 b7 	rcall	80030118 <__avr32_f64_mul>
8002dbae:	e0 68 2d 4b 	mov	r8,11595
8002dbb2:	ea 18 1c 8a 	orh	r8,0x1c8a
8002dbb6:	e0 69 3a 27 	mov	r9,14887
8002dbba:	ea 19 40 03 	orh	r9,0x4003
8002dbbe:	e0 a0 13 99 	rcall	800302f0 <__avr32_f64_sub>
8002dbc2:	14 98       	mov	r8,r10
8002dbc4:	16 99       	mov	r9,r11
8002dbc6:	0c 9a       	mov	r10,r6
8002dbc8:	0e 9b       	mov	r11,r7
8002dbca:	e0 a0 12 a7 	rcall	80030118 <__avr32_f64_mul>
8002dbce:	30 08       	mov	r8,0
8002dbd0:	fc 19 3f f0 	movh	r9,0x3ff0
8002dbd4:	e0 a0 14 5c 	rcall	8003048c <__avr32_f64_add>
8002dbd8:	fa eb 00 04 	st.d	sp[4],r10
8002dbdc:	0c 9a       	mov	r10,r6
8002dbde:	0e 9b       	mov	r11,r7
8002dbe0:	e0 a0 09 4e 	rcall	8002ee7c <__ieee754_sqrt>
8002dbe4:	e0 68 33 32 	mov	r8,13106
8002dbe8:	ea 18 3f ef 	orh	r8,0x3fef
8002dbec:	14 92       	mov	r2,r10
8002dbee:	16 93       	mov	r3,r11
8002dbf0:	10 35       	cp.w	r5,r8
8002dbf2:	e0 8a 00 2d 	brle	8002dc4c <__ieee754_asin+0x400>
8002dbf6:	fa e8 00 04 	ld.d	r8,sp[4]
8002dbfa:	00 9a       	mov	r10,r0
8002dbfc:	02 9b       	mov	r11,r1
8002dbfe:	e0 a0 15 d3 	rcall	800307a4 <__avr32_f64_div>
8002dc02:	14 98       	mov	r8,r10
8002dc04:	16 99       	mov	r9,r11
8002dc06:	04 9a       	mov	r10,r2
8002dc08:	06 9b       	mov	r11,r3
8002dc0a:	e0 a0 12 87 	rcall	80030118 <__avr32_f64_mul>
8002dc0e:	14 98       	mov	r8,r10
8002dc10:	16 99       	mov	r9,r11
8002dc12:	04 9a       	mov	r10,r2
8002dc14:	06 9b       	mov	r11,r3
8002dc16:	e0 a0 14 3b 	rcall	8003048c <__avr32_f64_add>
8002dc1a:	14 98       	mov	r8,r10
8002dc1c:	16 99       	mov	r9,r11
8002dc1e:	e0 a0 14 37 	rcall	8003048c <__avr32_f64_add>
8002dc22:	e0 68 5c 07 	mov	r8,23559
8002dc26:	ea 18 33 14 	orh	r8,0x3314
8002dc2a:	e0 69 a6 26 	mov	r9,42534
8002dc2e:	ea 19 3c 91 	orh	r9,0x3c91
8002dc32:	e0 a0 13 5f 	rcall	800302f0 <__avr32_f64_sub>
8002dc36:	14 98       	mov	r8,r10
8002dc38:	16 99       	mov	r9,r11
8002dc3a:	e0 6a 2d 18 	mov	r10,11544
8002dc3e:	ea 1a 54 44 	orh	r10,0x5444
8002dc42:	e0 6b 21 fb 	mov	r11,8699
8002dc46:	ea 1b 3f f9 	orh	r11,0x3ff9
8002dc4a:	c6 98       	rjmp	8002dd1c <__ieee754_asin+0x4d0>
8002dc4c:	14 98       	mov	r8,r10
8002dc4e:	06 99       	mov	r9,r3
8002dc50:	e0 a0 14 1e 	rcall	8003048c <__avr32_f64_add>
8002dc54:	fa e8 00 04 	ld.d	r8,sp[4]
8002dc58:	fa eb 00 0c 	st.d	sp[12],r10
8002dc5c:	00 9a       	mov	r10,r0
8002dc5e:	02 9b       	mov	r11,r1
8002dc60:	e0 a0 15 a2 	rcall	800307a4 <__avr32_f64_div>
8002dc64:	14 98       	mov	r8,r10
8002dc66:	16 99       	mov	r9,r11
8002dc68:	fa ea 00 0c 	ld.d	r10,sp[12]
8002dc6c:	e0 a0 12 56 	rcall	80030118 <__avr32_f64_mul>
8002dc70:	30 04       	mov	r4,0
8002dc72:	14 90       	mov	r0,r10
8002dc74:	16 91       	mov	r1,r11
8002dc76:	08 98       	mov	r8,r4
8002dc78:	06 99       	mov	r9,r3
8002dc7a:	08 9a       	mov	r10,r4
8002dc7c:	06 9b       	mov	r11,r3
8002dc7e:	e0 a0 12 4d 	rcall	80030118 <__avr32_f64_mul>
8002dc82:	14 98       	mov	r8,r10
8002dc84:	16 99       	mov	r9,r11
8002dc86:	0c 9a       	mov	r10,r6
8002dc88:	0e 9b       	mov	r11,r7
8002dc8a:	e0 a0 13 33 	rcall	800302f0 <__avr32_f64_sub>
8002dc8e:	08 98       	mov	r8,r4
8002dc90:	16 97       	mov	r7,r11
8002dc92:	14 96       	mov	r6,r10
8002dc94:	06 99       	mov	r9,r3
8002dc96:	04 9a       	mov	r10,r2
8002dc98:	06 9b       	mov	r11,r3
8002dc9a:	e0 a0 13 f9 	rcall	8003048c <__avr32_f64_add>
8002dc9e:	14 98       	mov	r8,r10
8002dca0:	16 99       	mov	r9,r11
8002dca2:	0c 9a       	mov	r10,r6
8002dca4:	0e 9b       	mov	r11,r7
8002dca6:	e0 a0 15 7f 	rcall	800307a4 <__avr32_f64_div>
8002dcaa:	30 08       	mov	r8,0
8002dcac:	fc 19 c0 00 	movh	r9,0xc000
8002dcb0:	e0 a0 12 34 	rcall	80030118 <__avr32_f64_mul>
8002dcb4:	e0 68 5c 07 	mov	r8,23559
8002dcb8:	ea 18 33 14 	orh	r8,0x3314
8002dcbc:	e0 69 a6 26 	mov	r9,42534
8002dcc0:	ea 19 3c 91 	orh	r9,0x3c91
8002dcc4:	e0 a0 13 e4 	rcall	8003048c <__avr32_f64_add>
8002dcc8:	14 98       	mov	r8,r10
8002dcca:	16 99       	mov	r9,r11
8002dccc:	00 9a       	mov	r10,r0
8002dcce:	02 9b       	mov	r11,r1
8002dcd0:	e0 a0 13 10 	rcall	800302f0 <__avr32_f64_sub>
8002dcd4:	30 08       	mov	r8,0
8002dcd6:	16 97       	mov	r7,r11
8002dcd8:	14 96       	mov	r6,r10
8002dcda:	fc 19 c0 00 	movh	r9,0xc000
8002dcde:	08 9a       	mov	r10,r4
8002dce0:	06 9b       	mov	r11,r3
8002dce2:	e0 a0 12 1b 	rcall	80030118 <__avr32_f64_mul>
8002dce6:	e0 68 2d 18 	mov	r8,11544
8002dcea:	ea 18 54 44 	orh	r8,0x5444
8002dcee:	e0 69 21 fb 	mov	r9,8699
8002dcf2:	ea 19 3f e9 	orh	r9,0x3fe9
8002dcf6:	e0 a0 13 cb 	rcall	8003048c <__avr32_f64_add>
8002dcfa:	14 98       	mov	r8,r10
8002dcfc:	16 99       	mov	r9,r11
8002dcfe:	0c 9a       	mov	r10,r6
8002dd00:	0e 9b       	mov	r11,r7
8002dd02:	e0 a0 12 f7 	rcall	800302f0 <__avr32_f64_sub>
8002dd06:	06 95       	mov	r5,r3
8002dd08:	14 98       	mov	r8,r10
8002dd0a:	16 99       	mov	r9,r11
8002dd0c:	e0 6a 2d 18 	mov	r10,11544
8002dd10:	ea 1a 54 44 	orh	r10,0x5444
8002dd14:	e0 6b 21 fb 	mov	r11,8699
8002dd18:	ea 1b 3f e9 	orh	r11,0x3fe9
8002dd1c:	e0 a0 12 ea 	rcall	800302f0 <__avr32_f64_sub>
8002dd20:	40 08       	lddsp	r8,sp[0x0]
8002dd22:	16 96       	mov	r6,r11
8002dd24:	14 97       	mov	r7,r10
8002dd26:	ee 16 80 00 	eorh	r6,0x8000
8002dd2a:	58 08       	cp.w	r8,0
8002dd2c:	e0 8a 00 03 	brle	8002dd32 <__ieee754_asin+0x4e6>
8002dd30:	16 96       	mov	r6,r11
8002dd32:	0c 9b       	mov	r11,r6
8002dd34:	0e 9a       	mov	r10,r7
8002dd36:	2f bd       	sub	sp,-20
8002dd38:	d8 32       	popm	r0-r7,pc
8002dd3a:	d7 03       	nop

8002dd3c <__ieee754_atan2>:
8002dd3c:	d4 31       	pushm	r0-r7,lr
8002dd3e:	20 2d       	sub	sp,8
8002dd40:	50 0b       	stdsp	sp[0x0],r11
8002dd42:	10 96       	mov	r6,r8
8002dd44:	10 92       	mov	r2,r8
8002dd46:	fd d9 c0 1f 	bfextu	lr,r9,0x0,0x1f
8002dd4a:	5c 38       	neg	r8
8002dd4c:	14 94       	mov	r4,r10
8002dd4e:	0c 48       	or	r8,r6
8002dd50:	16 95       	mov	r5,r11
8002dd52:	12 93       	mov	r3,r9
8002dd54:	14 90       	mov	r0,r10
8002dd56:	16 91       	mov	r1,r11
8002dd58:	12 9c       	mov	r12,r9
8002dd5a:	fd e8 13 f8 	or	r8,lr,r8>>0x1f
8002dd5e:	fc 17 7f f0 	movh	r7,0x7ff0
8002dd62:	0e 38       	cp.w	r8,r7
8002dd64:	e0 8b 00 0e 	brhi	8002dd80 <__ieee754_atan2+0x44>
8002dd68:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002dd6c:	f4 07 11 00 	rsub	r7,r10,0
8002dd70:	fc 10 7f f0 	movh	r0,0x7ff0
8002dd74:	14 47       	or	r7,r10
8002dd76:	f1 e7 13 f7 	or	r7,r8,r7>>0x1f
8002dd7a:	00 37       	cp.w	r7,r0
8002dd7c:	e0 88 00 09 	brls	8002dd8e <__ieee754_atan2+0x52>
8002dd80:	04 98       	mov	r8,r2
8002dd82:	06 99       	mov	r9,r3
8002dd84:	08 9a       	mov	r10,r4
8002dd86:	0a 9b       	mov	r11,r5
8002dd88:	e0 a0 13 82 	rcall	8003048c <__avr32_f64_add>
8002dd8c:	ce 88       	rjmp	8002df5c <__ieee754_atan2+0x220>
8002dd8e:	fc 17 c0 10 	movh	r7,0xc010
8002dd92:	f8 07 00 07 	add	r7,r12,r7
8002dd96:	0c 47       	or	r7,r6
8002dd98:	c0 41       	brne	8002dda0 <__ieee754_atan2+0x64>
8002dd9a:	e0 a0 0e 65 	rcall	8002fa64 <atan>
8002dd9e:	cd f8       	rjmp	8002df5c <__ieee754_atan2+0x220>
8002dda0:	f8 07 14 1e 	asr	r7,r12,0x1e
8002dda4:	f1 ea 10 09 	or	r9,r8,r10
8002dda8:	e2 17 00 02 	andl	r7,0x2,COH
8002ddac:	ef eb 13 f7 	or	r7,r7,r11>>0x1f
8002ddb0:	58 09       	cp.w	r9,0
8002ddb2:	c0 71       	brne	8002ddc0 <__ieee754_atan2+0x84>
8002ddb4:	58 27       	cp.w	r7,2
8002ddb6:	c5 10       	breq	8002de58 <__ieee754_atan2+0x11c>
8002ddb8:	e0 8a 00 d4 	brle	8002df60 <__ieee754_atan2+0x224>
8002ddbc:	58 37       	cp.w	r7,3
8002ddbe:	c5 60       	breq	8002de6a <__ieee754_atan2+0x12e>
8002ddc0:	fd e6 10 06 	or	r6,lr,r6
8002ddc4:	c6 00       	breq	8002de84 <__ieee754_atan2+0x148>
8002ddc6:	fc 19 7f f0 	movh	r9,0x7ff0
8002ddca:	12 3e       	cp.w	lr,r9
8002ddcc:	c5 81       	brne	8002de7c <__ieee754_atan2+0x140>
8002ddce:	12 38       	cp.w	r8,r9
8002ddd0:	c3 11       	brne	8002de32 <__ieee754_atan2+0xf6>
8002ddd2:	58 17       	cp.w	r7,1
8002ddd4:	c0 b0       	breq	8002ddea <__ieee754_atan2+0xae>
8002ddd6:	e0 89 00 05 	brgt	8002dde0 <__ieee754_atan2+0xa4>
8002ddda:	58 07       	cp.w	r7,0
8002dddc:	c1 00       	breq	8002ddfc <__ieee754_atan2+0xc0>
8002ddde:	c5 38       	rjmp	8002de84 <__ieee754_atan2+0x148>
8002dde0:	58 27       	cp.w	r7,2
8002dde2:	c1 60       	breq	8002de0e <__ieee754_atan2+0xd2>
8002dde4:	58 37       	cp.w	r7,3
8002dde6:	c4 f1       	brne	8002de84 <__ieee754_atan2+0x148>
8002dde8:	c1 c8       	rjmp	8002de20 <__ieee754_atan2+0xe4>
8002ddea:	e0 64 2d 18 	mov	r4,11544
8002ddee:	ea 14 54 44 	orh	r4,0x5444
8002ddf2:	e0 65 21 fb 	mov	r5,8699
8002ddf6:	ea 15 bf e9 	orh	r5,0xbfe9
8002ddfa:	cb 38       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002ddfc:	e0 64 2d 18 	mov	r4,11544
8002de00:	ea 14 54 44 	orh	r4,0x5444
8002de04:	e0 65 21 fb 	mov	r5,8699
8002de08:	ea 15 3f e9 	orh	r5,0x3fe9
8002de0c:	ca a8       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de0e:	e0 64 21 d2 	mov	r4,8658
8002de12:	ea 14 7f 33 	orh	r4,0x7f33
8002de16:	e0 65 d9 7c 	mov	r5,55676
8002de1a:	ea 15 40 02 	orh	r5,0x4002
8002de1e:	ca 18       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de20:	e0 64 21 d2 	mov	r4,8658
8002de24:	ea 14 7f 33 	orh	r4,0x7f33
8002de28:	e0 65 d9 7c 	mov	r5,55676
8002de2c:	ea 15 c0 02 	orh	r5,0xc002
8002de30:	c9 88       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de32:	58 17       	cp.w	r7,1
8002de34:	c0 b0       	breq	8002de4a <__ieee754_atan2+0x10e>
8002de36:	e0 89 00 05 	brgt	8002de40 <__ieee754_atan2+0x104>
8002de3a:	58 07       	cp.w	r7,0
8002de3c:	c0 b0       	breq	8002de52 <__ieee754_atan2+0x116>
8002de3e:	c1 f8       	rjmp	8002de7c <__ieee754_atan2+0x140>
8002de40:	58 27       	cp.w	r7,2
8002de42:	c0 b0       	breq	8002de58 <__ieee754_atan2+0x11c>
8002de44:	58 37       	cp.w	r7,3
8002de46:	c1 b1       	brne	8002de7c <__ieee754_atan2+0x140>
8002de48:	c1 18       	rjmp	8002de6a <__ieee754_atan2+0x12e>
8002de4a:	30 04       	mov	r4,0
8002de4c:	fc 15 80 00 	movh	r5,0x8000
8002de50:	c8 88       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de52:	30 04       	mov	r4,0
8002de54:	30 05       	mov	r5,0
8002de56:	c8 58       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de58:	e0 64 2d 18 	mov	r4,11544
8002de5c:	ea 14 54 44 	orh	r4,0x5444
8002de60:	e0 65 21 fb 	mov	r5,8699
8002de64:	ea 15 40 09 	orh	r5,0x4009
8002de68:	c7 c8       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de6a:	e0 64 2d 18 	mov	r4,11544
8002de6e:	ea 14 54 44 	orh	r4,0x5444
8002de72:	e0 65 21 fb 	mov	r5,8699
8002de76:	ea 15 c0 09 	orh	r5,0xc009
8002de7a:	c7 38       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de7c:	fc 10 7f f0 	movh	r0,0x7ff0
8002de80:	00 38       	cp.w	r8,r0
8002de82:	c1 51       	brne	8002deac <__ieee754_atan2+0x170>
8002de84:	58 01       	cp.w	r1,0
8002de86:	c0 a5       	brlt	8002de9a <__ieee754_atan2+0x15e>
8002de88:	e0 64 2d 18 	mov	r4,11544
8002de8c:	ea 14 54 44 	orh	r4,0x5444
8002de90:	e0 65 21 fb 	mov	r5,8699
8002de94:	ea 15 3f f9 	orh	r5,0x3ff9
8002de98:	c6 48       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002de9a:	e0 64 2d 18 	mov	r4,11544
8002de9e:	ea 14 54 44 	orh	r4,0x5444
8002dea2:	e0 65 21 fb 	mov	r5,8699
8002dea6:	ea 15 bf f9 	orh	r5,0xbff9
8002deaa:	c5 b8       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002deac:	1c 18       	sub	r8,lr
8002deae:	b5 48       	asr	r8,0x14
8002deb0:	e0 48 00 3c 	cp.w	r8,60
8002deb4:	e0 8a 00 0b 	brle	8002deca <__ieee754_atan2+0x18e>
8002deb8:	e0 6a 2d 18 	mov	r10,11544
8002debc:	ea 1a 54 44 	orh	r10,0x5444
8002dec0:	e0 6b 21 fb 	mov	r11,8699
8002dec4:	ea 1b 3f f9 	orh	r11,0x3ff9
8002dec8:	c1 48       	rjmp	8002def0 <__ieee754_atan2+0x1b4>
8002deca:	fe 58 ff c4 	cp.w	r8,-60
8002dece:	5f 58       	srlt	r8
8002ded0:	f1 ec 03 fc 	and	r12,r8,r12>>0x1f
8002ded4:	c0 40       	breq	8002dedc <__ieee754_atan2+0x1a0>
8002ded6:	30 0a       	mov	r10,0
8002ded8:	30 0b       	mov	r11,0
8002deda:	c0 b8       	rjmp	8002def0 <__ieee754_atan2+0x1b4>
8002dedc:	04 98       	mov	r8,r2
8002dede:	06 99       	mov	r9,r3
8002dee0:	08 9a       	mov	r10,r4
8002dee2:	0a 9b       	mov	r11,r5
8002dee4:	e0 a0 14 60 	rcall	800307a4 <__avr32_f64_div>
8002dee8:	e0 a0 0f 62 	rcall	8002fdac <fabs>
8002deec:	e0 a0 0d bc 	rcall	8002fa64 <atan>
8002def0:	58 17       	cp.w	r7,1
8002def2:	c0 60       	breq	8002defe <__ieee754_atan2+0x1c2>
8002def4:	58 27       	cp.w	r7,2
8002def6:	c0 a0       	breq	8002df0a <__ieee754_atan2+0x1ce>
8002def8:	58 07       	cp.w	r7,0
8002defa:	c1 d1       	brne	8002df34 <__ieee754_atan2+0x1f8>
8002defc:	c3 08       	rjmp	8002df5c <__ieee754_atan2+0x220>
8002defe:	fc 18 80 00 	movh	r8,0x8000
8002df02:	14 94       	mov	r4,r10
8002df04:	f6 08 00 05 	add	r5,r11,r8
8002df08:	c2 c8       	rjmp	8002df60 <__ieee754_atan2+0x224>
8002df0a:	e0 68 5c 07 	mov	r8,23559
8002df0e:	ea 18 33 14 	orh	r8,0x3314
8002df12:	e0 69 a6 26 	mov	r9,42534
8002df16:	ea 19 3c a1 	orh	r9,0x3ca1
8002df1a:	e0 a0 11 eb 	rcall	800302f0 <__avr32_f64_sub>
8002df1e:	14 98       	mov	r8,r10
8002df20:	16 99       	mov	r9,r11
8002df22:	e0 6a 2d 18 	mov	r10,11544
8002df26:	ea 1a 54 44 	orh	r10,0x5444
8002df2a:	e0 6b 21 fb 	mov	r11,8699
8002df2e:	ea 1b 40 09 	orh	r11,0x4009
8002df32:	c1 38       	rjmp	8002df58 <__ieee754_atan2+0x21c>
8002df34:	e0 68 5c 07 	mov	r8,23559
8002df38:	ea 18 33 14 	orh	r8,0x3314
8002df3c:	e0 69 a6 26 	mov	r9,42534
8002df40:	ea 19 3c a1 	orh	r9,0x3ca1
8002df44:	e0 a0 11 d6 	rcall	800302f0 <__avr32_f64_sub>
8002df48:	e0 68 2d 18 	mov	r8,11544
8002df4c:	ea 18 54 44 	orh	r8,0x5444
8002df50:	e0 69 21 fb 	mov	r9,8699
8002df54:	ea 19 40 09 	orh	r9,0x4009
8002df58:	e0 a0 11 cc 	rcall	800302f0 <__avr32_f64_sub>
8002df5c:	14 94       	mov	r4,r10
8002df5e:	16 95       	mov	r5,r11
8002df60:	08 9a       	mov	r10,r4
8002df62:	0a 9b       	mov	r11,r5
8002df64:	2f ed       	sub	sp,-8
8002df66:	d8 32       	popm	r0-r7,pc

8002df68 <__ieee754_pow>:
8002df68:	d4 31       	pushm	r0-r7,lr
8002df6a:	20 ed       	sub	sp,56
8002df6c:	10 94       	mov	r4,r8
8002df6e:	12 95       	mov	r5,r9
8002df70:	50 7b       	stdsp	sp[0x1c],r11
8002df72:	fa e5 00 0c 	st.d	sp[12],r4
8002df76:	12 97       	mov	r7,r9
8002df78:	10 96       	mov	r6,r8
8002df7a:	40 31       	lddsp	r1,sp[0xc]
8002df7c:	40 49       	lddsp	r9,sp[0x10]
8002df7e:	e5 d1 c0 1f 	bfextu	r2,r1,0x0,0x1f
8002df82:	16 90       	mov	r0,r11
8002df84:	14 93       	mov	r3,r10
8002df86:	14 98       	mov	r8,r10
8002df88:	e5 e9 10 0c 	or	r12,r2,r9
8002df8c:	e0 80 05 33 	breq	8002e9f2 <__ieee754_pow+0xa8a>
8002df90:	50 1b       	stdsp	sp[0x4],r11
8002df92:	16 9e       	mov	lr,r11
8002df94:	e9 db c0 1f 	bfextu	r4,r11,0x0,0x1f
8002df98:	fc 1c 7f f0 	movh	r12,0x7ff0
8002df9c:	18 34       	cp.w	r4,r12
8002df9e:	e0 89 00 1a 	brgt	8002dfd2 <__ieee754_pow+0x6a>
8002dfa2:	5f 05       	sreq	r5
8002dfa4:	50 55       	stdsp	sp[0x14],r5
8002dfa6:	30 0c       	mov	r12,0
8002dfa8:	58 0a       	cp.w	r10,0
8002dfaa:	5f 15       	srne	r5
8002dfac:	40 5e       	lddsp	lr,sp[0x14]
8002dfae:	fd e5 00 05 	and	r5,lr,r5
8002dfb2:	f8 05 18 00 	cp.b	r5,r12
8002dfb6:	c0 e1       	brne	8002dfd2 <__ieee754_pow+0x6a>
8002dfb8:	fc 1c 7f f0 	movh	r12,0x7ff0
8002dfbc:	18 32       	cp.w	r2,r12
8002dfbe:	e0 89 00 0a 	brgt	8002dfd2 <__ieee754_pow+0x6a>
8002dfc2:	5f 0c       	sreq	r12
8002dfc4:	58 09       	cp.w	r9,0
8002dfc6:	5f 1e       	srne	lr
8002dfc8:	f9 ee 00 0e 	and	lr,r12,lr
8002dfcc:	ea 0e 18 00 	cp.b	lr,r5
8002dfd0:	c0 d0       	breq	8002dfea <__ieee754_pow+0x82>
8002dfd2:	fc 19 c0 10 	movh	r9,0xc010
8002dfd6:	12 04       	add	r4,r9
8002dfd8:	e9 e8 10 08 	or	r8,r4,r8
8002dfdc:	e0 80 05 0b 	breq	8002e9f2 <__ieee754_pow+0xa8a>
8002dfe0:	4d 6c       	lddpc	r12,8002e138 <__ieee754_pow+0x1d0>
8002dfe2:	e0 a0 0f 90 	rcall	8002ff02 <nan>
8002dfe6:	e0 8f 05 03 	bral	8002e9ec <__ieee754_pow+0xa84>
8002dfea:	58 0b       	cp.w	r11,0
8002dfec:	c3 64       	brge	8002e058 <__ieee754_pow+0xf0>
8002dfee:	e0 6b ff ff 	mov	r11,65535
8002dff2:	ea 1b 43 3f 	orh	r11,0x433f
8002dff6:	16 32       	cp.w	r2,r11
8002dff8:	e0 8a 00 04 	brle	8002e000 <__ieee754_pow+0x98>
8002dffc:	30 25       	mov	r5,2
8002dffe:	c2 e8       	rjmp	8002e05a <__ieee754_pow+0xf2>
8002e000:	e0 6a ff ff 	mov	r10,65535
8002e004:	ea 1a 3f ef 	orh	r10,0x3fef
8002e008:	14 32       	cp.w	r2,r10
8002e00a:	e0 8a 00 27 	brle	8002e058 <__ieee754_pow+0xf0>
8002e00e:	e4 0a 14 14 	asr	r10,r2,0x14
8002e012:	f4 ca 03 ff 	sub	r10,r10,1023
8002e016:	59 4a       	cp.w	r10,20
8002e018:	e0 8a 00 0f 	brle	8002e036 <__ieee754_pow+0xce>
8002e01c:	f4 0a 11 34 	rsub	r10,r10,52
8002e020:	f2 0a 0a 45 	lsr	r5,r9,r10
8002e024:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e028:	12 3a       	cp.w	r10,r9
8002e02a:	c1 71       	brne	8002e058 <__ieee754_pow+0xf0>
8002e02c:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e030:	ea 05 11 02 	rsub	r5,r5,2
8002e034:	c1 38       	rjmp	8002e05a <__ieee754_pow+0xf2>
8002e036:	40 49       	lddsp	r9,sp[0x10]
8002e038:	58 09       	cp.w	r9,0
8002e03a:	c5 01       	brne	8002e0da <__ieee754_pow+0x172>
8002e03c:	f4 0a 11 14 	rsub	r10,r10,20
8002e040:	e4 0a 08 45 	asr	r5,r2,r10
8002e044:	ea 0a 09 4a 	lsl	r10,r5,r10
8002e048:	04 3a       	cp.w	r10,r2
8002e04a:	e0 81 04 de 	brne	8002ea06 <__ieee754_pow+0xa9e>
8002e04e:	eb d5 c0 01 	bfextu	r5,r5,0x0,0x1
8002e052:	ea 05 11 02 	rsub	r5,r5,2
8002e056:	c0 48       	rjmp	8002e05e <__ieee754_pow+0xf6>
8002e058:	30 05       	mov	r5,0
8002e05a:	58 09       	cp.w	r9,0
8002e05c:	c4 01       	brne	8002e0dc <__ieee754_pow+0x174>
8002e05e:	58 0c       	cp.w	r12,0
8002e060:	c1 90       	breq	8002e092 <__ieee754_pow+0x12a>
8002e062:	fc 19 c0 10 	movh	r9,0xc010
8002e066:	e8 09 00 09 	add	r9,r4,r9
8002e06a:	f3 e8 10 08 	or	r8,r9,r8
8002e06e:	e0 80 04 c2 	breq	8002e9f2 <__ieee754_pow+0xa8a>
8002e072:	e0 68 ff ff 	mov	r8,65535
8002e076:	ea 18 3f ef 	orh	r8,0x3fef
8002e07a:	10 34       	cp.w	r4,r8
8002e07c:	e0 8a 00 07 	brle	8002e08a <__ieee754_pow+0x122>
8002e080:	58 01       	cp.w	r1,0
8002e082:	e0 84 04 be 	brge	8002e9fe <__ieee754_pow+0xa96>
8002e086:	e0 8f 04 ba 	bral	8002e9fa <__ieee754_pow+0xa92>
8002e08a:	58 01       	cp.w	r1,0
8002e08c:	e0 84 04 b7 	brge	8002e9fa <__ieee754_pow+0xa92>
8002e090:	c5 98       	rjmp	8002e142 <__ieee754_pow+0x1da>
8002e092:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e096:	1c 32       	cp.w	r2,lr
8002e098:	c0 d1       	brne	8002e0b2 <__ieee754_pow+0x14a>
8002e09a:	58 01       	cp.w	r1,0
8002e09c:	c0 55       	brlt	8002e0a6 <__ieee754_pow+0x13e>
8002e09e:	00 97       	mov	r7,r0
8002e0a0:	06 96       	mov	r6,r3
8002e0a2:	e0 8f 04 ae 	bral	8002e9fe <__ieee754_pow+0xa96>
8002e0a6:	00 99       	mov	r9,r0
8002e0a8:	06 98       	mov	r8,r3
8002e0aa:	30 0a       	mov	r10,0
8002e0ac:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e0b0:	c5 c8       	rjmp	8002e168 <__ieee754_pow+0x200>
8002e0b2:	fc 1c 40 00 	movh	r12,0x4000
8002e0b6:	18 31       	cp.w	r1,r12
8002e0b8:	c0 41       	brne	8002e0c0 <__ieee754_pow+0x158>
8002e0ba:	00 99       	mov	r9,r0
8002e0bc:	06 98       	mov	r8,r3
8002e0be:	c8 68       	rjmp	8002e1ca <__ieee754_pow+0x262>
8002e0c0:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e0c4:	16 31       	cp.w	r1,r11
8002e0c6:	c0 b1       	brne	8002e0dc <__ieee754_pow+0x174>
8002e0c8:	40 1a       	lddsp	r10,sp[0x4]
8002e0ca:	58 0a       	cp.w	r10,0
8002e0cc:	c0 85       	brlt	8002e0dc <__ieee754_pow+0x174>
8002e0ce:	00 9b       	mov	r11,r0
8002e0d0:	06 9a       	mov	r10,r3
8002e0d2:	e0 a0 06 d5 	rcall	8002ee7c <__ieee754_sqrt>
8002e0d6:	e0 8f 04 8b 	bral	8002e9ec <__ieee754_pow+0xa84>
8002e0da:	30 05       	mov	r5,0
8002e0dc:	50 08       	stdsp	sp[0x0],r8
8002e0de:	00 9b       	mov	r11,r0
8002e0e0:	06 9a       	mov	r10,r3
8002e0e2:	e0 a0 0e 65 	rcall	8002fdac <fabs>
8002e0e6:	40 08       	lddsp	r8,sp[0x0]
8002e0e8:	58 08       	cp.w	r8,0
8002e0ea:	c3 01       	brne	8002e14a <__ieee754_pow+0x1e2>
8002e0ec:	58 04       	cp.w	r4,0
8002e0ee:	5f 09       	sreq	r9
8002e0f0:	40 5e       	lddsp	lr,sp[0x14]
8002e0f2:	fd e9 10 09 	or	r9,lr,r9
8002e0f6:	f0 09 18 00 	cp.b	r9,r8
8002e0fa:	c0 51       	brne	8002e104 <__ieee754_pow+0x19c>
8002e0fc:	fc 1c 3f f0 	movh	r12,0x3ff0
8002e100:	18 34       	cp.w	r4,r12
8002e102:	c2 41       	brne	8002e14a <__ieee754_pow+0x1e2>
8002e104:	58 01       	cp.w	r1,0
8002e106:	c0 84       	brge	8002e116 <__ieee754_pow+0x1ae>
8002e108:	16 99       	mov	r9,r11
8002e10a:	14 98       	mov	r8,r10
8002e10c:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e110:	30 0a       	mov	r10,0
8002e112:	e0 a0 13 49 	rcall	800307a4 <__avr32_f64_div>
8002e116:	16 97       	mov	r7,r11
8002e118:	14 96       	mov	r6,r10
8002e11a:	40 1b       	lddsp	r11,sp[0x4]
8002e11c:	58 0b       	cp.w	r11,0
8002e11e:	e0 84 04 70 	brge	8002e9fe <__ieee754_pow+0xa96>
8002e122:	fc 18 c0 10 	movh	r8,0xc010
8002e126:	10 04       	add	r4,r8
8002e128:	eb e4 10 04 	or	r4,r5,r4
8002e12c:	c0 81       	brne	8002e13c <__ieee754_pow+0x1d4>
8002e12e:	0e 9b       	mov	r11,r7
8002e130:	0e 99       	mov	r9,r7
8002e132:	0c 98       	mov	r8,r6
8002e134:	c1 68       	rjmp	8002e160 <__ieee754_pow+0x1f8>
8002e136:	d7 03       	nop
8002e138:	80 03       	ld.sh	r3,r0[0x0]
8002e13a:	17 78       	ld.ub	r8,--r11
8002e13c:	58 15       	cp.w	r5,1
8002e13e:	e0 81 04 60 	brne	8002e9fe <__ieee754_pow+0xa96>
8002e142:	ee 17 80 00 	eorh	r7,0x8000
8002e146:	e0 8f 04 5c 	bral	8002e9fe <__ieee754_pow+0xa96>
8002e14a:	40 78       	lddsp	r8,sp[0x1c]
8002e14c:	bf 98       	lsr	r8,0x1f
8002e14e:	20 18       	sub	r8,1
8002e150:	50 d8       	stdsp	sp[0x34],r8
8002e152:	eb e8 10 08 	or	r8,r5,r8
8002e156:	c0 d1       	brne	8002e170 <__ieee754_pow+0x208>
8002e158:	00 99       	mov	r9,r0
8002e15a:	06 98       	mov	r8,r3
8002e15c:	06 9a       	mov	r10,r3
8002e15e:	00 9b       	mov	r11,r0
8002e160:	e0 a0 10 c8 	rcall	800302f0 <__avr32_f64_sub>
8002e164:	14 98       	mov	r8,r10
8002e166:	16 99       	mov	r9,r11
8002e168:	e0 a0 13 1e 	rcall	800307a4 <__avr32_f64_div>
8002e16c:	e0 8f 04 40 	bral	8002e9ec <__ieee754_pow+0xa84>
8002e170:	fc 19 41 e0 	movh	r9,0x41e0
8002e174:	12 32       	cp.w	r2,r9
8002e176:	e0 8a 00 9f 	brle	8002e2b4 <__ieee754_pow+0x34c>
8002e17a:	fc 18 43 f0 	movh	r8,0x43f0
8002e17e:	10 32       	cp.w	r2,r8
8002e180:	e0 8a 00 0a 	brle	8002e194 <__ieee754_pow+0x22c>
8002e184:	e0 65 ff ff 	mov	r5,65535
8002e188:	ea 15 3f ef 	orh	r5,0x3fef
8002e18c:	0a 34       	cp.w	r4,r5
8002e18e:	e0 89 00 13 	brgt	8002e1b4 <__ieee754_pow+0x24c>
8002e192:	c0 88       	rjmp	8002e1a2 <__ieee754_pow+0x23a>
8002e194:	e0 60 ff fe 	mov	r0,65534
8002e198:	ea 10 3f ef 	orh	r0,0x3fef
8002e19c:	00 34       	cp.w	r4,r0
8002e19e:	e0 89 00 06 	brgt	8002e1aa <__ieee754_pow+0x242>
8002e1a2:	58 01       	cp.w	r1,0
8002e1a4:	e0 84 04 2b 	brge	8002e9fa <__ieee754_pow+0xa92>
8002e1a8:	c0 98       	rjmp	8002e1ba <__ieee754_pow+0x252>
8002e1aa:	fc 1e 3f f0 	movh	lr,0x3ff0
8002e1ae:	1c 34       	cp.w	r4,lr
8002e1b0:	e0 8a 00 11 	brle	8002e1d2 <__ieee754_pow+0x26a>
8002e1b4:	58 01       	cp.w	r1,0
8002e1b6:	e0 8a 04 22 	brle	8002e9fa <__ieee754_pow+0xa92>
8002e1ba:	e0 68 75 9c 	mov	r8,30108
8002e1be:	ea 18 88 00 	orh	r8,0x8800
8002e1c2:	e0 69 e4 3c 	mov	r9,58428
8002e1c6:	ea 19 7e 37 	orh	r9,0x7e37
8002e1ca:	10 9a       	mov	r10,r8
8002e1cc:	12 9b       	mov	r11,r9
8002e1ce:	e0 8f 04 0d 	bral	8002e9e8 <__ieee754_pow+0xa80>
8002e1d2:	30 08       	mov	r8,0
8002e1d4:	fc 19 3f f0 	movh	r9,0x3ff0
8002e1d8:	e0 a0 10 8c 	rcall	800302f0 <__avr32_f64_sub>
8002e1dc:	fc 18 60 00 	movh	r8,0x6000
8002e1e0:	14 92       	mov	r2,r10
8002e1e2:	16 93       	mov	r3,r11
8002e1e4:	e0 69 15 47 	mov	r9,5447
8002e1e8:	ea 19 3f f7 	orh	r9,0x3ff7
8002e1ec:	e0 a0 0f 96 	rcall	80030118 <__avr32_f64_mul>
8002e1f0:	e0 68 df 44 	mov	r8,57156
8002e1f4:	ea 18 f8 5d 	orh	r8,0xf85d
8002e1f8:	fa eb 00 0c 	st.d	sp[12],r10
8002e1fc:	e0 69 ae 0b 	mov	r9,44555
8002e200:	ea 19 3e 54 	orh	r9,0x3e54
8002e204:	04 9a       	mov	r10,r2
8002e206:	06 9b       	mov	r11,r3
8002e208:	e0 a0 0f 88 	rcall	80030118 <__avr32_f64_mul>
8002e20c:	04 98       	mov	r8,r2
8002e20e:	fa eb 00 04 	st.d	sp[4],r10
8002e212:	06 99       	mov	r9,r3
8002e214:	04 9a       	mov	r10,r2
8002e216:	06 9b       	mov	r11,r3
8002e218:	e0 a0 0f 80 	rcall	80030118 <__avr32_f64_mul>
8002e21c:	30 08       	mov	r8,0
8002e21e:	14 90       	mov	r0,r10
8002e220:	16 91       	mov	r1,r11
8002e222:	fc 19 bf d0 	movh	r9,0xbfd0
8002e226:	04 9a       	mov	r10,r2
8002e228:	06 9b       	mov	r11,r3
8002e22a:	e0 a0 0f 77 	rcall	80030118 <__avr32_f64_mul>
8002e22e:	e0 68 55 55 	mov	r8,21845
8002e232:	ea 18 55 55 	orh	r8,0x5555
8002e236:	e0 69 55 55 	mov	r9,21845
8002e23a:	ea 19 3f d5 	orh	r9,0x3fd5
8002e23e:	e0 a0 11 27 	rcall	8003048c <__avr32_f64_add>
8002e242:	14 98       	mov	r8,r10
8002e244:	16 99       	mov	r9,r11
8002e246:	04 9a       	mov	r10,r2
8002e248:	06 9b       	mov	r11,r3
8002e24a:	e0 a0 0f 67 	rcall	80030118 <__avr32_f64_mul>
8002e24e:	14 98       	mov	r8,r10
8002e250:	16 99       	mov	r9,r11
8002e252:	30 0a       	mov	r10,0
8002e254:	fc 1b 3f e0 	movh	r11,0x3fe0
8002e258:	e0 a0 10 4c 	rcall	800302f0 <__avr32_f64_sub>
8002e25c:	14 98       	mov	r8,r10
8002e25e:	16 99       	mov	r9,r11
8002e260:	00 9a       	mov	r10,r0
8002e262:	02 9b       	mov	r11,r1
8002e264:	e0 a0 0f 5a 	rcall	80030118 <__avr32_f64_mul>
8002e268:	e0 68 82 fe 	mov	r8,33534
8002e26c:	ea 18 65 2b 	orh	r8,0x652b
8002e270:	e0 69 15 47 	mov	r9,5447
8002e274:	ea 19 bf f7 	orh	r9,0xbff7
8002e278:	e0 a0 0f 50 	rcall	80030118 <__avr32_f64_mul>
8002e27c:	14 98       	mov	r8,r10
8002e27e:	16 99       	mov	r9,r11
8002e280:	fa ea 00 04 	ld.d	r10,sp[4]
8002e284:	e0 a0 11 04 	rcall	8003048c <__avr32_f64_add>
8002e288:	16 91       	mov	r1,r11
8002e28a:	14 98       	mov	r8,r10
8002e28c:	14 90       	mov	r0,r10
8002e28e:	02 99       	mov	r9,r1
8002e290:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e294:	e0 a0 10 fc 	rcall	8003048c <__avr32_f64_add>
8002e298:	fa e8 00 0c 	ld.d	r8,sp[12]
8002e29c:	16 93       	mov	r3,r11
8002e29e:	30 02       	mov	r2,0
8002e2a0:	06 9b       	mov	r11,r3
8002e2a2:	04 9a       	mov	r10,r2
8002e2a4:	e0 a0 10 26 	rcall	800302f0 <__avr32_f64_sub>
8002e2a8:	14 98       	mov	r8,r10
8002e2aa:	16 99       	mov	r9,r11
8002e2ac:	00 9a       	mov	r10,r0
8002e2ae:	02 9b       	mov	r11,r1
8002e2b0:	e0 8f 01 c6 	bral	8002e63c <__ieee754_pow+0x6d4>
8002e2b4:	ee 54 ff ff 	cp.w	r4,1048575
8002e2b8:	e0 8a 00 04 	brle	8002e2c0 <__ieee754_pow+0x358>
8002e2bc:	30 0c       	mov	r12,0
8002e2be:	c0 98       	rjmp	8002e2d0 <__ieee754_pow+0x368>
8002e2c0:	fc 19 43 40 	movh	r9,0x4340
8002e2c4:	30 08       	mov	r8,0
8002e2c6:	e0 a0 0f 29 	rcall	80030118 <__avr32_f64_mul>
8002e2ca:	3c bc       	mov	r12,-53
8002e2cc:	16 99       	mov	r9,r11
8002e2ce:	12 94       	mov	r4,r9
8002e2d0:	f1 d4 c0 14 	bfextu	r8,r4,0x0,0x14
8002e2d4:	f8 cc 03 ff 	sub	r12,r12,1023
8002e2d8:	b5 44       	asr	r4,0x14
8002e2da:	10 93       	mov	r3,r8
8002e2dc:	08 0c       	add	r12,r4
8002e2de:	ea 13 3f f0 	orh	r3,0x3ff0
8002e2e2:	e2 58 98 8e 	cp.w	r8,235662
8002e2e6:	e0 8a 00 0c 	brle	8002e2fe <__ieee754_pow+0x396>
8002e2ea:	ea 58 b6 79 	cp.w	r8,767609
8002e2ee:	e0 89 00 04 	brgt	8002e2f6 <__ieee754_pow+0x38e>
8002e2f2:	30 14       	mov	r4,1
8002e2f4:	c0 68       	rjmp	8002e300 <__ieee754_pow+0x398>
8002e2f6:	f0 68 00 00 	mov	r8,-1048576
8002e2fa:	2f fc       	sub	r12,-1
8002e2fc:	10 03       	add	r3,r8
8002e2fe:	30 04       	mov	r4,0
8002e300:	14 98       	mov	r8,r10
8002e302:	06 99       	mov	r9,r3
8002e304:	4d ea       	lddpc	r10,8002e47c <__ieee754_pow+0x514>
8002e306:	50 0c       	stdsp	sp[0x0],r12
8002e308:	f4 04 02 30 	ld.d	r0,r10[r4<<0x3]
8002e30c:	fa e9 00 14 	st.d	sp[20],r8
8002e310:	fa e1 00 1c 	st.d	sp[28],r0
8002e314:	00 98       	mov	r8,r0
8002e316:	02 99       	mov	r9,r1
8002e318:	fa ea 00 14 	ld.d	r10,sp[20]
8002e31c:	e0 a0 0f ea 	rcall	800302f0 <__avr32_f64_sub>
8002e320:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e324:	fa eb 00 24 	st.d	sp[36],r10
8002e328:	fa ea 00 14 	ld.d	r10,sp[20]
8002e32c:	e0 a0 10 b0 	rcall	8003048c <__avr32_f64_add>
8002e330:	14 98       	mov	r8,r10
8002e332:	16 99       	mov	r9,r11
8002e334:	30 0a       	mov	r10,0
8002e336:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e33a:	e0 a0 12 35 	rcall	800307a4 <__avr32_f64_div>
8002e33e:	14 98       	mov	r8,r10
8002e340:	16 99       	mov	r9,r11
8002e342:	fa eb 00 2c 	st.d	sp[44],r10
8002e346:	fa ea 00 24 	ld.d	r10,sp[36]
8002e34a:	e0 a0 0e e7 	rcall	80030118 <__avr32_f64_mul>
8002e34e:	30 09       	mov	r9,0
8002e350:	fa eb 00 0c 	st.d	sp[12],r10
8002e354:	fa eb 00 04 	st.d	sp[4],r10
8002e358:	a1 53       	asr	r3,0x1
8002e35a:	30 0a       	mov	r10,0
8002e35c:	bd b3       	sbr	r3,0x1d
8002e35e:	e8 08 15 12 	lsl	r8,r4,0x12
8002e362:	f8 28 00 00 	sub	r8,-524288
8002e366:	f0 03 00 0b 	add	r11,r8,r3
8002e36a:	50 49       	stdsp	sp[0x10],r9
8002e36c:	14 92       	mov	r2,r10
8002e36e:	fa e0 00 0c 	ld.d	r0,sp[12]
8002e372:	16 93       	mov	r3,r11
8002e374:	14 98       	mov	r8,r10
8002e376:	16 99       	mov	r9,r11
8002e378:	00 9a       	mov	r10,r0
8002e37a:	02 9b       	mov	r11,r1
8002e37c:	e0 a0 0e ce 	rcall	80030118 <__avr32_f64_mul>
8002e380:	14 98       	mov	r8,r10
8002e382:	16 99       	mov	r9,r11
8002e384:	fa ea 00 24 	ld.d	r10,sp[36]
8002e388:	e0 a0 0f b4 	rcall	800302f0 <__avr32_f64_sub>
8002e38c:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e390:	fa eb 00 24 	st.d	sp[36],r10
8002e394:	04 9a       	mov	r10,r2
8002e396:	06 9b       	mov	r11,r3
8002e398:	e0 a0 0f ac 	rcall	800302f0 <__avr32_f64_sub>
8002e39c:	14 98       	mov	r8,r10
8002e39e:	16 99       	mov	r9,r11
8002e3a0:	fa ea 00 14 	ld.d	r10,sp[20]
8002e3a4:	e0 a0 0f a6 	rcall	800302f0 <__avr32_f64_sub>
8002e3a8:	14 98       	mov	r8,r10
8002e3aa:	16 99       	mov	r9,r11
8002e3ac:	00 9a       	mov	r10,r0
8002e3ae:	02 9b       	mov	r11,r1
8002e3b0:	e0 a0 0e b4 	rcall	80030118 <__avr32_f64_mul>
8002e3b4:	14 98       	mov	r8,r10
8002e3b6:	16 99       	mov	r9,r11
8002e3b8:	fa ea 00 24 	ld.d	r10,sp[36]
8002e3bc:	e0 a0 0f 9a 	rcall	800302f0 <__avr32_f64_sub>
8002e3c0:	14 98       	mov	r8,r10
8002e3c2:	16 99       	mov	r9,r11
8002e3c4:	fa ea 00 2c 	ld.d	r10,sp[44]
8002e3c8:	e0 a0 0e a8 	rcall	80030118 <__avr32_f64_mul>
8002e3cc:	fa e8 00 04 	ld.d	r8,sp[4]
8002e3d0:	fa eb 00 14 	st.d	sp[20],r10
8002e3d4:	10 9a       	mov	r10,r8
8002e3d6:	12 9b       	mov	r11,r9
8002e3d8:	e0 a0 0e a0 	rcall	80030118 <__avr32_f64_mul>
8002e3dc:	16 93       	mov	r3,r11
8002e3de:	14 92       	mov	r2,r10
8002e3e0:	06 99       	mov	r9,r3
8002e3e2:	14 98       	mov	r8,r10
8002e3e4:	e0 a0 0e 9a 	rcall	80030118 <__avr32_f64_mul>
8002e3e8:	e0 68 4e ef 	mov	r8,20207
8002e3ec:	ea 18 4a 45 	orh	r8,0x4a45
8002e3f0:	fa eb 00 1c 	st.d	sp[28],r10
8002e3f4:	e0 69 7e 28 	mov	r9,32296
8002e3f8:	ea 19 3f ca 	orh	r9,0x3fca
8002e3fc:	04 9a       	mov	r10,r2
8002e3fe:	06 9b       	mov	r11,r3
8002e400:	e0 a0 0e 8c 	rcall	80030118 <__avr32_f64_mul>
8002e404:	e0 68 db 65 	mov	r8,56165
8002e408:	ea 18 93 c9 	orh	r8,0x93c9
8002e40c:	e0 69 86 4a 	mov	r9,34378
8002e410:	ea 19 3f cd 	orh	r9,0x3fcd
8002e414:	e0 a0 10 3c 	rcall	8003048c <__avr32_f64_add>
8002e418:	14 98       	mov	r8,r10
8002e41a:	16 99       	mov	r9,r11
8002e41c:	04 9a       	mov	r10,r2
8002e41e:	06 9b       	mov	r11,r3
8002e420:	e0 a0 0e 7c 	rcall	80030118 <__avr32_f64_mul>
8002e424:	e0 68 41 01 	mov	r8,16641
8002e428:	ea 18 a9 1d 	orh	r8,0xa91d
8002e42c:	e0 69 74 60 	mov	r9,29792
8002e430:	ea 19 3f d1 	orh	r9,0x3fd1
8002e434:	e0 a0 10 2c 	rcall	8003048c <__avr32_f64_add>
8002e438:	14 98       	mov	r8,r10
8002e43a:	16 99       	mov	r9,r11
8002e43c:	04 9a       	mov	r10,r2
8002e43e:	06 9b       	mov	r11,r3
8002e440:	e0 a0 0e 6c 	rcall	80030118 <__avr32_f64_mul>
8002e444:	e0 68 26 4d 	mov	r8,9805
8002e448:	ea 18 51 8f 	orh	r8,0x518f
8002e44c:	e0 69 55 55 	mov	r9,21845
8002e450:	ea 19 3f d5 	orh	r9,0x3fd5
8002e454:	e0 a0 10 1c 	rcall	8003048c <__avr32_f64_add>
8002e458:	14 98       	mov	r8,r10
8002e45a:	16 99       	mov	r9,r11
8002e45c:	04 9a       	mov	r10,r2
8002e45e:	06 9b       	mov	r11,r3
8002e460:	e0 a0 0e 5c 	rcall	80030118 <__avr32_f64_mul>
8002e464:	e0 68 ab ff 	mov	r8,44031
8002e468:	ea 18 db 6f 	orh	r8,0xdb6f
8002e46c:	e0 69 6d b6 	mov	r9,28086
8002e470:	ea 19 3f db 	orh	r9,0x3fdb
8002e474:	e0 a0 10 0c 	rcall	8003048c <__avr32_f64_add>
8002e478:	c0 48       	rjmp	8002e480 <__ieee754_pow+0x518>
8002e47a:	d7 03       	nop
8002e47c:	80 03       	ld.sh	r3,r0[0x0]
8002e47e:	17 a8       	ld.ub	r8,r11[0x2]
8002e480:	14 98       	mov	r8,r10
8002e482:	16 99       	mov	r9,r11
8002e484:	04 9a       	mov	r10,r2
8002e486:	06 9b       	mov	r11,r3
8002e488:	e0 a0 0e 48 	rcall	80030118 <__avr32_f64_mul>
8002e48c:	e0 68 33 03 	mov	r8,13059
8002e490:	ea 18 33 33 	orh	r8,0x3333
8002e494:	e0 69 33 33 	mov	r9,13107
8002e498:	ea 19 3f e3 	orh	r9,0x3fe3
8002e49c:	e0 a0 0f f8 	rcall	8003048c <__avr32_f64_add>
8002e4a0:	14 98       	mov	r8,r10
8002e4a2:	16 99       	mov	r9,r11
8002e4a4:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e4a8:	e0 a0 0e 38 	rcall	80030118 <__avr32_f64_mul>
8002e4ac:	fa e8 00 04 	ld.d	r8,sp[4]
8002e4b0:	14 92       	mov	r2,r10
8002e4b2:	16 93       	mov	r3,r11
8002e4b4:	00 9a       	mov	r10,r0
8002e4b6:	02 9b       	mov	r11,r1
8002e4b8:	e0 a0 0f ea 	rcall	8003048c <__avr32_f64_add>
8002e4bc:	14 98       	mov	r8,r10
8002e4be:	16 99       	mov	r9,r11
8002e4c0:	fa ea 00 14 	ld.d	r10,sp[20]
8002e4c4:	e0 a0 0e 2a 	rcall	80030118 <__avr32_f64_mul>
8002e4c8:	14 98       	mov	r8,r10
8002e4ca:	16 99       	mov	r9,r11
8002e4cc:	04 9a       	mov	r10,r2
8002e4ce:	06 9b       	mov	r11,r3
8002e4d0:	e0 a0 0f de 	rcall	8003048c <__avr32_f64_add>
8002e4d4:	00 98       	mov	r8,r0
8002e4d6:	fa eb 00 1c 	st.d	sp[28],r10
8002e4da:	02 99       	mov	r9,r1
8002e4dc:	00 9a       	mov	r10,r0
8002e4de:	02 9b       	mov	r11,r1
8002e4e0:	e0 a0 0e 1c 	rcall	80030118 <__avr32_f64_mul>
8002e4e4:	30 08       	mov	r8,0
8002e4e6:	fc 19 40 08 	movh	r9,0x4008
8002e4ea:	fa eb 00 2c 	st.d	sp[44],r10
8002e4ee:	e0 a0 0f cf 	rcall	8003048c <__avr32_f64_add>
8002e4f2:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e4f6:	e0 a0 0f cb 	rcall	8003048c <__avr32_f64_add>
8002e4fa:	40 48       	lddsp	r8,sp[0x10]
8002e4fc:	16 93       	mov	r3,r11
8002e4fe:	10 92       	mov	r2,r8
8002e500:	06 99       	mov	r9,r3
8002e502:	00 9a       	mov	r10,r0
8002e504:	02 9b       	mov	r11,r1
8002e506:	e0 a0 0e 09 	rcall	80030118 <__avr32_f64_mul>
8002e50a:	04 98       	mov	r8,r2
8002e50c:	06 99       	mov	r9,r3
8002e50e:	fa eb 00 24 	st.d	sp[36],r10
8002e512:	fa ea 00 14 	ld.d	r10,sp[20]
8002e516:	e0 a0 0e 01 	rcall	80030118 <__avr32_f64_mul>
8002e51a:	30 08       	mov	r8,0
8002e51c:	14 90       	mov	r0,r10
8002e51e:	16 91       	mov	r1,r11
8002e520:	04 9a       	mov	r10,r2
8002e522:	06 9b       	mov	r11,r3
8002e524:	fc 19 40 08 	movh	r9,0x4008
8002e528:	e0 a0 0e e4 	rcall	800302f0 <__avr32_f64_sub>
8002e52c:	fa e8 00 2c 	ld.d	r8,sp[44]
8002e530:	e0 a0 0e e0 	rcall	800302f0 <__avr32_f64_sub>
8002e534:	14 98       	mov	r8,r10
8002e536:	16 99       	mov	r9,r11
8002e538:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e53c:	e0 a0 0e da 	rcall	800302f0 <__avr32_f64_sub>
8002e540:	fa e8 00 04 	ld.d	r8,sp[4]
8002e544:	e0 a0 0d ea 	rcall	80030118 <__avr32_f64_mul>
8002e548:	14 98       	mov	r8,r10
8002e54a:	16 99       	mov	r9,r11
8002e54c:	00 9a       	mov	r10,r0
8002e54e:	02 9b       	mov	r11,r1
8002e550:	e0 a0 0f 9e 	rcall	8003048c <__avr32_f64_add>
8002e554:	16 91       	mov	r1,r11
8002e556:	14 90       	mov	r0,r10
8002e558:	14 98       	mov	r8,r10
8002e55a:	02 99       	mov	r9,r1
8002e55c:	fa ea 00 24 	ld.d	r10,sp[36]
8002e560:	e0 a0 0f 96 	rcall	8003048c <__avr32_f64_add>
8002e564:	40 4e       	lddsp	lr,sp[0x10]
8002e566:	16 93       	mov	r3,r11
8002e568:	1c 92       	mov	r2,lr
8002e56a:	1c 9a       	mov	r10,lr
8002e56c:	fc 18 e0 00 	movh	r8,0xe000
8002e570:	e0 69 c7 09 	mov	r9,50953
8002e574:	ea 19 3f ee 	orh	r9,0x3fee
8002e578:	06 9b       	mov	r11,r3
8002e57a:	e0 a0 0d cf 	rcall	80030118 <__avr32_f64_mul>
8002e57e:	e0 68 01 f5 	mov	r8,501
8002e582:	ea 18 14 5b 	orh	r8,0x145b
8002e586:	fa eb 00 14 	st.d	sp[20],r10
8002e58a:	e0 69 2f e0 	mov	r9,12256
8002e58e:	ea 19 be 3e 	orh	r9,0xbe3e
8002e592:	04 9a       	mov	r10,r2
8002e594:	06 9b       	mov	r11,r3
8002e596:	e0 a0 0d c1 	rcall	80030118 <__avr32_f64_mul>
8002e59a:	fa e8 00 24 	ld.d	r8,sp[36]
8002e59e:	fa eb 00 04 	st.d	sp[4],r10
8002e5a2:	04 9a       	mov	r10,r2
8002e5a4:	06 9b       	mov	r11,r3
8002e5a6:	e0 a0 0e a5 	rcall	800302f0 <__avr32_f64_sub>
8002e5aa:	14 98       	mov	r8,r10
8002e5ac:	16 99       	mov	r9,r11
8002e5ae:	00 9a       	mov	r10,r0
8002e5b0:	02 9b       	mov	r11,r1
8002e5b2:	e0 a0 0e 9f 	rcall	800302f0 <__avr32_f64_sub>
8002e5b6:	e0 68 03 fd 	mov	r8,1021
8002e5ba:	ea 18 dc 3a 	orh	r8,0xdc3a
8002e5be:	e0 69 c7 09 	mov	r9,50953
8002e5c2:	ea 19 3f ee 	orh	r9,0x3fee
8002e5c6:	e0 a0 0d a9 	rcall	80030118 <__avr32_f64_mul>
8002e5ca:	14 98       	mov	r8,r10
8002e5cc:	16 99       	mov	r9,r11
8002e5ce:	fa ea 00 04 	ld.d	r10,sp[4]
8002e5d2:	e0 a0 0f 5d 	rcall	8003048c <__avr32_f64_add>
8002e5d6:	4a 18       	lddpc	r8,8002e658 <__ieee754_pow+0x6f0>
8002e5d8:	f0 04 02 38 	ld.d	r8,r8[r4<<0x3]
8002e5dc:	e0 a0 0f 58 	rcall	8003048c <__avr32_f64_add>
8002e5e0:	40 0c       	lddsp	r12,sp[0x0]
8002e5e2:	fa eb 00 1c 	st.d	sp[28],r10
8002e5e6:	e0 a0 0f f4 	rcall	800305ce <__avr32_s32_to_f64>
8002e5ea:	49 d8       	lddpc	r8,8002e65c <__ieee754_pow+0x6f4>
8002e5ec:	14 90       	mov	r0,r10
8002e5ee:	16 91       	mov	r1,r11
8002e5f0:	f0 04 02 3a 	ld.d	r10,r8[r4<<0x3]
8002e5f4:	fa e8 00 1c 	ld.d	r8,sp[28]
8002e5f8:	fa eb 00 04 	st.d	sp[4],r10
8002e5fc:	fa ea 00 14 	ld.d	r10,sp[20]
8002e600:	e0 a0 0f 46 	rcall	8003048c <__avr32_f64_add>
8002e604:	fa e8 00 04 	ld.d	r8,sp[4]
8002e608:	e0 a0 0f 42 	rcall	8003048c <__avr32_f64_add>
8002e60c:	00 98       	mov	r8,r0
8002e60e:	02 99       	mov	r9,r1
8002e610:	e0 a0 0f 3e 	rcall	8003048c <__avr32_f64_add>
8002e614:	00 98       	mov	r8,r0
8002e616:	02 99       	mov	r9,r1
8002e618:	40 4a       	lddsp	r10,sp[0x10]
8002e61a:	16 93       	mov	r3,r11
8002e61c:	14 92       	mov	r2,r10
8002e61e:	06 9b       	mov	r11,r3
8002e620:	e0 a0 0e 68 	rcall	800302f0 <__avr32_f64_sub>
8002e624:	fa e8 00 04 	ld.d	r8,sp[4]
8002e628:	e0 a0 0e 64 	rcall	800302f0 <__avr32_f64_sub>
8002e62c:	fa e8 00 14 	ld.d	r8,sp[20]
8002e630:	e0 a0 0e 60 	rcall	800302f0 <__avr32_f64_sub>
8002e634:	14 98       	mov	r8,r10
8002e636:	16 99       	mov	r9,r11
8002e638:	fa ea 00 1c 	ld.d	r10,sp[28]
8002e63c:	e0 a0 0e 5a 	rcall	800302f0 <__avr32_f64_sub>
8002e640:	20 15       	sub	r5,1
8002e642:	40 d9       	lddsp	r9,sp[0x34]
8002e644:	14 90       	mov	r0,r10
8002e646:	16 91       	mov	r1,r11
8002e648:	12 45       	or	r5,r9
8002e64a:	c0 b0       	breq	8002e660 <__ieee754_pow+0x6f8>
8002e64c:	30 04       	mov	r4,0
8002e64e:	fc 15 3f f0 	movh	r5,0x3ff0
8002e652:	fa e5 00 0c 	st.d	sp[12],r4
8002e656:	c0 a8       	rjmp	8002e66a <__ieee754_pow+0x702>
8002e658:	80 03       	ld.sh	r3,r0[0x0]
8002e65a:	17 98       	ld.ub	r8,r11[0x1]
8002e65c:	80 03       	ld.sh	r3,r0[0x0]
8002e65e:	17 88       	ld.ub	r8,r11[0x0]
8002e660:	30 0a       	mov	r10,0
8002e662:	fc 1b bf f0 	movh	r11,0xbff0
8002e666:	fa eb 00 0c 	st.d	sp[12],r10
8002e66a:	0e 99       	mov	r9,r7
8002e66c:	30 08       	mov	r8,0
8002e66e:	0e 9b       	mov	r11,r7
8002e670:	fa e9 00 04 	st.d	sp[4],r8
8002e674:	0c 9a       	mov	r10,r6
8002e676:	e0 a0 0e 3d 	rcall	800302f0 <__avr32_f64_sub>
8002e67a:	04 98       	mov	r8,r2
8002e67c:	06 99       	mov	r9,r3
8002e67e:	e0 a0 0d 4d 	rcall	80030118 <__avr32_f64_mul>
8002e682:	00 98       	mov	r8,r0
8002e684:	14 94       	mov	r4,r10
8002e686:	16 95       	mov	r5,r11
8002e688:	02 99       	mov	r9,r1
8002e68a:	0e 9b       	mov	r11,r7
8002e68c:	0c 9a       	mov	r10,r6
8002e68e:	e0 a0 0d 45 	rcall	80030118 <__avr32_f64_mul>
8002e692:	14 98       	mov	r8,r10
8002e694:	16 99       	mov	r9,r11
8002e696:	08 9a       	mov	r10,r4
8002e698:	0a 9b       	mov	r11,r5
8002e69a:	e0 a0 0e f9 	rcall	8003048c <__avr32_f64_add>
8002e69e:	04 98       	mov	r8,r2
8002e6a0:	06 99       	mov	r9,r3
8002e6a2:	14 90       	mov	r0,r10
8002e6a4:	16 91       	mov	r1,r11
8002e6a6:	fa ea 00 04 	ld.d	r10,sp[4]
8002e6aa:	e0 a0 0d 37 	rcall	80030118 <__avr32_f64_mul>
8002e6ae:	14 94       	mov	r4,r10
8002e6b0:	16 95       	mov	r5,r11
8002e6b2:	08 98       	mov	r8,r4
8002e6b4:	00 9a       	mov	r10,r0
8002e6b6:	02 9b       	mov	r11,r1
8002e6b8:	0a 99       	mov	r9,r5
8002e6ba:	fa e5 00 04 	st.d	sp[4],r4
8002e6be:	e0 a0 0e e7 	rcall	8003048c <__avr32_f64_add>
8002e6c2:	e0 6e ff ff 	mov	lr,65535
8002e6c6:	ea 1e 40 8f 	orh	lr,0x408f
8002e6ca:	16 93       	mov	r3,r11
8002e6cc:	14 92       	mov	r2,r10
8002e6ce:	06 97       	mov	r7,r3
8002e6d0:	06 98       	mov	r8,r3
8002e6d2:	1c 33       	cp.w	r3,lr
8002e6d4:	e0 8a 00 36 	brle	8002e740 <__ieee754_pow+0x7d8>
8002e6d8:	fc 1a bf 70 	movh	r10,0xbf70
8002e6dc:	14 08       	add	r8,r10
8002e6de:	f1 e2 10 09 	or	r9,r8,r2
8002e6e2:	c1 a1       	brne	8002e716 <__ieee754_pow+0x7ae>
8002e6e4:	e0 68 82 fe 	mov	r8,33534
8002e6e8:	ea 18 65 2b 	orh	r8,0x652b
8002e6ec:	e0 69 15 47 	mov	r9,5447
8002e6f0:	ea 19 3c 97 	orh	r9,0x3c97
8002e6f4:	00 9a       	mov	r10,r0
8002e6f6:	02 9b       	mov	r11,r1
8002e6f8:	e0 a0 0e ca 	rcall	8003048c <__avr32_f64_add>
8002e6fc:	08 98       	mov	r8,r4
8002e6fe:	fa eb 00 14 	st.d	sp[20],r10
8002e702:	0a 99       	mov	r9,r5
8002e704:	04 9a       	mov	r10,r2
8002e706:	06 9b       	mov	r11,r3
8002e708:	e0 a0 0d f4 	rcall	800302f0 <__avr32_f64_sub>
8002e70c:	fa e8 00 14 	ld.d	r8,sp[20]
8002e710:	e0 a0 10 16 	rcall	8003073c <__avr32_f64_cmp_lt>
8002e714:	c4 40       	breq	8002e79c <__ieee754_pow+0x834>
8002e716:	e0 68 75 9c 	mov	r8,30108
8002e71a:	ea 18 88 00 	orh	r8,0x8800
8002e71e:	e0 69 e4 3c 	mov	r9,58428
8002e722:	ea 19 7e 37 	orh	r9,0x7e37
8002e726:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e72a:	e0 a0 0c f7 	rcall	80030118 <__avr32_f64_mul>
8002e72e:	e0 68 75 9c 	mov	r8,30108
8002e732:	ea 18 88 00 	orh	r8,0x8800
8002e736:	e0 69 e4 3c 	mov	r9,58428
8002e73a:	ea 19 7e 37 	orh	r9,0x7e37
8002e73e:	c5 59       	rjmp	8002e9e8 <__ieee754_pow+0xa80>
8002e740:	f9 d3 c0 1f 	bfextu	r12,r3,0x0,0x1f
8002e744:	e0 6e cb ff 	mov	lr,52223
8002e748:	ea 1e 40 90 	orh	lr,0x4090
8002e74c:	1c 3c       	cp.w	r12,lr
8002e74e:	e0 8a 00 27 	brle	8002e79c <__ieee754_pow+0x834>
8002e752:	e0 6c 34 00 	mov	r12,13312
8002e756:	ea 1c 3f 6f 	orh	r12,0x3f6f
8002e75a:	18 08       	add	r8,r12
8002e75c:	14 48       	or	r8,r10
8002e75e:	c0 a1       	brne	8002e772 <__ieee754_pow+0x80a>
8002e760:	08 98       	mov	r8,r4
8002e762:	0a 99       	mov	r9,r5
8002e764:	e0 a0 0d c6 	rcall	800302f0 <__avr32_f64_sub>
8002e768:	00 98       	mov	r8,r0
8002e76a:	02 99       	mov	r9,r1
8002e76c:	e0 a0 0f b4 	rcall	800306d4 <__avr32_f64_cmp_ge>
8002e770:	c1 60       	breq	8002e79c <__ieee754_pow+0x834>
8002e772:	e0 68 f3 59 	mov	r8,62297
8002e776:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e77a:	e0 69 6e 1f 	mov	r9,28191
8002e77e:	ea 19 01 a5 	orh	r9,0x1a5
8002e782:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e786:	e0 a0 0c c9 	rcall	80030118 <__avr32_f64_mul>
8002e78a:	e0 68 f3 59 	mov	r8,62297
8002e78e:	ea 18 c2 f8 	orh	r8,0xc2f8
8002e792:	e0 69 6e 1f 	mov	r9,28191
8002e796:	ea 19 01 a5 	orh	r9,0x1a5
8002e79a:	c2 79       	rjmp	8002e9e8 <__ieee754_pow+0xa80>
8002e79c:	f1 d7 c0 1f 	bfextu	r8,r7,0x0,0x1f
8002e7a0:	fc 1c 3f e0 	movh	r12,0x3fe0
8002e7a4:	18 38       	cp.w	r8,r12
8002e7a6:	e0 89 00 04 	brgt	8002e7ae <__ieee754_pow+0x846>
8002e7aa:	30 06       	mov	r6,0
8002e7ac:	c2 78       	rjmp	8002e7fa <__ieee754_pow+0x892>
8002e7ae:	fc 19 00 10 	movh	r9,0x10
8002e7b2:	b5 48       	asr	r8,0x14
8002e7b4:	f0 c8 03 fe 	sub	r8,r8,1022
8002e7b8:	f2 08 08 48 	asr	r8,r9,r8
8002e7bc:	0e 08       	add	r8,r7
8002e7be:	f3 d8 c0 14 	bfextu	r9,r8,0x0,0x14
8002e7c2:	b5 a9       	sbr	r9,0x14
8002e7c4:	f9 d8 c2 8b 	bfextu	r12,r8,0x14,0xb
8002e7c8:	30 0a       	mov	r10,0
8002e7ca:	f8 cc 03 ff 	sub	r12,r12,1023
8002e7ce:	f8 06 11 14 	rsub	r6,r12,20
8002e7d2:	f2 06 08 46 	asr	r6,r9,r6
8002e7d6:	ee 79 ff ff 	mov	r9,1048575
8002e7da:	f2 0c 08 4c 	asr	r12,r9,r12
8002e7de:	5c dc       	com	r12
8002e7e0:	f9 e8 00 0b 	and	r11,r12,r8
8002e7e4:	58 07       	cp.w	r7,0
8002e7e6:	fb b6 05 00 	rsublt	r6,0
8002e7ea:	14 98       	mov	r8,r10
8002e7ec:	16 99       	mov	r9,r11
8002e7ee:	08 9a       	mov	r10,r4
8002e7f0:	0a 9b       	mov	r11,r5
8002e7f2:	e0 a0 0d 7f 	rcall	800302f0 <__avr32_f64_sub>
8002e7f6:	fa eb 00 04 	st.d	sp[4],r10
8002e7fa:	fa e8 00 04 	ld.d	r8,sp[4]
8002e7fe:	00 9a       	mov	r10,r0
8002e800:	02 9b       	mov	r11,r1
8002e802:	e0 a0 0e 45 	rcall	8003048c <__avr32_f64_add>
8002e806:	30 04       	mov	r4,0
8002e808:	16 95       	mov	r5,r11
8002e80a:	30 08       	mov	r8,0
8002e80c:	e0 69 2e 43 	mov	r9,11843
8002e810:	ea 19 3f e6 	orh	r9,0x3fe6
8002e814:	08 9a       	mov	r10,r4
8002e816:	0a 9b       	mov	r11,r5
8002e818:	e0 a0 0c 80 	rcall	80030118 <__avr32_f64_mul>
8002e81c:	fa e8 00 04 	ld.d	r8,sp[4]
8002e820:	fa eb 00 14 	st.d	sp[20],r10
8002e824:	08 9a       	mov	r10,r4
8002e826:	0a 9b       	mov	r11,r5
8002e828:	e0 a0 0d 64 	rcall	800302f0 <__avr32_f64_sub>
8002e82c:	14 98       	mov	r8,r10
8002e82e:	16 99       	mov	r9,r11
8002e830:	00 9a       	mov	r10,r0
8002e832:	02 9b       	mov	r11,r1
8002e834:	e0 a0 0d 5e 	rcall	800302f0 <__avr32_f64_sub>
8002e838:	e0 68 39 ef 	mov	r8,14831
8002e83c:	ea 18 fe fa 	orh	r8,0xfefa
8002e840:	e0 69 2e 42 	mov	r9,11842
8002e844:	ea 19 3f e6 	orh	r9,0x3fe6
8002e848:	e0 a0 0c 68 	rcall	80030118 <__avr32_f64_mul>
8002e84c:	e0 68 6c 39 	mov	r8,27705
8002e850:	ea 18 0c a8 	orh	r8,0xca8
8002e854:	14 92       	mov	r2,r10
8002e856:	16 93       	mov	r3,r11
8002e858:	08 9a       	mov	r10,r4
8002e85a:	0a 9b       	mov	r11,r5
8002e85c:	e0 69 5c 61 	mov	r9,23649
8002e860:	ea 19 be 20 	orh	r9,0xbe20
8002e864:	e0 a0 0c 5a 	rcall	80030118 <__avr32_f64_mul>
8002e868:	14 98       	mov	r8,r10
8002e86a:	16 99       	mov	r9,r11
8002e86c:	04 9a       	mov	r10,r2
8002e86e:	06 9b       	mov	r11,r3
8002e870:	e0 a0 0e 0e 	rcall	8003048c <__avr32_f64_add>
8002e874:	16 93       	mov	r3,r11
8002e876:	14 92       	mov	r2,r10
8002e878:	14 98       	mov	r8,r10
8002e87a:	06 99       	mov	r9,r3
8002e87c:	fa ea 00 14 	ld.d	r10,sp[20]
8002e880:	e0 a0 0e 06 	rcall	8003048c <__avr32_f64_add>
8002e884:	fa e8 00 14 	ld.d	r8,sp[20]
8002e888:	14 94       	mov	r4,r10
8002e88a:	16 95       	mov	r5,r11
8002e88c:	e0 a0 0d 32 	rcall	800302f0 <__avr32_f64_sub>
8002e890:	14 98       	mov	r8,r10
8002e892:	16 99       	mov	r9,r11
8002e894:	04 9a       	mov	r10,r2
8002e896:	06 9b       	mov	r11,r3
8002e898:	e0 a0 0d 2c 	rcall	800302f0 <__avr32_f64_sub>
8002e89c:	08 98       	mov	r8,r4
8002e89e:	fa eb 00 04 	st.d	sp[4],r10
8002e8a2:	0a 99       	mov	r9,r5
8002e8a4:	08 9a       	mov	r10,r4
8002e8a6:	0a 9b       	mov	r11,r5
8002e8a8:	e0 a0 0c 38 	rcall	80030118 <__avr32_f64_mul>
8002e8ac:	e0 68 a4 d0 	mov	r8,42192
8002e8b0:	ea 18 72 be 	orh	r8,0x72be
8002e8b4:	14 92       	mov	r2,r10
8002e8b6:	16 93       	mov	r3,r11
8002e8b8:	e0 69 37 69 	mov	r9,14185
8002e8bc:	ea 19 3e 66 	orh	r9,0x3e66
8002e8c0:	e0 a0 0c 2c 	rcall	80030118 <__avr32_f64_mul>
8002e8c4:	e0 68 6b f1 	mov	r8,27633
8002e8c8:	ea 18 c5 d2 	orh	r8,0xc5d2
8002e8cc:	e0 69 bd 41 	mov	r9,48449
8002e8d0:	ea 19 3e bb 	orh	r9,0x3ebb
8002e8d4:	e0 a0 0d 0e 	rcall	800302f0 <__avr32_f64_sub>
8002e8d8:	14 98       	mov	r8,r10
8002e8da:	16 99       	mov	r9,r11
8002e8dc:	04 9a       	mov	r10,r2
8002e8de:	06 9b       	mov	r11,r3
8002e8e0:	e0 a0 0c 1c 	rcall	80030118 <__avr32_f64_mul>
8002e8e4:	e0 68 de 2c 	mov	r8,56876
8002e8e8:	ea 18 af 25 	orh	r8,0xaf25
8002e8ec:	e0 69 56 6a 	mov	r9,22122
8002e8f0:	ea 19 3f 11 	orh	r9,0x3f11
8002e8f4:	e0 a0 0d cc 	rcall	8003048c <__avr32_f64_add>
8002e8f8:	14 98       	mov	r8,r10
8002e8fa:	16 99       	mov	r9,r11
8002e8fc:	04 9a       	mov	r10,r2
8002e8fe:	06 9b       	mov	r11,r3
8002e900:	e0 a0 0c 0c 	rcall	80030118 <__avr32_f64_mul>
8002e904:	e0 68 bd 93 	mov	r8,48531
8002e908:	ea 18 16 be 	orh	r8,0x16be
8002e90c:	e0 69 c1 6c 	mov	r9,49516
8002e910:	ea 19 3f 66 	orh	r9,0x3f66
8002e914:	e0 a0 0c ee 	rcall	800302f0 <__avr32_f64_sub>
8002e918:	14 98       	mov	r8,r10
8002e91a:	16 99       	mov	r9,r11
8002e91c:	04 9a       	mov	r10,r2
8002e91e:	06 9b       	mov	r11,r3
8002e920:	e0 a0 0b fc 	rcall	80030118 <__avr32_f64_mul>
8002e924:	e0 68 55 3e 	mov	r8,21822
8002e928:	ea 18 55 55 	orh	r8,0x5555
8002e92c:	e0 69 55 55 	mov	r9,21845
8002e930:	ea 19 3f c5 	orh	r9,0x3fc5
8002e934:	e0 a0 0d ac 	rcall	8003048c <__avr32_f64_add>
8002e938:	14 98       	mov	r8,r10
8002e93a:	16 99       	mov	r9,r11
8002e93c:	04 9a       	mov	r10,r2
8002e93e:	06 9b       	mov	r11,r3
8002e940:	e0 a0 0b ec 	rcall	80030118 <__avr32_f64_mul>
8002e944:	14 98       	mov	r8,r10
8002e946:	16 99       	mov	r9,r11
8002e948:	08 9a       	mov	r10,r4
8002e94a:	0a 9b       	mov	r11,r5
8002e94c:	e0 a0 0c d2 	rcall	800302f0 <__avr32_f64_sub>
8002e950:	16 93       	mov	r3,r11
8002e952:	14 92       	mov	r2,r10
8002e954:	14 98       	mov	r8,r10
8002e956:	06 99       	mov	r9,r3
8002e958:	08 9a       	mov	r10,r4
8002e95a:	0a 9b       	mov	r11,r5
8002e95c:	e0 a0 0b de 	rcall	80030118 <__avr32_f64_mul>
8002e960:	30 08       	mov	r8,0
8002e962:	14 90       	mov	r0,r10
8002e964:	16 91       	mov	r1,r11
8002e966:	04 9a       	mov	r10,r2
8002e968:	06 9b       	mov	r11,r3
8002e96a:	fc 19 40 00 	movh	r9,0x4000
8002e96e:	e0 a0 0c c1 	rcall	800302f0 <__avr32_f64_sub>
8002e972:	14 98       	mov	r8,r10
8002e974:	16 99       	mov	r9,r11
8002e976:	00 9a       	mov	r10,r0
8002e978:	02 9b       	mov	r11,r1
8002e97a:	e0 a0 0f 15 	rcall	800307a4 <__avr32_f64_div>
8002e97e:	fa e8 00 04 	ld.d	r8,sp[4]
8002e982:	14 92       	mov	r2,r10
8002e984:	16 93       	mov	r3,r11
8002e986:	08 9a       	mov	r10,r4
8002e988:	0a 9b       	mov	r11,r5
8002e98a:	e0 a0 0b c7 	rcall	80030118 <__avr32_f64_mul>
8002e98e:	14 98       	mov	r8,r10
8002e990:	16 99       	mov	r9,r11
8002e992:	fa ea 00 04 	ld.d	r10,sp[4]
8002e996:	e0 a0 0d 7b 	rcall	8003048c <__avr32_f64_add>
8002e99a:	14 98       	mov	r8,r10
8002e99c:	16 99       	mov	r9,r11
8002e99e:	04 9a       	mov	r10,r2
8002e9a0:	06 9b       	mov	r11,r3
8002e9a2:	e0 a0 0c a7 	rcall	800302f0 <__avr32_f64_sub>
8002e9a6:	08 98       	mov	r8,r4
8002e9a8:	0a 99       	mov	r9,r5
8002e9aa:	e0 a0 0c a3 	rcall	800302f0 <__avr32_f64_sub>
8002e9ae:	14 98       	mov	r8,r10
8002e9b0:	16 99       	mov	r9,r11
8002e9b2:	30 0a       	mov	r10,0
8002e9b4:	fc 1b 3f f0 	movh	r11,0x3ff0
8002e9b8:	e0 a0 0c 9c 	rcall	800302f0 <__avr32_f64_sub>
8002e9bc:	ec 0c 15 14 	lsl	r12,r6,0x14
8002e9c0:	16 95       	mov	r5,r11
8002e9c2:	14 94       	mov	r4,r10
8002e9c4:	f8 05 00 08 	add	r8,r12,r5
8002e9c8:	f0 09 14 14 	asr	r9,r8,0x14
8002e9cc:	58 09       	cp.w	r9,0
8002e9ce:	e0 89 00 08 	brgt	8002e9de <__ieee754_pow+0xa76>
8002e9d2:	0c 9c       	mov	r12,r6
8002e9d4:	e0 a0 0b 28 	rcall	80030024 <scalbn>
8002e9d8:	14 98       	mov	r8,r10
8002e9da:	16 99       	mov	r9,r11
8002e9dc:	c0 48       	rjmp	8002e9e4 <__ieee754_pow+0xa7c>
8002e9de:	10 95       	mov	r5,r8
8002e9e0:	14 98       	mov	r8,r10
8002e9e2:	0a 99       	mov	r9,r5
8002e9e4:	fa ea 00 0c 	ld.d	r10,sp[12]
8002e9e8:	e0 a0 0b 98 	rcall	80030118 <__avr32_f64_mul>
8002e9ec:	16 97       	mov	r7,r11
8002e9ee:	14 96       	mov	r6,r10
8002e9f0:	c0 78       	rjmp	8002e9fe <__ieee754_pow+0xa96>
8002e9f2:	fc 17 3f f0 	movh	r7,0x3ff0
8002e9f6:	30 06       	mov	r6,0
8002e9f8:	c0 38       	rjmp	8002e9fe <__ieee754_pow+0xa96>
8002e9fa:	30 07       	mov	r7,0
8002e9fc:	0e 96       	mov	r6,r7
8002e9fe:	0e 9b       	mov	r11,r7
8002ea00:	0c 9a       	mov	r10,r6
8002ea02:	2f 2d       	sub	sp,-56
8002ea04:	d8 32       	popm	r0-r7,pc
8002ea06:	30 05       	mov	r5,0
8002ea08:	fe 9f fb 2b 	bral	8002e05e <__ieee754_pow+0xf6>

8002ea0c <__ieee754_rem_pio2>:
8002ea0c:	d4 31       	pushm	r0-r7,lr
8002ea0e:	20 ad       	sub	sp,40
8002ea10:	50 3b       	stdsp	sp[0xc],r11
8002ea12:	18 96       	mov	r6,r12
8002ea14:	14 98       	mov	r8,r10
8002ea16:	16 99       	mov	r9,r11
8002ea18:	14 92       	mov	r2,r10
8002ea1a:	16 93       	mov	r3,r11
8002ea1c:	eb db c0 1f 	bfextu	r5,r11,0x0,0x1f
8002ea20:	e0 6c 21 fb 	mov	r12,8699
8002ea24:	ea 1c 3f e9 	orh	r12,0x3fe9
8002ea28:	18 35       	cp.w	r5,r12
8002ea2a:	e0 89 00 0b 	brgt	8002ea40 <__ieee754_rem_pio2+0x34>
8002ea2e:	ec e9 00 00 	st.d	r6[0],r8
8002ea32:	30 07       	mov	r7,0
8002ea34:	30 08       	mov	r8,0
8002ea36:	30 09       	mov	r9,0
8002ea38:	ec e9 00 08 	st.d	r6[8],r8
8002ea3c:	e0 8f 02 1a 	bral	8002ee70 <__ieee754_rem_pio2+0x464>
8002ea40:	e0 6c d9 7b 	mov	r12,55675
8002ea44:	ea 1c 40 02 	orh	r12,0x4002
8002ea48:	18 35       	cp.w	r5,r12
8002ea4a:	e0 89 00 b6 	brgt	8002ebb6 <__ieee754_rem_pio2+0x1aa>
8002ea4e:	58 0b       	cp.w	r11,0
8002ea50:	e0 8a 00 59 	brle	8002eb02 <__ieee754_rem_pio2+0xf6>
8002ea54:	fc 18 54 40 	movh	r8,0x5440
8002ea58:	e0 69 21 fb 	mov	r9,8699
8002ea5c:	ea 19 3f f9 	orh	r9,0x3ff9
8002ea60:	e0 a0 0c 48 	rcall	800302f0 <__avr32_f64_sub>
8002ea64:	e0 68 21 fb 	mov	r8,8699
8002ea68:	ea 18 3f f9 	orh	r8,0x3ff9
8002ea6c:	14 92       	mov	r2,r10
8002ea6e:	16 93       	mov	r3,r11
8002ea70:	10 35       	cp.w	r5,r8
8002ea72:	c1 e0       	breq	8002eaae <__ieee754_rem_pio2+0xa2>
8002ea74:	e0 68 63 31 	mov	r8,25393
8002ea78:	ea 18 1a 62 	orh	r8,0x1a62
8002ea7c:	e0 69 b4 61 	mov	r9,46177
8002ea80:	ea 19 3d d0 	orh	r9,0x3dd0
8002ea84:	e0 a0 0c 36 	rcall	800302f0 <__avr32_f64_sub>
8002ea88:	14 94       	mov	r4,r10
8002ea8a:	16 95       	mov	r5,r11
8002ea8c:	08 98       	mov	r8,r4
8002ea8e:	0a 99       	mov	r9,r5
8002ea90:	04 9a       	mov	r10,r2
8002ea92:	06 9b       	mov	r11,r3
8002ea94:	ec e5 00 00 	st.d	r6[0],r4
8002ea98:	e0 a0 0c 2c 	rcall	800302f0 <__avr32_f64_sub>
8002ea9c:	e0 68 63 31 	mov	r8,25393
8002eaa0:	ea 18 1a 62 	orh	r8,0x1a62
8002eaa4:	e0 69 b4 61 	mov	r9,46177
8002eaa8:	ea 19 3d d0 	orh	r9,0x3dd0
8002eaac:	c2 78       	rjmp	8002eafa <__ieee754_rem_pio2+0xee>
8002eaae:	fc 18 1a 60 	movh	r8,0x1a60
8002eab2:	e0 69 b4 61 	mov	r9,46177
8002eab6:	ea 19 3d d0 	orh	r9,0x3dd0
8002eaba:	e0 a0 0c 1b 	rcall	800302f0 <__avr32_f64_sub>
8002eabe:	e0 68 70 73 	mov	r8,28787
8002eac2:	ea 18 2e 03 	orh	r8,0x2e03
8002eac6:	14 94       	mov	r4,r10
8002eac8:	16 95       	mov	r5,r11
8002eaca:	e0 69 19 8a 	mov	r9,6538
8002eace:	ea 19 3b a3 	orh	r9,0x3ba3
8002ead2:	e0 a0 0c 0f 	rcall	800302f0 <__avr32_f64_sub>
8002ead6:	14 92       	mov	r2,r10
8002ead8:	16 93       	mov	r3,r11
8002eada:	04 98       	mov	r8,r2
8002eadc:	06 99       	mov	r9,r3
8002eade:	08 9a       	mov	r10,r4
8002eae0:	0a 9b       	mov	r11,r5
8002eae2:	ec e3 00 00 	st.d	r6[0],r2
8002eae6:	e0 a0 0c 05 	rcall	800302f0 <__avr32_f64_sub>
8002eaea:	e0 68 70 73 	mov	r8,28787
8002eaee:	ea 18 2e 03 	orh	r8,0x2e03
8002eaf2:	e0 69 19 8a 	mov	r9,6538
8002eaf6:	ea 19 3b a3 	orh	r9,0x3ba3
8002eafa:	30 17       	mov	r7,1
8002eafc:	e0 a0 0b fa 	rcall	800302f0 <__avr32_f64_sub>
8002eb00:	c3 08       	rjmp	8002eb60 <__ieee754_rem_pio2+0x154>
8002eb02:	fc 18 54 40 	movh	r8,0x5440
8002eb06:	e0 69 21 fb 	mov	r9,8699
8002eb0a:	ea 19 3f f9 	orh	r9,0x3ff9
8002eb0e:	e0 a0 0c bf 	rcall	8003048c <__avr32_f64_add>
8002eb12:	e0 6c 21 fb 	mov	r12,8699
8002eb16:	ea 1c 3f f9 	orh	r12,0x3ff9
8002eb1a:	14 92       	mov	r2,r10
8002eb1c:	16 93       	mov	r3,r11
8002eb1e:	18 35       	cp.w	r5,r12
8002eb20:	c2 40       	breq	8002eb68 <__ieee754_rem_pio2+0x15c>
8002eb22:	e0 68 63 31 	mov	r8,25393
8002eb26:	ea 18 1a 62 	orh	r8,0x1a62
8002eb2a:	e0 69 b4 61 	mov	r9,46177
8002eb2e:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb32:	e0 a0 0c ad 	rcall	8003048c <__avr32_f64_add>
8002eb36:	14 94       	mov	r4,r10
8002eb38:	16 95       	mov	r5,r11
8002eb3a:	08 98       	mov	r8,r4
8002eb3c:	0a 99       	mov	r9,r5
8002eb3e:	04 9a       	mov	r10,r2
8002eb40:	06 9b       	mov	r11,r3
8002eb42:	ec e5 00 00 	st.d	r6[0],r4
8002eb46:	e0 a0 0b d5 	rcall	800302f0 <__avr32_f64_sub>
8002eb4a:	e0 68 63 31 	mov	r8,25393
8002eb4e:	ea 18 1a 62 	orh	r8,0x1a62
8002eb52:	e0 69 b4 61 	mov	r9,46177
8002eb56:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb5a:	3f f7       	mov	r7,-1
8002eb5c:	e0 a0 0c 98 	rcall	8003048c <__avr32_f64_add>
8002eb60:	ec eb 00 08 	st.d	r6[8],r10
8002eb64:	e0 8f 01 86 	bral	8002ee70 <__ieee754_rem_pio2+0x464>
8002eb68:	fc 18 1a 60 	movh	r8,0x1a60
8002eb6c:	e0 69 b4 61 	mov	r9,46177
8002eb70:	ea 19 3d d0 	orh	r9,0x3dd0
8002eb74:	e0 a0 0c 8c 	rcall	8003048c <__avr32_f64_add>
8002eb78:	e0 68 70 73 	mov	r8,28787
8002eb7c:	ea 18 2e 03 	orh	r8,0x2e03
8002eb80:	14 94       	mov	r4,r10
8002eb82:	16 95       	mov	r5,r11
8002eb84:	e0 69 19 8a 	mov	r9,6538
8002eb88:	ea 19 3b a3 	orh	r9,0x3ba3
8002eb8c:	e0 a0 0c 80 	rcall	8003048c <__avr32_f64_add>
8002eb90:	14 92       	mov	r2,r10
8002eb92:	16 93       	mov	r3,r11
8002eb94:	04 98       	mov	r8,r2
8002eb96:	06 99       	mov	r9,r3
8002eb98:	08 9a       	mov	r10,r4
8002eb9a:	0a 9b       	mov	r11,r5
8002eb9c:	ec e3 00 00 	st.d	r6[0],r2
8002eba0:	e0 a0 0b a8 	rcall	800302f0 <__avr32_f64_sub>
8002eba4:	e0 68 70 73 	mov	r8,28787
8002eba8:	ea 18 2e 03 	orh	r8,0x2e03
8002ebac:	e0 69 19 8a 	mov	r9,6538
8002ebb0:	ea 19 3b a3 	orh	r9,0x3ba3
8002ebb4:	cd 3b       	rjmp	8002eb5a <__ieee754_rem_pio2+0x14e>
8002ebb6:	e0 6c 21 fb 	mov	r12,8699
8002ebba:	ea 1c 41 39 	orh	r12,0x4139
8002ebbe:	18 35       	cp.w	r5,r12
8002ebc0:	e0 89 00 f4 	brgt	8002eda8 <__ieee754_rem_pio2+0x39c>
8002ebc4:	e0 a0 08 f4 	rcall	8002fdac <fabs>
8002ebc8:	e0 68 c8 83 	mov	r8,51331
8002ebcc:	ea 18 6d c9 	orh	r8,0x6dc9
8002ebd0:	14 92       	mov	r2,r10
8002ebd2:	16 93       	mov	r3,r11
8002ebd4:	e0 69 5f 30 	mov	r9,24368
8002ebd8:	ea 19 3f e4 	orh	r9,0x3fe4
8002ebdc:	e0 a0 0a 9e 	rcall	80030118 <__avr32_f64_mul>
8002ebe0:	30 08       	mov	r8,0
8002ebe2:	fc 19 3f e0 	movh	r9,0x3fe0
8002ebe6:	e0 a0 0c 53 	rcall	8003048c <__avr32_f64_add>
8002ebea:	e0 a0 0c db 	rcall	800305a0 <__avr32_f64_to_s32>
8002ebee:	18 97       	mov	r7,r12
8002ebf0:	e0 a0 0c ef 	rcall	800305ce <__avr32_s32_to_f64>
8002ebf4:	fc 18 54 40 	movh	r8,0x5440
8002ebf8:	e0 69 21 fb 	mov	r9,8699
8002ebfc:	ea 19 bf f9 	orh	r9,0xbff9
8002ec00:	fa eb 00 04 	st.d	sp[4],r10
8002ec04:	e0 a0 0a 8a 	rcall	80030118 <__avr32_f64_mul>
8002ec08:	14 98       	mov	r8,r10
8002ec0a:	16 99       	mov	r9,r11
8002ec0c:	04 9a       	mov	r10,r2
8002ec0e:	06 9b       	mov	r11,r3
8002ec10:	e0 a0 0c 3e 	rcall	8003048c <__avr32_f64_add>
8002ec14:	e0 68 63 31 	mov	r8,25393
8002ec18:	ea 18 1a 62 	orh	r8,0x1a62
8002ec1c:	14 92       	mov	r2,r10
8002ec1e:	16 93       	mov	r3,r11
8002ec20:	e0 69 b4 61 	mov	r9,46177
8002ec24:	ea 19 3d d0 	orh	r9,0x3dd0
8002ec28:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec2c:	e0 a0 0a 76 	rcall	80030118 <__avr32_f64_mul>
8002ec30:	14 90       	mov	r0,r10
8002ec32:	16 91       	mov	r1,r11
8002ec34:	59 f7       	cp.w	r7,31
8002ec36:	e0 89 00 0a 	brgt	8002ec4a <__ieee754_rem_pio2+0x23e>
8002ec3a:	ee c9 00 01 	sub	r9,r7,1
8002ec3e:	4d a8       	lddpc	r8,8002eda4 <__ieee754_rem_pio2+0x398>
8002ec40:	f0 09 03 28 	ld.w	r8,r8[r9<<0x2]
8002ec44:	10 35       	cp.w	r5,r8
8002ec46:	e0 81 00 8b 	brne	8002ed5c <__ieee754_rem_pio2+0x350>
8002ec4a:	00 98       	mov	r8,r0
8002ec4c:	02 99       	mov	r9,r1
8002ec4e:	04 9a       	mov	r10,r2
8002ec50:	06 9b       	mov	r11,r3
8002ec52:	e0 a0 0b 4f 	rcall	800302f0 <__avr32_f64_sub>
8002ec56:	ec eb 00 00 	st.d	r6[0],r10
8002ec5a:	ea 0c 14 14 	asr	r12,r5,0x14
8002ec5e:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002ec62:	f8 0b 01 0b 	sub	r11,r12,r11
8002ec66:	59 0b       	cp.w	r11,16
8002ec68:	e0 8a 00 82 	brle	8002ed6c <__ieee754_rem_pio2+0x360>
8002ec6c:	50 0c       	stdsp	sp[0x0],r12
8002ec6e:	fc 18 1a 60 	movh	r8,0x1a60
8002ec72:	e0 69 b4 61 	mov	r9,46177
8002ec76:	ea 19 3d d0 	orh	r9,0x3dd0
8002ec7a:	fa ea 00 04 	ld.d	r10,sp[4]
8002ec7e:	e0 a0 0a 4d 	rcall	80030118 <__avr32_f64_mul>
8002ec82:	16 91       	mov	r1,r11
8002ec84:	14 90       	mov	r0,r10
8002ec86:	14 98       	mov	r8,r10
8002ec88:	02 99       	mov	r9,r1
8002ec8a:	04 9a       	mov	r10,r2
8002ec8c:	06 9b       	mov	r11,r3
8002ec8e:	e0 a0 0b 31 	rcall	800302f0 <__avr32_f64_sub>
8002ec92:	16 95       	mov	r5,r11
8002ec94:	14 98       	mov	r8,r10
8002ec96:	14 94       	mov	r4,r10
8002ec98:	0a 99       	mov	r9,r5
8002ec9a:	04 9a       	mov	r10,r2
8002ec9c:	06 9b       	mov	r11,r3
8002ec9e:	e0 a0 0b 29 	rcall	800302f0 <__avr32_f64_sub>
8002eca2:	00 98       	mov	r8,r0
8002eca4:	02 99       	mov	r9,r1
8002eca6:	e0 a0 0b 25 	rcall	800302f0 <__avr32_f64_sub>
8002ecaa:	e0 68 70 73 	mov	r8,28787
8002ecae:	ea 18 2e 03 	orh	r8,0x2e03
8002ecb2:	14 92       	mov	r2,r10
8002ecb4:	16 93       	mov	r3,r11
8002ecb6:	e0 69 19 8a 	mov	r9,6538
8002ecba:	ea 19 3b a3 	orh	r9,0x3ba3
8002ecbe:	fa ea 00 04 	ld.d	r10,sp[4]
8002ecc2:	e0 a0 0a 2b 	rcall	80030118 <__avr32_f64_mul>
8002ecc6:	04 98       	mov	r8,r2
8002ecc8:	06 99       	mov	r9,r3
8002ecca:	e0 a0 0b 13 	rcall	800302f0 <__avr32_f64_sub>
8002ecce:	16 91       	mov	r1,r11
8002ecd0:	14 98       	mov	r8,r10
8002ecd2:	14 90       	mov	r0,r10
8002ecd4:	02 99       	mov	r9,r1
8002ecd6:	08 9a       	mov	r10,r4
8002ecd8:	0a 9b       	mov	r11,r5
8002ecda:	e0 a0 0b 0b 	rcall	800302f0 <__avr32_f64_sub>
8002ecde:	ec eb 00 00 	st.d	r6[0],r10
8002ece2:	40 0c       	lddsp	r12,sp[0x0]
8002ece4:	f7 db c2 8b 	bfextu	r11,r11,0x14,0xb
8002ece8:	16 1c       	sub	r12,r11
8002ecea:	e0 4c 00 31 	cp.w	r12,49
8002ecee:	e0 89 00 05 	brgt	8002ecf8 <__ieee754_rem_pio2+0x2ec>
8002ecf2:	08 92       	mov	r2,r4
8002ecf4:	0a 93       	mov	r3,r5
8002ecf6:	c3 b8       	rjmp	8002ed6c <__ieee754_rem_pio2+0x360>
8002ecf8:	fc 18 2e 00 	movh	r8,0x2e00
8002ecfc:	e0 69 19 8a 	mov	r9,6538
8002ed00:	ea 19 3b a3 	orh	r9,0x3ba3
8002ed04:	fa ea 00 04 	ld.d	r10,sp[4]
8002ed08:	e0 a0 0a 08 	rcall	80030118 <__avr32_f64_mul>
8002ed0c:	16 91       	mov	r1,r11
8002ed0e:	14 90       	mov	r0,r10
8002ed10:	14 98       	mov	r8,r10
8002ed12:	02 99       	mov	r9,r1
8002ed14:	08 9a       	mov	r10,r4
8002ed16:	0a 9b       	mov	r11,r5
8002ed18:	e0 a0 0a ec 	rcall	800302f0 <__avr32_f64_sub>
8002ed1c:	14 98       	mov	r8,r10
8002ed1e:	16 93       	mov	r3,r11
8002ed20:	14 92       	mov	r2,r10
8002ed22:	06 99       	mov	r9,r3
8002ed24:	08 9a       	mov	r10,r4
8002ed26:	0a 9b       	mov	r11,r5
8002ed28:	e0 a0 0a e4 	rcall	800302f0 <__avr32_f64_sub>
8002ed2c:	00 98       	mov	r8,r0
8002ed2e:	02 99       	mov	r9,r1
8002ed30:	e0 a0 0a e0 	rcall	800302f0 <__avr32_f64_sub>
8002ed34:	e0 68 49 c1 	mov	r8,18881
8002ed38:	ea 18 25 20 	orh	r8,0x2520
8002ed3c:	14 94       	mov	r4,r10
8002ed3e:	16 95       	mov	r5,r11
8002ed40:	e0 69 83 9a 	mov	r9,33690
8002ed44:	ea 19 39 7b 	orh	r9,0x397b
8002ed48:	fa ea 00 04 	ld.d	r10,sp[4]
8002ed4c:	e0 a0 09 e6 	rcall	80030118 <__avr32_f64_mul>
8002ed50:	08 98       	mov	r8,r4
8002ed52:	0a 99       	mov	r9,r5
8002ed54:	e0 a0 0a ce 	rcall	800302f0 <__avr32_f64_sub>
8002ed58:	14 90       	mov	r0,r10
8002ed5a:	16 91       	mov	r1,r11
8002ed5c:	00 98       	mov	r8,r0
8002ed5e:	02 99       	mov	r9,r1
8002ed60:	04 9a       	mov	r10,r2
8002ed62:	06 9b       	mov	r11,r3
8002ed64:	e0 a0 0a c6 	rcall	800302f0 <__avr32_f64_sub>
8002ed68:	ec eb 00 00 	st.d	r6[0],r10
8002ed6c:	ec e8 00 00 	ld.d	r8,r6[0]
8002ed70:	04 9a       	mov	r10,r2
8002ed72:	06 9b       	mov	r11,r3
8002ed74:	e0 a0 0a be 	rcall	800302f0 <__avr32_f64_sub>
8002ed78:	00 98       	mov	r8,r0
8002ed7a:	ec c5 ff f8 	sub	r5,r6,-8
8002ed7e:	02 99       	mov	r9,r1
8002ed80:	e0 a0 0a b8 	rcall	800302f0 <__avr32_f64_sub>
8002ed84:	ea eb 00 00 	st.d	r5[0],r10
8002ed88:	40 38       	lddsp	r8,sp[0xc]
8002ed8a:	58 08       	cp.w	r8,0
8002ed8c:	c7 24       	brge	8002ee70 <__ieee754_rem_pio2+0x464>
8002ed8e:	6c 08       	ld.w	r8,r6[0x0]
8002ed90:	ee 18 80 00 	eorh	r8,0x8000
8002ed94:	8d 08       	st.w	r6[0x0],r8
8002ed96:	5c 37       	neg	r7
8002ed98:	6a 08       	ld.w	r8,r5[0x0]
8002ed9a:	ee 18 80 00 	eorh	r8,0x8000
8002ed9e:	8b 08       	st.w	r5[0x0],r8
8002eda0:	c6 88       	rjmp	8002ee70 <__ieee754_rem_pio2+0x464>
8002eda2:	d7 03       	nop
8002eda4:	80 03       	ld.sh	r3,r0[0x0]
8002eda6:	17 b8       	ld.ub	r8,r11[0x3]
8002eda8:	e0 6c ff ff 	mov	r12,65535
8002edac:	ea 1c 7f ef 	orh	r12,0x7fef
8002edb0:	18 35       	cp.w	r5,r12
8002edb2:	e0 8a 00 08 	brle	8002edc2 <__ieee754_rem_pio2+0x3b6>
8002edb6:	30 07       	mov	r7,0
8002edb8:	e0 a0 0a 9c 	rcall	800302f0 <__avr32_f64_sub>
8002edbc:	ec eb 00 00 	st.d	r6[0],r10
8002edc0:	cd 0a       	rjmp	8002eb60 <__ieee754_rem_pio2+0x154>
8002edc2:	ea 03 14 14 	asr	r3,r5,0x14
8002edc6:	e6 c3 04 16 	sub	r3,r3,1046
8002edca:	e6 08 15 14 	lsl	r8,r3,0x14
8002edce:	ea 08 01 01 	sub	r1,r5,r8
8002edd2:	02 9b       	mov	r11,r1
8002edd4:	e0 a0 0b e6 	rcall	800305a0 <__avr32_f64_to_s32>
8002edd8:	e0 a0 0b fb 	rcall	800305ce <__avr32_s32_to_f64>
8002eddc:	14 94       	mov	r4,r10
8002edde:	16 95       	mov	r5,r11
8002ede0:	08 98       	mov	r8,r4
8002ede2:	0a 99       	mov	r9,r5
8002ede4:	fa e5 00 10 	st.d	sp[16],r4
8002ede8:	02 9b       	mov	r11,r1
8002edea:	04 9a       	mov	r10,r2
8002edec:	e0 a0 0a 82 	rcall	800302f0 <__avr32_f64_sub>
8002edf0:	30 08       	mov	r8,0
8002edf2:	fc 19 41 70 	movh	r9,0x4170
8002edf6:	e0 a0 09 91 	rcall	80030118 <__avr32_f64_mul>
8002edfa:	14 90       	mov	r0,r10
8002edfc:	16 91       	mov	r1,r11
8002edfe:	e0 a0 0b d1 	rcall	800305a0 <__avr32_f64_to_s32>
8002ee02:	e0 a0 0b e6 	rcall	800305ce <__avr32_s32_to_f64>
8002ee06:	16 95       	mov	r5,r11
8002ee08:	14 94       	mov	r4,r10
8002ee0a:	0a 99       	mov	r9,r5
8002ee0c:	08 98       	mov	r8,r4
8002ee0e:	fa e5 00 18 	st.d	sp[24],r4
8002ee12:	00 9a       	mov	r10,r0
8002ee14:	02 9b       	mov	r11,r1
8002ee16:	e0 a0 0a 6d 	rcall	800302f0 <__avr32_f64_sub>
8002ee1a:	30 08       	mov	r8,0
8002ee1c:	fc 19 41 70 	movh	r9,0x4170
8002ee20:	30 35       	mov	r5,3
8002ee22:	e0 a0 09 7b 	rcall	80030118 <__avr32_f64_mul>
8002ee26:	fa c7 ff d8 	sub	r7,sp,-40
8002ee2a:	af 2b       	st.d	--r7,r10
8002ee2c:	ee ea 00 00 	ld.d	r10,r7[0]
8002ee30:	0a 91       	mov	r1,r5
8002ee32:	20 87       	sub	r7,8
8002ee34:	20 15       	sub	r5,1
8002ee36:	30 08       	mov	r8,0
8002ee38:	30 09       	mov	r9,0
8002ee3a:	e0 a0 0c 3a 	rcall	800306ae <__avr32_f64_cmp_eq>
8002ee3e:	cf 71       	brne	8002ee2c <__ieee754_rem_pio2+0x420>
8002ee40:	48 e8       	lddpc	r8,8002ee78 <__ieee754_rem_pio2+0x46c>
8002ee42:	02 99       	mov	r9,r1
8002ee44:	1a d8       	st.w	--sp,r8
8002ee46:	06 9a       	mov	r10,r3
8002ee48:	30 28       	mov	r8,2
8002ee4a:	fa cc ff ec 	sub	r12,sp,-20
8002ee4e:	0c 9b       	mov	r11,r6
8002ee50:	cd 0d       	rcall	8002f1f0 <__kernel_rem_pio2>
8002ee52:	2f fd       	sub	sp,-4
8002ee54:	18 97       	mov	r7,r12
8002ee56:	40 38       	lddsp	r8,sp[0xc]
8002ee58:	58 08       	cp.w	r8,0
8002ee5a:	c0 b4       	brge	8002ee70 <__ieee754_rem_pio2+0x464>
8002ee5c:	6c 08       	ld.w	r8,r6[0x0]
8002ee5e:	ee 18 80 00 	eorh	r8,0x8000
8002ee62:	8d 08       	st.w	r6[0x0],r8
8002ee64:	5c 37       	neg	r7
8002ee66:	2f 86       	sub	r6,-8
8002ee68:	6c 08       	ld.w	r8,r6[0x0]
8002ee6a:	ee 18 80 00 	eorh	r8,0x8000
8002ee6e:	8d 08       	st.w	r6[0x0],r8
8002ee70:	0e 9c       	mov	r12,r7
8002ee72:	2f 6d       	sub	sp,-40
8002ee74:	d8 32       	popm	r0-r7,pc
8002ee76:	d7 03       	nop
8002ee78:	80 03       	ld.sh	r3,r0[0x0]
8002ee7a:	18 38       	cp.w	r8,r12

8002ee7c <__ieee754_sqrt>:
8002ee7c:	d4 31       	pushm	r0-r7,lr
8002ee7e:	fc 1e 7f f0 	movh	lr,0x7ff0
8002ee82:	16 9c       	mov	r12,r11
8002ee84:	14 96       	mov	r6,r10
8002ee86:	16 97       	mov	r7,r11
8002ee88:	14 94       	mov	r4,r10
8002ee8a:	16 95       	mov	r5,r11
8002ee8c:	16 99       	mov	r9,r11
8002ee8e:	14 98       	mov	r8,r10
8002ee90:	e6 1c 7f f0 	andh	r12,0x7ff0,COH
8002ee94:	1c 3c       	cp.w	r12,lr
8002ee96:	c0 c1       	brne	8002eeae <__ieee754_sqrt+0x32>
8002ee98:	14 98       	mov	r8,r10
8002ee9a:	16 99       	mov	r9,r11
8002ee9c:	e0 a0 09 3e 	rcall	80030118 <__avr32_f64_mul>
8002eea0:	14 98       	mov	r8,r10
8002eea2:	16 99       	mov	r9,r11
8002eea4:	0c 9a       	mov	r10,r6
8002eea6:	0e 9b       	mov	r11,r7
8002eea8:	e0 a0 0a f2 	rcall	8003048c <__avr32_f64_add>
8002eeac:	c1 38       	rjmp	8002eed2 <__ieee754_sqrt+0x56>
8002eeae:	58 0b       	cp.w	r11,0
8002eeb0:	e0 89 00 14 	brgt	8002eed8 <__ieee754_sqrt+0x5c>
8002eeb4:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8002eeb8:	14 4c       	or	r12,r10
8002eeba:	e0 80 00 a3 	breq	8002f000 <__ieee754_sqrt+0x184>
8002eebe:	58 0b       	cp.w	r11,0
8002eec0:	c0 c0       	breq	8002eed8 <__ieee754_sqrt+0x5c>
8002eec2:	14 98       	mov	r8,r10
8002eec4:	16 99       	mov	r9,r11
8002eec6:	e0 a0 0a 15 	rcall	800302f0 <__avr32_f64_sub>
8002eeca:	14 98       	mov	r8,r10
8002eecc:	16 99       	mov	r9,r11
8002eece:	e0 a0 0c 6b 	rcall	800307a4 <__avr32_f64_div>
8002eed2:	14 96       	mov	r6,r10
8002eed4:	16 97       	mov	r7,r11
8002eed6:	c9 58       	rjmp	8002f000 <__ieee754_sqrt+0x184>
8002eed8:	f2 0a 14 14 	asr	r10,r9,0x14
8002eedc:	c0 60       	breq	8002eee8 <__ieee754_sqrt+0x6c>
8002eede:	c1 88       	rjmp	8002ef0e <__ieee754_sqrt+0x92>
8002eee0:	f0 09 16 0b 	lsr	r9,r8,0xb
8002eee4:	21 5a       	sub	r10,21
8002eee6:	b5 78       	lsl	r8,0x15
8002eee8:	58 09       	cp.w	r9,0
8002eeea:	cf b0       	breq	8002eee0 <__ieee754_sqrt+0x64>
8002eeec:	30 0b       	mov	r11,0
8002eeee:	c0 38       	rjmp	8002eef4 <__ieee754_sqrt+0x78>
8002eef0:	a1 79       	lsl	r9,0x1
8002eef2:	2f fb       	sub	r11,-1
8002eef4:	ed b9 00 14 	bld	r9,0x14
8002eef8:	cf c1       	brne	8002eef0 <__ieee754_sqrt+0x74>
8002eefa:	2f fa       	sub	r10,-1
8002eefc:	f6 0c 11 20 	rsub	r12,r11,32
8002ef00:	16 1a       	sub	r10,r11
8002ef02:	f0 0c 0a 4c 	lsr	r12,r8,r12
8002ef06:	f0 0b 09 48 	lsl	r8,r8,r11
8002ef0a:	f9 e9 10 09 	or	r9,r12,r9
8002ef0e:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
8002ef12:	f4 c6 03 ff 	sub	r6,r10,1023
8002ef16:	b5 a9       	sbr	r9,0x14
8002ef18:	ed b6 00 00 	bld	r6,0x0
8002ef1c:	c0 61       	brne	8002ef28 <__ieee754_sqrt+0xac>
8002ef1e:	f0 0a 16 1f 	lsr	r10,r8,0x1f
8002ef22:	a1 78       	lsl	r8,0x1
8002ef24:	f4 09 00 19 	add	r9,r10,r9<<0x1
8002ef28:	30 07       	mov	r7,0
8002ef2a:	f0 0a 15 01 	lsl	r10,r8,0x1
8002ef2e:	0e 9c       	mov	r12,r7
8002ef30:	bf 98       	lsr	r8,0x1f
8002ef32:	fc 1b 00 20 	movh	r11,0x20
8002ef36:	f0 09 00 18 	add	r8,r8,r9<<0x1
8002ef3a:	0e 99       	mov	r9,r7
8002ef3c:	f2 0b 00 0e 	add	lr,r9,r11
8002ef40:	2f f7       	sub	r7,-1
8002ef42:	10 3e       	cp.w	lr,r8
8002ef44:	f1 de ea 18 	suble	r8,r8,lr
8002ef48:	f9 db ea 0c 	addle	r12,r12,r11
8002ef4c:	fd db ea 09 	addle	r9,lr,r11
8002ef50:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002ef54:	a1 9b       	lsr	r11,0x1
8002ef56:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002ef5a:	a1 7a       	lsl	r10,0x1
8002ef5c:	59 67       	cp.w	r7,22
8002ef5e:	ce f1       	brne	8002ef3c <__ieee754_sqrt+0xc0>
8002ef60:	30 07       	mov	r7,0
8002ef62:	fc 15 80 00 	movh	r5,0x8000
8002ef66:	0e 9b       	mov	r11,r7
8002ef68:	0e 94       	mov	r4,r7
8002ef6a:	0e 92       	mov	r2,r7
8002ef6c:	ea 04 00 0e 	add	lr,r5,r4
8002ef70:	10 39       	cp.w	r9,r8
8002ef72:	c0 95       	brlt	8002ef84 <__ieee754_sqrt+0x108>
8002ef74:	5f 03       	sreq	r3
8002ef76:	14 3e       	cp.w	lr,r10
8002ef78:	5f 81       	srls	r1
8002ef7a:	e3 e3 00 03 	and	r3,r1,r3
8002ef7e:	e4 03 18 00 	cp.b	r3,r2
8002ef82:	c1 70       	breq	8002efb0 <__ieee754_sqrt+0x134>
8002ef84:	1c 93       	mov	r3,lr
8002ef86:	fc 05 00 04 	add	r4,lr,r5
8002ef8a:	e6 13 80 00 	andh	r3,0x8000,COH
8002ef8e:	fc 11 80 00 	movh	r1,0x8000
8002ef92:	02 33       	cp.w	r3,r1
8002ef94:	c0 61       	brne	8002efa0 <__ieee754_sqrt+0x124>
8002ef96:	58 04       	cp.w	r4,0
8002ef98:	c0 45       	brlt	8002efa0 <__ieee754_sqrt+0x124>
8002ef9a:	f2 c3 ff ff 	sub	r3,r9,-1
8002ef9e:	c0 28       	rjmp	8002efa2 <__ieee754_sqrt+0x126>
8002efa0:	12 93       	mov	r3,r9
8002efa2:	12 18       	sub	r8,r9
8002efa4:	0a 0b       	add	r11,r5
8002efa6:	1c 3a       	cp.w	r10,lr
8002efa8:	f7 b8 03 01 	sublo	r8,1
8002efac:	06 99       	mov	r9,r3
8002efae:	1c 1a       	sub	r10,lr
8002efb0:	f4 0e 16 1f 	lsr	lr,r10,0x1f
8002efb4:	a1 95       	lsr	r5,0x1
8002efb6:	2f f7       	sub	r7,-1
8002efb8:	fc 08 00 18 	add	r8,lr,r8<<0x1
8002efbc:	a1 7a       	lsl	r10,0x1
8002efbe:	e0 47 00 20 	cp.w	r7,32
8002efc2:	cd 51       	brne	8002ef6c <__ieee754_sqrt+0xf0>
8002efc4:	14 48       	or	r8,r10
8002efc6:	c0 a0       	breq	8002efda <__ieee754_sqrt+0x15e>
8002efc8:	f1 db c0 01 	bfextu	r8,r11,0x0,0x1
8002efcc:	5b fb       	cp.w	r11,-1
8002efce:	f7 bc 00 ff 	subeq	r12,-1
8002efd2:	f9 bb 00 00 	moveq	r11,0
8002efd6:	f1 db e1 0b 	addne	r11,r8,r11
8002efda:	a1 9b       	lsr	r11,0x1
8002efdc:	16 99       	mov	r9,r11
8002efde:	bf b9       	sbr	r9,0x1f
8002efe0:	ec 0a 14 01 	asr	r10,r6,0x1
8002efe4:	f8 08 14 01 	asr	r8,r12,0x1
8002efe8:	b5 6a       	lsl	r10,0x14
8002efea:	f9 dc c0 01 	bfextu	r12,r12,0x0,0x1
8002efee:	f2 0b 17 10 	movne	r11,r9
8002eff2:	fc 19 3f e0 	movh	r9,0x3fe0
8002eff6:	16 96       	mov	r6,r11
8002eff8:	12 0a       	add	r10,r9
8002effa:	f4 08 00 08 	add	r8,r10,r8
8002effe:	10 97       	mov	r7,r8
8002f000:	0c 9a       	mov	r10,r6
8002f002:	0e 9b       	mov	r11,r7
8002f004:	d8 32       	popm	r0-r7,pc
8002f006:	d7 03       	nop

8002f008 <__kernel_cos>:
8002f008:	d4 31       	pushm	r0-r7,lr
8002f00a:	20 6d       	sub	sp,24
8002f00c:	fa e9 00 08 	st.d	sp[8],r8
8002f010:	14 92       	mov	r2,r10
8002f012:	16 93       	mov	r3,r11
8002f014:	14 96       	mov	r6,r10
8002f016:	ef db c0 1f 	bfextu	r7,r11,0x0,0x1f
8002f01a:	e0 69 ff ff 	mov	r9,65535
8002f01e:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f022:	12 37       	cp.w	r7,r9
8002f024:	e0 89 00 09 	brgt	8002f036 <__kernel_cos+0x2e>
8002f028:	e0 a0 0a bc 	rcall	800305a0 <__avr32_f64_to_s32>
8002f02c:	c0 51       	brne	8002f036 <__kernel_cos+0x2e>
8002f02e:	30 0a       	mov	r10,0
8002f030:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f034:	cd b8       	rjmp	8002f1ea <__kernel_cos+0x1e2>
8002f036:	04 98       	mov	r8,r2
8002f038:	06 99       	mov	r9,r3
8002f03a:	04 9a       	mov	r10,r2
8002f03c:	06 9b       	mov	r11,r3
8002f03e:	e0 a0 08 6d 	rcall	80030118 <__avr32_f64_mul>
8002f042:	e0 68 38 d4 	mov	r8,14548
8002f046:	ea 18 be 88 	orh	r8,0xbe88
8002f04a:	14 94       	mov	r4,r10
8002f04c:	16 95       	mov	r5,r11
8002f04e:	e0 69 fa e9 	mov	r9,64233
8002f052:	ea 19 bd a8 	orh	r9,0xbda8
8002f056:	e0 a0 08 61 	rcall	80030118 <__avr32_f64_mul>
8002f05a:	e0 68 b1 c4 	mov	r8,45508
8002f05e:	ea 18 bd b4 	orh	r8,0xbdb4
8002f062:	e0 69 ee 9e 	mov	r9,61086
8002f066:	ea 19 3e 21 	orh	r9,0x3e21
8002f06a:	e0 a0 0a 11 	rcall	8003048c <__avr32_f64_add>
8002f06e:	14 98       	mov	r8,r10
8002f070:	16 99       	mov	r9,r11
8002f072:	08 9a       	mov	r10,r4
8002f074:	0a 9b       	mov	r11,r5
8002f076:	e0 a0 08 51 	rcall	80030118 <__avr32_f64_mul>
8002f07a:	e0 68 52 ad 	mov	r8,21165
8002f07e:	ea 18 80 9c 	orh	r8,0x809c
8002f082:	e0 69 7e 4f 	mov	r9,32335
8002f086:	ea 19 3e 92 	orh	r9,0x3e92
8002f08a:	e0 a0 09 33 	rcall	800302f0 <__avr32_f64_sub>
8002f08e:	14 98       	mov	r8,r10
8002f090:	16 99       	mov	r9,r11
8002f092:	08 9a       	mov	r10,r4
8002f094:	0a 9b       	mov	r11,r5
8002f096:	e0 a0 08 41 	rcall	80030118 <__avr32_f64_mul>
8002f09a:	e0 68 15 90 	mov	r8,5520
8002f09e:	ea 18 19 cb 	orh	r8,0x19cb
8002f0a2:	e0 69 01 a0 	mov	r9,416
8002f0a6:	ea 19 3e fa 	orh	r9,0x3efa
8002f0aa:	e0 a0 09 f1 	rcall	8003048c <__avr32_f64_add>
8002f0ae:	14 98       	mov	r8,r10
8002f0b0:	16 99       	mov	r9,r11
8002f0b2:	08 9a       	mov	r10,r4
8002f0b4:	0a 9b       	mov	r11,r5
8002f0b6:	e0 a0 08 31 	rcall	80030118 <__avr32_f64_mul>
8002f0ba:	e0 68 51 77 	mov	r8,20855
8002f0be:	ea 18 16 c1 	orh	r8,0x16c1
8002f0c2:	e0 69 c1 6c 	mov	r9,49516
8002f0c6:	ea 19 3f 56 	orh	r9,0x3f56
8002f0ca:	e0 a0 09 13 	rcall	800302f0 <__avr32_f64_sub>
8002f0ce:	14 98       	mov	r8,r10
8002f0d0:	16 99       	mov	r9,r11
8002f0d2:	08 9a       	mov	r10,r4
8002f0d4:	0a 9b       	mov	r11,r5
8002f0d6:	e0 a0 08 21 	rcall	80030118 <__avr32_f64_mul>
8002f0da:	e0 68 55 4c 	mov	r8,21836
8002f0de:	ea 18 55 55 	orh	r8,0x5555
8002f0e2:	e0 69 55 55 	mov	r9,21845
8002f0e6:	ea 19 3f a5 	orh	r9,0x3fa5
8002f0ea:	e0 a0 09 d1 	rcall	8003048c <__avr32_f64_add>
8002f0ee:	14 98       	mov	r8,r10
8002f0f0:	16 99       	mov	r9,r11
8002f0f2:	08 9a       	mov	r10,r4
8002f0f4:	0a 9b       	mov	r11,r5
8002f0f6:	e0 a0 08 11 	rcall	80030118 <__avr32_f64_mul>
8002f0fa:	fa eb 00 00 	st.d	sp[0],r10
8002f0fe:	e0 68 33 32 	mov	r8,13106
8002f102:	ea 18 3f d3 	orh	r8,0x3fd3
8002f106:	10 37       	cp.w	r7,r8
8002f108:	e0 89 00 2b 	brgt	8002f15e <__kernel_cos+0x156>
8002f10c:	30 08       	mov	r8,0
8002f10e:	fc 19 3f e0 	movh	r9,0x3fe0
8002f112:	08 9a       	mov	r10,r4
8002f114:	0a 9b       	mov	r11,r5
8002f116:	e0 a0 08 01 	rcall	80030118 <__avr32_f64_mul>
8002f11a:	fa e8 00 00 	ld.d	r8,sp[0]
8002f11e:	14 90       	mov	r0,r10
8002f120:	16 91       	mov	r1,r11
8002f122:	08 9a       	mov	r10,r4
8002f124:	0a 9b       	mov	r11,r5
8002f126:	e0 a0 07 f9 	rcall	80030118 <__avr32_f64_mul>
8002f12a:	fa e8 00 08 	ld.d	r8,sp[8]
8002f12e:	16 97       	mov	r7,r11
8002f130:	14 96       	mov	r6,r10
8002f132:	06 9b       	mov	r11,r3
8002f134:	04 9a       	mov	r10,r2
8002f136:	e0 a0 07 f1 	rcall	80030118 <__avr32_f64_mul>
8002f13a:	14 98       	mov	r8,r10
8002f13c:	16 99       	mov	r9,r11
8002f13e:	0c 9a       	mov	r10,r6
8002f140:	0e 9b       	mov	r11,r7
8002f142:	e0 a0 08 d7 	rcall	800302f0 <__avr32_f64_sub>
8002f146:	14 98       	mov	r8,r10
8002f148:	16 99       	mov	r9,r11
8002f14a:	00 9a       	mov	r10,r0
8002f14c:	02 9b       	mov	r11,r1
8002f14e:	e0 a0 08 d1 	rcall	800302f0 <__avr32_f64_sub>
8002f152:	14 98       	mov	r8,r10
8002f154:	16 99       	mov	r9,r11
8002f156:	30 0a       	mov	r10,0
8002f158:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f15c:	c4 58       	rjmp	8002f1e6 <__kernel_cos+0x1de>
8002f15e:	fc 19 3f e9 	movh	r9,0x3fe9
8002f162:	12 37       	cp.w	r7,r9
8002f164:	e0 8a 00 06 	brle	8002f170 <__kernel_cos+0x168>
8002f168:	30 06       	mov	r6,0
8002f16a:	fc 17 3f d2 	movh	r7,0x3fd2
8002f16e:	c0 88       	rjmp	8002f17e <__kernel_cos+0x176>
8002f170:	fc 1a ff e0 	movh	r10,0xffe0
8002f174:	30 08       	mov	r8,0
8002f176:	ee 0a 00 09 	add	r9,r7,r10
8002f17a:	10 96       	mov	r6,r8
8002f17c:	12 97       	mov	r7,r9
8002f17e:	0c 98       	mov	r8,r6
8002f180:	0e 99       	mov	r9,r7
8002f182:	30 0a       	mov	r10,0
8002f184:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f188:	e0 a0 08 b4 	rcall	800302f0 <__avr32_f64_sub>
8002f18c:	30 08       	mov	r8,0
8002f18e:	fa eb 00 10 	st.d	sp[16],r10
8002f192:	fc 19 3f e0 	movh	r9,0x3fe0
8002f196:	08 9a       	mov	r10,r4
8002f198:	0a 9b       	mov	r11,r5
8002f19a:	e0 a0 07 bf 	rcall	80030118 <__avr32_f64_mul>
8002f19e:	0c 98       	mov	r8,r6
8002f1a0:	0e 99       	mov	r9,r7
8002f1a2:	e0 a0 08 a7 	rcall	800302f0 <__avr32_f64_sub>
8002f1a6:	fa e8 00 00 	ld.d	r8,sp[0]
8002f1aa:	14 90       	mov	r0,r10
8002f1ac:	16 91       	mov	r1,r11
8002f1ae:	08 9a       	mov	r10,r4
8002f1b0:	0a 9b       	mov	r11,r5
8002f1b2:	e0 a0 07 b3 	rcall	80030118 <__avr32_f64_mul>
8002f1b6:	fa e8 00 08 	ld.d	r8,sp[8]
8002f1ba:	16 97       	mov	r7,r11
8002f1bc:	14 96       	mov	r6,r10
8002f1be:	06 9b       	mov	r11,r3
8002f1c0:	04 9a       	mov	r10,r2
8002f1c2:	e0 a0 07 ab 	rcall	80030118 <__avr32_f64_mul>
8002f1c6:	14 98       	mov	r8,r10
8002f1c8:	16 99       	mov	r9,r11
8002f1ca:	0c 9a       	mov	r10,r6
8002f1cc:	0e 9b       	mov	r11,r7
8002f1ce:	e0 a0 08 91 	rcall	800302f0 <__avr32_f64_sub>
8002f1d2:	14 98       	mov	r8,r10
8002f1d4:	16 99       	mov	r9,r11
8002f1d6:	00 9a       	mov	r10,r0
8002f1d8:	02 9b       	mov	r11,r1
8002f1da:	e0 a0 08 8b 	rcall	800302f0 <__avr32_f64_sub>
8002f1de:	14 98       	mov	r8,r10
8002f1e0:	16 99       	mov	r9,r11
8002f1e2:	fa ea 00 10 	ld.d	r10,sp[16]
8002f1e6:	e0 a0 08 85 	rcall	800302f0 <__avr32_f64_sub>
8002f1ea:	2f ad       	sub	sp,-24
8002f1ec:	d8 32       	popm	r0-r7,pc
8002f1ee:	d7 03       	nop

8002f1f0 <__kernel_rem_pio2>:
8002f1f0:	d4 31       	pushm	r0-r7,lr
8002f1f2:	fa cd 02 70 	sub	sp,sp,624
8002f1f6:	50 b9       	stdsp	sp[0x2c],r9
8002f1f8:	fa f9 02 94 	ld.w	r9,sp[660]
8002f1fc:	50 68       	stdsp	sp[0x18],r8
8002f1fe:	50 c9       	stdsp	sp[0x30],r9
8002f200:	16 94       	mov	r4,r11
8002f202:	40 b8       	lddsp	r8,sp[0x2c]
8002f204:	4b e9       	lddpc	r9,8002f2fc <__kernel_rem_pio2+0x10c>
8002f206:	20 18       	sub	r8,1
8002f208:	40 6b       	lddsp	r11,sp[0x18]
8002f20a:	f2 0b 03 29 	ld.w	r9,r9[r11<<0x2]
8002f20e:	50 58       	stdsp	sp[0x14],r8
8002f210:	50 39       	stdsp	sp[0xc],r9
8002f212:	30 08       	mov	r8,0
8002f214:	f4 c9 00 03 	sub	r9,r10,3
8002f218:	10 97       	mov	r7,r8
8002f21a:	31 83       	mov	r3,24
8002f21c:	f2 03 0c 02 	divs	r2,r9,r3
8002f220:	f0 02 0c 48 	max	r8,r8,r2
8002f224:	40 59       	lddsp	r9,sp[0x14]
8002f226:	10 96       	mov	r6,r8
8002f228:	10 93       	mov	r3,r8
8002f22a:	50 78       	stdsp	sp[0x1c],r8
8002f22c:	40 31       	lddsp	r1,sp[0xc]
8002f22e:	5c d6       	com	r6
8002f230:	12 13       	sub	r3,r9
8002f232:	ec 06 00 16 	add	r6,r6,r6<<0x1
8002f236:	40 c8       	lddsp	r8,sp[0x30]
8002f238:	50 ac       	stdsp	sp[0x28],r12
8002f23a:	12 01       	add	r1,r9
8002f23c:	f4 06 00 36 	add	r6,r10,r6<<0x3
8002f240:	fa c2 fe 80 	sub	r2,sp,-384
8002f244:	f0 03 00 25 	add	r5,r8,r3<<0x2
8002f248:	c0 d8       	rjmp	8002f262 <__kernel_rem_pio2+0x72>
8002f24a:	ee 03 00 08 	add	r8,r7,r3
8002f24e:	c0 47       	brpl	8002f256 <__kernel_rem_pio2+0x66>
8002f250:	30 0a       	mov	r10,0
8002f252:	30 0b       	mov	r11,0
8002f254:	c0 48       	rjmp	8002f25c <__kernel_rem_pio2+0x6c>
8002f256:	6a 0c       	ld.w	r12,r5[0x0]
8002f258:	e0 a0 09 bb 	rcall	800305ce <__avr32_s32_to_f64>
8002f25c:	a5 2a       	st.d	r2++,r10
8002f25e:	2f f7       	sub	r7,-1
8002f260:	2f c5       	sub	r5,-4
8002f262:	02 37       	cp.w	r7,r1
8002f264:	fe 9a ff f3 	brle	8002f24a <__kernel_rem_pio2+0x5a>
8002f268:	fa c0 ff c0 	sub	r0,sp,-64
8002f26c:	40 53       	lddsp	r3,sp[0x14]
8002f26e:	30 02       	mov	r2,0
8002f270:	fa cc fe 80 	sub	r12,sp,-384
8002f274:	0c 95       	mov	r5,r6
8002f276:	c1 b8       	rjmp	8002f2ac <__kernel_rem_pio2+0xbc>
8002f278:	ee e8 00 00 	ld.d	r8,r7[0]
8002f27c:	50 0c       	stdsp	sp[0x0],r12
8002f27e:	20 87       	sub	r7,8
8002f280:	a3 0b       	ld.d	r10,r1++
8002f282:	e0 a0 07 4b 	rcall	80030118 <__avr32_f64_mul>
8002f286:	14 98       	mov	r8,r10
8002f288:	16 99       	mov	r9,r11
8002f28a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f28e:	e0 a0 08 ff 	rcall	8003048c <__avr32_f64_add>
8002f292:	2f f6       	sub	r6,-1
8002f294:	fa eb 00 04 	st.d	sp[4],r10
8002f298:	40 0c       	lddsp	r12,sp[0x0]
8002f29a:	40 5b       	lddsp	r11,sp[0x14]
8002f29c:	16 36       	cp.w	r6,r11
8002f29e:	fe 9a ff ed 	brle	8002f278 <__kernel_rem_pio2+0x88>
8002f2a2:	fa e8 00 04 	ld.d	r8,sp[4]
8002f2a6:	2f f2       	sub	r2,-1
8002f2a8:	a1 28       	st.d	r0++,r8
8002f2aa:	2f f3       	sub	r3,-1
8002f2ac:	40 38       	lddsp	r8,sp[0xc]
8002f2ae:	10 32       	cp.w	r2,r8
8002f2b0:	e0 89 00 0b 	brgt	8002f2c6 <__kernel_rem_pio2+0xd6>
8002f2b4:	30 0a       	mov	r10,0
8002f2b6:	30 0b       	mov	r11,0
8002f2b8:	40 a1       	lddsp	r1,sp[0x28]
8002f2ba:	f8 03 00 37 	add	r7,r12,r3<<0x3
8002f2be:	fa eb 00 04 	st.d	sp[4],r10
8002f2c2:	30 06       	mov	r6,0
8002f2c4:	ce bb       	rjmp	8002f29a <__kernel_rem_pio2+0xaa>
8002f2c6:	40 38       	lddsp	r8,sp[0xc]
8002f2c8:	fa ca fd e0 	sub	r10,sp,-544
8002f2cc:	20 18       	sub	r8,1
8002f2ce:	0a 96       	mov	r6,r5
8002f2d0:	f4 08 00 2a 	add	r10,r10,r8<<0x2
8002f2d4:	40 37       	lddsp	r7,sp[0xc]
8002f2d6:	50 fa       	stdsp	sp[0x3c],r10
8002f2d8:	50 e4       	stdsp	sp[0x38],r4
8002f2da:	fa c9 fd 90 	sub	r9,sp,-624
8002f2de:	f2 07 00 38 	add	r8,r9,r7<<0x3
8002f2e2:	ee c5 00 01 	sub	r5,r7,1
8002f2e6:	f0 e2 fd d0 	ld.d	r2,r8[-560]
8002f2ea:	fa c1 fd e0 	sub	r1,sp,-544
8002f2ee:	fa c8 ff c0 	sub	r8,sp,-64
8002f2f2:	50 11       	stdsp	sp[0x4],r1
8002f2f4:	f0 05 00 34 	add	r4,r8,r5<<0x3
8002f2f8:	0e 90       	mov	r0,r7
8002f2fa:	c2 58       	rjmp	8002f344 <__kernel_rem_pio2+0x154>
8002f2fc:	80 03       	ld.sh	r3,r0[0x0]
8002f2fe:	19 40       	ld.w	r0,--r12
8002f300:	e0 a0 07 0c 	rcall	80030118 <__avr32_f64_mul>
8002f304:	e0 a0 09 4e 	rcall	800305a0 <__avr32_f64_to_s32>
8002f308:	e0 a0 09 63 	rcall	800305ce <__avr32_s32_to_f64>
8002f30c:	30 08       	mov	r8,0
8002f30e:	fc 19 c1 70 	movh	r9,0xc170
8002f312:	fa eb 00 20 	st.d	sp[32],r10
8002f316:	e0 a0 07 01 	rcall	80030118 <__avr32_f64_mul>
8002f31a:	14 98       	mov	r8,r10
8002f31c:	16 99       	mov	r9,r11
8002f31e:	04 9a       	mov	r10,r2
8002f320:	06 9b       	mov	r11,r3
8002f322:	e0 a0 08 b5 	rcall	8003048c <__avr32_f64_add>
8002f326:	e0 a0 09 3d 	rcall	800305a0 <__avr32_f64_to_s32>
8002f32a:	40 1a       	lddsp	r10,sp[0x4]
8002f32c:	14 ac       	st.w	r10++,r12
8002f32e:	e8 e8 00 00 	ld.d	r8,r4[0]
8002f332:	50 1a       	stdsp	sp[0x4],r10
8002f334:	20 10       	sub	r0,1
8002f336:	fa ea 00 20 	ld.d	r10,sp[32]
8002f33a:	20 84       	sub	r4,8
8002f33c:	e0 a0 08 a8 	rcall	8003048c <__avr32_f64_add>
8002f340:	14 92       	mov	r2,r10
8002f342:	16 93       	mov	r3,r11
8002f344:	30 08       	mov	r8,0
8002f346:	fc 19 3e 70 	movh	r9,0x3e70
8002f34a:	04 9a       	mov	r10,r2
8002f34c:	06 9b       	mov	r11,r3
8002f34e:	58 00       	cp.w	r0,0
8002f350:	fe 99 ff d8 	brgt	8002f300 <__kernel_rem_pio2+0x110>
8002f354:	0c 9c       	mov	r12,r6
8002f356:	e0 a0 06 67 	rcall	80030024 <scalbn>
8002f35a:	30 08       	mov	r8,0
8002f35c:	fc 19 3f c0 	movh	r9,0x3fc0
8002f360:	14 92       	mov	r2,r10
8002f362:	16 93       	mov	r3,r11
8002f364:	e0 a0 06 da 	rcall	80030118 <__avr32_f64_mul>
8002f368:	e0 a0 05 2e 	rcall	8002fdc4 <floor>
8002f36c:	30 08       	mov	r8,0
8002f36e:	fc 19 c0 20 	movh	r9,0xc020
8002f372:	e0 a0 06 d3 	rcall	80030118 <__avr32_f64_mul>
8002f376:	14 98       	mov	r8,r10
8002f378:	16 99       	mov	r9,r11
8002f37a:	04 9a       	mov	r10,r2
8002f37c:	06 9b       	mov	r11,r3
8002f37e:	e0 a0 08 87 	rcall	8003048c <__avr32_f64_add>
8002f382:	14 92       	mov	r2,r10
8002f384:	16 93       	mov	r3,r11
8002f386:	e0 a0 09 0d 	rcall	800305a0 <__avr32_f64_to_s32>
8002f38a:	18 90       	mov	r0,r12
8002f38c:	e0 a0 09 21 	rcall	800305ce <__avr32_s32_to_f64>
8002f390:	14 98       	mov	r8,r10
8002f392:	16 99       	mov	r9,r11
8002f394:	04 9a       	mov	r10,r2
8002f396:	06 9b       	mov	r11,r3
8002f398:	e0 a0 07 ac 	rcall	800302f0 <__avr32_f64_sub>
8002f39c:	fa eb 00 04 	st.d	sp[4],r10
8002f3a0:	58 06       	cp.w	r6,0
8002f3a2:	e0 8a 00 18 	brle	8002f3d2 <__kernel_rem_pio2+0x1e2>
8002f3a6:	fa c8 fd 90 	sub	r8,sp,-624
8002f3aa:	ec 0b 11 18 	rsub	r11,r6,24
8002f3ae:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f3b2:	ec 0c 11 17 	rsub	r12,r6,23
8002f3b6:	f2 fa ff b0 	ld.w	r10,r9[-80]
8002f3ba:	f4 0b 08 48 	asr	r8,r10,r11
8002f3be:	f0 0b 09 4b 	lsl	r11,r8,r11
8002f3c2:	10 00       	add	r0,r8
8002f3c4:	f4 0b 01 0b 	sub	r11,r10,r11
8002f3c8:	f3 4b ff b0 	st.w	r9[-80],r11
8002f3cc:	f6 0c 08 44 	asr	r4,r11,r12
8002f3d0:	c1 58       	rjmp	8002f3fa <__kernel_rem_pio2+0x20a>
8002f3d2:	58 06       	cp.w	r6,0
8002f3d4:	c0 91       	brne	8002f3e6 <__kernel_rem_pio2+0x1f6>
8002f3d6:	fa cb fd 90 	sub	r11,sp,-624
8002f3da:	f6 05 00 28 	add	r8,r11,r5<<0x2
8002f3de:	f0 f4 ff b0 	ld.w	r4,r8[-80]
8002f3e2:	b7 54       	asr	r4,0x17
8002f3e4:	c0 b8       	rjmp	8002f3fa <__kernel_rem_pio2+0x20a>
8002f3e6:	30 08       	mov	r8,0
8002f3e8:	fc 19 3f e0 	movh	r9,0x3fe0
8002f3ec:	e0 a0 09 74 	rcall	800306d4 <__avr32_f64_cmp_ge>
8002f3f0:	c0 31       	brne	8002f3f6 <__kernel_rem_pio2+0x206>
8002f3f2:	30 04       	mov	r4,0
8002f3f4:	c5 58       	rjmp	8002f49e <__kernel_rem_pio2+0x2ae>
8002f3f6:	30 24       	mov	r4,2
8002f3f8:	c0 48       	rjmp	8002f400 <__kernel_rem_pio2+0x210>
8002f3fa:	58 04       	cp.w	r4,0
8002f3fc:	e0 8a 00 51 	brle	8002f49e <__kernel_rem_pio2+0x2ae>
8002f400:	30 08       	mov	r8,0
8002f402:	2f f0       	sub	r0,-1
8002f404:	10 93       	mov	r3,r8
8002f406:	c1 48       	rjmp	8002f42e <__kernel_rem_pio2+0x23e>
8002f408:	62 09       	ld.w	r9,r1[0x0]
8002f40a:	58 03       	cp.w	r3,0
8002f40c:	c0 81       	brne	8002f41c <__kernel_rem_pio2+0x22c>
8002f40e:	58 09       	cp.w	r9,0
8002f410:	c0 d0       	breq	8002f42a <__kernel_rem_pio2+0x23a>
8002f412:	fc 1a 01 00 	movh	r10,0x100
8002f416:	12 1a       	sub	r10,r9
8002f418:	83 0a       	st.w	r1[0x0],r10
8002f41a:	c0 78       	rjmp	8002f428 <__kernel_rem_pio2+0x238>
8002f41c:	e0 6b ff ff 	mov	r11,65535
8002f420:	ea 1b 00 ff 	orh	r11,0xff
8002f424:	12 1b       	sub	r11,r9
8002f426:	83 0b       	st.w	r1[0x0],r11
8002f428:	30 13       	mov	r3,1
8002f42a:	2f f8       	sub	r8,-1
8002f42c:	2f c1       	sub	r1,-4
8002f42e:	0e 38       	cp.w	r8,r7
8002f430:	ce c5       	brlt	8002f408 <__kernel_rem_pio2+0x218>
8002f432:	58 06       	cp.w	r6,0
8002f434:	e0 8a 00 1a 	brle	8002f468 <__kernel_rem_pio2+0x278>
8002f438:	58 16       	cp.w	r6,1
8002f43a:	c0 40       	breq	8002f442 <__kernel_rem_pio2+0x252>
8002f43c:	58 26       	cp.w	r6,2
8002f43e:	c1 51       	brne	8002f468 <__kernel_rem_pio2+0x278>
8002f440:	c0 a8       	rjmp	8002f454 <__kernel_rem_pio2+0x264>
8002f442:	fa ca fd 90 	sub	r10,sp,-624
8002f446:	f4 05 00 28 	add	r8,r10,r5<<0x2
8002f44a:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f44e:	f3 d9 c0 17 	bfextu	r9,r9,0x0,0x17
8002f452:	c0 98       	rjmp	8002f464 <__kernel_rem_pio2+0x274>
8002f454:	fa c9 fd 90 	sub	r9,sp,-624
8002f458:	f2 05 00 28 	add	r8,r9,r5<<0x2
8002f45c:	f0 f9 ff b0 	ld.w	r9,r8[-80]
8002f460:	f3 d9 c0 16 	bfextu	r9,r9,0x0,0x16
8002f464:	f1 49 ff b0 	st.w	r8[-80],r9
8002f468:	58 24       	cp.w	r4,2
8002f46a:	c1 a1       	brne	8002f49e <__kernel_rem_pio2+0x2ae>
8002f46c:	fa e8 00 04 	ld.d	r8,sp[4]
8002f470:	30 0a       	mov	r10,0
8002f472:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f476:	e0 a0 07 3d 	rcall	800302f0 <__avr32_f64_sub>
8002f47a:	fa eb 00 04 	st.d	sp[4],r10
8002f47e:	58 03       	cp.w	r3,0
8002f480:	c0 f0       	breq	8002f49e <__kernel_rem_pio2+0x2ae>
8002f482:	0c 9c       	mov	r12,r6
8002f484:	30 0a       	mov	r10,0
8002f486:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f48a:	e0 a0 05 cd 	rcall	80030024 <scalbn>
8002f48e:	14 98       	mov	r8,r10
8002f490:	16 99       	mov	r9,r11
8002f492:	fa ea 00 04 	ld.d	r10,sp[4]
8002f496:	e0 a0 07 2d 	rcall	800302f0 <__avr32_f64_sub>
8002f49a:	fa eb 00 04 	st.d	sp[4],r10
8002f49e:	30 08       	mov	r8,0
8002f4a0:	30 09       	mov	r9,0
8002f4a2:	fa ea 00 04 	ld.d	r10,sp[4]
8002f4a6:	e0 a0 09 04 	rcall	800306ae <__avr32_f64_cmp_eq>
8002f4aa:	c6 40       	breq	8002f572 <__kernel_rem_pio2+0x382>
8002f4ac:	fa c8 fd e0 	sub	r8,sp,-544
8002f4b0:	f0 05 00 29 	add	r9,r8,r5<<0x2
8002f4b4:	30 08       	mov	r8,0
8002f4b6:	c0 58       	rjmp	8002f4c0 <__kernel_rem_pio2+0x2d0>
8002f4b8:	72 0a       	ld.w	r10,r9[0x0]
8002f4ba:	20 15       	sub	r5,1
8002f4bc:	14 48       	or	r8,r10
8002f4be:	20 49       	sub	r9,4
8002f4c0:	40 3b       	lddsp	r11,sp[0xc]
8002f4c2:	16 35       	cp.w	r5,r11
8002f4c4:	cf a4       	brge	8002f4b8 <__kernel_rem_pio2+0x2c8>
8002f4c6:	58 08       	cp.w	r8,0
8002f4c8:	c5 b1       	brne	8002f57e <__kernel_rem_pio2+0x38e>
8002f4ca:	40 f9       	lddsp	r9,sp[0x3c]
8002f4cc:	30 18       	mov	r8,1
8002f4ce:	c0 28       	rjmp	8002f4d2 <__kernel_rem_pio2+0x2e2>
8002f4d0:	2f f8       	sub	r8,-1
8002f4d2:	72 0a       	ld.w	r10,r9[0x0]
8002f4d4:	20 49       	sub	r9,4
8002f4d6:	58 0a       	cp.w	r10,0
8002f4d8:	cf c0       	breq	8002f4d0 <__kernel_rem_pio2+0x2e0>
8002f4da:	0e 08       	add	r8,r7
8002f4dc:	40 ba       	lddsp	r10,sp[0x2c]
8002f4de:	50 d8       	stdsp	sp[0x34],r8
8002f4e0:	ee 0a 00 02 	add	r2,r7,r10
8002f4e4:	fa c8 fe 80 	sub	r8,sp,-384
8002f4e8:	04 91       	mov	r1,r2
8002f4ea:	ee c5 ff ff 	sub	r5,r7,-1
8002f4ee:	40 73       	lddsp	r3,sp[0x1c]
8002f4f0:	40 c9       	lddsp	r9,sp[0x30]
8002f4f2:	2f f3       	sub	r3,-1
8002f4f4:	fa cb ff c0 	sub	r11,sp,-64
8002f4f8:	0e 03       	add	r3,r7
8002f4fa:	f6 05 00 3b 	add	r11,r11,r5<<0x3
8002f4fe:	f2 03 00 23 	add	r3,r9,r3<<0x2
8002f502:	50 8b       	stdsp	sp[0x20],r11
8002f504:	f0 02 00 32 	add	r2,r8,r2<<0x3
8002f508:	0c 94       	mov	r4,r6
8002f50a:	c2 d8       	rjmp	8002f564 <__kernel_rem_pio2+0x374>
8002f50c:	66 0c       	ld.w	r12,r3[0x0]
8002f50e:	e0 a0 08 60 	rcall	800305ce <__avr32_s32_to_f64>
8002f512:	30 08       	mov	r8,0
8002f514:	e4 eb 00 00 	st.d	r2[0],r10
8002f518:	30 09       	mov	r9,0
8002f51a:	fa ca fe 80 	sub	r10,sp,-384
8002f51e:	40 a0       	lddsp	r0,sp[0x28]
8002f520:	f4 01 00 37 	add	r7,r10,r1<<0x3
8002f524:	30 06       	mov	r6,0
8002f526:	fa e9 00 04 	st.d	sp[4],r8
8002f52a:	c1 08       	rjmp	8002f54a <__kernel_rem_pio2+0x35a>
8002f52c:	ee e8 00 00 	ld.d	r8,r7[0]
8002f530:	a1 0b       	ld.d	r10,r0++
8002f532:	20 87       	sub	r7,8
8002f534:	e0 a0 05 f2 	rcall	80030118 <__avr32_f64_mul>
8002f538:	2f f6       	sub	r6,-1
8002f53a:	14 98       	mov	r8,r10
8002f53c:	16 99       	mov	r9,r11
8002f53e:	fa ea 00 04 	ld.d	r10,sp[4]
8002f542:	e0 a0 07 a5 	rcall	8003048c <__avr32_f64_add>
8002f546:	fa eb 00 04 	st.d	sp[4],r10
8002f54a:	40 58       	lddsp	r8,sp[0x14]
8002f54c:	10 36       	cp.w	r6,r8
8002f54e:	fe 9a ff ef 	brle	8002f52c <__kernel_rem_pio2+0x33c>
8002f552:	40 89       	lddsp	r9,sp[0x20]
8002f554:	fa ea 00 04 	ld.d	r10,sp[4]
8002f558:	2f f5       	sub	r5,-1
8002f55a:	b3 2a       	st.d	r9++,r10
8002f55c:	2f c3       	sub	r3,-4
8002f55e:	50 89       	stdsp	sp[0x20],r9
8002f560:	2f 82       	sub	r2,-8
8002f562:	2f f1       	sub	r1,-1
8002f564:	40 d8       	lddsp	r8,sp[0x34]
8002f566:	10 35       	cp.w	r5,r8
8002f568:	fe 9a ff d2 	brle	8002f50c <__kernel_rem_pio2+0x31c>
8002f56c:	08 96       	mov	r6,r4
8002f56e:	10 97       	mov	r7,r8
8002f570:	cb 5a       	rjmp	8002f2da <__kernel_rem_pio2+0xea>
8002f572:	50 50       	stdsp	sp[0x14],r0
8002f574:	08 95       	mov	r5,r4
8002f576:	40 e4       	lddsp	r4,sp[0x38]
8002f578:	58 0c       	cp.w	r12,0
8002f57a:	c1 30       	breq	8002f5a0 <__kernel_rem_pio2+0x3b0>
8002f57c:	c0 48       	rjmp	8002f584 <__kernel_rem_pio2+0x394>
8002f57e:	08 95       	mov	r5,r4
8002f580:	50 50       	stdsp	sp[0x14],r0
8002f582:	40 e4       	lddsp	r4,sp[0x38]
8002f584:	20 17       	sub	r7,1
8002f586:	fa c8 fd e0 	sub	r8,sp,-544
8002f58a:	21 86       	sub	r6,24
8002f58c:	f0 07 00 28 	add	r8,r8,r7<<0x2
8002f590:	c0 38       	rjmp	8002f596 <__kernel_rem_pio2+0x3a6>
8002f592:	20 17       	sub	r7,1
8002f594:	21 86       	sub	r6,24
8002f596:	70 09       	ld.w	r9,r8[0x0]
8002f598:	20 48       	sub	r8,4
8002f59a:	58 09       	cp.w	r9,0
8002f59c:	cf b0       	breq	8002f592 <__kernel_rem_pio2+0x3a2>
8002f59e:	c4 48       	rjmp	8002f626 <__kernel_rem_pio2+0x436>
8002f5a0:	fa ea 00 04 	ld.d	r10,sp[4]
8002f5a4:	ec 0c 11 00 	rsub	r12,r6,0
8002f5a8:	e0 a0 05 3e 	rcall	80030024 <scalbn>
8002f5ac:	30 08       	mov	r8,0
8002f5ae:	14 90       	mov	r0,r10
8002f5b0:	16 91       	mov	r1,r11
8002f5b2:	fc 19 41 70 	movh	r9,0x4170
8002f5b6:	ee 03 15 02 	lsl	r3,r7,0x2
8002f5ba:	e0 a0 08 8d 	rcall	800306d4 <__avr32_f64_cmp_ge>
8002f5be:	c2 a0       	breq	8002f612 <__kernel_rem_pio2+0x422>
8002f5c0:	30 08       	mov	r8,0
8002f5c2:	fc 19 3e 70 	movh	r9,0x3e70
8002f5c6:	00 9a       	mov	r10,r0
8002f5c8:	02 9b       	mov	r11,r1
8002f5ca:	e0 a0 05 a7 	rcall	80030118 <__avr32_f64_mul>
8002f5ce:	e0 a0 07 e9 	rcall	800305a0 <__avr32_f64_to_s32>
8002f5d2:	e0 a0 07 fe 	rcall	800305ce <__avr32_s32_to_f64>
8002f5d6:	30 08       	mov	r8,0
8002f5d8:	fc 19 c1 70 	movh	r9,0xc170
8002f5dc:	fa eb 00 04 	st.d	sp[4],r10
8002f5e0:	e0 a0 05 9c 	rcall	80030118 <__avr32_f64_mul>
8002f5e4:	16 99       	mov	r9,r11
8002f5e6:	14 98       	mov	r8,r10
8002f5e8:	02 9b       	mov	r11,r1
8002f5ea:	00 9a       	mov	r10,r0
8002f5ec:	e0 a0 07 50 	rcall	8003048c <__avr32_f64_add>
8002f5f0:	e0 a0 07 d8 	rcall	800305a0 <__avr32_f64_to_s32>
8002f5f4:	fa cb fd 90 	sub	r11,sp,-624
8002f5f8:	f6 03 00 03 	add	r3,r11,r3
8002f5fc:	2f f7       	sub	r7,-1
8002f5fe:	e7 4c ff b0 	st.w	r3[-80],r12
8002f602:	fa c9 fd 90 	sub	r9,sp,-624
8002f606:	fa ea 00 04 	ld.d	r10,sp[4]
8002f60a:	2e 86       	sub	r6,-24
8002f60c:	f2 07 00 23 	add	r3,r9,r7<<0x2
8002f610:	c0 78       	rjmp	8002f61e <__kernel_rem_pio2+0x42e>
8002f612:	fa c8 fd 90 	sub	r8,sp,-624
8002f616:	00 9a       	mov	r10,r0
8002f618:	f0 03 00 03 	add	r3,r8,r3
8002f61c:	02 9b       	mov	r11,r1
8002f61e:	e0 a0 07 c1 	rcall	800305a0 <__avr32_f64_to_s32>
8002f622:	e7 4c ff b0 	st.w	r3[-80],r12
8002f626:	0c 9c       	mov	r12,r6
8002f628:	30 0a       	mov	r10,0
8002f62a:	fc 1b 3f f0 	movh	r11,0x3ff0
8002f62e:	fa c3 fd e0 	sub	r3,sp,-544
8002f632:	e0 a0 04 f9 	rcall	80030024 <scalbn>
8002f636:	fa c2 ff c0 	sub	r2,sp,-64
8002f63a:	0e 96       	mov	r6,r7
8002f63c:	14 90       	mov	r0,r10
8002f63e:	16 91       	mov	r1,r11
8002f640:	e6 07 00 23 	add	r3,r3,r7<<0x2
8002f644:	e4 07 00 32 	add	r2,r2,r7<<0x3
8002f648:	c1 88       	rjmp	8002f678 <__kernel_rem_pio2+0x488>
8002f64a:	66 0c       	ld.w	r12,r3[0x0]
8002f64c:	e0 a0 07 c1 	rcall	800305ce <__avr32_s32_to_f64>
8002f650:	14 98       	mov	r8,r10
8002f652:	16 99       	mov	r9,r11
8002f654:	00 9a       	mov	r10,r0
8002f656:	02 9b       	mov	r11,r1
8002f658:	e0 a0 05 60 	rcall	80030118 <__avr32_f64_mul>
8002f65c:	30 08       	mov	r8,0
8002f65e:	e4 eb 00 00 	st.d	r2[0],r10
8002f662:	fc 19 3e 70 	movh	r9,0x3e70
8002f666:	00 9a       	mov	r10,r0
8002f668:	02 9b       	mov	r11,r1
8002f66a:	20 16       	sub	r6,1
8002f66c:	e0 a0 05 56 	rcall	80030118 <__avr32_f64_mul>
8002f670:	20 43       	sub	r3,4
8002f672:	20 82       	sub	r2,8
8002f674:	14 90       	mov	r0,r10
8002f676:	16 91       	mov	r1,r11
8002f678:	58 06       	cp.w	r6,0
8002f67a:	ce 84       	brge	8002f64a <__kernel_rem_pio2+0x45a>
8002f67c:	fa cc ff 20 	sub	r12,sp,-224
8002f680:	0a 91       	mov	r1,r5
8002f682:	0e 93       	mov	r3,r7
8002f684:	30 02       	mov	r2,0
8002f686:	18 96       	mov	r6,r12
8002f688:	0e 95       	mov	r5,r7
8002f68a:	c1 c8       	rjmp	8002f6c2 <__kernel_rem_pio2+0x4d2>
8002f68c:	ad 09       	ld.d	r8,r6++
8002f68e:	2f f7       	sub	r7,-1
8002f690:	a1 0b       	ld.d	r10,r0++
8002f692:	e0 a0 05 43 	rcall	80030118 <__avr32_f64_mul>
8002f696:	14 98       	mov	r8,r10
8002f698:	16 99       	mov	r9,r11
8002f69a:	fa ea 00 04 	ld.d	r10,sp[4]
8002f69e:	e0 a0 06 f7 	rcall	8003048c <__avr32_f64_add>
8002f6a2:	fa eb 00 04 	st.d	sp[4],r10
8002f6a6:	40 3b       	lddsp	r11,sp[0xc]
8002f6a8:	16 37       	cp.w	r7,r11
8002f6aa:	e0 89 00 05 	brgt	8002f6b4 <__kernel_rem_pio2+0x4c4>
8002f6ae:	04 37       	cp.w	r7,r2
8002f6b0:	fe 9a ff ee 	brle	8002f68c <__kernel_rem_pio2+0x49c>
8002f6b4:	06 96       	mov	r6,r3
8002f6b6:	fa e8 00 04 	ld.d	r8,sp[4]
8002f6ba:	40 73       	lddsp	r3,sp[0x1c]
8002f6bc:	ad 28       	st.d	r6++,r8
8002f6be:	20 13       	sub	r3,1
8002f6c0:	2f f2       	sub	r2,-1
8002f6c2:	58 03       	cp.w	r3,0
8002f6c4:	c0 f5       	brlt	8002f6e2 <__kernel_rem_pio2+0x4f2>
8002f6c6:	fa c8 ff c0 	sub	r8,sp,-64
8002f6ca:	30 0a       	mov	r10,0
8002f6cc:	f0 03 00 3c 	add	r12,r8,r3<<0x3
8002f6d0:	30 0b       	mov	r11,0
8002f6d2:	50 73       	stdsp	sp[0x1c],r3
8002f6d4:	4d 00       	lddpc	r0,8002f814 <__kernel_rem_pio2+0x624>
8002f6d6:	0c 93       	mov	r3,r6
8002f6d8:	fa eb 00 04 	st.d	sp[4],r10
8002f6dc:	30 07       	mov	r7,0
8002f6de:	18 96       	mov	r6,r12
8002f6e0:	ce 3b       	rjmp	8002f6a6 <__kernel_rem_pio2+0x4b6>
8002f6e2:	0a 97       	mov	r7,r5
8002f6e4:	40 6a       	lddsp	r10,sp[0x18]
8002f6e6:	02 95       	mov	r5,r1
8002f6e8:	58 2a       	cp.w	r10,2
8002f6ea:	e0 89 00 07 	brgt	8002f6f8 <__kernel_rem_pio2+0x508>
8002f6ee:	58 1a       	cp.w	r10,1
8002f6f0:	c1 14       	brge	8002f712 <__kernel_rem_pio2+0x522>
8002f6f2:	58 0a       	cp.w	r10,0
8002f6f4:	c1 70       	breq	8002f722 <__kernel_rem_pio2+0x532>
8002f6f6:	ce 68       	rjmp	8002f8c2 <__kernel_rem_pio2+0x6d2>
8002f6f8:	40 69       	lddsp	r9,sp[0x18]
8002f6fa:	58 39       	cp.w	r9,3
8002f6fc:	e0 81 00 e3 	brne	8002f8c2 <__kernel_rem_pio2+0x6d2>
8002f700:	ee c6 00 01 	sub	r6,r7,1
8002f704:	fa c8 ff 20 	sub	r8,sp,-224
8002f708:	0e 92       	mov	r2,r7
8002f70a:	f0 06 00 36 	add	r6,r8,r6<<0x3
8002f70e:	0c 93       	mov	r3,r6
8002f710:	c7 d8       	rjmp	8002f80a <__kernel_rem_pio2+0x61a>
8002f712:	fa c6 ff 20 	sub	r6,sp,-224
8002f716:	30 0c       	mov	r12,0
8002f718:	ec 07 00 36 	add	r6,r6,r7<<0x3
8002f71c:	0e 93       	mov	r3,r7
8002f71e:	18 9a       	mov	r10,r12
8002f720:	c2 98       	rjmp	8002f772 <__kernel_rem_pio2+0x582>
8002f722:	40 6c       	lddsp	r12,sp[0x18]
8002f724:	0e 96       	mov	r6,r7
8002f726:	fa c8 ff 20 	sub	r8,sp,-224
8002f72a:	18 9a       	mov	r10,r12
8002f72c:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f730:	c0 a8       	rjmp	8002f744 <__kernel_rem_pio2+0x554>
8002f732:	ee e8 00 00 	ld.d	r8,r7[0]
8002f736:	18 9b       	mov	r11,r12
8002f738:	20 87       	sub	r7,8
8002f73a:	06 9a       	mov	r10,r3
8002f73c:	20 16       	sub	r6,1
8002f73e:	e0 a0 06 a7 	rcall	8003048c <__avr32_f64_add>
8002f742:	16 9c       	mov	r12,r11
8002f744:	14 93       	mov	r3,r10
8002f746:	58 06       	cp.w	r6,0
8002f748:	cf 54       	brge	8002f732 <__kernel_rem_pio2+0x542>
8002f74a:	18 98       	mov	r8,r12
8002f74c:	ee 18 80 00 	eorh	r8,0x8000
8002f750:	58 05       	cp.w	r5,0
8002f752:	f0 0c 17 10 	movne	r12,r8
8002f756:	14 98       	mov	r8,r10
8002f758:	18 99       	mov	r9,r12
8002f75a:	e8 e9 00 00 	st.d	r4[0],r8
8002f75e:	cb 28       	rjmp	8002f8c2 <__kernel_rem_pio2+0x6d2>
8002f760:	ec e8 00 00 	ld.d	r8,r6[0]
8002f764:	18 9b       	mov	r11,r12
8002f766:	04 9a       	mov	r10,r2
8002f768:	20 13       	sub	r3,1
8002f76a:	e0 a0 06 91 	rcall	8003048c <__avr32_f64_add>
8002f76e:	20 86       	sub	r6,8
8002f770:	16 9c       	mov	r12,r11
8002f772:	14 92       	mov	r2,r10
8002f774:	58 03       	cp.w	r3,0
8002f776:	cf 54       	brge	8002f760 <__kernel_rem_pio2+0x570>
8002f778:	18 9b       	mov	r11,r12
8002f77a:	18 98       	mov	r8,r12
8002f77c:	ee 18 80 00 	eorh	r8,0x8000
8002f780:	58 05       	cp.w	r5,0
8002f782:	f0 0c 17 10 	movne	r12,r8
8002f786:	18 93       	mov	r3,r12
8002f788:	14 92       	mov	r2,r10
8002f78a:	16 99       	mov	r9,r11
8002f78c:	e8 e3 00 00 	st.d	r4[0],r2
8002f790:	14 98       	mov	r8,r10
8002f792:	fa c3 ff 18 	sub	r3,sp,-232
8002f796:	fa ea 00 e0 	ld.d	r10,sp[224]
8002f79a:	30 16       	mov	r6,1
8002f79c:	e0 a0 05 aa 	rcall	800302f0 <__avr32_f64_sub>
8002f7a0:	c0 78       	rjmp	8002f7ae <__kernel_rem_pio2+0x5be>
8002f7a2:	2f f6       	sub	r6,-1
8002f7a4:	a7 09       	ld.d	r8,r3++
8002f7a6:	18 9b       	mov	r11,r12
8002f7a8:	04 9a       	mov	r10,r2
8002f7aa:	e0 a0 06 71 	rcall	8003048c <__avr32_f64_add>
8002f7ae:	16 9c       	mov	r12,r11
8002f7b0:	14 92       	mov	r2,r10
8002f7b2:	0e 36       	cp.w	r6,r7
8002f7b4:	fe 9a ff f7 	brle	8002f7a2 <__kernel_rem_pio2+0x5b2>
8002f7b8:	16 98       	mov	r8,r11
8002f7ba:	ee 18 80 00 	eorh	r8,0x8000
8002f7be:	58 05       	cp.w	r5,0
8002f7c0:	f0 0c 17 10 	movne	r12,r8
8002f7c4:	14 98       	mov	r8,r10
8002f7c6:	18 99       	mov	r9,r12
8002f7c8:	e8 e9 00 08 	st.d	r4[8],r8
8002f7cc:	c7 b8       	rjmp	8002f8c2 <__kernel_rem_pio2+0x6d2>
8002f7ce:	e6 e0 00 00 	ld.d	r0,r3[0]
8002f7d2:	e6 e8 00 08 	ld.d	r8,r3[8]
8002f7d6:	00 9a       	mov	r10,r0
8002f7d8:	02 9b       	mov	r11,r1
8002f7da:	e0 a0 06 59 	rcall	8003048c <__avr32_f64_add>
8002f7de:	fa eb 00 0c 	st.d	sp[12],r10
8002f7e2:	14 98       	mov	r8,r10
8002f7e4:	16 99       	mov	r9,r11
8002f7e6:	00 9a       	mov	r10,r0
8002f7e8:	02 9b       	mov	r11,r1
8002f7ea:	e0 a0 05 83 	rcall	800302f0 <__avr32_f64_sub>
8002f7ee:	14 98       	mov	r8,r10
8002f7f0:	16 99       	mov	r9,r11
8002f7f2:	e6 ea 00 08 	ld.d	r10,r3[8]
8002f7f6:	e0 a0 06 4b 	rcall	8003048c <__avr32_f64_add>
8002f7fa:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f7fe:	e6 eb 00 08 	st.d	r3[8],r10
8002f802:	e6 e9 00 00 	st.d	r3[0],r8
8002f806:	20 12       	sub	r2,1
8002f808:	20 83       	sub	r3,8
8002f80a:	58 02       	cp.w	r2,0
8002f80c:	fe 99 ff e1 	brgt	8002f7ce <__kernel_rem_pio2+0x5de>
8002f810:	0e 93       	mov	r3,r7
8002f812:	c2 18       	rjmp	8002f854 <__kernel_rem_pio2+0x664>
8002f814:	80 03       	ld.sh	r3,r0[0x0]
8002f816:	19 50       	ld.sh	r0,--r12
8002f818:	ec e0 00 00 	ld.d	r0,r6[0]
8002f81c:	ec e8 00 08 	ld.d	r8,r6[8]
8002f820:	00 9a       	mov	r10,r0
8002f822:	02 9b       	mov	r11,r1
8002f824:	e0 a0 06 34 	rcall	8003048c <__avr32_f64_add>
8002f828:	fa eb 00 0c 	st.d	sp[12],r10
8002f82c:	14 98       	mov	r8,r10
8002f82e:	16 99       	mov	r9,r11
8002f830:	00 9a       	mov	r10,r0
8002f832:	02 9b       	mov	r11,r1
8002f834:	e0 a0 05 5e 	rcall	800302f0 <__avr32_f64_sub>
8002f838:	14 98       	mov	r8,r10
8002f83a:	16 99       	mov	r9,r11
8002f83c:	ec ea 00 08 	ld.d	r10,r6[8]
8002f840:	e0 a0 06 26 	rcall	8003048c <__avr32_f64_add>
8002f844:	fa e8 00 0c 	ld.d	r8,sp[12]
8002f848:	ec eb 00 08 	st.d	r6[8],r10
8002f84c:	ec e9 00 00 	st.d	r6[0],r8
8002f850:	20 13       	sub	r3,1
8002f852:	20 86       	sub	r6,8
8002f854:	58 13       	cp.w	r3,1
8002f856:	fe 99 ff e1 	brgt	8002f818 <__kernel_rem_pio2+0x628>
8002f85a:	0e 96       	mov	r6,r7
8002f85c:	fa c8 ff 20 	sub	r8,sp,-224
8002f860:	30 0c       	mov	r12,0
8002f862:	f0 07 00 37 	add	r7,r8,r7<<0x3
8002f866:	18 9a       	mov	r10,r12
8002f868:	c0 a8       	rjmp	8002f87c <__kernel_rem_pio2+0x68c>
8002f86a:	ee e8 00 00 	ld.d	r8,r7[0]
8002f86e:	18 9b       	mov	r11,r12
8002f870:	20 87       	sub	r7,8
8002f872:	06 9a       	mov	r10,r3
8002f874:	20 16       	sub	r6,1
8002f876:	e0 a0 06 0b 	rcall	8003048c <__avr32_f64_add>
8002f87a:	16 9c       	mov	r12,r11
8002f87c:	14 93       	mov	r3,r10
8002f87e:	58 16       	cp.w	r6,1
8002f880:	fe 99 ff f5 	brgt	8002f86a <__kernel_rem_pio2+0x67a>
8002f884:	58 05       	cp.w	r5,0
8002f886:	c0 e1       	brne	8002f8a2 <__kernel_rem_pio2+0x6b2>
8002f888:	fa e8 00 e0 	ld.d	r8,sp[224]
8002f88c:	e8 e9 00 00 	st.d	r4[0],r8
8002f890:	fa e8 00 e8 	ld.d	r8,sp[232]
8002f894:	e8 e9 00 08 	st.d	r4[8],r8
8002f898:	18 99       	mov	r9,r12
8002f89a:	14 98       	mov	r8,r10
8002f89c:	e8 e9 00 10 	st.d	r4[16],r8
8002f8a0:	c1 18       	rjmp	8002f8c2 <__kernel_rem_pio2+0x6d2>
8002f8a2:	89 5a       	st.w	r4[0x14],r10
8002f8a4:	ee 1c 80 00 	eorh	r12,0x8000
8002f8a8:	89 4c       	st.w	r4[0x10],r12
8002f8aa:	43 88       	lddsp	r8,sp[0xe0]
8002f8ac:	ee 18 80 00 	eorh	r8,0x8000
8002f8b0:	89 08       	st.w	r4[0x0],r8
8002f8b2:	43 98       	lddsp	r8,sp[0xe4]
8002f8b4:	89 18       	st.w	r4[0x4],r8
8002f8b6:	43 a8       	lddsp	r8,sp[0xe8]
8002f8b8:	ee 18 80 00 	eorh	r8,0x8000
8002f8bc:	89 28       	st.w	r4[0x8],r8
8002f8be:	43 b8       	lddsp	r8,sp[0xec]
8002f8c0:	89 38       	st.w	r4[0xc],r8
8002f8c2:	40 58       	lddsp	r8,sp[0x14]
8002f8c4:	f9 d8 c0 03 	bfextu	r12,r8,0x0,0x3
8002f8c8:	fe 3d fd 90 	sub	sp,-624
8002f8cc:	d8 32       	popm	r0-r7,pc
8002f8ce:	d7 03       	nop

8002f8d0 <__kernel_sin>:
8002f8d0:	d4 31       	pushm	r0-r7,lr
8002f8d2:	20 4d       	sub	sp,16
8002f8d4:	fa e9 00 08 	st.d	sp[8],r8
8002f8d8:	50 0c       	stdsp	sp[0x0],r12
8002f8da:	14 96       	mov	r6,r10
8002f8dc:	16 97       	mov	r7,r11
8002f8de:	f1 db c0 1f 	bfextu	r8,r11,0x0,0x1f
8002f8e2:	e0 69 ff ff 	mov	r9,65535
8002f8e6:	ea 19 3e 3f 	orh	r9,0x3e3f
8002f8ea:	12 38       	cp.w	r8,r9
8002f8ec:	e0 89 00 06 	brgt	8002f8f8 <__kernel_sin+0x28>
8002f8f0:	e0 a0 06 58 	rcall	800305a0 <__avr32_f64_to_s32>
8002f8f4:	e0 80 00 b3 	breq	8002fa5a <__kernel_sin+0x18a>
8002f8f8:	0c 98       	mov	r8,r6
8002f8fa:	0e 99       	mov	r9,r7
8002f8fc:	0c 9a       	mov	r10,r6
8002f8fe:	0e 9b       	mov	r11,r7
8002f900:	e0 a0 04 0c 	rcall	80030118 <__avr32_f64_mul>
8002f904:	0c 98       	mov	r8,r6
8002f906:	14 94       	mov	r4,r10
8002f908:	16 95       	mov	r5,r11
8002f90a:	0e 99       	mov	r9,r7
8002f90c:	e0 a0 04 06 	rcall	80030118 <__avr32_f64_mul>
8002f910:	e0 68 d5 7c 	mov	r8,54652
8002f914:	ea 18 5a cf 	orh	r8,0x5acf
8002f918:	e0 69 d9 3a 	mov	r9,55610
8002f91c:	ea 19 3d e5 	orh	r9,0x3de5
8002f920:	14 90       	mov	r0,r10
8002f922:	16 91       	mov	r1,r11
8002f924:	08 9a       	mov	r10,r4
8002f926:	0a 9b       	mov	r11,r5
8002f928:	e0 a0 03 f8 	rcall	80030118 <__avr32_f64_mul>
8002f92c:	e0 68 9c eb 	mov	r8,40171
8002f930:	ea 18 8a 2b 	orh	r8,0x8a2b
8002f934:	e0 69 e5 e6 	mov	r9,58854
8002f938:	ea 19 3e 5a 	orh	r9,0x3e5a
8002f93c:	e0 a0 04 da 	rcall	800302f0 <__avr32_f64_sub>
8002f940:	14 98       	mov	r8,r10
8002f942:	16 99       	mov	r9,r11
8002f944:	08 9a       	mov	r10,r4
8002f946:	0a 9b       	mov	r11,r5
8002f948:	e0 a0 03 e8 	rcall	80030118 <__avr32_f64_mul>
8002f94c:	e0 68 fe 7d 	mov	r8,65149
8002f950:	ea 18 57 b1 	orh	r8,0x57b1
8002f954:	e0 69 1d e3 	mov	r9,7651
8002f958:	ea 19 3e c7 	orh	r9,0x3ec7
8002f95c:	e0 a0 05 98 	rcall	8003048c <__avr32_f64_add>
8002f960:	14 98       	mov	r8,r10
8002f962:	16 99       	mov	r9,r11
8002f964:	08 9a       	mov	r10,r4
8002f966:	0a 9b       	mov	r11,r5
8002f968:	e0 a0 03 d8 	rcall	80030118 <__avr32_f64_mul>
8002f96c:	e0 68 61 d5 	mov	r8,25045
8002f970:	ea 18 19 c1 	orh	r8,0x19c1
8002f974:	e0 69 01 a0 	mov	r9,416
8002f978:	ea 19 3f 2a 	orh	r9,0x3f2a
8002f97c:	e0 a0 04 ba 	rcall	800302f0 <__avr32_f64_sub>
8002f980:	14 98       	mov	r8,r10
8002f982:	16 99       	mov	r9,r11
8002f984:	08 9a       	mov	r10,r4
8002f986:	0a 9b       	mov	r11,r5
8002f988:	e0 a0 03 c8 	rcall	80030118 <__avr32_f64_mul>
8002f98c:	e0 68 f8 a6 	mov	r8,63654
8002f990:	ea 18 11 10 	orh	r8,0x1110
8002f994:	e0 69 11 11 	mov	r9,4369
8002f998:	ea 19 3f 81 	orh	r9,0x3f81
8002f99c:	e0 a0 05 78 	rcall	8003048c <__avr32_f64_add>
8002f9a0:	40 08       	lddsp	r8,sp[0x0]
8002f9a2:	14 92       	mov	r2,r10
8002f9a4:	16 93       	mov	r3,r11
8002f9a6:	58 08       	cp.w	r8,0
8002f9a8:	c1 e1       	brne	8002f9e4 <__kernel_sin+0x114>
8002f9aa:	14 98       	mov	r8,r10
8002f9ac:	06 99       	mov	r9,r3
8002f9ae:	08 9a       	mov	r10,r4
8002f9b0:	0a 9b       	mov	r11,r5
8002f9b2:	e0 a0 03 b3 	rcall	80030118 <__avr32_f64_mul>
8002f9b6:	e0 68 55 49 	mov	r8,21833
8002f9ba:	ea 18 55 55 	orh	r8,0x5555
8002f9be:	e0 69 55 55 	mov	r9,21845
8002f9c2:	ea 19 3f c5 	orh	r9,0x3fc5
8002f9c6:	e0 a0 04 95 	rcall	800302f0 <__avr32_f64_sub>
8002f9ca:	14 98       	mov	r8,r10
8002f9cc:	16 99       	mov	r9,r11
8002f9ce:	00 9a       	mov	r10,r0
8002f9d0:	02 9b       	mov	r11,r1
8002f9d2:	e0 a0 03 a3 	rcall	80030118 <__avr32_f64_mul>
8002f9d6:	14 98       	mov	r8,r10
8002f9d8:	16 99       	mov	r9,r11
8002f9da:	0c 9a       	mov	r10,r6
8002f9dc:	0e 9b       	mov	r11,r7
8002f9de:	e0 a0 05 57 	rcall	8003048c <__avr32_f64_add>
8002f9e2:	c3 a8       	rjmp	8002fa56 <__kernel_sin+0x186>
8002f9e4:	30 08       	mov	r8,0
8002f9e6:	fc 19 3f e0 	movh	r9,0x3fe0
8002f9ea:	fa ea 00 08 	ld.d	r10,sp[8]
8002f9ee:	e0 a0 03 95 	rcall	80030118 <__avr32_f64_mul>
8002f9f2:	04 98       	mov	r8,r2
8002f9f4:	fa eb 00 00 	st.d	sp[0],r10
8002f9f8:	06 99       	mov	r9,r3
8002f9fa:	00 9a       	mov	r10,r0
8002f9fc:	02 9b       	mov	r11,r1
8002f9fe:	e0 a0 03 8d 	rcall	80030118 <__avr32_f64_mul>
8002fa02:	14 98       	mov	r8,r10
8002fa04:	16 99       	mov	r9,r11
8002fa06:	fa ea 00 00 	ld.d	r10,sp[0]
8002fa0a:	e0 a0 04 73 	rcall	800302f0 <__avr32_f64_sub>
8002fa0e:	14 98       	mov	r8,r10
8002fa10:	16 99       	mov	r9,r11
8002fa12:	08 9a       	mov	r10,r4
8002fa14:	0a 9b       	mov	r11,r5
8002fa16:	e0 a0 03 81 	rcall	80030118 <__avr32_f64_mul>
8002fa1a:	fa e8 00 08 	ld.d	r8,sp[8]
8002fa1e:	e0 a0 04 69 	rcall	800302f0 <__avr32_f64_sub>
8002fa22:	e0 68 55 49 	mov	r8,21833
8002fa26:	ea 18 55 55 	orh	r8,0x5555
8002fa2a:	14 94       	mov	r4,r10
8002fa2c:	16 95       	mov	r5,r11
8002fa2e:	e0 69 55 55 	mov	r9,21845
8002fa32:	ea 19 3f c5 	orh	r9,0x3fc5
8002fa36:	00 9a       	mov	r10,r0
8002fa38:	02 9b       	mov	r11,r1
8002fa3a:	e0 a0 03 6f 	rcall	80030118 <__avr32_f64_mul>
8002fa3e:	14 98       	mov	r8,r10
8002fa40:	16 99       	mov	r9,r11
8002fa42:	08 9a       	mov	r10,r4
8002fa44:	0a 9b       	mov	r11,r5
8002fa46:	e0 a0 05 23 	rcall	8003048c <__avr32_f64_add>
8002fa4a:	14 98       	mov	r8,r10
8002fa4c:	16 99       	mov	r9,r11
8002fa4e:	0c 9a       	mov	r10,r6
8002fa50:	0e 9b       	mov	r11,r7
8002fa52:	e0 a0 04 4f 	rcall	800302f0 <__avr32_f64_sub>
8002fa56:	14 96       	mov	r6,r10
8002fa58:	16 97       	mov	r7,r11
8002fa5a:	0c 9a       	mov	r10,r6
8002fa5c:	0e 9b       	mov	r11,r7
8002fa5e:	2f cd       	sub	sp,-16
8002fa60:	d8 32       	popm	r0-r7,pc
8002fa62:	d7 03       	nop

8002fa64 <atan>:
8002fa64:	d4 31       	pushm	r0-r7,lr
8002fa66:	20 1d       	sub	sp,4
8002fa68:	50 0b       	stdsp	sp[0x0],r11
8002fa6a:	16 96       	mov	r6,r11
8002fa6c:	14 97       	mov	r7,r10
8002fa6e:	e7 db c0 1f 	bfextu	r3,r11,0x0,0x1f
8002fa72:	e0 68 ff ff 	mov	r8,65535
8002fa76:	ea 18 44 0f 	orh	r8,0x440f
8002fa7a:	10 33       	cp.w	r3,r8
8002fa7c:	e0 8a 00 24 	brle	8002fac4 <atan+0x60>
8002fa80:	fc 1c 7f f0 	movh	r12,0x7ff0
8002fa84:	18 33       	cp.w	r3,r12
8002fa86:	e0 89 00 08 	brgt	8002fa96 <atan+0x32>
8002fa8a:	5f 0c       	sreq	r12
8002fa8c:	58 0a       	cp.w	r10,0
8002fa8e:	5f 18       	srne	r8
8002fa90:	f9 e8 00 08 	and	r8,r12,r8
8002fa94:	c0 80       	breq	8002faa4 <atan+0x40>
8002fa96:	0c 9b       	mov	r11,r6
8002fa98:	0e 9a       	mov	r10,r7
8002fa9a:	0c 99       	mov	r9,r6
8002fa9c:	0e 98       	mov	r8,r7
8002fa9e:	e0 a0 04 f7 	rcall	8003048c <__avr32_f64_add>
8002faa2:	c5 99       	rjmp	8002fd54 <atan+0x2f0>
8002faa4:	e0 68 21 fb 	mov	r8,8699
8002faa8:	ea 18 bf f9 	orh	r8,0xbff9
8002faac:	e0 66 21 fb 	mov	r6,8699
8002fab0:	ea 16 3f f9 	orh	r6,0x3ff9
8002fab4:	e0 67 2d 18 	mov	r7,11544
8002fab8:	ea 17 54 44 	orh	r7,0x5444
8002fabc:	58 0b       	cp.w	r11,0
8002fabe:	f0 06 17 a0 	movle	r6,r8
8002fac2:	c6 d9       	rjmp	8002fd9c <atan+0x338>
8002fac4:	e0 68 ff ff 	mov	r8,65535
8002fac8:	ea 18 3f db 	orh	r8,0x3fdb
8002facc:	10 33       	cp.w	r3,r8
8002face:	e0 89 00 1d 	brgt	8002fb08 <atan+0xa4>
8002fad2:	e0 6c ff ff 	mov	r12,65535
8002fad6:	ea 1c 3e 1f 	orh	r12,0x3e1f
8002fada:	18 33       	cp.w	r3,r12
8002fadc:	e0 89 00 73 	brgt	8002fbc2 <atan+0x15e>
8002fae0:	e0 68 75 9c 	mov	r8,30108
8002fae4:	ea 18 88 00 	orh	r8,0x8800
8002fae8:	e0 69 e4 3c 	mov	r9,58428
8002faec:	ea 19 7e 37 	orh	r9,0x7e37
8002faf0:	0c 9b       	mov	r11,r6
8002faf2:	e0 a0 04 cd 	rcall	8003048c <__avr32_f64_add>
8002faf6:	14 98       	mov	r8,r10
8002faf8:	16 99       	mov	r9,r11
8002fafa:	30 0a       	mov	r10,0
8002fafc:	fc 1b 3f f0 	movh	r11,0x3ff0
8002fb00:	e0 a0 06 1e 	rcall	8003073c <__avr32_f64_cmp_lt>
8002fb04:	c5 f0       	breq	8002fbc2 <atan+0x15e>
8002fb06:	c4 b9       	rjmp	8002fd9c <atan+0x338>
8002fb08:	0c 9b       	mov	r11,r6
8002fb0a:	c5 1d       	rcall	8002fdac <fabs>
8002fb0c:	e0 68 ff ff 	mov	r8,65535
8002fb10:	ea 18 3f f2 	orh	r8,0x3ff2
8002fb14:	14 94       	mov	r4,r10
8002fb16:	16 95       	mov	r5,r11
8002fb18:	10 33       	cp.w	r3,r8
8002fb1a:	e0 89 00 33 	brgt	8002fb80 <atan+0x11c>
8002fb1e:	e0 6c ff ff 	mov	r12,65535
8002fb22:	ea 1c 3f e5 	orh	r12,0x3fe5
8002fb26:	18 33       	cp.w	r3,r12
8002fb28:	e0 89 00 14 	brgt	8002fb50 <atan+0xec>
8002fb2c:	0a 99       	mov	r9,r5
8002fb2e:	14 98       	mov	r8,r10
8002fb30:	e0 a0 04 ae 	rcall	8003048c <__avr32_f64_add>
8002fb34:	30 08       	mov	r8,0
8002fb36:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb3a:	e0 a0 03 db 	rcall	800302f0 <__avr32_f64_sub>
8002fb3e:	30 08       	mov	r8,0
8002fb40:	14 96       	mov	r6,r10
8002fb42:	16 97       	mov	r7,r11
8002fb44:	08 9a       	mov	r10,r4
8002fb46:	0a 9b       	mov	r11,r5
8002fb48:	fc 19 40 00 	movh	r9,0x4000
8002fb4c:	30 05       	mov	r5,0
8002fb4e:	c0 e8       	rjmp	8002fb6a <atan+0x106>
8002fb50:	30 08       	mov	r8,0
8002fb52:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb56:	e0 a0 03 cd 	rcall	800302f0 <__avr32_f64_sub>
8002fb5a:	30 08       	mov	r8,0
8002fb5c:	14 96       	mov	r6,r10
8002fb5e:	16 97       	mov	r7,r11
8002fb60:	08 9a       	mov	r10,r4
8002fb62:	0a 9b       	mov	r11,r5
8002fb64:	fc 19 3f f0 	movh	r9,0x3ff0
8002fb68:	30 15       	mov	r5,1
8002fb6a:	e0 a0 04 91 	rcall	8003048c <__avr32_f64_add>
8002fb6e:	14 98       	mov	r8,r10
8002fb70:	16 99       	mov	r9,r11
8002fb72:	0c 9a       	mov	r10,r6
8002fb74:	0e 9b       	mov	r11,r7
8002fb76:	e0 a0 06 17 	rcall	800307a4 <__avr32_f64_div>
8002fb7a:	16 96       	mov	r6,r11
8002fb7c:	14 97       	mov	r7,r10
8002fb7e:	c2 38       	rjmp	8002fbc4 <atan+0x160>
8002fb80:	e0 68 7f ff 	mov	r8,32767
8002fb84:	ea 18 40 03 	orh	r8,0x4003
8002fb88:	10 33       	cp.w	r3,r8
8002fb8a:	e0 89 00 15 	brgt	8002fbb4 <atan+0x150>
8002fb8e:	30 08       	mov	r8,0
8002fb90:	fc 19 3f f8 	movh	r9,0x3ff8
8002fb94:	e0 a0 03 ae 	rcall	800302f0 <__avr32_f64_sub>
8002fb98:	30 08       	mov	r8,0
8002fb9a:	16 97       	mov	r7,r11
8002fb9c:	fc 19 3f f8 	movh	r9,0x3ff8
8002fba0:	0a 9b       	mov	r11,r5
8002fba2:	14 96       	mov	r6,r10
8002fba4:	08 9a       	mov	r10,r4
8002fba6:	e0 a0 02 b9 	rcall	80030118 <__avr32_f64_mul>
8002fbaa:	30 08       	mov	r8,0
8002fbac:	fc 19 3f f0 	movh	r9,0x3ff0
8002fbb0:	30 25       	mov	r5,2
8002fbb2:	cd cb       	rjmp	8002fb6a <atan+0x106>
8002fbb4:	14 98       	mov	r8,r10
8002fbb6:	0a 99       	mov	r9,r5
8002fbb8:	30 0a       	mov	r10,0
8002fbba:	fc 1b bf f0 	movh	r11,0xbff0
8002fbbe:	30 35       	mov	r5,3
8002fbc0:	cd bb       	rjmp	8002fb76 <atan+0x112>
8002fbc2:	3f f5       	mov	r5,-1
8002fbc4:	0c 99       	mov	r9,r6
8002fbc6:	0e 98       	mov	r8,r7
8002fbc8:	0c 9b       	mov	r11,r6
8002fbca:	0e 9a       	mov	r10,r7
8002fbcc:	e0 a0 02 a6 	rcall	80030118 <__avr32_f64_mul>
8002fbd0:	16 91       	mov	r1,r11
8002fbd2:	14 90       	mov	r0,r10
8002fbd4:	02 99       	mov	r9,r1
8002fbd6:	14 98       	mov	r8,r10
8002fbd8:	e0 a0 02 a0 	rcall	80030118 <__avr32_f64_mul>
8002fbdc:	e0 68 da 11 	mov	r8,55825
8002fbe0:	ea 18 e3 22 	orh	r8,0xe322
8002fbe4:	14 92       	mov	r2,r10
8002fbe6:	16 93       	mov	r3,r11
8002fbe8:	e0 69 ad 3a 	mov	r9,44346
8002fbec:	ea 19 3f 90 	orh	r9,0x3f90
8002fbf0:	e0 a0 02 94 	rcall	80030118 <__avr32_f64_mul>
8002fbf4:	e0 68 0d eb 	mov	r8,3563
8002fbf8:	ea 18 24 76 	orh	r8,0x2476
8002fbfc:	e0 69 7b 4b 	mov	r9,31563
8002fc00:	ea 19 3f a9 	orh	r9,0x3fa9
8002fc04:	e0 a0 04 44 	rcall	8003048c <__avr32_f64_add>
8002fc08:	14 98       	mov	r8,r10
8002fc0a:	16 99       	mov	r9,r11
8002fc0c:	04 9a       	mov	r10,r2
8002fc0e:	06 9b       	mov	r11,r3
8002fc10:	e0 a0 02 84 	rcall	80030118 <__avr32_f64_mul>
8002fc14:	e0 68 3d 51 	mov	r8,15697
8002fc18:	ea 18 a0 d0 	orh	r8,0xa0d0
8002fc1c:	e0 69 0d 66 	mov	r9,3430
8002fc20:	ea 19 3f b1 	orh	r9,0x3fb1
8002fc24:	e0 a0 04 34 	rcall	8003048c <__avr32_f64_add>
8002fc28:	14 98       	mov	r8,r10
8002fc2a:	16 99       	mov	r9,r11
8002fc2c:	04 9a       	mov	r10,r2
8002fc2e:	06 9b       	mov	r11,r3
8002fc30:	e0 a0 02 74 	rcall	80030118 <__avr32_f64_mul>
8002fc34:	e0 68 20 6e 	mov	r8,8302
8002fc38:	ea 18 c5 4c 	orh	r8,0xc54c
8002fc3c:	e0 69 45 cd 	mov	r9,17869
8002fc40:	ea 19 3f b7 	orh	r9,0x3fb7
8002fc44:	e0 a0 04 24 	rcall	8003048c <__avr32_f64_add>
8002fc48:	14 98       	mov	r8,r10
8002fc4a:	16 99       	mov	r9,r11
8002fc4c:	04 9a       	mov	r10,r2
8002fc4e:	06 9b       	mov	r11,r3
8002fc50:	e0 a0 02 64 	rcall	80030118 <__avr32_f64_mul>
8002fc54:	e0 68 83 ff 	mov	r8,33791
8002fc58:	ea 18 92 00 	orh	r8,0x9200
8002fc5c:	e0 69 49 24 	mov	r9,18724
8002fc60:	ea 19 3f c2 	orh	r9,0x3fc2
8002fc64:	e0 a0 04 14 	rcall	8003048c <__avr32_f64_add>
8002fc68:	14 98       	mov	r8,r10
8002fc6a:	16 99       	mov	r9,r11
8002fc6c:	04 9a       	mov	r10,r2
8002fc6e:	06 9b       	mov	r11,r3
8002fc70:	e0 a0 02 54 	rcall	80030118 <__avr32_f64_mul>
8002fc74:	e0 68 55 0d 	mov	r8,21773
8002fc78:	ea 18 55 55 	orh	r8,0x5555
8002fc7c:	e0 69 55 55 	mov	r9,21845
8002fc80:	ea 19 3f d5 	orh	r9,0x3fd5
8002fc84:	e0 a0 04 04 	rcall	8003048c <__avr32_f64_add>
8002fc88:	14 98       	mov	r8,r10
8002fc8a:	16 99       	mov	r9,r11
8002fc8c:	00 9a       	mov	r10,r0
8002fc8e:	02 9b       	mov	r11,r1
8002fc90:	e0 a0 02 44 	rcall	80030118 <__avr32_f64_mul>
8002fc94:	e0 68 6c 2f 	mov	r8,27695
8002fc98:	ea 18 2c 6a 	orh	r8,0x2c6a
8002fc9c:	e0 69 b4 44 	mov	r9,46148
8002fca0:	ea 19 bf a2 	orh	r9,0xbfa2
8002fca4:	14 90       	mov	r0,r10
8002fca6:	16 91       	mov	r1,r11
8002fca8:	04 9a       	mov	r10,r2
8002fcaa:	06 9b       	mov	r11,r3
8002fcac:	e0 a0 02 36 	rcall	80030118 <__avr32_f64_mul>
8002fcb0:	e0 68 fd 9a 	mov	r8,64922
8002fcb4:	ea 18 52 de 	orh	r8,0x52de
8002fcb8:	e0 69 de 2d 	mov	r9,56877
8002fcbc:	ea 19 3f ad 	orh	r9,0x3fad
8002fcc0:	e0 a0 03 18 	rcall	800302f0 <__avr32_f64_sub>
8002fcc4:	14 98       	mov	r8,r10
8002fcc6:	16 99       	mov	r9,r11
8002fcc8:	04 9a       	mov	r10,r2
8002fcca:	06 9b       	mov	r11,r3
8002fccc:	e0 a0 02 26 	rcall	80030118 <__avr32_f64_mul>
8002fcd0:	e0 68 9a 6d 	mov	r8,39533
8002fcd4:	ea 18 af 74 	orh	r8,0xaf74
8002fcd8:	e0 69 b0 f2 	mov	r9,45298
8002fcdc:	ea 19 3f b3 	orh	r9,0x3fb3
8002fce0:	e0 a0 03 08 	rcall	800302f0 <__avr32_f64_sub>
8002fce4:	14 98       	mov	r8,r10
8002fce6:	16 99       	mov	r9,r11
8002fce8:	04 9a       	mov	r10,r2
8002fcea:	06 9b       	mov	r11,r3
8002fcec:	e0 a0 02 16 	rcall	80030118 <__avr32_f64_mul>
8002fcf0:	e0 68 16 71 	mov	r8,5745
8002fcf4:	ea 18 fe 23 	orh	r8,0xfe23
8002fcf8:	e0 69 71 c6 	mov	r9,29126
8002fcfc:	ea 19 3f bc 	orh	r9,0x3fbc
8002fd00:	e0 a0 02 f8 	rcall	800302f0 <__avr32_f64_sub>
8002fd04:	14 98       	mov	r8,r10
8002fd06:	16 99       	mov	r9,r11
8002fd08:	04 9a       	mov	r10,r2
8002fd0a:	06 9b       	mov	r11,r3
8002fd0c:	e0 a0 02 06 	rcall	80030118 <__avr32_f64_mul>
8002fd10:	e0 68 eb c4 	mov	r8,60356
8002fd14:	ea 18 99 98 	orh	r8,0x9998
8002fd18:	e0 69 99 99 	mov	r9,39321
8002fd1c:	ea 19 3f c9 	orh	r9,0x3fc9
8002fd20:	e0 a0 02 e8 	rcall	800302f0 <__avr32_f64_sub>
8002fd24:	14 98       	mov	r8,r10
8002fd26:	16 99       	mov	r9,r11
8002fd28:	04 9a       	mov	r10,r2
8002fd2a:	06 9b       	mov	r11,r3
8002fd2c:	cf 6d       	rcall	80030118 <__avr32_f64_mul>
8002fd2e:	14 98       	mov	r8,r10
8002fd30:	16 99       	mov	r9,r11
8002fd32:	5b f5       	cp.w	r5,-1
8002fd34:	c1 31       	brne	8002fd5a <atan+0x2f6>
8002fd36:	00 9a       	mov	r10,r0
8002fd38:	02 9b       	mov	r11,r1
8002fd3a:	e0 a0 03 a9 	rcall	8003048c <__avr32_f64_add>
8002fd3e:	14 98       	mov	r8,r10
8002fd40:	16 99       	mov	r9,r11
8002fd42:	0e 9a       	mov	r10,r7
8002fd44:	0c 9b       	mov	r11,r6
8002fd46:	ce 9d       	rcall	80030118 <__avr32_f64_mul>
8002fd48:	14 98       	mov	r8,r10
8002fd4a:	16 99       	mov	r9,r11
8002fd4c:	0e 9a       	mov	r10,r7
8002fd4e:	0c 9b       	mov	r11,r6
8002fd50:	e0 a0 02 d0 	rcall	800302f0 <__avr32_f64_sub>
8002fd54:	16 96       	mov	r6,r11
8002fd56:	14 97       	mov	r7,r10
8002fd58:	c2 28       	rjmp	8002fd9c <atan+0x338>
8002fd5a:	00 9a       	mov	r10,r0
8002fd5c:	02 9b       	mov	r11,r1
8002fd5e:	e0 a0 03 97 	rcall	8003048c <__avr32_f64_add>
8002fd62:	14 98       	mov	r8,r10
8002fd64:	16 99       	mov	r9,r11
8002fd66:	0e 9a       	mov	r10,r7
8002fd68:	0c 9b       	mov	r11,r6
8002fd6a:	cd 7d       	rcall	80030118 <__avr32_f64_mul>
8002fd6c:	48 e8       	lddpc	r8,8002fda4 <atan+0x340>
8002fd6e:	f0 05 02 38 	ld.d	r8,r8[r5<<0x3]
8002fd72:	e0 a0 02 bf 	rcall	800302f0 <__avr32_f64_sub>
8002fd76:	0c 99       	mov	r9,r6
8002fd78:	0e 98       	mov	r8,r7
8002fd7a:	e0 a0 02 bb 	rcall	800302f0 <__avr32_f64_sub>
8002fd7e:	14 98       	mov	r8,r10
8002fd80:	16 99       	mov	r9,r11
8002fd82:	48 aa       	lddpc	r10,8002fda8 <atan+0x344>
8002fd84:	f4 05 02 3a 	ld.d	r10,r10[r5<<0x3]
8002fd88:	e0 a0 02 b4 	rcall	800302f0 <__avr32_f64_sub>
8002fd8c:	40 0c       	lddsp	r12,sp[0x0]
8002fd8e:	16 96       	mov	r6,r11
8002fd90:	14 97       	mov	r7,r10
8002fd92:	ee 16 80 00 	eorh	r6,0x8000
8002fd96:	58 0c       	cp.w	r12,0
8002fd98:	c0 25       	brlt	8002fd9c <atan+0x338>
8002fd9a:	16 96       	mov	r6,r11
8002fd9c:	0c 9b       	mov	r11,r6
8002fd9e:	0e 9a       	mov	r10,r7
8002fda0:	2f fd       	sub	sp,-4
8002fda2:	d8 32       	popm	r0-r7,pc
8002fda4:	80 03       	ld.sh	r3,r0[0x0]
8002fda6:	19 90       	ld.ub	r0,r12[0x1]
8002fda8:	80 03       	ld.sh	r3,r0[0x0]
8002fdaa:	19 b0       	ld.ub	r0,r12[0x3]

8002fdac <fabs>:
8002fdac:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002fdb0:	12 9b       	mov	r11,r9
8002fdb2:	5e fc       	retal	r12

8002fdb4 <finite>:
8002fdb4:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002fdb8:	fc 18 80 10 	movh	r8,0x8010
8002fdbc:	f6 08 00 0c 	add	r12,r11,r8
8002fdc0:	bf 9c       	lsr	r12,0x1f
8002fdc2:	5e fc       	retal	r12

8002fdc4 <floor>:
8002fdc4:	d4 31       	pushm	r0-r7,lr
8002fdc6:	e9 db c2 8b 	bfextu	r4,r11,0x14,0xb
8002fdca:	14 98       	mov	r8,r10
8002fdcc:	16 99       	mov	r9,r11
8002fdce:	14 92       	mov	r2,r10
8002fdd0:	16 93       	mov	r3,r11
8002fdd2:	16 97       	mov	r7,r11
8002fdd4:	14 91       	mov	r1,r10
8002fdd6:	14 96       	mov	r6,r10
8002fdd8:	e8 c5 03 ff 	sub	r5,r4,1023
8002fddc:	59 35       	cp.w	r5,19
8002fdde:	e0 89 00 48 	brgt	8002fe6e <floor+0xaa>
8002fde2:	58 05       	cp.w	r5,0
8002fde4:	c2 04       	brge	8002fe24 <floor+0x60>
8002fde6:	e0 68 75 9c 	mov	r8,30108
8002fdea:	ea 18 88 00 	orh	r8,0x8800
8002fdee:	e0 69 e4 3c 	mov	r9,58428
8002fdf2:	ea 19 7e 37 	orh	r9,0x7e37
8002fdf6:	e0 a0 03 4b 	rcall	8003048c <__avr32_f64_add>
8002fdfa:	14 98       	mov	r8,r10
8002fdfc:	16 99       	mov	r9,r11
8002fdfe:	30 0a       	mov	r10,0
8002fe00:	30 0b       	mov	r11,0
8002fe02:	e0 a0 04 9d 	rcall	8003073c <__avr32_f64_cmp_lt>
8002fe06:	c6 a0       	breq	8002feda <floor+0x116>
8002fe08:	58 03       	cp.w	r3,0
8002fe0a:	c0 45       	brlt	8002fe12 <floor+0x4e>
8002fe0c:	30 06       	mov	r6,0
8002fe0e:	0c 97       	mov	r7,r6
8002fe10:	c6 58       	rjmp	8002feda <floor+0x116>
8002fe12:	f1 d3 c0 1f 	bfextu	r8,r3,0x0,0x1f
8002fe16:	f1 e2 10 06 	or	r6,r8,r2
8002fe1a:	fc 18 bf f0 	movh	r8,0xbff0
8002fe1e:	f0 07 17 10 	movne	r7,r8
8002fe22:	c2 48       	rjmp	8002fe6a <floor+0xa6>
8002fe24:	ee 74 ff ff 	mov	r4,1048575
8002fe28:	e8 05 08 44 	asr	r4,r4,r5
8002fe2c:	e9 eb 00 0c 	and	r12,r4,r11
8002fe30:	f9 ea 10 01 	or	r1,r12,r10
8002fe34:	c5 50       	breq	8002fede <floor+0x11a>
8002fe36:	e0 68 75 9c 	mov	r8,30108
8002fe3a:	ea 18 88 00 	orh	r8,0x8800
8002fe3e:	e0 69 e4 3c 	mov	r9,58428
8002fe42:	ea 19 7e 37 	orh	r9,0x7e37
8002fe46:	e0 a0 03 23 	rcall	8003048c <__avr32_f64_add>
8002fe4a:	14 98       	mov	r8,r10
8002fe4c:	16 99       	mov	r9,r11
8002fe4e:	30 0a       	mov	r10,0
8002fe50:	30 0b       	mov	r11,0
8002fe52:	e0 a0 04 75 	rcall	8003073c <__avr32_f64_cmp_lt>
8002fe56:	c4 20       	breq	8002feda <floor+0x116>
8002fe58:	58 03       	cp.w	r3,0
8002fe5a:	c0 64       	brge	8002fe66 <floor+0xa2>
8002fe5c:	fc 18 00 10 	movh	r8,0x10
8002fe60:	f0 05 08 45 	asr	r5,r8,r5
8002fe64:	0a 07       	add	r7,r5
8002fe66:	5c d4       	com	r4
8002fe68:	08 67       	and	r7,r4
8002fe6a:	30 06       	mov	r6,0
8002fe6c:	c3 78       	rjmp	8002feda <floor+0x116>
8002fe6e:	e0 45 00 33 	cp.w	r5,51
8002fe72:	e0 8a 00 0a 	brle	8002fe86 <floor+0xc2>
8002fe76:	e0 45 04 00 	cp.w	r5,1024
8002fe7a:	c3 21       	brne	8002fede <floor+0x11a>
8002fe7c:	e0 a0 03 08 	rcall	8003048c <__avr32_f64_add>
8002fe80:	14 98       	mov	r8,r10
8002fe82:	16 99       	mov	r9,r11
8002fe84:	c2 d8       	rjmp	8002fede <floor+0x11a>
8002fe86:	3f fc       	mov	r12,-1
8002fe88:	e8 c4 04 13 	sub	r4,r4,1043
8002fe8c:	f8 04 0a 44 	lsr	r4,r12,r4
8002fe90:	e9 ea 00 0c 	and	r12,r4,r10
8002fe94:	c2 50       	breq	8002fede <floor+0x11a>
8002fe96:	e0 68 75 9c 	mov	r8,30108
8002fe9a:	ea 18 88 00 	orh	r8,0x8800
8002fe9e:	e0 69 e4 3c 	mov	r9,58428
8002fea2:	ea 19 7e 37 	orh	r9,0x7e37
8002fea6:	e0 a0 02 f3 	rcall	8003048c <__avr32_f64_add>
8002feaa:	14 98       	mov	r8,r10
8002feac:	16 99       	mov	r9,r11
8002feae:	30 0a       	mov	r10,0
8002feb0:	30 0b       	mov	r11,0
8002feb2:	e0 a0 04 45 	rcall	8003073c <__avr32_f64_cmp_lt>
8002feb6:	c1 20       	breq	8002feda <floor+0x116>
8002feb8:	58 03       	cp.w	r3,0
8002feba:	c0 e4       	brge	8002fed6 <floor+0x112>
8002febc:	59 45       	cp.w	r5,20
8002febe:	c0 31       	brne	8002fec4 <floor+0x100>
8002fec0:	2f f7       	sub	r7,-1
8002fec2:	c0 a8       	rjmp	8002fed6 <floor+0x112>
8002fec4:	30 18       	mov	r8,1
8002fec6:	ea 05 11 34 	rsub	r5,r5,52
8002feca:	f0 05 09 45 	lsl	r5,r8,r5
8002fece:	0a 06       	add	r6,r5
8002fed0:	04 36       	cp.w	r6,r2
8002fed2:	e7 d8 e3 07 	addcs	r7,r3,r8
8002fed6:	5c d4       	com	r4
8002fed8:	08 66       	and	r6,r4
8002feda:	0e 99       	mov	r9,r7
8002fedc:	0c 98       	mov	r8,r6
8002fede:	10 9a       	mov	r10,r8
8002fee0:	12 9b       	mov	r11,r9
8002fee2:	d8 32       	popm	r0-r7,pc

8002fee4 <__isnand>:
8002fee4:	14 98       	mov	r8,r10
8002fee6:	f5 db c0 1f 	bfextu	r10,r11,0x0,0x1f
8002feea:	f0 0c 11 00 	rsub	r12,r8,0
8002feee:	10 4c       	or	r12,r8
8002fef0:	fc 18 7f f0 	movh	r8,0x7ff0
8002fef4:	f5 ec 13 fc 	or	r12,r10,r12>>0x1f
8002fef8:	f0 0c 01 0c 	sub	r12,r8,r12
8002fefc:	bf 9c       	lsr	r12,0x1f
8002fefe:	5e fc       	retal	r12

8002ff00 <matherr>:
8002ff00:	5e fd       	retal	0

8002ff02 <nan>:
8002ff02:	30 0a       	mov	r10,0
8002ff04:	fc 1b 7f f8 	movh	r11,0x7ff8
8002ff08:	5e fc       	retal	r12
8002ff0a:	d7 03       	nop

8002ff0c <rint>:
8002ff0c:	d4 21       	pushm	r4-r7,lr
8002ff0e:	20 2d       	sub	sp,8
8002ff10:	ed db c2 8b 	bfextu	r6,r11,0x14,0xb
8002ff14:	14 94       	mov	r4,r10
8002ff16:	16 95       	mov	r5,r11
8002ff18:	14 98       	mov	r8,r10
8002ff1a:	16 9e       	mov	lr,r11
8002ff1c:	16 9c       	mov	r12,r11
8002ff1e:	f6 07 16 1f 	lsr	r7,r11,0x1f
8002ff22:	ec c9 03 ff 	sub	r9,r6,1023
8002ff26:	59 39       	cp.w	r9,19
8002ff28:	e0 89 00 49 	brgt	8002ffba <rint+0xae>
8002ff2c:	58 09       	cp.w	r9,0
8002ff2e:	c2 b4       	brge	8002ff84 <rint+0x78>
8002ff30:	f3 db c0 1f 	bfextu	r9,r11,0x0,0x1f
8002ff34:	14 49       	or	r9,r10
8002ff36:	c7 10       	breq	80030018 <rint+0x10c>
8002ff38:	fd db c0 14 	bfextu	lr,r11,0x0,0x14
8002ff3c:	4b 9c       	lddpc	r12,80030020 <rint+0x114>
8002ff3e:	fd e4 10 08 	or	r8,lr,r4
8002ff42:	16 99       	mov	r9,r11
8002ff44:	f0 0e 11 00 	rsub	lr,r8,0
8002ff48:	e6 19 ff fe 	andh	r9,0xfffe,COH
8002ff4c:	fd e8 10 08 	or	r8,lr,r8
8002ff50:	ad 88       	lsr	r8,0xc
8002ff52:	e6 18 00 08 	andh	r8,0x8,COH
8002ff56:	f1 e9 10 0b 	or	r11,r8,r9
8002ff5a:	f8 07 02 34 	ld.d	r4,r12[r7<<0x3]
8002ff5e:	14 98       	mov	r8,r10
8002ff60:	16 99       	mov	r9,r11
8002ff62:	08 9a       	mov	r10,r4
8002ff64:	0a 9b       	mov	r11,r5
8002ff66:	e0 a0 02 93 	rcall	8003048c <__avr32_f64_add>
8002ff6a:	08 98       	mov	r8,r4
8002ff6c:	fa eb 00 00 	st.d	sp[0],r10
8002ff70:	0a 99       	mov	r9,r5
8002ff72:	fa ea 00 00 	ld.d	r10,sp[0]
8002ff76:	cb dd       	rcall	800302f0 <__avr32_f64_sub>
8002ff78:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
8002ff7c:	14 94       	mov	r4,r10
8002ff7e:	f7 e7 11 f5 	or	r5,r11,r7<<0x1f
8002ff82:	c4 b8       	rjmp	80030018 <rint+0x10c>
8002ff84:	ee 7a ff ff 	mov	r10,1048575
8002ff88:	f4 09 08 4a 	asr	r10,r10,r9
8002ff8c:	f5 eb 00 0b 	and	r11,r10,r11
8002ff90:	08 4b       	or	r11,r4
8002ff92:	c4 30       	breq	80030018 <rint+0x10c>
8002ff94:	a1 9a       	lsr	r10,0x1
8002ff96:	f5 e5 00 0b 	and	r11,r10,r5
8002ff9a:	08 4b       	or	r11,r4
8002ff9c:	c0 31       	brne	8002ffa2 <rint+0x96>
8002ff9e:	16 98       	mov	r8,r11
8002ffa0:	c2 b8       	rjmp	8002fff6 <rint+0xea>
8002ffa2:	59 39       	cp.w	r9,19
8002ffa4:	c0 41       	brne	8002ffac <rint+0xa0>
8002ffa6:	fc 18 40 00 	movh	r8,0x4000
8002ffaa:	c2 68       	rjmp	8002fff6 <rint+0xea>
8002ffac:	14 8c       	andn	r12,r10
8002ffae:	e2 6a 00 00 	mov	r10,131072
8002ffb2:	f4 09 08 49 	asr	r9,r10,r9
8002ffb6:	12 4c       	or	r12,r9
8002ffb8:	c1 f8       	rjmp	8002fff6 <rint+0xea>
8002ffba:	e0 49 00 33 	cp.w	r9,51
8002ffbe:	e0 8a 00 0a 	brle	8002ffd2 <rint+0xc6>
8002ffc2:	e0 49 04 00 	cp.w	r9,1024
8002ffc6:	c2 91       	brne	80030018 <rint+0x10c>
8002ffc8:	14 98       	mov	r8,r10
8002ffca:	16 99       	mov	r9,r11
8002ffcc:	e0 a0 02 60 	rcall	8003048c <__avr32_f64_add>
8002ffd0:	c2 28       	rjmp	80030014 <rint+0x108>
8002ffd2:	ec c6 04 13 	sub	r6,r6,1043
8002ffd6:	3f f9       	mov	r9,-1
8002ffd8:	f2 06 0a 49 	lsr	r9,r9,r6
8002ffdc:	f3 ea 00 0a 	and	r10,r9,r10
8002ffe0:	c1 c0       	breq	80030018 <rint+0x10c>
8002ffe2:	a1 99       	lsr	r9,0x1
8002ffe4:	f3 e4 00 0a 	and	r10,r9,r4
8002ffe8:	c0 70       	breq	8002fff6 <rint+0xea>
8002ffea:	12 88       	andn	r8,r9
8002ffec:	fc 19 40 00 	movh	r9,0x4000
8002fff0:	f2 06 08 46 	asr	r6,r9,r6
8002fff4:	0c 48       	or	r8,r6
8002fff6:	48 ba       	lddpc	r10,80030020 <rint+0x114>
8002fff8:	18 99       	mov	r9,r12
8002fffa:	f4 07 02 36 	ld.d	r6,r10[r7<<0x3]
8002fffe:	0c 9a       	mov	r10,r6
80030000:	0e 9b       	mov	r11,r7
80030002:	e0 a0 02 45 	rcall	8003048c <__avr32_f64_add>
80030006:	0c 98       	mov	r8,r6
80030008:	fa eb 00 00 	st.d	sp[0],r10
8003000c:	0e 99       	mov	r9,r7
8003000e:	fa ea 00 00 	ld.d	r10,sp[0]
80030012:	c6 fd       	rcall	800302f0 <__avr32_f64_sub>
80030014:	14 94       	mov	r4,r10
80030016:	16 95       	mov	r5,r11
80030018:	08 9a       	mov	r10,r4
8003001a:	0a 9b       	mov	r11,r5
8003001c:	2f ed       	sub	sp,-8
8003001e:	d8 22       	popm	r4-r7,pc
80030020:	80 03       	ld.sh	r3,r0[0x0]
80030022:	19 d0       	ld.ub	r0,r12[0x5]

80030024 <scalbn>:
80030024:	d4 21       	pushm	r4-r7,lr
80030026:	18 97       	mov	r7,r12
80030028:	14 98       	mov	r8,r10
8003002a:	16 99       	mov	r9,r11
8003002c:	14 94       	mov	r4,r10
8003002e:	16 95       	mov	r5,r11
80030030:	14 96       	mov	r6,r10
80030032:	16 9c       	mov	r12,r11
80030034:	fd db c2 8b 	bfextu	lr,r11,0x14,0xb
80030038:	c1 11       	brne	8003005a <scalbn+0x36>
8003003a:	f9 db c0 1f 	bfextu	r12,r11,0x0,0x1f
8003003e:	14 4c       	or	r12,r10
80030040:	c5 c0       	breq	800300f8 <scalbn+0xd4>
80030042:	30 08       	mov	r8,0
80030044:	fc 19 43 50 	movh	r9,0x4350
80030048:	c6 8c       	rcall	80030118 <__avr32_f64_mul>
8003004a:	16 99       	mov	r9,r11
8003004c:	14 98       	mov	r8,r10
8003004e:	14 94       	mov	r4,r10
80030050:	12 95       	mov	r5,r9
80030052:	fe 57 3c b0 	cp.w	r7,-50000
80030056:	c0 84       	brge	80030066 <scalbn+0x42>
80030058:	c3 a8       	rjmp	800300cc <scalbn+0xa8>
8003005a:	e0 4e 07 ff 	cp.w	lr,2047
8003005e:	c0 81       	brne	8003006e <scalbn+0x4a>
80030060:	e0 a0 02 16 	rcall	8003048c <__avr32_f64_add>
80030064:	c4 88       	rjmp	800300f4 <scalbn+0xd0>
80030066:	fd d9 c2 8b 	bfextu	lr,r9,0x14,0xb
8003006a:	12 9c       	mov	r12,r9
8003006c:	23 6e       	sub	lr,54
8003006e:	0e 0e       	add	lr,r7
80030070:	e0 4e 07 fe 	cp.w	lr,2046
80030074:	e0 89 00 11 	brgt	80030096 <scalbn+0x72>
80030078:	58 0e       	cp.w	lr,0
8003007a:	e0 8a 00 07 	brle	80030088 <scalbn+0x64>
8003007e:	e4 1c 80 0f 	andh	r12,0x800f
80030082:	f9 ee 11 49 	or	r9,r12,lr<<0x14
80030086:	c3 98       	rjmp	800300f8 <scalbn+0xd4>
80030088:	fe 5e ff cb 	cp.w	lr,-53
8003008c:	c2 94       	brge	800300de <scalbn+0xba>
8003008e:	e0 47 c3 50 	cp.w	r7,50000
80030092:	e0 8a 00 14 	brle	800300ba <scalbn+0x96>
80030096:	e0 6a 75 9c 	mov	r10,30108
8003009a:	ea 1a 88 00 	orh	r10,0x8800
8003009e:	e0 6b e4 3c 	mov	r11,58428
800300a2:	ea 1b 7e 37 	orh	r11,0x7e37
800300a6:	c2 dc       	rcall	80030100 <copysign>
800300a8:	e0 68 75 9c 	mov	r8,30108
800300ac:	ea 18 88 00 	orh	r8,0x8800
800300b0:	e0 69 e4 3c 	mov	r9,58428
800300b4:	ea 19 7e 37 	orh	r9,0x7e37
800300b8:	c1 d8       	rjmp	800300f2 <scalbn+0xce>
800300ba:	e0 6a f3 59 	mov	r10,62297
800300be:	ea 1a c2 f8 	orh	r10,0xc2f8
800300c2:	e0 6b 6e 1f 	mov	r11,28191
800300c6:	ea 1b 01 a5 	orh	r11,0x1a5
800300ca:	c1 bc       	rcall	80030100 <copysign>
800300cc:	e0 68 f3 59 	mov	r8,62297
800300d0:	ea 18 c2 f8 	orh	r8,0xc2f8
800300d4:	e0 69 6e 1f 	mov	r9,28191
800300d8:	ea 19 01 a5 	orh	r9,0x1a5
800300dc:	c0 b8       	rjmp	800300f2 <scalbn+0xce>
800300de:	2c ae       	sub	lr,-54
800300e0:	e4 1c 80 0f 	andh	r12,0x800f
800300e4:	f9 ee 11 49 	or	r9,r12,lr<<0x14
800300e8:	10 9a       	mov	r10,r8
800300ea:	12 9b       	mov	r11,r9
800300ec:	30 08       	mov	r8,0
800300ee:	fc 19 3c 90 	movh	r9,0x3c90
800300f2:	c1 3c       	rcall	80030118 <__avr32_f64_mul>
800300f4:	14 98       	mov	r8,r10
800300f6:	16 99       	mov	r9,r11
800300f8:	10 9a       	mov	r10,r8
800300fa:	12 9b       	mov	r11,r9
800300fc:	d8 22       	popm	r4-r7,pc
800300fe:	d7 03       	nop

80030100 <copysign>:
80030100:	d4 21       	pushm	r4-r7,lr
80030102:	e6 19 80 00 	andh	r9,0x8000,COH
80030106:	16 95       	mov	r5,r11
80030108:	14 94       	mov	r4,r10
8003010a:	14 96       	mov	r6,r10
8003010c:	f7 db c0 1f 	bfextu	r11,r11,0x0,0x1f
80030110:	f3 eb 10 0b 	or	r11,r9,r11
80030114:	16 97       	mov	r7,r11
80030116:	d8 22       	popm	r4-r7,pc

80030118 <__avr32_f64_mul>:
80030118:	f5 eb 10 1c 	or	r12,r10,r11<<0x1
8003011c:	e0 80 00 dc 	breq	800302d4 <__avr32_f64_mul_op1_zero>
80030120:	d4 21       	pushm	r4-r7,lr
80030122:	f7 e9 20 0e 	eor	lr,r11,r9
80030126:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
8003012a:	30 15       	mov	r5,1
8003012c:	c4 30       	breq	800301b2 <__avr32_f64_mul_op1_subnormal>
8003012e:	ab 6b       	lsl	r11,0xa
80030130:	f7 ea 13 6b 	or	r11,r11,r10>>0x16
80030134:	ab 6a       	lsl	r10,0xa
80030136:	f7 d5 d3 c2 	bfins	r11,r5,0x1e,0x2
8003013a:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
8003013e:	c5 c0       	breq	800301f6 <__avr32_f64_mul_op2_subnormal>
80030140:	a1 78       	lsl	r8,0x1
80030142:	5c f9       	rol	r9
80030144:	f3 d5 d2 ab 	bfins	r9,r5,0x15,0xb
80030148:	e0 47 07 ff 	cp.w	r7,2047
8003014c:	c7 70       	breq	8003023a <__avr32_f64_mul_op_nan_or_inf>
8003014e:	e0 46 07 ff 	cp.w	r6,2047
80030152:	c7 40       	breq	8003023a <__avr32_f64_mul_op_nan_or_inf>
80030154:	ee 06 00 0c 	add	r12,r7,r6
80030158:	e0 2c 03 fe 	sub	r12,1022
8003015c:	f6 08 06 44 	mulu.d	r4,r11,r8
80030160:	f4 09 07 44 	macu.d	r4,r10,r9
80030164:	f4 08 06 46 	mulu.d	r6,r10,r8
80030168:	f6 09 06 4a 	mulu.d	r10,r11,r9
8003016c:	08 07       	add	r7,r4
8003016e:	f4 05 00 4a 	adc	r10,r10,r5
80030172:	5c 0b       	acr	r11
80030174:	ed bb 00 14 	bld	r11,0x14
80030178:	c0 50       	breq	80030182 <__avr32_f64_mul+0x6a>
8003017a:	a1 77       	lsl	r7,0x1
8003017c:	5c fa       	rol	r10
8003017e:	5c fb       	rol	r11
80030180:	20 1c       	sub	r12,1
80030182:	58 0c       	cp.w	r12,0
80030184:	e0 8a 00 6f 	brle	80030262 <__avr32_f64_mul_res_subnormal>
80030188:	e0 4c 07 ff 	cp.w	r12,2047
8003018c:	e0 84 00 9c 	brge	800302c4 <__avr32_f64_mul_res_inf>
80030190:	f7 dc d2 8b 	bfins	r11,r12,0x14,0xb
80030194:	ed ea 11 f6 	or	r6,r6,r10<<0x1f
80030198:	ef e6 12 17 	or	r7,r7,r6>>0x1
8003019c:	ee 17 80 00 	eorh	r7,0x8000
800301a0:	f1 b7 04 20 	satu	r7,0x1
800301a4:	0e 0a       	add	r10,r7
800301a6:	5c 0b       	acr	r11
800301a8:	ed be 00 1f 	bld	lr,0x1f
800301ac:	ef bb 00 1f 	bst	r11,0x1f
800301b0:	d8 22       	popm	r4-r7,pc

800301b2 <__avr32_f64_mul_op1_subnormal>:
800301b2:	e4 1b 00 0f 	andh	r11,0xf
800301b6:	f4 0c 12 00 	clz	r12,r10
800301ba:	f6 06 12 00 	clz	r6,r11
800301be:	f7 bc 03 e1 	sublo	r12,-31
800301c2:	f8 06 17 30 	movlo	r6,r12
800301c6:	f7 b6 02 01 	subhs	r6,1
800301ca:	e0 46 00 20 	cp.w	r6,32
800301ce:	c0 d4       	brge	800301e8 <__avr32_f64_mul_op1_subnormal+0x36>
800301d0:	ec 0c 11 20 	rsub	r12,r6,32
800301d4:	f6 06 09 4b 	lsl	r11,r11,r6
800301d8:	f4 0c 0a 4c 	lsr	r12,r10,r12
800301dc:	18 4b       	or	r11,r12
800301de:	f4 06 09 4a 	lsl	r10,r10,r6
800301e2:	20 b6       	sub	r6,11
800301e4:	0c 17       	sub	r7,r6
800301e6:	ca ab       	rjmp	8003013a <__avr32_f64_mul+0x22>
800301e8:	f4 06 09 4b 	lsl	r11,r10,r6
800301ec:	c6 40       	breq	800302b4 <__avr32_f64_mul_res_zero>
800301ee:	30 0a       	mov	r10,0
800301f0:	20 b6       	sub	r6,11
800301f2:	0c 17       	sub	r7,r6
800301f4:	ca 3b       	rjmp	8003013a <__avr32_f64_mul+0x22>

800301f6 <__avr32_f64_mul_op2_subnormal>:
800301f6:	e4 19 00 0f 	andh	r9,0xf
800301fa:	f0 0c 12 00 	clz	r12,r8
800301fe:	f2 05 12 00 	clz	r5,r9
80030202:	f7 bc 03 ea 	sublo	r12,-22
80030206:	f8 05 17 30 	movlo	r5,r12
8003020a:	f7 b5 02 0a 	subhs	r5,10
8003020e:	e0 45 00 20 	cp.w	r5,32
80030212:	c0 d4       	brge	8003022c <__avr32_f64_mul_op2_subnormal+0x36>
80030214:	ea 0c 11 20 	rsub	r12,r5,32
80030218:	f2 05 09 49 	lsl	r9,r9,r5
8003021c:	f0 0c 0a 4c 	lsr	r12,r8,r12
80030220:	18 49       	or	r9,r12
80030222:	f0 05 09 48 	lsl	r8,r8,r5
80030226:	20 25       	sub	r5,2
80030228:	0a 16       	sub	r6,r5
8003022a:	c8 fb       	rjmp	80030148 <__avr32_f64_mul+0x30>
8003022c:	f0 05 09 49 	lsl	r9,r8,r5
80030230:	c4 20       	breq	800302b4 <__avr32_f64_mul_res_zero>
80030232:	30 08       	mov	r8,0
80030234:	20 25       	sub	r5,2
80030236:	0a 16       	sub	r6,r5
80030238:	c8 8b       	rjmp	80030148 <__avr32_f64_mul+0x30>

8003023a <__avr32_f64_mul_op_nan_or_inf>:
8003023a:	e4 19 00 0f 	andh	r9,0xf
8003023e:	e4 1b 00 0f 	andh	r11,0xf
80030242:	14 4b       	or	r11,r10
80030244:	10 49       	or	r9,r8
80030246:	e0 47 07 ff 	cp.w	r7,2047
8003024a:	c0 91       	brne	8003025c <__avr32_f64_mul_op1_not_naninf>
8003024c:	58 0b       	cp.w	r11,0
8003024e:	c3 81       	brne	800302be <__avr32_f64_mul_res_nan>
80030250:	e0 46 07 ff 	cp.w	r6,2047
80030254:	c3 81       	brne	800302c4 <__avr32_f64_mul_res_inf>
80030256:	58 09       	cp.w	r9,0
80030258:	c3 60       	breq	800302c4 <__avr32_f64_mul_res_inf>
8003025a:	c3 28       	rjmp	800302be <__avr32_f64_mul_res_nan>

8003025c <__avr32_f64_mul_op1_not_naninf>:
8003025c:	58 09       	cp.w	r9,0
8003025e:	c3 30       	breq	800302c4 <__avr32_f64_mul_res_inf>
80030260:	c2 f8       	rjmp	800302be <__avr32_f64_mul_res_nan>

80030262 <__avr32_f64_mul_res_subnormal>:
80030262:	5c 3c       	neg	r12
80030264:	2f fc       	sub	r12,-1
80030266:	f1 bc 04 c0 	satu	r12,0x6
8003026a:	e0 4c 00 20 	cp.w	r12,32
8003026e:	c1 14       	brge	80030290 <__avr32_f64_mul_res_subnormal+0x2e>
80030270:	f8 08 11 20 	rsub	r8,r12,32
80030274:	0e 46       	or	r6,r7
80030276:	ee 0c 0a 47 	lsr	r7,r7,r12
8003027a:	f4 08 09 49 	lsl	r9,r10,r8
8003027e:	12 47       	or	r7,r9
80030280:	f4 0c 0a 4a 	lsr	r10,r10,r12
80030284:	f6 08 09 49 	lsl	r9,r11,r8
80030288:	12 4a       	or	r10,r9
8003028a:	f6 0c 0a 4b 	lsr	r11,r11,r12
8003028e:	c8 3b       	rjmp	80030194 <__avr32_f64_mul+0x7c>
80030290:	f8 08 11 20 	rsub	r8,r12,32
80030294:	f9 b9 00 00 	moveq	r9,0
80030298:	c0 30       	breq	8003029e <__avr32_f64_mul_res_subnormal+0x3c>
8003029a:	f6 08 09 49 	lsl	r9,r11,r8
8003029e:	0e 46       	or	r6,r7
800302a0:	ed ea 10 16 	or	r6,r6,r10<<0x1
800302a4:	f4 0c 0a 4a 	lsr	r10,r10,r12
800302a8:	f3 ea 10 07 	or	r7,r9,r10
800302ac:	f6 0c 0a 4a 	lsr	r10,r11,r12
800302b0:	30 0b       	mov	r11,0
800302b2:	c7 1b       	rjmp	80030194 <__avr32_f64_mul+0x7c>

800302b4 <__avr32_f64_mul_res_zero>:
800302b4:	1c 9b       	mov	r11,lr
800302b6:	e6 1b 80 00 	andh	r11,0x8000,COH
800302ba:	30 0a       	mov	r10,0
800302bc:	d8 22       	popm	r4-r7,pc

800302be <__avr32_f64_mul_res_nan>:
800302be:	3f fb       	mov	r11,-1
800302c0:	3f fa       	mov	r10,-1
800302c2:	d8 22       	popm	r4-r7,pc

800302c4 <__avr32_f64_mul_res_inf>:
800302c4:	f0 6b 00 00 	mov	r11,-1048576
800302c8:	ed be 00 1f 	bld	lr,0x1f
800302cc:	ef bb 00 1f 	bst	r11,0x1f
800302d0:	30 0a       	mov	r10,0
800302d2:	d8 22       	popm	r4-r7,pc

800302d4 <__avr32_f64_mul_op1_zero>:
800302d4:	f7 e9 20 0b 	eor	r11,r11,r9
800302d8:	e6 1b 80 00 	andh	r11,0x8000,COH
800302dc:	f9 d9 c2 8b 	bfextu	r12,r9,0x14,0xb
800302e0:	e0 4c 07 ff 	cp.w	r12,2047
800302e4:	5e 1c       	retne	r12
800302e6:	3f fa       	mov	r10,-1
800302e8:	3f fb       	mov	r11,-1
800302ea:	5e fc       	retal	r12

800302ec <__avr32_f64_sub_from_add>:
800302ec:	ee 19 80 00 	eorh	r9,0x8000

800302f0 <__avr32_f64_sub>:
800302f0:	f7 e9 20 0c 	eor	r12,r11,r9
800302f4:	e0 86 00 ca 	brmi	80030488 <__avr32_f64_add_from_sub>
800302f8:	eb cd 40 e0 	pushm	r5-r7,lr
800302fc:	16 9c       	mov	r12,r11
800302fe:	e6 1c 80 00 	andh	r12,0x8000,COH
80030302:	bf db       	cbr	r11,0x1f
80030304:	bf d9       	cbr	r9,0x1f
80030306:	10 3a       	cp.w	r10,r8
80030308:	f2 0b 13 00 	cpc	r11,r9
8003030c:	c0 92       	brcc	8003031e <__avr32_f64_sub+0x2e>
8003030e:	16 97       	mov	r7,r11
80030310:	12 9b       	mov	r11,r9
80030312:	0e 99       	mov	r9,r7
80030314:	14 97       	mov	r7,r10
80030316:	10 9a       	mov	r10,r8
80030318:	0e 98       	mov	r8,r7
8003031a:	ee 1c 80 00 	eorh	r12,0x8000
8003031e:	f6 07 16 14 	lsr	r7,r11,0x14
80030322:	ab 7b       	lsl	r11,0xb
80030324:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
80030328:	ab 7a       	lsl	r10,0xb
8003032a:	bf bb       	sbr	r11,0x1f
8003032c:	f2 06 16 14 	lsr	r6,r9,0x14
80030330:	c4 40       	breq	800303b8 <__avr32_f64_sub_opL_subnormal>
80030332:	ab 79       	lsl	r9,0xb
80030334:	f3 e8 13 59 	or	r9,r9,r8>>0x15
80030338:	ab 78       	lsl	r8,0xb
8003033a:	bf b9       	sbr	r9,0x1f

8003033c <__avr32_f64_sub_opL_subnormal_done>:
8003033c:	e0 47 07 ff 	cp.w	r7,2047
80030340:	c4 f0       	breq	800303de <__avr32_f64_sub_opH_nan_or_inf>
80030342:	0e 26       	rsub	r6,r7
80030344:	c1 20       	breq	80030368 <__avr32_f64_sub_shift_done>
80030346:	ec 05 11 20 	rsub	r5,r6,32
8003034a:	e0 46 00 20 	cp.w	r6,32
8003034e:	c7 c2       	brcc	80030446 <__avr32_f64_sub_longshift>
80030350:	f0 05 09 4e 	lsl	lr,r8,r5
80030354:	f2 05 09 45 	lsl	r5,r9,r5
80030358:	f0 06 0a 48 	lsr	r8,r8,r6
8003035c:	f2 06 0a 49 	lsr	r9,r9,r6
80030360:	0a 48       	or	r8,r5
80030362:	58 0e       	cp.w	lr,0
80030364:	5f 1e       	srne	lr
80030366:	1c 48       	or	r8,lr

80030368 <__avr32_f64_sub_shift_done>:
80030368:	10 1a       	sub	r10,r8
8003036a:	f6 09 01 4b 	sbc	r11,r11,r9
8003036e:	f6 06 12 00 	clz	r6,r11
80030372:	c0 e0       	breq	8003038e <__avr32_f64_sub_longnormalize_done>
80030374:	c7 83       	brcs	80030464 <__avr32_f64_sub_longnormalize>
80030376:	ec 0e 11 20 	rsub	lr,r6,32
8003037a:	f6 06 09 4b 	lsl	r11,r11,r6
8003037e:	f4 0e 0a 4e 	lsr	lr,r10,lr
80030382:	1c 4b       	or	r11,lr
80030384:	f4 06 09 4a 	lsl	r10,r10,r6
80030388:	0c 17       	sub	r7,r6
8003038a:	e0 8a 00 39 	brle	800303fc <__avr32_f64_sub_subnormal_result>

8003038e <__avr32_f64_sub_longnormalize_done>:
8003038e:	f4 09 15 15 	lsl	r9,r10,0x15
80030392:	ab 9a       	lsr	r10,0xb
80030394:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030398:	ab 9b       	lsr	r11,0xb
8003039a:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
8003039e:	18 4b       	or	r11,r12

800303a0 <__avr32_f64_sub_round>:
800303a0:	fc 17 80 00 	movh	r7,0x8000
800303a4:	ed ba 00 00 	bld	r10,0x0
800303a8:	f7 b7 01 ff 	subne	r7,-1
800303ac:	0e 39       	cp.w	r9,r7
800303ae:	5f 29       	srhs	r9
800303b0:	12 0a       	add	r10,r9
800303b2:	5c 0b       	acr	r11
800303b4:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800303b8 <__avr32_f64_sub_opL_subnormal>:
800303b8:	ab 79       	lsl	r9,0xb
800303ba:	f3 e8 13 59 	or	r9,r9,r8>>0x15
800303be:	ab 78       	lsl	r8,0xb
800303c0:	f3 e8 10 0e 	or	lr,r9,r8
800303c4:	f9 b6 01 01 	movne	r6,1
800303c8:	ee 0e 11 00 	rsub	lr,r7,0
800303cc:	f9 b7 00 01 	moveq	r7,1
800303d0:	ef bb 00 1f 	bst	r11,0x1f
800303d4:	f7 ea 10 0e 	or	lr,r11,r10
800303d8:	f9 b7 00 00 	moveq	r7,0
800303dc:	cb 0b       	rjmp	8003033c <__avr32_f64_sub_opL_subnormal_done>

800303de <__avr32_f64_sub_opH_nan_or_inf>:
800303de:	bf db       	cbr	r11,0x1f
800303e0:	f7 ea 10 0e 	or	lr,r11,r10
800303e4:	c0 81       	brne	800303f4 <__avr32_f64_sub_return_nan>
800303e6:	e0 46 07 ff 	cp.w	r6,2047
800303ea:	c0 50       	breq	800303f4 <__avr32_f64_sub_return_nan>
800303ec:	f9 e7 11 4b 	or	r11,r12,r7<<0x14
800303f0:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800303f4 <__avr32_f64_sub_return_nan>:
800303f4:	3f fa       	mov	r10,-1
800303f6:	3f fb       	mov	r11,-1
800303f8:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

800303fc <__avr32_f64_sub_subnormal_result>:
800303fc:	5c 37       	neg	r7
800303fe:	2f f7       	sub	r7,-1
80030400:	f1 b7 04 c0 	satu	r7,0x6
80030404:	e0 47 00 20 	cp.w	r7,32
80030408:	c1 14       	brge	8003042a <__avr32_f64_sub_subnormal_result+0x2e>
8003040a:	ee 08 11 20 	rsub	r8,r7,32
8003040e:	f4 08 09 49 	lsl	r9,r10,r8
80030412:	5f 16       	srne	r6
80030414:	f4 07 0a 4a 	lsr	r10,r10,r7
80030418:	0c 4a       	or	r10,r6
8003041a:	f6 08 09 49 	lsl	r9,r11,r8
8003041e:	f5 e9 10 0a 	or	r10,r10,r9
80030422:	f4 07 0a 4b 	lsr	r11,r10,r7
80030426:	30 07       	mov	r7,0
80030428:	cb 3b       	rjmp	8003038e <__avr32_f64_sub_longnormalize_done>
8003042a:	ee 08 11 40 	rsub	r8,r7,64
8003042e:	f6 08 09 49 	lsl	r9,r11,r8
80030432:	14 49       	or	r9,r10
80030434:	5f 16       	srne	r6
80030436:	f6 07 0a 4a 	lsr	r10,r11,r7
8003043a:	0c 4a       	or	r10,r6
8003043c:	30 0b       	mov	r11,0
8003043e:	30 07       	mov	r7,0
80030440:	ca 7b       	rjmp	8003038e <__avr32_f64_sub_longnormalize_done>
80030442:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030446 <__avr32_f64_sub_longshift>:
80030446:	f1 b6 04 c0 	satu	r6,0x6
8003044a:	f0 0e 17 00 	moveq	lr,r8
8003044e:	c0 40       	breq	80030456 <__avr32_f64_sub_longshift+0x10>
80030450:	f2 05 09 4e 	lsl	lr,r9,r5
80030454:	10 4e       	or	lr,r8
80030456:	f2 06 0a 48 	lsr	r8,r9,r6
8003045a:	30 09       	mov	r9,0
8003045c:	58 0e       	cp.w	lr,0
8003045e:	5f 1e       	srne	lr
80030460:	1c 48       	or	r8,lr
80030462:	c8 3b       	rjmp	80030368 <__avr32_f64_sub_shift_done>

80030464 <__avr32_f64_sub_longnormalize>:
80030464:	f4 06 12 00 	clz	r6,r10
80030468:	f9 b7 03 00 	movlo	r7,0
8003046c:	f9 b6 03 00 	movlo	r6,0
80030470:	f9 bc 03 00 	movlo	r12,0
80030474:	f7 b6 02 e0 	subhs	r6,-32
80030478:	f4 06 09 4b 	lsl	r11,r10,r6
8003047c:	30 0a       	mov	r10,0
8003047e:	0c 17       	sub	r7,r6
80030480:	fe 9a ff be 	brle	800303fc <__avr32_f64_sub_subnormal_result>
80030484:	c8 5b       	rjmp	8003038e <__avr32_f64_sub_longnormalize_done>
80030486:	d7 03       	nop

80030488 <__avr32_f64_add_from_sub>:
80030488:	ee 19 80 00 	eorh	r9,0x8000

8003048c <__avr32_f64_add>:
8003048c:	f7 e9 20 0c 	eor	r12,r11,r9
80030490:	fe 96 ff 2e 	brmi	800302ec <__avr32_f64_sub_from_add>
80030494:	eb cd 40 e0 	pushm	r5-r7,lr
80030498:	16 9c       	mov	r12,r11
8003049a:	e6 1c 80 00 	andh	r12,0x8000,COH
8003049e:	bf db       	cbr	r11,0x1f
800304a0:	bf d9       	cbr	r9,0x1f
800304a2:	12 3b       	cp.w	r11,r9
800304a4:	c0 72       	brcc	800304b2 <__avr32_f64_add+0x26>
800304a6:	16 97       	mov	r7,r11
800304a8:	12 9b       	mov	r11,r9
800304aa:	0e 99       	mov	r9,r7
800304ac:	14 97       	mov	r7,r10
800304ae:	10 9a       	mov	r10,r8
800304b0:	0e 98       	mov	r8,r7
800304b2:	30 0e       	mov	lr,0
800304b4:	ef db c2 8b 	bfextu	r7,r11,0x14,0xb
800304b8:	f7 db c0 14 	bfextu	r11,r11,0x0,0x14
800304bc:	b5 ab       	sbr	r11,0x14
800304be:	ed d9 c2 8b 	bfextu	r6,r9,0x14,0xb
800304c2:	c6 20       	breq	80030586 <__avr32_f64_add_op2_subnormal>
800304c4:	f3 d9 c0 14 	bfextu	r9,r9,0x0,0x14
800304c8:	b5 a9       	sbr	r9,0x14
800304ca:	e0 47 07 ff 	cp.w	r7,2047
800304ce:	c2 80       	breq	8003051e <__avr32_f64_add_opH_nan_or_inf>
800304d0:	0e 26       	rsub	r6,r7
800304d2:	c1 20       	breq	800304f6 <__avr32_f64_add_shift_done>
800304d4:	e0 46 00 36 	cp.w	r6,54
800304d8:	c1 52       	brcc	80030502 <__avr32_f64_add_res_of_done>
800304da:	ec 05 11 20 	rsub	r5,r6,32
800304de:	e0 46 00 20 	cp.w	r6,32
800304e2:	c3 52       	brcc	8003054c <__avr32_f64_add_longshift>
800304e4:	f0 05 09 4e 	lsl	lr,r8,r5
800304e8:	f2 05 09 45 	lsl	r5,r9,r5
800304ec:	f0 06 0a 48 	lsr	r8,r8,r6
800304f0:	f2 06 0a 49 	lsr	r9,r9,r6
800304f4:	0a 48       	or	r8,r5

800304f6 <__avr32_f64_add_shift_done>:
800304f6:	10 0a       	add	r10,r8
800304f8:	f6 09 00 4b 	adc	r11,r11,r9
800304fc:	ed bb 00 15 	bld	r11,0x15
80030500:	c3 40       	breq	80030568 <__avr32_f64_add_res_of>

80030502 <__avr32_f64_add_res_of_done>:
80030502:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030506:	18 4b       	or	r11,r12

80030508 <__avr32_f64_add_round>:
80030508:	f9 da c0 01 	bfextu	r12,r10,0x0,0x1
8003050c:	18 4e       	or	lr,r12
8003050e:	ee 1e 80 00 	eorh	lr,0x8000
80030512:	f1 be 04 20 	satu	lr,0x1
80030516:	1c 0a       	add	r10,lr
80030518:	5c 0b       	acr	r11
8003051a:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003051e <__avr32_f64_add_opH_nan_or_inf>:
8003051e:	b5 cb       	cbr	r11,0x14
80030520:	f7 ea 10 0e 	or	lr,r11,r10
80030524:	c1 01       	brne	80030544 <__avr32_f64_add_return_nan>
80030526:	e0 46 07 ff 	cp.w	r6,2047
8003052a:	c0 30       	breq	80030530 <__avr32_f64_add_opL_nan_or_inf>
8003052c:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030530 <__avr32_f64_add_opL_nan_or_inf>:
80030530:	b5 c9       	cbr	r9,0x14
80030532:	f3 e8 10 0e 	or	lr,r9,r8
80030536:	c0 71       	brne	80030544 <__avr32_f64_add_return_nan>
80030538:	30 0a       	mov	r10,0
8003053a:	fc 1b 7f f0 	movh	r11,0x7ff0
8003053e:	18 4b       	or	r11,r12
80030540:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

80030544 <__avr32_f64_add_return_nan>:
80030544:	3f fa       	mov	r10,-1
80030546:	3f fb       	mov	r11,-1
80030548:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc

8003054c <__avr32_f64_add_longshift>:
8003054c:	f1 b6 04 c0 	satu	r6,0x6
80030550:	f0 0e 17 00 	moveq	lr,r8
80030554:	c0 60       	breq	80030560 <__avr32_f64_add_longshift+0x14>
80030556:	f2 05 09 4e 	lsl	lr,r9,r5
8003055a:	58 08       	cp.w	r8,0
8003055c:	5f 18       	srne	r8
8003055e:	10 4e       	or	lr,r8
80030560:	f2 06 0a 48 	lsr	r8,r9,r6
80030564:	30 09       	mov	r9,0
80030566:	cc 8b       	rjmp	800304f6 <__avr32_f64_add_shift_done>

80030568 <__avr32_f64_add_res_of>:
80030568:	fd ee 10 1e 	or	lr,lr,lr<<0x1
8003056c:	a1 9b       	lsr	r11,0x1
8003056e:	5d 0a       	ror	r10
80030570:	5d 0e       	ror	lr
80030572:	2f f7       	sub	r7,-1
80030574:	e0 47 07 ff 	cp.w	r7,2047
80030578:	f9 ba 00 00 	moveq	r10,0
8003057c:	f9 bb 00 00 	moveq	r11,0
80030580:	f9 be 00 00 	moveq	lr,0
80030584:	cb fb       	rjmp	80030502 <__avr32_f64_add_res_of_done>

80030586 <__avr32_f64_add_op2_subnormal>:
80030586:	30 16       	mov	r6,1
80030588:	58 07       	cp.w	r7,0
8003058a:	ca 01       	brne	800304ca <__avr32_f64_add+0x3e>
8003058c:	b5 cb       	cbr	r11,0x14
8003058e:	10 0a       	add	r10,r8
80030590:	f6 09 00 4b 	adc	r11,r11,r9
80030594:	18 4b       	or	r11,r12
80030596:	e3 cd 80 e0 	ldm	sp++,r5-r7,pc
8003059a:	d7 03       	nop

8003059c <__avr32_f64_to_u32>:
8003059c:	58 0b       	cp.w	r11,0
8003059e:	5e 6d       	retmi	0

800305a0 <__avr32_f64_to_s32>:
800305a0:	f6 0c 15 01 	lsl	r12,r11,0x1
800305a4:	b5 9c       	lsr	r12,0x15
800305a6:	e0 2c 03 ff 	sub	r12,1023
800305aa:	5e 3d       	retlo	0
800305ac:	f8 0c 11 1f 	rsub	r12,r12,31
800305b0:	16 99       	mov	r9,r11
800305b2:	ab 7b       	lsl	r11,0xb
800305b4:	bf bb       	sbr	r11,0x1f
800305b6:	f7 ea 13 5b 	or	r11,r11,r10>>0x15
800305ba:	f6 0c 0a 4b 	lsr	r11,r11,r12
800305be:	a1 79       	lsl	r9,0x1
800305c0:	5e 2b       	reths	r11
800305c2:	5c 3b       	neg	r11
800305c4:	5e fb       	retal	r11

800305c6 <__avr32_u32_to_f64>:
800305c6:	f8 cb 00 00 	sub	r11,r12,0
800305ca:	30 0c       	mov	r12,0
800305cc:	c0 38       	rjmp	800305d2 <__avr32_s32_to_f64+0x4>

800305ce <__avr32_s32_to_f64>:
800305ce:	18 9b       	mov	r11,r12
800305d0:	5c 4b       	abs	r11
800305d2:	30 0a       	mov	r10,0
800305d4:	5e 0b       	reteq	r11
800305d6:	d4 01       	pushm	lr
800305d8:	e0 69 04 1e 	mov	r9,1054
800305dc:	f6 08 12 00 	clz	r8,r11
800305e0:	c1 70       	breq	8003060e <__avr32_s32_to_f64+0x40>
800305e2:	c0 c3       	brcs	800305fa <__avr32_s32_to_f64+0x2c>
800305e4:	f0 0e 11 20 	rsub	lr,r8,32
800305e8:	f6 08 09 4b 	lsl	r11,r11,r8
800305ec:	f4 0e 0a 4e 	lsr	lr,r10,lr
800305f0:	1c 4b       	or	r11,lr
800305f2:	f4 08 09 4a 	lsl	r10,r10,r8
800305f6:	10 19       	sub	r9,r8
800305f8:	c0 b8       	rjmp	8003060e <__avr32_s32_to_f64+0x40>
800305fa:	f4 08 12 00 	clz	r8,r10
800305fe:	f9 b8 03 00 	movlo	r8,0
80030602:	f7 b8 02 e0 	subhs	r8,-32
80030606:	f4 08 09 4b 	lsl	r11,r10,r8
8003060a:	30 0a       	mov	r10,0
8003060c:	10 19       	sub	r9,r8
8003060e:	58 09       	cp.w	r9,0
80030610:	e0 89 00 30 	brgt	80030670 <__avr32_s32_to_f64+0xa2>
80030614:	5c 39       	neg	r9
80030616:	2f f9       	sub	r9,-1
80030618:	e0 49 00 36 	cp.w	r9,54
8003061c:	c0 43       	brcs	80030624 <__avr32_s32_to_f64+0x56>
8003061e:	30 0b       	mov	r11,0
80030620:	30 0a       	mov	r10,0
80030622:	c2 68       	rjmp	8003066e <__avr32_s32_to_f64+0xa0>
80030624:	2f 69       	sub	r9,-10
80030626:	f2 08 11 20 	rsub	r8,r9,32
8003062a:	e0 49 00 20 	cp.w	r9,32
8003062e:	c0 b2       	brcc	80030644 <__avr32_s32_to_f64+0x76>
80030630:	f4 08 09 4e 	lsl	lr,r10,r8
80030634:	f6 08 09 48 	lsl	r8,r11,r8
80030638:	f4 09 0a 4a 	lsr	r10,r10,r9
8003063c:	f6 09 0a 4b 	lsr	r11,r11,r9
80030640:	10 4b       	or	r11,r8
80030642:	c0 88       	rjmp	80030652 <__avr32_s32_to_f64+0x84>
80030644:	f6 08 09 4e 	lsl	lr,r11,r8
80030648:	14 4e       	or	lr,r10
8003064a:	16 9a       	mov	r10,r11
8003064c:	30 0b       	mov	r11,0
8003064e:	f4 09 0a 4a 	lsr	r10,r10,r9
80030652:	ed ba 00 00 	bld	r10,0x0
80030656:	c0 92       	brcc	80030668 <__avr32_s32_to_f64+0x9a>
80030658:	1c 7e       	tst	lr,lr
8003065a:	c0 41       	brne	80030662 <__avr32_s32_to_f64+0x94>
8003065c:	ed ba 00 01 	bld	r10,0x1
80030660:	c0 42       	brcc	80030668 <__avr32_s32_to_f64+0x9a>
80030662:	2f fa       	sub	r10,-1
80030664:	f7 bb 02 ff 	subhs	r11,-1
80030668:	5c fc       	rol	r12
8003066a:	5d 0b       	ror	r11
8003066c:	5d 0a       	ror	r10
8003066e:	d8 02       	popm	pc
80030670:	e0 68 03 ff 	mov	r8,1023
80030674:	ed ba 00 0b 	bld	r10,0xb
80030678:	f7 b8 00 ff 	subeq	r8,-1
8003067c:	10 0a       	add	r10,r8
8003067e:	5c 0b       	acr	r11
80030680:	f7 b9 03 fe 	sublo	r9,-2
80030684:	e0 49 07 ff 	cp.w	r9,2047
80030688:	c0 55       	brlt	80030692 <__avr32_s32_to_f64+0xc4>
8003068a:	30 0a       	mov	r10,0
8003068c:	fc 1b ff e0 	movh	r11,0xffe0
80030690:	c0 c8       	rjmp	800306a8 <__floatsidf_return_op1>
80030692:	ed bb 00 1f 	bld	r11,0x1f
80030696:	f7 b9 01 01 	subne	r9,1
8003069a:	ab 9a       	lsr	r10,0xb
8003069c:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
800306a0:	a1 7b       	lsl	r11,0x1
800306a2:	ab 9b       	lsr	r11,0xb
800306a4:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

800306a8 <__floatsidf_return_op1>:
800306a8:	a1 7c       	lsl	r12,0x1
800306aa:	5d 0b       	ror	r11
800306ac:	d8 02       	popm	pc

800306ae <__avr32_f64_cmp_eq>:
800306ae:	10 3a       	cp.w	r10,r8
800306b0:	f2 0b 13 00 	cpc	r11,r9
800306b4:	c0 80       	breq	800306c4 <__avr32_f64_cmp_eq+0x16>
800306b6:	a1 7b       	lsl	r11,0x1
800306b8:	a1 79       	lsl	r9,0x1
800306ba:	14 4b       	or	r11,r10
800306bc:	12 4b       	or	r11,r9
800306be:	10 4b       	or	r11,r8
800306c0:	5e 0f       	reteq	1
800306c2:	5e fd       	retal	0
800306c4:	a1 7b       	lsl	r11,0x1
800306c6:	fc 1c ff e0 	movh	r12,0xffe0
800306ca:	58 0a       	cp.w	r10,0
800306cc:	f8 0b 13 00 	cpc	r11,r12
800306d0:	5e 8f       	retls	1
800306d2:	5e fd       	retal	0

800306d4 <__avr32_f64_cmp_ge>:
800306d4:	1a de       	st.w	--sp,lr
800306d6:	1a d7       	st.w	--sp,r7
800306d8:	a1 7b       	lsl	r11,0x1
800306da:	5f 3c       	srlo	r12
800306dc:	a1 79       	lsl	r9,0x1
800306de:	5f 37       	srlo	r7
800306e0:	5c fc       	rol	r12
800306e2:	fc 1e ff e0 	movh	lr,0xffe0
800306e6:	58 0a       	cp.w	r10,0
800306e8:	fc 0b 13 00 	cpc	r11,lr
800306ec:	e0 8b 00 1d 	brhi	80030726 <__avr32_f64_cmp_ge+0x52>
800306f0:	58 08       	cp.w	r8,0
800306f2:	fc 09 13 00 	cpc	r9,lr
800306f6:	e0 8b 00 18 	brhi	80030726 <__avr32_f64_cmp_ge+0x52>
800306fa:	58 0b       	cp.w	r11,0
800306fc:	f5 ba 00 00 	subfeq	r10,0
80030700:	c1 50       	breq	8003072a <__avr32_f64_cmp_ge+0x56>
80030702:	1b 07       	ld.w	r7,sp++
80030704:	1b 0e       	ld.w	lr,sp++
80030706:	58 3c       	cp.w	r12,3
80030708:	c0 a0       	breq	8003071c <__avr32_f64_cmp_ge+0x48>
8003070a:	58 1c       	cp.w	r12,1
8003070c:	c0 33       	brcs	80030712 <__avr32_f64_cmp_ge+0x3e>
8003070e:	5e 0f       	reteq	1
80030710:	5e 1d       	retne	0
80030712:	10 3a       	cp.w	r10,r8
80030714:	f2 0b 13 00 	cpc	r11,r9
80030718:	5e 2f       	reths	1
8003071a:	5e 3d       	retlo	0
8003071c:	14 38       	cp.w	r8,r10
8003071e:	f6 09 13 00 	cpc	r9,r11
80030722:	5e 2f       	reths	1
80030724:	5e 3d       	retlo	0
80030726:	1b 07       	ld.w	r7,sp++
80030728:	d8 0a       	popm	pc,r12=0
8003072a:	58 17       	cp.w	r7,1
8003072c:	5f 0c       	sreq	r12
8003072e:	58 09       	cp.w	r9,0
80030730:	f5 b8 00 00 	subfeq	r8,0
80030734:	1b 07       	ld.w	r7,sp++
80030736:	1b 0e       	ld.w	lr,sp++
80030738:	5e 0f       	reteq	1
8003073a:	5e fc       	retal	r12

8003073c <__avr32_f64_cmp_lt>:
8003073c:	1a de       	st.w	--sp,lr
8003073e:	1a d7       	st.w	--sp,r7
80030740:	a1 7b       	lsl	r11,0x1
80030742:	5f 3c       	srlo	r12
80030744:	a1 79       	lsl	r9,0x1
80030746:	5f 37       	srlo	r7
80030748:	5c fc       	rol	r12
8003074a:	fc 1e ff e0 	movh	lr,0xffe0
8003074e:	58 0a       	cp.w	r10,0
80030750:	fc 0b 13 00 	cpc	r11,lr
80030754:	e0 8b 00 1d 	brhi	8003078e <__avr32_f64_cmp_lt+0x52>
80030758:	58 08       	cp.w	r8,0
8003075a:	fc 09 13 00 	cpc	r9,lr
8003075e:	e0 8b 00 18 	brhi	8003078e <__avr32_f64_cmp_lt+0x52>
80030762:	58 0b       	cp.w	r11,0
80030764:	f5 ba 00 00 	subfeq	r10,0
80030768:	c1 50       	breq	80030792 <__avr32_f64_cmp_lt+0x56>
8003076a:	1b 07       	ld.w	r7,sp++
8003076c:	1b 0e       	ld.w	lr,sp++
8003076e:	58 3c       	cp.w	r12,3
80030770:	c0 a0       	breq	80030784 <__avr32_f64_cmp_lt+0x48>
80030772:	58 1c       	cp.w	r12,1
80030774:	c0 33       	brcs	8003077a <__avr32_f64_cmp_lt+0x3e>
80030776:	5e 0d       	reteq	0
80030778:	5e 1f       	retne	1
8003077a:	10 3a       	cp.w	r10,r8
8003077c:	f2 0b 13 00 	cpc	r11,r9
80030780:	5e 2d       	reths	0
80030782:	5e 3f       	retlo	1
80030784:	14 38       	cp.w	r8,r10
80030786:	f6 09 13 00 	cpc	r9,r11
8003078a:	5e 2d       	reths	0
8003078c:	5e 3f       	retlo	1
8003078e:	1b 07       	ld.w	r7,sp++
80030790:	d8 0a       	popm	pc,r12=0
80030792:	58 17       	cp.w	r7,1
80030794:	5f 1c       	srne	r12
80030796:	58 09       	cp.w	r9,0
80030798:	f5 b8 00 00 	subfeq	r8,0
8003079c:	1b 07       	ld.w	r7,sp++
8003079e:	1b 0e       	ld.w	lr,sp++
800307a0:	5e 0d       	reteq	0
800307a2:	5e fc       	retal	r12

800307a4 <__avr32_f64_div>:
800307a4:	eb cd 40 ff 	pushm	r0-r7,lr
800307a8:	f7 e9 20 0e 	eor	lr,r11,r9
800307ac:	f6 07 16 14 	lsr	r7,r11,0x14
800307b0:	a9 7b       	lsl	r11,0x9
800307b2:	f7 ea 13 7b 	or	r11,r11,r10>>0x17
800307b6:	a9 7a       	lsl	r10,0x9
800307b8:	bd bb       	sbr	r11,0x1d
800307ba:	e4 1b 3f ff 	andh	r11,0x3fff
800307be:	ab d7       	cbr	r7,0xb
800307c0:	e0 80 00 cc 	breq	80030958 <__avr32_f64_div_round_subnormal+0x54>
800307c4:	e0 47 07 ff 	cp.w	r7,2047
800307c8:	e0 84 00 b5 	brge	80030932 <__avr32_f64_div_round_subnormal+0x2e>
800307cc:	f2 06 16 14 	lsr	r6,r9,0x14
800307d0:	a9 79       	lsl	r9,0x9
800307d2:	f3 e8 13 79 	or	r9,r9,r8>>0x17
800307d6:	a9 78       	lsl	r8,0x9
800307d8:	bd b9       	sbr	r9,0x1d
800307da:	e4 19 3f ff 	andh	r9,0x3fff
800307de:	ab d6       	cbr	r6,0xb
800307e0:	e0 80 00 e2 	breq	800309a4 <__avr32_f64_div_round_subnormal+0xa0>
800307e4:	e0 46 07 ff 	cp.w	r6,2047
800307e8:	e0 84 00 b2 	brge	8003094c <__avr32_f64_div_round_subnormal+0x48>
800307ec:	0c 17       	sub	r7,r6
800307ee:	fe 37 fc 01 	sub	r7,-1023
800307f2:	fc 1c 80 00 	movh	r12,0x8000
800307f6:	f8 03 16 01 	lsr	r3,r12,0x1
800307fa:	e9 d9 c3 62 	bfextu	r4,r9,0x1b,0x2
800307fe:	5c d4       	com	r4
80030800:	e7 d4 d3 82 	bfins	r3,r4,0x1c,0x2
80030804:	e6 09 06 44 	mulu.d	r4,r3,r9
80030808:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003080c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030810:	ea 03 15 02 	lsl	r3,r5,0x2
80030814:	e6 09 06 44 	mulu.d	r4,r3,r9
80030818:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003081c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030820:	ea 03 15 02 	lsl	r3,r5,0x2
80030824:	e6 09 06 44 	mulu.d	r4,r3,r9
80030828:	f8 05 01 25 	sub	r5,r12,r5<<0x2
8003082c:	e6 05 06 44 	mulu.d	r4,r3,r5
80030830:	ea 03 15 02 	lsl	r3,r5,0x2
80030834:	e6 08 06 40 	mulu.d	r0,r3,r8
80030838:	e4 09 07 40 	macu.d	r0,r2,r9
8003083c:	e6 09 06 44 	mulu.d	r4,r3,r9
80030840:	02 04       	add	r4,r1
80030842:	5c 05       	acr	r5
80030844:	a3 65       	lsl	r5,0x2
80030846:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
8003084a:	a3 64       	lsl	r4,0x2
8003084c:	5c 34       	neg	r4
8003084e:	f8 05 01 45 	sbc	r5,r12,r5
80030852:	e6 04 06 40 	mulu.d	r0,r3,r4
80030856:	e4 05 07 40 	macu.d	r0,r2,r5
8003085a:	e6 05 06 44 	mulu.d	r4,r3,r5
8003085e:	02 04       	add	r4,r1
80030860:	5c 05       	acr	r5
80030862:	ea 03 15 02 	lsl	r3,r5,0x2
80030866:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
8003086a:	e8 02 15 02 	lsl	r2,r4,0x2
8003086e:	e6 08 06 40 	mulu.d	r0,r3,r8
80030872:	e4 09 07 40 	macu.d	r0,r2,r9
80030876:	e6 09 06 44 	mulu.d	r4,r3,r9
8003087a:	02 04       	add	r4,r1
8003087c:	5c 05       	acr	r5
8003087e:	a3 65       	lsl	r5,0x2
80030880:	eb e4 13 e5 	or	r5,r5,r4>>0x1e
80030884:	a3 64       	lsl	r4,0x2
80030886:	5c 34       	neg	r4
80030888:	f8 05 01 45 	sbc	r5,r12,r5
8003088c:	e6 04 06 40 	mulu.d	r0,r3,r4
80030890:	e4 05 07 40 	macu.d	r0,r2,r5
80030894:	e6 05 06 44 	mulu.d	r4,r3,r5
80030898:	02 04       	add	r4,r1
8003089a:	5c 05       	acr	r5
8003089c:	ea 03 15 02 	lsl	r3,r5,0x2
800308a0:	e7 e4 13 e3 	or	r3,r3,r4>>0x1e
800308a4:	e8 02 15 02 	lsl	r2,r4,0x2
800308a8:	e6 0a 06 40 	mulu.d	r0,r3,r10
800308ac:	e4 0b 07 40 	macu.d	r0,r2,r11
800308b0:	e6 0b 06 42 	mulu.d	r2,r3,r11
800308b4:	02 02       	add	r2,r1
800308b6:	5c 03       	acr	r3
800308b8:	ed b3 00 1c 	bld	r3,0x1c
800308bc:	c0 90       	breq	800308ce <__avr32_f64_div+0x12a>
800308be:	a1 72       	lsl	r2,0x1
800308c0:	5c f3       	rol	r3
800308c2:	20 17       	sub	r7,1
800308c4:	a3 9a       	lsr	r10,0x3
800308c6:	f5 eb 11 da 	or	r10,r10,r11<<0x1d
800308ca:	a3 9b       	lsr	r11,0x3
800308cc:	c0 58       	rjmp	800308d6 <__avr32_f64_div+0x132>
800308ce:	a5 8a       	lsr	r10,0x4
800308d0:	f5 eb 11 ca 	or	r10,r10,r11<<0x1c
800308d4:	a5 8b       	lsr	r11,0x4
800308d6:	58 07       	cp.w	r7,0
800308d8:	e0 8a 00 8b 	brle	800309ee <__avr32_f64_div_res_subnormal>
800308dc:	e0 12 ff 00 	andl	r2,0xff00
800308e0:	e8 12 00 80 	orl	r2,0x80
800308e4:	e6 08 06 40 	mulu.d	r0,r3,r8
800308e8:	e4 09 07 40 	macu.d	r0,r2,r9
800308ec:	e4 08 06 44 	mulu.d	r4,r2,r8
800308f0:	e6 09 06 48 	mulu.d	r8,r3,r9
800308f4:	00 05       	add	r5,r0
800308f6:	f0 01 00 48 	adc	r8,r8,r1
800308fa:	5c 09       	acr	r9
800308fc:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030900:	58 04       	cp.w	r4,0
80030902:	5c 25       	cpc	r5

80030904 <__avr32_f64_div_round_subnormal>:
80030904:	f4 08 13 00 	cpc	r8,r10
80030908:	f6 09 13 00 	cpc	r9,r11
8003090c:	5f 36       	srlo	r6
8003090e:	f8 06 17 00 	moveq	r6,r12
80030912:	e4 0a 16 08 	lsr	r10,r2,0x8
80030916:	f5 e3 11 8a 	or	r10,r10,r3<<0x18
8003091a:	e6 0b 16 08 	lsr	r11,r3,0x8
8003091e:	f7 d7 d2 8b 	bfins	r11,r7,0x14,0xb
80030922:	ed be 00 1f 	bld	lr,0x1f
80030926:	ef bb 00 1f 	bst	r11,0x1f
8003092a:	0c 0a       	add	r10,r6
8003092c:	5c 0b       	acr	r11
8003092e:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030932:	e4 1b 00 0f 	andh	r11,0xf
80030936:	14 4b       	or	r11,r10
80030938:	e0 81 00 a7 	brne	80030a86 <__avr32_f64_div_res_subnormal+0x98>
8003093c:	f2 06 16 14 	lsr	r6,r9,0x14
80030940:	ab d6       	cbr	r6,0xb
80030942:	e0 46 07 ff 	cp.w	r6,2047
80030946:	e0 81 00 a4 	brne	80030a8e <__avr32_f64_div_res_subnormal+0xa0>
8003094a:	c9 e8       	rjmp	80030a86 <__avr32_f64_div_res_subnormal+0x98>
8003094c:	e4 19 00 0f 	andh	r9,0xf
80030950:	10 49       	or	r9,r8
80030952:	e0 81 00 9a 	brne	80030a86 <__avr32_f64_div_res_subnormal+0x98>
80030956:	c9 28       	rjmp	80030a7a <__avr32_f64_div_res_subnormal+0x8c>
80030958:	a3 7b       	lsl	r11,0x3
8003095a:	f7 ea 13 db 	or	r11,r11,r10>>0x1d
8003095e:	a3 7a       	lsl	r10,0x3
80030960:	f5 eb 10 04 	or	r4,r10,r11
80030964:	e0 80 00 a0 	breq	80030aa4 <__avr32_f64_div_op1_zero>
80030968:	f6 04 12 00 	clz	r4,r11
8003096c:	c1 70       	breq	8003099a <__avr32_f64_div_round_subnormal+0x96>
8003096e:	c0 c3       	brcs	80030986 <__avr32_f64_div_round_subnormal+0x82>
80030970:	e8 05 11 20 	rsub	r5,r4,32
80030974:	f6 04 09 4b 	lsl	r11,r11,r4
80030978:	f4 05 0a 45 	lsr	r5,r10,r5
8003097c:	0a 4b       	or	r11,r5
8003097e:	f4 04 09 4a 	lsl	r10,r10,r4
80030982:	08 17       	sub	r7,r4
80030984:	c0 b8       	rjmp	8003099a <__avr32_f64_div_round_subnormal+0x96>
80030986:	f4 04 12 00 	clz	r4,r10
8003098a:	f9 b4 03 00 	movlo	r4,0
8003098e:	f7 b4 02 e0 	subhs	r4,-32
80030992:	f4 04 09 4b 	lsl	r11,r10,r4
80030996:	30 0a       	mov	r10,0
80030998:	08 17       	sub	r7,r4
8003099a:	a3 8a       	lsr	r10,0x2
8003099c:	f5 eb 11 ea 	or	r10,r10,r11<<0x1e
800309a0:	a3 8b       	lsr	r11,0x2
800309a2:	c1 1b       	rjmp	800307c4 <__avr32_f64_div+0x20>
800309a4:	a3 79       	lsl	r9,0x3
800309a6:	f3 e8 13 d9 	or	r9,r9,r8>>0x1d
800309aa:	a3 78       	lsl	r8,0x3
800309ac:	f3 e8 10 04 	or	r4,r9,r8
800309b0:	c6 f0       	breq	80030a8e <__avr32_f64_div_res_subnormal+0xa0>
800309b2:	f2 04 12 00 	clz	r4,r9
800309b6:	c1 70       	breq	800309e4 <__avr32_f64_div_round_subnormal+0xe0>
800309b8:	c0 c3       	brcs	800309d0 <__avr32_f64_div_round_subnormal+0xcc>
800309ba:	e8 05 11 20 	rsub	r5,r4,32
800309be:	f2 04 09 49 	lsl	r9,r9,r4
800309c2:	f0 05 0a 45 	lsr	r5,r8,r5
800309c6:	0a 49       	or	r9,r5
800309c8:	f0 04 09 48 	lsl	r8,r8,r4
800309cc:	08 16       	sub	r6,r4
800309ce:	c0 b8       	rjmp	800309e4 <__avr32_f64_div_round_subnormal+0xe0>
800309d0:	f0 04 12 00 	clz	r4,r8
800309d4:	f9 b4 03 00 	movlo	r4,0
800309d8:	f7 b4 02 e0 	subhs	r4,-32
800309dc:	f0 04 09 49 	lsl	r9,r8,r4
800309e0:	30 08       	mov	r8,0
800309e2:	08 16       	sub	r6,r4
800309e4:	a3 88       	lsr	r8,0x2
800309e6:	f1 e9 11 e8 	or	r8,r8,r9<<0x1e
800309ea:	a3 89       	lsr	r9,0x2
800309ec:	cf ca       	rjmp	800307e4 <__avr32_f64_div+0x40>

800309ee <__avr32_f64_div_res_subnormal>:
800309ee:	5c 37       	neg	r7
800309f0:	2f f7       	sub	r7,-1
800309f2:	f1 b7 04 c0 	satu	r7,0x6
800309f6:	e0 47 00 20 	cp.w	r7,32
800309fa:	c1 54       	brge	80030a24 <__avr32_f64_div_res_subnormal+0x36>
800309fc:	ee 06 11 20 	rsub	r6,r7,32
80030a00:	e4 07 0a 42 	lsr	r2,r2,r7
80030a04:	e6 06 09 4c 	lsl	r12,r3,r6
80030a08:	18 42       	or	r2,r12
80030a0a:	e6 07 0a 43 	lsr	r3,r3,r7
80030a0e:	f4 06 09 41 	lsl	r1,r10,r6
80030a12:	f4 07 0a 4a 	lsr	r10,r10,r7
80030a16:	f6 06 09 4c 	lsl	r12,r11,r6
80030a1a:	18 4a       	or	r10,r12
80030a1c:	f6 07 0a 4b 	lsr	r11,r11,r7
80030a20:	30 00       	mov	r0,0
80030a22:	c1 58       	rjmp	80030a4c <__avr32_f64_div_res_subnormal+0x5e>
80030a24:	ee 06 11 20 	rsub	r6,r7,32
80030a28:	f9 b0 00 00 	moveq	r0,0
80030a2c:	f9 bc 00 00 	moveq	r12,0
80030a30:	c0 50       	breq	80030a3a <__avr32_f64_div_res_subnormal+0x4c>
80030a32:	f4 06 09 40 	lsl	r0,r10,r6
80030a36:	f6 06 09 4c 	lsl	r12,r11,r6
80030a3a:	e6 07 0a 42 	lsr	r2,r3,r7
80030a3e:	30 03       	mov	r3,0
80030a40:	f4 07 0a 41 	lsr	r1,r10,r7
80030a44:	18 41       	or	r1,r12
80030a46:	f6 07 0a 4a 	lsr	r10,r11,r7
80030a4a:	30 0b       	mov	r11,0
80030a4c:	e0 12 ff 00 	andl	r2,0xff00
80030a50:	e8 12 00 80 	orl	r2,0x80
80030a54:	e6 08 06 46 	mulu.d	r6,r3,r8
80030a58:	e4 09 07 46 	macu.d	r6,r2,r9
80030a5c:	e4 08 06 44 	mulu.d	r4,r2,r8
80030a60:	e6 09 06 48 	mulu.d	r8,r3,r9
80030a64:	0c 05       	add	r5,r6
80030a66:	f0 07 00 48 	adc	r8,r8,r7
80030a6a:	5c 09       	acr	r9
80030a6c:	30 07       	mov	r7,0
80030a6e:	f9 d2 c1 01 	bfextu	r12,r2,0x8,0x1
80030a72:	00 34       	cp.w	r4,r0
80030a74:	e2 05 13 00 	cpc	r5,r1
80030a78:	c4 6b       	rjmp	80030904 <__avr32_f64_div_round_subnormal>
80030a7a:	1c 9b       	mov	r11,lr
80030a7c:	e6 1b 80 00 	andh	r11,0x8000,COH
80030a80:	30 0a       	mov	r10,0
80030a82:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030a86:	3f fb       	mov	r11,-1
80030a88:	30 0a       	mov	r10,0
80030a8a:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc
80030a8e:	f5 eb 10 04 	or	r4,r10,r11
80030a92:	c0 90       	breq	80030aa4 <__avr32_f64_div_op1_zero>
80030a94:	1c 9b       	mov	r11,lr
80030a96:	e6 1b 80 00 	andh	r11,0x8000,COH
80030a9a:	ea 1b 7f f0 	orh	r11,0x7ff0
80030a9e:	30 0a       	mov	r10,0
80030aa0:	e3 cd 80 ff 	ldm	sp++,r0-r7,pc

80030aa4 <__avr32_f64_div_op1_zero>:
80030aa4:	f1 e9 10 15 	or	r5,r8,r9<<0x1
80030aa8:	ce f0       	breq	80030a86 <__avr32_f64_div_res_subnormal+0x98>
80030aaa:	e9 d9 c2 8b 	bfextu	r4,r9,0x14,0xb
80030aae:	e0 44 07 ff 	cp.w	r4,2047
80030ab2:	ce 41       	brne	80030a7a <__avr32_f64_div_res_subnormal+0x8c>
80030ab4:	f1 e9 10 c5 	or	r5,r8,r9<<0xc
80030ab8:	ce 10       	breq	80030a7a <__avr32_f64_div_res_subnormal+0x8c>
80030aba:	ce 6b       	rjmp	80030a86 <__avr32_f64_div_res_subnormal+0x98>

80030abc <__avr32_f32_div>:
80030abc:	f7 ec 20 08 	eor	r8,r11,r12
80030ac0:	a1 7c       	lsl	r12,0x1
80030ac2:	a1 7b       	lsl	r11,0x1
80030ac4:	c7 a0       	breq	80030bb8 <__divsf_return_op1+0x16>
80030ac6:	18 7c       	tst	r12,r12
80030ac8:	f9 b9 00 00 	moveq	r9,0
80030acc:	c0 90       	breq	80030ade <__avr32_f32_div+0x22>
80030ace:	f8 09 16 18 	lsr	r9,r12,0x18
80030ad2:	c7 e0       	breq	80030bce <__divsf_return_op1+0x2c>
80030ad4:	e0 49 00 ff 	cp.w	r9,255
80030ad8:	c6 82       	brcc	80030ba8 <__divsf_return_op1+0x6>
80030ada:	a7 7c       	lsl	r12,0x7
80030adc:	bf bc       	sbr	r12,0x1f
80030ade:	f6 0a 16 18 	lsr	r10,r11,0x18
80030ae2:	c7 e0       	breq	80030bde <__divsf_return_op1+0x3c>
80030ae4:	e0 4a 00 ff 	cp.w	r10,255
80030ae8:	c6 62       	brcc	80030bb4 <__divsf_return_op1+0x12>
80030aea:	a7 7b       	lsl	r11,0x7
80030aec:	bf bb       	sbr	r11,0x1f
80030aee:	58 09       	cp.w	r9,0
80030af0:	f5 bc 00 00 	subfeq	r12,0
80030af4:	5e 0d       	reteq	0
80030af6:	1a d5       	st.w	--sp,r5
80030af8:	bb 27       	st.d	--sp,r6
80030afa:	14 19       	sub	r9,r10
80030afc:	28 19       	sub	r9,-127
80030afe:	fc 1a 80 00 	movh	r10,0x8000
80030b02:	a3 8c       	lsr	r12,0x2
80030b04:	f6 05 16 02 	lsr	r5,r11,0x2
80030b08:	f4 0b 16 01 	lsr	r11,r10,0x1
80030b0c:	ed d5 c3 62 	bfextu	r6,r5,0x1b,0x2
80030b10:	5c d6       	com	r6
80030b12:	f7 d6 d3 82 	bfins	r11,r6,0x1c,0x2
80030b16:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b1a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b1e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b22:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b26:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b2a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b2e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b32:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b36:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b3a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b3e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b42:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b46:	f6 05 06 46 	mulu.d	r6,r11,r5
80030b4a:	f4 07 01 27 	sub	r7,r10,r7<<0x2
80030b4e:	f6 07 06 46 	mulu.d	r6,r11,r7
80030b52:	ee 0b 15 02 	lsl	r11,r7,0x2
80030b56:	f6 0c 06 46 	mulu.d	r6,r11,r12
80030b5a:	a5 8c       	lsr	r12,0x4
80030b5c:	ed b7 00 1c 	bld	r7,0x1c
80030b60:	c0 40       	breq	80030b68 <__avr32_f32_div+0xac>
80030b62:	a1 77       	lsl	r7,0x1
80030b64:	20 19       	sub	r9,1
80030b66:	a1 7c       	lsl	r12,0x1
80030b68:	58 09       	cp.w	r9,0
80030b6a:	e0 8a 00 42 	brle	80030bee <__avr32_f32_div_res_subnormal>
80030b6e:	e0 17 ff e0 	andl	r7,0xffe0
80030b72:	e8 17 00 10 	orl	r7,0x10
80030b76:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030b7a:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030b7e:	58 0a       	cp.w	r10,0

80030b80 <__avr32_f32_div_round_subnormal>:
80030b80:	f8 0b 13 00 	cpc	r11,r12
80030b84:	5f 3b       	srlo	r11
80030b86:	ea 0b 17 00 	moveq	r11,r5
80030b8a:	ee 0c 16 05 	lsr	r12,r7,0x5
80030b8e:	f9 d9 d2 e8 	bfins	r12,r9,0x17,0x8
80030b92:	bb 07       	ld.d	r6,sp++
80030b94:	1b 05       	ld.w	r5,sp++
80030b96:	ed b8 00 1f 	bld	r8,0x1f
80030b9a:	ef bc 00 1f 	bst	r12,0x1f
80030b9e:	16 0c       	add	r12,r11
80030ba0:	5e fc       	retal	r12

80030ba2 <__divsf_return_op1>:
80030ba2:	a1 78       	lsl	r8,0x1
80030ba4:	5d 0c       	ror	r12
80030ba6:	5e fc       	retal	r12
80030ba8:	5e 1e       	retne	-1
80030baa:	fc 19 ff 00 	movh	r9,0xff00
80030bae:	12 3b       	cp.w	r11,r9
80030bb0:	cf 93       	brcs	80030ba2 <__divsf_return_op1>
80030bb2:	5e fe       	retal	-1
80030bb4:	5e 0d       	reteq	0
80030bb6:	5e fe       	retal	-1
80030bb8:	18 7c       	tst	r12,r12
80030bba:	5e 0e       	reteq	-1
80030bbc:	f8 09 16 18 	lsr	r9,r12,0x18
80030bc0:	c0 70       	breq	80030bce <__divsf_return_op1+0x2c>
80030bc2:	e0 49 00 ff 	cp.w	r9,255
80030bc6:	cf 12       	brcc	80030ba8 <__divsf_return_op1+0x6>
80030bc8:	fc 1c ff 00 	movh	r12,0xff00
80030bcc:	ce bb       	rjmp	80030ba2 <__divsf_return_op1>
80030bce:	a7 7c       	lsl	r12,0x7
80030bd0:	f8 09 12 00 	clz	r9,r12
80030bd4:	f8 09 09 4c 	lsl	r12,r12,r9
80030bd8:	f2 09 11 01 	rsub	r9,r9,1
80030bdc:	c8 1b       	rjmp	80030ade <__avr32_f32_div+0x22>
80030bde:	a7 7b       	lsl	r11,0x7
80030be0:	f6 0a 12 00 	clz	r10,r11
80030be4:	f6 0a 09 4b 	lsl	r11,r11,r10
80030be8:	f4 0a 11 01 	rsub	r10,r10,1
80030bec:	c8 5b       	rjmp	80030af6 <__avr32_f32_div+0x3a>

80030bee <__avr32_f32_div_res_subnormal>:
80030bee:	5c 39       	neg	r9
80030bf0:	2f f9       	sub	r9,-1
80030bf2:	f1 b9 04 a0 	satu	r9,0x5
80030bf6:	f2 0a 11 20 	rsub	r10,r9,32
80030bfa:	ee 09 0a 47 	lsr	r7,r7,r9
80030bfe:	f8 0a 09 46 	lsl	r6,r12,r10
80030c02:	f8 09 0a 4c 	lsr	r12,r12,r9
80030c06:	e0 17 ff e0 	andl	r7,0xffe0
80030c0a:	e8 17 00 10 	orl	r7,0x10
80030c0e:	ea 07 06 4a 	mulu.d	r10,r5,r7
80030c12:	30 09       	mov	r9,0
80030c14:	eb d7 c0 a1 	bfextu	r5,r7,0x5,0x1
80030c18:	0c 3a       	cp.w	r10,r6
80030c1a:	cb 3b       	rjmp	80030b80 <__avr32_f32_div_round_subnormal>

80030c1c <__avr32_f32_to_f64>:
80030c1c:	f8 0b 15 01 	lsl	r11,r12,0x1
80030c20:	f9 ba 00 00 	moveq	r10,0
80030c24:	5e 0b       	reteq	r11
80030c26:	f3 db c3 08 	bfextu	r9,r11,0x18,0x8
80030c2a:	e0 49 00 ff 	cp.w	r9,255
80030c2e:	c1 e0       	breq	80030c6a <__extendsfdf_return_op1+0x6>
80030c30:	a7 7b       	lsl	r11,0x7
80030c32:	30 0a       	mov	r10,0
80030c34:	58 09       	cp.w	r9,0
80030c36:	f7 b9 00 ff 	subeq	r9,-1
80030c3a:	5f 18       	srne	r8
80030c3c:	f7 e8 11 fb 	or	r11,r11,r8<<0x1f
80030c40:	fe 39 fc 80 	sub	r9,-896
80030c44:	f6 08 12 00 	clz	r8,r11
80030c48:	10 19       	sub	r9,r8
80030c4a:	f6 08 09 4b 	lsl	r11,r11,r8
80030c4e:	ed bb 00 1f 	bld	r11,0x1f
80030c52:	f7 b9 01 01 	subne	r9,1
80030c56:	ab 9a       	lsr	r10,0xb
80030c58:	f5 eb 11 5a 	or	r10,r10,r11<<0x15
80030c5c:	a1 7b       	lsl	r11,0x1
80030c5e:	ab 9b       	lsr	r11,0xb
80030c60:	f7 e9 11 5b 	or	r11,r11,r9<<0x15

80030c64 <__extendsfdf_return_op1>:
80030c64:	a1 7c       	lsl	r12,0x1
80030c66:	5d 0b       	ror	r11
80030c68:	5e fb       	retal	r11
80030c6a:	fc 1a ff e0 	movh	r10,0xffe0
80030c6e:	a9 6b       	lsl	r11,0x8
80030c70:	f9 bb 01 ff 	movne	r11,-1
80030c74:	f4 0b 17 00 	moveq	r11,r10
80030c78:	30 0a       	mov	r10,0
80030c7a:	cf 5b       	rjmp	80030c64 <__extendsfdf_return_op1>

80030c7c <__avr32_f64_to_f32>:
80030c7c:	f6 09 15 01 	lsl	r9,r11,0x1
80030c80:	b5 99       	lsr	r9,0x15
80030c82:	5e 0d       	reteq	0
80030c84:	f6 08 15 0a 	lsl	r8,r11,0xa
80030c88:	f1 ea 13 6c 	or	r12,r8,r10>>0x16
80030c8c:	ab 6a       	lsl	r10,0xa
80030c8e:	5c 3a       	neg	r10
80030c90:	5c fc       	rol	r12
80030c92:	e0 49 07 ff 	cp.w	r9,2047
80030c96:	c1 a0       	breq	80030cca <__truncdfsf_return_op1+0x6>
80030c98:	e0 29 03 80 	sub	r9,896
80030c9c:	bf bc       	sbr	r12,0x1f
80030c9e:	58 09       	cp.w	r9,0
80030ca0:	e0 8a 00 1a 	brle	80030cd4 <__truncdfsf_return_op1+0x10>
80030ca4:	37 fa       	mov	r10,127
80030ca6:	ed bc 00 08 	bld	r12,0x8
80030caa:	f7 ba 00 ff 	subeq	r10,-1
80030cae:	14 0c       	add	r12,r10
80030cb0:	f7 b9 03 fe 	sublo	r9,-2
80030cb4:	ed bc 00 1f 	bld	r12,0x1f
80030cb8:	f7 b9 01 01 	subne	r9,1
80030cbc:	f8 0c 16 07 	lsr	r12,r12,0x7
80030cc0:	f9 d9 d3 08 	bfins	r12,r9,0x18,0x8

80030cc4 <__truncdfsf_return_op1>:
80030cc4:	a1 7b       	lsl	r11,0x1
80030cc6:	5d 0c       	ror	r12
80030cc8:	5e fc       	retal	r12
80030cca:	bf dc       	cbr	r12,0x1f
80030ccc:	5e 1e       	retne	-1
80030cce:	fc 1c 7f 80 	movh	r12,0x7f80
80030cd2:	5e fc       	retal	r12
80030cd4:	f2 09 11 01 	rsub	r9,r9,1
80030cd8:	59 99       	cp.w	r9,25
80030cda:	f9 bc 02 00 	movhs	r12,0
80030cde:	c1 32       	brcc	80030d04 <__truncdfsf_return_op1+0x40>
80030ce0:	f2 0a 11 20 	rsub	r10,r9,32
80030ce4:	f8 0a 09 4a 	lsl	r10,r12,r10
80030ce8:	5f 1a       	srne	r10
80030cea:	f8 09 0a 4c 	lsr	r12,r12,r9
80030cee:	14 4c       	or	r12,r10
80030cf0:	37 fa       	mov	r10,127
80030cf2:	ed bc 00 08 	bld	r12,0x8
80030cf6:	f7 ba 00 ff 	subeq	r10,-1
80030cfa:	14 0c       	add	r12,r10
80030cfc:	f8 0c 16 07 	lsr	r12,r12,0x7
80030d00:	a1 7b       	lsl	r11,0x1
80030d02:	5d 0c       	ror	r12
80030d04:	5e fc       	retal	r12

80030d06 <__avr32_udiv64>:
80030d06:	d4 31       	pushm	r0-r7,lr
80030d08:	1a 97       	mov	r7,sp
80030d0a:	20 3d       	sub	sp,12
80030d0c:	10 9c       	mov	r12,r8
80030d0e:	12 9e       	mov	lr,r9
80030d10:	14 93       	mov	r3,r10
80030d12:	58 09       	cp.w	r9,0
80030d14:	e0 81 00 bd 	brne	80030e8e <__avr32_udiv64+0x188>
80030d18:	16 38       	cp.w	r8,r11
80030d1a:	e0 88 00 40 	brls	80030d9a <__avr32_udiv64+0x94>
80030d1e:	f0 08 12 00 	clz	r8,r8
80030d22:	c0 d0       	breq	80030d3c <__avr32_udiv64+0x36>
80030d24:	f6 08 09 4b 	lsl	r11,r11,r8
80030d28:	f0 09 11 20 	rsub	r9,r8,32
80030d2c:	f8 08 09 4c 	lsl	r12,r12,r8
80030d30:	f4 09 0a 49 	lsr	r9,r10,r9
80030d34:	f4 08 09 43 	lsl	r3,r10,r8
80030d38:	f3 eb 10 0b 	or	r11,r9,r11
80030d3c:	f8 0e 16 10 	lsr	lr,r12,0x10
80030d40:	f5 dc c0 10 	bfextu	r10,r12,0x0,0x10
80030d44:	f6 0e 0d 00 	divu	r0,r11,lr
80030d48:	e6 0b 16 10 	lsr	r11,r3,0x10
80030d4c:	00 99       	mov	r9,r0
80030d4e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030d52:	e0 0a 02 48 	mul	r8,r0,r10
80030d56:	10 3b       	cp.w	r11,r8
80030d58:	c0 a2       	brcc	80030d6c <__avr32_udiv64+0x66>
80030d5a:	20 19       	sub	r9,1
80030d5c:	18 0b       	add	r11,r12
80030d5e:	18 3b       	cp.w	r11,r12
80030d60:	c0 63       	brcs	80030d6c <__avr32_udiv64+0x66>
80030d62:	10 3b       	cp.w	r11,r8
80030d64:	f7 b9 03 01 	sublo	r9,1
80030d68:	f7 dc e3 0b 	addcs	r11,r11,r12
80030d6c:	f6 08 01 01 	sub	r1,r11,r8
80030d70:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030d74:	e2 0e 0d 00 	divu	r0,r1,lr
80030d78:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80030d7c:	00 98       	mov	r8,r0
80030d7e:	e0 0a 02 4a 	mul	r10,r0,r10
80030d82:	14 33       	cp.w	r3,r10
80030d84:	c0 82       	brcc	80030d94 <__avr32_udiv64+0x8e>
80030d86:	20 18       	sub	r8,1
80030d88:	18 03       	add	r3,r12
80030d8a:	18 33       	cp.w	r3,r12
80030d8c:	c0 43       	brcs	80030d94 <__avr32_udiv64+0x8e>
80030d8e:	14 33       	cp.w	r3,r10
80030d90:	f7 b8 03 01 	sublo	r8,1
80030d94:	f1 e9 11 08 	or	r8,r8,r9<<0x10
80030d98:	cd f8       	rjmp	80030f56 <__avr32_udiv64+0x250>
80030d9a:	58 08       	cp.w	r8,0
80030d9c:	c0 51       	brne	80030da6 <__avr32_udiv64+0xa0>
80030d9e:	30 19       	mov	r9,1
80030da0:	f2 08 0d 08 	divu	r8,r9,r8
80030da4:	10 9c       	mov	r12,r8
80030da6:	f8 06 12 00 	clz	r6,r12
80030daa:	c0 41       	brne	80030db2 <__avr32_udiv64+0xac>
80030dac:	18 1b       	sub	r11,r12
80030dae:	30 19       	mov	r9,1
80030db0:	c4 08       	rjmp	80030e30 <__avr32_udiv64+0x12a>
80030db2:	ec 01 11 20 	rsub	r1,r6,32
80030db6:	f4 01 0a 49 	lsr	r9,r10,r1
80030dba:	f8 06 09 4c 	lsl	r12,r12,r6
80030dbe:	f6 06 09 48 	lsl	r8,r11,r6
80030dc2:	f6 01 0a 41 	lsr	r1,r11,r1
80030dc6:	f3 e8 10 08 	or	r8,r9,r8
80030dca:	f8 03 16 10 	lsr	r3,r12,0x10
80030dce:	eb dc c0 10 	bfextu	r5,r12,0x0,0x10
80030dd2:	e2 03 0d 00 	divu	r0,r1,r3
80030dd6:	f0 0b 16 10 	lsr	r11,r8,0x10
80030dda:	00 9e       	mov	lr,r0
80030ddc:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030de0:	e0 05 02 49 	mul	r9,r0,r5
80030de4:	12 3b       	cp.w	r11,r9
80030de6:	c0 a2       	brcc	80030dfa <__avr32_udiv64+0xf4>
80030de8:	20 1e       	sub	lr,1
80030dea:	18 0b       	add	r11,r12
80030dec:	18 3b       	cp.w	r11,r12
80030dee:	c0 63       	brcs	80030dfa <__avr32_udiv64+0xf4>
80030df0:	12 3b       	cp.w	r11,r9
80030df2:	f7 be 03 01 	sublo	lr,1
80030df6:	f7 dc e3 0b 	addcs	r11,r11,r12
80030dfa:	12 1b       	sub	r11,r9
80030dfc:	f1 d8 c0 10 	bfextu	r8,r8,0x0,0x10
80030e00:	f6 03 0d 02 	divu	r2,r11,r3
80030e04:	f1 e3 11 08 	or	r8,r8,r3<<0x10
80030e08:	04 99       	mov	r9,r2
80030e0a:	e4 05 02 4b 	mul	r11,r2,r5
80030e0e:	16 38       	cp.w	r8,r11
80030e10:	c0 a2       	brcc	80030e24 <__avr32_udiv64+0x11e>
80030e12:	20 19       	sub	r9,1
80030e14:	18 08       	add	r8,r12
80030e16:	18 38       	cp.w	r8,r12
80030e18:	c0 63       	brcs	80030e24 <__avr32_udiv64+0x11e>
80030e1a:	16 38       	cp.w	r8,r11
80030e1c:	f7 b9 03 01 	sublo	r9,1
80030e20:	f1 dc e3 08 	addcs	r8,r8,r12
80030e24:	f4 06 09 43 	lsl	r3,r10,r6
80030e28:	f0 0b 01 0b 	sub	r11,r8,r11
80030e2c:	f3 ee 11 09 	or	r9,r9,lr<<0x10
80030e30:	f8 06 16 10 	lsr	r6,r12,0x10
80030e34:	fd dc c0 10 	bfextu	lr,r12,0x0,0x10
80030e38:	f6 06 0d 00 	divu	r0,r11,r6
80030e3c:	e6 0b 16 10 	lsr	r11,r3,0x10
80030e40:	00 9a       	mov	r10,r0
80030e42:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030e46:	e0 0e 02 48 	mul	r8,r0,lr
80030e4a:	10 3b       	cp.w	r11,r8
80030e4c:	c0 a2       	brcc	80030e60 <__avr32_udiv64+0x15a>
80030e4e:	20 1a       	sub	r10,1
80030e50:	18 0b       	add	r11,r12
80030e52:	18 3b       	cp.w	r11,r12
80030e54:	c0 63       	brcs	80030e60 <__avr32_udiv64+0x15a>
80030e56:	10 3b       	cp.w	r11,r8
80030e58:	f7 ba 03 01 	sublo	r10,1
80030e5c:	f7 dc e3 0b 	addcs	r11,r11,r12
80030e60:	f6 08 01 01 	sub	r1,r11,r8
80030e64:	e7 d3 c0 10 	bfextu	r3,r3,0x0,0x10
80030e68:	e2 06 0d 00 	divu	r0,r1,r6
80030e6c:	e7 e1 11 03 	or	r3,r3,r1<<0x10
80030e70:	00 98       	mov	r8,r0
80030e72:	e0 0e 02 4b 	mul	r11,r0,lr
80030e76:	16 33       	cp.w	r3,r11
80030e78:	c0 82       	brcc	80030e88 <__avr32_udiv64+0x182>
80030e7a:	20 18       	sub	r8,1
80030e7c:	18 03       	add	r3,r12
80030e7e:	18 33       	cp.w	r3,r12
80030e80:	c0 43       	brcs	80030e88 <__avr32_udiv64+0x182>
80030e82:	16 33       	cp.w	r3,r11
80030e84:	f7 b8 03 01 	sublo	r8,1
80030e88:	f1 ea 11 08 	or	r8,r8,r10<<0x10
80030e8c:	c6 98       	rjmp	80030f5e <__avr32_udiv64+0x258>
80030e8e:	16 39       	cp.w	r9,r11
80030e90:	e0 8b 00 65 	brhi	80030f5a <__avr32_udiv64+0x254>
80030e94:	f2 09 12 00 	clz	r9,r9
80030e98:	c0 b1       	brne	80030eae <__avr32_udiv64+0x1a8>
80030e9a:	10 3a       	cp.w	r10,r8
80030e9c:	5f 2a       	srhs	r10
80030e9e:	1c 3b       	cp.w	r11,lr
80030ea0:	5f b8       	srhi	r8
80030ea2:	10 4a       	or	r10,r8
80030ea4:	f2 0a 18 00 	cp.b	r10,r9
80030ea8:	c5 90       	breq	80030f5a <__avr32_udiv64+0x254>
80030eaa:	30 18       	mov	r8,1
80030eac:	c5 98       	rjmp	80030f5e <__avr32_udiv64+0x258>
80030eae:	f0 09 09 46 	lsl	r6,r8,r9
80030eb2:	f2 03 11 20 	rsub	r3,r9,32
80030eb6:	fc 09 09 4e 	lsl	lr,lr,r9
80030eba:	f0 03 0a 48 	lsr	r8,r8,r3
80030ebe:	f6 09 09 4c 	lsl	r12,r11,r9
80030ec2:	f4 03 0a 42 	lsr	r2,r10,r3
80030ec6:	ef 46 ff f4 	st.w	r7[-12],r6
80030eca:	f6 03 0a 43 	lsr	r3,r11,r3
80030ece:	18 42       	or	r2,r12
80030ed0:	f1 ee 10 0c 	or	r12,r8,lr
80030ed4:	f8 01 16 10 	lsr	r1,r12,0x10
80030ed8:	ed dc c0 10 	bfextu	r6,r12,0x0,0x10
80030edc:	e6 01 0d 04 	divu	r4,r3,r1
80030ee0:	e4 03 16 10 	lsr	r3,r2,0x10
80030ee4:	08 9e       	mov	lr,r4
80030ee6:	e7 e5 11 03 	or	r3,r3,r5<<0x10
80030eea:	e8 06 02 48 	mul	r8,r4,r6
80030eee:	10 33       	cp.w	r3,r8
80030ef0:	c0 a2       	brcc	80030f04 <__avr32_udiv64+0x1fe>
80030ef2:	20 1e       	sub	lr,1
80030ef4:	18 03       	add	r3,r12
80030ef6:	18 33       	cp.w	r3,r12
80030ef8:	c0 63       	brcs	80030f04 <__avr32_udiv64+0x1fe>
80030efa:	10 33       	cp.w	r3,r8
80030efc:	f7 be 03 01 	sublo	lr,1
80030f00:	e7 dc e3 03 	addcs	r3,r3,r12
80030f04:	10 13       	sub	r3,r8
80030f06:	f7 d2 c0 10 	bfextu	r11,r2,0x0,0x10
80030f0a:	e6 01 0d 00 	divu	r0,r3,r1
80030f0e:	f7 e1 11 0b 	or	r11,r11,r1<<0x10
80030f12:	00 98       	mov	r8,r0
80030f14:	e0 06 02 46 	mul	r6,r0,r6
80030f18:	0c 3b       	cp.w	r11,r6
80030f1a:	c0 a2       	brcc	80030f2e <__avr32_udiv64+0x228>
80030f1c:	20 18       	sub	r8,1
80030f1e:	18 0b       	add	r11,r12
80030f20:	18 3b       	cp.w	r11,r12
80030f22:	c0 63       	brcs	80030f2e <__avr32_udiv64+0x228>
80030f24:	0c 3b       	cp.w	r11,r6
80030f26:	f7 dc e3 0b 	addcs	r11,r11,r12
80030f2a:	f7 b8 03 01 	sublo	r8,1
80030f2e:	f1 ee 11 08 	or	r8,r8,lr<<0x10
80030f32:	ee f4 ff f4 	ld.w	r4,r7[-12]
80030f36:	0c 1b       	sub	r11,r6
80030f38:	f0 04 06 42 	mulu.d	r2,r8,r4
80030f3c:	06 95       	mov	r5,r3
80030f3e:	16 35       	cp.w	r5,r11
80030f40:	e0 8b 00 0a 	brhi	80030f54 <__avr32_udiv64+0x24e>
80030f44:	5f 0b       	sreq	r11
80030f46:	f4 09 09 49 	lsl	r9,r10,r9
80030f4a:	12 32       	cp.w	r2,r9
80030f4c:	5f b9       	srhi	r9
80030f4e:	f7 e9 00 09 	and	r9,r11,r9
80030f52:	c0 60       	breq	80030f5e <__avr32_udiv64+0x258>
80030f54:	20 18       	sub	r8,1
80030f56:	30 09       	mov	r9,0
80030f58:	c0 38       	rjmp	80030f5e <__avr32_udiv64+0x258>
80030f5a:	30 09       	mov	r9,0
80030f5c:	12 98       	mov	r8,r9
80030f5e:	10 9a       	mov	r10,r8
80030f60:	12 93       	mov	r3,r9
80030f62:	10 92       	mov	r2,r8
80030f64:	12 9b       	mov	r11,r9
80030f66:	2f dd       	sub	sp,-12
80030f68:	d8 32       	popm	r0-r7,pc
80030f6a:	d7 03       	nop

80030f6c <__errno>:
80030f6c:	48 28       	lddpc	r8,80030f74 <__errno+0x8>
80030f6e:	70 0c       	ld.w	r12,r8[0x0]
80030f70:	2f 4c       	sub	r12,-12
80030f72:	5e fc       	retal	r12
80030f74:	00 00       	add	r0,r0
80030f76:	20 dc       	sub	r12,13

80030f78 <memcpy>:
80030f78:	58 8a       	cp.w	r10,8
80030f7a:	c2 f5       	brlt	80030fd8 <memcpy+0x60>
80030f7c:	f9 eb 10 09 	or	r9,r12,r11
80030f80:	e2 19 00 03 	andl	r9,0x3,COH
80030f84:	e0 81 00 97 	brne	800310b2 <memcpy+0x13a>
80030f88:	e0 4a 00 20 	cp.w	r10,32
80030f8c:	c3 b4       	brge	80031002 <memcpy+0x8a>
80030f8e:	f4 08 14 02 	asr	r8,r10,0x2
80030f92:	f0 09 11 08 	rsub	r9,r8,8
80030f96:	fe 09 00 2f 	add	pc,pc,r9<<0x2
80030f9a:	76 69       	ld.w	r9,r11[0x18]
80030f9c:	99 69       	st.w	r12[0x18],r9
80030f9e:	76 59       	ld.w	r9,r11[0x14]
80030fa0:	99 59       	st.w	r12[0x14],r9
80030fa2:	76 49       	ld.w	r9,r11[0x10]
80030fa4:	99 49       	st.w	r12[0x10],r9
80030fa6:	76 39       	ld.w	r9,r11[0xc]
80030fa8:	99 39       	st.w	r12[0xc],r9
80030faa:	76 29       	ld.w	r9,r11[0x8]
80030fac:	99 29       	st.w	r12[0x8],r9
80030fae:	76 19       	ld.w	r9,r11[0x4]
80030fb0:	99 19       	st.w	r12[0x4],r9
80030fb2:	76 09       	ld.w	r9,r11[0x0]
80030fb4:	99 09       	st.w	r12[0x0],r9
80030fb6:	f6 08 00 2b 	add	r11,r11,r8<<0x2
80030fba:	f8 08 00 28 	add	r8,r12,r8<<0x2
80030fbe:	e0 1a 00 03 	andl	r10,0x3
80030fc2:	f4 0a 11 04 	rsub	r10,r10,4
80030fc6:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80030fca:	17 a9       	ld.ub	r9,r11[0x2]
80030fcc:	b0 a9       	st.b	r8[0x2],r9
80030fce:	17 99       	ld.ub	r9,r11[0x1]
80030fd0:	b0 99       	st.b	r8[0x1],r9
80030fd2:	17 89       	ld.ub	r9,r11[0x0]
80030fd4:	b0 89       	st.b	r8[0x0],r9
80030fd6:	5e fc       	retal	r12
80030fd8:	f4 0a 11 09 	rsub	r10,r10,9
80030fdc:	fe 0a 00 2f 	add	pc,pc,r10<<0x2
80030fe0:	17 f9       	ld.ub	r9,r11[0x7]
80030fe2:	b8 f9       	st.b	r12[0x7],r9
80030fe4:	17 e9       	ld.ub	r9,r11[0x6]
80030fe6:	b8 e9       	st.b	r12[0x6],r9
80030fe8:	17 d9       	ld.ub	r9,r11[0x5]
80030fea:	b8 d9       	st.b	r12[0x5],r9
80030fec:	17 c9       	ld.ub	r9,r11[0x4]
80030fee:	b8 c9       	st.b	r12[0x4],r9
80030ff0:	17 b9       	ld.ub	r9,r11[0x3]
80030ff2:	b8 b9       	st.b	r12[0x3],r9
80030ff4:	17 a9       	ld.ub	r9,r11[0x2]
80030ff6:	b8 a9       	st.b	r12[0x2],r9
80030ff8:	17 99       	ld.ub	r9,r11[0x1]
80030ffa:	b8 99       	st.b	r12[0x1],r9
80030ffc:	17 89       	ld.ub	r9,r11[0x0]
80030ffe:	b8 89       	st.b	r12[0x0],r9
80031000:	5e fc       	retal	r12
80031002:	eb cd 40 c0 	pushm	r6-r7,lr
80031006:	18 99       	mov	r9,r12
80031008:	22 0a       	sub	r10,32
8003100a:	b7 07       	ld.d	r6,r11++
8003100c:	b3 26       	st.d	r9++,r6
8003100e:	b7 07       	ld.d	r6,r11++
80031010:	b3 26       	st.d	r9++,r6
80031012:	b7 07       	ld.d	r6,r11++
80031014:	b3 26       	st.d	r9++,r6
80031016:	b7 07       	ld.d	r6,r11++
80031018:	b3 26       	st.d	r9++,r6
8003101a:	22 0a       	sub	r10,32
8003101c:	cf 74       	brge	8003100a <memcpy+0x92>
8003101e:	2f 0a       	sub	r10,-16
80031020:	c0 65       	brlt	8003102c <memcpy+0xb4>
80031022:	b7 07       	ld.d	r6,r11++
80031024:	b3 26       	st.d	r9++,r6
80031026:	b7 07       	ld.d	r6,r11++
80031028:	b3 26       	st.d	r9++,r6
8003102a:	21 0a       	sub	r10,16
8003102c:	5c 3a       	neg	r10
8003102e:	fe 0a 00 3f 	add	pc,pc,r10<<0x3
80031032:	d7 03       	nop
80031034:	d7 03       	nop
80031036:	f7 36 00 0e 	ld.ub	r6,r11[14]
8003103a:	f3 66 00 0e 	st.b	r9[14],r6
8003103e:	f7 36 00 0d 	ld.ub	r6,r11[13]
80031042:	f3 66 00 0d 	st.b	r9[13],r6
80031046:	f7 36 00 0c 	ld.ub	r6,r11[12]
8003104a:	f3 66 00 0c 	st.b	r9[12],r6
8003104e:	f7 36 00 0b 	ld.ub	r6,r11[11]
80031052:	f3 66 00 0b 	st.b	r9[11],r6
80031056:	f7 36 00 0a 	ld.ub	r6,r11[10]
8003105a:	f3 66 00 0a 	st.b	r9[10],r6
8003105e:	f7 36 00 09 	ld.ub	r6,r11[9]
80031062:	f3 66 00 09 	st.b	r9[9],r6
80031066:	f7 36 00 08 	ld.ub	r6,r11[8]
8003106a:	f3 66 00 08 	st.b	r9[8],r6
8003106e:	f7 36 00 07 	ld.ub	r6,r11[7]
80031072:	f3 66 00 07 	st.b	r9[7],r6
80031076:	f7 36 00 06 	ld.ub	r6,r11[6]
8003107a:	f3 66 00 06 	st.b	r9[6],r6
8003107e:	f7 36 00 05 	ld.ub	r6,r11[5]
80031082:	f3 66 00 05 	st.b	r9[5],r6
80031086:	f7 36 00 04 	ld.ub	r6,r11[4]
8003108a:	f3 66 00 04 	st.b	r9[4],r6
8003108e:	f7 36 00 03 	ld.ub	r6,r11[3]
80031092:	f3 66 00 03 	st.b	r9[3],r6
80031096:	f7 36 00 02 	ld.ub	r6,r11[2]
8003109a:	f3 66 00 02 	st.b	r9[2],r6
8003109e:	f7 36 00 01 	ld.ub	r6,r11[1]
800310a2:	f3 66 00 01 	st.b	r9[1],r6
800310a6:	f7 36 00 00 	ld.ub	r6,r11[0]
800310aa:	f3 66 00 00 	st.b	r9[0],r6
800310ae:	e3 cd 80 c0 	ldm	sp++,r6-r7,pc
800310b2:	20 1a       	sub	r10,1
800310b4:	f6 0a 07 09 	ld.ub	r9,r11[r10]
800310b8:	f8 0a 0b 09 	st.b	r12[r10],r9
800310bc:	cf b1       	brne	800310b2 <memcpy+0x13a>
800310be:	5e fc       	retal	r12

800310c0 <memset>:
800310c0:	18 98       	mov	r8,r12
800310c2:	c0 38       	rjmp	800310c8 <memset+0x8>
800310c4:	10 cb       	st.b	r8++,r11
800310c6:	20 1a       	sub	r10,1
800310c8:	58 0a       	cp.w	r10,0
800310ca:	cf d1       	brne	800310c4 <memset+0x4>
800310cc:	5e fc       	retal	r12

800310ce <strcpy>:
800310ce:	30 08       	mov	r8,0
800310d0:	f6 08 07 09 	ld.ub	r9,r11[r8]
800310d4:	f8 08 0b 09 	st.b	r12[r8],r9
800310d8:	2f f8       	sub	r8,-1
800310da:	58 09       	cp.w	r9,0
800310dc:	cf a1       	brne	800310d0 <strcpy+0x2>
800310de:	5e fc       	retal	r12

800310e0 <strlen>:
800310e0:	30 09       	mov	r9,0
800310e2:	18 98       	mov	r8,r12
800310e4:	c0 28       	rjmp	800310e8 <strlen+0x8>
800310e6:	2f f8       	sub	r8,-1
800310e8:	11 8a       	ld.ub	r10,r8[0x0]
800310ea:	f2 0a 18 00 	cp.b	r10,r9
800310ee:	cf c1       	brne	800310e6 <strlen+0x6>
800310f0:	f0 0c 01 0c 	sub	r12,r8,r12
800310f4:	5e fc       	retal	r12

Disassembly of section .exception:

80031200 <_evba>:
_evba:

        .org  0x000
        // Unrecoverable Exception.
_handle_Unrecoverable_Exception:
        rjmp $
80031200:	c0 08       	rjmp	80031200 <_evba>
	...

80031204 <_handle_TLB_Multiple_Hit>:

        .org  0x004
        // TLB Multiple Hit.
_handle_TLB_Multiple_Hit:
        rjmp $
80031204:	c0 08       	rjmp	80031204 <_handle_TLB_Multiple_Hit>
	...

80031208 <_handle_Bus_Error_Data_Fetch>:

        .org  0x008
        // Bus Error Data Fetch.
_handle_Bus_Error_Data_Fetch:
        rjmp $
80031208:	c0 08       	rjmp	80031208 <_handle_Bus_Error_Data_Fetch>
	...

8003120c <_handle_Bus_Error_Instruction_Fetch>:

        .org  0x00C
         // Bus Error Instruction Fetch.
_handle_Bus_Error_Instruction_Fetch:
        rjmp $
8003120c:	c0 08       	rjmp	8003120c <_handle_Bus_Error_Instruction_Fetch>
	...

80031210 <_handle_NMI>:

        .org  0x010
        // NMI.
_handle_NMI:
		lda.w   pc, eic_nmi_handler
80031210:	4c ff       	lddpc	pc,8003134c <ipr_val+0x10>
	...

80031214 <_handle_Instruction_Address>:
        .org  0x014
        // Instruction Address.
_handle_Instruction_Address:
        rjmp $
80031214:	c0 08       	rjmp	80031214 <_handle_Instruction_Address>
	...

80031218 <_handle_ITLB_Protection>:

        .org  0x018
        // ITLB Protection.
_handle_ITLB_Protection:
        rjmp $
80031218:	c0 08       	rjmp	80031218 <_handle_ITLB_Protection>
	...

8003121c <_handle_Breakpoint>:

        .org  0x01C
        // Breakpoint.
_handle_Breakpoint:
        rjmp $
8003121c:	c0 08       	rjmp	8003121c <_handle_Breakpoint>
	...

80031220 <_handle_Illegal_Opcode>:

        .org  0x020
        // Illegal Opcode.
_handle_Illegal_Opcode:
        rjmp $
80031220:	c0 08       	rjmp	80031220 <_handle_Illegal_Opcode>
	...

80031224 <_handle_Unimplemented_Instruction>:

        .org  0x024
        // Unimplemented Instruction.
_handle_Unimplemented_Instruction:
        rjmp $
80031224:	c0 08       	rjmp	80031224 <_handle_Unimplemented_Instruction>
	...

80031228 <_handle_Privilege_Violation>:

        .org  0x028
        // Privilege Violation.
_handle_Privilege_Violation:
        rjmp $
80031228:	c0 08       	rjmp	80031228 <_handle_Privilege_Violation>
	...

8003122c <_handle_Floating_Point>:

        .org  0x02C
        // Floating-Point: UNUSED IN AVR32UC and AVR32AP.
_handle_Floating_Point:
        rjmp $
8003122c:	c0 08       	rjmp	8003122c <_handle_Floating_Point>
	...

80031230 <_handle_Coprocessor_Absent>:

        .org  0x030
        // Coprocessor Absent: UNUSED IN AVR32UC.
_handle_Coprocessor_Absent:
        rjmp $
80031230:	c0 08       	rjmp	80031230 <_handle_Coprocessor_Absent>
	...

80031234 <_handle_Data_Address_Read>:

        .org  0x034
        // Data Address (Read).
_handle_Data_Address_Read:
        rjmp $
80031234:	c0 08       	rjmp	80031234 <_handle_Data_Address_Read>
	...

80031238 <_handle_Data_Address_Write>:

        .org  0x038
        // Data Address (Write).
_handle_Data_Address_Write:
        rjmp $
80031238:	c0 08       	rjmp	80031238 <_handle_Data_Address_Write>
	...

8003123c <_handle_DTLB_Protection_Read>:

        .org  0x03C
        // DTLB Protection (Read).
_handle_DTLB_Protection_Read:
        rjmp $
8003123c:	c0 08       	rjmp	8003123c <_handle_DTLB_Protection_Read>
	...

80031240 <_handle_DTLB_Protection_Write>:

        .org  0x040
        // DTLB Protection (Write).
_handle_DTLB_Protection_Write:
        rjmp $
80031240:	c0 08       	rjmp	80031240 <_handle_DTLB_Protection_Write>
	...

80031244 <_handle_DTLB_Modified>:

        .org  0x044
        // DTLB Modified: UNUSED IN AVR32UC.
_handle_DTLB_Modified:
        rjmp $
80031244:	c0 08       	rjmp	80031244 <_handle_DTLB_Modified>
	...

80031250 <_handle_ITLB_Miss>:

        .org  0x050
        // ITLB Miss.
_handle_ITLB_Miss:
        rjmp $
80031250:	c0 08       	rjmp	80031250 <_handle_ITLB_Miss>
	...

80031260 <_handle_DTLB_Miss_Read>:

        .org  0x060
        // DTLB Miss (Read).
_handle_DTLB_Miss_Read:
        rjmp $
80031260:	c0 08       	rjmp	80031260 <_handle_DTLB_Miss_Read>
	...

80031270 <_handle_DTLB_Miss_Write>:

        .org  0x070
        // DTLB Miss (Write).
_handle_DTLB_Miss_Write:
        rjmp $
80031270:	c0 08       	rjmp	80031270 <_handle_DTLB_Miss_Write>
	...

80031300 <_handle_Supervisor_Call>:

        .org  0x100
        // Supervisor Call.
_handle_Supervisor_Call:
        rjmp $
80031300:	c0 08       	rjmp	80031300 <_handle_Supervisor_Call>
80031302:	d7 03       	nop

80031304 <_int0>:
  // CPU upon interrupt entry. No other register is saved by hardware.
#elif __AVR32_AP__
  // PC and SR are automatically saved in respectively RAR_INTx and RSR_INTx by
  // the CPU upon interrupt entry. No other register is saved by hardware.
  pushm   r8-r12, lr
#endif
80031304:	30 0c       	mov	r12,0
80031306:	fe b0 b0 99 	rcall	80027438 <_get_interrupt_handler>
8003130a:	58 0c       	cp.w	r12,0
8003130c:	f8 0f 17 10 	movne	pc,r12
80031310:	d6 03       	rete

80031312 <_int1>:
80031312:	30 1c       	mov	r12,1
80031314:	fe b0 b0 92 	rcall	80027438 <_get_interrupt_handler>
80031318:	58 0c       	cp.w	r12,0
8003131a:	f8 0f 17 10 	movne	pc,r12
8003131e:	d6 03       	rete

80031320 <_int2>:
80031320:	30 2c       	mov	r12,2
80031322:	fe b0 b0 8b 	rcall	80027438 <_get_interrupt_handler>
80031326:	58 0c       	cp.w	r12,0
80031328:	f8 0f 17 10 	movne	pc,r12
8003132c:	d6 03       	rete

8003132e <_int3>:
8003132e:	30 3c       	mov	r12,3
80031330:	fe b0 b0 84 	rcall	80027438 <_get_interrupt_handler>
80031334:	58 0c       	cp.w	r12,0
80031336:	f8 0f 17 10 	movne	pc,r12
8003133a:	d6 03       	rete

8003133c <ipr_val>:
8003133c:	00 00 01 04 40 00 01 12 80 00 01 20 c0 00 01 2e     ....@...... ....
8003134c:	80 01 59 f4 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ..Y.............
8003135c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003136c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003137c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003138c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
8003139c:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313ac:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313bc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313cc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313dc:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313ec:	d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03 d7 03     ................
800313fc:	d7 03 d7 03                                         ....
